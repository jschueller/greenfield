/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../../canvaskit-oc/es/canvaskitoc.js":
/*!*****************************************************!*\
  !*** /home/erik/git/canvaskit-oc/es/canvaskitoc.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer, process, setImmediate) {var CanvasKitInit = function () {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;

  return function (CanvasKitInit) {
    CanvasKitInit = CanvasKitInit || {};
    null;
    var Module = typeof CanvasKitInit !== "undefined" ? CanvasKitInit : {};
    var readyPromiseResolve, readyPromiseReject;
    Module["ready"] = new Promise(function (resolve, reject) {
      readyPromiseResolve = resolve;
      readyPromiseReject = reject;
    });

    function SkDebug(msg) {}

    var skIsDebug = false;

    (function (CanvasKit) {
      CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

      CanvasKit._extraInitializations.push(function () {
        CanvasKit.MakeSWCanvasSurface = function (idOrElement) {
          var canvas = idOrElement;

          if (canvas.tagName !== "CANVAS") {
            canvas = document.getElementById(idOrElement);

            if (!canvas) {
              throw "Canvas with id " + idOrElement + " was not found";
            }
          }

          var surface = CanvasKit.MakeSurface(canvas.width, canvas.height);

          if (surface) {
            surface._canvas = canvas;
          }

          return surface;
        };

        if (!CanvasKit.MakeCanvasSurface) {
          CanvasKit.MakeCanvasSurface = CanvasKit.MakeSWCanvasSurface;
        }

        CanvasKit.MakeSurface = function (width, height) {
          var imageInfo = {
            "width": width,
            "height": height,
            "colorType": CanvasKit.ColorType.RGBA_8888,
            "alphaType": CanvasKit.AlphaType.Unpremul,
            "colorSpace": CanvasKit.SkColorSpace.SRGB
          };
          var pixelLen = width * height * 4;

          var pixelPtr = CanvasKit._malloc(pixelLen);

          var surface = this._getRasterDirectSurface(imageInfo, pixelPtr, width * 4);

          if (surface) {
            surface._canvas = null;
            surface._width = width;
            surface._height = height;
            surface._pixelLen = pixelLen;
            surface._pixelPtr = pixelPtr;
            surface.getCanvas().clear(CanvasKit.TRANSPARENT);
          }

          return surface;
        };

        CanvasKit.SkSurface.prototype.flush = function (dirtyRect) {
          this._flush();

          if (this._canvas) {
            var pixels = new Uint8ClampedArray(CanvasKit.HEAPU8.buffer, this._pixelPtr, this._pixelLen);
            var imageData = new ImageData(pixels, this._width, this._height);

            if (!dirtyRect) {
              this._canvas.getContext("2d").putImageData(imageData, 0, 0);
            } else {
              this._canvas.getContext("2d").putImageData(imageData, 0, 0, dirtyRect.fLeft, dirtyRect.fTop, dirtyRect.fRight - dirtyRect.fLeft, dirtyRect.fBottom - dirtyRect.fTop);
            }
          }
        };

        CanvasKit.SkSurface.prototype.dispose = function () {
          if (this._pixelPtr) {
            CanvasKit._free(this._pixelPtr);
          }

          this["delete"]();
        };

        CanvasKit.currentContext = CanvasKit.currentContext || function () {};

        CanvasKit.setCurrentContext = CanvasKit.setCurrentContext || function () {};
      });
    })(Module);

    (function (CanvasKit) {
      CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

      CanvasKit._extraInitializations.push(function () {
        function get(obj, attr, defaultValue) {
          if (obj && obj.hasOwnProperty(attr)) {
            return obj[attr];
          }

          return defaultValue;
        }

        CanvasKit.makeWebGLContextAsCurrent = function (canvas, attrs) {
          if (!canvas) {
            throw "null canvas passed into makeWebGLContext";
          }

          var contextAttributes = {
            "alpha": get(attrs, "alpha", 1),
            "depth": get(attrs, "depth", 1),
            "stencil": get(attrs, "stencil", 8),
            "antialias": get(attrs, "antialias", 0),
            "premultipliedAlpha": get(attrs, "premultipliedAlpha", 1),
            "preserveDrawingBuffer": get(attrs, "preserveDrawingBuffer", 0),
            "preferLowPowerToHighPerformance": get(attrs, "preferLowPowerToHighPerformance", 0),
            "failIfMajorPerformanceCaveat": get(attrs, "failIfMajorPerformanceCaveat", 0),
            "enableExtensionsByDefault": get(attrs, "enableExtensionsByDefault", 1),
            "explicitSwapControl": get(attrs, "explicitSwapControl", 0),
            "renderViaOffscreenBackBuffer": get(attrs, "renderViaOffscreenBackBuffer", 0)
          };

          if (attrs && attrs["majorVersion"]) {
            contextAttributes["majorVersion"] = attrs["majorVersion"];
          }

          if (contextAttributes["explicitSwapControl"]) {
            throw "explicitSwapControl is not supported";
          }

          this.createContext(canvas, true, true, contextAttributes);
        };

        CanvasKit.GetWebGLContext = function (canvas, attrs) {
          this.makeWebGLContextAsCurrent(canvas, attrs);
          return CanvasKit.currentContext() || 0;
        };

        CanvasKit.MakeWebGLCanvasSurface = function (idOrElement, colorSpace, attrs) {
          colorSpace = colorSpace || null;
          var canvas = idOrElement;
          var isHTMLCanvas = typeof HTMLCanvasElement !== "undefined" && canvas instanceof HTMLCanvasElement;
          var isOffscreenCanvas = canvas instanceof OffscreenCanvas;

          if (!isHTMLCanvas && !isOffscreenCanvas) {
            canvas = document.getElementById(idOrElement);

            if (!canvas) {
              throw "Canvas with id " + idOrElement + " was not found";
            }
          }

          var ctx = this.GetWebGLContext(canvas, attrs);
          var openGLversion = canvas.GLctxObject.version;

          if (!ctx || ctx < 0) {
            throw "failed to create webgl context: err " + ctx;
          }

          var grcontext = this.MakeGrContext(ctx);
          var surface = this.MakeOnScreenGLSurface(grcontext, canvas.width, canvas.height, colorSpace);

          if (!surface) {
            SkDebug("falling back from GPU implementation to a SW based one");
            var newCanvas = canvas.cloneNode(true);
            var parent = canvas.parentNode;
            parent.replaceChild(newCanvas, canvas);
            newCanvas.classList.add("ck-replaced");
            return CanvasKit.MakeSWCanvasSurface(newCanvas);
          }

          surface._context = ctx;
          surface.grContext = grcontext;
          surface.openGLversion = openGLversion;
          return surface;
        };

        CanvasKit.MakeCanvasSurface = CanvasKit.MakeWebGLCanvasSurface;
      });
    })(Module);

    (function (CanvasKit) {
      function clamp(c) {
        return Math.round(Math.max(0, Math.min(c || 0, 255)));
      }

      CanvasKit.Color = function (r, g, b, a) {
        if (a === undefined) {
          a = 1;
        }

        return CanvasKit.Color4f(clamp(r) / 255, clamp(g) / 255, clamp(b) / 255, a);
      };

      CanvasKit.ColorAsInt = function (r, g, b, a) {
        if (a === undefined) {
          a = 255;
        }

        return (clamp(a) << 24 | clamp(r) << 16 | clamp(g) << 8 | clamp(b) << 0 & 268435455) >>> 0;
      };

      CanvasKit.Color4f = function (r, g, b, a) {
        if (a === undefined) {
          a = 1;
        }

        return Float32Array.of(r, g, b, a);
      };

      Object.defineProperty(CanvasKit, "TRANSPARENT", {
        get: function get() {
          return CanvasKit.Color4f(0, 0, 0, 0);
        }
      });
      Object.defineProperty(CanvasKit, "BLACK", {
        get: function get() {
          return CanvasKit.Color4f(0, 0, 0, 1);
        }
      });
      Object.defineProperty(CanvasKit, "WHITE", {
        get: function get() {
          return CanvasKit.Color4f(1, 1, 1, 1);
        }
      });
      Object.defineProperty(CanvasKit, "RED", {
        get: function get() {
          return CanvasKit.Color4f(1, 0, 0, 1);
        }
      });
      Object.defineProperty(CanvasKit, "GREEN", {
        get: function get() {
          return CanvasKit.Color4f(0, 1, 0, 1);
        }
      });
      Object.defineProperty(CanvasKit, "BLUE", {
        get: function get() {
          return CanvasKit.Color4f(0, 0, 1, 1);
        }
      });
      Object.defineProperty(CanvasKit, "YELLOW", {
        get: function get() {
          return CanvasKit.Color4f(1, 1, 0, 1);
        }
      });
      Object.defineProperty(CanvasKit, "CYAN", {
        get: function get() {
          return CanvasKit.Color4f(0, 1, 1, 1);
        }
      });
      Object.defineProperty(CanvasKit, "MAGENTA", {
        get: function get() {
          return CanvasKit.Color4f(1, 0, 1, 1);
        }
      });

      CanvasKit.getColorComponents = function (color) {
        return [Math.floor(color[0] * 255), Math.floor(color[1] * 255), Math.floor(color[2] * 255), color[3]];
      };

      CanvasKit.parseColorString = function (colorStr, colorMap) {
        colorStr = colorStr.toLowerCase();

        if (colorStr.startsWith("#")) {
          var r,
              g,
              b,
              a = 255;

          switch (colorStr.length) {
            case 9:
              a = parseInt(colorStr.slice(7, 9), 16);

            case 7:
              r = parseInt(colorStr.slice(1, 3), 16);
              g = parseInt(colorStr.slice(3, 5), 16);
              b = parseInt(colorStr.slice(5, 7), 16);
              break;

            case 5:
              a = parseInt(colorStr.slice(4, 5), 16) * 17;

            case 4:
              r = parseInt(colorStr.slice(1, 2), 16) * 17;
              g = parseInt(colorStr.slice(2, 3), 16) * 17;
              b = parseInt(colorStr.slice(3, 4), 16) * 17;
              break;
          }

          return CanvasKit.Color(r, g, b, a / 255);
        } else if (colorStr.startsWith("rgba")) {
          colorStr = colorStr.slice(5, -1);
          var nums = colorStr.split(",");
          return CanvasKit.Color(+nums[0], +nums[1], +nums[2], valueOrPercent(nums[3]));
        } else if (colorStr.startsWith("rgb")) {
          colorStr = colorStr.slice(4, -1);
          var nums = colorStr.split(",");
          return CanvasKit.Color(+nums[0], +nums[1], +nums[2], valueOrPercent(nums[3]));
        } else if (colorStr.startsWith("gray(")) {} else if (colorStr.startsWith("hsl")) {} else if (colorMap) {
          var nc = colorMap[colorStr];

          if (nc !== undefined) {
            return nc;
          }
        }

        SkDebug("unrecognized color " + colorStr);
        return CanvasKit.BLACK;
      };

      function isCanvasKitColor(ob) {
        if (!ob) {
          return false;
        }

        return ob.constructor === Float32Array && ob.length === 4;
      }

      function toUint32Color(c) {
        return (clamp(c[3] * 255) << 24 | clamp(c[0] * 255) << 16 | clamp(c[1] * 255) << 8 | clamp(c[2] * 255) << 0) >>> 0;
      }

      function assureIntColors(arr) {
        if (arr instanceof Float32Array) {
          var count = Math.floor(arr.length / 4);
          var result = new Uint32Array(count);

          for (var i = 0; i < count; i++) {
            result[i] = toUint32Color(arr.slice(i * 4, (i + 1) * 4));
          }

          return result;
        } else if (arr instanceof Uint32Array) {
          return arr;
        } else if (arr instanceof Array && arr[0] instanceof Float32Array) {
          return arr.map(toUint32Color);
        }
      }

      function valueOrPercent(aStr) {
        if (aStr === undefined) {
          return 1;
        }

        var a = parseFloat(aStr);

        if (aStr && aStr.indexOf("%") !== -1) {
          return a / 100;
        }

        return a;
      }

      CanvasKit.multiplyByAlpha = function (color, alpha) {
        var result = color.slice();
        result[3] = Math.max(0, Math.min(result[3] * alpha, 1));
        return result;
      };

      function radiansToDegrees(rad) {
        return rad / Math.PI * 180;
      }

      var isNode = !new Function("try {return this===window;}catch(e){ return false;}")();

      function almostEqual(floata, floatb) {
        return Math.abs(floata - floatb) < 1e-5;
      }

      var nullptr = 0;

      function copy1dArray(arr, dest, ptr) {
        if (!arr || !arr.length) {
          return nullptr;
        }

        if (arr["_ck"]) {
          return arr.byteOffset;
        }

        var bytesPerElement = CanvasKit[dest].BYTES_PER_ELEMENT;

        if (!ptr) {
          ptr = CanvasKit._malloc(arr.length * bytesPerElement);
        }

        CanvasKit[dest].set(arr, ptr / bytesPerElement);
        return ptr;
      }

      function copy2dArray(arr, dest, ptr) {
        if (!arr || !arr.length) {
          return nullptr;
        }

        var bytesPerElement = CanvasKit[dest].BYTES_PER_ELEMENT;

        if (!ptr) {
          ptr = CanvasKit._malloc(arr.length * arr[0].length * bytesPerElement);
        }

        dest = CanvasKit[dest];
        var idx = 0;
        var adjustedPtr = ptr / bytesPerElement;

        for (var r = 0; r < arr.length; r++) {
          for (var c = 0; c < arr[0].length; c++) {
            dest[adjustedPtr + idx] = arr[r][c];
            idx++;
          }
        }

        return ptr;
      }

      function copyFlexibleColorArray(colors) {
        var result = {
          colorPtr: nullptr,
          count: colors.length,
          colorType: CanvasKit.ColorType.RGBA_F32
        };

        if (colors instanceof Float32Array) {
          result.colorPtr = copy1dArray(colors, "HEAPF32");
          result.count = colors.length / 4;
        } else if (colors instanceof Uint32Array) {
          result.colorPtr = copy1dArray(colors, "HEAPU32");
          result.colorType = CanvasKit.ColorType.RGBA_8888;
        } else if (colors instanceof Array && colors[0] instanceof Float32Array) {
          result.colorPtr = copy2dArray(colors, "HEAPF32");
        } else {
          throw "Invalid argument to copyFlexibleColorArray, Not a color array " + typeof colors;
        }

        return result;
      }

      var defaultPerspective = Float32Array.of(0, 0, 1);
      var _scratch3x3MatrixPtr = nullptr;

      var _scratch3x3Matrix;

      function copy3x3MatrixToWasm(matr) {
        if (!matr) {
          return nullptr;
        }

        if (matr.length) {
          if (matr.length !== 6 && matr.length !== 9) {
            throw "invalid matrix size";
          }

          var mPtr = copy1dArray(matr, "HEAPF32", _scratch3x3MatrixPtr);

          if (matr.length === 6) {
            CanvasKit.HEAPF32.set(defaultPerspective, 6 + mPtr / 4);
          }

          return mPtr;
        }

        var wasm3x3Matrix = _scratch3x3Matrix["toTypedArray"]();

        wasm3x3Matrix[0] = matr.m11;
        wasm3x3Matrix[1] = matr.m21;
        wasm3x3Matrix[2] = matr.m41;
        wasm3x3Matrix[3] = matr.m12;
        wasm3x3Matrix[4] = matr.m22;
        wasm3x3Matrix[5] = matr.m42;
        wasm3x3Matrix[6] = matr.m14;
        wasm3x3Matrix[7] = matr.m24;
        wasm3x3Matrix[8] = matr.m44;
        return _scratch3x3MatrixPtr;
      }

      var _scratch4x4MatrixPtr = nullptr;

      var _scratch4x4Matrix;

      function copy4x4MatrixToWasm(matr) {
        if (!matr) {
          return nullptr;
        }

        var wasm4x4Matrix = _scratch4x4Matrix["toTypedArray"]();

        if (matr.length) {
          if (matr.length !== 16 && matr.length !== 6 && matr.length !== 9) {
            throw "invalid matrix size";
          }

          if (matr.length === 16) {
            return copy1dArray(matr, "HEAPF32", _scratch4x4MatrixPtr);
          }

          wasm4x4Matrix.fill(0);
          wasm4x4Matrix[0] = matr[0];
          wasm4x4Matrix[1] = matr[1];
          wasm4x4Matrix[3] = matr[2];
          wasm4x4Matrix[4] = matr[3];
          wasm4x4Matrix[5] = matr[4];
          wasm4x4Matrix[7] = matr[5];
          wasm4x4Matrix[12] = matr[6];
          wasm4x4Matrix[13] = matr[7];
          wasm4x4Matrix[15] = matr[8];

          if (matr.length === 6) {
            wasm4x4Matrix[12] = 0;
            wasm4x4Matrix[13] = 0;
            wasm4x4Matrix[15] = 1;
          }

          return _scratch4x4MatrixPtr;
        }

        wasm4x4Matrix[0] = matr.m11;
        wasm4x4Matrix[1] = matr.m21;
        wasm4x4Matrix[2] = matr.m31;
        wasm4x4Matrix[3] = matr.m41;
        wasm4x4Matrix[4] = matr.m12;
        wasm4x4Matrix[5] = matr.m22;
        wasm4x4Matrix[6] = matr.m32;
        wasm4x4Matrix[7] = matr.m42;
        wasm4x4Matrix[8] = matr.m13;
        wasm4x4Matrix[9] = matr.m23;
        wasm4x4Matrix[10] = matr.m33;
        wasm4x4Matrix[11] = matr.m43;
        wasm4x4Matrix[12] = matr.m14;
        wasm4x4Matrix[13] = matr.m24;
        wasm4x4Matrix[14] = matr.m34;
        wasm4x4Matrix[15] = matr.m44;
        return _scratch4x4MatrixPtr;
      }

      function copy4x4MatrixFromWasm(matrPtr) {
        var rv = new Array(16);

        for (var i = 0; i < 16; i++) {
          rv[i] = CanvasKit.HEAPF32[matrPtr / 4 + i];
        }

        return rv;
      }

      var _scratchColorPtr = nullptr;

      var _scratchColor;

      function copyColorToWasm(color4f, ptr) {
        return copy1dArray(color4f, "HEAPF32", ptr || _scratchColorPtr);
      }

      function copyColorComponentsToWasm(r, g, b, a) {
        var colors = _scratchColor["toTypedArray"]();

        colors[0] = r;
        colors[1] = g;
        colors[2] = b;
        colors[3] = a;
        return _scratchColorPtr;
      }

      function copyColorToWasmNoScratch(color4f) {
        return copy1dArray(color4f, "HEAPF32");
      }

      function copyColorFromWasm(colorPtr) {
        var rv = new Float32Array(4);

        for (var i = 0; i < 4; i++) {
          rv[i] = CanvasKit.HEAPF32[colorPtr / 4 + i];
        }

        return rv;
      }

      var Float32ArrayCache = {};

      function loadCmdsTypedArray(arr) {
        var len = 0;

        for (var r = 0; r < arr.length; r++) {
          len += arr[r].length;
        }

        var ta;

        if (Float32ArrayCache[len]) {
          ta = Float32ArrayCache[len];
        } else {
          ta = new Float32Array(len);
          Float32ArrayCache[len] = ta;
        }

        var i = 0;

        for (var r = 0; r < arr.length; r++) {
          for (var c = 0; c < arr[r].length; c++) {
            var item = arr[r][c];
            ta[i] = item;
            i++;
          }
        }

        var ptr = copy1dArray(ta, "HEAPF32");
        return [ptr, len];
      }

      function saveBytesToFile(bytes, fileName) {
        if (!isNode) {
          var blob = new Blob([bytes], {
            type: "application/octet-stream"
          });
          url = window.URL.createObjectURL(blob);
          var a = document.createElement("a");
          document.body.appendChild(a);
          a.href = url;
          a.download = fileName;
          a.click();
          setTimeout(function () {
            URL.revokeObjectURL(url);
            a.remove();
          }, 50);
        } else {
          var fs = __webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js");

          fs.writeFile(fileName, new Buffer(bytes), function (err) {
            if (err) throw err;
          });
        }
      }

      CanvasKit.FourFloatArrayHelper = function () {
        this._floats = [];
        this._ptr = null;
        Object.defineProperty(this, "length", {
          enumerable: true,
          get: function get() {
            return this._floats.length / 4;
          }
        });
      };

      CanvasKit.FourFloatArrayHelper.prototype.push = function (f1, f2, f3, f4) {
        if (this._ptr) {
          SkDebug("Cannot push more points - already built");
          return;
        }

        this._floats.push(f1, f2, f3, f4);
      };

      CanvasKit.FourFloatArrayHelper.prototype.set = function (idx, f1, f2, f3, f4) {
        if (idx < 0 || idx >= this._floats.length / 4) {
          SkDebug("Cannot set index " + idx + ", it is out of range", this._floats.length / 4);
          return;
        }

        idx *= 4;
        var BYTES_PER_ELEMENT = 4;

        if (this._ptr) {
          var floatPtr = this._ptr / BYTES_PER_ELEMENT + idx;
          CanvasKit.HEAPF32[floatPtr] = f1;
          CanvasKit.HEAPF32[floatPtr + 1] = f2;
          CanvasKit.HEAPF32[floatPtr + 2] = f3;
          CanvasKit.HEAPF32[floatPtr + 3] = f4;
          return;
        }

        this._floats[idx] = f1;
        this._floats[idx + 1] = f2;
        this._floats[idx + 2] = f3;
        this._floats[idx + 3] = f4;
      };

      CanvasKit.FourFloatArrayHelper.prototype.build = function () {
        if (this._ptr) {
          return this._ptr;
        }

        this._ptr = copy1dArray(this._floats, "HEAPF32");
        return this._ptr;
      };

      CanvasKit.FourFloatArrayHelper.prototype["delete"] = function () {
        if (this._ptr) {
          CanvasKit._free(this._ptr);

          this._ptr = null;
        }
      };

      CanvasKit.OneUIntArrayHelper = function () {
        this._uints = [];
        this._ptr = null;
        Object.defineProperty(this, "length", {
          enumerable: true,
          get: function get() {
            return this._uints.length;
          }
        });
      };

      CanvasKit.OneUIntArrayHelper.prototype.push = function (u) {
        if (this._ptr) {
          SkDebug("Cannot push more points - already built");
          return;
        }

        this._uints.push(u);
      };

      CanvasKit.OneUIntArrayHelper.prototype.set = function (idx, u) {
        if (idx < 0 || idx >= this._uints.length) {
          SkDebug("Cannot set index " + idx + ", it is out of range", this._uints.length);
          return;
        }

        idx *= 4;
        var BYTES_PER_ELEMENT = 4;

        if (this._ptr) {
          var uintPtr = this._ptr / BYTES_PER_ELEMENT + idx;
          CanvasKit.HEAPU32[uintPtr] = u;
          return;
        }

        this._uints[idx] = u;
      };

      CanvasKit.OneUIntArrayHelper.prototype.build = function () {
        if (this._ptr) {
          return this._ptr;
        }

        this._ptr = copy1dArray(this._uints, "HEAPU32");
        return this._ptr;
      };

      CanvasKit.OneUIntArrayHelper.prototype["delete"] = function () {
        if (this._ptr) {
          CanvasKit._free(this._ptr);

          this._ptr = null;
        }
      };

      CanvasKit.SkRectBuilder = CanvasKit.FourFloatArrayHelper;
      CanvasKit.RSXFormBuilder = CanvasKit.FourFloatArrayHelper;
      CanvasKit.SkColorBuilder = CanvasKit.OneUIntArrayHelper;

      CanvasKit.Malloc = function (typedArray, len) {
        var byteLen = len * typedArray.BYTES_PER_ELEMENT;

        var ptr = CanvasKit._malloc(byteLen);

        return {
          "_ck": true,
          "length": len,
          "byteOffset": ptr,
          typedArray: null,
          "subarray": function subarray(start, end) {
            var sa = this["toTypedArray"]().subarray(start, end);
            sa["_ck"] = true;
            return sa;
          },
          "toTypedArray": function toTypedArray() {
            if (this.typedArray && this.typedArray.length) {
              return this.typedArray;
            }

            this.typedArray = new typedArray(CanvasKit.HEAPU8.buffer, ptr, len);
            this.typedArray["_ck"] = true;
            return this.typedArray;
          }
        };
      };

      CanvasKit.Free = function (mallocObj) {
        CanvasKit._free(mallocObj["byteOffset"]);

        mallocObj["byteOffset"] = nullptr;
        mallocObj["toTypedArray"] = null;
        mallocObj.typedArray = null;
      };

      function freeArraysThatAreNotMallocedByUsers(ptr, arr) {
        if (arr && !arr["_ck"]) {
          CanvasKit._free(ptr);
        }
      }

      CanvasKit.onRuntimeInitialized = function () {
        _scratchColor = CanvasKit.Malloc(Float32Array, 4);
        _scratchColorPtr = _scratchColor["byteOffset"];
        _scratch4x4Matrix = CanvasKit.Malloc(Float32Array, 16);
        _scratch4x4MatrixPtr = _scratch4x4Matrix["byteOffset"];
        _scratch3x3Matrix = CanvasKit.Malloc(Float32Array, 9);
        _scratch3x3MatrixPtr = _scratch3x3Matrix["byteOffset"];
        CanvasKit.SkColorSpace.SRGB = CanvasKit.SkColorSpace._MakeSRGB();
        CanvasKit.SkColorSpace.DISPLAY_P3 = CanvasKit.SkColorSpace._MakeDisplayP3();
        CanvasKit.SkColorSpace.ADOBE_RGB = CanvasKit.SkColorSpace._MakeAdobeRGB();
        CanvasKit.SkMatrix = {};

        function sdot() {
          var acc = 0;

          for (var i = 0; i < arguments.length - 1; i += 2) {
            acc += arguments[i] * arguments[i + 1];
          }

          return acc;
        }

        var identityN = function identityN(n) {
          var size = n * n;
          var m = new Array(size);

          while (size--) {
            m[size] = size % (n + 1) == 0 ? 1 : 0;
          }

          return m;
        };

        var stride = function stride(v, m, width, offset, colStride) {
          for (var i = 0; i < v.length; i++) {
            m[i * width + (i * colStride + offset + width) % width] = v[i];
          }

          return m;
        };

        CanvasKit.SkMatrix.identity = function () {
          return identityN(3);
        };

        CanvasKit.SkMatrix.invert = function (m) {
          var det = m[0] * m[4] * m[8] + m[1] * m[5] * m[6] + m[2] * m[3] * m[7] - m[2] * m[4] * m[6] - m[1] * m[3] * m[8] - m[0] * m[5] * m[7];

          if (!det) {
            SkDebug("Warning, uninvertible matrix");
            return null;
          }

          return [(m[4] * m[8] - m[5] * m[7]) / det, (m[2] * m[7] - m[1] * m[8]) / det, (m[1] * m[5] - m[2] * m[4]) / det, (m[5] * m[6] - m[3] * m[8]) / det, (m[0] * m[8] - m[2] * m[6]) / det, (m[2] * m[3] - m[0] * m[5]) / det, (m[3] * m[7] - m[4] * m[6]) / det, (m[1] * m[6] - m[0] * m[7]) / det, (m[0] * m[4] - m[1] * m[3]) / det];
        };

        CanvasKit.SkMatrix.mapPoints = function (matrix, ptArr) {
          if (skIsDebug && ptArr.length % 2) {
            throw "mapPoints requires an even length arr";
          }

          for (var i = 0; i < ptArr.length; i += 2) {
            var x = ptArr[i],
                y = ptArr[i + 1];
            var denom = matrix[6] * x + matrix[7] * y + matrix[8];
            var xTrans = matrix[0] * x + matrix[1] * y + matrix[2];
            var yTrans = matrix[3] * x + matrix[4] * y + matrix[5];
            ptArr[i] = xTrans / denom;
            ptArr[i + 1] = yTrans / denom;
          }

          return ptArr;
        };

        function isnumber(val) {
          return val !== NaN;
        }

        function multiply(m1, m2, size) {
          if (skIsDebug && (!m1.every(isnumber) || !m2.every(isnumber))) {
            throw "Some members of matrices are NaN m1=" + m1 + ", m2=" + m2 + "";
          }

          if (skIsDebug && m1.length !== m2.length) {
            throw "Undefined for matrices of different sizes. m1.length=" + m1.length + ", m2.length=" + m2.length;
          }

          if (skIsDebug && size * size !== m1.length) {
            throw "Undefined for non-square matrices. array size was " + size;
          }

          var result = Array(m1.length);

          for (var r = 0; r < size; r++) {
            for (var c = 0; c < size; c++) {
              var acc = 0;

              for (var k = 0; k < size; k++) {
                acc += m1[size * r + k] * m2[size * k + c];
              }

              result[r * size + c] = acc;
            }
          }

          return result;
        }

        function multiplyMany(size, listOfMatrices) {
          if (skIsDebug && listOfMatrices.length < 2) {
            throw "multiplication expected two or more matrices";
          }

          var result = multiply(listOfMatrices[0], listOfMatrices[1], size);
          var next = 2;

          while (next < listOfMatrices.length) {
            result = multiply(result, listOfMatrices[next], size);
            next++;
          }

          return result;
        }

        CanvasKit.SkMatrix.multiply = function () {
          return multiplyMany(3, arguments);
        };

        CanvasKit.SkMatrix.rotated = function (radians, px, py) {
          px = px || 0;
          py = py || 0;
          var sinV = Math.sin(radians);
          var cosV = Math.cos(radians);
          return [cosV, -sinV, sdot(sinV, py, 1 - cosV, px), sinV, cosV, sdot(-sinV, px, 1 - cosV, py), 0, 0, 1];
        };

        CanvasKit.SkMatrix.scaled = function (sx, sy, px, py) {
          px = px || 0;
          py = py || 0;
          var m = stride([sx, sy], identityN(3), 3, 0, 1);
          return stride([px - sx * px, py - sy * py], m, 3, 2, 0);
        };

        CanvasKit.SkMatrix.skewed = function (kx, ky, px, py) {
          px = px || 0;
          py = py || 0;
          var m = stride([kx, ky], identityN(3), 3, 1, -1);
          return stride([-kx * px, -ky * py], m, 3, 2, 0);
        };

        CanvasKit.SkMatrix.translated = function (dx, dy) {
          return stride(arguments, identityN(3), 3, 2, 0);
        };

        CanvasKit.SkVector = {};

        CanvasKit.SkVector.dot = function (a, b) {
          if (skIsDebug && a.length !== b.length) {
            throw "Cannot perform dot product on arrays of different length (" + a.length + " vs " + b.length + ")";
          }

          return a.map(function (v, i) {
            return v * b[i];
          }).reduce(function (acc, cur) {
            return acc + cur;
          });
        };

        CanvasKit.SkVector.lengthSquared = function (v) {
          return CanvasKit.SkVector.dot(v, v);
        };

        CanvasKit.SkVector.length = function (v) {
          return Math.sqrt(CanvasKit.SkVector.lengthSquared(v));
        };

        CanvasKit.SkVector.mulScalar = function (v, s) {
          return v.map(function (i) {
            return i * s;
          });
        };

        CanvasKit.SkVector.add = function (a, b) {
          return a.map(function (v, i) {
            return v + b[i];
          });
        };

        CanvasKit.SkVector.sub = function (a, b) {
          return a.map(function (v, i) {
            return v - b[i];
          });
        };

        CanvasKit.SkVector.dist = function (a, b) {
          return CanvasKit.SkVector.length(CanvasKit.SkVector.sub(a, b));
        };

        CanvasKit.SkVector.normalize = function (v) {
          return CanvasKit.SkVector.mulScalar(v, 1 / CanvasKit.SkVector.length(v));
        };

        CanvasKit.SkVector.cross = function (a, b) {
          if (skIsDebug && (a.length !== 3 || a.length !== 3)) {
            throw "Cross product is only defined for 3-dimensional vectors (a.length=" + a.length + ", b.length=" + b.length + ")";
          }

          return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
        };

        CanvasKit.SkM44 = {};

        CanvasKit.SkM44.identity = function () {
          return identityN(4);
        };

        CanvasKit.SkM44.translated = function (vec) {
          return stride(vec, identityN(4), 4, 3, 0);
        };

        CanvasKit.SkM44.scaled = function (vec) {
          return stride(vec, identityN(4), 4, 0, 1);
        };

        CanvasKit.SkM44.rotated = function (axisVec, radians) {
          return CanvasKit.SkM44.rotatedUnitSinCos(CanvasKit.SkVector.normalize(axisVec), Math.sin(radians), Math.cos(radians));
        };

        CanvasKit.SkM44.rotatedUnitSinCos = function (axisVec, sinAngle, cosAngle) {
          var x = axisVec[0];
          var y = axisVec[1];
          var z = axisVec[2];
          var c = cosAngle;
          var s = sinAngle;
          var t = 1 - c;
          return [t * x * x + c, t * x * y - s * z, t * x * z + s * y, 0, t * x * y + s * z, t * y * y + c, t * y * z - s * x, 0, t * x * z - s * y, t * y * z + s * x, t * z * z + c, 0, 0, 0, 0, 1];
        };

        CanvasKit.SkM44.lookat = function (eyeVec, centerVec, upVec) {
          var f = CanvasKit.SkVector.normalize(CanvasKit.SkVector.sub(centerVec, eyeVec));
          var u = CanvasKit.SkVector.normalize(upVec);
          var s = CanvasKit.SkVector.normalize(CanvasKit.SkVector.cross(f, u));
          var m = CanvasKit.SkM44.identity();
          stride(s, m, 4, 0, 0);
          stride(CanvasKit.SkVector.cross(s, f), m, 4, 1, 0);
          stride(CanvasKit.SkVector.mulScalar(f, -1), m, 4, 2, 0);
          stride(eyeVec, m, 4, 3, 0);
          var m2 = CanvasKit.SkM44.invert(m);

          if (m2 === null) {
            return CanvasKit.SkM44.identity();
          }

          return m2;
        };

        CanvasKit.SkM44.perspective = function (near, far, angle) {
          if (skIsDebug && far <= near) {
            throw "far must be greater than near when constructing SkM44 using perspective.";
          }

          var dInv = 1 / (far - near);
          var halfAngle = angle / 2;
          var cot = Math.cos(halfAngle) / Math.sin(halfAngle);
          return [cot, 0, 0, 0, 0, cot, 0, 0, 0, 0, (far + near) * dInv, 2 * far * near * dInv, 0, 0, -1, 1];
        };

        CanvasKit.SkM44.rc = function (m, r, c) {
          return m[r * 4 + c];
        };

        CanvasKit.SkM44.multiply = function () {
          return multiplyMany(4, arguments);
        };

        CanvasKit.SkM44.invert = function (m) {
          if (skIsDebug && !m.every(isnumber)) {
            throw "some members of matrix are NaN m=" + m;
          }

          var a00 = m[0];
          var a01 = m[4];
          var a02 = m[8];
          var a03 = m[12];
          var a10 = m[1];
          var a11 = m[5];
          var a12 = m[9];
          var a13 = m[13];
          var a20 = m[2];
          var a21 = m[6];
          var a22 = m[10];
          var a23 = m[14];
          var a30 = m[3];
          var a31 = m[7];
          var a32 = m[11];
          var a33 = m[15];
          var b00 = a00 * a11 - a01 * a10;
          var b01 = a00 * a12 - a02 * a10;
          var b02 = a00 * a13 - a03 * a10;
          var b03 = a01 * a12 - a02 * a11;
          var b04 = a01 * a13 - a03 * a11;
          var b05 = a02 * a13 - a03 * a12;
          var b06 = a20 * a31 - a21 * a30;
          var b07 = a20 * a32 - a22 * a30;
          var b08 = a20 * a33 - a23 * a30;
          var b09 = a21 * a32 - a22 * a31;
          var b10 = a21 * a33 - a23 * a31;
          var b11 = a22 * a33 - a23 * a32;
          var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
          var invdet = 1 / det;

          if (det === 0 || invdet === Infinity) {
            SkDebug("Warning, uninvertible matrix");
            return null;
          }

          b00 *= invdet;
          b01 *= invdet;
          b02 *= invdet;
          b03 *= invdet;
          b04 *= invdet;
          b05 *= invdet;
          b06 *= invdet;
          b07 *= invdet;
          b08 *= invdet;
          b09 *= invdet;
          b10 *= invdet;
          b11 *= invdet;
          var tmp = [a11 * b11 - a12 * b10 + a13 * b09, a12 * b08 - a10 * b11 - a13 * b07, a10 * b10 - a11 * b08 + a13 * b06, a11 * b07 - a10 * b09 - a12 * b06, a02 * b10 - a01 * b11 - a03 * b09, a00 * b11 - a02 * b08 + a03 * b07, a01 * b08 - a00 * b10 - a03 * b06, a00 * b09 - a01 * b07 + a02 * b06, a31 * b05 - a32 * b04 + a33 * b03, a32 * b02 - a30 * b05 - a33 * b01, a30 * b04 - a31 * b02 + a33 * b00, a31 * b01 - a30 * b03 - a32 * b00, a22 * b04 - a21 * b05 - a23 * b03, a20 * b05 - a22 * b02 + a23 * b01, a21 * b02 - a20 * b04 - a23 * b00, a20 * b03 - a21 * b01 + a22 * b00];

          if (!tmp.every(function (val) {
            return val !== NaN && val !== Infinity && val !== -Infinity;
          })) {
            SkDebug("inverted matrix contains infinities or NaN " + tmp);
            return null;
          }

          return tmp;
        };

        CanvasKit.SkM44.transpose = function (m) {
          return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
        };

        CanvasKit.SkM44.mustInvert = function (m) {
          var m2 = CanvasKit.SkM44.invert(m);

          if (m2 === null) {
            throw "Matrix not invertible";
          }

          return m2;
        };

        CanvasKit.SkM44.setupCamera = function (area, zscale, cam) {
          var camera = CanvasKit.SkM44.lookat(cam["eye"], cam["coa"], cam["up"]);
          var perspective = CanvasKit.SkM44.perspective(cam["near"], cam["far"], cam["angle"]);
          var center = [(area.fLeft + area.fRight) / 2, (area.fTop + area.fBottom) / 2, 0];
          var viewScale = [(area.fRight - area.fLeft) / 2, (area.fBottom - area.fTop) / 2, zscale];
          var viewport = CanvasKit.SkM44.multiply(CanvasKit.SkM44.translated(center), CanvasKit.SkM44.scaled(viewScale));
          return CanvasKit.SkM44.multiply(viewport, perspective, camera, CanvasKit.SkM44.mustInvert(viewport));
        };

        var rScale = 0;
        var gScale = 6;
        var bScale = 12;
        var aScale = 18;
        var rPostTrans = 4;
        var gPostTrans = 9;
        var bPostTrans = 14;
        var aPostTrans = 19;
        CanvasKit.SkColorMatrix = {};

        CanvasKit.SkColorMatrix.identity = function () {
          var m = new Float32Array(20);
          m[rScale] = 1;
          m[gScale] = 1;
          m[bScale] = 1;
          m[aScale] = 1;
          return m;
        };

        CanvasKit.SkColorMatrix.scaled = function (rs, gs, bs, as) {
          var m = new Float32Array(20);
          m[rScale] = rs;
          m[gScale] = gs;
          m[bScale] = bs;
          m[aScale] = as;
          return m;
        };

        var rotateIndices = [[6, 7, 11, 12], [0, 10, 2, 12], [0, 1, 5, 6]];

        CanvasKit.SkColorMatrix.rotated = function (axis, sine, cosine) {
          var m = CanvasKit.SkColorMatrix.identity();
          var indices = rotateIndices[axis];
          m[indices[0]] = cosine;
          m[indices[1]] = sine;
          m[indices[2]] = -sine;
          m[indices[3]] = cosine;
          return m;
        };

        CanvasKit.SkColorMatrix.postTranslate = function (m, dr, dg, db, da) {
          m[rPostTrans] += dr;
          m[gPostTrans] += dg;
          m[bPostTrans] += db;
          m[aPostTrans] += da;
          return m;
        };

        CanvasKit.SkColorMatrix.concat = function (outer, inner) {
          var m = new Float32Array(20);
          var index = 0;

          for (var j = 0; j < 20; j += 5) {
            for (var i = 0; i < 4; i++) {
              m[index++] = outer[j + 0] * inner[i + 0] + outer[j + 1] * inner[i + 5] + outer[j + 2] * inner[i + 10] + outer[j + 3] * inner[i + 15];
            }

            m[index++] = outer[j + 0] * inner[4] + outer[j + 1] * inner[9] + outer[j + 2] * inner[14] + outer[j + 3] * inner[19] + outer[j + 4];
          }

          return m;
        };

        CanvasKit.SkPath.MakeFromCmds = function (cmds) {
          var ptrLen = loadCmdsTypedArray(cmds);

          var path = CanvasKit.SkPath._MakeFromCmds(ptrLen[0], ptrLen[1]);

          CanvasKit._free(ptrLen[0]);

          return path;
        };

        CanvasKit.MakePathFromCmds = CanvasKit.SkPath.MakeFromCmds;

        CanvasKit.SkPath.MakeFromVerbsPointsWeights = function (verbs, pts, weights) {
          var verbsPtr = copy1dArray(verbs, "HEAPU8");
          var pointsPtr = copy1dArray(pts, "HEAPF32");
          var weightsPtr = copy1dArray(weights, "HEAPF32");
          var numWeights = weights && weights.length || 0;

          var path = CanvasKit.SkPath._MakeFromVerbsPointsWeights(verbsPtr, verbs.length, pointsPtr, pts.length, weightsPtr, numWeights);

          freeArraysThatAreNotMallocedByUsers(verbsPtr, verbs);
          freeArraysThatAreNotMallocedByUsers(pointsPtr, pts);
          freeArraysThatAreNotMallocedByUsers(weightsPtr, weights);
          return path;
        };

        CanvasKit.SkPath.prototype.addArc = function (oval, startAngle, sweepAngle) {
          this._addArc(oval, startAngle, sweepAngle);

          return this;
        };

        CanvasKit.SkPath.prototype.addOval = function (oval, isCCW, startIndex) {
          if (startIndex === undefined) {
            startIndex = 1;
          }

          this._addOval(oval, !!isCCW, startIndex);

          return this;
        };

        CanvasKit.SkPath.prototype.addPath = function () {
          var args = Array.prototype.slice.call(arguments);
          var path = args[0];
          var extend = false;

          if (typeof args[args.length - 1] === "boolean") {
            extend = args.pop();
          }

          if (args.length === 1) {
            this._addPath(path, 1, 0, 0, 0, 1, 0, 0, 0, 1, extend);
          } else if (args.length === 2) {
            var a = args[1];

            this._addPath(path, a[0], a[1], a[2], a[3], a[4], a[5], a[6] || 0, a[7] || 0, a[8] || 1, extend);
          } else if (args.length === 7 || args.length === 10) {
            var a = args;

            this._addPath(path, a[1], a[2], a[3], a[4], a[5], a[6], a[7] || 0, a[8] || 0, a[9] || 1, extend);
          } else {
            SkDebug("addPath expected to take 1, 2, 7, or 10 required args. Got " + args.length);
            return null;
          }

          return this;
        };

        CanvasKit.SkPath.prototype.addPoly = function (points, close) {
          var ptr;
          var n;

          if (points["_ck"]) {
            ptr = points.byteOffset;
            n = points.length / 2;
          } else {
            ptr = copy2dArray(points, "HEAPF32");
            n = points.length;
          }

          this._addPoly(ptr, n, close);

          freeArraysThatAreNotMallocedByUsers(ptr, points);
          return this;
        };

        CanvasKit.SkPath.prototype.addRect = function () {
          if (arguments.length === 1 || arguments.length === 2) {
            var r = arguments[0];
            var ccw = arguments[1] || false;

            this._addRect(r.fLeft, r.fTop, r.fRight, r.fBottom, ccw);
          } else if (arguments.length === 4 || arguments.length === 5) {
            var a = arguments;

            this._addRect(a[0], a[1], a[2], a[3], a[4] || false);
          } else {
            SkDebug("addRect expected to take 1, 2, 4, or 5 args. Got " + arguments.length);
            return null;
          }

          return this;
        };

        CanvasKit.SkPath.prototype.addRoundRect = function () {
          var args = arguments;

          if (args.length === 3 || args.length === 6) {
            var radii = args[args.length - 2];
          } else if (args.length === 4 || args.length === 7) {
            var rx = args[args.length - 3];
            var ry = args[args.length - 2];
            var radii = [rx, ry, rx, ry, rx, ry, rx, ry];
          } else {
            SkDebug("addRoundRect expected to take 3, 4, 6, or 7 args. Got " + args.length);
            return null;
          }

          if (radii.length !== 8) {
            SkDebug("addRoundRect needs 8 radii provided. Got " + radii.length);
            return null;
          }

          var rptr = copy1dArray(radii, "HEAPF32");

          if (args.length === 3 || args.length === 4) {
            var r = args[0];
            var ccw = args[args.length - 1];

            this._addRoundRect(r.fLeft, r.fTop, r.fRight, r.fBottom, rptr, ccw);
          } else if (args.length === 6 || args.length === 7) {
            var a = args;

            this._addRoundRect(a[0], a[1], a[2], a[3], rptr, ccw);
          }

          freeArraysThatAreNotMallocedByUsers(rptr, radii);
          return this;
        };

        CanvasKit.SkPath.prototype.addVerbsPointsWeights = function (verbs, points, weights) {
          var verbsPtr = copy1dArray(verbs, "HEAPU8");
          var pointsPtr = copy1dArray(points, "HEAPF32");
          var weightsPtr = copy1dArray(weights, "HEAPF32");
          var numWeights = weights && weights.length || 0;

          this._addVerbsPointsWeights(verbsPtr, verbs.length, pointsPtr, points.length, weightsPtr, numWeights);

          freeArraysThatAreNotMallocedByUsers(verbsPtr, verbs);
          freeArraysThatAreNotMallocedByUsers(pointsPtr, points);
          freeArraysThatAreNotMallocedByUsers(weightsPtr, weights);
        };

        CanvasKit.SkPath.prototype.arc = function (x, y, radius, startAngle, endAngle, ccw) {
          var bounds = CanvasKit.LTRBRect(x - radius, y - radius, x + radius, y + radius);
          var sweep = radiansToDegrees(endAngle - startAngle) - 360 * !!ccw;
          var temp = new CanvasKit.SkPath();
          temp.addArc(bounds, radiansToDegrees(startAngle), sweep);
          this.addPath(temp, true);
          temp["delete"]();
          return this;
        };

        CanvasKit.SkPath.prototype.arcTo = function () {
          var args = arguments;

          if (args.length === 5) {
            this._arcToTangent(args[0], args[1], args[2], args[3], args[4]);
          } else if (args.length === 4) {
            this._arcToOval(args[0], args[1], args[2], args[3]);
          } else if (args.length === 7) {
            this._arcToRotated(args[0], args[1], args[2], !!args[3], !!args[4], args[5], args[6]);
          } else {
            throw "Invalid args for arcTo. Expected 4, 5, or 7, got " + args.length;
          }

          return this;
        };

        CanvasKit.SkPath.prototype.arcToOval = function (oval, startAngle, sweepAngle, forceMoveTo) {
          this._arcToOval(oval, startAngle, sweepAngle, forceMoveTo);

          return this;
        };

        CanvasKit.SkPath.prototype.arcToRotated = function (rx, ry, xAxisRotate, useSmallArc, isCCW, x, y) {
          this._arcToRotated(rx, ry, xAxisRotate, !!useSmallArc, !!isCCW, x, y);

          return this;
        };

        CanvasKit.SkPath.prototype.arcToTangent = function (x1, y1, x2, y2, radius) {
          this._arcToTangent(x1, y1, x2, y2, radius);

          return this;
        };

        CanvasKit.SkPath.prototype.close = function () {
          this._close();

          return this;
        };

        CanvasKit.SkPath.prototype.conicTo = function (x1, y1, x2, y2, w) {
          this._conicTo(x1, y1, x2, y2, w);

          return this;
        };

        CanvasKit.SkPath.prototype.cubicTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
          this._cubicTo(cp1x, cp1y, cp2x, cp2y, x, y);

          return this;
        };

        CanvasKit.SkPath.prototype.dash = function (on, off, phase) {
          if (this._dash(on, off, phase)) {
            return this;
          }

          return null;
        };

        CanvasKit.SkPath.prototype.lineTo = function (x, y) {
          this._lineTo(x, y);

          return this;
        };

        CanvasKit.SkPath.prototype.moveTo = function (x, y) {
          this._moveTo(x, y);

          return this;
        };

        CanvasKit.SkPath.prototype.offset = function (dx, dy) {
          this._transform(1, 0, dx, 0, 1, dy, 0, 0, 1);

          return this;
        };

        CanvasKit.SkPath.prototype.quadTo = function (cpx, cpy, x, y) {
          this._quadTo(cpx, cpy, x, y);

          return this;
        };

        CanvasKit.SkPath.prototype.rArcTo = function (rx, ry, xAxisRotate, useSmallArc, isCCW, dx, dy) {
          this._rArcTo(rx, ry, xAxisRotate, useSmallArc, isCCW, dx, dy);

          return this;
        };

        CanvasKit.SkPath.prototype.rConicTo = function (dx1, dy1, dx2, dy2, w) {
          this._rConicTo(dx1, dy1, dx2, dy2, w);

          return this;
        };

        CanvasKit.SkPath.prototype.rCubicTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
          this._rCubicTo(cp1x, cp1y, cp2x, cp2y, x, y);

          return this;
        };

        CanvasKit.SkPath.prototype.rLineTo = function (dx, dy) {
          this._rLineTo(dx, dy);

          return this;
        };

        CanvasKit.SkPath.prototype.rMoveTo = function (dx, dy) {
          this._rMoveTo(dx, dy);

          return this;
        };

        CanvasKit.SkPath.prototype.rQuadTo = function (cpx, cpy, x, y) {
          this._rQuadTo(cpx, cpy, x, y);

          return this;
        };

        CanvasKit.SkPath.prototype.stroke = function (opts) {
          opts = opts || {};
          opts["width"] = opts["width"] || 1;
          opts["miter_limit"] = opts["miter_limit"] || 4;
          opts["cap"] = opts["cap"] || CanvasKit.StrokeCap.Butt;
          opts["join"] = opts["join"] || CanvasKit.StrokeJoin.Miter;
          opts["precision"] = opts["precision"] || 1;

          if (this._stroke(opts)) {
            return this;
          }

          return null;
        };

        CanvasKit.SkPath.prototype.transform = function () {
          if (arguments.length === 1) {
            var a = arguments[0];

            this._transform(a[0], a[1], a[2], a[3], a[4], a[5], a[6] || 0, a[7] || 0, a[8] || 1);
          } else if (arguments.length === 6 || arguments.length === 9) {
            var a = arguments;

            this._transform(a[0], a[1], a[2], a[3], a[4], a[5], a[6] || 0, a[7] || 0, a[8] || 1);
          } else {
            throw "transform expected to take 1 or 9 arguments. Got " + arguments.length;
          }

          return this;
        };

        CanvasKit.SkPath.prototype.trim = function (startT, stopT, isComplement) {
          if (this._trim(startT, stopT, !!isComplement)) {
            return this;
          }

          return null;
        };

        CanvasKit.SkImage.prototype.encodeToData = function () {
          if (!arguments.length) {
            return this._encodeToData();
          }

          if (arguments.length === 2) {
            var a = arguments;
            return this._encodeToDataWithFormat(a[0], a[1]);
          }

          throw "encodeToData expected to take 0 or 2 arguments. Got " + arguments.length;
        };

        CanvasKit.SkImage.prototype.makeShader = function (xTileMode, yTileMode, localMatrix) {
          var localMatrixPtr = copy3x3MatrixToWasm(localMatrix);
          return this._makeShader(xTileMode, yTileMode, localMatrixPtr);
        };

        CanvasKit.SkImage.prototype.readPixels = function (imageInfo, srcX, srcY) {
          var rowBytes;

          switch (imageInfo["colorType"]) {
            case CanvasKit.ColorType.RGBA_8888:
              rowBytes = imageInfo.width * 4;
              break;

            case CanvasKit.ColorType.RGBA_F32:
              rowBytes = imageInfo.width * 16;
              break;

            default:
              SkDebug("Colortype not yet supported");
              return;
          }

          var pBytes = rowBytes * imageInfo.height;

          var pPtr = CanvasKit._malloc(pBytes);

          if (!this._readPixels(imageInfo, pPtr, rowBytes, srcX, srcY)) {
            SkDebug("Could not read pixels with the given inputs");
            return null;
          }

          var retVal = null;

          switch (imageInfo["colorType"]) {
            case CanvasKit.ColorType.RGBA_8888:
              retVal = new Uint8Array(CanvasKit.HEAPU8.buffer, pPtr, pBytes).slice();
              break;

            case CanvasKit.ColorType.RGBA_F32:
              retVal = new Float32Array(CanvasKit.HEAPU8.buffer, pPtr, pBytes).slice();
              break;
          }

          CanvasKit._free(pPtr);

          return retVal;
        };

        CanvasKit.SkCanvas.prototype.clear = function (color4f) {
          var cPtr = copyColorToWasm(color4f);

          this._clear(cPtr);
        };

        CanvasKit.SkCanvas.prototype.concat = function (matr) {
          var matrPtr = copy4x4MatrixToWasm(matr);

          this._concat(matrPtr);
        };

        CanvasKit.SkCanvas.prototype.concat44 = CanvasKit.SkCanvas.prototype.concat;

        CanvasKit.SkCanvas.prototype.drawAtlas = function (atlas, srcRects, dstXforms, paint, blendMode, colors) {
          if (!atlas || !paint || !srcRects || !dstXforms) {
            SkDebug("Doing nothing since missing a required input");
            return;
          }

          if (srcRects.length !== dstXforms.length) {
            SkDebug("Doing nothing since input arrays length mismatches");
            return;
          }

          if (!blendMode) {
            blendMode = CanvasKit.BlendMode.SrcOver;
          }

          var srcRectPtr;

          if (srcRects.build) {
            srcRectPtr = srcRects.build();
          } else {
            srcRectPtr = copy1dArray(srcRects, "HEAPF32");
          }

          var count = 1;
          var dstXformPtr;

          if (dstXforms.build) {
            dstXformPtr = dstXforms.build();
            count = dstXforms.length;
          } else {
            dstXformPtr = copy1dArray(dstXforms, "HEAPF32");
            count = dstXforms.length / 4;
          }

          var colorPtr = nullptr;

          if (colors) {
            if (colors.build) {
              colorPtr = colors.build();
            } else {
              colorPtr = copy1dArray(assureIntColors(colors), "HEAPU32");
            }
          }

          this._drawAtlas(atlas, dstXformPtr, srcRectPtr, colorPtr, count, blendMode, paint);

          if (srcRectPtr && !srcRects.build) {
            freeArraysThatAreNotMallocedByUsers(srcRectPtr, srcRects);
          }

          if (dstXformPtr && !dstXforms.build) {
            freeArraysThatAreNotMallocedByUsers(dstXformPtr, dstXforms);
          }

          if (colorPtr && !colors.build) {
            freeArraysThatAreNotMallocedByUsers(colorPtr, colors);
          }
        };

        CanvasKit.SkCanvas.prototype.drawColor = function (color4f, mode) {
          var cPtr = copyColorToWasm(color4f);

          if (mode !== undefined) {
            this._drawColor(cPtr, mode);
          } else {
            this._drawColor(cPtr);
          }
        };

        CanvasKit.SkCanvas.prototype.drawColorComponents = function (r, g, b, a, mode) {
          var cPtr = copyColorComponentsToWasm(r, g, b, a);

          if (mode !== undefined) {
            this._drawColor(cPtr, mode);
          } else {
            this._drawColor(cPtr);
          }
        };

        CanvasKit.SkCanvas.prototype.drawPoints = function (mode, points, paint) {
          var ptr;
          var n;

          if (points["_ck"]) {
            ptr = points.byteOffset;
            n = points.length / 2;
          } else {
            ptr = copy2dArray(points, "HEAPF32");
            n = points.length;
          }

          this._drawPoints(mode, ptr, n, paint);

          freeArraysThatAreNotMallocedByUsers(ptr, points);
        };

        CanvasKit.SkCanvas.prototype.drawShadow = function (path, zPlaneParams, lightPos, lightRadius, ambientColor, spotColor, flags) {
          var ambiPtr = copyColorToWasmNoScratch(ambientColor);
          var spotPtr = copyColorToWasmNoScratch(spotColor);

          this._drawShadow(path, zPlaneParams, lightPos, lightRadius, ambiPtr, spotPtr, flags);

          freeArraysThatAreNotMallocedByUsers(ambiPtr, ambientColor);
          freeArraysThatAreNotMallocedByUsers(spotPtr, spotColor);
        };

        CanvasKit.SkCanvas.prototype.getLocalToDevice = function () {
          this._getLocalToDevice(_scratch4x4MatrixPtr);

          return copy4x4MatrixFromWasm(_scratch4x4MatrixPtr);
        };

        CanvasKit.SkCanvas.prototype.findMarkedCTM = function (marker) {
          var found = this._findMarkedCTM(marker, _scratch4x4MatrixPtr);

          if (!found) {
            return null;
          }

          return copy4x4MatrixFromWasm(_scratch4x4MatrixPtr);
        };

        CanvasKit.SkCanvas.prototype.getTotalMatrix = function () {
          this._getTotalMatrix(_scratch3x3MatrixPtr);

          var rv = new Array(9);

          for (var i = 0; i < 9; i++) {
            rv[i] = CanvasKit.HEAPF32[_scratch3x3MatrixPtr / 4 + i];
          }

          return rv;
        };

        CanvasKit.SkCanvas.prototype.readPixels = function (x, y, w, h, alphaType, colorType, colorSpace, dstRowBytes) {
          alphaType = alphaType || CanvasKit.AlphaType.Unpremul;
          colorType = colorType || CanvasKit.ColorType.RGBA_8888;
          colorSpace = colorSpace || CanvasKit.SkColorSpace.SRGB;
          var pixBytes = 4;

          if (colorType === CanvasKit.ColorType.RGBA_F16) {
            pixBytes = 8;
          }

          dstRowBytes = dstRowBytes || pixBytes * w;
          var len = h * dstRowBytes;

          var pptr = CanvasKit._malloc(len);

          var ok = this._readPixels({
            "width": w,
            "height": h,
            "colorType": colorType,
            "alphaType": alphaType,
            "colorSpace": colorSpace
          }, pptr, dstRowBytes, x, y);

          if (!ok) {
            CanvasKit._free(pptr);

            return null;
          }

          var pixels = new Uint8Array(CanvasKit.HEAPU8.buffer, pptr, len).slice();

          CanvasKit._free(pptr);

          return pixels;
        };

        CanvasKit.SkCanvas.prototype.writePixels = function (pixels, srcWidth, srcHeight, destX, destY, alphaType, colorType, colorSpace) {
          if (pixels.byteLength % (srcWidth * srcHeight)) {
            throw "pixels length must be a multiple of the srcWidth * srcHeight";
          }

          var bytesPerPixel = pixels.byteLength / (srcWidth * srcHeight);
          alphaType = alphaType || CanvasKit.AlphaType.Unpremul;
          colorType = colorType || CanvasKit.ColorType.RGBA_8888;
          colorSpace = colorSpace || CanvasKit.SkColorSpace.SRGB;
          var srcRowBytes = bytesPerPixel * srcWidth;
          var pptr = copy1dArray(pixels, "HEAPU8");

          var ok = this._writePixels({
            "width": srcWidth,
            "height": srcHeight,
            "colorType": colorType,
            "alphaType": alphaType,
            "colorSpace": colorSpace
          }, pptr, srcRowBytes, destX, destY);

          freeArraysThatAreNotMallocedByUsers(pptr, pixels);
          return ok;
        };

        CanvasKit.SkColorFilter.MakeBlend = function (color4f, mode) {
          var cPtr = copyColorToWasm(color4f);

          var result = CanvasKit.SkColorFilter._MakeBlend(cPtr, mode);

          return result;
        };

        CanvasKit.SkColorFilter.MakeMatrix = function (colorMatrix) {
          if (!colorMatrix || colorMatrix.length !== 20) {
            throw "invalid color matrix";
          }

          var fptr = copy1dArray(colorMatrix, "HEAPF32");

          var m = CanvasKit.SkColorFilter._makeMatrix(fptr);

          freeArraysThatAreNotMallocedByUsers(fptr, colorMatrix);
          return m;
        };

        CanvasKit.SkImageFilter.MakeMatrixTransform = function (matr, filterQuality, input) {
          var matrPtr = copy3x3MatrixToWasm(matr);
          return CanvasKit.SkImageFilter._MakeMatrixTransform(matrPtr, filterQuality, input);
        };

        CanvasKit.SkPaint.prototype.getColor = function () {
          this._getColor(_scratchColorPtr);

          return copyColorFromWasm(_scratchColorPtr);
        };

        CanvasKit.SkPaint.prototype.setColor = function (color4f, colorSpace) {
          colorSpace = colorSpace || null;
          var cPtr = copyColorToWasm(color4f);

          this._setColor(cPtr, colorSpace);
        };

        CanvasKit.SkPaint.prototype.setColorComponents = function (r, g, b, a, colorSpace) {
          colorSpace = colorSpace || null;
          var cPtr = copyColorComponentsToWasm(r, g, b, a);

          this._setColor(cPtr, colorSpace);
        };

        CanvasKit.SkSurface.prototype.captureFrameAsSkPicture = function (drawFrame) {
          var spr = new CanvasKit.SkPictureRecorder();
          var canvas = spr.beginRecording(CanvasKit.LTRBRect(0, 0, this.width(), this.height()));
          drawFrame(canvas);
          var pic = spr.finishRecordingAsPicture();
          spr["delete"]();
          return pic;
        };

        CanvasKit.SkSurface.prototype.requestAnimationFrame = function (callback, dirtyRect) {
          if (!this._cached_canvas) {
            this._cached_canvas = this.getCanvas();
          }

          requestAnimationFrame(function () {
            if (this._context !== undefined) {
              CanvasKit.setCurrentContext(this._context);
            }

            callback(this._cached_canvas);
            this.flush(dirtyRect);
          }.bind(this));
        };

        CanvasKit.SkSurface.prototype.drawOnce = function (callback, dirtyRect) {
          if (!this._cached_canvas) {
            this._cached_canvas = this.getCanvas();
          }

          requestAnimationFrame(function () {
            if (this._context !== undefined) {
              CanvasKit.setCurrentContext(this._context);
            }

            callback(this._cached_canvas);
            this.flush(dirtyRect);
            this.dispose();
          }.bind(this));
        };

        CanvasKit.SkPathEffect.MakeDash = function (intervals, phase) {
          if (!phase) {
            phase = 0;
          }

          if (!intervals.length || intervals.length % 2 === 1) {
            throw "Intervals array must have even length";
          }

          var ptr = copy1dArray(intervals, "HEAPF32");

          var dpe = CanvasKit.SkPathEffect._MakeDash(ptr, intervals.length, phase);

          freeArraysThatAreNotMallocedByUsers(ptr, intervals);
          return dpe;
        };

        CanvasKit.SkShader.Color = function (color4f, colorSpace) {
          colorSpace = colorSpace || null;
          var cPtr = copyColorToWasm(color4f);

          var result = CanvasKit.SkShader._Color(cPtr, colorSpace);

          return result;
        };

        CanvasKit.SkShader.MakeLinearGradient = function (start, end, colors, pos, mode, localMatrix, flags, colorSpace) {
          colorSpace = colorSpace || null;
          var cPtrInfo = copyFlexibleColorArray(colors);
          var posPtr = copy1dArray(pos, "HEAPF32");
          flags = flags || 0;
          var localMatrixPtr = copy3x3MatrixToWasm(localMatrix);

          var lgs = CanvasKit._MakeLinearGradientShader(start, end, cPtrInfo.colorPtr, cPtrInfo.colorType, posPtr, cPtrInfo.count, mode, flags, localMatrixPtr, colorSpace);

          freeArraysThatAreNotMallocedByUsers(cPtrInfo.colorPtr, colors);
          pos && freeArraysThatAreNotMallocedByUsers(posPtr, pos);
          return lgs;
        };

        CanvasKit.SkShader.MakeRadialGradient = function (center, radius, colors, pos, mode, localMatrix, flags, colorSpace) {
          colorSpace = colorSpace || null;
          var cPtrInfo = copyFlexibleColorArray(colors);
          var posPtr = copy1dArray(pos, "HEAPF32");
          flags = flags || 0;
          var localMatrixPtr = copy3x3MatrixToWasm(localMatrix);

          var rgs = CanvasKit._MakeRadialGradientShader(center, radius, cPtrInfo.colorPtr, cPtrInfo.colorType, posPtr, cPtrInfo.count, mode, flags, localMatrixPtr, colorSpace);

          freeArraysThatAreNotMallocedByUsers(cPtrInfo.colorPtr, colors);
          pos && freeArraysThatAreNotMallocedByUsers(posPtr, pos);
          return rgs;
        };

        CanvasKit.SkShader.MakeSweepGradient = function (cx, cy, colors, pos, mode, localMatrix, flags, startAngle, endAngle, colorSpace) {
          colorSpace = colorSpace || null;
          var cPtrInfo = copyFlexibleColorArray(colors);
          var posPtr = copy1dArray(pos, "HEAPF32");
          flags = flags || 0;
          startAngle = startAngle || 0;
          endAngle = endAngle || 360;
          var localMatrixPtr = copy3x3MatrixToWasm(localMatrix);

          var sgs = CanvasKit._MakeSweepGradientShader(cx, cy, cPtrInfo.colorPtr, cPtrInfo.colorType, posPtr, cPtrInfo.count, mode, startAngle, endAngle, flags, localMatrixPtr, colorSpace);

          freeArraysThatAreNotMallocedByUsers(cPtrInfo.colorPtr, colors);
          pos && freeArraysThatAreNotMallocedByUsers(posPtr, pos);
          return sgs;
        };

        CanvasKit.SkShader.MakeTwoPointConicalGradient = function (start, startRadius, end, endRadius, colors, pos, mode, localMatrix, flags, colorSpace) {
          colorSpace = colorSpace || null;
          var cPtrInfo = copyFlexibleColorArray(colors);
          var posPtr = copy1dArray(pos, "HEAPF32");
          flags = flags || 0;
          var localMatrixPtr = copy3x3MatrixToWasm(localMatrix);

          var rgs = CanvasKit._MakeTwoPointConicalGradientShader(start, startRadius, end, endRadius, cPtrInfo.colorPtr, cPtrInfo.colorType, posPtr, cPtrInfo.count, mode, flags, localMatrixPtr, colorSpace);

          freeArraysThatAreNotMallocedByUsers(cPtrInfo.colorPtr, colors);
          pos && freeArraysThatAreNotMallocedByUsers(posPtr, pos);
          return rgs;
        };

        CanvasKit.MakeSkDashPathEffect = CanvasKit.SkPathEffect.MakeDash;
        CanvasKit.MakeLinearGradientShader = CanvasKit.SkShader.MakeLinearGradient;
        CanvasKit.MakeRadialGradientShader = CanvasKit.SkShader.MakeRadialGradient;
        CanvasKit.MakeTwoPointConicalGradientShader = CanvasKit.SkShader.MakeTwoPointConicalGradient;

        if (CanvasKit._extraInitializations) {
          CanvasKit._extraInitializations.forEach(function (init) {
            init();
          });
        }
      };

      CanvasKit.computeTonalColors = function (tonalColors) {
        var cPtrAmbi = copyColorToWasmNoScratch(tonalColors["ambient"]);
        var cPtrSpot = copyColorToWasmNoScratch(tonalColors["spot"]);

        this._computeTonalColors(cPtrAmbi, cPtrSpot);

        var result = {
          "ambient": copyColorFromWasm(cPtrAmbi),
          "spot": copyColorFromWasm(cPtrSpot)
        };
        freeArraysThatAreNotMallocedByUsers(cPtrAmbi, tonalColors["ambient"]);
        freeArraysThatAreNotMallocedByUsers(cPtrSpot, tonalColors["spot"]);
        return result;
      };

      CanvasKit.LTRBRect = function (l, t, r, b) {
        return {
          fLeft: l,
          fTop: t,
          fRight: r,
          fBottom: b
        };
      };

      CanvasKit.XYWHRect = function (x, y, w, h) {
        return {
          fLeft: x,
          fTop: y,
          fRight: x + w,
          fBottom: y + h
        };
      };

      CanvasKit.RRectXY = function (rect, rx, ry) {
        return {
          rect: rect,
          rx1: rx,
          ry1: ry,
          rx2: rx,
          ry2: ry,
          rx3: rx,
          ry3: ry,
          rx4: rx,
          ry4: ry
        };
      };

      CanvasKit.MakeAnimatedImageFromEncoded = function (data) {
        data = new Uint8Array(data);

        var iptr = CanvasKit._malloc(data.byteLength);

        CanvasKit.HEAPU8.set(data, iptr);

        var img = CanvasKit._decodeAnimatedImage(iptr, data.byteLength);

        if (!img) {
          SkDebug("Could not decode animated image");
          return null;
        }

        return img;
      };

      CanvasKit.MakeImageFromEncoded = function (data) {
        data = new Uint8Array(data);

        var iptr = CanvasKit._malloc(data.byteLength);

        CanvasKit.HEAPU8.set(data, iptr);

        var img = CanvasKit._decodeImage(iptr, data.byteLength);

        if (!img) {
          SkDebug("Could not decode image");
          return null;
        }

        return img;
      };

      var memoizedCanvas2dElement = null;

      CanvasKit.MakeImageFromCanvasImageSource = function (canvasImageSource) {
        var width = canvasImageSource.width;
        var height = canvasImageSource.height;

        if (!memoizedCanvas2dElement) {
          memoizedCanvas2dElement = document.createElement("canvas");
        }

        memoizedCanvas2dElement.width = width;
        memoizedCanvas2dElement.height = height;
        var ctx2d = memoizedCanvas2dElement.getContext("2d");
        ctx2d.drawImage(canvasImageSource, 0, 0);
        var imageData = ctx2d.getImageData(0, 0, width, height);
        return CanvasKit.MakeImage(imageData.data, width, height, CanvasKit.AlphaType.Unpremul, CanvasKit.ColorType.RGBA_8888, CanvasKit.SkColorSpace.SRGB);
      };

      CanvasKit.MakeImage = function (pixels, width, height, alphaType, colorType, colorSpace) {
        var bytesPerPixel = pixels.length / (width * height);
        var info = {
          "width": width,
          "height": height,
          "alphaType": alphaType,
          "colorType": colorType,
          "colorSpace": colorSpace
        };
        var pptr = copy1dArray(pixels, "HEAPU8");
        return CanvasKit._MakeImage(info, pptr, pixels.length, width * bytesPerPixel);
      };

      CanvasKit.MakeSkVertices = function (mode, positions, textureCoordinates, colors, indices, isVolatile) {
        isVolatile = isVolatile === undefined ? true : isVolatile;
        var idxCount = indices && indices.length || 0;
        var flags = 0;

        if (textureCoordinates && textureCoordinates.length) {
          flags |= 1 << 0;
        }

        if (colors && colors.length) {
          flags |= 1 << 1;
        }

        if (!isVolatile) {
          flags |= 1 << 2;
        }

        var builder = new CanvasKit._SkVerticesBuilder(mode, positions.length, idxCount, flags);
        copy2dArray(positions, "HEAPF32", builder.positions());

        if (builder.texCoords()) {
          copy2dArray(textureCoordinates, "HEAPF32", builder.texCoords());
        }

        if (builder.colors()) {
          if (colors.build) {
            throw "Color builder not accepted by MakeSkVertices, use array of ints";
          } else {
            copy1dArray(assureIntColors(colors), "HEAPU32", builder.colors());
          }
        }

        if (builder.indices()) {
          copy1dArray(indices, "HEAPU16", builder.indices());
        }

        return builder.detach();
      };

      (function (CanvasKit) {
        CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

        CanvasKit._extraInitializations.push(function () {
          CanvasKit.Paragraph.prototype.getRectsForRange = function (start, end, hStyle, wStyle) {
            var floatArray = this._getRectsForRange(start, end, hStyle, wStyle);

            if (!floatArray || !floatArray.length) {
              return [];
            }

            var ret = [];

            for (var i = 0; i < floatArray.length; i += 5) {
              var r = CanvasKit.LTRBRect(floatArray[i], floatArray[i + 1], floatArray[i + 2], floatArray[i + 3]);

              if (floatArray[i + 4] === 0) {
                r["direction"] = CanvasKit.TextDirection.RTL;
              } else {
                r["direction"] = CanvasKit.TextDirection.LTR;
              }

              ret.push(r);
            }

            CanvasKit._free(floatArray.byteOffset);

            return ret;
          };

          CanvasKit.TypefaceFontProvider.prototype.registerFont = function (font, family) {
            var typeface = CanvasKit.SkFontMgr.RefDefault().MakeTypefaceFromData(font);

            if (!typeface) {
              SkDebug("Could not decode font data");
              return null;
            }

            var familyPtr = cacheOrCopyString(family);

            this._registerFont(typeface, familyPtr);
          };

          CanvasKit.ParagraphStyle = function (s) {
            s["disableHinting"] = s["disableHinting"] || false;

            if (s["ellipsis"]) {
              var str = s["ellipsis"];
              s["_ellipsisPtr"] = cacheOrCopyString(str);
              s["_ellipsisLen"] = lengthBytesUTF8(str) + 1;
            } else {
              s["_ellipsisPtr"] = nullptr;
              s["_ellipsisLen"] = 0;
            }

            s["heightMultiplier"] = s["heightMultiplier"] || 0;
            s["maxLines"] = s["maxLines"] || 0;
            s["textAlign"] = s["textAlign"] || CanvasKit.TextAlign.Start;
            s["textDirection"] = s["textDirection"] || CanvasKit.TextDirection.LTR;
            s["textStyle"] = CanvasKit.TextStyle(s["textStyle"]);
            return s;
          };

          function fontStyle(s) {
            s = s || {};

            if (s["weight"] === undefined) {
              s["weight"] = CanvasKit.FontWeight.Normal;
            }

            s["width"] = s["width"] || CanvasKit.FontWidth.Normal;
            s["slant"] = s["slant"] || CanvasKit.FontSlant.Upright;
            return s;
          }

          CanvasKit.TextStyle = function (s) {
            if (!s["color"]) {
              s["color"] = CanvasKit.BLACK;
            }

            s["decoration"] = s["decoration"] || 0;
            s["decorationThickness"] = s["decorationThickness"] || 0;
            s["fontSize"] = s["fontSize"] || 0;
            s["fontStyle"] = fontStyle(s["fontStyle"]);
            return s;
          };

          function naiveCopyStrArray(strings) {
            if (!strings || !strings.length) {
              return nullptr;
            }

            var sPtrs = [];

            for (var i = 0; i < strings.length; i++) {
              var strPtr = cacheOrCopyString(strings[i]);
              sPtrs.push(strPtr);
            }

            return copy1dArray(sPtrs, "HEAPU32");
          }

          var stringCache = {};

          function cacheOrCopyString(str) {
            if (stringCache[str]) {
              return stringCache[str];
            }

            var strLen = lengthBytesUTF8(str) + 1;

            var strPtr = CanvasKit._malloc(strLen);

            stringToUTF8(str, strPtr, strLen);
            stringCache[str] = strPtr;
            return strPtr;
          }

          var scratchForegroundColorPtr = CanvasKit._malloc(4 * 4);

          var scratchBackgroundColorPtr = CanvasKit._malloc(4 * 4);

          function copyArrays(textStyle) {
            textStyle["_colorPtr"] = copyColorToWasm(textStyle["color"]);
            textStyle["_foregroundColorPtr"] = nullptr;
            textStyle["_backgroundColorPtr"] = nullptr;

            if (textStyle["foregroundColor"]) {
              textStyle["_foregroundColorPtr"] = copyColorToWasm(textStyle["foregroundColor"], scratchForegroundColorPtr);
            }

            if (textStyle["backgroundColor"]) {
              textStyle["_backgroundColorPtr"] = copyColorToWasm(textStyle["backgroundColor"], scratchBackgroundColorPtr);
            }

            if (Array.isArray(textStyle["fontFamilies"]) && textStyle["fontFamilies"].length) {
              textStyle["_fontFamiliesPtr"] = naiveCopyStrArray(textStyle["fontFamilies"]);
              textStyle["_fontFamiliesLen"] = textStyle["fontFamilies"].length;
            } else {
              textStyle["_fontFamiliesPtr"] = nullptr;
              textStyle["_fontFamiliesLen"] = 0;
              SkDebug("no font families provided, text may draw wrong or not at all");
            }
          }

          function freeArrays(textStyle) {
            CanvasKit._free(textStyle["_fontFamiliesPtr"]);
          }

          CanvasKit.ParagraphBuilder.Make = function (paragraphStyle, fontManager) {
            copyArrays(paragraphStyle["textStyle"]);

            var result = CanvasKit.ParagraphBuilder._Make(paragraphStyle, fontManager);

            freeArrays(paragraphStyle["textStyle"]);
            return result;
          };

          CanvasKit.ParagraphBuilder.MakeFromFontProvider = function (paragraphStyle, fontProvider) {
            copyArrays(paragraphStyle["textStyle"]);

            var result = CanvasKit.ParagraphBuilder._MakeFromFontProvider(paragraphStyle, fontProvider);

            freeArrays(paragraphStyle["textStyle"]);
            return result;
          };

          CanvasKit.ParagraphBuilder.prototype.pushStyle = function (textStyle) {
            copyArrays(textStyle);

            this._pushStyle(textStyle);

            freeArrays(textStyle);
          };

          CanvasKit.ParagraphBuilder.prototype.pushPaintStyle = function (textStyle, fg, bg) {
            copyArrays(textStyle);

            this._pushPaintStyle(textStyle, fg, bg);

            freeArrays(textStyle);
          };
        });
      })(Module);

      CanvasKit.MakeManagedAnimation = function (json, assets) {
        if (!CanvasKit._MakeManagedAnimation) {
          throw "Not compiled with MakeManagedAnimation";
        }

        if (!assets) {
          return CanvasKit._MakeManagedAnimation(json, 0, nullptr, nullptr, nullptr);
        }

        var assetNamePtrs = [];
        var assetDataPtrs = [];
        var assetSizes = [];
        var assetKeys = Object.keys(assets || {});

        for (var i = 0; i < assetKeys.length; i++) {
          var key = assetKeys[i];
          var buffer = assets[key];
          var data = new Uint8Array(buffer);

          var iptr = CanvasKit._malloc(data.byteLength);

          CanvasKit.HEAPU8.set(data, iptr);
          assetDataPtrs.push(iptr);
          assetSizes.push(data.byteLength);
          var strLen = lengthBytesUTF8(key) + 1;

          var strPtr = CanvasKit._malloc(strLen);

          stringToUTF8(key, strPtr, strLen);
          assetNamePtrs.push(strPtr);
        }

        var namesPtr = copy1dArray(assetNamePtrs, "HEAPU32");
        var assetsPtr = copy1dArray(assetDataPtrs, "HEAPU32");
        var assetSizesPtr = copy1dArray(assetSizes, "HEAPU32");

        var anim = CanvasKit._MakeManagedAnimation(json, assetKeys.length, namesPtr, assetsPtr, assetSizesPtr);

        CanvasKit._free(namesPtr);

        CanvasKit._free(assetsPtr);

        CanvasKit._free(assetSizesPtr);

        return anim;
      };

      (function (CanvasKit) {
        CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

        CanvasKit._extraInitializations.push(function () {
          CanvasKit.ManagedAnimation.prototype.setColor = function (key, color) {
            var cPtr = copyColorToWasm(color);

            this._setColor(key, cPtr);
          };
        });
      })(Module);

      CanvasKit.MakeParticles = function (json, assets) {
        if (!CanvasKit._MakeParticles) {
          throw "Not compiled with MakeParticles";
        }

        if (!assets) {
          return CanvasKit._MakeParticles(json, 0, nullptr, nullptr, nullptr);
        }

        var assetNamePtrs = [];
        var assetDataPtrs = [];
        var assetSizes = [];
        var assetKeys = Object.keys(assets || {});

        for (var i = 0; i < assetKeys.length; i++) {
          var key = assetKeys[i];
          var buffer = assets[key];
          var data = new Uint8Array(buffer);

          var iptr = CanvasKit._malloc(data.byteLength);

          CanvasKit.HEAPU8.set(data, iptr);
          assetDataPtrs.push(iptr);
          assetSizes.push(data.byteLength);
          var strLen = lengthBytesUTF8(key) + 1;

          var strPtr = CanvasKit._malloc(strLen);

          stringToUTF8(key, strPtr, strLen);
          assetNamePtrs.push(strPtr);
        }

        var namesPtr = copy1dArray(assetNamePtrs, "HEAPU32");
        var assetsPtr = copy1dArray(assetDataPtrs, "HEAPU32");
        var assetSizesPtr = copy1dArray(assetSizes, "HEAPU32");

        var particles = CanvasKit._MakeParticles(json, assetKeys.length, namesPtr, assetsPtr, assetSizesPtr);

        CanvasKit._free(namesPtr);

        CanvasKit._free(assetsPtr);

        CanvasKit._free(assetSizesPtr);

        return particles;
      };

      CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

      CanvasKit._extraInitializations.push(function () {
        CanvasKit.SkParticleEffect.prototype.effectUniforms = function () {
          var fptr = this._effectUniformPtr();

          var numFloats = this.getEffectUniformFloatCount();

          if (!fptr || numFloats <= 0) {
            return new Float32Array();
          }

          return new Float32Array(CanvasKit.HEAPU8.buffer, fptr, numFloats);
        };

        CanvasKit.SkParticleEffect.prototype.particleUniforms = function () {
          var fptr = this._particleUniformPtr();

          var numFloats = this.getParticleUniformFloatCount();

          if (!fptr || numFloats <= 0) {
            return new Float32Array();
          }

          return new Float32Array(CanvasKit.HEAPU8.buffer, fptr, numFloats);
        };
      });

      CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

      CanvasKit._extraInitializations.push(function () {
        CanvasKit.SkPath.prototype.op = function (otherPath, op) {
          if (this._op(otherPath, op)) {
            return this;
          }

          return null;
        };

        CanvasKit.SkPath.prototype.simplify = function () {
          if (this._simplify()) {
            return this;
          }

          return null;
        };
      });

      CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

      CanvasKit._extraInitializations.push(function () {
        CanvasKit.SkCanvas.prototype.drawText = function (str, x, y, paint, font) {
          if (typeof str === "string") {
            var strLen = lengthBytesUTF8(str);

            var strPtr = CanvasKit._malloc(strLen + 1);

            stringToUTF8(str, strPtr, strLen + 1);

            this._drawSimpleText(strPtr, strLen, x, y, font, paint);
          } else {
            this._drawShapedText(str, x, y, paint);
          }
        };

        CanvasKit.SkFont.prototype.getWidths = function (str) {
          var codePoints = str.length + 1;
          var strBytes = lengthBytesUTF8(str) + 1;

          var strPtr = CanvasKit._malloc(strBytes);

          stringToUTF8(str, strPtr, strBytes);
          var bytesPerFloat = 4;

          var widthPtr = CanvasKit._malloc(codePoints * bytesPerFloat);

          if (!this._getWidths(strPtr, strBytes, codePoints, widthPtr)) {
            SkDebug("Could not compute widths");

            CanvasKit._free(strPtr);

            CanvasKit._free(widthPtr);

            return null;
          }

          var widths = new Float32Array(CanvasKit.HEAPU8.buffer, widthPtr, codePoints);
          var retVal = Array.from(widths);

          CanvasKit._free(strPtr);

          CanvasKit._free(widthPtr);

          return retVal;
        };

        CanvasKit.SkFontMgr.FromData = function () {
          if (!arguments.length) {
            SkDebug("Could not make SkFontMgr from no font sources");
            return null;
          }

          var fonts = arguments;

          if (fonts.length === 1 && Array.isArray(fonts[0])) {
            fonts = arguments[0];
          }

          if (!fonts.length) {
            SkDebug("Could not make SkFontMgr from no font sources");
            return null;
          }

          var dPtrs = [];
          var sizes = [];

          for (var i = 0; i < fonts.length; i++) {
            var data = new Uint8Array(fonts[i]);
            var dptr = copy1dArray(data, "HEAPU8");
            dPtrs.push(dptr);
            sizes.push(data.byteLength);
          }

          var datasPtr = copy1dArray(dPtrs, "HEAPU32");
          var sizesPtr = copy1dArray(sizes, "HEAPU32");

          var fm = CanvasKit.SkFontMgr._fromData(datasPtr, sizesPtr, fonts.length);

          CanvasKit._free(datasPtr);

          CanvasKit._free(sizesPtr);

          return fm;
        };

        CanvasKit.SkFontMgr.prototype.MakeTypefaceFromData = function (fontData) {
          var data = new Uint8Array(fontData);
          var fptr = copy1dArray(data, "HEAPU8");

          var font = this._makeTypefaceFromData(fptr, data.byteLength);

          if (!font) {
            SkDebug("Could not decode font data");
            return null;
          }

          return font;
        };

        CanvasKit.SkTextBlob.MakeOnPath = function (str, path, font, initialOffset) {
          if (!str || !str.length) {
            SkDebug("ignoring 0 length string");
            return;
          }

          if (!path || !path.countPoints()) {
            SkDebug("ignoring empty path");
            return;
          }

          if (path.countPoints() === 1) {
            SkDebug("path has 1 point, returning normal textblob");
            return this.MakeFromText(str, font);
          }

          if (!initialOffset) {
            initialOffset = 0;
          }

          var widths = font.getWidths(str);
          var rsx = new CanvasKit.RSXFormBuilder();
          var meas = new CanvasKit.SkPathMeasure(path, false, 1);
          var dist = initialOffset;

          for (var i = 0; i < str.length; i++) {
            var width = widths[i];
            dist += width / 2;

            if (dist > meas.getLength()) {
              if (!meas.nextContour()) {
                str = str.substring(0, i);
                break;
              }

              dist = width / 2;
            }

            var xycs = meas.getPosTan(dist);
            var cx = xycs[0];
            var cy = xycs[1];
            var cosT = xycs[2];
            var sinT = xycs[3];
            var adjustedX = cx - width / 2 * cosT;
            var adjustedY = cy - width / 2 * sinT;
            rsx.push(cosT, sinT, adjustedX, adjustedY);
            dist += width / 2;
          }

          var retVal = this.MakeFromRSXform(str, rsx, font);
          rsx["delete"]();
          meas["delete"]();
          return retVal;
        };

        CanvasKit.SkTextBlob.MakeFromRSXform = function (str, rsxBuilder, font) {
          var strLen = lengthBytesUTF8(str) + 1;

          var strPtr = CanvasKit._malloc(strLen);

          stringToUTF8(str, strPtr, strLen);
          var rptr = rsxBuilder.build();

          var blob = CanvasKit.SkTextBlob._MakeFromRSXform(strPtr, strLen - 1, rptr, font);

          if (!blob) {
            SkDebug('Could not make textblob from string "' + str + '"');
            return null;
          }

          var origDelete = blob["delete"].bind(blob);

          blob["delete"] = function () {
            CanvasKit._free(strPtr);

            origDelete();
          };

          return blob;
        };

        CanvasKit.SkTextBlob.MakeFromText = function (str, font) {
          var strLen = lengthBytesUTF8(str) + 1;

          var strPtr = CanvasKit._malloc(strLen);

          stringToUTF8(str, strPtr, strLen);

          var blob = CanvasKit.SkTextBlob._MakeFromText(strPtr, strLen - 1, font);

          if (!blob) {
            SkDebug('Could not make textblob from string "' + str + '"');
            return null;
          }

          var origDelete = blob["delete"].bind(blob);

          blob["delete"] = function () {
            CanvasKit._free(strPtr);

            origDelete();
          };

          return blob;
        };
      });

      CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

      CanvasKit._extraInitializations.push(function () {
        CanvasKit.MakeSkPicture = function (data) {
          data = new Uint8Array(data);

          var iptr = CanvasKit._malloc(data.byteLength);

          CanvasKit.HEAPU8.set(data, iptr);

          var pic = CanvasKit._MakeSkPicture(iptr, data.byteLength);

          if (!pic) {
            SkDebug("Could not decode picture");
            return null;
          }

          return pic;
        };

        CanvasKit.SkPicture.prototype.saveAsFile = function (skpName) {
          var data = this.serialize();

          if (!data) {
            SkDebug("Could not serialize to skpicture.");
            return;
          }

          var bytes = CanvasKit.getSkDataBytes(data);
          saveBytesToFile(bytes, skpName);
          data["delete"]();
        };
      });

      CanvasKit._extraInitializations = CanvasKit._extraInitializations || [];

      CanvasKit._extraInitializations.push(function () {
        CanvasKit.SkRuntimeEffect.prototype.makeShader = function (floats, isOpaque, localMatrix) {
          var fptr = copy1dArray(floats, "HEAPF32");
          var localMatrixPtr = copy3x3MatrixToWasm(localMatrix);
          return this._makeShader(fptr, floats.length * 4, !!isOpaque, localMatrixPtr);
        };

        CanvasKit.SkRuntimeEffect.prototype.makeShaderWithChildren = function (floats, isOpaque, childrenShaders, localMatrix) {
          var fptr = copy1dArray(floats, "HEAPF32");
          var localMatrixPtr = copy3x3MatrixToWasm(localMatrix);
          var barePointers = [];

          for (var i = 0; i < childrenShaders.length; i++) {
            barePointers.push(childrenShaders[i].$$.ptr);
          }

          var childrenPointers = copy1dArray(barePointers, "HEAPU32");
          return this._makeShaderWithChildren(fptr, floats.length * 4, !!isOpaque, childrenPointers, barePointers.length, localMatrixPtr);
        };
      });

      (function () {
        CanvasKit._testing = {};

        function allAreFinite(args) {
          for (var i = 0; i < args.length; i++) {
            if (args[i] !== undefined && !Number.isFinite(args[i])) {
              return false;
            }
          }

          return true;
        }

        function toBase64String(bytes) {
          if (isNode) {
            return Buffer.from(bytes).toString("base64");
          } else {
            var CHUNK_SIZE = 32768;
            var index = 0;
            var length = bytes.length;
            var result = "";
            var slice;

            while (index < length) {
              slice = bytes.slice(index, Math.min(index + CHUNK_SIZE, length));
              result += String.fromCharCode.apply(null, slice);
              index += CHUNK_SIZE;
            }

            return btoa(result);
          }
        }

        var colorMap = {
          "aliceblue": Float32Array.of(.941, .973, 1, 1),
          "antiquewhite": Float32Array.of(.98, .922, .843, 1),
          "aqua": Float32Array.of(0, 1, 1, 1),
          "aquamarine": Float32Array.of(.498, 1, .831, 1),
          "azure": Float32Array.of(.941, 1, 1, 1),
          "beige": Float32Array.of(.961, .961, .863, 1),
          "bisque": Float32Array.of(1, .894, .769, 1),
          "black": Float32Array.of(0, 0, 0, 1),
          "blanchedalmond": Float32Array.of(1, .922, .804, 1),
          "blue": Float32Array.of(0, 0, 1, 1),
          "blueviolet": Float32Array.of(.541, .169, .886, 1),
          "brown": Float32Array.of(.647, .165, .165, 1),
          "burlywood": Float32Array.of(.871, .722, .529, 1),
          "cadetblue": Float32Array.of(.373, .62, .627, 1),
          "chartreuse": Float32Array.of(.498, 1, 0, 1),
          "chocolate": Float32Array.of(.824, .412, .118, 1),
          "coral": Float32Array.of(1, .498, .314, 1),
          "cornflowerblue": Float32Array.of(.392, .584, .929, 1),
          "cornsilk": Float32Array.of(1, .973, .863, 1),
          "crimson": Float32Array.of(.863, .078, .235, 1),
          "cyan": Float32Array.of(0, 1, 1, 1),
          "darkblue": Float32Array.of(0, 0, .545, 1),
          "darkcyan": Float32Array.of(0, .545, .545, 1),
          "darkgoldenrod": Float32Array.of(.722, .525, .043, 1),
          "darkgray": Float32Array.of(.663, .663, .663, 1),
          "darkgreen": Float32Array.of(0, .392, 0, 1),
          "darkgrey": Float32Array.of(.663, .663, .663, 1),
          "darkkhaki": Float32Array.of(.741, .718, .42, 1),
          "darkmagenta": Float32Array.of(.545, 0, .545, 1),
          "darkolivegreen": Float32Array.of(.333, .42, .184, 1),
          "darkorange": Float32Array.of(1, .549, 0, 1),
          "darkorchid": Float32Array.of(.6, .196, .8, 1),
          "darkred": Float32Array.of(.545, 0, 0, 1),
          "darksalmon": Float32Array.of(.914, .588, .478, 1),
          "darkseagreen": Float32Array.of(.561, .737, .561, 1),
          "darkslateblue": Float32Array.of(.282, .239, .545, 1),
          "darkslategray": Float32Array.of(.184, .31, .31, 1),
          "darkslategrey": Float32Array.of(.184, .31, .31, 1),
          "darkturquoise": Float32Array.of(0, .808, .82, 1),
          "darkviolet": Float32Array.of(.58, 0, .827, 1),
          "deeppink": Float32Array.of(1, .078, .576, 1),
          "deepskyblue": Float32Array.of(0, .749, 1, 1),
          "dimgray": Float32Array.of(.412, .412, .412, 1),
          "dimgrey": Float32Array.of(.412, .412, .412, 1),
          "dodgerblue": Float32Array.of(.118, .565, 1, 1),
          "firebrick": Float32Array.of(.698, .133, .133, 1),
          "floralwhite": Float32Array.of(1, .98, .941, 1),
          "forestgreen": Float32Array.of(.133, .545, .133, 1),
          "fuchsia": Float32Array.of(1, 0, 1, 1),
          "gainsboro": Float32Array.of(.863, .863, .863, 1),
          "ghostwhite": Float32Array.of(.973, .973, 1, 1),
          "gold": Float32Array.of(1, .843, 0, 1),
          "goldenrod": Float32Array.of(.855, .647, .125, 1),
          "gray": Float32Array.of(.502, .502, .502, 1),
          "green": Float32Array.of(0, .502, 0, 1),
          "greenyellow": Float32Array.of(.678, 1, .184, 1),
          "grey": Float32Array.of(.502, .502, .502, 1),
          "honeydew": Float32Array.of(.941, 1, .941, 1),
          "hotpink": Float32Array.of(1, .412, .706, 1),
          "indianred": Float32Array.of(.804, .361, .361, 1),
          "indigo": Float32Array.of(.294, 0, .51, 1),
          "ivory": Float32Array.of(1, 1, .941, 1),
          "khaki": Float32Array.of(.941, .902, .549, 1),
          "lavender": Float32Array.of(.902, .902, .98, 1),
          "lavenderblush": Float32Array.of(1, .941, .961, 1),
          "lawngreen": Float32Array.of(.486, .988, 0, 1),
          "lemonchiffon": Float32Array.of(1, .98, .804, 1),
          "lightblue": Float32Array.of(.678, .847, .902, 1),
          "lightcoral": Float32Array.of(.941, .502, .502, 1),
          "lightcyan": Float32Array.of(.878, 1, 1, 1),
          "lightgoldenrodyellow": Float32Array.of(.98, .98, .824, 1),
          "lightgray": Float32Array.of(.827, .827, .827, 1),
          "lightgreen": Float32Array.of(.565, .933, .565, 1),
          "lightgrey": Float32Array.of(.827, .827, .827, 1),
          "lightpink": Float32Array.of(1, .714, .757, 1),
          "lightsalmon": Float32Array.of(1, .627, .478, 1),
          "lightseagreen": Float32Array.of(.125, .698, .667, 1),
          "lightskyblue": Float32Array.of(.529, .808, .98, 1),
          "lightslategray": Float32Array.of(.467, .533, .6, 1),
          "lightslategrey": Float32Array.of(.467, .533, .6, 1),
          "lightsteelblue": Float32Array.of(.69, .769, .871, 1),
          "lightyellow": Float32Array.of(1, 1, .878, 1),
          "lime": Float32Array.of(0, 1, 0, 1),
          "limegreen": Float32Array.of(.196, .804, .196, 1),
          "linen": Float32Array.of(.98, .941, .902, 1),
          "magenta": Float32Array.of(1, 0, 1, 1),
          "maroon": Float32Array.of(.502, 0, 0, 1),
          "mediumaquamarine": Float32Array.of(.4, .804, .667, 1),
          "mediumblue": Float32Array.of(0, 0, .804, 1),
          "mediumorchid": Float32Array.of(.729, .333, .827, 1),
          "mediumpurple": Float32Array.of(.576, .439, .859, 1),
          "mediumseagreen": Float32Array.of(.235, .702, .443, 1),
          "mediumslateblue": Float32Array.of(.482, .408, .933, 1),
          "mediumspringgreen": Float32Array.of(0, .98, .604, 1),
          "mediumturquoise": Float32Array.of(.282, .82, .8, 1),
          "mediumvioletred": Float32Array.of(.78, .082, .522, 1),
          "midnightblue": Float32Array.of(.098, .098, .439, 1),
          "mintcream": Float32Array.of(.961, 1, .98, 1),
          "mistyrose": Float32Array.of(1, .894, .882, 1),
          "moccasin": Float32Array.of(1, .894, .71, 1),
          "navajowhite": Float32Array.of(1, .871, .678, 1),
          "navy": Float32Array.of(0, 0, .502, 1),
          "oldlace": Float32Array.of(.992, .961, .902, 1),
          "olive": Float32Array.of(.502, .502, 0, 1),
          "olivedrab": Float32Array.of(.42, .557, .137, 1),
          "orange": Float32Array.of(1, .647, 0, 1),
          "orangered": Float32Array.of(1, .271, 0, 1),
          "orchid": Float32Array.of(.855, .439, .839, 1),
          "palegoldenrod": Float32Array.of(.933, .91, .667, 1),
          "palegreen": Float32Array.of(.596, .984, .596, 1),
          "paleturquoise": Float32Array.of(.686, .933, .933, 1),
          "palevioletred": Float32Array.of(.859, .439, .576, 1),
          "papayawhip": Float32Array.of(1, .937, .835, 1),
          "peachpuff": Float32Array.of(1, .855, .725, 1),
          "peru": Float32Array.of(.804, .522, .247, 1),
          "pink": Float32Array.of(1, .753, .796, 1),
          "plum": Float32Array.of(.867, .627, .867, 1),
          "powderblue": Float32Array.of(.69, .878, .902, 1),
          "purple": Float32Array.of(.502, 0, .502, 1),
          "rebeccapurple": Float32Array.of(.4, .2, .6, 1),
          "red": Float32Array.of(1, 0, 0, 1),
          "rosybrown": Float32Array.of(.737, .561, .561, 1),
          "royalblue": Float32Array.of(.255, .412, .882, 1),
          "saddlebrown": Float32Array.of(.545, .271, .075, 1),
          "salmon": Float32Array.of(.98, .502, .447, 1),
          "sandybrown": Float32Array.of(.957, .643, .376, 1),
          "seagreen": Float32Array.of(.18, .545, .341, 1),
          "seashell": Float32Array.of(1, .961, .933, 1),
          "sienna": Float32Array.of(.627, .322, .176, 1),
          "silver": Float32Array.of(.753, .753, .753, 1),
          "skyblue": Float32Array.of(.529, .808, .922, 1),
          "slateblue": Float32Array.of(.416, .353, .804, 1),
          "slategray": Float32Array.of(.439, .502, .565, 1),
          "slategrey": Float32Array.of(.439, .502, .565, 1),
          "snow": Float32Array.of(1, .98, .98, 1),
          "springgreen": Float32Array.of(0, 1, .498, 1),
          "steelblue": Float32Array.of(.275, .51, .706, 1),
          "tan": Float32Array.of(.824, .706, .549, 1),
          "teal": Float32Array.of(0, .502, .502, 1),
          "thistle": Float32Array.of(.847, .749, .847, 1),
          "tomato": Float32Array.of(1, .388, .278, 1),
          "transparent": Float32Array.of(0, 0, 0, 0),
          "turquoise": Float32Array.of(.251, .878, .816, 1),
          "violet": Float32Array.of(.933, .51, .933, 1),
          "wheat": Float32Array.of(.961, .871, .702, 1),
          "white": Float32Array.of(1, 1, 1, 1),
          "whitesmoke": Float32Array.of(.961, .961, .961, 1),
          "yellow": Float32Array.of(1, 1, 0, 1),
          "yellowgreen": Float32Array.of(.604, .804, .196, 1)
        };

        function colorToString(skcolor) {
          var components = CanvasKit.getColorComponents(skcolor);
          var r = components[0];
          var g = components[1];
          var b = components[2];
          var a = components[3];

          if (a === 1) {
            r = r.toString(16).toLowerCase();
            g = g.toString(16).toLowerCase();
            b = b.toString(16).toLowerCase();
            r = r.length === 1 ? "0" + r : r;
            g = g.length === 1 ? "0" + g : g;
            b = b.length === 1 ? "0" + b : b;
            return "#" + r + g + b;
          } else {
            a = a === 0 || a === 1 ? a : a.toFixed(8);
            return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
          }
        }

        function parseColor(colorStr) {
          return CanvasKit.parseColorString(colorStr, colorMap);
        }

        CanvasKit._testing["parseColor"] = parseColor;
        CanvasKit._testing["colorToString"] = colorToString;
        var fontStringRegex = new RegExp("(italic|oblique|normal|)\\s*" + "(small-caps|normal|)\\s*" + "(bold|bolder|lighter|[1-9]00|normal|)\\s*" + "([\\d\\.]+)" + "(px|pt|pc|in|cm|mm|%|em|ex|ch|rem|q)" + "(.+)");
        var defaultHeight = 16;

        function parseFontString(fontStr) {
          var font = fontStringRegex.exec(fontStr);

          if (!font) {
            SkDebug("Invalid font string " + fontStr);
            return null;
          }

          var size = parseFloat(font[4]);
          var sizePx = defaultHeight;
          var unit = font[5];

          switch (unit) {
            case "em":
            case "rem":
              sizePx = size * defaultHeight;
              break;

            case "pt":
              sizePx = size * 4 / 3;
              break;

            case "px":
              sizePx = size;
              break;

            case "pc":
              sizePx = size * defaultHeight;
              break;

            case "in":
              sizePx = size * 96;
              break;

            case "cm":
              sizePx = size * 96 / 2.54;
              break;

            case "mm":
              sizePx = size * (96 / 25.4);
              break;

            case "q":
              sizePx = size * (96 / 25.4 / 4);
              break;

            case "%":
              sizePx = size * (defaultHeight / 75);
              break;
          }

          return {
            "style": font[1],
            "variant": font[2],
            "weight": font[3],
            "sizePx": sizePx,
            "family": font[6].trim()
          };
        }

        function getTypeface(fontstr) {
          var descriptors = parseFontString(fontstr);
          var typeface = getFromFontCache(descriptors);
          descriptors["typeface"] = typeface;
          return descriptors;
        }

        var fontCache = {
          "Noto Mono": {
            "*": null
          },
          "monospace": {
            "*": null
          }
        };

        function addToFontCache(typeface, descriptors) {
          var key = (descriptors["style"] || "normal") + "|" + (descriptors["variant"] || "normal") + "|" + (descriptors["weight"] || "normal");
          var fam = descriptors["family"];

          if (!fontCache[fam]) {
            fontCache[fam] = {
              "*": typeface
            };
          }

          fontCache[fam][key] = typeface;
        }

        function getFromFontCache(descriptors) {
          var key = (descriptors["style"] || "normal") + "|" + (descriptors["variant"] || "normal") + "|" + (descriptors["weight"] || "normal");
          var fam = descriptors["family"];

          if (!fontCache[fam]) {
            return null;
          }

          return fontCache[fam][key] || fontCache[fam]["*"];
        }

        CanvasKit._testing["parseFontString"] = parseFontString;

        function CanvasRenderingContext2D(skcanvas) {
          this._canvas = skcanvas;
          this._paint = new CanvasKit.SkPaint();

          this._paint.setAntiAlias(true);

          this._paint.setStrokeMiter(10);

          this._paint.setStrokeCap(CanvasKit.StrokeCap.Butt);

          this._paint.setStrokeJoin(CanvasKit.StrokeJoin.Miter);

          this._fontString = "10px monospace";
          this._font = new CanvasKit.SkFont(null, 10);

          this._font.setSubpixel(true);

          this._strokeStyle = CanvasKit.BLACK;
          this._fillStyle = CanvasKit.BLACK;
          this._shadowBlur = 0;
          this._shadowColor = CanvasKit.TRANSPARENT;
          this._shadowOffsetX = 0;
          this._shadowOffsetY = 0;
          this._globalAlpha = 1;
          this._strokeWidth = 1;
          this._lineDashOffset = 0;
          this._lineDashList = [];
          this._globalCompositeOperation = CanvasKit.BlendMode.SrcOver;
          this._imageFilterQuality = CanvasKit.FilterQuality.Low;
          this._imageSmoothingEnabled = true;

          this._paint.setStrokeWidth(this._strokeWidth);

          this._paint.setBlendMode(this._globalCompositeOperation);

          this._currentPath = new CanvasKit.SkPath();
          this._currentTransform = CanvasKit.SkMatrix.identity();
          this._canvasStateStack = [];
          this._toCleanUp = [];

          this._dispose = function () {
            this._currentPath["delete"]();

            this._paint["delete"]();

            this._font["delete"]();

            this._toCleanUp.forEach(function (c) {
              c._dispose();
            });
          };

          Object.defineProperty(this, "currentTransform", {
            enumerable: true,
            get: function get() {
              return {
                "a": this._currentTransform[0],
                "c": this._currentTransform[1],
                "e": this._currentTransform[2],
                "b": this._currentTransform[3],
                "d": this._currentTransform[4],
                "f": this._currentTransform[5]
              };
            },
            set: function set(matrix) {
              if (matrix.a) {
                this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);
              }
            }
          });
          Object.defineProperty(this, "fillStyle", {
            enumerable: true,
            get: function get() {
              if (isCanvasKitColor(this._fillStyle)) {
                return colorToString(this._fillStyle);
              }

              return this._fillStyle;
            },
            set: function set(newStyle) {
              if (typeof newStyle === "string") {
                this._fillStyle = parseColor(newStyle);
              } else if (newStyle._getShader) {
                this._fillStyle = newStyle;
              }
            }
          });
          Object.defineProperty(this, "font", {
            enumerable: true,
            get: function get() {
              return this._fontString;
            },
            set: function set(newFont) {
              var tf = getTypeface(newFont);

              if (tf) {
                this._font.setSize(tf["sizePx"]);

                this._font.setTypeface(tf["typeface"]);

                this._fontString = newFont;
              }
            }
          });
          Object.defineProperty(this, "globalAlpha", {
            enumerable: true,
            get: function get() {
              return this._globalAlpha;
            },
            set: function set(newAlpha) {
              if (!isFinite(newAlpha) || newAlpha < 0 || newAlpha > 1) {
                return;
              }

              this._globalAlpha = newAlpha;
            }
          });
          Object.defineProperty(this, "globalCompositeOperation", {
            enumerable: true,
            get: function get() {
              switch (this._globalCompositeOperation) {
                case CanvasKit.BlendMode.SrcOver:
                  return "source-over";

                case CanvasKit.BlendMode.DstOver:
                  return "destination-over";

                case CanvasKit.BlendMode.Src:
                  return "copy";

                case CanvasKit.BlendMode.Dst:
                  return "destination";

                case CanvasKit.BlendMode.Clear:
                  return "clear";

                case CanvasKit.BlendMode.SrcIn:
                  return "source-in";

                case CanvasKit.BlendMode.DstIn:
                  return "destination-in";

                case CanvasKit.BlendMode.SrcOut:
                  return "source-out";

                case CanvasKit.BlendMode.DstOut:
                  return "destination-out";

                case CanvasKit.BlendMode.SrcATop:
                  return "source-atop";

                case CanvasKit.BlendMode.DstATop:
                  return "destination-atop";

                case CanvasKit.BlendMode.Xor:
                  return "xor";

                case CanvasKit.BlendMode.Plus:
                  return "lighter";

                case CanvasKit.BlendMode.Multiply:
                  return "multiply";

                case CanvasKit.BlendMode.Screen:
                  return "screen";

                case CanvasKit.BlendMode.Overlay:
                  return "overlay";

                case CanvasKit.BlendMode.Darken:
                  return "darken";

                case CanvasKit.BlendMode.Lighten:
                  return "lighten";

                case CanvasKit.BlendMode.ColorDodge:
                  return "color-dodge";

                case CanvasKit.BlendMode.ColorBurn:
                  return "color-burn";

                case CanvasKit.BlendMode.HardLight:
                  return "hard-light";

                case CanvasKit.BlendMode.SoftLight:
                  return "soft-light";

                case CanvasKit.BlendMode.Difference:
                  return "difference";

                case CanvasKit.BlendMode.Exclusion:
                  return "exclusion";

                case CanvasKit.BlendMode.Hue:
                  return "hue";

                case CanvasKit.BlendMode.Saturation:
                  return "saturation";

                case CanvasKit.BlendMode.Color:
                  return "color";

                case CanvasKit.BlendMode.Luminosity:
                  return "luminosity";
              }
            },
            set: function set(newMode) {
              switch (newMode) {
                case "source-over":
                  this._globalCompositeOperation = CanvasKit.BlendMode.SrcOver;
                  break;

                case "destination-over":
                  this._globalCompositeOperation = CanvasKit.BlendMode.DstOver;
                  break;

                case "copy":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Src;
                  break;

                case "destination":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Dst;
                  break;

                case "clear":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Clear;
                  break;

                case "source-in":
                  this._globalCompositeOperation = CanvasKit.BlendMode.SrcIn;
                  break;

                case "destination-in":
                  this._globalCompositeOperation = CanvasKit.BlendMode.DstIn;
                  break;

                case "source-out":
                  this._globalCompositeOperation = CanvasKit.BlendMode.SrcOut;
                  break;

                case "destination-out":
                  this._globalCompositeOperation = CanvasKit.BlendMode.DstOut;
                  break;

                case "source-atop":
                  this._globalCompositeOperation = CanvasKit.BlendMode.SrcATop;
                  break;

                case "destination-atop":
                  this._globalCompositeOperation = CanvasKit.BlendMode.DstATop;
                  break;

                case "xor":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Xor;
                  break;

                case "lighter":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Plus;
                  break;

                case "plus-lighter":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Plus;
                  break;

                case "plus-darker":
                  throw "plus-darker is not supported";

                case "multiply":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Multiply;
                  break;

                case "screen":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Screen;
                  break;

                case "overlay":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Overlay;
                  break;

                case "darken":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Darken;
                  break;

                case "lighten":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Lighten;
                  break;

                case "color-dodge":
                  this._globalCompositeOperation = CanvasKit.BlendMode.ColorDodge;
                  break;

                case "color-burn":
                  this._globalCompositeOperation = CanvasKit.BlendMode.ColorBurn;
                  break;

                case "hard-light":
                  this._globalCompositeOperation = CanvasKit.BlendMode.HardLight;
                  break;

                case "soft-light":
                  this._globalCompositeOperation = CanvasKit.BlendMode.SoftLight;
                  break;

                case "difference":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Difference;
                  break;

                case "exclusion":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Exclusion;
                  break;

                case "hue":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Hue;
                  break;

                case "saturation":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Saturation;
                  break;

                case "color":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Color;
                  break;

                case "luminosity":
                  this._globalCompositeOperation = CanvasKit.BlendMode.Luminosity;
                  break;

                default:
                  return;
              }

              this._paint.setBlendMode(this._globalCompositeOperation);
            }
          });
          Object.defineProperty(this, "imageSmoothingEnabled", {
            enumerable: true,
            get: function get() {
              return this._imageSmoothingEnabled;
            },
            set: function set(newVal) {
              this._imageSmoothingEnabled = !!newVal;
            }
          });
          Object.defineProperty(this, "imageSmoothingQuality", {
            enumerable: true,
            get: function get() {
              switch (this._imageFilterQuality) {
                case CanvasKit.FilterQuality.Low:
                  return "low";

                case CanvasKit.FilterQuality.Medium:
                  return "medium";

                case CanvasKit.FilterQuality.High:
                  return "high";
              }
            },
            set: function set(newQuality) {
              switch (newQuality) {
                case "low":
                  this._imageFilterQuality = CanvasKit.FilterQuality.Low;
                  return;

                case "medium":
                  this._imageFilterQuality = CanvasKit.FilterQuality.Medium;
                  return;

                case "high":
                  this._imageFilterQuality = CanvasKit.FilterQuality.High;
                  return;
              }
            }
          });
          Object.defineProperty(this, "lineCap", {
            enumerable: true,
            get: function get() {
              switch (this._paint.getStrokeCap()) {
                case CanvasKit.StrokeCap.Butt:
                  return "butt";

                case CanvasKit.StrokeCap.Round:
                  return "round";

                case CanvasKit.StrokeCap.Square:
                  return "square";
              }
            },
            set: function set(newCap) {
              switch (newCap) {
                case "butt":
                  this._paint.setStrokeCap(CanvasKit.StrokeCap.Butt);

                  return;

                case "round":
                  this._paint.setStrokeCap(CanvasKit.StrokeCap.Round);

                  return;

                case "square":
                  this._paint.setStrokeCap(CanvasKit.StrokeCap.Square);

                  return;
              }
            }
          });
          Object.defineProperty(this, "lineDashOffset", {
            enumerable: true,
            get: function get() {
              return this._lineDashOffset;
            },
            set: function set(newOffset) {
              if (!isFinite(newOffset)) {
                return;
              }

              this._lineDashOffset = newOffset;
            }
          });
          Object.defineProperty(this, "lineJoin", {
            enumerable: true,
            get: function get() {
              switch (this._paint.getStrokeJoin()) {
                case CanvasKit.StrokeJoin.Miter:
                  return "miter";

                case CanvasKit.StrokeJoin.Round:
                  return "round";

                case CanvasKit.StrokeJoin.Bevel:
                  return "bevel";
              }
            },
            set: function set(newJoin) {
              switch (newJoin) {
                case "miter":
                  this._paint.setStrokeJoin(CanvasKit.StrokeJoin.Miter);

                  return;

                case "round":
                  this._paint.setStrokeJoin(CanvasKit.StrokeJoin.Round);

                  return;

                case "bevel":
                  this._paint.setStrokeJoin(CanvasKit.StrokeJoin.Bevel);

                  return;
              }
            }
          });
          Object.defineProperty(this, "lineWidth", {
            enumerable: true,
            get: function get() {
              return this._paint.getStrokeWidth();
            },
            set: function set(newWidth) {
              if (newWidth <= 0 || !newWidth) {
                return;
              }

              this._strokeWidth = newWidth;

              this._paint.setStrokeWidth(newWidth);
            }
          });
          Object.defineProperty(this, "miterLimit", {
            enumerable: true,
            get: function get() {
              return this._paint.getStrokeMiter();
            },
            set: function set(newLimit) {
              if (newLimit <= 0 || !newLimit) {
                return;
              }

              this._paint.setStrokeMiter(newLimit);
            }
          });
          Object.defineProperty(this, "shadowBlur", {
            enumerable: true,
            get: function get() {
              return this._shadowBlur;
            },
            set: function set(newBlur) {
              if (newBlur < 0 || !isFinite(newBlur)) {
                return;
              }

              this._shadowBlur = newBlur;
            }
          });
          Object.defineProperty(this, "shadowColor", {
            enumerable: true,
            get: function get() {
              return colorToString(this._shadowColor);
            },
            set: function set(newColor) {
              this._shadowColor = parseColor(newColor);
            }
          });
          Object.defineProperty(this, "shadowOffsetX", {
            enumerable: true,
            get: function get() {
              return this._shadowOffsetX;
            },
            set: function set(newOffset) {
              if (!isFinite(newOffset)) {
                return;
              }

              this._shadowOffsetX = newOffset;
            }
          });
          Object.defineProperty(this, "shadowOffsetY", {
            enumerable: true,
            get: function get() {
              return this._shadowOffsetY;
            },
            set: function set(newOffset) {
              if (!isFinite(newOffset)) {
                return;
              }

              this._shadowOffsetY = newOffset;
            }
          });
          Object.defineProperty(this, "strokeStyle", {
            enumerable: true,
            get: function get() {
              return colorToString(this._strokeStyle);
            },
            set: function set(newStyle) {
              if (typeof newStyle === "string") {
                this._strokeStyle = parseColor(newStyle);
              } else if (newStyle._getShader) {
                this._strokeStyle = newStyle;
              }
            }
          });

          this.arc = function (x, y, radius, startAngle, endAngle, ccw) {
            arc(this._currentPath, x, y, radius, startAngle, endAngle, ccw);
          };

          this.arcTo = function (x1, y1, x2, y2, radius) {
            arcTo(this._currentPath, x1, y1, x2, y2, radius);
          };

          this.beginPath = function () {
            this._currentPath["delete"]();

            this._currentPath = new CanvasKit.SkPath();
          };

          this.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
            bezierCurveTo(this._currentPath, cp1x, cp1y, cp2x, cp2y, x, y);
          };

          this.clearRect = function (x, y, width, height) {
            this._paint.setStyle(CanvasKit.PaintStyle.Fill);

            this._paint.setBlendMode(CanvasKit.BlendMode.Clear);

            this._canvas.drawRect(CanvasKit.XYWHRect(x, y, width, height), this._paint);

            this._paint.setBlendMode(this._globalCompositeOperation);
          };

          this.clip = function (path, fillRule) {
            if (typeof path === "string") {
              fillRule = path;
              path = this._currentPath;
            } else if (path && path._getPath) {
              path = path._getPath();
            }

            if (!path) {
              path = this._currentPath;
            }

            var clip = path.copy();

            if (fillRule && fillRule.toLowerCase() === "evenodd") {
              clip.setFillType(CanvasKit.FillType.EvenOdd);
            } else {
              clip.setFillType(CanvasKit.FillType.Winding);
            }

            this._canvas.clipPath(clip, CanvasKit.ClipOp.Intersect, true);

            clip["delete"]();
          };

          this.closePath = function () {
            closePath(this._currentPath);
          };

          this.createImageData = function () {
            if (arguments.length === 1) {
              var oldData = arguments[0];
              var byteLength = 4 * oldData.width * oldData.height;
              return new ImageData(new Uint8ClampedArray(byteLength), oldData.width, oldData.height);
            } else if (arguments.length === 2) {
              var width = arguments[0];
              var height = arguments[1];
              var byteLength = 4 * width * height;
              return new ImageData(new Uint8ClampedArray(byteLength), width, height);
            } else {
              throw "createImageData expects 1 or 2 arguments, got " + arguments.length;
            }
          };

          this.createLinearGradient = function (x1, y1, x2, y2) {
            if (!allAreFinite(arguments)) {
              return;
            }

            var lcg = new LinearCanvasGradient(x1, y1, x2, y2);

            this._toCleanUp.push(lcg);

            return lcg;
          };

          this.createPattern = function (image, repetition) {
            var cp = new CanvasPattern(image, repetition);

            this._toCleanUp.push(cp);

            return cp;
          };

          this.createRadialGradient = function (x1, y1, r1, x2, y2, r2) {
            if (!allAreFinite(arguments)) {
              return;
            }

            var rcg = new RadialCanvasGradient(x1, y1, r1, x2, y2, r2);

            this._toCleanUp.push(rcg);

            return rcg;
          };

          this._imagePaint = function () {
            var iPaint = this._fillPaint();

            if (!this._imageSmoothingEnabled) {
              iPaint.setFilterQuality(CanvasKit.FilterQuality.None);
            } else {
              iPaint.setFilterQuality(this._imageFilterQuality);
            }

            return iPaint;
          };

          this.drawImage = function (img) {
            var iPaint = this._imagePaint();

            if (arguments.length === 3 || arguments.length === 5) {
              var destRect = CanvasKit.XYWHRect(arguments[1], arguments[2], arguments[3] || img.width(), arguments[4] || img.height());
              var srcRect = CanvasKit.XYWHRect(0, 0, img.width(), img.height());
            } else if (arguments.length === 9) {
              var destRect = CanvasKit.XYWHRect(arguments[5], arguments[6], arguments[7], arguments[8]);
              var srcRect = CanvasKit.XYWHRect(arguments[1], arguments[2], arguments[3], arguments[4]);
            } else {
              throw "invalid number of args for drawImage, need 3, 5, or 9; got " + arguments.length;
            }

            this._canvas.drawImageRect(img, srcRect, destRect, iPaint, false);

            iPaint.dispose();
          };

          this.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, ccw) {
            ellipse(this._currentPath, x, y, radiusX, radiusY, rotation, startAngle, endAngle, ccw);
          };

          this._fillPaint = function () {
            var paint = this._paint.copy();

            paint.setStyle(CanvasKit.PaintStyle.Fill);

            if (isCanvasKitColor(this._fillStyle)) {
              var alphaColor = CanvasKit.multiplyByAlpha(this._fillStyle, this._globalAlpha);
              paint.setColor(alphaColor);
            } else {
              var shader = this._fillStyle._getShader(this._currentTransform);

              paint.setColor(CanvasKit.Color(0, 0, 0, this._globalAlpha));
              paint.setShader(shader);
            }

            paint.dispose = function () {
              this["delete"]();
            };

            return paint;
          };

          this.fill = function (path, fillRule) {
            if (typeof path === "string") {
              fillRule = path;
              path = this._currentPath;
            } else if (path && path._getPath) {
              path = path._getPath();
            }

            if (fillRule === "evenodd") {
              this._currentPath.setFillType(CanvasKit.FillType.EvenOdd);
            } else if (fillRule === "nonzero" || !fillRule) {
              this._currentPath.setFillType(CanvasKit.FillType.Winding);
            } else {
              throw "invalid fill rule";
            }

            if (!path) {
              path = this._currentPath;
            }

            var fillPaint = this._fillPaint();

            var shadowPaint = this._shadowPaint(fillPaint);

            if (shadowPaint) {
              this._canvas.save();

              this._applyShadowOffsetMatrix();

              this._canvas.drawPath(path, shadowPaint);

              this._canvas.restore();

              shadowPaint.dispose();
            }

            this._canvas.drawPath(path, fillPaint);

            fillPaint.dispose();
          };

          this.fillRect = function (x, y, width, height) {
            var fillPaint = this._fillPaint();

            var shadowPaint = this._shadowPaint(fillPaint);

            if (shadowPaint) {
              this._canvas.save();

              this._applyShadowOffsetMatrix();

              this._canvas.drawRect(CanvasKit.XYWHRect(x, y, width, height), shadowPaint);

              this._canvas.restore();

              shadowPaint.dispose();
            }

            this._canvas.drawRect(CanvasKit.XYWHRect(x, y, width, height), fillPaint);

            fillPaint.dispose();
          };

          this.fillText = function (text, x, y, maxWidth) {
            var fillPaint = this._fillPaint();

            var blob = CanvasKit.SkTextBlob.MakeFromText(text, this._font);

            var shadowPaint = this._shadowPaint(fillPaint);

            if (shadowPaint) {
              this._canvas.save();

              this._applyShadowOffsetMatrix();

              this._canvas.drawTextBlob(blob, x, y, shadowPaint);

              this._canvas.restore();

              shadowPaint.dispose();
            }

            this._canvas.drawTextBlob(blob, x, y, fillPaint);

            blob["delete"]();
            fillPaint.dispose();
          };

          this.getImageData = function (x, y, w, h) {
            var pixels = this._canvas.readPixels(x, y, w, h);

            if (!pixels) {
              return null;
            }

            return new ImageData(new Uint8ClampedArray(pixels.buffer), w, h);
          };

          this.getLineDash = function () {
            return this._lineDashList.slice();
          };

          this._mapToLocalCoordinates = function (pts) {
            var inverted = CanvasKit.SkMatrix.invert(this._currentTransform);
            CanvasKit.SkMatrix.mapPoints(inverted, pts);
            return pts;
          };

          this.isPointInPath = function (x, y, fillmode) {
            var args = arguments;

            if (args.length === 3) {
              var path = this._currentPath;
            } else if (args.length === 4) {
              var path = args[0];
              x = args[1];
              y = args[2];
              fillmode = args[3];
            } else {
              throw "invalid arg count, need 3 or 4, got " + args.length;
            }

            if (!isFinite(x) || !isFinite(y)) {
              return false;
            }

            fillmode = fillmode || "nonzero";

            if (!(fillmode === "nonzero" || fillmode === "evenodd")) {
              return false;
            }

            var pts = this._mapToLocalCoordinates([x, y]);

            x = pts[0];
            y = pts[1];
            path.setFillType(fillmode === "nonzero" ? CanvasKit.FillType.Winding : CanvasKit.FillType.EvenOdd);
            return path.contains(x, y);
          };

          this.isPointInStroke = function (x, y) {
            var args = arguments;

            if (args.length === 2) {
              var path = this._currentPath;
            } else if (args.length === 3) {
              var path = args[0];
              x = args[1];
              y = args[2];
            } else {
              throw "invalid arg count, need 2 or 3, got " + args.length;
            }

            if (!isFinite(x) || !isFinite(y)) {
              return false;
            }

            var pts = this._mapToLocalCoordinates([x, y]);

            x = pts[0];
            y = pts[1];
            var temp = path.copy();
            temp.setFillType(CanvasKit.FillType.Winding);
            temp.stroke({
              "width": this.lineWidth,
              "miter_limit": this.miterLimit,
              "cap": this._paint.getStrokeCap(),
              "join": this._paint.getStrokeJoin(),
              "precision": .3
            });
            var retVal = temp.contains(x, y);
            temp["delete"]();
            return retVal;
          };

          this.lineTo = function (x, y) {
            lineTo(this._currentPath, x, y);
          };

          this.measureText = function (text) {
            return {
              width: this._font.measureText(text)
            };
          };

          this.moveTo = function (x, y) {
            moveTo(this._currentPath, x, y);
          };

          this.putImageData = function (imageData, x, y, dirtyX, dirtyY, dirtyWidth, dirtyHeight) {
            if (!allAreFinite([x, y, dirtyX, dirtyY, dirtyWidth, dirtyHeight])) {
              return;
            }

            if (dirtyX === undefined) {
              this._canvas.writePixels(imageData.data, imageData.width, imageData.height, x, y);

              return;
            }

            dirtyX = dirtyX || 0;
            dirtyY = dirtyY || 0;
            dirtyWidth = dirtyWidth || imageData.width;
            dirtyHeight = dirtyHeight || imageData.height;

            if (dirtyWidth < 0) {
              dirtyX = dirtyX + dirtyWidth;
              dirtyWidth = Math.abs(dirtyWidth);
            }

            if (dirtyHeight < 0) {
              dirtyY = dirtyY + dirtyHeight;
              dirtyHeight = Math.abs(dirtyHeight);
            }

            if (dirtyX < 0) {
              dirtyWidth = dirtyWidth + dirtyX;
              dirtyX = 0;
            }

            if (dirtyY < 0) {
              dirtyHeight = dirtyHeight + dirtyY;
              dirtyY = 0;
            }

            if (dirtyWidth <= 0 || dirtyHeight <= 0) {
              return;
            }

            var img = CanvasKit.MakeImage(imageData.data, imageData.width, imageData.height, CanvasKit.AlphaType.Unpremul, CanvasKit.ColorType.RGBA_8888, CanvasKit.SkColorSpace.SRGB);
            var src = CanvasKit.XYWHRect(dirtyX, dirtyY, dirtyWidth, dirtyHeight);
            var dst = CanvasKit.XYWHRect(x + dirtyX, y + dirtyY, dirtyWidth, dirtyHeight);
            var inverted = CanvasKit.SkMatrix.invert(this._currentTransform);

            this._canvas.save();

            this._canvas.concat(inverted);

            this._canvas.drawImageRect(img, src, dst, null, false);

            this._canvas.restore();

            img["delete"]();
          };

          this.quadraticCurveTo = function (cpx, cpy, x, y) {
            quadraticCurveTo(this._currentPath, cpx, cpy, x, y);
          };

          this.rect = function (x, y, width, height) {
            rect(this._currentPath, x, y, width, height);
          };

          this.resetTransform = function () {
            this._currentPath.transform(this._currentTransform);

            var inverted = CanvasKit.SkMatrix.invert(this._currentTransform);

            this._canvas.concat(inverted);

            this._currentTransform = this._canvas.getTotalMatrix();
          };

          this.restore = function () {
            var newState = this._canvasStateStack.pop();

            if (!newState) {
              return;
            }

            var combined = CanvasKit.SkMatrix.multiply(this._currentTransform, CanvasKit.SkMatrix.invert(newState.ctm));

            this._currentPath.transform(combined);

            this._paint["delete"]();

            this._paint = newState.paint;
            this._lineDashList = newState.ldl;
            this._strokeWidth = newState.sw;
            this._strokeStyle = newState.ss;
            this._fillStyle = newState.fs;
            this._shadowOffsetX = newState.sox;
            this._shadowOffsetY = newState.soy;
            this._shadowBlur = newState.sb;
            this._shadowColor = newState.shc;
            this._globalAlpha = newState.ga;
            this._globalCompositeOperation = newState.gco;
            this._lineDashOffset = newState.ldo;
            this._imageSmoothingEnabled = newState.ise;
            this._imageFilterQuality = newState.isq;
            this._fontString = newState.fontstr;

            this._canvas.restore();

            this._currentTransform = this._canvas.getTotalMatrix();
          };

          this.rotate = function (radians) {
            if (!isFinite(radians)) {
              return;
            }

            var inverted = CanvasKit.SkMatrix.rotated(-radians);

            this._currentPath.transform(inverted);

            this._canvas.rotate(radiansToDegrees(radians), 0, 0);

            this._currentTransform = this._canvas.getTotalMatrix();
          };

          this.save = function () {
            if (this._fillStyle._copy) {
              var fs = this._fillStyle._copy();

              this._toCleanUp.push(fs);
            } else {
              var fs = this._fillStyle;
            }

            if (this._strokeStyle._copy) {
              var ss = this._strokeStyle._copy();

              this._toCleanUp.push(ss);
            } else {
              var ss = this._strokeStyle;
            }

            this._canvasStateStack.push({
              ctm: this._currentTransform.slice(),
              ldl: this._lineDashList.slice(),
              sw: this._strokeWidth,
              ss: ss,
              fs: fs,
              sox: this._shadowOffsetX,
              soy: this._shadowOffsetY,
              sb: this._shadowBlur,
              shc: this._shadowColor,
              ga: this._globalAlpha,
              ldo: this._lineDashOffset,
              gco: this._globalCompositeOperation,
              ise: this._imageSmoothingEnabled,
              isq: this._imageFilterQuality,
              paint: this._paint.copy(),
              fontstr: this._fontString
            });

            this._canvas.save();
          };

          this.scale = function (sx, sy) {
            if (!allAreFinite(arguments)) {
              return;
            }

            var inverted = CanvasKit.SkMatrix.scaled(1 / sx, 1 / sy);

            this._currentPath.transform(inverted);

            this._canvas.scale(sx, sy);

            this._currentTransform = this._canvas.getTotalMatrix();
          };

          this.setLineDash = function (dashes) {
            for (var i = 0; i < dashes.length; i++) {
              if (!isFinite(dashes[i]) || dashes[i] < 0) {
                SkDebug("dash list must have positive, finite values");
                return;
              }
            }

            if (dashes.length % 2 === 1) {
              Array.prototype.push.apply(dashes, dashes);
            }

            this._lineDashList = dashes;
          };

          this.setTransform = function (a, b, c, d, e, f) {
            if (!allAreFinite(arguments)) {
              return;
            }

            this.resetTransform();
            this.transform(a, b, c, d, e, f);
          };

          this._applyShadowOffsetMatrix = function () {
            var inverted = CanvasKit.SkMatrix.invert(this._currentTransform);

            this._canvas.concat(inverted);

            this._canvas.concat(CanvasKit.SkMatrix.translated(this._shadowOffsetX, this._shadowOffsetY));

            this._canvas.concat(this._currentTransform);
          };

          this._shadowPaint = function (basePaint) {
            var alphaColor = CanvasKit.multiplyByAlpha(this._shadowColor, this._globalAlpha);

            if (!CanvasKit.getColorComponents(alphaColor)[3]) {
              return null;
            }

            if (!(this._shadowBlur || this._shadowOffsetY || this._shadowOffsetX)) {
              return null;
            }

            var shadowPaint = basePaint.copy();
            shadowPaint.setColor(alphaColor);
            var blurEffect = CanvasKit.SkMaskFilter.MakeBlur(CanvasKit.BlurStyle.Normal, SkBlurRadiusToSigma(this._shadowBlur), false);
            shadowPaint.setMaskFilter(blurEffect);

            shadowPaint.dispose = function () {
              blurEffect["delete"]();
              this["delete"]();
            };

            return shadowPaint;
          };

          this._strokePaint = function () {
            var paint = this._paint.copy();

            paint.setStyle(CanvasKit.PaintStyle.Stroke);

            if (isCanvasKitColor(this._strokeStyle)) {
              var alphaColor = CanvasKit.multiplyByAlpha(this._strokeStyle, this._globalAlpha);
              paint.setColor(alphaColor);
            } else {
              var shader = this._strokeStyle._getShader(this._currentTransform);

              paint.setColor(CanvasKit.Color(0, 0, 0, this._globalAlpha));
              paint.setShader(shader);
            }

            paint.setStrokeWidth(this._strokeWidth);

            if (this._lineDashList.length) {
              var dashedEffect = CanvasKit.SkPathEffect.MakeDash(this._lineDashList, this._lineDashOffset);
              paint.setPathEffect(dashedEffect);
            }

            paint.dispose = function () {
              dashedEffect && dashedEffect["delete"]();
              this["delete"]();
            };

            return paint;
          };

          this.stroke = function (path) {
            path = path ? path._getPath() : this._currentPath;

            var strokePaint = this._strokePaint();

            var shadowPaint = this._shadowPaint(strokePaint);

            if (shadowPaint) {
              this._canvas.save();

              this._applyShadowOffsetMatrix();

              this._canvas.drawPath(path, shadowPaint);

              this._canvas.restore();

              shadowPaint.dispose();
            }

            this._canvas.drawPath(path, strokePaint);

            strokePaint.dispose();
          };

          this.strokeRect = function (x, y, width, height) {
            var strokePaint = this._strokePaint();

            var shadowPaint = this._shadowPaint(strokePaint);

            if (shadowPaint) {
              this._canvas.save();

              this._applyShadowOffsetMatrix();

              this._canvas.drawRect(CanvasKit.XYWHRect(x, y, width, height), shadowPaint);

              this._canvas.restore();

              shadowPaint.dispose();
            }

            this._canvas.drawRect(CanvasKit.XYWHRect(x, y, width, height), strokePaint);

            strokePaint.dispose();
          };

          this.strokeText = function (text, x, y, maxWidth) {
            var strokePaint = this._strokePaint();

            var blob = CanvasKit.SkTextBlob.MakeFromText(text, this._font);

            var shadowPaint = this._shadowPaint(strokePaint);

            if (shadowPaint) {
              this._canvas.save();

              this._applyShadowOffsetMatrix();

              this._canvas.drawTextBlob(blob, x, y, shadowPaint);

              this._canvas.restore();

              shadowPaint.dispose();
            }

            this._canvas.drawTextBlob(blob, x, y, strokePaint);

            blob["delete"]();
            strokePaint.dispose();
          };

          this.translate = function (dx, dy) {
            if (!allAreFinite(arguments)) {
              return;
            }

            var inverted = CanvasKit.SkMatrix.translated(-dx, -dy);

            this._currentPath.transform(inverted);

            this._canvas.translate(dx, dy);

            this._currentTransform = this._canvas.getTotalMatrix();
          };

          this.transform = function (a, b, c, d, e, f) {
            var newTransform = [a, c, e, b, d, f, 0, 0, 1];
            var inverted = CanvasKit.SkMatrix.invert(newTransform);

            this._currentPath.transform(inverted);

            this._canvas.concat(newTransform);

            this._currentTransform = this._canvas.getTotalMatrix();
          };

          this.addHitRegion = function () {};

          this.clearHitRegions = function () {};

          this.drawFocusIfNeeded = function () {};

          this.removeHitRegion = function () {};

          this.scrollPathIntoView = function () {};

          Object.defineProperty(this, "canvas", {
            value: null,
            writable: false
          });
        }

        function SkBlurRadiusToSigma(radius) {
          return radius / 2;
        }

        CanvasKit.MakeCanvas = function (width, height) {
          var surf = CanvasKit.MakeSurface(width, height);

          if (surf) {
            return new HTMLCanvas(surf);
          }

          return null;
        };

        function HTMLCanvas(skSurface) {
          this._surface = skSurface;
          this._context = new CanvasRenderingContext2D(skSurface.getCanvas());
          this._toCleanup = [];
          this._fontmgr = CanvasKit.SkFontMgr.RefDefault();

          this.decodeImage = function (data) {
            var img = CanvasKit.MakeImageFromEncoded(data);

            if (!img) {
              throw "Invalid input";
            }

            this._toCleanup.push(img);

            return img;
          };

          this.loadFont = function (buffer, descriptors) {
            var newFont = this._fontmgr.MakeTypefaceFromData(buffer);

            if (!newFont) {
              SkDebug("font could not be processed", descriptors);
              return null;
            }

            this._toCleanup.push(newFont);

            addToFontCache(newFont, descriptors);
          };

          this.makePath2D = function (path) {
            var p2d = new Path2D(path);

            this._toCleanup.push(p2d._getPath());

            return p2d;
          };

          this.getContext = function (type) {
            if (type === "2d") {
              return this._context;
            }

            return null;
          };

          this.toDataURL = function (codec, quality) {
            this._surface.flush();

            var img = this._surface.makeImageSnapshot();

            if (!img) {
              SkDebug("no snapshot");
              return;
            }

            var codec = codec || "image/png";
            var format = CanvasKit.ImageFormat.PNG;

            if (codec === "image/jpeg") {
              format = CanvasKit.ImageFormat.JPEG;
            }

            var quality = quality || .92;
            var skimg = img.encodeToData(format, quality);

            if (!skimg) {
              SkDebug("encoding failure");
              return;
            }

            var imgBytes = CanvasKit.getSkDataBytes(skimg);
            return "data:" + codec + ";base64," + toBase64String(imgBytes);
          };

          this.dispose = function () {
            this._context._dispose();

            this._toCleanup.forEach(function (i) {
              i["delete"]();
            });

            this._surface.dispose();
          };
        }

        function ImageData(arr, width, height) {
          if (!width || height === 0) {
            throw "invalid dimensions, width and height must be non-zero";
          }

          if (arr.length % 4) {
            throw "arr must be a multiple of 4";
          }

          height = height || arr.length / (4 * width);
          Object.defineProperty(this, "data", {
            value: arr,
            writable: false
          });
          Object.defineProperty(this, "height", {
            value: height,
            writable: false
          });
          Object.defineProperty(this, "width", {
            value: width,
            writable: false
          });
        }

        CanvasKit.ImageData = function () {
          if (arguments.length === 2) {
            var width = arguments[0];
            var height = arguments[1];
            var byteLength = 4 * width * height;
            return new ImageData(new Uint8ClampedArray(byteLength), width, height);
          } else if (arguments.length === 3) {
            var arr = arguments[0];

            if (arr.prototype.constructor !== Uint8ClampedArray) {
              throw "bytes must be given as a Uint8ClampedArray";
            }

            var width = arguments[1];
            var height = arguments[2];

            if (arr % 4) {
              throw "bytes must be given in a multiple of 4";
            }

            if (arr % width) {
              throw "bytes must divide evenly by width";
            }

            if (height && height !== arr / (width * 4)) {
              throw "invalid height given";
            }

            height = arr / (width * 4);
            return new ImageData(arr, width, height);
          } else {
            throw "invalid number of arguments - takes 2 or 3, saw " + arguments.length;
          }
        };

        function LinearCanvasGradient(x1, y1, x2, y2) {
          this._shader = null;
          this._colors = [];
          this._pos = [];

          this.addColorStop = function (offset, color) {
            if (offset < 0 || offset > 1 || !isFinite(offset)) {
              throw "offset must be between 0 and 1 inclusively";
            }

            color = parseColor(color);

            var idx = this._pos.indexOf(offset);

            if (idx !== -1) {
              this._colors[idx] = color;
            } else {
              for (idx = 0; idx < this._pos.length; idx++) {
                if (this._pos[idx] > offset) {
                  break;
                }
              }

              this._pos.splice(idx, 0, offset);

              this._colors.splice(idx, 0, color);
            }
          };

          this._copy = function () {
            var lcg = new LinearCanvasGradient(x1, y1, x2, y2);
            lcg._colors = this._colors.slice();
            lcg._pos = this._pos.slice();
            return lcg;
          };

          this._dispose = function () {
            if (this._shader) {
              this._shader["delete"]();

              this._shader = null;
            }
          };

          this._getShader = function (currentTransform) {
            var pts = [x1, y1, x2, y2];
            CanvasKit.SkMatrix.mapPoints(currentTransform, pts);
            var sx1 = pts[0];
            var sy1 = pts[1];
            var sx2 = pts[2];
            var sy2 = pts[3];

            this._dispose();

            this._shader = CanvasKit.SkShader.MakeLinearGradient([sx1, sy1], [sx2, sy2], this._colors, this._pos, CanvasKit.TileMode.Clamp);
            return this._shader;
          };
        }

        function arc(skpath, x, y, radius, startAngle, endAngle, ccw) {
          ellipse(skpath, x, y, radius, radius, 0, startAngle, endAngle, ccw);
        }

        function arcTo(skpath, x1, y1, x2, y2, radius) {
          if (!allAreFinite([x1, y1, x2, y2, radius])) {
            return;
          }

          if (radius < 0) {
            throw "radii cannot be negative";
          }

          if (skpath.isEmpty()) {
            skpath.moveTo(x1, y1);
          }

          skpath.arcToTangent(x1, y1, x2, y2, radius);
        }

        function bezierCurveTo(skpath, cp1x, cp1y, cp2x, cp2y, x, y) {
          if (!allAreFinite([cp1x, cp1y, cp2x, cp2y, x, y])) {
            return;
          }

          if (skpath.isEmpty()) {
            skpath.moveTo(cp1x, cp1y);
          }

          skpath.cubicTo(cp1x, cp1y, cp2x, cp2y, x, y);
        }

        function closePath(skpath) {
          if (skpath.isEmpty()) {
            return;
          }

          var bounds = skpath.getBounds();

          if (bounds.fBottom - bounds.fTop || bounds.fRight - bounds.fLeft) {
            skpath.close();
          }
        }

        function _ellipseHelper(skpath, x, y, radiusX, radiusY, startAngle, endAngle) {
          var sweepDegrees = radiansToDegrees(endAngle - startAngle);
          var startDegrees = radiansToDegrees(startAngle);
          var oval = CanvasKit.LTRBRect(x - radiusX, y - radiusY, x + radiusX, y + radiusY);

          if (almostEqual(Math.abs(sweepDegrees), 360)) {
            var halfSweep = sweepDegrees / 2;
            skpath.arcToOval(oval, startDegrees, halfSweep, false);
            skpath.arcToOval(oval, startDegrees + halfSweep, halfSweep, false);
            return;
          }

          skpath.arcToOval(oval, startDegrees, sweepDegrees, false);
        }

        function ellipse(skpath, x, y, radiusX, radiusY, rotation, startAngle, endAngle, ccw) {
          if (!allAreFinite([x, y, radiusX, radiusY, rotation, startAngle, endAngle])) {
            return;
          }

          if (radiusX < 0 || radiusY < 0) {
            throw "radii cannot be negative";
          }

          var tao = 2 * Math.PI;
          var newStartAngle = startAngle % tao;

          if (newStartAngle < 0) {
            newStartAngle += tao;
          }

          var delta = newStartAngle - startAngle;
          startAngle = newStartAngle;
          endAngle += delta;

          if (!ccw && endAngle - startAngle >= tao) {
            endAngle = startAngle + tao;
          } else if (ccw && startAngle - endAngle >= tao) {
            endAngle = startAngle - tao;
          } else if (!ccw && startAngle > endAngle) {
            endAngle = startAngle + (tao - (startAngle - endAngle) % tao);
          } else if (ccw && startAngle < endAngle) {
            endAngle = startAngle - (tao - (endAngle - startAngle) % tao);
          }

          if (!rotation) {
            _ellipseHelper(skpath, x, y, radiusX, radiusY, startAngle, endAngle);

            return;
          }

          var rotated = CanvasKit.SkMatrix.rotated(rotation, x, y);
          var rotatedInvert = CanvasKit.SkMatrix.rotated(-rotation, x, y);
          skpath.transform(rotatedInvert);

          _ellipseHelper(skpath, x, y, radiusX, radiusY, startAngle, endAngle);

          skpath.transform(rotated);
        }

        function lineTo(skpath, x, y) {
          if (!allAreFinite([x, y])) {
            return;
          }

          if (skpath.isEmpty()) {
            skpath.moveTo(x, y);
          }

          skpath.lineTo(x, y);
        }

        function moveTo(skpath, x, y) {
          if (!allAreFinite([x, y])) {
            return;
          }

          skpath.moveTo(x, y);
        }

        function quadraticCurveTo(skpath, cpx, cpy, x, y) {
          if (!allAreFinite([cpx, cpy, x, y])) {
            return;
          }

          if (skpath.isEmpty()) {
            skpath.moveTo(cpx, cpy);
          }

          skpath.quadTo(cpx, cpy, x, y);
        }

        function rect(skpath, x, y, width, height) {
          if (!allAreFinite([x, y, width, height])) {
            return;
          }

          skpath.addRect(x, y, x + width, y + height);
        }

        function Path2D(path) {
          this._path = null;

          if (typeof path === "string") {
            this._path = CanvasKit.MakePathFromSVGString(path);
          } else if (path && path._getPath) {
            this._path = path._getPath().copy();
          } else {
            this._path = new CanvasKit.SkPath();
          }

          this._getPath = function () {
            return this._path;
          };

          this.addPath = function (path2d, transform) {
            if (!transform) {
              transform = {
                "a": 1,
                "c": 0,
                "e": 0,
                "b": 0,
                "d": 1,
                "f": 0
              };
            }

            this._path.addPath(path2d._getPath(), [transform.a, transform.c, transform.e, transform.b, transform.d, transform.f]);
          };

          this.arc = function (x, y, radius, startAngle, endAngle, ccw) {
            arc(this._path, x, y, radius, startAngle, endAngle, ccw);
          };

          this.arcTo = function (x1, y1, x2, y2, radius) {
            arcTo(this._path, x1, y1, x2, y2, radius);
          };

          this.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
            bezierCurveTo(this._path, cp1x, cp1y, cp2x, cp2y, x, y);
          };

          this.closePath = function () {
            closePath(this._path);
          };

          this.ellipse = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, ccw) {
            ellipse(this._path, x, y, radiusX, radiusY, rotation, startAngle, endAngle, ccw);
          };

          this.lineTo = function (x, y) {
            lineTo(this._path, x, y);
          };

          this.moveTo = function (x, y) {
            moveTo(this._path, x, y);
          };

          this.quadraticCurveTo = function (cpx, cpy, x, y) {
            quadraticCurveTo(this._path, cpx, cpy, x, y);
          };

          this.rect = function (x, y, width, height) {
            rect(this._path, x, y, width, height);
          };
        }

        function CanvasPattern(image, repetition) {
          this._shader = null;
          this._image = image;
          this._transform = CanvasKit.SkMatrix.identity();

          if (repetition === "") {
            repetition = "repeat";
          }

          switch (repetition) {
            case "repeat-x":
              this._tileX = CanvasKit.TileMode.Repeat;
              this._tileY = CanvasKit.TileMode.Decal;
              break;

            case "repeat-y":
              this._tileX = CanvasKit.TileMode.Decal;
              this._tileY = CanvasKit.TileMode.Repeat;
              break;

            case "repeat":
              this._tileX = CanvasKit.TileMode.Repeat;
              this._tileY = CanvasKit.TileMode.Repeat;
              break;

            case "no-repeat":
              this._tileX = CanvasKit.TileMode.Decal;
              this._tileY = CanvasKit.TileMode.Decal;
              break;

            default:
              throw "invalid repetition mode " + repetition;
          }

          this.setTransform = function (m) {
            var t = [m.a, m.c, m.e, m.b, m.d, m.f, 0, 0, 1];

            if (allAreFinite(t)) {
              this._transform = t;
            }
          };

          this._copy = function () {
            var cp = new CanvasPattern();
            cp._tileX = this._tileX;
            cp._tileY = this._tileY;
            return cp;
          };

          this._dispose = function () {
            if (this._shader) {
              this._shader["delete"]();

              this._shader = null;
            }
          };

          this._getShader = function (currentTransform) {
            this._dispose();

            this._shader = this._image.makeShader(this._tileX, this._tileY, this._transform);
            return this._shader;
          };
        }

        function RadialCanvasGradient(x1, y1, r1, x2, y2, r2) {
          this._shader = null;
          this._colors = [];
          this._pos = [];

          this.addColorStop = function (offset, color) {
            if (offset < 0 || offset > 1 || !isFinite(offset)) {
              throw "offset must be between 0 and 1 inclusively";
            }

            color = parseColor(color);

            var idx = this._pos.indexOf(offset);

            if (idx !== -1) {
              this._colors[idx] = color;
            } else {
              for (idx = 0; idx < this._pos.length; idx++) {
                if (this._pos[idx] > offset) {
                  break;
                }
              }

              this._pos.splice(idx, 0, offset);

              this._colors.splice(idx, 0, color);
            }
          };

          this._copy = function () {
            var rcg = new RadialCanvasGradient(x1, y1, r1, x2, y2, r2);
            rcg._colors = this._colors.slice();
            rcg._pos = this._pos.slice();
            return rcg;
          };

          this._dispose = function () {
            if (this._shader) {
              this._shader["delete"]();

              this._shader = null;
            }
          };

          this._getShader = function (currentTransform) {
            var pts = [x1, y1, x2, y2];
            CanvasKit.SkMatrix.mapPoints(currentTransform, pts);
            var sx1 = pts[0];
            var sy1 = pts[1];
            var sx2 = pts[2];
            var sy2 = pts[3];
            var sx = currentTransform[0];
            var sy = currentTransform[4];
            var scaleFactor = (Math.abs(sx) + Math.abs(sy)) / 2;
            var sr1 = r1 * scaleFactor;
            var sr2 = r2 * scaleFactor;

            this._dispose();

            this._shader = CanvasKit.SkShader.MakeTwoPointConicalGradient([sx1, sy1], sr1, [sx2, sy2], sr2, this._colors, this._pos, CanvasKit.TileMode.Clamp);
            return this._shader;
          };
        }
      })();
    })(Module);

    var moduleOverrides = {};
    var key;

    for (key in Module) {
      if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
      }
    }

    var arguments_ = [];
    var thisProgram = "./this.program";

    var quit_ = function quit_(status, toThrow) {
      throw toThrow;
    };

    var ENVIRONMENT_IS_WEB = false;
    var ENVIRONMENT_IS_WORKER = false;
    var ENVIRONMENT_IS_NODE = false;
    var ENVIRONMENT_IS_SHELL = false;
    ENVIRONMENT_IS_WEB = typeof window === "object";
    ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
    ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    var scriptDirectory = "";

    function locateFile(path) {
      if (Module["locateFile"]) {
        return Module["locateFile"](path, scriptDirectory);
      }

      return scriptDirectory + path;
    }

    var read_, readAsync, readBinary, setWindowTitle;

    if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = self.location.href;
      } else if (document.currentScript) {
        scriptDirectory = document.currentScript.src;
      }

      if (_scriptDir) {
        scriptDirectory = _scriptDir;
      }

      if (scriptDirectory.indexOf("blob:") !== 0) {
        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
      } else {
        scriptDirectory = "";
      }

      {
        read_ = function shell_read(url) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.send(null);
          return xhr.responseText;
        };

        if (ENVIRONMENT_IS_WORKER) {
          readBinary = function readBinary(url) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.responseType = "arraybuffer";
            xhr.send(null);
            return new Uint8Array(xhr.response);
          };
        }

        readAsync = function readAsync(url, onload, onerror) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, true);
          xhr.responseType = "arraybuffer";

          xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
              onload(xhr.response);
              return;
            }

            onerror();
          };

          xhr.onerror = onerror;
          xhr.send(null);
        };
      }

      setWindowTitle = function setWindowTitle(title) {
        document.title = title;
      };
    } else {}

    var out = Module["print"] || console.log.bind(console);
    var err = Module["printErr"] || console.warn.bind(console);

    for (key in moduleOverrides) {
      if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
      }
    }

    moduleOverrides = null;
    if (Module["arguments"]) arguments_ = Module["arguments"];
    if (Module["thisProgram"]) thisProgram = Module["thisProgram"];
    if (Module["quit"]) quit_ = Module["quit"];

    function warnOnce(text) {
      if (!warnOnce.shown) warnOnce.shown = {};

      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        err(text);
      }
    }

    var tempRet0 = 0;

    var setTempRet0 = function setTempRet0(value) {
      tempRet0 = value;
    };

    var getTempRet0 = function getTempRet0() {
      return tempRet0;
    };

    var wasmBinary;
    if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];
    var noExitRuntime;
    if (Module["noExitRuntime"]) noExitRuntime = Module["noExitRuntime"];

    if (typeof WebAssembly !== "object") {
      err("no native wasm support detected");
    }

    var wasmMemory;
    var wasmTable = new WebAssembly.Table({
      "initial": 9077,
      "maximum": 9077 + 0,
      "element": "anyfunc"
    });
    var ABORT = false;
    var EXITSTATUS = 0;

    function assert(condition, text) {
      if (!condition) {
        abort("Assertion failed: " + text);
      }
    }

    var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;

    function UTF8ArrayToString(heap, idx, maxBytesToRead) {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;

      while (heap[endPtr] && !(endPtr >= endIdx)) {
        ++endPtr;
      }

      if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(heap.subarray(idx, endPtr));
      } else {
        var str = "";

        while (idx < endPtr) {
          var u0 = heap[idx++];

          if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
          }

          var u1 = heap[idx++] & 63;

          if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
          }

          var u2 = heap[idx++] & 63;

          if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2;
          } else {
            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[idx++] & 63;
          }

          if (u0 < 65536) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
          }
        }
      }

      return str;
    }

    function UTF8ToString(ptr, maxBytesToRead) {
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
    }

    function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
      if (!(maxBytesToWrite > 0)) return 0;
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1;

      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);

        if (u >= 55296 && u <= 57343) {
          var u1 = str.charCodeAt(++i);
          u = 65536 + ((u & 1023) << 10) | u1 & 1023;
        }

        if (u <= 127) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 2047) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 192 | u >> 6;
          heap[outIdx++] = 128 | u & 63;
        } else if (u <= 65535) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 224 | u >> 12;
          heap[outIdx++] = 128 | u >> 6 & 63;
          heap[outIdx++] = 128 | u & 63;
        } else {
          if (outIdx + 3 >= endIdx) break;
          heap[outIdx++] = 240 | u >> 18;
          heap[outIdx++] = 128 | u >> 12 & 63;
          heap[outIdx++] = 128 | u >> 6 & 63;
          heap[outIdx++] = 128 | u & 63;
        }
      }

      heap[outIdx] = 0;
      return outIdx - startIdx;
    }

    function stringToUTF8(str, outPtr, maxBytesToWrite) {
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    }

    function lengthBytesUTF8(str) {
      var len = 0;

      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) ++len;else if (u <= 2047) len += 2;else if (u <= 65535) len += 3;else len += 4;
      }

      return len;
    }

    var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;

    function UTF16ToString(ptr, maxBytesToRead) {
      var endPtr = ptr;
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;

      while (!(idx >= maxIdx) && HEAPU16[idx]) {
        ++idx;
      }

      endPtr = idx << 1;

      if (endPtr - ptr > 32 && UTF16Decoder) {
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
      } else {
        var i = 0;
        var str = "";

        while (1) {
          var codeUnit = HEAP16[ptr + i * 2 >> 1];
          if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
          ++i;
          str += String.fromCharCode(codeUnit);
        }
      }
    }

    function stringToUTF16(str, outPtr, maxBytesToWrite) {
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 2147483647;
      }

      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2;
      var startPtr = outPtr;
      var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;

      for (var i = 0; i < numCharsToWrite; ++i) {
        var codeUnit = str.charCodeAt(i);
        HEAP16[outPtr >> 1] = codeUnit;
        outPtr += 2;
      }

      HEAP16[outPtr >> 1] = 0;
      return outPtr - startPtr;
    }

    function lengthBytesUTF16(str) {
      return str.length * 2;
    }

    function UTF32ToString(ptr, maxBytesToRead) {
      var i = 0;
      var str = "";

      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[ptr + i * 4 >> 2];
        if (utf32 == 0) break;
        ++i;

        if (utf32 >= 65536) {
          var ch = utf32 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        } else {
          str += String.fromCharCode(utf32);
        }
      }

      return str;
    }

    function stringToUTF32(str, outPtr, maxBytesToWrite) {
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 2147483647;
      }

      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;

      for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);

        if (codeUnit >= 55296 && codeUnit <= 57343) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
        }

        HEAP32[outPtr >> 2] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }

      HEAP32[outPtr >> 2] = 0;
      return outPtr - startPtr;
    }

    function lengthBytesUTF32(str) {
      var len = 0;

      for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
        len += 4;
      }

      return len;
    }

    function allocateUTF8(str) {
      var size = lengthBytesUTF8(str) + 1;

      var ret = _malloc(size);

      if (ret) stringToUTF8Array(str, HEAP8, ret, size);
      return ret;
    }

    function writeArrayToMemory(array, buffer) {
      HEAP8.set(array, buffer);
    }

    function writeAsciiToMemory(str, buffer, dontAddNull) {
      for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++ >> 0] = str.charCodeAt(i);
      }

      if (!dontAddNull) HEAP8[buffer >> 0] = 0;
    }

    var WASM_PAGE_SIZE = 65536;

    function alignUp(x, multiple) {
      if (x % multiple > 0) {
        x += multiple - x % multiple;
      }

      return x;
    }

    var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

    function updateGlobalBufferAndViews(buf) {
      buffer = buf;
      Module["HEAP8"] = HEAP8 = new Int8Array(buf);
      Module["HEAP16"] = HEAP16 = new Int16Array(buf);
      Module["HEAP32"] = HEAP32 = new Int32Array(buf);
      Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
      Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
      Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
      Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
      Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
    }

    var DYNAMIC_BASE = 7094688,
        DYNAMICTOP_PTR = 1851648;
    var INITIAL_INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 134217728;

    if (Module["wasmMemory"]) {
      wasmMemory = Module["wasmMemory"];
    } else {
      wasmMemory = new WebAssembly.Memory({
        "initial": INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE,
        "maximum": 2147483648 / WASM_PAGE_SIZE
      });
    }

    if (wasmMemory) {
      buffer = wasmMemory.buffer;
    }

    INITIAL_INITIAL_MEMORY = buffer.byteLength;
    updateGlobalBufferAndViews(buffer);
    HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;

    function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();

        if (typeof callback == "function") {
          callback(Module);
          continue;
        }

        var func = callback.func;

        if (typeof func === "number") {
          if (callback.arg === undefined) {
            Module["dynCall_v"](func);
          } else {
            Module["dynCall_vi"](func, callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

    var __ATPRERUN__ = [];
    var __ATINIT__ = [];
    var __ATMAIN__ = [];
    var __ATPOSTRUN__ = [];
    var runtimeInitialized = false;
    var runtimeExited = false;

    function preRun() {
      if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function") Module["preRun"] = [Module["preRun"]];

        while (Module["preRun"].length) {
          addOnPreRun(Module["preRun"].shift());
        }
      }

      callRuntimeCallbacks(__ATPRERUN__);
    }

    function initRuntime() {
      runtimeInitialized = true;
      callRuntimeCallbacks(__ATINIT__);
    }

    function preMain() {
      callRuntimeCallbacks(__ATMAIN__);
    }

    function exitRuntime() {
      runtimeExited = true;
    }

    function postRun() {
      if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function") Module["postRun"] = [Module["postRun"]];

        while (Module["postRun"].length) {
          addOnPostRun(Module["postRun"].shift());
        }
      }

      callRuntimeCallbacks(__ATPOSTRUN__);
    }

    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }

    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }

    var Math_ceil = Math.ceil;
    var Math_floor = Math.floor;
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null;

    function getUniqueRunDependency(id) {
      return id;
    }

    function addRunDependency(id) {
      runDependencies++;

      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
    }

    function removeRunDependency(id) {
      runDependencies--;

      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }

      if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
        }

        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }

    Module["preloadedImages"] = {};
    Module["preloadedAudios"] = {};

    function abort(what) {
      if (Module["onAbort"]) {
        Module["onAbort"](what);
      }

      what += "";
      out(what);
      err(what);
      ABORT = true;
      EXITSTATUS = 1;
      what = "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
      throw new WebAssembly.RuntimeError(what);
    }

    function hasPrefix(str, prefix) {
      return String.prototype.startsWith ? str.startsWith(prefix) : str.indexOf(prefix) === 0;
    }

    var dataURIPrefix = "data:application/octet-stream;base64,";

    function isDataURI(filename) {
      return hasPrefix(filename, dataURIPrefix);
    }

    var wasmBinaryFile = "canvaskit.wasm";

    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = locateFile(wasmBinaryFile);
    }

    function getBinary() {
      try {
        if (wasmBinary) {
          return new Uint8Array(wasmBinary);
        }

        if (readBinary) {
          return readBinary(wasmBinaryFile);
        } else {
          throw "both async and sync fetching of the wasm failed";
        }
      } catch (err) {
        abort(err);
      }
    }

    function getBinaryPromise() {
      if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function") {
        return fetch(wasmBinaryFile, {
          credentials: "same-origin"
        }).then(function (response) {
          if (!response["ok"]) {
            throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
          }

          return response["arrayBuffer"]();
        })["catch"](function () {
          return getBinary();
        });
      }

      return new Promise(function (resolve, reject) {
        resolve(getBinary());
      });
    }

    function createWasm() {
      var info = {
        "a": asmLibraryArg
      };

      function receiveInstance(instance, module) {
        var exports = instance.exports;
        Module["asm"] = exports;
        removeRunDependency("wasm-instantiate");
      }

      addRunDependency("wasm-instantiate");

      function receiveInstantiatedSource(output) {
        receiveInstance(output["instance"]);
      }

      function instantiateArrayBuffer(receiver) {
        return getBinaryPromise().then(function (binary) {
          return WebAssembly.instantiate(binary, info);
        }).then(receiver, function (reason) {
          err("failed to asynchronously prepare wasm: " + reason);
          abort(reason);
        });
      }

      function instantiateAsync() {
        if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && typeof fetch === "function") {
          fetch(wasmBinaryFile, {
            credentials: "same-origin"
          }).then(function (response) {
            var result = WebAssembly.instantiateStreaming(response, info);
            return result.then(receiveInstantiatedSource, function (reason) {
              err("wasm streaming compile failed: " + reason);
              err("falling back to ArrayBuffer instantiation");
              instantiateArrayBuffer(receiveInstantiatedSource);
            });
          });
        } else {
          return instantiateArrayBuffer(receiveInstantiatedSource);
        }
      }

      if (Module["instantiateWasm"]) {
        try {
          var exports = Module["instantiateWasm"](info, receiveInstance);
          return exports;
        } catch (e) {
          err("Module.instantiateWasm callback failed with error: " + e);
          return false;
        }
      }

      instantiateAsync();
      return {};
    }

    __ATINIT__.push({
      func: function func() {
        ___wasm_call_ctors();
      }
    });

    function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

    var ___exception_infos = {};
    var ___exception_last = 0;

    function __ZSt18uncaught_exceptionv() {
      return __ZSt18uncaught_exceptionv.uncaught_exceptions > 0;
    }

    function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;

      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }

      throw ptr;
    }

    function setErrNo(value) {
      HEAP32[___errno_location() >> 2] = value;
      return value;
    }

    function ___map_file(pathname, size) {
      setErrNo(63);
      return -1;
    }

    var PATH = {
      splitPath: function splitPath(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
      normalizeArray: function normalizeArray(parts, allowAboveRoot) {
        var up = 0;

        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];

          if (last === ".") {
            parts.splice(i, 1);
          } else if (last === "..") {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }

        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift("..");
          }
        }

        return parts;
      },
      normalize: function normalize(path) {
        var isAbsolute = path.charAt(0) === "/",
            trailingSlash = path.substr(-1) === "/";
        path = PATH.normalizeArray(path.split("/").filter(function (p) {
          return !!p;
        }), !isAbsolute).join("/");

        if (!path && !isAbsolute) {
          path = ".";
        }

        if (path && trailingSlash) {
          path += "/";
        }

        return (isAbsolute ? "/" : "") + path;
      },
      dirname: function dirname(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];

        if (!root && !dir) {
          return ".";
        }

        if (dir) {
          dir = dir.substr(0, dir.length - 1);
        }

        return root + dir;
      },
      basename: function basename(path) {
        if (path === "/") return "/";
        var lastSlash = path.lastIndexOf("/");
        if (lastSlash === -1) return path;
        return path.substr(lastSlash + 1);
      },
      extname: function extname(path) {
        return PATH.splitPath(path)[3];
      },
      join: function join() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join("/"));
      },
      join2: function join2(l, r) {
        return PATH.normalize(l + "/" + r);
      }
    };
    var SYSCALLS = {
      mappings: {},
      buffers: [null, [], []],
      printChar: function printChar(stream, curr) {
        var buffer = SYSCALLS.buffers[stream];

        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      },
      varargs: undefined,
      get: function get() {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
        return ret;
      },
      getStr: function getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
      get64: function get64(low, high) {
        return low;
      }
    };

    function ___sys_fcntl64(fd, cmd, varargs) {
      SYSCALLS.varargs = varargs;
      return 0;
    }

    function ___sys_fstat64(fd, buf) {}

    function ___sys_ioctl(fd, op, varargs) {
      SYSCALLS.varargs = varargs;
      return 0;
    }

    function syscallMmap2(addr, len, prot, flags, fd, off) {
      off <<= 12;
      var ptr;
      var allocated = false;

      if ((flags & 16) !== 0 && addr % 16384 !== 0) {
        return -28;
      }

      if ((flags & 32) !== 0) {
        ptr = _memalign(16384, len);
        if (!ptr) return -48;

        _memset(ptr, 0, len);

        allocated = true;
      } else {
        return -52;
      }

      SYSCALLS.mappings[ptr] = {
        malloc: ptr,
        len: len,
        allocated: allocated,
        fd: fd,
        prot: prot,
        flags: flags,
        offset: off
      };
      return ptr;
    }

    function ___sys_mmap2(addr, len, prot, flags, fd, off) {
      return syscallMmap2(addr, len, prot, flags, fd, off);
    }

    function syscallMunmap(addr, len) {
      if ((addr | 0) === -1 || len === 0) {
        return -28;
      }

      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;

      if (len === info.len) {
        SYSCALLS.mappings[addr] = null;

        if (info.allocated) {
          _free(info.malloc);
        }
      }

      return 0;
    }

    function ___sys_munmap(addr, len) {
      return syscallMunmap(addr, len);
    }

    function ___sys_open(path, flags, varargs) {
      SYSCALLS.varargs = varargs;
    }

    function ___sys_pread64(fd, buf, count, zero, low, high) {}

    function ___sys_stat64(path, buf) {}

    var tupleRegistrations = {};

    function runDestructors(destructors) {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    }

    function simpleReadValueFromPointer(pointer) {
      return this["fromWireType"](HEAPU32[pointer >> 2]);
    }

    var awaitingDependencies = {};
    var registeredTypes = {};
    var typeDependencies = {};
    var char_0 = 48;
    var char_9 = 57;

    function makeLegalFunctionName(name) {
      if (undefined === name) {
        return "_unknown";
      }

      name = name.replace(/[^a-zA-Z0-9_]/g, "$");
      var f = name.charCodeAt(0);

      if (f >= char_0 && f <= char_9) {
        return "_" + name;
      } else {
        return name;
      }
    }

    function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      return new Function("body", "return function " + name + "() {\n" + '    "use strict";' + "    return body.apply(this, arguments);\n" + "};\n")(body);
    }

    function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function (message) {
        this.name = errorName;
        this.message = message;
        var stack = new Error(message).stack;

        if (stack !== undefined) {
          this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;

      errorClass.prototype.toString = function () {
        if (this.message === undefined) {
          return this.name;
        } else {
          return this.name + ": " + this.message;
        }
      };

      return errorClass;
    }

    var InternalError = undefined;

    function throwInternalError(message) {
      throw new InternalError(message);
    }

    function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function (type) {
        typeDependencies[type] = dependentTypes;
      });

      function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);

        if (myTypeConverters.length !== myTypes.length) {
          throwInternalError("Mismatched type converter count");
        }

        for (var i = 0; i < myTypes.length; ++i) {
          registerType(myTypes[i], myTypeConverters[i]);
        }
      }

      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function (dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);

          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }

          awaitingDependencies[dt].push(function () {
            typeConverters[i] = registeredTypes[dt];
            ++registered;

            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });

      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    }

    function __embind_finalize_value_array(rawTupleType) {
      var reg = tupleRegistrations[rawTupleType];
      delete tupleRegistrations[rawTupleType];
      var elements = reg.elements;
      var elementsLength = elements.length;
      var elementTypes = elements.map(function (elt) {
        return elt.getterReturnType;
      }).concat(elements.map(function (elt) {
        return elt.setterArgumentType;
      }));
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      whenDependentTypesAreResolved([rawTupleType], elementTypes, function (elementTypes) {
        elements.forEach(function (elt, i) {
          var getterReturnType = elementTypes[i];
          var getter = elt.getter;
          var getterContext = elt.getterContext;
          var setterArgumentType = elementTypes[i + elementsLength];
          var setter = elt.setter;
          var setterContext = elt.setterContext;

          elt.read = function (ptr) {
            return getterReturnType["fromWireType"](getter(getterContext, ptr));
          };

          elt.write = function (ptr, o) {
            var destructors = [];
            setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
            runDestructors(destructors);
          };
        });
        return [{
          name: reg.name,
          "fromWireType": function fromWireType(ptr) {
            var rv = new Array(elementsLength);

            for (var i = 0; i < elementsLength; ++i) {
              rv[i] = elements[i].read(ptr);
            }

            rawDestructor(ptr);
            return rv;
          },
          "toWireType": function toWireType(destructors, o) {
            if (elementsLength !== o.length) {
              throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
            }

            var ptr = rawConstructor();

            for (var i = 0; i < elementsLength; ++i) {
              elements[i].write(ptr, o[i]);
            }

            if (destructors !== null) {
              destructors.push(rawDestructor, ptr);
            }

            return ptr;
          },
          "argPackAdvance": 8,
          "readValueFromPointer": simpleReadValueFromPointer,
          destructorFunction: rawDestructor
        }];
      });
    }

    var structRegistrations = {};

    function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map(function (field) {
        return field.getterReturnType;
      }).concat(fieldRecords.map(function (field) {
        return field.setterArgumentType;
      }));
      whenDependentTypesAreResolved([structType], fieldTypes, function (fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function (field, i) {
          var fieldName = field.fieldName;
          var getterReturnType = fieldTypes[i];
          var getter = field.getter;
          var getterContext = field.getterContext;
          var setterArgumentType = fieldTypes[i + fieldRecords.length];
          var setter = field.setter;
          var setterContext = field.setterContext;
          fields[fieldName] = {
            read: function read(ptr) {
              return getterReturnType["fromWireType"](getter(getterContext, ptr));
            },
            write: function write(ptr, o) {
              var destructors = [];
              setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, o));
              runDestructors(destructors);
            }
          };
        });
        return [{
          name: reg.name,
          "fromWireType": function fromWireType(ptr) {
            var rv = {};

            for (var i in fields) {
              rv[i] = fields[i].read(ptr);
            }

            rawDestructor(ptr);
            return rv;
          },
          "toWireType": function toWireType(destructors, o) {
            for (var fieldName in fields) {
              if (!(fieldName in o)) {
                throw new TypeError("Missing field");
              }
            }

            var ptr = rawConstructor();

            for (fieldName in fields) {
              fields[fieldName].write(ptr, o[fieldName]);
            }

            if (destructors !== null) {
              destructors.push(rawDestructor, ptr);
            }

            return ptr;
          },
          "argPackAdvance": 8,
          "readValueFromPointer": simpleReadValueFromPointer,
          destructorFunction: rawDestructor
        }];
      });
    }

    function getShiftFromSize(size) {
      switch (size) {
        case 1:
          return 0;

        case 2:
          return 1;

        case 4:
          return 2;

        case 8:
          return 3;

        default:
          throw new TypeError("Unknown type size: " + size);
      }
    }

    function embind_init_charCodes() {
      var codes = new Array(256);

      for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
      }

      embind_charCodes = codes;
    }

    var embind_charCodes = undefined;

    function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;

      while (HEAPU8[c]) {
        ret += embind_charCodes[HEAPU8[c++]];
      }

      return ret;
    }

    var BindingError = undefined;

    function throwBindingError(message) {
      throw new BindingError(message);
    }

    function registerType(rawType, registeredInstance, options) {
      options = options || {};

      if (!("argPackAdvance" in registeredInstance)) {
        throw new TypeError("registerType registeredInstance requires argPackAdvance");
      }

      var name = registeredInstance.name;

      if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }

      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return;
        } else {
          throwBindingError("Cannot register type '" + name + "' twice");
        }
      }

      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];

      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function (cb) {
          cb();
        });
      }
    }

    function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        "fromWireType": function fromWireType(wt) {
          return !!wt;
        },
        "toWireType": function toWireType(destructors, o) {
          return o ? trueValue : falseValue;
        },
        "argPackAdvance": 8,
        "readValueFromPointer": function readValueFromPointer(pointer) {
          var heap;

          if (size === 1) {
            heap = HEAP8;
          } else if (size === 2) {
            heap = HEAP16;
          } else if (size === 4) {
            heap = HEAP32;
          } else {
            throw new TypeError("Unknown boolean type size: " + name);
          }

          return this["fromWireType"](heap[pointer >> shift]);
        },
        destructorFunction: null
      });
    }

    function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
        return false;
      }

      if (!(other instanceof ClassHandle)) {
        return false;
      }

      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;

      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }

      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }

      return leftClass === rightClass && left === right;
    }

    function shallowCopyInternalPointer(o) {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType
      };
    }

    function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }

      throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
    }

    var finalizationGroup = false;

    function detachFinalizer(handle) {}

    function runDestructor($$) {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }

    function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;

      if (toDelete) {
        runDestructor($$);
      }
    }

    function attachFinalizer(handle) {
      if ("undefined" === typeof FinalizationGroup) {
        attachFinalizer = function attachFinalizer(handle) {
          return handle;
        };

        return handle;
      }

      finalizationGroup = new FinalizationGroup(function (iter) {
        for (var result = iter.next(); !result.done; result = iter.next()) {
          var $$ = result.value;

          if (!$$.ptr) {
            console.warn("object already deleted: " + $$.ptr);
          } else {
            releaseClassHandle($$);
          }
        }
      });

      attachFinalizer = function attachFinalizer(handle) {
        finalizationGroup.register(handle, handle.$$, handle.$$);
        return handle;
      };

      detachFinalizer = function detachFinalizer(handle) {
        finalizationGroup.unregister(handle.$$);
      };

      return attachFinalizer(handle);
    }

    function ClassHandle_clone() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }

      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
      } else {
        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
          $$: {
            value: shallowCopyInternalPointer(this.$$)
          }
        }));
        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
      }
    }

    function ClassHandle_delete() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }

      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError("Object already scheduled for deletion");
      }

      detachFinalizer(this);
      releaseClassHandle(this.$$);

      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
      }
    }

    function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }

    var delayFunction = undefined;
    var deletionQueue = [];

    function flushPendingDeletes() {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj["delete"]();
      }
    }

    function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }

      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError("Object already scheduled for deletion");
      }

      deletionQueue.push(this);

      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }

      this.$$.deleteScheduled = true;
      return this;
    }

    function init_ClassHandle() {
      ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
      ClassHandle.prototype["clone"] = ClassHandle_clone;
      ClassHandle.prototype["delete"] = ClassHandle_delete;
      ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
      ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
    }

    function ClassHandle() {}

    var registeredPointers = {};

    function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];

        proto[methodName] = function () {
          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
            throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
          }

          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };

        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }

    function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {
          throwBindingError("Cannot register public name '" + name + "' twice");
        }

        ensureOverloadTable(Module, name, name);

        if (Module.hasOwnProperty(numArguments)) {
          throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }

        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;

        if (undefined !== numArguments) {
          Module[name].numArguments = numArguments;
        }
      }
    }

    function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }

    function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }

        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }

      return ptr;
    }

    function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }

        return 0;
      }

      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }

      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }

      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }

    function genericPointerToWireType(destructors, handle) {
      var ptr;

      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }

        if (this.isSmartPointer) {
          ptr = this.rawConstructor();

          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }

          return ptr;
        } else {
          return 0;
        }
      }

      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }

      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }

      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
      }

      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

      if (this.isSmartPointer) {
        if (undefined === handle.$$.smartPtr) {
          throwBindingError("Passing raw pointer to smart pointer is illegal");
        }

        switch (this.sharingPolicy) {
          case 0:
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
            }

            break;

          case 1:
            ptr = handle.$$.smartPtr;
            break;

          case 2:
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle["clone"]();
              ptr = this.rawShare(ptr, __emval_register(function () {
                clonedHandle["delete"]();
              }));

              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }

            break;

          default:
            throwBindingError("Unsupporting sharing policy");
        }
      }

      return ptr;
    }

    function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError("null is not a valid " + this.name);
        }

        return 0;
      }

      if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }

      if (!handle.$$.ptr) {
        throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
      }

      if (handle.$$.ptrType.isConst) {
        throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
      }

      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }

    function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }

      return ptr;
    }

    function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
        this.rawDestructor(ptr);
      }
    }

    function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
        handle["delete"]();
      }
    }

    function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
        return ptr;
      }

      if (undefined === desiredClass.baseClass) {
        return null;
      }

      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);

      if (rv === null) {
        return null;
      }

      return desiredClass.downcast(rv);
    }

    function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }

    function getLiveInheritedInstances() {
      var rv = [];

      for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
          rv.push(registeredInstances[k]);
        }
      }

      return rv;
    }

    function setDelayFunction(fn) {
      delayFunction = fn;

      if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
    }

    function init_embind() {
      Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
      Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
      Module["flushPendingDeletes"] = flushPendingDeletes;
      Module["setDelayFunction"] = setDelayFunction;
    }

    var registeredInstances = {};

    function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
        throwBindingError("ptr should not be undefined");
      }

      while (class_.baseClass) {
        ptr = class_.upcast(ptr);
        class_ = class_.baseClass;
      }

      return ptr;
    }

    function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }

    function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
        throwInternalError("makeClassHandle requires ptr and ptrType");
      }

      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;

      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError("Both smartPtrType and smartPtr must be specified");
      }

      record.count = {
        value: 1
      };
      return attachFinalizer(Object.create(prototype, {
        $$: {
          value: record
        }
      }));
    }

    function RegisteredPointer_fromWireType(ptr) {
      var rawPointer = this.getPointee(ptr);

      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }

      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);

      if (undefined !== registeredInstance) {
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance["clone"]();
        } else {
          var rv = registeredInstance["clone"]();
          this.destructor(ptr);
          return rv;
        }
      }

      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr
          });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this,
            ptr: ptr
          });
        }
      }

      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];

      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }

      var toType;

      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }

      var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);

      if (dp === null) {
        return makeDefaultHandle.call(this);
      }

      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr
        });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp
        });
      }
    }

    function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype["argPackAdvance"] = 8;
      RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
      RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
    }

    function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;

      if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
          this["toWireType"] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this["toWireType"] = genericPointerToWireType;
      }
    }

    function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError("Replacing nonexistant public symbol");
      }

      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      } else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    }

    function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);

      function makeDynCaller(dynCall) {
        var args = [];

        for (var i = 1; i < signature.length; ++i) {
          args.push("a" + i);
        }

        var name = "dynCall_" + signature + "_" + rawFunction;
        var body = "return function " + name + "(" + args.join(", ") + ") {\n";
        body += "    return dynCall(rawFunction" + (args.length ? ", " : "") + args.join(", ") + ");\n";
        body += "};\n";
        return new Function("dynCall", "rawFunction", body)(dynCall, rawFunction);
      }

      var dc = Module["dynCall_" + signature];
      var fp = makeDynCaller(dc);

      if (typeof fp !== "function") {
        throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }

      return fp;
    }

    var UnboundTypeError = undefined;

    function getTypeName(type) {
      var ptr = ___getTypeName(type);

      var rv = readLatin1String(ptr);

      _free(ptr);

      return rv;
    }

    function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};

      function visit(type) {
        if (seen[type]) {
          return;
        }

        if (registeredTypes[type]) {
          return;
        }

        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }

        unboundTypes.push(type);
        seen[type] = true;
      }

      types.forEach(visit);
      throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([", "]));
    }

    function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);

      if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
      }

      if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
      }

      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
      exposePublicSymbol(legalFunctionName, function () {
        throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [baseClassRawType]);
      });
      whenDependentTypesAreResolved([rawType, rawPointerType, rawConstPointerType], baseClassRawType ? [baseClassRawType] : [], function (base) {
        base = base[0];
        var baseClass;
        var basePrototype;

        if (baseClassRawType) {
          baseClass = base.registeredClass;
          basePrototype = baseClass.instancePrototype;
        } else {
          basePrototype = ClassHandle.prototype;
        }

        var constructor = createNamedFunction(legalFunctionName, function () {
          if (Object.getPrototypeOf(this) !== instancePrototype) {
            throw new BindingError("Use 'new' to construct " + name);
          }

          if (undefined === registeredClass.constructor_body) {
            throw new BindingError(name + " has no accessible constructor");
          }

          var body = registeredClass.constructor_body[arguments.length];

          if (undefined === body) {
            throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
          }

          return body.apply(this, arguments);
        });
        var instancePrototype = Object.create(basePrototype, {
          constructor: {
            value: constructor
          }
        });
        constructor.prototype = instancePrototype;
        var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
        var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
        var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
        var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
        registeredPointers[rawType] = {
          pointerType: pointerConverter,
          constPointerType: constPointerConverter
        };
        replacePublicSymbol(legalFunctionName, constructor);
        return [referenceConverter, pointerConverter, constPointerConverter];
      });
    }

    function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
      }

      var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function () {});
      dummy.prototype = constructor.prototype;
      var obj = new dummy();
      var r = constructor.apply(obj, argumentList);
      return r instanceof Object ? r : obj;
    }

    function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      var argCount = argTypes.length;

      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }

      var isClassMethodFunc = argTypes[1] !== null && classType !== null;
      var needsDestructorStack = false;

      for (var i = 1; i < argTypes.length; ++i) {
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
          needsDestructorStack = true;
          break;
        }
      }

      var returns = argTypes[0].name !== "void";
      var argsList = "";
      var argsListWired = "";

      for (var i = 0; i < argCount - 2; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
      }

      var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\n" + "if (arguments.length !== " + (argCount - 2) + ") {\n" + "throwBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n" + "}\n";

      if (needsDestructorStack) {
        invokerFnBody += "var destructors = [];\n";
      }

      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];

      if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
      }

      for (var i = 0; i < argCount - 2; ++i) {
        invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
        args1.push("argType" + i);
        args2.push(argTypes[i + 2]);
      }

      if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }

      invokerFnBody += (returns ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";

      if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
      } else {
        for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
          var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";

          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
            args1.push(paramName + "_dtor");
            args2.push(argTypes[i].destructorFunction);
          }
        }
      }

      if (returns) {
        invokerFnBody += "var ret = retType.fromWireType(rv);\n" + "return ret;\n";
      } else {}

      invokerFnBody += "}\n";
      args1.push(invokerFnBody);
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }

    function heap32VectorToArray(count, firstElement) {
      var array = [];

      for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
      }

      return array;
    }

    function __embind_register_class_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, fn) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = classType.name + "." + methodName;

        function unboundTypesHandler() {
          throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
        }

        var proto = classType.registeredClass.constructor;

        if (undefined === proto[methodName]) {
          unboundTypesHandler.argCount = argCount - 1;
          proto[methodName] = unboundTypesHandler;
        } else {
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 1] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
          var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));
          var func = craftInvokerFunction(humanName, invokerArgsArray, null, rawInvoker, fn);

          if (undefined === proto[methodName].overloadTable) {
            func.argCount = argCount - 1;
            proto[methodName] = func;
          } else {
            proto[methodName].overloadTable[argCount - 1] = func;
          }

          return [];
        });
        return [];
      });
    }

    function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
      whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = "constructor " + classType.name;

        if (undefined === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }

        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }

        classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
          throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
        };

        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
          classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
            if (arguments.length !== argCount - 1) {
              throwBindingError(humanName + " called with " + arguments.length + " arguments, expected " + (argCount - 1));
            }

            destructors.length = 0;
            args.length = argCount;

            for (var i = 1; i < argCount; ++i) {
              args[i] = argTypes[i]["toWireType"](destructors, arguments[i - 1]);
            }

            var ptr = invoker.apply(null, args);
            runDestructors(destructors);
            return argTypes[0]["fromWireType"](ptr);
          };

          return [];
        });
        return [];
      });
    }

    function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function (classType) {
        classType = classType[0];
        var humanName = classType.name + "." + methodName;

        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }

        function unboundTypesHandler() {
          throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
        }

        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];

        if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function (argTypes) {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);

          if (undefined === proto[methodName].overloadTable) {
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }

          return [];
        });
        return [];
      });
    }

    function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function (type) {
        type = type[0];
        Module[name] = type["fromWireType"](value);
        return [];
      });
    }

    var emval_free_list = [];
    var emval_handle_array = [{}, {
      value: undefined
    }, {
      value: null
    }, {
      value: true
    }, {
      value: false
    }];

    function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
        emval_handle_array[handle] = undefined;
        emval_free_list.push(handle);
      }
    }

    function count_emval_handles() {
      var count = 0;

      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          ++count;
        }
      }

      return count;
    }

    function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          return emval_handle_array[i];
        }
      }

      return null;
    }

    function init_emval() {
      Module["count_emval_handles"] = count_emval_handles;
      Module["get_first_emval"] = get_first_emval;
    }

    function __emval_register(value) {
      switch (value) {
        case undefined:
          {
            return 1;
          }

        case null:
          {
            return 2;
          }

        case true:
          {
            return 3;
          }

        case false:
          {
            return 4;
          }

        default:
          {
            var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
            emval_handle_array[handle] = {
              refcount: 1,
              value: value
            };
            return handle;
          }
      }
    }

    function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        "fromWireType": function fromWireType(handle) {
          var rv = emval_handle_array[handle].value;

          __emval_decref(handle);

          return rv;
        },
        "toWireType": function toWireType(destructors, value) {
          return __emval_register(value);
        },
        "argPackAdvance": 8,
        "readValueFromPointer": simpleReadValueFromPointer,
        destructorFunction: null
      });
    }

    function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
        case 0:
          return function (pointer) {
            var heap = signed ? HEAP8 : HEAPU8;
            return this["fromWireType"](heap[pointer]);
          };

        case 1:
          return function (pointer) {
            var heap = signed ? HEAP16 : HEAPU16;
            return this["fromWireType"](heap[pointer >> 1]);
          };

        case 2:
          return function (pointer) {
            var heap = signed ? HEAP32 : HEAPU32;
            return this["fromWireType"](heap[pointer >> 2]);
          };

        default:
          throw new TypeError("Unknown integer type: " + name);
      }
    }

    function __embind_register_enum(rawType, name, size, isSigned) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);

      function ctor() {}

      ctor.values = {};
      registerType(rawType, {
        name: name,
        constructor: ctor,
        "fromWireType": function fromWireType(c) {
          return this.constructor.values[c];
        },
        "toWireType": function toWireType(destructors, c) {
          return c.value;
        },
        "argPackAdvance": 8,
        "readValueFromPointer": enumReadValueFromPointer(name, shift, isSigned),
        destructorFunction: null
      });
      exposePublicSymbol(name, ctor);
    }

    function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];

      if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }

      return impl;
    }

    function __embind_register_enum_value(rawEnumType, name, enumValue) {
      var enumType = requireRegisteredType(rawEnumType, "enum");
      name = readLatin1String(name);
      var Enum = enumType.constructor;
      var Value = Object.create(enumType.constructor.prototype, {
        value: {
          value: enumValue
        },
        constructor: {
          value: createNamedFunction(enumType.name + "_" + name, function () {})
        }
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

    function _embind_repr(v) {
      if (v === null) {
        return "null";
      }

      var t = typeof v;

      if (t === "object" || t === "array" || t === "function") {
        return v.toString();
      } else {
        return "" + v;
      }
    }

    function floatReadValueFromPointer(name, shift) {
      switch (shift) {
        case 2:
          return function (pointer) {
            return this["fromWireType"](HEAPF32[pointer >> 2]);
          };

        case 3:
          return function (pointer) {
            return this["fromWireType"](HEAPF64[pointer >> 3]);
          };

        default:
          throw new TypeError("Unknown float type: " + name);
      }
    }

    function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        "fromWireType": function fromWireType(value) {
          return value;
        },
        "toWireType": function toWireType(destructors, value) {
          if (typeof value !== "number" && typeof value !== "boolean") {
            throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
          }

          return value;
        },
        "argPackAdvance": 8,
        "readValueFromPointer": floatReadValueFromPointer(name, shift),
        destructorFunction: null
      });
    }

    function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      rawInvoker = embind__requireFunction(signature, rawInvoker);
      exposePublicSymbol(name, function () {
        throwUnboundTypeError("Cannot call " + name + " due to unbound types", argTypes);
      }, argCount - 1);
      whenDependentTypesAreResolved([], argTypes, function (argTypes) {
        var invokerArgsArray = [argTypes[0], null].concat(argTypes.slice(1));
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn), argCount - 1);
        return [];
      });
    }

    function integerReadValueFromPointer(name, shift, signed) {
      switch (shift) {
        case 0:
          return signed ? function readS8FromPointer(pointer) {
            return HEAP8[pointer];
          } : function readU8FromPointer(pointer) {
            return HEAPU8[pointer];
          };

        case 1:
          return signed ? function readS16FromPointer(pointer) {
            return HEAP16[pointer >> 1];
          } : function readU16FromPointer(pointer) {
            return HEAPU16[pointer >> 1];
          };

        case 2:
          return signed ? function readS32FromPointer(pointer) {
            return HEAP32[pointer >> 2];
          } : function readU32FromPointer(pointer) {
            return HEAPU32[pointer >> 2];
          };

        default:
          throw new TypeError("Unknown integer type: " + name);
      }
    }

    function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);

      if (maxRange === -1) {
        maxRange = 4294967295;
      }

      var shift = getShiftFromSize(size);

      var fromWireType = function fromWireType(value) {
        return value;
      };

      if (minRange === 0) {
        var bitshift = 32 - 8 * size;

        fromWireType = function fromWireType(value) {
          return value << bitshift >>> bitshift;
        };
      }

      var isUnsignedType = name.indexOf("unsigned") != -1;
      registerType(primitiveType, {
        name: name,
        "fromWireType": fromWireType,
        "toWireType": function toWireType(destructors, value) {
          if (typeof value !== "number" && typeof value !== "boolean") {
            throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
          }

          if (value < minRange || value > maxRange) {
            throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
          }

          return isUnsignedType ? value >>> 0 : value | 0;
        },
        "argPackAdvance": 8,
        "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null
      });
    }

    function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
      var TA = typeMapping[dataTypeIndex];

      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle];
        var data = heap[handle + 1];
        return new TA(buffer, data, size);
      }

      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        "fromWireType": decodeMemoryView,
        "argPackAdvance": 8,
        "readValueFromPointer": decodeMemoryView
      }, {
        ignoreDuplicateRegistrations: true
      });
    }

    function __embind_register_smart_ptr(rawType, rawPointeeType, name, sharingPolicy, getPointeeSignature, rawGetPointee, constructorSignature, rawConstructor, shareSignature, rawShare, destructorSignature, rawDestructor) {
      name = readLatin1String(name);
      rawGetPointee = embind__requireFunction(getPointeeSignature, rawGetPointee);
      rawConstructor = embind__requireFunction(constructorSignature, rawConstructor);
      rawShare = embind__requireFunction(shareSignature, rawShare);
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      whenDependentTypesAreResolved([rawType], [rawPointeeType], function (pointeeType) {
        pointeeType = pointeeType[0];
        var registeredPointer = new RegisteredPointer(name, pointeeType.registeredClass, false, false, true, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor);
        return [registeredPointer];
      });
    }

    function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8 = name === "std::string";
      registerType(rawType, {
        name: name,
        "fromWireType": function fromWireType(value) {
          var length = HEAPU32[value >> 2];
          var str;

          if (stdStringIsUTF8) {
            var decodeStartPtr = value + 4;

            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = value + 4 + i;

              if (HEAPU8[currentBytePtr] == 0 || i == length) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);

                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }

                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);

            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }

            str = a.join("");
          }

          _free(value);

          return str;
        },
        "toWireType": function toWireType(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }

          var getLength;
          var valueIsOfTypeString = typeof value === "string";

          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
            throwBindingError("Cannot pass non-string to std::string");
          }

          if (stdStringIsUTF8 && valueIsOfTypeString) {
            getLength = function getLength() {
              return lengthBytesUTF8(value);
            };
          } else {
            getLength = function getLength() {
              return value.length;
            };
          }

          var length = getLength();

          var ptr = _malloc(4 + length + 1);

          HEAPU32[ptr >> 2] = length;

          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr + 4, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);

                if (charCode > 255) {
                  _free(ptr);

                  throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
                }

                HEAPU8[ptr + 4 + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + 4 + i] = value[i];
              }
            }
          }

          if (destructors !== null) {
            destructors.push(_free, ptr);
          }

          return ptr;
        },
        "argPackAdvance": 8,
        "readValueFromPointer": simpleReadValueFromPointer,
        destructorFunction: function destructorFunction(ptr) {
          _free(ptr);
        }
      });
    }

    function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;

      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;

        getHeap = function getHeap() {
          return HEAPU16;
        };

        shift = 1;
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;

        getHeap = function getHeap() {
          return HEAPU32;
        };

        shift = 2;
      }

      registerType(rawType, {
        name: name,
        "fromWireType": function fromWireType(value) {
          var length = HEAPU32[value >> 2];
          var HEAP = getHeap();
          var str;
          var decodeStartPtr = value + 4;

          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;

            if (HEAP[currentBytePtr >> shift] == 0 || i == length) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);

              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }

              decodeStartPtr = currentBytePtr + charSize;
            }
          }

          _free(value);

          return str;
        },
        "toWireType": function toWireType(destructors, value) {
          if (!(typeof value === "string")) {
            throwBindingError("Cannot pass non-string to C++ string type " + name);
          }

          var length = lengthBytesUTF(value);

          var ptr = _malloc(4 + length + charSize);

          HEAPU32[ptr >> 2] = length >> shift;
          encodeString(value, ptr + 4, length + charSize);

          if (destructors !== null) {
            destructors.push(_free, ptr);
          }

          return ptr;
        },
        "argPackAdvance": 8,
        "readValueFromPointer": simpleReadValueFromPointer,
        destructorFunction: function destructorFunction(ptr) {
          _free(ptr);
        }
      });
    }

    function __embind_register_value_array(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
      tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
        rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
        elements: []
      };
    }

    function __embind_register_value_array_element(rawTupleType, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
      tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: embind__requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: embind__requireFunction(setterSignature, setter),
        setterContext: setterContext
      });
    }

    function __embind_register_value_object(rawType, name, constructorSignature, rawConstructor, destructorSignature, rawDestructor) {
      structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
        rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
        fields: []
      };
    }

    function __embind_register_value_object_field(structType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
      structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: embind__requireFunction(getterSignature, getter),
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: embind__requireFunction(setterSignature, setter),
        setterContext: setterContext
      });
    }

    function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        isVoid: true,
        name: name,
        "argPackAdvance": 0,
        "fromWireType": function fromWireType() {
          return undefined;
        },
        "toWireType": function toWireType(destructors, o) {
          return undefined;
        }
      });
    }

    var emval_symbols = {};

    function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];

      if (symbol === undefined) {
        return readLatin1String(address);
      } else {
        return symbol;
      }
    }

    var emval_methodCallers = [];

    function requireHandle(handle) {
      if (!handle) {
        throwBindingError("Cannot use deleted val. handle = " + handle);
      }

      return emval_handle_array[handle].value;
    }

    function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }

    function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }

    function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);

      for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(HEAP32[(argTypes >> 2) + i], "parameter " + i);
      }

      return a;
    }

    function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);

      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) {
        return t.name;
      }).join("_") + "$";
      var params = ["retType"];
      var args = [retType];
      var argsList = "";

      for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        params.push("argType" + i);
        args.push(types[1 + i]);
      }

      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody = "return function " + functionName + "(handle, name, destructors, args) {\n";
      var offset = 0;

      for (var i = 0; i < argCount - 1; ++i) {
        functionBody += "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? "+" + offset : "") + ");\n";
        offset += types[i + 1]["argPackAdvance"];
      }

      functionBody += "    var rv = handle[name](" + argsList + ");\n";

      for (var i = 0; i < argCount - 1; ++i) {
        if (types[i + 1]["deleteObject"]) {
          functionBody += "    argType" + i + ".deleteObject(arg" + i + ");\n";
        }
      }

      if (!retType.isVoid) {
        functionBody += "    return retType.toWireType(destructors, rv);\n";
      }

      functionBody += "};\n";
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

    function __emval_incref(handle) {
      if (handle > 4) {
        emval_handle_array[handle].refcount += 1;
      }
    }

    function __emval_new_array() {
      return __emval_register([]);
    }

    function __emval_new_cstring(v) {
      return __emval_register(getStringOrSymbol(v));
    }

    function __emval_new_object() {
      return __emval_register({});
    }

    function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }

    function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, "_emval_take_value");
      var v = type["readValueFromPointer"](argv);
      return __emval_register(v);
    }

    function _abort() {
      abort();
    }

    var _emscripten_get_now;

    _emscripten_get_now = function _emscripten_get_now() {
      return performance.now();
    };

    var _emscripten_get_now_is_monotonic = true;

    function _clock_gettime(clk_id, tp) {
      var now;

      if (clk_id === 0) {
        now = Date.now();
      } else if ((clk_id === 1 || clk_id === 4) && _emscripten_get_now_is_monotonic) {
        now = _emscripten_get_now();
      } else {
        setErrNo(28);
        return -1;
      }

      HEAP32[tp >> 2] = now / 1e3 | 0;
      HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
      return 0;
    }

    function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;

      if (!Browser.mainLoop.func) {
        return 1;
      }

      if (mode == 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
        };

        Browser.mainLoop.method = "timeout";
      } else if (mode == 1) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };

        Browser.mainLoop.method = "rAF";
      } else if (mode == 2) {
        if (typeof setImmediate === "undefined") {
          var setImmediates = [];
          var emscriptenMainLoopMessageId = "setimmediate";

          var Browser_setImmediate_messageHandler = function Browser_setImmediate_messageHandler(event) {
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          };

          addEventListener("message", Browser_setImmediate_messageHandler, true);

          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);

            if (ENVIRONMENT_IS_WORKER) {
              if (Module["setImmediates"] === undefined) Module["setImmediates"] = [];
              Module["setImmediates"].push(func);
              postMessage({
                target: emscriptenMainLoopMessageId
              });
            } else postMessage(emscriptenMainLoopMessageId, "*");
          };
        }

        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };

        Browser.mainLoop.method = "immediate";
      }

      return 0;
    }

    function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      noExitRuntime = true;
      assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
      var browserIterationFunc;

      if (typeof arg !== "undefined") {
        browserIterationFunc = function browserIterationFunc() {
          Module["dynCall_vi"](func, arg);
        };
      } else {
        browserIterationFunc = function browserIterationFunc() {
          Module["dynCall_v"](func);
        };
      }

      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;

      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;

        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);

          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);

            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              next = next + .5;
              Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
            }
          }

          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
          Browser.mainLoop.updateStatus();
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }

        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;

        if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }

        Browser.mainLoop.runIter(browserIterationFunc);
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
        if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
        Browser.mainLoop.scheduler();
      };

      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps);else _emscripten_set_main_loop_timing(1, 1);
        Browser.mainLoop.scheduler();
      }

      if (simulateInfiniteLoop) {
        throw "unwind";
      }
    }

    var Browser = {
      mainLoop: {
        scheduler: null,
        method: "",
        currentlyRunningMainloop: 0,
        func: null,
        arg: 0,
        timingMode: 0,
        timingValue: 0,
        currentFrameNumber: 0,
        queue: [],
        pause: function pause() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++;
        },
        resume: function resume() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;

          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);

          _emscripten_set_main_loop_timing(timingMode, timingValue);

          Browser.mainLoop.scheduler();
        },
        updateStatus: function updateStatus() {
          if (Module["setStatus"]) {
            var message = Module["statusMessage"] || "Please wait...";
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;

            if (remaining) {
              if (remaining < expected) {
                Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
              } else {
                Module["setStatus"](message);
              }
            } else {
              Module["setStatus"]("");
            }
          }
        },
        runIter: function runIter(func) {
          if (ABORT) return;

          if (Module["preMainLoop"]) {
            var preRet = Module["preMainLoop"]();

            if (preRet === false) {
              return;
            }
          }

          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === "object" && e.stack) err("exception thrown: " + [e, e.stack]);
              throw e;
            }
          }

          if (Module["postMainLoop"]) Module["postMainLoop"]();
        }
      },
      isFullscreen: false,
      pointerLock: false,
      moduleContextCreatedCallbacks: [],
      workers: [],
      init: function init() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        if (Browser.initted) return;
        Browser.initted = true;

        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch (e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }

        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
        Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;

        if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }

        var imagePlugin = {};

        imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };

        imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;

          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], {
                type: Browser.getMimetype(name)
              });

              if (b.size !== byteArray.length) {
                b = new Blob([new Uint8Array(byteArray).buffer], {
                  type: Browser.getMimetype(name)
                });
              }
            } catch (e) {
              warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
            }
          }

          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append(new Uint8Array(byteArray).buffer);
            b = bb.getBlob();
          }

          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();

          img.onload = function img_onload() {
            assert(img.complete, "Image " + name + " could not be decoded");
            var canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };

          img.onerror = function img_onerror(event) {
            console.log("Image " + url + " could not be decoded");
            if (onerror) onerror();
          };

          img.src = url;
        };

        Module["preloadPlugins"].push(imagePlugin);
        var audioPlugin = {};

        audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in {
            ".ogg": 1,
            ".wav": 1,
            ".mp3": 1
          };
        };

        audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;

          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }

          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio();
            if (onerror) onerror();
          }

          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], {
                type: Browser.getMimetype(name)
              });
            } catch (e) {
              return fail();
            }

            var url = Browser.URLObject.createObjectURL(b);
            var audio = new Audio();
            audio.addEventListener("canplaythrough", function () {
              finish(audio);
            }, false);

            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");

              function encode64(data) {
                var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var PAD = "=";
                var ret = "";
                var leftchar = 0;
                var leftbits = 0;

                for (var i = 0; i < data.length; i++) {
                  leftchar = leftchar << 8 | data[i];
                  leftbits += 8;

                  while (leftbits >= 6) {
                    var curr = leftchar >> leftbits - 6 & 63;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }

                if (leftbits == 2) {
                  ret += BASE[(leftchar & 3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar & 15) << 2];
                  ret += PAD;
                }

                return ret;
              }

              audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
              finish(audio);
            };

            audio.src = url;
            Browser.safeSetTimeout(function () {
              finish(audio);
            }, 1e4);
          } else {
            return fail();
          }
        };

        Module["preloadPlugins"].push(audioPlugin);

        function pointerLockChange() {
          Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"];
        }

        var canvas = Module["canvas"];

        if (canvas) {
          canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || function () {};

          canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function () {};

          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
          document.addEventListener("pointerlockchange", pointerLockChange, false);
          document.addEventListener("mozpointerlockchange", pointerLockChange, false);
          document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
          document.addEventListener("mspointerlockchange", pointerLockChange, false);

          if (Module["elementPointerLock"]) {
            canvas.addEventListener("click", function (ev) {
              if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
                Module["canvas"].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },
      createContext: function createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
        var ctx;
        var contextHandle;

        if (useWebGL) {
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1
          };

          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }

          if (typeof GL !== "undefined") {
            contextHandle = GL.createContext(canvas, contextAttributes);

            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext("2d");
        }

        if (!ctx) return null;

        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function (callback) {
            callback();
          });
          Browser.init();
        }

        return ctx;
      },
      destroyContext: function destroyContext(canvas, useWebGL, setInModule) {},
      fullscreenHandlersInstalled: false,
      lockPointer: undefined,
      resizeCanvas: undefined,
      requestFullscreen: function requestFullscreen(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
        var canvas = Module["canvas"];

        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;

          if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;

            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);

            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }

          if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullscreen);
          if (Module["onFullscreen"]) Module["onFullscreen"](Browser.isFullscreen);
        }

        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener("fullscreenchange", fullscreenChange, false);
          document.addEventListener("mozfullscreenchange", fullscreenChange, false);
          document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
          document.addEventListener("MSFullscreenChange", fullscreenChange, false);
        }

        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? function () {
          canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]);
        } : null) || (canvasContainer["webkitRequestFullScreen"] ? function () {
          canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
        } : null);
        canvasContainer.requestFullscreen();
      },
      exitFullscreen: function exitFullscreen() {
        if (!Browser.isFullscreen) {
          return false;
        }

        var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function () {};

        CFS.apply(document, []);
        return true;
      },
      nextRAF: 0,
      fakeRequestAnimationFrame: function fakeRequestAnimationFrame(func) {
        var now = Date.now();

        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1e3 / 60;
        } else {
          while (now + 2 >= Browser.nextRAF) {
            Browser.nextRAF += 1e3 / 60;
          }
        }

        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },
      requestAnimationFrame: function (_requestAnimationFrame) {
        function requestAnimationFrame(_x) {
          return _requestAnimationFrame.apply(this, arguments);
        }

        requestAnimationFrame.toString = function () {
          return _requestAnimationFrame.toString();
        };

        return requestAnimationFrame;
      }(function (func) {
        if (typeof requestAnimationFrame === "function") {
          requestAnimationFrame(func);
          return;
        }

        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      }),
      safeCallback: function safeCallback(func) {
        return function () {
          if (!ABORT) return func.apply(null, arguments);
        };
      },
      allowAsyncCallbacks: true,
      queuedAsyncCallbacks: [],
      pauseAsyncCallbacks: function pauseAsyncCallbacks() {
        Browser.allowAsyncCallbacks = false;
      },
      resumeAsyncCallbacks: function resumeAsyncCallbacks() {
        Browser.allowAsyncCallbacks = true;

        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function (func) {
            func();
          });
        }
      },
      safeRequestAnimationFrame: function safeRequestAnimationFrame(func) {
        return Browser.requestAnimationFrame(function () {
          if (ABORT) return;

          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },
      safeSetTimeout: function safeSetTimeout(func, timeout) {
        noExitRuntime = true;
        return setTimeout(function () {
          if (ABORT) return;

          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },
      safeSetInterval: function safeSetInterval(func, timeout) {
        noExitRuntime = true;
        return setInterval(function () {
          if (ABORT) return;

          if (Browser.allowAsyncCallbacks) {
            func();
          }
        }, timeout);
      },
      getMimetype: function getMimetype(name) {
        return {
          "jpg": "image/jpeg",
          "jpeg": "image/jpeg",
          "png": "image/png",
          "bmp": "image/bmp",
          "ogg": "audio/ogg",
          "wav": "audio/wav",
          "mp3": "audio/mpeg"
        }[name.substr(name.lastIndexOf(".") + 1)];
      },
      getUserMedia: function getUserMedia(func) {
        if (!window.getUserMedia) {
          window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
        }

        window.getUserMedia(func);
      },
      getMovementX: function getMovementX(event) {
        return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
      },
      getMovementY: function getMovementY(event) {
        return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
      },
      getMouseWheelDelta: function getMouseWheelDelta(event) {
        var delta = 0;

        switch (event.type) {
          case "DOMMouseScroll":
            delta = event.detail / 3;
            break;

          case "mousewheel":
            delta = event.wheelDelta / 120;
            break;

          case "wheel":
            delta = event.deltaY;

            switch (event.deltaMode) {
              case 0:
                delta /= 100;
                break;

              case 1:
                delta /= 3;
                break;

              case 2:
                delta *= 80;
                break;

              default:
                throw "unrecognized mouse wheel delta mode: " + event.deltaMode;
            }

            break;

          default:
            throw "unrecognized mouse wheel event: " + event.type;
        }

        return delta;
      },
      mouseX: 0,
      mouseY: 0,
      mouseMovementX: 0,
      mouseMovementY: 0,
      touches: {},
      lastTouches: {},
      calculateMouseEvent: function calculateMouseEvent(event) {
        if (Browser.pointerLock) {
          if (event.type != "mousemove" && "mozMovementX" in event) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }

          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
          var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;

          if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
            var touch = event.touch;

            if (touch === undefined) {
              return;
            }

            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
            var coords = {
              x: adjustedX,
              y: adjustedY
            };

            if (event.type === "touchstart") {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === "touchend" || event.type === "touchmove") {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }

            return;
          }

          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },
      asyncLoad: function asyncLoad(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
        readAsync(url, function (arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function (event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },
      resizeListeners: [],
      updateResizeListeners: function updateResizeListeners() {
        var canvas = Module["canvas"];
        Browser.resizeListeners.forEach(function (listener) {
          listener(canvas.width, canvas.height);
        });
      },
      setCanvasSize: function setCanvasSize(width, height, noUpdates) {
        var canvas = Module["canvas"];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },
      windowedWidth: 0,
      windowedHeight: 0,
      setFullscreenCanvasSize: function setFullscreenCanvasSize() {
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[SDL.screen >> 2];
          flags = flags | 8388608;
          HEAP32[SDL.screen >> 2] = flags;
        }

        Browser.updateCanvasDimensions(Module["canvas"]);
        Browser.updateResizeListeners();
      },
      setWindowedCanvasSize: function setWindowedCanvasSize() {
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[SDL.screen >> 2];
          flags = flags & ~8388608;
          HEAP32[SDL.screen >> 2] = flags;
        }

        Browser.updateCanvasDimensions(Module["canvas"]);
        Browser.updateResizeListeners();
      },
      updateCanvasDimensions: function updateCanvasDimensions(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }

        var w = wNative;
        var h = hNative;

        if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
          if (w / h < Module["forcedAspectRatio"]) {
            w = Math.round(h * Module["forcedAspectRatio"]);
          } else {
            h = Math.round(w / Module["forcedAspectRatio"]);
          }
        }

        if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
          var factor = Math.min(screen.width / w, screen.height / h);
          w = Math.round(w * factor);
          h = Math.round(h * factor);
        }

        if (Browser.resizeCanvas) {
          if (canvas.width != w) canvas.width = w;
          if (canvas.height != h) canvas.height = h;

          if (typeof canvas.style != "undefined") {
            canvas.style.removeProperty("width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width != wNative) canvas.width = wNative;
          if (canvas.height != hNative) canvas.height = hNative;

          if (typeof canvas.style != "undefined") {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty("width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty("width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },
      wgetRequests: {},
      nextWgetRequestHandle: 0,
      getNextWgetRequestHandle: function getNextWgetRequestHandle() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }
    };
    var EGL = {
      errorCode: 12288,
      defaultDisplayInitialized: false,
      currentContext: 0,
      currentReadSurface: 0,
      currentDrawSurface: 0,
      contextAttributes: {
        alpha: false,
        depth: false,
        stencil: false,
        antialias: false
      },
      stringCache: {},
      setErrorCode: function setErrorCode(code) {
        EGL.errorCode = code;
      },
      chooseConfig: function chooseConfig(display, attribList, config, config_size, numConfigs) {
        if (display != 62e3) {
          EGL.setErrorCode(12296);
          return 0;
        }

        if (attribList) {
          for (;;) {
            var param = HEAP32[attribList >> 2];

            if (param == 12321) {
              var alphaSize = HEAP32[attribList + 4 >> 2];
              EGL.contextAttributes.alpha = alphaSize > 0;
            } else if (param == 12325) {
              var depthSize = HEAP32[attribList + 4 >> 2];
              EGL.contextAttributes.depth = depthSize > 0;
            } else if (param == 12326) {
              var stencilSize = HEAP32[attribList + 4 >> 2];
              EGL.contextAttributes.stencil = stencilSize > 0;
            } else if (param == 12337) {
              var samples = HEAP32[attribList + 4 >> 2];
              EGL.contextAttributes.antialias = samples > 0;
            } else if (param == 12338) {
              var samples = HEAP32[attribList + 4 >> 2];
              EGL.contextAttributes.antialias = samples == 1;
            } else if (param == 12544) {
              var requestedPriority = HEAP32[attribList + 4 >> 2];
              EGL.contextAttributes.lowLatency = requestedPriority != 12547;
            } else if (param == 12344) {
              break;
            }

            attribList += 8;
          }
        }

        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(12300);
          return 0;
        }

        if (numConfigs) {
          HEAP32[numConfigs >> 2] = 1;
        }

        if (config && config_size > 0) {
          HEAP32[config >> 2] = 62002;
        }

        EGL.setErrorCode(12288);
        return 1;
      }
    };

    function _eglGetCurrentDisplay() {
      return EGL.currentContext ? 62e3 : 0;
    }

    function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

    function _eglQueryString(display, name) {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }

      EGL.setErrorCode(12288);
      if (EGL.stringCache[name]) return EGL.stringCache[name];
      var ret;

      switch (name) {
        case 12371:
          ret = allocateUTF8("Emscripten");
          break;

        case 12372:
          ret = allocateUTF8("1.4 Emscripten EGL");
          break;

        case 12373:
          ret = allocateUTF8("");
          break;

        case 12429:
          ret = allocateUTF8("OpenGL_ES");
          break;

        default:
          EGL.setErrorCode(12300);
          return 0;
      }

      EGL.stringCache[name] = ret;
      return ret;
    }

    function __webgl_enable_ANGLE_instanced_arrays(ctx) {
      var ext = ctx.getExtension("ANGLE_instanced_arrays");

      if (ext) {
        ctx["vertexAttribDivisor"] = function (index, divisor) {
          ext["vertexAttribDivisorANGLE"](index, divisor);
        };

        ctx["drawArraysInstanced"] = function (mode, first, count, primcount) {
          ext["drawArraysInstancedANGLE"](mode, first, count, primcount);
        };

        ctx["drawElementsInstanced"] = function (mode, count, type, indices, primcount) {
          ext["drawElementsInstancedANGLE"](mode, count, type, indices, primcount);
        };

        return 1;
      }
    }

    function __webgl_enable_OES_vertex_array_object(ctx) {
      var ext = ctx.getExtension("OES_vertex_array_object");

      if (ext) {
        ctx["createVertexArray"] = function () {
          return ext["createVertexArrayOES"]();
        };

        ctx["deleteVertexArray"] = function (vao) {
          ext["deleteVertexArrayOES"](vao);
        };

        ctx["bindVertexArray"] = function (vao) {
          ext["bindVertexArrayOES"](vao);
        };

        ctx["isVertexArray"] = function (vao) {
          return ext["isVertexArrayOES"](vao);
        };

        return 1;
      }
    }

    function __webgl_enable_WEBGL_draw_buffers(ctx) {
      var ext = ctx.getExtension("WEBGL_draw_buffers");

      if (ext) {
        ctx["drawBuffers"] = function (n, bufs) {
          ext["drawBuffersWEBGL"](n, bufs);
        };

        return 1;
      }
    }

    var GL = {
      counter: 1,
      lastError: 0,
      buffers: [],
      mappedBuffers: {},
      programs: [],
      framebuffers: [],
      renderbuffers: [],
      textures: [],
      uniforms: [],
      shaders: [],
      vaos: [],
      contexts: [],
      currentContext: null,
      offscreenCanvases: {},
      timerQueriesEXT: [],
      programInfos: {},
      stringCache: {},
      unpackAlignment: 4,
      init: function init() {
        var miniTempFloatBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);

        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferFloatViews[i] = miniTempFloatBuffer.subarray(0, i + 1);
        }

        var miniTempIntBuffer = new Int32Array(GL.MINI_TEMP_BUFFER_SIZE);

        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferIntViews[i] = miniTempIntBuffer.subarray(0, i + 1);
        }
      },
      recordError: function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },
      getNewId: function getNewId(table) {
        var ret = GL.counter++;

        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }

        return ret;
      },
      MINI_TEMP_BUFFER_SIZE: 256,
      miniTempBufferFloatViews: [0],
      miniTempBufferIntViews: [0],
      getSource: function getSource(shader, count, string, length) {
        var source = "";

        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[length + i * 4 >> 2] : -1;
          source += UTF8ToString(HEAP32[string + i * 4 >> 2], len < 0 ? undefined : len);
        }

        return source;
      },
      createContext: function createContext(canvas, webGLContextAttributes) {
        var ctx = canvas.getContext("webgl", webGLContextAttributes);
        if (!ctx) return 0;
        var handle = GL.registerContext(ctx, webGLContextAttributes);
        return handle;
      },
      registerContext: function registerContext(ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;

        if (typeof webGLContextAttributes.enableExtensionsByDefault === "undefined" || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }

        return handle;
      },
      makeContextCurrent: function makeContextCurrent(contextHandle) {
        GL.currentContext = GL.contexts[contextHandle];
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx;
        return !(contextHandle && !GLctx);
      },
      getContext: function getContext(contextHandle) {
        return GL.contexts[contextHandle];
      },
      deleteContext: function deleteContext(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === "object") JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
        GL.contexts[contextHandle] = null;
      },
      initExtensions: function initExtensions(context) {
        if (!context) context = GL.currentContext;
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
        var GLctx = context.GLctx;

        __webgl_enable_ANGLE_instanced_arrays(GLctx);

        __webgl_enable_OES_vertex_array_object(GLctx);

        __webgl_enable_WEBGL_draw_buffers(GLctx);

        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        var automaticallyEnabledExtensions = ["OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth", "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear", "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod", "EXT_texture_norm16", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float", "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2", "WEBKIT_WEBGL_compressed_texture_pvrtc"];
        var exts = GLctx.getSupportedExtensions() || [];
        exts.forEach(function (ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext);
          }
        });
      },
      populateUniformTable: function populateUniformTable(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0,
          maxAttributeLength: -1,
          maxUniformBlockNameLength: -1
        };
        var utable = ptable.uniforms;
        var numUniforms = GLctx.getProgramParameter(p, 35718);

        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);

          if (name.slice(-1) == "]") {
            name = name.slice(0, name.lastIndexOf("["));
          }

          var loc = GLctx.getUniformLocation(p, name);

          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;

            for (var j = 1; j < u.size; ++j) {
              var n = name + "[" + j + "]";
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
              GL.uniforms[id] = loc;
            }
          }
        }
      }
    };

    function _emscripten_glActiveTexture(x0) {
      GLctx["activeTexture"](x0);
    }

    function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    }

    function _emscripten_glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt["beginQueryEXT"](target, GL.timerQueriesEXT[id]);
    }

    function _emscripten_glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

    function _emscripten_glBindBuffer(target, buffer) {
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

    function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
    }

    function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

    function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

    function _emscripten_glBindVertexArrayOES(vao) {
      GLctx["bindVertexArray"](GL.vaos[vao]);
    }

    function _emscripten_glBlendColor(x0, x1, x2, x3) {
      GLctx["blendColor"](x0, x1, x2, x3);
    }

    function _emscripten_glBlendEquation(x0) {
      GLctx["blendEquation"](x0);
    }

    function _emscripten_glBlendEquationSeparate(x0, x1) {
      GLctx["blendEquationSeparate"](x0, x1);
    }

    function _emscripten_glBlendFunc(x0, x1) {
      GLctx["blendFunc"](x0, x1);
    }

    function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) {
      GLctx["blendFuncSeparate"](x0, x1, x2, x3);
    }

    function _emscripten_glBufferData(target, size, data, usage) {
      GLctx.bufferData(target, data ? HEAPU8.subarray(data, data + size) : size, usage);
    }

    function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size));
    }

    function _emscripten_glCheckFramebufferStatus(x0) {
      return GLctx["checkFramebufferStatus"](x0);
    }

    function _emscripten_glClear(x0) {
      GLctx["clear"](x0);
    }

    function _emscripten_glClearColor(x0, x1, x2, x3) {
      GLctx["clearColor"](x0, x1, x2, x3);
    }

    function _emscripten_glClearDepthf(x0) {
      GLctx["clearDepth"](x0);
    }

    function _emscripten_glClearStencil(x0) {
      GLctx["clearStencil"](x0);
    }

    function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

    function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

    function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx["compressedTexImage2D"](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray(data, data + imageSize) : null);
    }

    function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx["compressedTexSubImage2D"](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray(data, data + imageSize) : null);
    }

    function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
      GLctx["copyTexImage2D"](x0, x1, x2, x3, x4, x5, x6, x7);
    }

    function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
      GLctx["copyTexSubImage2D"](x0, x1, x2, x3, x4, x5, x6, x7);
    }

    function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

    function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

    function _emscripten_glCullFace(x0) {
      GLctx["cullFace"](x0);
    }

    function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[buffers + i * 4 >> 2];
        var buffer = GL.buffers[id];
        if (!buffer) continue;
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

    function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[framebuffers + i * 4 >> 2];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue;
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

    function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];

      if (!program) {
        GL.recordError(1281);
        return;
      }

      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

    function _emscripten_glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[ids + i * 4 >> 2];
        var query = GL.timerQueriesEXT[id];
        if (!query) continue;
        GLctx.disjointTimerQueryExt["deleteQueryEXT"](query);
        GL.timerQueriesEXT[id] = null;
      }
    }

    function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[renderbuffers + i * 4 >> 2];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue;
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

    function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];

      if (!shader) {
        GL.recordError(1281);
        return;
      }

      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

    function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[textures + i * 4 >> 2];
        var texture = GL.textures[id];
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

    function _emscripten_glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[vaos + i * 4 >> 2];
        GLctx["deleteVertexArray"](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

    function _emscripten_glDepthFunc(x0) {
      GLctx["depthFunc"](x0);
    }

    function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

    function _emscripten_glDepthRangef(x0, x1) {
      GLctx["depthRange"](x0, x1);
    }

    function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
    }

    function _emscripten_glDisable(x0) {
      GLctx["disable"](x0);
    }

    function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

    function _emscripten_glDrawArrays(mode, first, count) {
      GLctx.drawArrays(mode, first, count);
    }

    function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx["drawArraysInstanced"](mode, first, count, primcount);
    }

    var __tempFixedLengthArray = [];

    function _emscripten_glDrawBuffersWEBGL(n, bufs) {
      var bufArray = __tempFixedLengthArray[n];

      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[bufs + i * 4 >> 2];
      }

      GLctx["drawBuffers"](bufArray);
    }

    function _emscripten_glDrawElements(mode, count, type, indices) {
      GLctx.drawElements(mode, count, type, indices);
    }

    function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx["drawElementsInstanced"](mode, count, type, indices, primcount);
    }

    function _emscripten_glEnable(x0) {
      GLctx["enable"](x0);
    }

    function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

    function _emscripten_glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt["endQueryEXT"](target);
    }

    function _emscripten_glFinish() {
      GLctx["finish"]();
    }

    function _emscripten_glFlush() {
      GLctx["flush"]();
    }

    function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer]);
    }

    function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level);
    }

    function _emscripten_glFrontFace(x0) {
      GLctx["frontFace"](x0);
    }

    function __glGenObject(n, buffers, createFunction, objectTable) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);

        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(1282);
        }

        HEAP32[buffers + i * 4 >> 2] = id;
      }
    }

    function _emscripten_glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, "createBuffer", GL.buffers);
    }

    function _emscripten_glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, "createFramebuffer", GL.framebuffers);
    }

    function _emscripten_glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt["createQueryEXT"]();

        if (!query) {
          GL.recordError(1282);

          while (i < n) {
            HEAP32[ids + i++ * 4 >> 2] = 0;
          }

          return;
        }

        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        HEAP32[ids + i * 4 >> 2] = id;
      }
    }

    function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, "createRenderbuffer", GL.renderbuffers);
    }

    function _emscripten_glGenTextures(n, textures) {
      __glGenObject(n, textures, "createTexture", GL.textures);
    }

    function _emscripten_glGenVertexArraysOES(n, arrays) {
      __glGenObject(n, arrays, "createVertexArray", GL.vaos);
    }

    function _emscripten_glGenerateMipmap(x0) {
      GLctx["generateMipmap"](x0);
    }

    function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return;
      var numBytesWrittenExclNull = bufSize > 0 && name ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
      if (size) HEAP32[size >> 2] = info.size;
      if (type) HEAP32[type >> 2] = info.type;
    }

    function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return;
      var numBytesWrittenExclNull = bufSize > 0 && name ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
      if (size) HEAP32[size >> 2] = info.size;
      if (type) HEAP32[type >> 2] = info.type;
    }

    function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;

      if (len > maxCount) {
        len = maxCount;
      }

      HEAP32[count >> 2] = len;

      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[shaders + i * 4 >> 2] = id;
      }
    }

    function _emscripten_glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

    function writeI53ToI64(ptr, num) {
      HEAPU32[ptr >> 2] = num;
      HEAPU32[ptr + 4 >> 2] = (num - HEAPU32[ptr >> 2]) / 4294967296;
    }

    function emscriptenWebGLGet(name_, p, type) {
      if (!p) {
        GL.recordError(1281);
        return;
      }

      var ret = undefined;

      switch (name_) {
        case 36346:
          ret = 1;
          break;

        case 36344:
          if (type != 0 && type != 1) {
            GL.recordError(1280);
          }

          return;

        case 36345:
          ret = 0;
          break;

        case 34466:
          var formats = GLctx.getParameter(34467);
          ret = formats ? formats.length : 0;
          break;
      }

      if (ret === undefined) {
        var result = GLctx.getParameter(name_);

        switch (typeof result) {
          case "number":
            ret = result;
            break;

          case "boolean":
            ret = result ? 1 : 0;
            break;

          case "string":
            GL.recordError(1280);
            return;

          case "object":
            if (result === null) {
              switch (name_) {
                case 34964:
                case 35725:
                case 34965:
                case 36006:
                case 36007:
                case 32873:
                case 34229:
                case 34068:
                  {
                    ret = 0;
                    break;
                  }

                default:
                  {
                    GL.recordError(1280);
                    return;
                  }
              }
            } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0:
                    HEAP32[p + i * 4 >> 2] = result[i];
                    break;

                  case 2:
                    HEAPF32[p + i * 4 >> 2] = result[i];
                    break;

                  case 4:
                    HEAP8[p + i >> 0] = result[i] ? 1 : 0;
                    break;
                }
              }

              return;
            } else {
              try {
                ret = result.name | 0;
              } catch (e) {
                GL.recordError(1280);
                err("GL_INVALID_ENUM in glGet" + type + "v: Unknown object returned from WebGL getParameter(" + name_ + ")! (error: " + e + ")");
                return;
              }
            }

            break;

          default:
            GL.recordError(1280);
            err("GL_INVALID_ENUM in glGet" + type + "v: Native code calling glGet" + type + "v(" + name_ + ") and it returns " + result + " of type " + typeof result + "!");
            return;
        }
      }

      switch (type) {
        case 1:
          writeI53ToI64(p, ret);
          break;

        case 0:
          HEAP32[p >> 2] = ret;
          break;

        case 2:
          HEAPF32[p >> 2] = ret;
          break;

        case 4:
          HEAP8[p >> 0] = ret ? 1 : 0;
          break;
      }
    }

    function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 4);
    }

    function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        GL.recordError(1281);
        return;
      }

      HEAP32[data >> 2] = GLctx.getBufferParameter(target, value);
    }

    function _emscripten_glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0;
      return error;
    }

    function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

    function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);

      if (result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
        result = result.name | 0;
      }

      HEAP32[params >> 2] = result;
    }

    function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

    function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = "(unknown error)";
      var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
    }

    function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        GL.recordError(1281);
        return;
      }

      if (program >= GL.counter) {
        GL.recordError(1281);
        return;
      }

      var ptable = GL.programInfos[program];

      if (!ptable) {
        GL.recordError(1282);
        return;
      }

      if (pname == 35716) {
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = "(unknown error)";
        HEAP32[p >> 2] = log.length + 1;
      } else if (pname == 35719) {
        HEAP32[p >> 2] = ptable.maxUniformLength;
      } else if (pname == 35722) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 35721);
          ptable.maxAttributeLength = 0;

          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length + 1);
          }
        }

        HEAP32[p >> 2] = ptable.maxAttributeLength;
      } else if (pname == 35381) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 35382);
          ptable.maxUniformBlockNameLength = 0;

          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length + 1);
          }
        }

        HEAP32[p >> 2] = ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

    function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
      var ret;

      if (typeof param == "boolean") {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }

      writeI53ToI64(params, ret);
    }

    function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
      var ret;

      if (typeof param == "boolean") {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }

      HEAP32[params >> 2] = ret;
    }

    function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
      var ret;

      if (typeof param == "boolean") {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }

      writeI53ToI64(params, ret);
    }

    function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
      var ret;

      if (typeof param == "boolean") {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }

      HEAP32[params >> 2] = ret;
    }

    function _emscripten_glGetQueryivEXT(target, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      HEAP32[params >> 2] = GLctx.disjointTimerQueryExt["getQueryEXT"](target, pname);
    }

    function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      HEAP32[params >> 2] = GLctx.getRenderbufferParameter(target, pname);
    }

    function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = "(unknown error)";
      var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
    }

    function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[range >> 2] = result.rangeMin;
      HEAP32[range + 4 >> 2] = result.rangeMax;
      HEAP32[precision >> 2] = result.precision;
    }

    function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return;
      var numBytesWrittenExclNull = bufSize > 0 && source ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
    }

    function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        GL.recordError(1281);
        return;
      }

      if (pname == 35716) {
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = "(unknown error)";
        HEAP32[p >> 2] = log.length + 1;
      } else if (pname == 35720) {
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = source === null || source.length == 0 ? 0 : source.length + 1;
        HEAP32[p >> 2] = sourceLength;
      } else {
        HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

    function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString) + 1;

      var cString = _malloc(length);

      stringToUTF8(jsString, cString, length);
      return cString;
    }

    function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;

      switch (name_) {
        case 7939:
          var exts = GLctx.getSupportedExtensions() || [];
          exts = exts.concat(exts.map(function (e) {
            return "GL_" + e;
          }));
          ret = stringToNewUTF8(exts.join(" "));
          break;

        case 7936:
        case 7937:
        case 37445:
        case 37446:
          var s = GLctx.getParameter(name_);

          if (!s) {
            GL.recordError(1280);
          }

          ret = stringToNewUTF8(s);
          break;

        case 7938:
          var glVersion = GLctx.getParameter(7938);
          {
            glVersion = "OpenGL ES 2.0 (" + glVersion + ")";
          }
          ret = stringToNewUTF8(glVersion);
          break;

        case 35724:
          var glslVersion = GLctx.getParameter(35724);
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);

          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + "0";
            glslVersion = "OpenGL ES GLSL ES " + ver_num[1] + " (" + glslVersion + ")";
          }

          ret = stringToNewUTF8(glslVersion);
          break;

        default:
          GL.recordError(1280);
          return 0;
      }

      GL.stringCache[name_] = ret;
      return ret;
    }

    function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      HEAPF32[params >> 2] = GLctx.getTexParameter(target, pname);
    }

    function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      HEAP32[params >> 2] = GLctx.getTexParameter(target, pname);
    }

    function jstoi_q(str) {
      return parseInt(str);
    }

    function _emscripten_glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
      var arrayIndex = 0;

      if (name[name.length - 1] == "]") {
        var leftBrace = name.lastIndexOf("[");
        arrayIndex = name[leftBrace + 1] != "]" ? jstoi_q(name.slice(leftBrace + 1)) : 0;
        name = name.slice(0, leftBrace);
      }

      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name];

      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) {
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

    function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);

      if (typeof data == "number" || typeof data == "boolean") {
        switch (type) {
          case 0:
            HEAP32[params >> 2] = data;
            break;

          case 2:
            HEAPF32[params >> 2] = data;
            break;

          default:
            throw "internal emscriptenWebGLGetUniform() error, bad type: " + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0:
              HEAP32[params + i * 4 >> 2] = data[i];
              break;

            case 2:
              HEAPF32[params + i * 4 >> 2] = data[i];
              break;

            default:
              throw "internal emscriptenWebGLGetUniform() error, bad type: " + type;
          }
        }
      }
    }

    function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 2);
    }

    function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 0);
    }

    function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        GL.recordError(1281);
        return;
      }

      HEAP32[pointer >> 2] = GLctx.getVertexAttribOffset(index, pname);
    }

    function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      var data = GLctx.getVertexAttrib(index, pname);

      if (pname == 34975) {
        HEAP32[params >> 2] = data && data["name"];
      } else if (typeof data == "number" || typeof data == "boolean") {
        switch (type) {
          case 0:
            HEAP32[params >> 2] = data;
            break;

          case 2:
            HEAPF32[params >> 2] = data;
            break;

          case 5:
            HEAP32[params >> 2] = Math.fround(data);
            break;

          default:
            throw "internal emscriptenWebGLGetVertexAttrib() error, bad type: " + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0:
              HEAP32[params + i * 4 >> 2] = data[i];
              break;

            case 2:
              HEAPF32[params + i * 4 >> 2] = data[i];
              break;

            case 5:
              HEAP32[params + i * 4 >> 2] = Math.fround(data[i]);
              break;

            default:
              throw "internal emscriptenWebGLGetVertexAttrib() error, bad type: " + type;
          }
        }
      }
    }

    function _emscripten_glGetVertexAttribfv(index, pname, params) {
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    }

    function _emscripten_glGetVertexAttribiv(index, pname, params) {
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    }

    function _emscripten_glHint(x0, x1) {
      GLctx["hint"](x0, x1);
    }

    function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

    function _emscripten_glIsEnabled(x0) {
      return GLctx["isEnabled"](x0);
    }

    function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

    function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

    function _emscripten_glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt["isQueryEXT"](query);
    }

    function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

    function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

    function _emscripten_glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

    function _emscripten_glIsVertexArrayOES(array) {
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx["isVertexArray"](vao);
    }

    function _emscripten_glLineWidth(x0) {
      GLctx["lineWidth"](x0);
    }

    function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

    function _emscripten_glPixelStorei(pname, param) {
      if (pname == 3317) {
        GL.unpackAlignment = param;
      }

      GLctx.pixelStorei(pname, param);
    }

    function _emscripten_glPolygonOffset(x0, x1) {
      GLctx["polygonOffset"](x0, x1);
    }

    function _emscripten_glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt["queryCounterEXT"](GL.timerQueriesEXT[id], target);
    }

    function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return x + y - 1 & -y;
      }

      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }

    function __colorChannelsInGlTextureFormat(format) {
      var colorChannels = {
        5: 3,
        6: 4,
        8: 2,
        29502: 3,
        29504: 4
      };
      return colorChannels[format - 6402] || 1;
    }

    function __heapObjectForWebGLType(type) {
      type -= 5120;
      if (type == 1) return HEAPU8;
      if (type == 4) return HEAP32;
      if (type == 6) return HEAPF32;
      if (type == 5 || type == 28922) return HEAPU32;
      return HEAPU16;
    }

    function __heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }

    function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = __heapObjectForWebGLType(type);

      var shift = __heapAccessShiftForWebGLHeap(heap);

      var byteSize = 1 << shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;

      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);

      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }

    function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);

      if (!pixelData) {
        GL.recordError(1280);
        return;
      }

      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

    function _emscripten_glReleaseShaderCompiler() {}

    function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) {
      GLctx["renderbufferStorage"](x0, x1, x2, x3);
    }

    function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

    function _emscripten_glScissor(x0, x1, x2, x3) {
      GLctx["scissor"](x0, x1, x2, x3);
    }

    function _emscripten_glShaderBinary() {
      GL.recordError(1280);
    }

    function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

    function _emscripten_glStencilFunc(x0, x1, x2) {
      GLctx["stencilFunc"](x0, x1, x2);
    }

    function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) {
      GLctx["stencilFuncSeparate"](x0, x1, x2, x3);
    }

    function _emscripten_glStencilMask(x0) {
      GLctx["stencilMask"](x0);
    }

    function _emscripten_glStencilMaskSeparate(x0, x1) {
      GLctx["stencilMaskSeparate"](x0, x1);
    }

    function _emscripten_glStencilOp(x0, x1, x2) {
      GLctx["stencilOp"](x0, x1, x2);
    }

    function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) {
      GLctx["stencilOpSeparate"](x0, x1, x2, x3);
    }

    function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

    function _emscripten_glTexParameterf(x0, x1, x2) {
      GLctx["texParameterf"](x0, x1, x2);
    }

    function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[params >> 2];
      GLctx.texParameterf(target, pname, param);
    }

    function _emscripten_glTexParameteri(x0, x1, x2) {
      GLctx["texParameteri"](x0, x1, x2);
    }

    function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[params >> 2];
      GLctx.texParameteri(target, pname, param);
    }

    function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

    function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

    function _emscripten_glUniform1fv(location, count, value) {
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[count - 1];

        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[value + 4 * i >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 4 >> 2);
      }

      GLctx.uniform1fv(GL.uniforms[location], view);
    }

    function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

    function _emscripten_glUniform1iv(location, count, value) {
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferIntViews[count - 1];

        for (var i = 0; i < count; ++i) {
          view[i] = HEAP32[value + 4 * i >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, value + count * 4 >> 2);
      }

      GLctx.uniform1iv(GL.uniforms[location], view);
    }

    function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

    function _emscripten_glUniform2fv(location, count, value) {
      if (2 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[2 * count - 1];

        for (var i = 0; i < 2 * count; i += 2) {
          view[i] = HEAPF32[value + 4 * i >> 2];
          view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 8 >> 2);
      }

      GLctx.uniform2fv(GL.uniforms[location], view);
    }

    function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

    function _emscripten_glUniform2iv(location, count, value) {
      if (2 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferIntViews[2 * count - 1];

        for (var i = 0; i < 2 * count; i += 2) {
          view[i] = HEAP32[value + 4 * i >> 2];
          view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, value + count * 8 >> 2);
      }

      GLctx.uniform2iv(GL.uniforms[location], view);
    }

    function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

    function _emscripten_glUniform3fv(location, count, value) {
      if (3 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[3 * count - 1];

        for (var i = 0; i < 3 * count; i += 3) {
          view[i] = HEAPF32[value + 4 * i >> 2];
          view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 12 >> 2);
      }

      GLctx.uniform3fv(GL.uniforms[location], view);
    }

    function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

    function _emscripten_glUniform3iv(location, count, value) {
      if (3 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferIntViews[3 * count - 1];

        for (var i = 0; i < 3 * count; i += 3) {
          view[i] = HEAP32[value + 4 * i >> 2];
          view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAP32[value + (4 * i + 8) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, value + count * 12 >> 2);
      }

      GLctx.uniform3iv(GL.uniforms[location], view);
    }

    function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

    function _emscripten_glUniform4fv(location, count, value) {
      if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[4 * count - 1];
        var heap = HEAPF32;
        value >>= 2;

        for (var i = 0; i < 4 * count; i += 4) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
      }

      GLctx.uniform4fv(GL.uniforms[location], view);
    }

    function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

    function _emscripten_glUniform4iv(location, count, value) {
      if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferIntViews[4 * count - 1];

        for (var i = 0; i < 4 * count; i += 4) {
          view[i] = HEAP32[value + 4 * i >> 2];
          view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAP32[value + (4 * i + 8) >> 2];
          view[i + 3] = HEAP32[value + (4 * i + 12) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, value + count * 16 >> 2);
      }

      GLctx.uniform4iv(GL.uniforms[location], view);
    }

    function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
      if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[4 * count - 1];

        for (var i = 0; i < 4 * count; i += 4) {
          view[i] = HEAPF32[value + 4 * i >> 2];
          view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
          view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
      }

      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

    function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
      if (9 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[9 * count - 1];

        for (var i = 0; i < 9 * count; i += 9) {
          view[i] = HEAPF32[value + 4 * i >> 2];
          view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
          view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
          view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
          view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
          view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
          view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
          view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2);
      }

      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

    function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
      if (16 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[16 * count - 1];
        var heap = HEAPF32;
        value >>= 2;

        for (var i = 0; i < 16 * count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2);
      }

      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

    function _emscripten_glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

    function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

    function _emscripten_glVertexAttrib1f(x0, x1) {
      GLctx["vertexAttrib1f"](x0, x1);
    }

    function _emscripten_glVertexAttrib1fv(index, v) {
      GLctx.vertexAttrib1f(index, HEAPF32[v >> 2]);
    }

    function _emscripten_glVertexAttrib2f(x0, x1, x2) {
      GLctx["vertexAttrib2f"](x0, x1, x2);
    }

    function _emscripten_glVertexAttrib2fv(index, v) {
      GLctx.vertexAttrib2f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2]);
    }

    function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) {
      GLctx["vertexAttrib3f"](x0, x1, x2, x3);
    }

    function _emscripten_glVertexAttrib3fv(index, v) {
      GLctx.vertexAttrib3f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2]);
    }

    function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) {
      GLctx["vertexAttrib4f"](x0, x1, x2, x3, x4);
    }

    function _emscripten_glVertexAttrib4fv(index, v) {
      GLctx.vertexAttrib4f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2], HEAPF32[v + 12 >> 2]);
    }

    function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
      GLctx["vertexAttribDivisor"](index, divisor);
    }

    function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

    function _emscripten_glViewport(x0, x1, x2, x3) {
      GLctx["viewport"](x0, x1, x2, x3);
    }

    var setjmpId = 0;

    function _saveSetjmp(env, label, table, size) {
      env = env | 0;
      label = label | 0;
      table = table | 0;
      size = size | 0;
      var i = 0;
      setjmpId = setjmpId + 1 | 0;
      HEAP32[env >> 2] = setjmpId;

      while ((i | 0) < (size | 0)) {
        if ((HEAP32[table + (i << 3) >> 2] | 0) == 0) {
          HEAP32[table + (i << 3) >> 2] = setjmpId;
          HEAP32[table + ((i << 3) + 4) >> 2] = label;
          HEAP32[table + ((i << 3) + 8) >> 2] = 0;
          setTempRet0(size | 0);
          return table | 0;
        }

        i = i + 1 | 0;
      }

      size = size * 2 | 0;
      table = _realloc(table | 0, 8 * (size + 1 | 0) | 0) | 0;
      table = _saveSetjmp(env | 0, label | 0, table | 0, size | 0) | 0;
      setTempRet0(size | 0);
      return table | 0;
    }

    function _testSetjmp(id, table, size) {
      id = id | 0;
      table = table | 0;
      size = size | 0;
      var i = 0,
          curr = 0;

      while ((i | 0) < (size | 0)) {
        curr = HEAP32[table + (i << 3) >> 2] | 0;
        if ((curr | 0) == 0) break;

        if ((curr | 0) == (id | 0)) {
          return HEAP32[table + ((i << 3) + 4) >> 2] | 0;
        }

        i = i + 1 | 0;
      }

      return 0;
    }

    function _longjmp(env, value) {
      _setThrew(env, value || 1);

      throw "longjmp";
    }

    function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

    function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

    function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }

    function emscripten_realloc_buffer(size) {
      try {
        wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1;
      } catch (e) {}
    }

    function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;

      var oldSize = _emscripten_get_heap_size();

      var PAGE_MULTIPLE = 65536;
      var maxHeapSize = 2147483648;

      if (requestedSize > maxHeapSize) {
        return false;
      }

      var minHeapSize = 16777216;

      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + .2 / cutDown);
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
        var replacement = emscripten_realloc_buffer(newSize);

        if (replacement) {
          return true;
        }
      }

      return false;
    }

    function _emscripten_webgl_do_get_current_context() {
      return GL.currentContext ? GL.currentContext.handle : 0;
    }

    function _emscripten_webgl_get_current_context() {
      return _emscripten_webgl_do_get_current_context();
    }

    function _emscripten_webgl_make_context_current(contextHandle) {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    }

    var ENV = {};

    function __getExecutableName() {
      return thisProgram || "./this.program";
    }

    function getEnvStrings() {
      if (!getEnvStrings.strings) {
        var env = {
          "USER": "web_user",
          "LOGNAME": "web_user",
          "PATH": "/",
          "PWD": "/",
          "HOME": "/home/web_user",
          "LANG": (typeof navigator === "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8",
          "_": __getExecutableName()
        };

        for (var x in ENV) {
          env[x] = ENV[x];
        }

        var strings = [];

        for (var x in env) {
          strings.push(x + "=" + env[x]);
        }

        getEnvStrings.strings = strings;
      }

      return getEnvStrings.strings;
    }

    function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function (string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[__environ + i * 4 >> 2] = ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

    function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[penviron_count >> 2] = strings.length;
      var bufSize = 0;
      strings.forEach(function (string) {
        bufSize += string.length + 1;
      });
      HEAP32[penviron_buf_size >> 2] = bufSize;
      return 0;
    }

    function _exit(status) {
      exit(status);
    }

    function _fd_close(fd) {
      return 0;
    }

    function _fd_fdstat_get(fd, pbuf) {
      var type = fd == 1 || fd == 2 ? 2 : abort();
      HEAP8[pbuf >> 0] = type;
      return 0;
    }

    function _fd_read(fd, iov, iovcnt, pnum) {
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[pnum >> 2] = num;
      return 0;
    }

    function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {}

    function _fd_write(fd, iov, iovcnt, pnum) {
      var num = 0;

      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[iov + i * 8 >> 2];
        var len = HEAP32[iov + (i * 8 + 4) >> 2];

        for (var j = 0; j < len; j++) {
          SYSCALLS.printChar(fd, HEAPU8[ptr + j]);
        }

        num += len;
      }

      HEAP32[pnum >> 2] = num;
      return 0;
    }

    function _getTempRet0() {
      return getTempRet0() | 0;
    }

    function _glActiveTexture(x0) {
      GLctx["activeTexture"](x0);
    }

    function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    }

    function _glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

    function _glBindBuffer(target, buffer) {
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

    function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
    }

    function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

    function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

    function _glBlendColor(x0, x1, x2, x3) {
      GLctx["blendColor"](x0, x1, x2, x3);
    }

    function _glBlendEquation(x0) {
      GLctx["blendEquation"](x0);
    }

    function _glBlendFunc(x0, x1) {
      GLctx["blendFunc"](x0, x1);
    }

    function _glBufferData(target, size, data, usage) {
      GLctx.bufferData(target, data ? HEAPU8.subarray(data, data + size) : size, usage);
    }

    function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size));
    }

    function _glCheckFramebufferStatus(x0) {
      return GLctx["checkFramebufferStatus"](x0);
    }

    function _glClear(x0) {
      GLctx["clear"](x0);
    }

    function _glClearColor(x0, x1, x2, x3) {
      GLctx["clearColor"](x0, x1, x2, x3);
    }

    function _glClearStencil(x0) {
      GLctx["clearStencil"](x0);
    }

    function _glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

    function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

    function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx["compressedTexImage2D"](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray(data, data + imageSize) : null);
    }

    function _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx["compressedTexSubImage2D"](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray(data, data + imageSize) : null);
    }

    function _glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
      GLctx["copyTexSubImage2D"](x0, x1, x2, x3, x4, x5, x6, x7);
    }

    function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

    function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

    function _glCullFace(x0) {
      GLctx["cullFace"](x0);
    }

    function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[buffers + i * 4 >> 2];
        var buffer = GL.buffers[id];
        if (!buffer) continue;
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

    function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[framebuffers + i * 4 >> 2];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue;
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

    function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];

      if (!program) {
        GL.recordError(1281);
        return;
      }

      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

    function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[renderbuffers + i * 4 >> 2];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue;
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

    function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];

      if (!shader) {
        GL.recordError(1281);
        return;
      }

      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

    function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[textures + i * 4 >> 2];
        var texture = GL.textures[id];
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

    function _glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

    function _glDisable(x0) {
      GLctx["disable"](x0);
    }

    function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

    function _glDrawArrays(mode, first, count) {
      GLctx.drawArrays(mode, first, count);
    }

    function _glDrawElements(mode, count, type, indices) {
      GLctx.drawElements(mode, count, type, indices);
    }

    function _glEnable(x0) {
      GLctx["enable"](x0);
    }

    function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

    function _glFinish() {
      GLctx["finish"]();
    }

    function _glFlush() {
      GLctx["flush"]();
    }

    function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer]);
    }

    function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level);
    }

    function _glFrontFace(x0) {
      GLctx["frontFace"](x0);
    }

    function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, "createBuffer", GL.buffers);
    }

    function _glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, "createFramebuffer", GL.framebuffers);
    }

    function _glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, "createRenderbuffer", GL.renderbuffers);
    }

    function _glGenTextures(n, textures) {
      __glGenObject(n, textures, "createTexture", GL.textures);
    }

    function _glGenerateMipmap(x0) {
      GLctx["generateMipmap"](x0);
    }

    function _glGetBufferParameteriv(target, value, data) {
      if (!data) {
        GL.recordError(1281);
        return;
      }

      HEAP32[data >> 2] = GLctx.getBufferParameter(target, value);
    }

    function _glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0;
      return error;
    }

    function _glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);

      if (result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
        result = result.name | 0;
      }

      HEAP32[params >> 2] = result;
    }

    function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

    function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = "(unknown error)";
      var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
    }

    function _glGetProgramiv(program, pname, p) {
      if (!p) {
        GL.recordError(1281);
        return;
      }

      if (program >= GL.counter) {
        GL.recordError(1281);
        return;
      }

      var ptable = GL.programInfos[program];

      if (!ptable) {
        GL.recordError(1282);
        return;
      }

      if (pname == 35716) {
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = "(unknown error)";
        HEAP32[p >> 2] = log.length + 1;
      } else if (pname == 35719) {
        HEAP32[p >> 2] = ptable.maxUniformLength;
      } else if (pname == 35722) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 35721);
          ptable.maxAttributeLength = 0;

          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length + 1);
          }
        }

        HEAP32[p >> 2] = ptable.maxAttributeLength;
      } else if (pname == 35381) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 35382);
          ptable.maxUniformBlockNameLength = 0;

          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length + 1);
          }
        }

        HEAP32[p >> 2] = ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

    function _glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        GL.recordError(1281);
        return;
      }

      HEAP32[params >> 2] = GLctx.getRenderbufferParameter(target, pname);
    }

    function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = "(unknown error)";
      var numBytesWrittenExclNull = maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
    }

    function _glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[range >> 2] = result.rangeMin;
      HEAP32[range + 4 >> 2] = result.rangeMax;
      HEAP32[precision >> 2] = result.precision;
    }

    function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        GL.recordError(1281);
        return;
      }

      if (pname == 35716) {
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = "(unknown error)";
        HEAP32[p >> 2] = log.length + 1;
      } else if (pname == 35720) {
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = source === null || source.length == 0 ? 0 : source.length + 1;
        HEAP32[p >> 2] = sourceLength;
      } else {
        HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

    function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;

      switch (name_) {
        case 7939:
          var exts = GLctx.getSupportedExtensions() || [];
          exts = exts.concat(exts.map(function (e) {
            return "GL_" + e;
          }));
          ret = stringToNewUTF8(exts.join(" "));
          break;

        case 7936:
        case 7937:
        case 37445:
        case 37446:
          var s = GLctx.getParameter(name_);

          if (!s) {
            GL.recordError(1280);
          }

          ret = stringToNewUTF8(s);
          break;

        case 7938:
          var glVersion = GLctx.getParameter(7938);
          {
            glVersion = "OpenGL ES 2.0 (" + glVersion + ")";
          }
          ret = stringToNewUTF8(glVersion);
          break;

        case 35724:
          var glslVersion = GLctx.getParameter(35724);
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);

          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + "0";
            glslVersion = "OpenGL ES GLSL ES " + ver_num[1] + " (" + glslVersion + ")";
          }

          ret = stringToNewUTF8(glslVersion);
          break;

        default:
          GL.recordError(1280);
          return 0;
      }

      GL.stringCache[name_] = ret;
      return ret;
    }

    function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
      var arrayIndex = 0;

      if (name[name.length - 1] == "]") {
        var leftBrace = name.lastIndexOf("[");
        arrayIndex = name[leftBrace + 1] != "]" ? jstoi_q(name.slice(leftBrace + 1)) : 0;
        name = name.slice(0, leftBrace);
      }

      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name];

      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) {
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

    function _glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

    function _glLineWidth(x0) {
      GLctx["lineWidth"](x0);
    }

    function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

    function _glPixelStorei(pname, param) {
      if (pname == 3317) {
        GL.unpackAlignment = param;
      }

      GLctx.pixelStorei(pname, param);
    }

    function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);

      if (!pixelData) {
        GL.recordError(1280);
        return;
      }

      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

    function _glRenderbufferStorage(x0, x1, x2, x3) {
      GLctx["renderbufferStorage"](x0, x1, x2, x3);
    }

    function _glScissor(x0, x1, x2, x3) {
      GLctx["scissor"](x0, x1, x2, x3);
    }

    function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

    function _glStencilFunc(x0, x1, x2) {
      GLctx["stencilFunc"](x0, x1, x2);
    }

    function _glStencilFuncSeparate(x0, x1, x2, x3) {
      GLctx["stencilFuncSeparate"](x0, x1, x2, x3);
    }

    function _glStencilMask(x0) {
      GLctx["stencilMask"](x0);
    }

    function _glStencilMaskSeparate(x0, x1) {
      GLctx["stencilMaskSeparate"](x0, x1);
    }

    function _glStencilOp(x0, x1, x2) {
      GLctx["stencilOp"](x0, x1, x2);
    }

    function _glStencilOpSeparate(x0, x1, x2, x3) {
      GLctx["stencilOpSeparate"](x0, x1, x2, x3);
    }

    function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

    function _glTexParameterf(x0, x1, x2) {
      GLctx["texParameterf"](x0, x1, x2);
    }

    function _glTexParameterfv(target, pname, params) {
      var param = HEAPF32[params >> 2];
      GLctx.texParameterf(target, pname, param);
    }

    function _glTexParameteri(x0, x1, x2) {
      GLctx["texParameteri"](x0, x1, x2);
    }

    function _glTexParameteriv(target, pname, params) {
      var param = HEAP32[params >> 2];
      GLctx.texParameteri(target, pname, param);
    }

    function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

    function _glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

    function _glUniform1fv(location, count, value) {
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[count - 1];

        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[value + 4 * i >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 4 >> 2);
      }

      GLctx.uniform1fv(GL.uniforms[location], view);
    }

    function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

    function _glUniform1iv(location, count, value) {
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferIntViews[count - 1];

        for (var i = 0; i < count; ++i) {
          view[i] = HEAP32[value + 4 * i >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, value + count * 4 >> 2);
      }

      GLctx.uniform1iv(GL.uniforms[location], view);
    }

    function _glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

    function _glUniform2fv(location, count, value) {
      if (2 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[2 * count - 1];

        for (var i = 0; i < 2 * count; i += 2) {
          view[i] = HEAPF32[value + 4 * i >> 2];
          view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 8 >> 2);
      }

      GLctx.uniform2fv(GL.uniforms[location], view);
    }

    function _glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

    function _glUniform2iv(location, count, value) {
      if (2 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferIntViews[2 * count - 1];

        for (var i = 0; i < 2 * count; i += 2) {
          view[i] = HEAP32[value + 4 * i >> 2];
          view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, value + count * 8 >> 2);
      }

      GLctx.uniform2iv(GL.uniforms[location], view);
    }

    function _glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

    function _glUniform3fv(location, count, value) {
      if (3 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[3 * count - 1];

        for (var i = 0; i < 3 * count; i += 3) {
          view[i] = HEAPF32[value + 4 * i >> 2];
          view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 12 >> 2);
      }

      GLctx.uniform3fv(GL.uniforms[location], view);
    }

    function _glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

    function _glUniform3iv(location, count, value) {
      if (3 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferIntViews[3 * count - 1];

        for (var i = 0; i < 3 * count; i += 3) {
          view[i] = HEAP32[value + 4 * i >> 2];
          view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAP32[value + (4 * i + 8) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, value + count * 12 >> 2);
      }

      GLctx.uniform3iv(GL.uniforms[location], view);
    }

    function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

    function _glUniform4fv(location, count, value) {
      if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[4 * count - 1];
        var heap = HEAPF32;
        value >>= 2;

        for (var i = 0; i < 4 * count; i += 4) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
      }

      GLctx.uniform4fv(GL.uniforms[location], view);
    }

    function _glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

    function _glUniform4iv(location, count, value) {
      if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferIntViews[4 * count - 1];

        for (var i = 0; i < 4 * count; i += 4) {
          view[i] = HEAP32[value + 4 * i >> 2];
          view[i + 1] = HEAP32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAP32[value + (4 * i + 8) >> 2];
          view[i + 3] = HEAP32[value + (4 * i + 12) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, value + count * 16 >> 2);
      }

      GLctx.uniform4iv(GL.uniforms[location], view);
    }

    function _glUniformMatrix2fv(location, count, transpose, value) {
      if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[4 * count - 1];

        for (var i = 0; i < 4 * count; i += 4) {
          view[i] = HEAPF32[value + 4 * i >> 2];
          view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
          view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2);
      }

      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

    function _glUniformMatrix3fv(location, count, transpose, value) {
      if (9 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[9 * count - 1];

        for (var i = 0; i < 9 * count; i += 9) {
          view[i] = HEAPF32[value + 4 * i >> 2];
          view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
          view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
          view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
          view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
          view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
          view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
          view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
          view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2);
      }

      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

    function _glUniformMatrix4fv(location, count, transpose, value) {
      if (16 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        var view = GL.miniTempBufferFloatViews[16 * count - 1];
        var heap = HEAPF32;
        value >>= 2;

        for (var i = 0; i < 16 * count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2);
      }

      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

    function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

    function _glVertexAttrib1f(x0, x1) {
      GLctx["vertexAttrib1f"](x0, x1);
    }

    function _glVertexAttrib2fv(index, v) {
      GLctx.vertexAttrib2f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2]);
    }

    function _glVertexAttrib3fv(index, v) {
      GLctx.vertexAttrib3f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2]);
    }

    function _glVertexAttrib4fv(index, v) {
      GLctx.vertexAttrib4f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2], HEAPF32[v + 12 >> 2]);
    }

    function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

    function _glViewport(x0, x1, x2, x3) {
      GLctx["viewport"](x0, x1, x2, x3);
    }

    function _round(d) {
      d = +d;
      return d >= +0 ? +Math_floor(d + +.5) : +Math_ceil(d - +.5);
    }

    function _roundf(d) {
      d = +d;
      return d >= +0 ? +Math_floor(d + +.5) : +Math_ceil(d - +.5);
    }

    function _sem_destroy() {}

    function _sem_init() {}

    function _sem_post() {}

    function _sem_wait() {}

    function _setTempRet0($i) {
      setTempRet0($i | 0);
    }

    function __isLeapYear(year) {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }

    function __arraySum(array, index) {
      var sum = 0;

      for (var i = 0; i <= index; sum += array[i++]) {}

      return sum;
    }

    var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    function __addDays(date, days) {
      var newDate = new Date(date.getTime());

      while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());

        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];

        if (days > daysInCurrentMonth - newDate.getDate()) {
          days -= daysInCurrentMonth - newDate.getDate() + 1;
          newDate.setDate(1);

          if (currentMonth < 11) {
            newDate.setMonth(currentMonth + 1);
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear() + 1);
          }
        } else {
          newDate.setDate(newDate.getDate() + days);
          return newDate;
        }
      }

      return newDate;
    }

    function _strftime(s, maxsize, format, tm) {
      var tm_zone = HEAP32[tm + 40 >> 2];
      var date = {
        tm_sec: HEAP32[tm >> 2],
        tm_min: HEAP32[tm + 4 >> 2],
        tm_hour: HEAP32[tm + 8 >> 2],
        tm_mday: HEAP32[tm + 12 >> 2],
        tm_mon: HEAP32[tm + 16 >> 2],
        tm_year: HEAP32[tm + 20 >> 2],
        tm_wday: HEAP32[tm + 24 >> 2],
        tm_yday: HEAP32[tm + 28 >> 2],
        tm_isdst: HEAP32[tm + 32 >> 2],
        tm_gmtoff: HEAP32[tm + 36 >> 2],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ""
      };
      var pattern = UTF8ToString(format);
      var EXPANSION_RULES_1 = {
        "%c": "%a %b %d %H:%M:%S %Y",
        "%D": "%m/%d/%y",
        "%F": "%Y-%m-%d",
        "%h": "%b",
        "%r": "%I:%M:%S %p",
        "%R": "%H:%M",
        "%T": "%H:%M:%S",
        "%x": "%m/%d/%y",
        "%X": "%H:%M:%S",
        "%Ec": "%c",
        "%EC": "%C",
        "%Ex": "%m/%d/%y",
        "%EX": "%H:%M:%S",
        "%Ey": "%y",
        "%EY": "%Y",
        "%Od": "%d",
        "%Oe": "%e",
        "%OH": "%H",
        "%OI": "%I",
        "%Om": "%m",
        "%OM": "%M",
        "%OS": "%S",
        "%Ou": "%u",
        "%OU": "%U",
        "%OV": "%V",
        "%Ow": "%w",
        "%OW": "%W",
        "%Oy": "%y"
      };

      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
      }

      var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

      function leadingSomething(value, digits, character) {
        var str = typeof value === "number" ? value.toString() : value || "";

        while (str.length < digits) {
          str = character[0] + str;
        }

        return str;
      }

      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, "0");
      }

      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : value > 0 ? 1 : 0;
        }

        var compare;

        if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
            compare = sgn(date1.getDate() - date2.getDate());
          }
        }

        return compare;
      }

      function getFirstWeekStartDate(janFourth) {
        switch (janFourth.getDay()) {
          case 0:
            return new Date(janFourth.getFullYear() - 1, 11, 29);

          case 1:
            return janFourth;

          case 2:
            return new Date(janFourth.getFullYear(), 0, 3);

          case 3:
            return new Date(janFourth.getFullYear(), 0, 2);

          case 4:
            return new Date(janFourth.getFullYear(), 0, 1);

          case 5:
            return new Date(janFourth.getFullYear() - 1, 11, 31);

          case 6:
            return new Date(janFourth.getFullYear() - 1, 11, 30);
        }
      }

      function getWeekBasedYear(date) {
        var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);

        var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
        var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
        var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
        var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

        if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
          if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
            return thisDate.getFullYear() + 1;
          } else {
            return thisDate.getFullYear();
          }
        } else {
          return thisDate.getFullYear() - 1;
        }
      }

      var EXPANSION_RULES_2 = {
        "%a": function a(date) {
          return WEEKDAYS[date.tm_wday].substring(0, 3);
        },
        "%A": function A(date) {
          return WEEKDAYS[date.tm_wday];
        },
        "%b": function b(date) {
          return MONTHS[date.tm_mon].substring(0, 3);
        },
        "%B": function B(date) {
          return MONTHS[date.tm_mon];
        },
        "%C": function C(date) {
          var year = date.tm_year + 1900;
          return leadingNulls(year / 100 | 0, 2);
        },
        "%d": function d(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        "%e": function e(date) {
          return leadingSomething(date.tm_mday, 2, " ");
        },
        "%g": function g(date) {
          return getWeekBasedYear(date).toString().substring(2);
        },
        "%G": function G(date) {
          return getWeekBasedYear(date);
        },
        "%H": function H(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        "%I": function I(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        "%j": function j(date) {
          return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);
        },
        "%m": function m(date) {
          return leadingNulls(date.tm_mon + 1, 2);
        },
        "%M": function M(date) {
          return leadingNulls(date.tm_min, 2);
        },
        "%n": function n() {
          return "\n";
        },
        "%p": function p(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return "AM";
          } else {
            return "PM";
          }
        },
        "%S": function S(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        "%t": function t() {
          return "\t";
        },
        "%u": function u(date) {
          return date.tm_wday || 7;
        },
        "%U": function U(date) {
          var janFirst = new Date(date.tm_year + 1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
          var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);

          if (compareByDay(firstSunday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
            var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
            var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
            return leadingNulls(Math.ceil(days / 7), 2);
          }

          return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
        },
        "%V": function V(date) {
          var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);

          var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);

          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            return "53";
          }

          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            return "01";
          }

          var daysDifference;

          if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
            daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate();
          } else {
            daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
          }

          return leadingNulls(Math.ceil(daysDifference / 7), 2);
        },
        "%w": function w(date) {
          return date.tm_wday;
        },
        "%W": function W(date) {
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
          var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);

          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
            var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
            var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
            return leadingNulls(Math.ceil(days / 7), 2);
          }

          return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
        },
        "%y": function y(date) {
          return (date.tm_year + 1900).toString().substring(2);
        },
        "%Y": function Y(date) {
          return date.tm_year + 1900;
        },
        "%z": function z(date) {
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          off = off / 60 * 100 + off % 60;
          return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
        },
        "%Z": function Z(date) {
          return date.tm_zone;
        },
        "%%": function _() {
          return "%";
        }
      };

      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
        }
      }

      var bytes = intArrayFromString(pattern, false);

      if (bytes.length > maxsize) {
        return 0;
      }

      writeArrayToMemory(bytes, s);
      return bytes.length - 1;
    }

    function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm);
    }

    InternalError = Module["InternalError"] = extendError(Error, "InternalError");
    embind_init_charCodes();
    BindingError = Module["BindingError"] = extendError(Error, "BindingError");
    init_ClassHandle();
    init_RegisteredPointer();
    init_embind();
    UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");
    init_emval();

    Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) {
      Browser.requestFullscreen(lockPointer, resizeCanvas);
    };

    Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
      Browser.requestAnimationFrame(func);
    };

    Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
      Browser.setCanvasSize(width, height, noUpdates);
    };

    Module["pauseMainLoop"] = function Module_pauseMainLoop() {
      Browser.mainLoop.pause();
    };

    Module["resumeMainLoop"] = function Module_resumeMainLoop() {
      Browser.mainLoop.resume();
    };

    Module["getUserMedia"] = function Module_getUserMedia() {
      Browser.getUserMedia();
    };

    Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
      return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
    };

    var GLctx;
    GL.init();

    for (var i = 0; i < 32; i++) {
      __tempFixedLengthArray.push(new Array(i));
    }

    function intArrayFromString(stringy, dontAddNull, length) {
      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    }

    var asmLibraryArg = {
      "yc": ___cxa_allocate_exception,
      "nc": ___cxa_throw,
      "Ee": ___map_file,
      "T": ___sys_fcntl64,
      "Be": ___sys_fstat64,
      "De": ___sys_ioctl,
      "Ae": ___sys_mmap2,
      "ze": ___sys_munmap,
      "U": ___sys_open,
      "ye": ___sys_pread64,
      "R": ___sys_stat64,
      "I": __embind_finalize_value_array,
      "w": __embind_finalize_value_object,
      "Ge": __embind_register_bool,
      "i": __embind_register_class,
      "l": __embind_register_class_class_function,
      "y": __embind_register_class_constructor,
      "d": __embind_register_class_function,
      "_": __embind_register_constant,
      "Fe": __embind_register_emval,
      "p": __embind_register_enum,
      "o": __embind_register_enum_value,
      "V": __embind_register_float,
      "n": __embind_register_function,
      "A": __embind_register_integer,
      "z": __embind_register_memory_view,
      "r": __embind_register_smart_ptr,
      "W": __embind_register_std_string,
      "M": __embind_register_std_wstring,
      "K": __embind_register_value_array,
      "J": __embind_register_value_array_element,
      "x": __embind_register_value_object,
      "h": __embind_register_value_object_field,
      "He": __embind_register_void,
      "D": __emval_call_void_method,
      "la": __emval_decref,
      "C": __emval_get_method_caller,
      "bd": __emval_incref,
      "wa": __emval_new_array,
      "Ha": __emval_new_cstring,
      "cc": __emval_new_object,
      "H": __emval_set_property,
      "B": __emval_take_value,
      "e": _abort,
      "ue": _clock_gettime,
      "jb": _eglGetCurrentDisplay,
      "Ne": _eglGetProcAddress,
      "ib": _eglQueryString,
      "Zd": _emscripten_glActiveTexture,
      "Yd": _emscripten_glAttachShader,
      "ne": _emscripten_glBeginQueryEXT,
      "Xd": _emscripten_glBindAttribLocation,
      "Wd": _emscripten_glBindBuffer,
      "Vd": _emscripten_glBindFramebuffer,
      "Ud": _emscripten_glBindRenderbuffer,
      "Td": _emscripten_glBindTexture,
      "fe": _emscripten_glBindVertexArrayOES,
      "Sd": _emscripten_glBlendColor,
      "Rd": _emscripten_glBlendEquation,
      "Qd": _emscripten_glBlendEquationSeparate,
      "Pd": _emscripten_glBlendFunc,
      "Od": _emscripten_glBlendFuncSeparate,
      "Nd": _emscripten_glBufferData,
      "Md": _emscripten_glBufferSubData,
      "Ld": _emscripten_glCheckFramebufferStatus,
      "Kd": _emscripten_glClear,
      "Jd": _emscripten_glClearColor,
      "Id": _emscripten_glClearDepthf,
      "Hd": _emscripten_glClearStencil,
      "Gd": _emscripten_glColorMask,
      "Fd": _emscripten_glCompileShader,
      "Ed": _emscripten_glCompressedTexImage2D,
      "Dd": _emscripten_glCompressedTexSubImage2D,
      "Cd": _emscripten_glCopyTexImage2D,
      "Bd": _emscripten_glCopyTexSubImage2D,
      "Ad": _emscripten_glCreateProgram,
      "zd": _emscripten_glCreateShader,
      "yd": _emscripten_glCullFace,
      "xd": _emscripten_glDeleteBuffers,
      "wd": _emscripten_glDeleteFramebuffers,
      "vd": _emscripten_glDeleteProgram,
      "pe": _emscripten_glDeleteQueriesEXT,
      "ud": _emscripten_glDeleteRenderbuffers,
      "td": _emscripten_glDeleteShader,
      "sd": _emscripten_glDeleteTextures,
      "ee": _emscripten_glDeleteVertexArraysOES,
      "rd": _emscripten_glDepthFunc,
      "qd": _emscripten_glDepthMask,
      "pd": _emscripten_glDepthRangef,
      "od": _emscripten_glDetachShader,
      "nd": _emscripten_glDisable,
      "md": _emscripten_glDisableVertexAttribArray,
      "ld": _emscripten_glDrawArrays,
      "ae": _emscripten_glDrawArraysInstancedANGLE,
      "be": _emscripten_glDrawBuffersWEBGL,
      "kd": _emscripten_glDrawElements,
      "$d": _emscripten_glDrawElementsInstancedANGLE,
      "jd": _emscripten_glEnable,
      "id": _emscripten_glEnableVertexAttribArray,
      "me": _emscripten_glEndQueryEXT,
      "hd": _emscripten_glFinish,
      "gd": _emscripten_glFlush,
      "fd": _emscripten_glFramebufferRenderbuffer,
      "ed": _emscripten_glFramebufferTexture2D,
      "dd": _emscripten_glFrontFace,
      "cd": _emscripten_glGenBuffers,
      "$c": _emscripten_glGenFramebuffers,
      "qe": _emscripten_glGenQueriesEXT,
      "_c": _emscripten_glGenRenderbuffers,
      "Zc": _emscripten_glGenTextures,
      "de": _emscripten_glGenVertexArraysOES,
      "ad": _emscripten_glGenerateMipmap,
      "Yc": _emscripten_glGetActiveAttrib,
      "Xc": _emscripten_glGetActiveUniform,
      "Wc": _emscripten_glGetAttachedShaders,
      "Vc": _emscripten_glGetAttribLocation,
      "Uc": _emscripten_glGetBooleanv,
      "Tc": _emscripten_glGetBufferParameteriv,
      "Sc": _emscripten_glGetError,
      "Rc": _emscripten_glGetFloatv,
      "Qc": _emscripten_glGetFramebufferAttachmentParameteriv,
      "Pc": _emscripten_glGetIntegerv,
      "Nc": _emscripten_glGetProgramInfoLog,
      "Oc": _emscripten_glGetProgramiv,
      "he": _emscripten_glGetQueryObjecti64vEXT,
      "je": _emscripten_glGetQueryObjectivEXT,
      "ge": _emscripten_glGetQueryObjectui64vEXT,
      "ie": _emscripten_glGetQueryObjectuivEXT,
      "ke": _emscripten_glGetQueryivEXT,
      "Mc": _emscripten_glGetRenderbufferParameteriv,
      "Kc": _emscripten_glGetShaderInfoLog,
      "Jc": _emscripten_glGetShaderPrecisionFormat,
      "Ic": _emscripten_glGetShaderSource,
      "Lc": _emscripten_glGetShaderiv,
      "Hc": _emscripten_glGetString,
      "Gc": _emscripten_glGetTexParameterfv,
      "Fc": _emscripten_glGetTexParameteriv,
      "Cc": _emscripten_glGetUniformLocation,
      "Ec": _emscripten_glGetUniformfv,
      "Dc": _emscripten_glGetUniformiv,
      "zc": _emscripten_glGetVertexAttribPointerv,
      "Bc": _emscripten_glGetVertexAttribfv,
      "Ac": _emscripten_glGetVertexAttribiv,
      "xc": _emscripten_glHint,
      "wc": _emscripten_glIsBuffer,
      "vc": _emscripten_glIsEnabled,
      "uc": _emscripten_glIsFramebuffer,
      "tc": _emscripten_glIsProgram,
      "oe": _emscripten_glIsQueryEXT,
      "sc": _emscripten_glIsRenderbuffer,
      "rc": _emscripten_glIsShader,
      "qc": _emscripten_glIsTexture,
      "ce": _emscripten_glIsVertexArrayOES,
      "pc": _emscripten_glLineWidth,
      "oc": _emscripten_glLinkProgram,
      "mc": _emscripten_glPixelStorei,
      "lc": _emscripten_glPolygonOffset,
      "le": _emscripten_glQueryCounterEXT,
      "kc": _emscripten_glReadPixels,
      "jc": _emscripten_glReleaseShaderCompiler,
      "ic": _emscripten_glRenderbufferStorage,
      "hc": _emscripten_glSampleCoverage,
      "gc": _emscripten_glScissor,
      "fc": _emscripten_glShaderBinary,
      "ec": _emscripten_glShaderSource,
      "dc": _emscripten_glStencilFunc,
      "bc": _emscripten_glStencilFuncSeparate,
      "ac": _emscripten_glStencilMask,
      "$b": _emscripten_glStencilMaskSeparate,
      "_b": _emscripten_glStencilOp,
      "Zb": _emscripten_glStencilOpSeparate,
      "Yb": _emscripten_glTexImage2D,
      "Xb": _emscripten_glTexParameterf,
      "Wb": _emscripten_glTexParameterfv,
      "Vb": _emscripten_glTexParameteri,
      "Ub": _emscripten_glTexParameteriv,
      "Tb": _emscripten_glTexSubImage2D,
      "Sb": _emscripten_glUniform1f,
      "Rb": _emscripten_glUniform1fv,
      "Qb": _emscripten_glUniform1i,
      "Pb": _emscripten_glUniform1iv,
      "Ob": _emscripten_glUniform2f,
      "Nb": _emscripten_glUniform2fv,
      "Mb": _emscripten_glUniform2i,
      "Lb": _emscripten_glUniform2iv,
      "Kb": _emscripten_glUniform3f,
      "Jb": _emscripten_glUniform3fv,
      "Ib": _emscripten_glUniform3i,
      "Hb": _emscripten_glUniform3iv,
      "Gb": _emscripten_glUniform4f,
      "Fb": _emscripten_glUniform4fv,
      "Eb": _emscripten_glUniform4i,
      "Db": _emscripten_glUniform4iv,
      "Cb": _emscripten_glUniformMatrix2fv,
      "Bb": _emscripten_glUniformMatrix3fv,
      "Ab": _emscripten_glUniformMatrix4fv,
      "zb": _emscripten_glUseProgram,
      "yb": _emscripten_glValidateProgram,
      "xb": _emscripten_glVertexAttrib1f,
      "wb": _emscripten_glVertexAttrib1fv,
      "vb": _emscripten_glVertexAttrib2f,
      "ub": _emscripten_glVertexAttrib2fv,
      "tb": _emscripten_glVertexAttrib3f,
      "sb": _emscripten_glVertexAttrib3fv,
      "rb": _emscripten_glVertexAttrib4f,
      "qb": _emscripten_glVertexAttrib4fv,
      "_d": _emscripten_glVertexAttribDivisorANGLE,
      "pb": _emscripten_glVertexAttribPointer,
      "ob": _emscripten_glViewport,
      "f": _emscripten_longjmp,
      "re": _emscripten_memcpy_big,
      "se": _emscripten_resize_heap,
      "Df": _emscripten_webgl_get_current_context,
      "aa": _emscripten_webgl_make_context_current,
      "we": _environ_get,
      "xe": _environ_sizes_get,
      "Ie": _exit,
      "L": _fd_close,
      "ve": _fd_fdstat_get,
      "Ce": _fd_read,
      "nb": _fd_seek,
      "S": _fd_write,
      "a": _getTempRet0,
      "hb": _glActiveTexture,
      "gb": _glAttachShader,
      "fb": _glBindAttribLocation,
      "eb": _glBindBuffer,
      "$": _glBindFramebuffer,
      "db": _glBindRenderbuffer,
      "cb": _glBindTexture,
      "bb": _glBlendColor,
      "ab": _glBlendEquation,
      "$a": _glBlendFunc,
      "_a": _glBufferData,
      "Za": _glBufferSubData,
      "Ya": _glCheckFramebufferStatus,
      "N": _glClear,
      "Q": _glClearColor,
      "P": _glClearStencil,
      "Xa": _glColorMask,
      "Wa": _glCompileShader,
      "Va": _glCompressedTexImage2D,
      "Ua": _glCompressedTexSubImage2D,
      "Ta": _glCopyTexSubImage2D,
      "Sa": _glCreateProgram,
      "Ra": _glCreateShader,
      "Qa": _glCullFace,
      "Pa": _glDeleteBuffers,
      "Oa": _glDeleteFramebuffers,
      "Na": _glDeleteProgram,
      "Ma": _glDeleteRenderbuffers,
      "La": _glDeleteShader,
      "Ka": _glDeleteTextures,
      "Ja": _glDepthMask,
      "Ia": _glDisable,
      "Ga": _glDisableVertexAttribArray,
      "Fa": _glDrawArrays,
      "Ea": _glDrawElements,
      "Da": _glEnable,
      "Ca": _glEnableVertexAttribArray,
      "Ba": _glFinish,
      "Aa": _glFlush,
      "za": _glFramebufferRenderbuffer,
      "ya": _glFramebufferTexture2D,
      "xa": _glFrontFace,
      "va": _glGenBuffers,
      "ua": _glGenFramebuffers,
      "ta": _glGenRenderbuffers,
      "sa": _glGenTextures,
      "ra": _glGenerateMipmap,
      "qa": _glGetBufferParameteriv,
      "pa": _glGetError,
      "oa": _glGetFramebufferAttachmentParameteriv,
      "G": _glGetIntegerv,
      "na": _glGetProgramInfoLog,
      "ma": _glGetProgramiv,
      "ka": _glGetRenderbufferParameteriv,
      "ja": _glGetShaderInfoLog,
      "ia": _glGetShaderPrecisionFormat,
      "ha": _glGetShaderiv,
      "ga": _glGetString,
      "fa": _glGetUniformLocation,
      "ea": _glIsTexture,
      "da": _glLineWidth,
      "ca": _glLinkProgram,
      "ba": _glPixelStorei,
      "Cf": _glReadPixels,
      "Bf": _glRenderbufferStorage,
      "Af": _glScissor,
      "zf": _glShaderSource,
      "yf": _glStencilFunc,
      "xf": _glStencilFuncSeparate,
      "wf": _glStencilMask,
      "vf": _glStencilMaskSeparate,
      "uf": _glStencilOp,
      "tf": _glStencilOpSeparate,
      "sf": _glTexImage2D,
      "rf": _glTexParameterf,
      "qf": _glTexParameterfv,
      "pf": _glTexParameteri,
      "of": _glTexParameteriv,
      "nf": _glTexSubImage2D,
      "mf": _glUniform1f,
      "lf": _glUniform1fv,
      "kf": _glUniform1i,
      "jf": _glUniform1iv,
      "hf": _glUniform2f,
      "gf": _glUniform2fv,
      "ff": _glUniform2i,
      "ef": _glUniform2iv,
      "df": _glUniform3f,
      "cf": _glUniform3fv,
      "bf": _glUniform3i,
      "af": _glUniform3iv,
      "$e": _glUniform4f,
      "_e": _glUniform4fv,
      "Ze": _glUniform4i,
      "Ye": _glUniform4iv,
      "Xe": _glUniformMatrix2fv,
      "We": _glUniformMatrix3fv,
      "Ve": _glUniformMatrix4fv,
      "Ue": _glUseProgram,
      "Te": _glVertexAttrib1f,
      "Se": _glVertexAttrib2fv,
      "Re": _glVertexAttrib3fv,
      "Qe": _glVertexAttrib4fv,
      "Pe": _glVertexAttribPointer,
      "Oe": _glViewport,
      "k": invoke_ii,
      "v": invoke_iii,
      "g": invoke_iiii,
      "F": invoke_iiiii,
      "Me": invoke_iiiiii,
      "Z": invoke_iiiiiii,
      "Y": invoke_iiiiiiiiii,
      "X": invoke_v,
      "j": invoke_vi,
      "m": invoke_vii,
      "t": invoke_viii,
      "u": invoke_viiii,
      "Le": invoke_viiiii,
      "Je": invoke_viiiiii,
      "Ke": invoke_viiiiiiiii,
      "memory": wasmMemory,
      "q": _round,
      "E": _roundf,
      "s": _saveSetjmp,
      "mb": _sem_destroy,
      "O": _sem_init,
      "lb": _sem_post,
      "kb": _sem_wait,
      "b": _setTempRet0,
      "te": _strftime_l,
      "table": wasmTable,
      "c": _testSetjmp
    };
    var asm = createWasm();
    Module["asm"] = asm;

    var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function () {
      return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["Ef"]).apply(null, arguments);
    };

    var _memset = Module["_memset"] = function () {
      return (_memset = Module["_memset"] = Module["asm"]["Ff"]).apply(null, arguments);
    };

    var _malloc = Module["_malloc"] = function () {
      return (_malloc = Module["_malloc"] = Module["asm"]["Gf"]).apply(null, arguments);
    };

    var _free = Module["_free"] = function () {
      return (_free = Module["_free"] = Module["asm"]["Hf"]).apply(null, arguments);
    };

    var _realloc = Module["_realloc"] = function () {
      return (_realloc = Module["_realloc"] = Module["asm"]["If"]).apply(null, arguments);
    };

    var ___errno_location = Module["___errno_location"] = function () {
      return (___errno_location = Module["___errno_location"] = Module["asm"]["Jf"]).apply(null, arguments);
    };

    var ___getTypeName = Module["___getTypeName"] = function () {
      return (___getTypeName = Module["___getTypeName"] = Module["asm"]["Kf"]).apply(null, arguments);
    };

    var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function () {
      return (___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = Module["asm"]["Lf"]).apply(null, arguments);
    };

    var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function () {
      return (_emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = Module["asm"]["Mf"]).apply(null, arguments);
    };

    var _setThrew = Module["_setThrew"] = function () {
      return (_setThrew = Module["_setThrew"] = Module["asm"]["Nf"]).apply(null, arguments);
    };

    var _memalign = Module["_memalign"] = function () {
      return (_memalign = Module["_memalign"] = Module["asm"]["Of"]).apply(null, arguments);
    };

    var dynCall_v = Module["dynCall_v"] = function () {
      return (dynCall_v = Module["dynCall_v"] = Module["asm"]["Pf"]).apply(null, arguments);
    };

    var dynCall_vi = Module["dynCall_vi"] = function () {
      return (dynCall_vi = Module["dynCall_vi"] = Module["asm"]["Qf"]).apply(null, arguments);
    };

    var dynCall_vii = Module["dynCall_vii"] = function () {
      return (dynCall_vii = Module["dynCall_vii"] = Module["asm"]["Rf"]).apply(null, arguments);
    };

    var dynCall_viii = Module["dynCall_viii"] = function () {
      return (dynCall_viii = Module["dynCall_viii"] = Module["asm"]["Sf"]).apply(null, arguments);
    };

    var dynCall_viiii = Module["dynCall_viiii"] = function () {
      return (dynCall_viiii = Module["dynCall_viiii"] = Module["asm"]["Tf"]).apply(null, arguments);
    };

    var dynCall_viiiii = Module["dynCall_viiiii"] = function () {
      return (dynCall_viiiii = Module["dynCall_viiiii"] = Module["asm"]["Uf"]).apply(null, arguments);
    };

    var dynCall_viiiiii = Module["dynCall_viiiiii"] = function () {
      return (dynCall_viiiiii = Module["dynCall_viiiiii"] = Module["asm"]["Vf"]).apply(null, arguments);
    };

    var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function () {
      return (dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = Module["asm"]["Wf"]).apply(null, arguments);
    };

    var dynCall_ii = Module["dynCall_ii"] = function () {
      return (dynCall_ii = Module["dynCall_ii"] = Module["asm"]["Xf"]).apply(null, arguments);
    };

    var dynCall_iii = Module["dynCall_iii"] = function () {
      return (dynCall_iii = Module["dynCall_iii"] = Module["asm"]["Yf"]).apply(null, arguments);
    };

    var dynCall_iiii = Module["dynCall_iiii"] = function () {
      return (dynCall_iiii = Module["dynCall_iiii"] = Module["asm"]["Zf"]).apply(null, arguments);
    };

    var dynCall_iiiii = Module["dynCall_iiiii"] = function () {
      return (dynCall_iiiii = Module["dynCall_iiiii"] = Module["asm"]["_f"]).apply(null, arguments);
    };

    var dynCall_iiiiii = Module["dynCall_iiiiii"] = function () {
      return (dynCall_iiiiii = Module["dynCall_iiiiii"] = Module["asm"]["$f"]).apply(null, arguments);
    };

    var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function () {
      return (dynCall_iiiiiii = Module["dynCall_iiiiiii"] = Module["asm"]["ag"]).apply(null, arguments);
    };

    var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = function () {
      return (dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = Module["asm"]["bg"]).apply(null, arguments);
    };

    var stackSave = Module["stackSave"] = function () {
      return (stackSave = Module["stackSave"] = Module["asm"]["cg"]).apply(null, arguments);
    };

    var stackRestore = Module["stackRestore"] = function () {
      return (stackRestore = Module["stackRestore"] = Module["asm"]["dg"]).apply(null, arguments);
    };

    var dynCall_i = Module["dynCall_i"] = function () {
      return (dynCall_i = Module["dynCall_i"] = Module["asm"]["eg"]).apply(null, arguments);
    };

    var dynCall_vif = Module["dynCall_vif"] = function () {
      return (dynCall_vif = Module["dynCall_vif"] = Module["asm"]["fg"]).apply(null, arguments);
    };

    var dynCall_viffi = Module["dynCall_viffi"] = function () {
      return (dynCall_viffi = Module["dynCall_viffi"] = Module["asm"]["gg"]).apply(null, arguments);
    };

    var dynCall_viifi = Module["dynCall_viifi"] = function () {
      return (dynCall_viifi = Module["dynCall_viifi"] = Module["asm"]["hg"]).apply(null, arguments);
    };

    var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = function () {
      return (dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = Module["asm"]["ig"]).apply(null, arguments);
    };

    var dynCall_viifiiiiiiii = Module["dynCall_viifiiiiiiii"] = function () {
      return (dynCall_viifiiiiiiii = Module["dynCall_viifiiiiiiii"] = Module["asm"]["jg"]).apply(null, arguments);
    };

    var dynCall_viffiiiiiffiii = Module["dynCall_viffiiiiiffiii"] = function () {
      return (dynCall_viffiiiiiffiii = Module["dynCall_viffiiiiiffiii"] = Module["asm"]["kg"]).apply(null, arguments);
    };

    var dynCall_viififiiiiiiii = Module["dynCall_viififiiiiiiii"] = function () {
      return (dynCall_viififiiiiiiii = Module["dynCall_viififiiiiiiii"] = Module["asm"]["lg"]).apply(null, arguments);
    };

    var dynCall_viiffii = Module["dynCall_viiffii"] = function () {
      return (dynCall_viiffii = Module["dynCall_viiffii"] = Module["asm"]["mg"]).apply(null, arguments);
    };

    var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function () {
      return (dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = Module["asm"]["ng"]).apply(null, arguments);
    };

    var dynCall_vifffi = Module["dynCall_vifffi"] = function () {
      return (dynCall_vifffi = Module["dynCall_vifffi"] = Module["asm"]["og"]).apply(null, arguments);
    };

    var dynCall_viiff = Module["dynCall_viiff"] = function () {
      return (dynCall_viiff = Module["dynCall_viiff"] = Module["asm"]["pg"]).apply(null, arguments);
    };

    var dynCall_viiffi = Module["dynCall_viiffi"] = function () {
      return (dynCall_viiffi = Module["dynCall_viiffi"] = Module["asm"]["qg"]).apply(null, arguments);
    };

    var dynCall_viffffi = Module["dynCall_viffffi"] = function () {
      return (dynCall_viffffi = Module["dynCall_viffffi"] = Module["asm"]["rg"]).apply(null, arguments);
    };

    var dynCall_viiiifiii = Module["dynCall_viiiifiii"] = function () {
      return (dynCall_viiiifiii = Module["dynCall_viiiifiii"] = Module["asm"]["sg"]).apply(null, arguments);
    };

    var dynCall_viiiffii = Module["dynCall_viiiffii"] = function () {
      return (dynCall_viiiffii = Module["dynCall_viiiffii"] = Module["asm"]["tg"]).apply(null, arguments);
    };

    var dynCall_vifff = Module["dynCall_vifff"] = function () {
      return (dynCall_vifff = Module["dynCall_vifff"] = Module["asm"]["ug"]).apply(null, arguments);
    };

    var dynCall_viff = Module["dynCall_viff"] = function () {
      return (dynCall_viff = Module["dynCall_viff"] = Module["asm"]["vg"]).apply(null, arguments);
    };

    var dynCall_iifii = Module["dynCall_iifii"] = function () {
      return (dynCall_iifii = Module["dynCall_iifii"] = Module["asm"]["wg"]).apply(null, arguments);
    };

    var dynCall_vifii = Module["dynCall_vifii"] = function () {
      return (dynCall_vifii = Module["dynCall_vifii"] = Module["asm"]["xg"]).apply(null, arguments);
    };

    var dynCall_viif = Module["dynCall_viif"] = function () {
      return (dynCall_viif = Module["dynCall_viif"] = Module["asm"]["yg"]).apply(null, arguments);
    };

    var dynCall_fi = Module["dynCall_fi"] = function () {
      return (dynCall_fi = Module["dynCall_fi"] = Module["asm"]["zg"]).apply(null, arguments);
    };

    var dynCall_fii = Module["dynCall_fii"] = function () {
      return (dynCall_fii = Module["dynCall_fii"] = Module["asm"]["Ag"]).apply(null, arguments);
    };

    var dynCall_iiffii = Module["dynCall_iiffii"] = function () {
      return (dynCall_iiffii = Module["dynCall_iiffii"] = Module["asm"]["Bg"]).apply(null, arguments);
    };

    var dynCall_viffii = Module["dynCall_viffii"] = function () {
      return (dynCall_viffii = Module["dynCall_viffii"] = Module["asm"]["Cg"]).apply(null, arguments);
    };

    var dynCall_iiifi = Module["dynCall_iiifi"] = function () {
      return (dynCall_iiifi = Module["dynCall_iiifi"] = Module["asm"]["Dg"]).apply(null, arguments);
    };

    var dynCall_iif = Module["dynCall_iif"] = function () {
      return (dynCall_iif = Module["dynCall_iif"] = Module["asm"]["Eg"]).apply(null, arguments);
    };

    var dynCall_iiiif = Module["dynCall_iiiif"] = function () {
      return (dynCall_iiiif = Module["dynCall_iiiif"] = Module["asm"]["Fg"]).apply(null, arguments);
    };

    var dynCall_viiif = Module["dynCall_viiif"] = function () {
      return (dynCall_viiif = Module["dynCall_viiif"] = Module["asm"]["Gg"]).apply(null, arguments);
    };

    var dynCall_iiffi = Module["dynCall_iiffi"] = function () {
      return (dynCall_iiffi = Module["dynCall_iiffi"] = Module["asm"]["Hg"]).apply(null, arguments);
    };

    var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function () {
      return (dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = Module["asm"]["Ig"]).apply(null, arguments);
    };

    var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function () {
      return (dynCall_viiiiiii = Module["dynCall_viiiiiii"] = Module["asm"]["Jg"]).apply(null, arguments);
    };

    var dynCall_viifffffffffi = Module["dynCall_viifffffffffi"] = function () {
      return (dynCall_viifffffffffi = Module["dynCall_viifffffffffi"] = Module["asm"]["Kg"]).apply(null, arguments);
    };

    var dynCall_viffffii = Module["dynCall_viffffii"] = function () {
      return (dynCall_viffffii = Module["dynCall_viffffii"] = Module["asm"]["Lg"]).apply(null, arguments);
    };

    var dynCall_vifffiiff = Module["dynCall_vifffiiff"] = function () {
      return (dynCall_vifffiiff = Module["dynCall_vifffiiff"] = Module["asm"]["Mg"]).apply(null, arguments);
    };

    var dynCall_vifffff = Module["dynCall_vifffff"] = function () {
      return (dynCall_vifffff = Module["dynCall_vifffff"] = Module["asm"]["Ng"]).apply(null, arguments);
    };

    var dynCall_iiff = Module["dynCall_iiff"] = function () {
      return (dynCall_iiff = Module["dynCall_iiff"] = Module["asm"]["Og"]).apply(null, arguments);
    };

    var dynCall_viffffff = Module["dynCall_viffffff"] = function () {
      return (dynCall_viffffff = Module["dynCall_viffffff"] = Module["asm"]["Pg"]).apply(null, arguments);
    };

    var dynCall_viffff = Module["dynCall_viffff"] = function () {
      return (dynCall_viffff = Module["dynCall_viffff"] = Module["asm"]["Qg"]).apply(null, arguments);
    };

    var dynCall_vifffffffff = Module["dynCall_vifffffffff"] = function () {
      return (dynCall_vifffffffff = Module["dynCall_vifffffffff"] = Module["asm"]["Rg"]).apply(null, arguments);
    };

    var dynCall_iifff = Module["dynCall_iifff"] = function () {
      return (dynCall_iifff = Module["dynCall_iifff"] = Module["asm"]["Sg"]).apply(null, arguments);
    };

    var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = function () {
      return (dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = Module["asm"]["Tg"]).apply(null, arguments);
    };

    var dynCall_iiifiiiiiiii = Module["dynCall_iiifiiiiiiii"] = function () {
      return (dynCall_iiifiiiiiiii = Module["dynCall_iiifiiiiiiii"] = Module["asm"]["Ug"]).apply(null, arguments);
    };

    var dynCall_iiffiiiiiffiii = Module["dynCall_iiffiiiiiffiii"] = function () {
      return (dynCall_iiffiiiiiffiii = Module["dynCall_iiffiiiiiffiii"] = Module["asm"]["Vg"]).apply(null, arguments);
    };

    var dynCall_iiififiiiiiiii = Module["dynCall_iiififiiiiiiii"] = function () {
      return (dynCall_iiififiiiiiiii = Module["dynCall_iiififiiiiiiii"] = Module["asm"]["Wg"]).apply(null, arguments);
    };

    var dynCall_viifffi = Module["dynCall_viifffi"] = function () {
      return (dynCall_viifffi = Module["dynCall_viifffi"] = Module["asm"]["Xg"]).apply(null, arguments);
    };

    var dynCall_viiiff = Module["dynCall_viiiff"] = function () {
      return (dynCall_viiiff = Module["dynCall_viiiff"] = Module["asm"]["Yg"]).apply(null, arguments);
    };

    var dynCall_viiiffi = Module["dynCall_viiiffi"] = function () {
      return (dynCall_viiiffi = Module["dynCall_viiiffi"] = Module["asm"]["Zg"]).apply(null, arguments);
    };

    var dynCall_viiffffi = Module["dynCall_viiffffi"] = function () {
      return (dynCall_viiffffi = Module["dynCall_viiffffi"] = Module["asm"]["_g"]).apply(null, arguments);
    };

    var dynCall_viiiiifiii = Module["dynCall_viiiiifiii"] = function () {
      return (dynCall_viiiiifiii = Module["dynCall_viiiiifiii"] = Module["asm"]["$g"]).apply(null, arguments);
    };

    var dynCall_viiiiffii = Module["dynCall_viiiiffii"] = function () {
      return (dynCall_viiiiffii = Module["dynCall_viiiiffii"] = Module["asm"]["ah"]).apply(null, arguments);
    };

    var dynCall_viifff = Module["dynCall_viifff"] = function () {
      return (dynCall_viifff = Module["dynCall_viifff"] = Module["asm"]["bh"]).apply(null, arguments);
    };

    var dynCall_iiif = Module["dynCall_iiif"] = function () {
      return (dynCall_iiif = Module["dynCall_iiif"] = Module["asm"]["ch"]).apply(null, arguments);
    };

    var dynCall_iiiffi = Module["dynCall_iiiffi"] = function () {
      return (dynCall_iiiffi = Module["dynCall_iiiffi"] = Module["asm"]["dh"]).apply(null, arguments);
    };

    var dynCall_iiifff = Module["dynCall_iiifff"] = function () {
      return (dynCall_iiifff = Module["dynCall_iiifff"] = Module["asm"]["eh"]).apply(null, arguments);
    };

    var dynCall_fiii = Module["dynCall_fiii"] = function () {
      return (dynCall_fiii = Module["dynCall_fiii"] = Module["asm"]["fh"]).apply(null, arguments);
    };

    var dynCall_viiifffffffffi = Module["dynCall_viiifffffffffi"] = function () {
      return (dynCall_viiifffffffffi = Module["dynCall_viiifffffffffi"] = Module["asm"]["gh"]).apply(null, arguments);
    };

    var dynCall_viiffffii = Module["dynCall_viiffffii"] = function () {
      return (dynCall_viiffffii = Module["dynCall_viiffffii"] = Module["asm"]["hh"]).apply(null, arguments);
    };

    var dynCall_viifffiiff = Module["dynCall_viifffiiff"] = function () {
      return (dynCall_viifffiiff = Module["dynCall_viifffiiff"] = Module["asm"]["ih"]).apply(null, arguments);
    };

    var dynCall_viifffff = Module["dynCall_viifffff"] = function () {
      return (dynCall_viifffff = Module["dynCall_viifffff"] = Module["asm"]["jh"]).apply(null, arguments);
    };

    var dynCall_iiiff = Module["dynCall_iiiff"] = function () {
      return (dynCall_iiiff = Module["dynCall_iiiff"] = Module["asm"]["kh"]).apply(null, arguments);
    };

    var dynCall_viiffffff = Module["dynCall_viiffffff"] = function () {
      return (dynCall_viiffffff = Module["dynCall_viiffffff"] = Module["asm"]["lh"]).apply(null, arguments);
    };

    var dynCall_viiffff = Module["dynCall_viiffff"] = function () {
      return (dynCall_viiffff = Module["dynCall_viiffff"] = Module["asm"]["mh"]).apply(null, arguments);
    };

    var dynCall_viifffffffff = Module["dynCall_viifffffffff"] = function () {
      return (dynCall_viifffffffff = Module["dynCall_viifffffffff"] = Module["asm"]["nh"]).apply(null, arguments);
    };

    var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function () {
      return (dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = Module["asm"]["oh"]).apply(null, arguments);
    };

    var dynCall_vidi = Module["dynCall_vidi"] = function () {
      return (dynCall_vidi = Module["dynCall_vidi"] = Module["asm"]["ph"]).apply(null, arguments);
    };

    var dynCall_vid = Module["dynCall_vid"] = function () {
      return (dynCall_vid = Module["dynCall_vid"] = Module["asm"]["qh"]).apply(null, arguments);
    };

    var dynCall_viidi = Module["dynCall_viidi"] = function () {
      return (dynCall_viidi = Module["dynCall_viidi"] = Module["asm"]["rh"]).apply(null, arguments);
    };

    var dynCall_viid = Module["dynCall_viid"] = function () {
      return (dynCall_viid = Module["dynCall_viid"] = Module["asm"]["sh"]).apply(null, arguments);
    };

    var dynCall_di = Module["dynCall_di"] = function () {
      return (dynCall_di = Module["dynCall_di"] = Module["asm"]["th"]).apply(null, arguments);
    };

    var dynCall_dii = Module["dynCall_dii"] = function () {
      return (dynCall_dii = Module["dynCall_dii"] = Module["asm"]["uh"]).apply(null, arguments);
    };

    var dynCall_iiid = Module["dynCall_iiid"] = function () {
      return (dynCall_iiid = Module["dynCall_iiid"] = Module["asm"]["vh"]).apply(null, arguments);
    };

    var dynCall_fiiiiii = Module["dynCall_fiiiiii"] = function () {
      return (dynCall_fiiiiii = Module["dynCall_fiiiiii"] = Module["asm"]["wh"]).apply(null, arguments);
    };

    var dynCall_viiiiiff = Module["dynCall_viiiiiff"] = function () {
      return (dynCall_viiiiiff = Module["dynCall_viiiiiff"] = Module["asm"]["xh"]).apply(null, arguments);
    };

    var dynCall_viiiiifiiiiii = Module["dynCall_viiiiifiiiiii"] = function () {
      return (dynCall_viiiiifiiiiii = Module["dynCall_viiiiifiiiiii"] = Module["asm"]["yh"]).apply(null, arguments);
    };

    var dynCall_iiifii = Module["dynCall_iiifii"] = function () {
      return (dynCall_iiifii = Module["dynCall_iiifii"] = Module["asm"]["zh"]).apply(null, arguments);
    };

    var dynCall_viiiiifi = Module["dynCall_viiiiifi"] = function () {
      return (dynCall_viiiiifi = Module["dynCall_viiiiifi"] = Module["asm"]["Ah"]).apply(null, arguments);
    };

    var dynCall_viiiiiiifi = Module["dynCall_viiiiiiifi"] = function () {
      return (dynCall_viiiiiiifi = Module["dynCall_viiiiiiifi"] = Module["asm"]["Bh"]).apply(null, arguments);
    };

    var dynCall_viiiiiiiiifi = Module["dynCall_viiiiiiiiifi"] = function () {
      return (dynCall_viiiiiiiiifi = Module["dynCall_viiiiiiiiifi"] = Module["asm"]["Ch"]).apply(null, arguments);
    };

    var dynCall_ji = Module["dynCall_ji"] = function () {
      return (dynCall_ji = Module["dynCall_ji"] = Module["asm"]["Dh"]).apply(null, arguments);
    };

    var dynCall_iiji = Module["dynCall_iiji"] = function () {
      return (dynCall_iiji = Module["dynCall_iiji"] = Module["asm"]["Eh"]).apply(null, arguments);
    };

    var dynCall_iijjiii = Module["dynCall_iijjiii"] = function () {
      return (dynCall_iijjiii = Module["dynCall_iijjiii"] = Module["asm"]["Fh"]).apply(null, arguments);
    };

    var dynCall_iij = Module["dynCall_iij"] = function () {
      return (dynCall_iij = Module["dynCall_iij"] = Module["asm"]["Gh"]).apply(null, arguments);
    };

    var dynCall_vijjjii = Module["dynCall_vijjjii"] = function () {
      return (dynCall_vijjjii = Module["dynCall_vijjjii"] = Module["asm"]["Hh"]).apply(null, arguments);
    };

    var dynCall_viiiiiiiiiifi = Module["dynCall_viiiiiiiiiifi"] = function () {
      return (dynCall_viiiiiiiiiifi = Module["dynCall_viiiiiiiiiifi"] = Module["asm"]["Ih"]).apply(null, arguments);
    };

    var dynCall_viifii = Module["dynCall_viifii"] = function () {
      return (dynCall_viifii = Module["dynCall_viifii"] = Module["asm"]["Jh"]).apply(null, arguments);
    };

    var dynCall_viiiiiiiiiiii = Module["dynCall_viiiiiiiiiiii"] = function () {
      return (dynCall_viiiiiiiiiiii = Module["dynCall_viiiiiiiiiiii"] = Module["asm"]["Kh"]).apply(null, arguments);
    };

    var dynCall_iidi = Module["dynCall_iidi"] = function () {
      return (dynCall_iidi = Module["dynCall_iidi"] = Module["asm"]["Lh"]).apply(null, arguments);
    };

    var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = function () {
      return (dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = Module["asm"]["Mh"]).apply(null, arguments);
    };

    var dynCall_viji = Module["dynCall_viji"] = function () {
      return (dynCall_viji = Module["dynCall_viji"] = Module["asm"]["Nh"]).apply(null, arguments);
    };

    var dynCall_vijiii = Module["dynCall_vijiii"] = function () {
      return (dynCall_vijiii = Module["dynCall_vijiii"] = Module["asm"]["Oh"]).apply(null, arguments);
    };

    var dynCall_fffff = Module["dynCall_fffff"] = function () {
      return (dynCall_fffff = Module["dynCall_fffff"] = Module["asm"]["Ph"]).apply(null, arguments);
    };

    var dynCall_viiiiij = Module["dynCall_viiiiij"] = function () {
      return (dynCall_viiiiij = Module["dynCall_viiiiij"] = Module["asm"]["Qh"]).apply(null, arguments);
    };

    var dynCall_fiff = Module["dynCall_fiff"] = function () {
      return (dynCall_fiff = Module["dynCall_fiff"] = Module["asm"]["Rh"]).apply(null, arguments);
    };

    var dynCall_viiiiiffii = Module["dynCall_viiiiiffii"] = function () {
      return (dynCall_viiiiiffii = Module["dynCall_viiiiiffii"] = Module["asm"]["Sh"]).apply(null, arguments);
    };

    var dynCall_viifd = Module["dynCall_viifd"] = function () {
      return (dynCall_viifd = Module["dynCall_viifd"] = Module["asm"]["Th"]).apply(null, arguments);
    };

    var dynCall_viddi = Module["dynCall_viddi"] = function () {
      return (dynCall_viddi = Module["dynCall_viddi"] = Module["asm"]["Uh"]).apply(null, arguments);
    };

    var dynCall_viiiiffi = Module["dynCall_viiiiffi"] = function () {
      return (dynCall_viiiiffi = Module["dynCall_viiiiffi"] = Module["asm"]["Vh"]).apply(null, arguments);
    };

    var dynCall_viiiiif = Module["dynCall_viiiiif"] = function () {
      return (dynCall_viiiiif = Module["dynCall_viiiiif"] = Module["asm"]["Wh"]).apply(null, arguments);
    };

    var dynCall_viijii = Module["dynCall_viijii"] = function () {
      return (dynCall_viijii = Module["dynCall_viijii"] = Module["asm"]["Xh"]).apply(null, arguments);
    };

    var dynCall_fif = Module["dynCall_fif"] = function () {
      return (dynCall_fif = Module["dynCall_fif"] = Module["asm"]["Yh"]).apply(null, arguments);
    };

    var dynCall_fiifi = Module["dynCall_fiifi"] = function () {
      return (dynCall_fiifi = Module["dynCall_fiifi"] = Module["asm"]["Zh"]).apply(null, arguments);
    };

    var dynCall_jii = Module["dynCall_jii"] = function () {
      return (dynCall_jii = Module["dynCall_jii"] = Module["asm"]["_h"]).apply(null, arguments);
    };

    var dynCall_vijii = Module["dynCall_vijii"] = function () {
      return (dynCall_vijii = Module["dynCall_vijii"] = Module["asm"]["$h"]).apply(null, arguments);
    };

    var dynCall_viiiiff = Module["dynCall_viiiiff"] = function () {
      return (dynCall_viiiiff = Module["dynCall_viiiiff"] = Module["asm"]["ai"]).apply(null, arguments);
    };

    var dynCall_vffff = Module["dynCall_vffff"] = function () {
      return (dynCall_vffff = Module["dynCall_vffff"] = Module["asm"]["bi"]).apply(null, arguments);
    };

    var dynCall_vf = Module["dynCall_vf"] = function () {
      return (dynCall_vf = Module["dynCall_vf"] = Module["asm"]["ci"]).apply(null, arguments);
    };

    var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = function () {
      return (dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = Module["asm"]["di"]).apply(null, arguments);
    };

    var dynCall_iiiij = Module["dynCall_iiiij"] = function () {
      return (dynCall_iiiij = Module["dynCall_iiiij"] = Module["asm"]["ei"]).apply(null, arguments);
    };

    var dynCall_viiij = Module["dynCall_viiij"] = function () {
      return (dynCall_viiij = Module["dynCall_viiij"] = Module["asm"]["fi"]).apply(null, arguments);
    };

    var dynCall_vij = Module["dynCall_vij"] = function () {
      return (dynCall_vij = Module["dynCall_vij"] = Module["asm"]["gi"]).apply(null, arguments);
    };

    var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = function () {
      return (dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = Module["asm"]["hi"]).apply(null, arguments);
    };

    var dynCall_jiiii = Module["dynCall_jiiii"] = function () {
      return (dynCall_jiiii = Module["dynCall_jiiii"] = Module["asm"]["ii"]).apply(null, arguments);
    };

    var dynCall_jiiiiii = Module["dynCall_jiiiiii"] = function () {
      return (dynCall_jiiiiii = Module["dynCall_jiiiiii"] = Module["asm"]["ji"]).apply(null, arguments);
    };

    var dynCall_iijj = Module["dynCall_iijj"] = function () {
      return (dynCall_iijj = Module["dynCall_iijj"] = Module["asm"]["ki"]).apply(null, arguments);
    };

    var dynCall_iidiiii = Module["dynCall_iidiiii"] = function () {
      return (dynCall_iidiiii = Module["dynCall_iidiiii"] = Module["asm"]["li"]).apply(null, arguments);
    };

    var dynCall_jiji = Module["dynCall_jiji"] = function () {
      return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["mi"]).apply(null, arguments);
    };

    var dynCall_iiiiij = Module["dynCall_iiiiij"] = function () {
      return (dynCall_iiiiij = Module["dynCall_iiiiij"] = Module["asm"]["ni"]).apply(null, arguments);
    };

    var dynCall_iiiiid = Module["dynCall_iiiiid"] = function () {
      return (dynCall_iiiiid = Module["dynCall_iiiiid"] = Module["asm"]["oi"]).apply(null, arguments);
    };

    var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = function () {
      return (dynCall_iiiiijj = Module["dynCall_iiiiijj"] = Module["asm"]["pi"]).apply(null, arguments);
    };

    var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = function () {
      return (dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = Module["asm"]["qi"]).apply(null, arguments);
    };

    var dynCall_vff = Module["dynCall_vff"] = function () {
      return (dynCall_vff = Module["dynCall_vff"] = Module["asm"]["ri"]).apply(null, arguments);
    };

    var dynCall_vfi = Module["dynCall_vfi"] = function () {
      return (dynCall_vfi = Module["dynCall_vfi"] = Module["asm"]["si"]).apply(null, arguments);
    };

    function invoke_ii(index, a1) {
      var sp = stackSave();

      try {
        return dynCall_ii(index, a1);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_iii(index, a1, a2) {
      var sp = stackSave();

      try {
        return dynCall_iii(index, a1, a2);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_vii(index, a1, a2) {
      var sp = stackSave();

      try {
        dynCall_vii(index, a1, a2);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_iiii(index, a1, a2, a3) {
      var sp = stackSave();

      try {
        return dynCall_iiii(index, a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_vi(index, a1) {
      var sp = stackSave();

      try {
        dynCall_vi(index, a1);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_viii(index, a1, a2, a3) {
      var sp = stackSave();

      try {
        dynCall_viii(index, a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();

      try {
        return dynCall_iiiiii(index, a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_viiii(index, a1, a2, a3, a4) {
      var sp = stackSave();

      try {
        dynCall_viiii(index, a1, a2, a3, a4);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
      var sp = stackSave();

      try {
        return dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_viiiii(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();

      try {
        dynCall_viiiii(index, a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_iiiii(index, a1, a2, a3, a4) {
      var sp = stackSave();

      try {
        return dynCall_iiiii(index, a1, a2, a3, a4);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
      var sp = stackSave();

      try {
        dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
      var sp = stackSave();

      try {
        dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
      var sp = stackSave();

      try {
        return dynCall_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    function invoke_v(index) {
      var sp = stackSave();

      try {
        dynCall_v(index);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0 && e !== "longjmp") throw e;

        _setThrew(1, 0);
      }
    }

    Module["asm"] = asm;
    var calledRun;

    function ExitStatus(status) {
      this.name = "ExitStatus";
      this.message = "Program terminated with exit(" + status + ")";
      this.status = status;
    }

    dependenciesFulfilled = function runCaller() {
      if (!calledRun) run();
      if (!calledRun) dependenciesFulfilled = runCaller;
    };

    function run(args) {
      args = args || arguments_;

      if (runDependencies > 0) {
        return;
      }

      preRun();
      if (runDependencies > 0) return;

      function doRun() {
        if (calledRun) return;
        calledRun = true;
        Module["calledRun"] = true;
        if (ABORT) return;
        initRuntime();
        preMain();
        readyPromiseResolve(Module);
        if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
        postRun();
      }

      if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout(function () {
          setTimeout(function () {
            Module["setStatus"]("");
          }, 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
    }

    Module["run"] = run;

    function exit(status, implicit) {
      if (implicit && noExitRuntime && status === 0) {
        return;
      }

      if (noExitRuntime) {} else {
        ABORT = true;
        EXITSTATUS = status;
        exitRuntime();
        if (Module["onExit"]) Module["onExit"](status);
      }

      quit_(status, new ExitStatus(status));
    }

    if (Module["preInit"]) {
      if (typeof Module["preInit"] == "function") Module["preInit"] = [Module["preInit"]];

      while (Module["preInit"].length > 0) {
        Module["preInit"].pop()();
      }
    }

    noExitRuntime = true;
    run();
    return CanvasKitInit.ready;
  };
}();

if (true) module.exports = CanvasKitInit;else {}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../greenfield/client-demos/react-canvaskit/node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../../greenfield/client-demos/react-canvaskit/node_modules/process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../greenfield/client-demos/react-canvaskit/node_modules/timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "../../../canvaskit-oc/es/index.js":
/*!***********************************************!*\
  !*** /home/erik/git/canvaskit-oc/es/index.js ***!
  \***********************************************/
/*! exports provided: init */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function() { return init; });
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../package.json */ "../../../canvaskit-oc/package.json");
var _package_json__WEBPACK_IMPORTED_MODULE_0___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../package.json */ "../../../canvaskit-oc/package.json", 1);
/* harmony import */ var _canvaskitoc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./canvaskitoc */ "../../../canvaskit-oc/es/canvaskitoc.js");
/* harmony import */ var _canvaskitoc__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_canvaskitoc__WEBPACK_IMPORTED_MODULE_1__);


function init(wasmLibURL) {
  return wasmLibURL ? _canvaskitoc__WEBPACK_IMPORTED_MODULE_1___default()({
    locateFile: function locateFile() {
      return wasmLibURL;
    }
  }) : _canvaskitoc__WEBPACK_IMPORTED_MODULE_1___default()({
    locateFile: function locateFile() {
      return "https://unpkg.com/canvaskit-oc@" + _package_json__WEBPACK_IMPORTED_MODULE_0__.version + "/lib/canvaskit.wasm";
    }
  });
}

/***/ }),

/***/ "../../../canvaskit-oc/package.json":
/*!************************************************!*\
  !*** /home/erik/git/canvaskit-oc/package.json ***!
  \************************************************/
/*! exports provided: name, version, description, main, module, files, scripts, repository, author, license, private, dependencies, devDependencies, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"canvaskit-oc\",\"version\":\"0.0.1-alpha.1\",\"description\":\"Fork of Skia's canvaskit with changes to support offscreen canvas, releases kept in sync with upstream.\",\"main\":\"lib/index.js\",\"module\":\"es/index.js\",\"files\":[\"es\",\"lib\",\"index.d.ts\"],\"scripts\":{\"build\":\"nwb build-web-module --copy-files\",\"clean\":\"nwb clean-web-module\",\"prepublishOnly\":\"npm run build\"},\"repository\":\"git@github.com:udevbe/canvaskit-oc.git\",\"author\":\"Erik De Rijcke\",\"license\":\"BSD-3-Clause\",\"private\":false,\"dependencies\":{},\"devDependencies\":{\"nwb\":\"0.25.2\"}}");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};
  var has = Function.call.bind(Object.prototype.hasOwnProperty);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (true) {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./node_modules/react-canvaskit/dist/CkCanvas.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/CkCanvas.js ***!
  \*******************************************************/
/*! exports provided: CkCanvas, isCkCanvas, createCkCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CkCanvas", function() { return CkCanvas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCkCanvas", function() { return isCkCanvas; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCkCanvas", function() { return createCkCanvas; });
/* harmony import */ var _CkSurface__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CkSurface */ "./node_modules/react-canvaskit/dist/CkSurface.js");
/* harmony import */ var _SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SkiaElementMapping */ "./node_modules/react-canvaskit/dist/SkiaElementMapping.js");


class CkCanvas {
    constructor(canvasKit, props) {
        this.skObjectType = 'SkCanvas';
        this.type = 'ck-canvas';
        this.children = [];
        this.deleted = false;
        this.canvasKit = canvasKit;
        this.props = props;
    }
    render(parent) {
        if (this.deleted) {
            throw new Error('BUG. canvas element deleted.');
        }
        if (parent.skObject && Object(_CkSurface__WEBPACK_IMPORTED_MODULE_0__["isCkSurface"])(parent)) {
            if (this.skObject === undefined) {
                this.skObject = parent.skObject.getCanvas();
            }
        }
        else {
            throw new Error('Expected an initialized ck-surface as parent of ck-canvas');
        }
        this.skObject.save();
        this.drawSelf(this.skObject);
        this.children.forEach(child => child.render(this));
        this.skObject.restore();
        this.skObject.flush();
    }
    drawSelf(skCanvas) {
        const skColor = Object(_SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__["toSkColor"])(this.canvasKit, this.props.clear);
        if (skColor) {
            skCanvas.clear(skColor);
        }
        if (this.props.rotate) {
            const { degree, px, py } = this.props.rotate;
            skCanvas.rotate(degree, px !== null && px !== void 0 ? px : 0, py !== null && py !== void 0 ? py : 0);
        }
    }
    delete() {
        if (this.deleted) {
            return;
        }
        this.deleted = true;
        // The canvas object is 1-to-1 linked to the parent surface object, so deleting it means we could never recreate it.
        // this.skObject?.delete()
        this.skObject = undefined;
    }
}
function isCkCanvas(ckElement) {
    return ckElement.type === 'ck-canvas';
}
const createCkCanvas = (type, props, canvasKit) => new CkCanvas(canvasKit, props);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2tDYW52YXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQ2tDYW52YXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFrQmhELE1BQU0sT0FBTyxRQUFRO0lBVW5CLFlBQ0UsU0FBb0IsRUFDcEIsS0FBMkM7UUFScEMsaUJBQVksR0FBd0MsVUFBVSxDQUFBO1FBQzlELFNBQUksR0FBZ0IsV0FBVyxDQUFBO1FBQ3hDLGFBQVEsR0FBb0IsRUFBRSxDQUFBO1FBRXRCLFlBQU8sR0FBRyxLQUFLLENBQUE7UUFNckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7UUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBRSxNQUErQjtRQUNyQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFBO1NBQ2hEO1FBRUQsSUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMxQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO2dCQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUE7YUFDNUM7U0FDRjthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFBO1NBQzdFO1FBRUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDdkIsQ0FBQztJQUVPLFFBQVEsQ0FBRSxRQUFrQjtRQUNsQyxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzNELElBQUksT0FBTyxFQUFFO1lBQ1gsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUN4QjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDckIsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUE7WUFDNUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxhQUFGLEVBQUUsY0FBRixFQUFFLEdBQUksQ0FBQyxFQUFFLEVBQUUsYUFBRixFQUFFLGNBQUYsRUFBRSxHQUFJLENBQUMsQ0FBQyxDQUFBO1NBQzFDO0lBQ0gsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTTtTQUNQO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFDbkIsb0hBQW9IO1FBQ3BILDBCQUEwQjtRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQTtJQUMzQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFFLFNBQXlCO0lBQ25ELE9BQU8sU0FBUyxDQUFDLElBQUksS0FBSyxXQUFXLENBQUE7QUFDdkMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FDekIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQW9CLEVBQW1DLEVBQUUsQ0FDckUsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDYW52YXNLaXQsIFNrQ2FudmFzIH0gZnJvbSAnY2FudmFza2l0LW9jJ1xuaW1wb3J0IHR5cGUgeyBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGlzQ2tTdXJmYWNlIH0gZnJvbSAnLi9Da1N1cmZhY2UnXG5pbXBvcnQgeyB0b1NrQ29sb3IgfSBmcm9tICcuL1NraWFFbGVtZW50TWFwcGluZydcbmltcG9ydCB7XG4gIENrRWxlbWVudCxcbiAgQ2tFbGVtZW50Q29udGFpbmVyLFxuICBDa0VsZW1lbnRDcmVhdG9yLFxuICBDa0VsZW1lbnRQcm9wcyxcbiAgQ2tPYmplY3RUeXBpbmcsXG4gIENvbG9yXG59IGZyb20gJy4vU2tpYUVsZW1lbnRUeXBlcydcblxuZXhwb3J0IGludGVyZmFjZSBDa0NhbnZhc1Byb3BzIGV4dGVuZHMgQ2tFbGVtZW50UHJvcHM8U2tDYW52YXM+IHtcbiAgY2xlYXI/OiBDb2xvciB8IHN0cmluZ1xuICByb3RhdGU/OiB7IGRlZ3JlZTogbnVtYmVyLCBweD86IG51bWJlciwgcHk/OiBudW1iZXIgfVxuICBjaGlsZHJlbj86IFJlYWN0Tm9kZVxufVxuXG50eXBlIENrQ2FudmFzQ2hpbGQgPSBDa0VsZW1lbnQ8J2NrLXN1cmZhY2UnPiB8IENrRWxlbWVudDwnY2stdGV4dCc+XG5cbmV4cG9ydCBjbGFzcyBDa0NhbnZhcyBpbXBsZW1lbnRzIENrRWxlbWVudENvbnRhaW5lcjwnY2stY2FudmFzJz4ge1xuICByZWFkb25seSBjYW52YXNLaXQ6IENhbnZhc0tpdFxuICByZWFkb25seSBwcm9wczogQ2tPYmplY3RUeXBpbmdbJ2NrLWNhbnZhcyddWydwcm9wcyddXG4gIHNrT2JqZWN0PzogQ2tPYmplY3RUeXBpbmdbJ2NrLWNhbnZhcyddWyd0eXBlJ11cbiAgcmVhZG9ubHkgc2tPYmplY3RUeXBlOiBDa09iamVjdFR5cGluZ1snY2stY2FudmFzJ11bJ25hbWUnXSA9ICdTa0NhbnZhcydcbiAgcmVhZG9ubHkgdHlwZTogJ2NrLWNhbnZhcycgPSAnY2stY2FudmFzJ1xuICBjaGlsZHJlbjogQ2tDYW52YXNDaGlsZFtdID0gW11cblxuICBwcml2YXRlIGRlbGV0ZWQgPSBmYWxzZVxuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBjYW52YXNLaXQ6IENhbnZhc0tpdCxcbiAgICBwcm9wczogQ2tPYmplY3RUeXBpbmdbJ2NrLWNhbnZhcyddWydwcm9wcyddXG4gICkge1xuICAgIHRoaXMuY2FudmFzS2l0ID0gY2FudmFzS2l0XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzXG4gIH1cblxuICByZW5kZXIgKHBhcmVudDogQ2tFbGVtZW50Q29udGFpbmVyPGFueT4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZWxldGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JVRy4gY2FudmFzIGVsZW1lbnQgZGVsZXRlZC4nKVxuICAgIH1cblxuICAgIGlmIChwYXJlbnQuc2tPYmplY3QgJiYgaXNDa1N1cmZhY2UocGFyZW50KSkge1xuICAgICAgaWYgKHRoaXMuc2tPYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnNrT2JqZWN0ID0gcGFyZW50LnNrT2JqZWN0LmdldENhbnZhcygpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYW4gaW5pdGlhbGl6ZWQgY2stc3VyZmFjZSBhcyBwYXJlbnQgb2YgY2stY2FudmFzJylcbiAgICB9XG5cbiAgICB0aGlzLnNrT2JqZWN0LnNhdmUoKVxuICAgIHRoaXMuZHJhd1NlbGYodGhpcy5za09iamVjdClcbiAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gY2hpbGQucmVuZGVyKHRoaXMpKVxuICAgIHRoaXMuc2tPYmplY3QucmVzdG9yZSgpXG4gICAgdGhpcy5za09iamVjdC5mbHVzaCgpXG4gIH1cblxuICBwcml2YXRlIGRyYXdTZWxmIChza0NhbnZhczogU2tDYW52YXMpIHtcbiAgICBjb25zdCBza0NvbG9yID0gdG9Ta0NvbG9yKHRoaXMuY2FudmFzS2l0LCB0aGlzLnByb3BzLmNsZWFyKVxuICAgIGlmIChza0NvbG9yKSB7XG4gICAgICBza0NhbnZhcy5jbGVhcihza0NvbG9yKVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnJvdGF0ZSkge1xuICAgICAgY29uc3QgeyBkZWdyZWUsIHB4LCBweSB9ID0gdGhpcy5wcm9wcy5yb3RhdGVcbiAgICAgIHNrQ2FudmFzLnJvdGF0ZShkZWdyZWUsIHB4ID8/IDAsIHB5ID8/IDApXG4gICAgfVxuICB9XG5cbiAgZGVsZXRlICgpIHtcbiAgICBpZiAodGhpcy5kZWxldGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5kZWxldGVkID0gdHJ1ZVxuICAgIC8vIFRoZSBjYW52YXMgb2JqZWN0IGlzIDEtdG8tMSBsaW5rZWQgdG8gdGhlIHBhcmVudCBzdXJmYWNlIG9iamVjdCwgc28gZGVsZXRpbmcgaXQgbWVhbnMgd2UgY291bGQgbmV2ZXIgcmVjcmVhdGUgaXQuXG4gICAgLy8gdGhpcy5za09iamVjdD8uZGVsZXRlKClcbiAgICB0aGlzLnNrT2JqZWN0ID0gdW5kZWZpbmVkXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2tDYW52YXMgKGNrRWxlbWVudDogQ2tFbGVtZW50PGFueT4pOiBja0VsZW1lbnQgaXMgQ2tDYW52YXMge1xuICByZXR1cm4gY2tFbGVtZW50LnR5cGUgPT09ICdjay1jYW52YXMnXG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDa0NhbnZhczogQ2tFbGVtZW50Q3JlYXRvcjwnY2stY2FudmFzJz4gPVxuICAodHlwZSwgcHJvcHMsIGNhbnZhc0tpdDogQ2FudmFzS2l0KTogQ2tFbGVtZW50Q29udGFpbmVyPCdjay1jYW52YXMnPiA9PlxuICAgIG5ldyBDa0NhbnZhcyhjYW52YXNLaXQsIHByb3BzKVxuIl19

/***/ }),

/***/ "./node_modules/react-canvaskit/dist/CkLine.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/CkLine.js ***!
  \*****************************************************/
/*! exports provided: createCkLine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCkLine", function() { return createCkLine; });
/* harmony import */ var _CkCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CkCanvas */ "./node_modules/react-canvaskit/dist/CkCanvas.js");
/* harmony import */ var _SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SkiaElementMapping */ "./node_modules/react-canvaskit/dist/SkiaElementMapping.js");


class CkLine {
    constructor(canvasKit, props) {
        this.skObjectType = 'Line';
        this.type = 'ck-line';
        this.deleted = false;
        this.canvasKit = canvasKit;
        this.props = props;
        this.defaultPaint = new this.canvasKit.SkPaint();
        this.defaultPaint.setStyle(this.canvasKit.PaintStyle.Fill);
        this.defaultPaint.setAntiAlias(true);
    }
    render(parent) {
        var _a, _b, _c;
        if (this.deleted) {
            throw new Error('BUG. line element deleted.');
        }
        if (parent && Object(_CkCanvas__WEBPACK_IMPORTED_MODULE_0__["isCkCanvas"])(parent)) {
            // TODO we can be smart and only recreate the paint object if the paint props have changed.
            (_a = this.renderPaint) === null || _a === void 0 ? void 0 : _a.delete();
            this.renderPaint = Object(_SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__["toSkPaint"])(this.canvasKit, this.props.paint);
            (_b = parent.skObject) === null || _b === void 0 ? void 0 : _b.drawLine(this.props.x1, this.props.y1, this.props.x2, this.props.y2, (_c = this.renderPaint) !== null && _c !== void 0 ? _c : this.defaultPaint);
        }
    }
    delete() {
        var _a;
        if (this.deleted) {
            return;
        }
        this.deleted = true;
        this.defaultPaint.delete();
        (_a = this.renderPaint) === null || _a === void 0 ? void 0 : _a.delete();
    }
}
const createCkLine = (type, props, canvasKit) => new CkLine(canvasKit, props);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2tMaW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0NrTGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQWtCaEQsTUFBTSxNQUFNO0lBVVYsWUFDRSxTQUFvQixFQUNwQixLQUF5QztRQVRsQyxpQkFBWSxHQUFzQyxNQUFNLENBQUE7UUFDeEQsU0FBSSxHQUFjLFNBQVMsQ0FBQTtRQUlwQyxZQUFPLEdBQUcsS0FBSyxDQUFBO1FBTWIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7UUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFFbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDaEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDMUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVELE1BQU0sQ0FBRSxNQUErQjs7UUFDckMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtTQUM5QztRQUNELElBQUksTUFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNoQywyRkFBMkY7WUFDM0YsTUFBQSxJQUFJLENBQUMsV0FBVywwQ0FBRSxNQUFNLEdBQUU7WUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQzlELE1BQUEsTUFBTSxDQUFDLFFBQVEsMENBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFFLElBQUksQ0FBQyxXQUFXLG1DQUFJLElBQUksQ0FBQyxZQUFZLEVBQUM7U0FDN0g7SUFDSCxDQUFDO0lBRUQsTUFBTTs7UUFDSixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTTtTQUNQO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUMxQixNQUFBLElBQUksQ0FBQyxXQUFXLDBDQUFFLE1BQU0sR0FBRTtJQUM1QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQWdDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2FudmFzS2l0LCBTa1BhaW50IH0gZnJvbSAnY2FudmFza2l0LW9jJ1xuaW1wb3J0IHsgaXNDa0NhbnZhcyB9IGZyb20gJy4vQ2tDYW52YXMnXG5pbXBvcnQgeyB0b1NrUGFpbnQgfSBmcm9tICcuL1NraWFFbGVtZW50TWFwcGluZydcbmltcG9ydCB7XG4gIENrRWxlbWVudCxcbiAgQ2tFbGVtZW50Q29udGFpbmVyLFxuICBDa0VsZW1lbnRDcmVhdG9yLFxuICBDa0VsZW1lbnRQcm9wcyxcbiAgQ2tPYmplY3RUeXBpbmcsXG4gIFBhaW50XG59IGZyb20gJy4vU2tpYUVsZW1lbnRUeXBlcydcblxuZXhwb3J0IGludGVyZmFjZSBDa0xpbmVQcm9wcyBleHRlbmRzIENrRWxlbWVudFByb3BzPG5ldmVyPiB7XG4gIHgxOiBudW1iZXJcbiAgeTE6IG51bWJlclxuICB4MjogbnVtYmVyXG4gIHkyOiBudW1iZXJcbiAgcGFpbnQ/OiBQYWludFxufVxuXG5jbGFzcyBDa0xpbmUgaW1wbGVtZW50cyBDa0VsZW1lbnQ8J2NrLWxpbmUnPiB7XG4gIHJlYWRvbmx5IGNhbnZhc0tpdDogQ2FudmFzS2l0XG4gIHJlYWRvbmx5IHByb3BzOiBDa09iamVjdFR5cGluZ1snY2stbGluZSddWydwcm9wcyddXG4gIHJlYWRvbmx5IHNrT2JqZWN0VHlwZTogQ2tPYmplY3RUeXBpbmdbJ2NrLWxpbmUnXVsnbmFtZSddID0gJ0xpbmUnXG4gIHJlYWRvbmx5IHR5cGU6ICdjay1saW5lJyA9ICdjay1saW5lJ1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdFBhaW50OiBTa1BhaW50XG4gIHByaXZhdGUgcmVuZGVyUGFpbnQ/OiBTa1BhaW50XG4gIGRlbGV0ZWQgPSBmYWxzZVxuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBjYW52YXNLaXQ6IENhbnZhc0tpdCxcbiAgICBwcm9wczogQ2tPYmplY3RUeXBpbmdbJ2NrLWxpbmUnXVsncHJvcHMnXVxuICApIHtcbiAgICB0aGlzLmNhbnZhc0tpdCA9IGNhbnZhc0tpdFxuICAgIHRoaXMucHJvcHMgPSBwcm9wc1xuXG4gICAgdGhpcy5kZWZhdWx0UGFpbnQgPSBuZXcgdGhpcy5jYW52YXNLaXQuU2tQYWludCgpXG4gICAgdGhpcy5kZWZhdWx0UGFpbnQuc2V0U3R5bGUodGhpcy5jYW52YXNLaXQuUGFpbnRTdHlsZS5GaWxsKVxuICAgIHRoaXMuZGVmYXVsdFBhaW50LnNldEFudGlBbGlhcyh0cnVlKVxuICB9XG5cbiAgcmVuZGVyIChwYXJlbnQ6IENrRWxlbWVudENvbnRhaW5lcjxhbnk+KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGVsZXRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCVUcuIGxpbmUgZWxlbWVudCBkZWxldGVkLicpXG4gICAgfVxuICAgIGlmIChwYXJlbnQgJiYgaXNDa0NhbnZhcyhwYXJlbnQpKSB7XG4gICAgICAvLyBUT0RPIHdlIGNhbiBiZSBzbWFydCBhbmQgb25seSByZWNyZWF0ZSB0aGUgcGFpbnQgb2JqZWN0IGlmIHRoZSBwYWludCBwcm9wcyBoYXZlIGNoYW5nZWQuXG4gICAgICB0aGlzLnJlbmRlclBhaW50Py5kZWxldGUoKVxuICAgICAgdGhpcy5yZW5kZXJQYWludCA9IHRvU2tQYWludCh0aGlzLmNhbnZhc0tpdCwgdGhpcy5wcm9wcy5wYWludClcbiAgICAgIHBhcmVudC5za09iamVjdD8uZHJhd0xpbmUodGhpcy5wcm9wcy54MSwgdGhpcy5wcm9wcy55MSwgdGhpcy5wcm9wcy54MiwgdGhpcy5wcm9wcy55MiwgdGhpcy5yZW5kZXJQYWludCA/PyB0aGlzLmRlZmF1bHRQYWludClcbiAgICB9XG4gIH1cblxuICBkZWxldGUgKCkge1xuICAgIGlmICh0aGlzLmRlbGV0ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLmRlbGV0ZWQgPSB0cnVlXG4gICAgdGhpcy5kZWZhdWx0UGFpbnQuZGVsZXRlKClcbiAgICB0aGlzLnJlbmRlclBhaW50Py5kZWxldGUoKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDa0xpbmU6IENrRWxlbWVudENyZWF0b3I8J2NrLWxpbmUnPiA9ICh0eXBlLCBwcm9wcywgY2FudmFzS2l0KSA9PiBuZXcgQ2tMaW5lKGNhbnZhc0tpdCwgcHJvcHMpXG4iXX0=

/***/ }),

/***/ "./node_modules/react-canvaskit/dist/CkParagraph.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/CkParagraph.js ***!
  \**********************************************************/
/*! exports provided: createCkParagraph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCkParagraph", function() { return createCkParagraph; });
/* harmony import */ var _CkCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CkCanvas */ "./node_modules/react-canvaskit/dist/CkCanvas.js");
/* harmony import */ var _SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SkiaElementMapping */ "./node_modules/react-canvaskit/dist/SkiaElementMapping.js");


class CkParagraph {
    constructor(canvasKit, props) {
        this.skObjectType = 'SkParagraph';
        this.type = 'ck-paragraph';
        this.deleted = false;
        this.canvasKit = canvasKit;
        this.props = props;
    }
    render(parent) {
        var _a, _b, _c, _d, _e;
        if (this.deleted) {
            throw new Error('BUG. paragraph element deleted.');
        }
        const skParagraphBuilder = this.canvasKit.ParagraphBuilder.Make(Object(_SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__["toSkParagraphStyle"])(this.canvasKit, this.props), (_a = this.props.fontManager) !== null && _a !== void 0 ? _a : this.canvasKit.SkFontMgr.RefDefault());
        if (this.props.children) {
            skParagraphBuilder.addText(this.props.children);
        }
        (_b = this.skObject) === null || _b === void 0 ? void 0 : _b.delete();
        this.skObject = skParagraphBuilder.build();
        this.skObject.layout(this.props.layout);
        if (Object(_CkCanvas__WEBPACK_IMPORTED_MODULE_0__["isCkCanvas"])(parent)) {
            (_c = parent.skObject) === null || _c === void 0 ? void 0 : _c.drawParagraph(this.skObject, (_d = this.props.x) !== null && _d !== void 0 ? _d : 0, (_e = this.props.y) !== null && _e !== void 0 ? _e : 0);
        }
        // TODO we can avoid deleting & recreating the paragraph skobject by checkin props that require a new paragraph instance.
    }
    delete() {
        var _a;
        if (this.deleted) {
            return;
        }
        this.deleted = true;
        (_a = this.skObject) === null || _a === void 0 ? void 0 : _a.delete();
    }
}
const createCkParagraph = (type, props, canvasKit) => new CkParagraph(canvasKit, props);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2tQYXJhZ3JhcGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQ2tQYXJhZ3JhcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUN2QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQWtCekQsTUFBTSxXQUFXO0lBU2YsWUFBYSxTQUFvQixFQUNwQixLQUE4QztRQU5sRCxpQkFBWSxHQUEyQyxhQUFhLENBQUE7UUFDcEUsU0FBSSxHQUFtQixjQUFjLENBQUE7UUFFOUMsWUFBTyxHQUFHLEtBQUssQ0FBQTtRQUliLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxNQUFNLENBQUUsTUFBK0I7O1FBQ3JDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUE7U0FDbkQ7UUFFRCxNQUFNLGtCQUFrQixHQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBbUIsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLG1DQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7UUFDekssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUN2QixrQkFBa0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtTQUNoRDtRQUNELE1BQUEsSUFBSSxDQUFDLFFBQVEsMENBQUUsTUFBTSxHQUFFO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUE7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN2QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN0QixNQUFBLE1BQU0sQ0FBQyxRQUFRLDBDQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxRQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxtQ0FBSSxDQUFDLFFBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLG1DQUFJLENBQUMsRUFBQztTQUNwRjtRQUNELHlIQUF5SDtJQUMzSCxDQUFDO0lBRUQsTUFBTTs7UUFDSixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTTtTQUNQO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFDbkIsTUFBQSxJQUFJLENBQUMsUUFBUSwwQ0FBRSxNQUFNLEdBQUU7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQzVCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQTZCLEVBQUUsQ0FDcEQsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDYW52YXNLaXQsIFNrRm9udE1hbmFnZXIsIFNrUGFyYWdyYXBoLCBTa1BhcmFncmFwaFN0eWxlIH0gZnJvbSAnY2FudmFza2l0LW9jJ1xuaW1wb3J0IHsgaXNDa0NhbnZhcyB9IGZyb20gJy4vQ2tDYW52YXMnXG5pbXBvcnQgeyB0b1NrUGFyYWdyYXBoU3R5bGUgfSBmcm9tICcuL1NraWFFbGVtZW50TWFwcGluZydcbmltcG9ydCB7XG4gIENrRWxlbWVudCxcbiAgQ2tFbGVtZW50Q29udGFpbmVyLFxuICBDa0VsZW1lbnRDcmVhdG9yLFxuICBDa0VsZW1lbnRQcm9wcyxcbiAgQ2tPYmplY3RUeXBpbmcsXG4gIFBhcmFncmFwaFN0eWxlXG59IGZyb20gJy4vU2tpYUVsZW1lbnRUeXBlcydcblxuZXhwb3J0IGludGVyZmFjZSBDa1BhcmFncmFwaFByb3BzIGV4dGVuZHMgUGFyYWdyYXBoU3R5bGUsIENrRWxlbWVudFByb3BzPFNrUGFyYWdyYXBoPiB7XG4gIGxheW91dDogbnVtYmVyLFxuICB4PzogbnVtYmVyLFxuICB5PzogbnVtYmVyLFxuICBjaGlsZHJlbj86IHN0cmluZyxcbiAgZm9udE1hbmFnZXI/OiBTa0ZvbnRNYW5hZ2VyXG59XG5cbmNsYXNzIENrUGFyYWdyYXBoIGltcGxlbWVudHMgQ2tFbGVtZW50PCdjay1wYXJhZ3JhcGgnPiB7XG4gIHJlYWRvbmx5IGNhbnZhc0tpdDogQ2FudmFzS2l0XG4gIHJlYWRvbmx5IHByb3BzOiBDa09iamVjdFR5cGluZ1snY2stcGFyYWdyYXBoJ11bJ3Byb3BzJ11cbiAgc2tPYmplY3Q/OiBDa09iamVjdFR5cGluZ1snY2stcGFyYWdyYXBoJ11bJ3R5cGUnXVxuICByZWFkb25seSBza09iamVjdFR5cGU6IENrT2JqZWN0VHlwaW5nWydjay1wYXJhZ3JhcGgnXVsnbmFtZSddID0gJ1NrUGFyYWdyYXBoJ1xuICByZWFkb25seSB0eXBlOiAnY2stcGFyYWdyYXBoJyA9ICdjay1wYXJhZ3JhcGgnXG5cbiAgZGVsZXRlZCA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IgKGNhbnZhc0tpdDogQ2FudmFzS2l0LFxuICAgICAgICAgICAgICAgcHJvcHM6IENrT2JqZWN0VHlwaW5nWydjay1wYXJhZ3JhcGgnXVsncHJvcHMnXSkge1xuICAgIHRoaXMuY2FudmFzS2l0ID0gY2FudmFzS2l0XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzXG4gIH1cblxuICByZW5kZXIgKHBhcmVudDogQ2tFbGVtZW50Q29udGFpbmVyPGFueT4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kZWxldGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JVRy4gcGFyYWdyYXBoIGVsZW1lbnQgZGVsZXRlZC4nKVxuICAgIH1cblxuICAgIGNvbnN0IHNrUGFyYWdyYXBoQnVpbGRlciA9XG4gICAgICB0aGlzLmNhbnZhc0tpdC5QYXJhZ3JhcGhCdWlsZGVyLk1ha2UoPFNrUGFyYWdyYXBoU3R5bGU+dG9Ta1BhcmFncmFwaFN0eWxlKHRoaXMuY2FudmFzS2l0LCB0aGlzLnByb3BzKSwgdGhpcy5wcm9wcy5mb250TWFuYWdlciA/PyB0aGlzLmNhbnZhc0tpdC5Ta0ZvbnRNZ3IuUmVmRGVmYXVsdCgpKVxuICAgIGlmICh0aGlzLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICBza1BhcmFncmFwaEJ1aWxkZXIuYWRkVGV4dCh0aGlzLnByb3BzLmNoaWxkcmVuKVxuICAgIH1cbiAgICB0aGlzLnNrT2JqZWN0Py5kZWxldGUoKVxuICAgIHRoaXMuc2tPYmplY3QgPSBza1BhcmFncmFwaEJ1aWxkZXIuYnVpbGQoKVxuICAgIHRoaXMuc2tPYmplY3QubGF5b3V0KHRoaXMucHJvcHMubGF5b3V0KVxuICAgIGlmIChpc0NrQ2FudmFzKHBhcmVudCkpIHtcbiAgICAgIHBhcmVudC5za09iamVjdD8uZHJhd1BhcmFncmFwaCh0aGlzLnNrT2JqZWN0LCB0aGlzLnByb3BzLnggPz8gMCwgdGhpcy5wcm9wcy55ID8/IDApXG4gICAgfVxuICAgIC8vIFRPRE8gd2UgY2FuIGF2b2lkIGRlbGV0aW5nICYgcmVjcmVhdGluZyB0aGUgcGFyYWdyYXBoIHNrb2JqZWN0IGJ5IGNoZWNraW4gcHJvcHMgdGhhdCByZXF1aXJlIGEgbmV3IHBhcmFncmFwaCBpbnN0YW5jZS5cbiAgfVxuXG4gIGRlbGV0ZSAoKSB7XG4gICAgaWYgKHRoaXMuZGVsZXRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuZGVsZXRlZCA9IHRydWVcbiAgICB0aGlzLnNrT2JqZWN0Py5kZWxldGUoKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDa1BhcmFncmFwaDogQ2tFbGVtZW50Q3JlYXRvcjwnY2stcGFyYWdyYXBoJz4gPVxuICAodHlwZSwgcHJvcHMsIGNhbnZhc0tpdCk6IENrRWxlbWVudDwnY2stcGFyYWdyYXBoJz4gPT5cbiAgICBuZXcgQ2tQYXJhZ3JhcGgoY2FudmFzS2l0LCBwcm9wcylcbiJdfQ==

/***/ }),

/***/ "./node_modules/react-canvaskit/dist/CkSurface.js":
/*!********************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/CkSurface.js ***!
  \********************************************************/
/*! exports provided: CkSurface, createCkSurface, isCkSurface */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CkSurface", function() { return CkSurface; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCkSurface", function() { return createCkSurface; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCkSurface", function() { return isCkSurface; });
/* harmony import */ var _CkCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CkCanvas */ "./node_modules/react-canvaskit/dist/CkCanvas.js");
/* harmony import */ var _SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SkiaElementMapping */ "./node_modules/react-canvaskit/dist/SkiaElementMapping.js");


class CkSurface {
    constructor(canvasKit, props) {
        this.skObjectType = 'SkSurface';
        this.type = 'ck-surface';
        this.children = [];
        this.deleted = false;
        this.canvasKit = canvasKit;
        this.props = props;
        this.defaultPaint = new this.canvasKit.SkPaint();
    }
    render(parent) {
        if (this.deleted) {
            throw new Error('BUG. surface element deleted.');
        }
        if (parent.skObject && Object(_CkCanvas__WEBPACK_IMPORTED_MODULE_0__["isCkCanvas"])(parent)) {
            if (this.skObject === undefined) {
                const { width, height } = this.props;
                this.skObject = this.canvasKit.MakeSurface(width, height);
            }
        }
        else {
            throw new Error('Expected an initialized ck-canvas as parent of ck-surface');
        }
        this.children.forEach(child => child.render(this));
        this.drawSelf(parent.skObject, this.skObject);
    }
    drawSelf(parent, skSurface) {
        var _a, _b;
        const skImage = skSurface.makeImageSnapshot();
        const { dx, dy, paint } = this.props;
        // TODO we can be smart and only recreate the paint object if the paint props have changed.
        (_a = this.renderPaint) === null || _a === void 0 ? void 0 : _a.delete();
        this.renderPaint = Object(_SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__["toSkPaint"])(this.canvasKit, paint);
        parent.drawImage(skImage, dx !== null && dx !== void 0 ? dx : 0, dy !== null && dy !== void 0 ? dy : 0, (_b = this.renderPaint) !== null && _b !== void 0 ? _b : this.defaultPaint);
    }
    delete() {
        var _a, _b;
        if (this.deleted) {
            return;
        }
        this.deleted = true;
        this.defaultPaint.delete();
        (_a = this.renderPaint) === null || _a === void 0 ? void 0 : _a.delete();
        this.renderPaint = undefined;
        (_b = this.skObject) === null || _b === void 0 ? void 0 : _b.delete();
        this.skObject = undefined;
    }
}
const createCkSurface = (type, props, canvasKit) => {
    return new CkSurface(canvasKit, props);
};
function isCkSurface(ckElement) {
    return ckElement.type === 'ck-surface';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2tTdXJmYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0NrU3VyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQW9CaEQsTUFBTSxPQUFPLFNBQVM7SUFZcEIsWUFDRSxTQUFvQixFQUNwQixLQUE0QztRQVZyQyxpQkFBWSxHQUF5QyxXQUFXLENBQUE7UUFDaEUsU0FBSSxHQUFpQixZQUFZLENBQUE7UUFDMUMsYUFBUSxHQUFzQyxFQUFFLENBQUE7UUFJaEQsWUFBTyxHQUFHLEtBQUssQ0FBQTtRQU1iLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2xELENBQUM7SUFFRCxNQUFNLENBQUUsTUFBK0I7UUFDckMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQTtTQUNqRDtRQUVELElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDekMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDL0IsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO2dCQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTthQUMxRDtTQUNGO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDJEQUEyRCxDQUFDLENBQUE7U0FDN0U7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFFTyxRQUFRLENBQUUsTUFBZ0IsRUFBRSxTQUFvQjs7UUFDdEQsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUE7UUFDN0MsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQTtRQUNwQywyRkFBMkY7UUFDM0YsTUFBQSxJQUFJLENBQUMsV0FBVywwQ0FBRSxNQUFNLEdBQUU7UUFDMUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNuRCxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLGFBQUYsRUFBRSxjQUFGLEVBQUUsR0FBSSxDQUFDLEVBQUUsRUFBRSxhQUFGLEVBQUUsY0FBRixFQUFFLEdBQUksQ0FBQyxRQUFFLElBQUksQ0FBQyxXQUFXLG1DQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNwRixDQUFDO0lBRUQsTUFBTTs7UUFDSixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTTtTQUNQO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7UUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUMxQixNQUFBLElBQUksQ0FBQyxXQUFXLDBDQUFFLE1BQU0sR0FBRTtRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQTtRQUM1QixNQUFBLElBQUksQ0FBQyxRQUFRLDBDQUFFLE1BQU0sR0FBRTtRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQTtJQUMzQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQW1DLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQW9DLEVBQUU7SUFDMUgsT0FBTyxJQUFJLFNBQVMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDeEMsQ0FBQyxDQUFBO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBRSxTQUF5QjtJQUNwRCxPQUFPLFNBQVMsQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUFBO0FBQ3hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENhbnZhc0tpdCwgU2tDYW52YXMsIFNrUGFpbnQsIFNrU3VyZmFjZSB9IGZyb20gJ2NhbnZhc2tpdC1vYydcbmltcG9ydCB0eXBlIHsgUmVhY3RFbGVtZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgdHlwZSB7IENrQ2FudmFzUHJvcHMgfSBmcm9tICcuL0NrQ2FudmFzJ1xuaW1wb3J0IHsgaXNDa0NhbnZhcyB9IGZyb20gJy4vQ2tDYW52YXMnXG5pbXBvcnQgeyB0b1NrUGFpbnQgfSBmcm9tICcuL1NraWFFbGVtZW50TWFwcGluZydcbmltcG9ydCB7XG4gIENrRWxlbWVudCxcbiAgQ2tFbGVtZW50Q29udGFpbmVyLFxuICBDa0VsZW1lbnRDcmVhdG9yLFxuICBDa0VsZW1lbnRQcm9wcyxcbiAgQ2tPYmplY3RUeXBpbmcsXG4gIFBhaW50XG59IGZyb20gJy4vU2tpYUVsZW1lbnRUeXBlcydcblxuZXhwb3J0IGludGVyZmFjZSBDa1N1cmZhY2VQcm9wcyBleHRlbmRzIENrRWxlbWVudFByb3BzPFNrU3VyZmFjZT4ge1xuICB3aWR0aDogbnVtYmVyXG4gIGhlaWdodDogbnVtYmVyXG4gIGR4PzogbnVtYmVyXG4gIGR5PzogbnVtYmVyXG4gIHBhaW50PzogUGFpbnRcblxuICBjaGlsZHJlbj86IFJlYWN0RWxlbWVudDxDa0NhbnZhc1Byb3BzPiB8IFJlYWN0RWxlbWVudDxDa0NhbnZhc1Byb3BzPltdXG59XG5cbmV4cG9ydCBjbGFzcyBDa1N1cmZhY2UgaW1wbGVtZW50cyBDa0VsZW1lbnRDb250YWluZXI8J2NrLXN1cmZhY2UnPiB7XG4gIHJlYWRvbmx5IGNhbnZhc0tpdDogQ2FudmFzS2l0XG4gIHJlYWRvbmx5IHByb3BzOiBDa09iamVjdFR5cGluZ1snY2stc3VyZmFjZSddWydwcm9wcyddXG4gIHNrT2JqZWN0PzogQ2tPYmplY3RUeXBpbmdbJ2NrLXN1cmZhY2UnXVsndHlwZSddXG4gIHJlYWRvbmx5IHNrT2JqZWN0VHlwZTogQ2tPYmplY3RUeXBpbmdbJ2NrLXN1cmZhY2UnXVsnbmFtZSddID0gJ1NrU3VyZmFjZSdcbiAgcmVhZG9ubHkgdHlwZTogJ2NrLXN1cmZhY2UnID0gJ2NrLXN1cmZhY2UnXG4gIGNoaWxkcmVuOiBDa0VsZW1lbnRDb250YWluZXI8J2NrLWNhbnZhcyc+W10gPSBbXVxuXG4gIHJlYWRvbmx5IGRlZmF1bHRQYWludDogU2tQYWludFxuICBwcml2YXRlIHJlbmRlclBhaW50PzogU2tQYWludFxuICBkZWxldGVkID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgY2FudmFzS2l0OiBDYW52YXNLaXQsXG4gICAgcHJvcHM6IENrT2JqZWN0VHlwaW5nWydjay1zdXJmYWNlJ11bJ3Byb3BzJ11cbiAgKSB7XG4gICAgdGhpcy5jYW52YXNLaXQgPSBjYW52YXNLaXRcbiAgICB0aGlzLnByb3BzID0gcHJvcHNcbiAgICB0aGlzLmRlZmF1bHRQYWludCA9IG5ldyB0aGlzLmNhbnZhc0tpdC5Ta1BhaW50KClcbiAgfVxuXG4gIHJlbmRlciAocGFyZW50OiBDa0VsZW1lbnRDb250YWluZXI8YW55Pikge1xuICAgIGlmICh0aGlzLmRlbGV0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQlVHLiBzdXJmYWNlIGVsZW1lbnQgZGVsZXRlZC4nKVxuICAgIH1cblxuICAgIGlmIChwYXJlbnQuc2tPYmplY3QgJiYgaXNDa0NhbnZhcyhwYXJlbnQpKSB7XG4gICAgICBpZiAodGhpcy5za09iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5wcm9wc1xuICAgICAgICB0aGlzLnNrT2JqZWN0ID0gdGhpcy5jYW52YXNLaXQuTWFrZVN1cmZhY2Uod2lkdGgsIGhlaWdodClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhbiBpbml0aWFsaXplZCBjay1jYW52YXMgYXMgcGFyZW50IG9mIGNrLXN1cmZhY2UnKVxuICAgIH1cblxuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiBjaGlsZC5yZW5kZXIodGhpcykpXG4gICAgdGhpcy5kcmF3U2VsZihwYXJlbnQuc2tPYmplY3QsIHRoaXMuc2tPYmplY3QpXG4gIH1cblxuICBwcml2YXRlIGRyYXdTZWxmIChwYXJlbnQ6IFNrQ2FudmFzLCBza1N1cmZhY2U6IFNrU3VyZmFjZSkge1xuICAgIGNvbnN0IHNrSW1hZ2UgPSBza1N1cmZhY2UubWFrZUltYWdlU25hcHNob3QoKVxuICAgIGNvbnN0IHsgZHgsIGR5LCBwYWludCB9ID0gdGhpcy5wcm9wc1xuICAgIC8vIFRPRE8gd2UgY2FuIGJlIHNtYXJ0IGFuZCBvbmx5IHJlY3JlYXRlIHRoZSBwYWludCBvYmplY3QgaWYgdGhlIHBhaW50IHByb3BzIGhhdmUgY2hhbmdlZC5cbiAgICB0aGlzLnJlbmRlclBhaW50Py5kZWxldGUoKVxuICAgIHRoaXMucmVuZGVyUGFpbnQgPSB0b1NrUGFpbnQodGhpcy5jYW52YXNLaXQsIHBhaW50KVxuICAgIHBhcmVudC5kcmF3SW1hZ2Uoc2tJbWFnZSwgZHggPz8gMCwgZHkgPz8gMCwgdGhpcy5yZW5kZXJQYWludCA/PyB0aGlzLmRlZmF1bHRQYWludClcbiAgfVxuXG4gIGRlbGV0ZSAoKSB7XG4gICAgaWYgKHRoaXMuZGVsZXRlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuZGVsZXRlZCA9IHRydWVcbiAgICB0aGlzLmRlZmF1bHRQYWludC5kZWxldGUoKVxuICAgIHRoaXMucmVuZGVyUGFpbnQ/LmRlbGV0ZSgpXG4gICAgdGhpcy5yZW5kZXJQYWludCA9IHVuZGVmaW5lZFxuICAgIHRoaXMuc2tPYmplY3Q/LmRlbGV0ZSgpXG4gICAgdGhpcy5za09iamVjdCA9IHVuZGVmaW5lZFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDa1N1cmZhY2U6IENrRWxlbWVudENyZWF0b3I8J2NrLXN1cmZhY2UnPiA9ICh0eXBlLCBwcm9wcywgY2FudmFzS2l0KTogQ2tFbGVtZW50Q29udGFpbmVyPCdjay1zdXJmYWNlJz4gPT4ge1xuICByZXR1cm4gbmV3IENrU3VyZmFjZShjYW52YXNLaXQsIHByb3BzKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDa1N1cmZhY2UgKGNrRWxlbWVudDogQ2tFbGVtZW50PGFueT4pOiBja0VsZW1lbnQgaXMgQ2tTdXJmYWNlIHtcbiAgcmV0dXJuIGNrRWxlbWVudC50eXBlID09PSAnY2stc3VyZmFjZSdcbn1cbiJdfQ==

/***/ }),

/***/ "./node_modules/react-canvaskit/dist/CkText.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/CkText.js ***!
  \*****************************************************/
/*! exports provided: createCkText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCkText", function() { return createCkText; });
/* harmony import */ var _CkCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CkCanvas */ "./node_modules/react-canvaskit/dist/CkCanvas.js");
/* harmony import */ var _SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SkiaElementMapping */ "./node_modules/react-canvaskit/dist/SkiaElementMapping.js");


class CkText {
    constructor(canvasKit, props) {
        this.skObjectType = 'Text';
        this.type = 'ck-text';
        this.deleted = false;
        this.canvasKit = canvasKit;
        this.props = props;
        this.defaultPaint = new this.canvasKit.SkPaint();
        this.defaultPaint.setStyle(this.canvasKit.PaintStyle.Fill);
        this.defaultPaint.setAntiAlias(true);
        this.defaultFont = new this.canvasKit.SkFont(null, 14);
    }
    render(parent) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (parent && Object(_CkCanvas__WEBPACK_IMPORTED_MODULE_0__["isCkCanvas"])(parent)) {
            // TODO we can be smart and only recreate the paint object if the paint props have changed.
            (_a = this.renderPaint) === null || _a === void 0 ? void 0 : _a.delete();
            this.renderPaint = Object(_SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__["toSkPaint"])(this.canvasKit, this.props.paint);
            // TODO we can be smart and only recreate the font object if the font props have changed.
            (_b = this.renderFont) === null || _b === void 0 ? void 0 : _b.delete();
            this.renderFont = Object(_SkiaElementMapping__WEBPACK_IMPORTED_MODULE_1__["toSkFont"])(this.canvasKit, this.props.font);
            (_c = parent.skObject) === null || _c === void 0 ? void 0 : _c.drawText(this.props.children, (_d = this.props.x) !== null && _d !== void 0 ? _d : 0, (_e = this.props.y) !== null && _e !== void 0 ? _e : 0, (_f = this.renderPaint) !== null && _f !== void 0 ? _f : this.defaultPaint, (_g = this.renderFont) !== null && _g !== void 0 ? _g : this.defaultFont);
        }
    }
    delete() {
        var _a, _b;
        if (this.deleted) {
            return;
        }
        this.deleted = true;
        this.defaultFont.delete();
        this.defaultPaint.delete();
        (_a = this.renderPaint) === null || _a === void 0 ? void 0 : _a.delete();
        (_b = this.renderFont) === null || _b === void 0 ? void 0 : _b.delete();
    }
}
const createCkText = (type, props, canvasKit) => new CkText(canvasKit, props);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2tUZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0NrVGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFtQjFELE1BQU0sTUFBTTtJQWFWLFlBQ0UsU0FBb0IsRUFDcEIsS0FBeUM7UUFabEMsaUJBQVksR0FBc0MsTUFBTSxDQUFBO1FBQ3hELFNBQUksR0FBYyxTQUFTLENBQUE7UUFPcEMsWUFBTyxHQUFHLEtBQUssQ0FBQTtRQU1iLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFBO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBRWxCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzFELElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRXBDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDeEQsQ0FBQztJQUVELE1BQU0sQ0FBRSxNQUFnQzs7UUFDdEMsSUFBSSxNQUFNLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2hDLDJGQUEyRjtZQUMzRixNQUFBLElBQUksQ0FBQyxXQUFXLDBDQUFFLE1BQU0sR0FBRTtZQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDOUQseUZBQXlGO1lBQ3pGLE1BQUEsSUFBSSxDQUFDLFVBQVUsMENBQUUsTUFBTSxHQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUMzRCxNQUFBLE1BQU0sQ0FBQyxRQUFRLDBDQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsUUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsbUNBQUksQ0FBQyxRQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxtQ0FBSSxDQUFDLFFBQUUsSUFBSSxDQUFDLFdBQVcsbUNBQUksSUFBSSxDQUFDLFlBQVksUUFBRSxJQUFJLENBQUMsVUFBVSxtQ0FBSSxJQUFJLENBQUMsV0FBVyxFQUFDO1NBQ2pLO0lBQ0gsQ0FBQztJQUVELE1BQU07O1FBQ0osSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU07U0FDUDtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUE7UUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUMxQixNQUFBLElBQUksQ0FBQyxXQUFXLDBDQUFFLE1BQU0sR0FBRTtRQUMxQixNQUFBLElBQUksQ0FBQyxVQUFVLDBDQUFFLE1BQU0sR0FBRTtJQUMzQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQWdDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2FudmFzS2l0LCBTa0ZvbnQsIFNrUGFpbnQgfSBmcm9tICdjYW52YXNraXQtb2MnXG5pbXBvcnQgeyBpc0NrQ2FudmFzIH0gZnJvbSAnLi9Da0NhbnZhcydcbmltcG9ydCB7IHRvU2tGb250LCB0b1NrUGFpbnQgfSBmcm9tICcuL1NraWFFbGVtZW50TWFwcGluZydcbmltcG9ydCB7XG4gIENrRWxlbWVudCxcbiAgQ2tFbGVtZW50Q29udGFpbmVyLFxuICBDa0VsZW1lbnRDcmVhdG9yLFxuICBDa0VsZW1lbnRQcm9wcyxcbiAgQ2tPYmplY3RUeXBpbmcsXG4gIEZvbnQsXG4gIFBhaW50XG59IGZyb20gJy4vU2tpYUVsZW1lbnRUeXBlcydcblxuZXhwb3J0IGludGVyZmFjZSBDa1RleHRQcm9wcyBleHRlbmRzIENrRWxlbWVudFByb3BzPG5ldmVyPiB7XG4gIHg/OiBudW1iZXJcbiAgeT86IG51bWJlclxuICBwYWludD86IFBhaW50XG4gIGZvbnQ/OiBGb250XG4gIGNoaWxkcmVuOiBzdHJpbmdcbn1cblxuY2xhc3MgQ2tUZXh0IGltcGxlbWVudHMgQ2tFbGVtZW50PCdjay10ZXh0Jz4ge1xuICByZWFkb25seSBjYW52YXNLaXQ6IENhbnZhc0tpdFxuICByZWFkb25seSBwcm9wczogQ2tPYmplY3RUeXBpbmdbJ2NrLXRleHQnXVsncHJvcHMnXVxuICByZWFkb25seSBza09iamVjdFR5cGU6IENrT2JqZWN0VHlwaW5nWydjay10ZXh0J11bJ25hbWUnXSA9ICdUZXh0J1xuICByZWFkb25seSB0eXBlOiAnY2stdGV4dCcgPSAnY2stdGV4dCdcblxuICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRQYWludDogU2tQYWludFxuICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRGb250OiBTa0ZvbnRcblxuICBwcml2YXRlIHJlbmRlclBhaW50PzogU2tQYWludFxuICBwcml2YXRlIHJlbmRlckZvbnQ/OiBTa0ZvbnRcbiAgZGVsZXRlZCA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IgKFxuICAgIGNhbnZhc0tpdDogQ2FudmFzS2l0LFxuICAgIHByb3BzOiBDa09iamVjdFR5cGluZ1snY2stdGV4dCddWydwcm9wcyddXG4gICkge1xuICAgIHRoaXMuY2FudmFzS2l0ID0gY2FudmFzS2l0XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzXG5cbiAgICB0aGlzLmRlZmF1bHRQYWludCA9IG5ldyB0aGlzLmNhbnZhc0tpdC5Ta1BhaW50KClcbiAgICB0aGlzLmRlZmF1bHRQYWludC5zZXRTdHlsZSh0aGlzLmNhbnZhc0tpdC5QYWludFN0eWxlLkZpbGwpXG4gICAgdGhpcy5kZWZhdWx0UGFpbnQuc2V0QW50aUFsaWFzKHRydWUpXG5cbiAgICB0aGlzLmRlZmF1bHRGb250ID0gbmV3IHRoaXMuY2FudmFzS2l0LlNrRm9udChudWxsLCAxNClcbiAgfVxuXG4gIHJlbmRlciAocGFyZW50PzogQ2tFbGVtZW50Q29udGFpbmVyPGFueT4pOiB2b2lkIHtcbiAgICBpZiAocGFyZW50ICYmIGlzQ2tDYW52YXMocGFyZW50KSkge1xuICAgICAgLy8gVE9ETyB3ZSBjYW4gYmUgc21hcnQgYW5kIG9ubHkgcmVjcmVhdGUgdGhlIHBhaW50IG9iamVjdCBpZiB0aGUgcGFpbnQgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuICAgICAgdGhpcy5yZW5kZXJQYWludD8uZGVsZXRlKClcbiAgICAgIHRoaXMucmVuZGVyUGFpbnQgPSB0b1NrUGFpbnQodGhpcy5jYW52YXNLaXQsIHRoaXMucHJvcHMucGFpbnQpXG4gICAgICAvLyBUT0RPIHdlIGNhbiBiZSBzbWFydCBhbmQgb25seSByZWNyZWF0ZSB0aGUgZm9udCBvYmplY3QgaWYgdGhlIGZvbnQgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuICAgICAgdGhpcy5yZW5kZXJGb250Py5kZWxldGUoKVxuICAgICAgdGhpcy5yZW5kZXJGb250ID0gdG9Ta0ZvbnQodGhpcy5jYW52YXNLaXQsIHRoaXMucHJvcHMuZm9udClcbiAgICAgIHBhcmVudC5za09iamVjdD8uZHJhd1RleHQodGhpcy5wcm9wcy5jaGlsZHJlbiwgdGhpcy5wcm9wcy54ID8/IDAsIHRoaXMucHJvcHMueSA/PyAwLCB0aGlzLnJlbmRlclBhaW50ID8/IHRoaXMuZGVmYXVsdFBhaW50LCB0aGlzLnJlbmRlckZvbnQgPz8gdGhpcy5kZWZhdWx0Rm9udClcbiAgICB9XG4gIH1cblxuICBkZWxldGUgKCkge1xuICAgIGlmICh0aGlzLmRlbGV0ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLmRlbGV0ZWQgPSB0cnVlXG4gICAgdGhpcy5kZWZhdWx0Rm9udC5kZWxldGUoKVxuICAgIHRoaXMuZGVmYXVsdFBhaW50LmRlbGV0ZSgpXG4gICAgdGhpcy5yZW5kZXJQYWludD8uZGVsZXRlKClcbiAgICB0aGlzLnJlbmRlckZvbnQ/LmRlbGV0ZSgpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUNrVGV4dDogQ2tFbGVtZW50Q3JlYXRvcjwnY2stdGV4dCc+ID0gKHR5cGUsIHByb3BzLCBjYW52YXNLaXQpID0+IG5ldyBDa1RleHQoY2FudmFzS2l0LCBwcm9wcylcbiJdfQ==

/***/ }),

/***/ "./node_modules/react-canvaskit/dist/ReactCanvasKit.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/ReactCanvasKit.js ***!
  \*************************************************************/
/*! exports provided: useCanvasKit, CanvasKitProvider, useFontManager, FontManagerProvider, init, render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useCanvasKit", function() { return useCanvasKit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CanvasKitProvider", function() { return CanvasKitProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useFontManager", function() { return useFontManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FontManagerProvider", function() { return FontManagerProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function() { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony import */ var canvaskit_oc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! canvaskit-oc */ "../../../canvaskit-oc/es/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-reconciler */ "./node_modules/react-reconciler/index.js");
/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SkiaElementTypes */ "./node_modules/react-canvaskit/dist/SkiaElementTypes.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const canvasKitPromise = Object(canvaskit_oc__WEBPACK_IMPORTED_MODULE_0__["init"])();
let canvasKit;
let CanvasKitContext;
let useCanvasKit;
let CanvasKitProvider;
let FontManagerContext;
let useFontManager;
let FontManagerProvider;
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        canvasKit = yield canvasKitPromise;
        // const copy to make the TS compiler happy when we pass it down to a lambda
        const ck = canvasKit;
        CanvasKitContext = react__WEBPACK_IMPORTED_MODULE_1__["createContext"](ck);
        useCanvasKit = () => react__WEBPACK_IMPORTED_MODULE_1__["useContext"](CanvasKitContext);
        CanvasKitProvider = ({ children }) => react__WEBPACK_IMPORTED_MODULE_1__["createElement"](CanvasKitContext.Provider, { value: ck }, "children");
        FontManagerContext = react__WEBPACK_IMPORTED_MODULE_1__["createContext"](ck.SkFontMgr.RefDefault());
        useFontManager = () => react__WEBPACK_IMPORTED_MODULE_1__["useContext"](FontManagerContext);
        FontManagerProvider = (props) => {
            return react__WEBPACK_IMPORTED_MODULE_1__["createElement"](FontManagerContext.Provider, { value: props.fontData ? ck.SkFontMgr.FromData(props.fontData) : ck.SkFontMgr.RefDefault() }, props.children);
        };
    });
}
// @ts-ignore TODO implement missing functions
const hostConfig = {
    /**
     * This function is used by the reconciler in order to calculate current time for prioritising work.
     */
    now: Date.now,
    supportsMutation: false,
    supportsPersistence: true,
    supportsHydration: false,
    createContainerChildSet(container) {
        return [];
    },
    /**
     * Attaches new children to the set returned by createContainerChildSet
     * @param childSet
     * @param child
     */
    appendChildToContainerChildSet(childSet, child) {
        childSet.push(child);
    },
    replaceContainerChildren(container, newChildren) {
        container.children.forEach(child => child.delete());
        container.children = newChildren;
    },
    /**
     * This function lets you share some context with the other functions in this HostConfig.
     *
     * @param rootContainerInstance is basically the root dom node you specify while calling render. This is most commonly
     * <div id="root"></div>
     * @return A context object that you wish to pass to immediate child.
     */
    getRootHostContext(rootContainerInstance) {
        return { ckElement: rootContainerInstance };
    },
    /**
     * This function provides a way to access context from the parent and also a way to pass some context to the immediate
     * children of the current node. Context is basically a regular object containing some information.
     *
     * @param parentHostContext Context from parent. Example: This will contain rootContext for the immediate child of
     * roothost.
     * @param type This contains the type of fiber i.e, ‘div’, ‘span’, ‘p’, ‘input’ etc.
     * @param rootContainerInstance rootInstance is basically the root dom node you specify while calling render. This is
     * most commonly <div id="root"></div>
     * @return A context object that you wish to pass to immediate child.
     */
    getChildHostContext(parentHostContext, type, rootContainerInstance) {
        return parentHostContext;
    },
    /**
     * If the function returns true, the text would be created inside the host element and no new text element would be
     * created separately.
     *
     * If this returned true, the next call would be to createInstance for the current element and traversal would stop at
     * this node (children of this element wont be traversed).
     *
     * If it returns false, getChildHostContext and shouldSetTextContent will be called on the child elements and it will
     * continue till shouldSetTextContent returns true or if the recursion reaches the last tree endpoint which usually is
     * a text node. When it reaches the last leaf text node it will call createTextInstance
     *
     * @param type This contains the type of fiber i.e, ‘div’, ‘span’, ‘p’, ‘input’ etc.
     * @param props Contains the props passed to the host react element.
     * @return This should be a boolean value.
     */
    shouldSetTextContent(type, props) {
        return (type === 'ck-text') || (type === 'ck-paragraph');
    },
    /**
     * Here we specify how should renderer handle the text content
     *
     * @param text contains the text string that needs to be rendered.
     * @param rootContainerInstance root dom node you specify while calling render. This is most commonly
     * <div id="root"></div>
     * @param hostContext contains the context from the host node enclosing this text node. For example, in the case of
     * <p>Hello</p>: currentHostContext for Hello text node will be host context of p.
     * @param internalInstanceHandle The fiber node for the text instance. This manages work for this instance.
     * @return This should be an actual text view element. In case of dom it would be a textNode.
     */
    createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        throw new Error(`The text '${text}' must be wrapped in a ck-text or ck-paragraph element.`);
    },
    /**
     * Create instance is called on all host nodes except the leaf text nodes. So we should return the correct view
     * element for each host type here. We are also supposed to take care of the props sent to the host element. For
     * example: setting up onClickListeners or setting up styling etc.
     *
     * @param type This contains the type of fiber i.e, ‘div’, ‘span’, ‘p’, ‘input’ etc.
     * @param props  Contains the props passed to the host react element.
     * @param rootContainerInstance Root dom node you specify while calling render. This is most commonly <div id="root"></div>
     * @param hostContext contains the context from the parent node enclosing this node. This is the return value from getChildHostContext of the parent node.
     * @param internalInstanceHandle The fiber node for the text instance. This manages work for this instance.
     */
    createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        return Object(_SkiaElementTypes__WEBPACK_IMPORTED_MODULE_3__["createCkElement"])(type, props, hostContext.ckElement.canvasKit);
    },
    /**
     * Here we will attach the child dom node to the parent on the initial render phase. This method will be called for
     * each child of the current node.
     *
     * @param parentInstance The current node in the traversal
     * @param child The child dom node of the current node.
     */
    appendInitialChild(parentInstance, child) {
        if (Object(_SkiaElementTypes__WEBPACK_IMPORTED_MODULE_3__["isContainerElement"])(parentInstance)) {
            parentInstance.children.push(child);
        }
        else {
            throw new Error('Bug? Trying to append a child to a parent that is not a container.');
        }
    },
    /**
     * In case of react native renderer, this function does nothing but return false.
     *
     * In case of react-dom, this adds default dom properties such as event listeners, etc.
     * For implementing auto focus for certain input elements (autofocus can happen only
     * after render is done), react-dom sends return type as true. This results in commitMount
     * method for this element to be called. The commitMount will be called only if an element
     * returns true in finalizeInitialChildren and after the all elements of the tree has been
     * rendered (even after resetAfterCommit).
     *
     * @param parentInstance The instance is the dom element after appendInitialChild.
     * @param type This contains the type of fiber i.e, ‘div’, ‘span’, ‘p’, ‘input’ etc.
     * @param props Contains the props passed to the host react element.
     * @param rootContainerInstance root dom node you specify while calling render. This is most commonly <div id="root"></div>
     * @param hostContext contains the context from the parent node enclosing this node. This is the return value from getChildHostContext of the parent node.
     */
    finalizeInitialChildren(parentInstance, type, props, rootContainerInstance, hostContext) {
        return false;
    },
    finalizeContainerChildren(container, newChildren) {
    },
    /**
     * This function is called when we have made a in-memory render tree of all the views (Remember we are yet to attach
     * it the the actual root dom node). Here we can do any preparation that needs to be done on the rootContainer before
     * attaching the in memory render tree. For example: In the case of react-dom, it keeps track of all the currently
     * focused elements, disabled events temporarily, etc.
     *
     * @param containerInfo root dom node you specify while calling render. This is most commonly <div id="root"></div>
     */
    prepareForCommit(containerInfo) {
    },
    /**
     * This function gets executed after the inmemory tree has been attached to the root dom element. Here we can do any
     * post attach operations that needs to be done. For example: react-dom re-enabled events which were temporarily
     * disabled in prepareForCommit and refocuses elements, etc.
     *
     * @param containerInfo root dom node you specify while calling render. This is most commonly <div id="root"></div>
     */
    resetAfterCommit(containerInfo) {
        var _a, _b;
        // TODO instead of re-rendering everything, only rerender dirty nodes?
        containerInfo.children.forEach(child => child.render(containerInfo));
        (_b = (_a = containerInfo.props).renderCallback) === null || _b === void 0 ? void 0 : _b.call(_a);
    },
    getPublicInstance(instance) {
        return { ref: () => instance.skObject };
    },
    prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        // TODO check & return if we can need to create an entire new object or we can reuse the underlying skobject and use it as the payload in cloneInstance.
    },
    cloneInstance(instance, updatePayload, type, oldProps, newProps, internalInstanceHandle, keepChildren, recyclableInstance) {
        // TODO implement a way where we can create a new instance and reuse the underlying canvaskit objects where possible
        const ckElement = Object(_SkiaElementTypes__WEBPACK_IMPORTED_MODULE_3__["createCkElement"])(type, newProps, instance.canvasKit);
        if (keepChildren && Object(_SkiaElementTypes__WEBPACK_IMPORTED_MODULE_3__["isContainerElement"])(ckElement) && Object(_SkiaElementTypes__WEBPACK_IMPORTED_MODULE_3__["isContainerElement"])(instance)) {
            ckElement.children = instance.children;
        }
        // recyclableInstance.props = newProps
        // return recyclableInstance
        return ckElement;
    }
};
const canvaskitReconciler = react_reconciler__WEBPACK_IMPORTED_MODULE_2__(hostConfig);
canvaskitReconciler.injectIntoDevTools({
    bundleType: 1,
    version: '0.0.1',
    rendererPackageName: 'react-canvaskit' // package name
});
function render(element, canvas, renderCallback) {
    if (canvasKit === undefined) {
        throw new Error('Not initialized');
    }
    const isConcurrent = false;
    const hydrate = false;
    const skSurface = canvasKit.MakeCanvasSurface(canvas);
    const ckSurfaceElement = {
        canvasKit,
        type: 'ck-surface',
        // @ts-ignore
        props: { width: canvas.width, height: canvas.height, renderCallback },
        skObjectType: 'SkSurface',
        skObject: skSurface,
        children: [],
        render() {
            this.children.forEach(child => child.render(ckSurfaceElement));
        }
    };
    const container = canvaskitReconciler.createContainer(ckSurfaceElement, isConcurrent, hydrate);
    return new Promise(resolve => {
        canvaskitReconciler.updateContainer(element, container, null, () => resolve());
    });
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/react-canvaskit/dist/SkiaElementMapping.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/SkiaElementMapping.js ***!
  \*****************************************************************/
/*! exports provided: toSkTypeFace, toSkFont, toSkColor, toSkPaint, toFontStyle, toSkTextStyle, toSkParagraphStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSkTypeFace", function() { return toSkTypeFace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSkFont", function() { return toSkFont; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSkColor", function() { return toSkColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSkPaint", function() { return toSkPaint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toFontStyle", function() { return toFontStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSkTextStyle", function() { return toSkTextStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSkParagraphStyle", function() { return toSkParagraphStyle; });
/* harmony import */ var _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SkiaElementTypes */ "./node_modules/react-canvaskit/dist/SkiaElementTypes.js");

const toSkTypeFace = (canvasKit, typeFace) => typeFace ? canvasKit.SkFontMgr.RefDefault().MakeTypefaceFromData(typeFace.data) : undefined;
const toSkFont = (canvasKit, font) => font ? new canvasKit.SkFont(font.typeFace === undefined ? null : toSkTypeFace(canvasKit, font.typeFace), font.size) : undefined;
const toSkColor = (canvasKit, color) => {
    var _a;
    if (typeof color === 'string') {
        // @ts-ignore
        return canvasKit.parseColorString(color);
    }
    else {
        return color ? canvasKit.Color(color.red, color.green, color.blue, (_a = color.alpha) !== null && _a !== void 0 ? _a : 1) : undefined;
    }
};
const toSkPaint = (canvasKit, paint) => {
    if (paint === undefined) {
        return undefined;
    }
    const skPaint = new canvasKit.SkPaint();
    // TODO blendMode?: BlendMode;
    const skColor = toSkColor(canvasKit, paint.color);
    if (skColor) {
        skPaint.setColor(skColor);
    }
    // TODO filterQuality?: FilterQuality;
    // TODO strokeCap?: StrokeCap;
    // TODO strokeJoin?: StrokeJoin;
    if (paint.strokeMiter) {
        skPaint.setStrokeMiter(paint.strokeMiter);
    }
    if (paint.strokeWidth) {
        skPaint.setStrokeWidth(paint.strokeWidth);
    }
    if (paint.antiAlias) {
        skPaint.setAntiAlias(paint.antiAlias);
    }
    // TODO colorFilter?: ColorFilter
    // TODO imageFilter?: ImageFilter;
    // TODO maskFilter?: MaskFilter
    // TODO pathEffect?: PathEffect
    // TODO shader?: Shader
    // TODO style?: PaintStyle
    return skPaint;
};
const toFontStyle = (canvasKit, fontStyle) => {
    var _a, _b, _c;
    return {
        slant: { value: (_a = fontStyle === null || fontStyle === void 0 ? void 0 : fontStyle.slant) !== null && _a !== void 0 ? _a : _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_0__["FontSlantEnum"].Upright },
        weight: { value: (_b = fontStyle === null || fontStyle === void 0 ? void 0 : fontStyle.weight) !== null && _b !== void 0 ? _b : _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_0__["FontWeightEnum"].Normal },
        width: { value: (_c = fontStyle === null || fontStyle === void 0 ? void 0 : fontStyle.width) !== null && _c !== void 0 ? _c : _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_0__["FontWidthEnum"].Normal }
    };
};
const toSkTextStyle = (canvasKit, textStyle) => {
    var _a, _b, _c, _d, _e, _f, _g;
    return {
        backgroundColor: (_a = toSkColor(canvasKit, textStyle === null || textStyle === void 0 ? void 0 : textStyle.backgroundColor)) !== null && _a !== void 0 ? _a : canvasKit.WHITE,
        color: (_b = toSkColor(canvasKit, textStyle === null || textStyle === void 0 ? void 0 : textStyle.color)) !== null && _b !== void 0 ? _b : canvasKit.BLACK,
        decoration: (_c = textStyle === null || textStyle === void 0 ? void 0 : textStyle.decoration) !== null && _c !== void 0 ? _c : 0,
        decorationThickness: (_d = textStyle === null || textStyle === void 0 ? void 0 : textStyle.decorationThickness) !== null && _d !== void 0 ? _d : 0,
        fontFamilies: (_e = textStyle === null || textStyle === void 0 ? void 0 : textStyle.fontFamilies) !== null && _e !== void 0 ? _e : [],
        fontSize: (_f = textStyle === null || textStyle === void 0 ? void 0 : textStyle.fontSize) !== null && _f !== void 0 ? _f : 14,
        fontStyle: toFontStyle(canvasKit, textStyle === null || textStyle === void 0 ? void 0 : textStyle.fontStyle),
        foregroundColor: (_g = toSkColor(canvasKit, textStyle === null || textStyle === void 0 ? void 0 : textStyle.foregroundColor)) !== null && _g !== void 0 ? _g : canvasKit.BLACK
    };
};
const toSkParagraphStyle = (canvasKit, paragraphStyle) => {
    const textAlign = (paragraphStyle === null || paragraphStyle === void 0 ? void 0 : paragraphStyle.textAlign) ? { value: paragraphStyle.textAlign } : undefined;
    const textDirection = (paragraphStyle === null || paragraphStyle === void 0 ? void 0 : paragraphStyle.textDirection) ? { value: paragraphStyle.textDirection } : undefined;
    return new canvasKit.ParagraphStyle({
        disableHinting: paragraphStyle === null || paragraphStyle === void 0 ? void 0 : paragraphStyle.disableHinting,
        ellipsis: paragraphStyle === null || paragraphStyle === void 0 ? void 0 : paragraphStyle.ellipsis,
        maxLines: paragraphStyle === null || paragraphStyle === void 0 ? void 0 : paragraphStyle.maxLines,
        textAlign,
        textDirection,
        textStyle: toSkTextStyle(canvasKit, paragraphStyle === null || paragraphStyle === void 0 ? void 0 : paragraphStyle.textStyle)
    });
};
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/react-canvaskit/dist/SkiaElementTypes.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/SkiaElementTypes.js ***!
  \***************************************************************/
/*! exports provided: isContainerElement, FilterQuality, StrokeCap, StrokeJoin, BlendMode, TileMode, BlurStyle, PaintStyle, TextAlignEnum, TextDirectionEnum, FontWeightEnum, FontSlantEnum, FontWidthEnum, createCkElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isContainerElement", function() { return isContainerElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterQuality", function() { return FilterQuality; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StrokeCap", function() { return StrokeCap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StrokeJoin", function() { return StrokeJoin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlendMode", function() { return BlendMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TileMode", function() { return TileMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlurStyle", function() { return BlurStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaintStyle", function() { return PaintStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextAlignEnum", function() { return TextAlignEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextDirectionEnum", function() { return TextDirectionEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FontWeightEnum", function() { return FontWeightEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FontSlantEnum", function() { return FontSlantEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FontWidthEnum", function() { return FontWidthEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCkElement", function() { return createCkElement; });
/* harmony import */ var _CkCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CkCanvas */ "./node_modules/react-canvaskit/dist/CkCanvas.js");
/* harmony import */ var _CkLine__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CkLine */ "./node_modules/react-canvaskit/dist/CkLine.js");
/* harmony import */ var _CkParagraph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CkParagraph */ "./node_modules/react-canvaskit/dist/CkParagraph.js");
/* harmony import */ var _CkSurface__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CkSurface */ "./node_modules/react-canvaskit/dist/CkSurface.js");
/* harmony import */ var _CkText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CkText */ "./node_modules/react-canvaskit/dist/CkText.js");





function isContainerElement(ckElement) {
    return ckElement.children !== undefined;
}
var CkPropTypes;
(function (CkPropTypes) {
    CkPropTypes.Color = {
        red: 'number',
        green: 'number',
        blue: 'number',
        alpha: 'number'
    };
})(CkPropTypes || (CkPropTypes = {}));
var FilterQuality;
(function (FilterQuality) {
    // TODO
})(FilterQuality || (FilterQuality = {}));
var StrokeCap;
(function (StrokeCap) {
    // TODO
})(StrokeCap || (StrokeCap = {}));
var StrokeJoin;
(function (StrokeJoin) {
    // TODO
})(StrokeJoin || (StrokeJoin = {}));
var BlendMode;
(function (BlendMode) {
    // TODO
})(BlendMode || (BlendMode = {}));
var TileMode;
(function (TileMode) {
    // TODO
})(TileMode || (TileMode = {}));
(function (FilterQuality) {
    // TODO
})(FilterQuality || (FilterQuality = {}));
var BlurStyle;
(function (BlurStyle) {
    // TODO
})(BlurStyle || (BlurStyle = {}));
var PaintStyle;
(function (PaintStyle) {
    /**
     * Fill the geometry.
     */
    PaintStyle[PaintStyle["Fill"] = 0] = "Fill";
    /**
     * Stroke the geometry.
     */
    PaintStyle[PaintStyle["Stroke"] = 1] = "Stroke";
    /**
     * Fill and stroke the geometry.
     */
    PaintStyle[PaintStyle["StrokeAndFill"] = 2] = "StrokeAndFill";
})(PaintStyle || (PaintStyle = {}));
var TextAlignEnum;
(function (TextAlignEnum) {
    TextAlignEnum[TextAlignEnum["Left"] = 0] = "Left";
    TextAlignEnum[TextAlignEnum["Center"] = 1] = "Center";
    TextAlignEnum[TextAlignEnum["Right"] = 2] = "Right";
})(TextAlignEnum || (TextAlignEnum = {}));
var TextDirectionEnum;
(function (TextDirectionEnum) {
    TextDirectionEnum[TextDirectionEnum["Ltr"] = 0] = "Ltr";
    TextDirectionEnum[TextDirectionEnum["Rtl"] = 1] = "Rtl";
    // TODO
})(TextDirectionEnum || (TextDirectionEnum = {}));
var FontWeightEnum;
(function (FontWeightEnum) {
    /**
     * A thick font weight of 900.
     */
    FontWeightEnum[FontWeightEnum["Black"] = 900] = "Black";
    /**
     * A thick font weight of 700. This is the default for a bold font.
     */
    FontWeightEnum[FontWeightEnum["Bold"] = 700] = "Bold";
    /**
     * A thick font weight of 1000.
     */
    FontWeightEnum[FontWeightEnum["ExtraBlack"] = 1000] = "ExtraBlack";
    /**
     * A thick font weight of 800.
     */
    FontWeightEnum[FontWeightEnum["ExtraBold"] = 800] = "ExtraBold";
    /**
     * A thin font weight of 200.
     */
    FontWeightEnum[FontWeightEnum["ExtraLight"] = 200] = "ExtraLight";
    /**
     * The font has no thickness at all.
     */
    FontWeightEnum[FontWeightEnum["Invisible"] = 0] = "Invisible";
    /**
     * A thin font weight of 300.
     */
    FontWeightEnum[FontWeightEnum["Light"] = 300] = "Light";
    /**
     *A thicker font weight of 500.
     */
    FontWeightEnum[FontWeightEnum["Medium"] = 500] = "Medium";
    /**
     *A typical font weight of 400. This is the default font weight.
     */
    FontWeightEnum[FontWeightEnum["Normal"] = 400] = "Normal";
    /**
     *A thick font weight of 600.
     */
    FontWeightEnum[FontWeightEnum["SemiBold"] = 600] = "SemiBold";
    /**
     *A thin font weight of 100.
     */
    FontWeightEnum[FontWeightEnum["Thin"] = 100] = "Thin";
})(FontWeightEnum || (FontWeightEnum = {}));
var FontSlantEnum;
(function (FontSlantEnum) {
    FontSlantEnum[FontSlantEnum["Upright"] = 0] = "Upright";
    FontSlantEnum[FontSlantEnum["Italic"] = 1] = "Italic";
    FontSlantEnum[FontSlantEnum["Oblique"] = 2] = "Oblique";
})(FontSlantEnum || (FontSlantEnum = {}));
var FontWidthEnum;
(function (FontWidthEnum) {
    /**
     * A condensed font width of 3.
     */
    FontWidthEnum[FontWidthEnum["Condensed"] = 3] = "Condensed";
    /**
     * An expanded font width of 7.
     */
    FontWidthEnum[FontWidthEnum["Expanded"] = 7] = "Expanded";
    /**
     *A condensed font width of 2.
     */
    FontWidthEnum[FontWidthEnum["ExtraCondensed"] = 2] = "ExtraCondensed";
    /**
     *An expanded font width of 8.
     */
    FontWidthEnum[FontWidthEnum["ExtraExpanded"] = 8] = "ExtraExpanded";
    /**
     *A normal font width of 5. This is the default font width.
     */
    FontWidthEnum[FontWidthEnum["Normal"] = 5] = "Normal";
    /**
     *A condensed font width of 4.
     */
    FontWidthEnum[FontWidthEnum["SemiCondensed"] = 4] = "SemiCondensed";
    /**
     *An expanded font width of 6.
     */
    FontWidthEnum[FontWidthEnum["SemiExpanded"] = 6] = "SemiExpanded";
    /**
     *A condensed font width of 1.
     */
    FontWidthEnum[FontWidthEnum["UltraCondensed"] = 1] = "UltraCondensed";
    /**
     *An expanded font width of 9.
     */
    FontWidthEnum[FontWidthEnum["UltraExpanded"] = 9] = "UltraExpanded";
})(FontWidthEnum || (FontWidthEnum = {}));
const CkElements = {
    'ck-text': _CkText__WEBPACK_IMPORTED_MODULE_4__["createCkText"],
    'ck-line': _CkLine__WEBPACK_IMPORTED_MODULE_1__["createCkLine"],
    'ck-surface': _CkSurface__WEBPACK_IMPORTED_MODULE_3__["createCkSurface"],
    'ck-canvas': _CkCanvas__WEBPACK_IMPORTED_MODULE_0__["createCkCanvas"],
    'ck-paragraph': _CkParagraph__WEBPACK_IMPORTED_MODULE_2__["createCkParagraph"]
};
function createCkElement(type, props, canvasKit) {
    return CkElements[type](type, props, canvasKit);
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/react-canvaskit/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/react-canvaskit/dist/index.js ***!
  \****************************************************/
/*! exports provided: useCanvasKit, CanvasKitProvider, useFontManager, FontManagerProvider, init, render, isContainerElement, FilterQuality, StrokeCap, StrokeJoin, BlendMode, TileMode, BlurStyle, PaintStyle, TextAlignEnum, TextDirectionEnum, FontWeightEnum, FontSlantEnum, FontWidthEnum, createCkElement */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ReactCanvasKit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ReactCanvasKit */ "./node_modules/react-canvaskit/dist/ReactCanvasKit.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useCanvasKit", function() { return _ReactCanvasKit__WEBPACK_IMPORTED_MODULE_0__["useCanvasKit"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CanvasKitProvider", function() { return _ReactCanvasKit__WEBPACK_IMPORTED_MODULE_0__["CanvasKitProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useFontManager", function() { return _ReactCanvasKit__WEBPACK_IMPORTED_MODULE_0__["useFontManager"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FontManagerProvider", function() { return _ReactCanvasKit__WEBPACK_IMPORTED_MODULE_0__["FontManagerProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "init", function() { return _ReactCanvasKit__WEBPACK_IMPORTED_MODULE_0__["init"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _ReactCanvasKit__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony import */ var _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SkiaElementTypes */ "./node_modules/react-canvaskit/dist/SkiaElementTypes.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isContainerElement", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["isContainerElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FilterQuality", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["FilterQuality"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StrokeCap", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["StrokeCap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StrokeJoin", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["StrokeJoin"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlendMode", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["BlendMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TileMode", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["TileMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlurStyle", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["BlurStyle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PaintStyle", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["PaintStyle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextAlignEnum", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["TextAlignEnum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextDirectionEnum", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["TextDirectionEnum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FontWeightEnum", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["FontWeightEnum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FontSlantEnum", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["FontSlantEnum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FontWidthEnum", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["FontWidthEnum"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createCkElement", function() { return _SkiaElementTypes__WEBPACK_IMPORTED_MODULE_1__["createCkElement"]; });



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsa0JBQWtCLENBQUE7QUFDaEMsY0FBYyxvQkFBb0IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vUmVhY3RDYW52YXNLaXQnXG5leHBvcnQgKiBmcm9tICcuL1NraWFFbGVtZW50VHlwZXMnXG4iXX0=

/***/ }),

/***/ "./node_modules/react-reconciler/cjs/react-reconciler.development.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-reconciler/cjs/react-reconciler.development.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {/** @license React v0.25.1
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  module.exports = function $$$reconciler($$$hostConfig) {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");
var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");
var tracing = __webpack_require__(/*! scheduler/tracing */ "./node_modules/scheduler/tracing.js");

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
  ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  };
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;
var Block = 22;

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternalFiber;
}
function set(key, value) {
  key._reactInternalFiber = value;
}

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}
function initializeLazyComponentType(lazyComponent) {
  if (lazyComponent._status === Uninitialized) {
    lazyComponent._status = Pending;
    var ctor = lazyComponent._ctor;
    var thenable = ctor();
    lazyComponent._result = thenable;
    thenable.then(function (moduleObject) {
      if (lazyComponent._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
          }
        }

        lazyComponent._status = Resolved;
        lazyComponent._result = defaultExport;
      }
    }, function (error) {
      if (lazyComponent._status === Pending) {
        lazyComponent._status = Rejected;
        lazyComponent._result = error;
      }
    });
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect =
/*              */
0;
var PerformedWork =
/*         */
1; // You can change the rest (and add more).

var Placement =
/*             */
2;
var Update =
/*                */
4;
var PlacementAndUpdate =
/*    */
6;
var Deletion =
/*              */
8;
var ContentReset =
/*          */
16;
var Callback =
/*              */
32;
var DidCapture =
/*            */
64;
var Ref =
/*                   */
128;
var Snapshot =
/*              */
256;
var Passive =
/*               */
512;
var Hydrating =
/*             */
1024;
var HydratingAndUpdate =
/*    */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*   */
932; // Union of all host effects

var HostEffectMask =
/*        */
2047;
var Incomplete =
/*            */
2048;
var ShouldCapture =
/*         */
4096;

var enableProfilerTimer = true; // Trace which interactions trigger each commit.

var enableFundamentalAPI = false; // Experimental Scope support.
var warnAboutStringRefs = false;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}

// This is a host config that's used for the `react-reconciler` package on npm.
// It is only used by third-party renderers.
//
// Its API lets you pass the host config as an argument.
// However, inside the `react-reconciler` we treat host config as a module.
// This file is a shim between two worlds.
//
// It works because the `react-reconciler` bundle is wrapped in something like:
//
// module.exports = function ($$$config) {
//   /* reconciler code */
// }
//
// So `$$$config` looks like a global variable, but it's
// really an argument to a top-level wrapping function.
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
// eslint-disable-line no-undef
var getPublicInstance = $$$hostConfig.getPublicInstance;
var getRootHostContext = $$$hostConfig.getRootHostContext;
var getChildHostContext = $$$hostConfig.getChildHostContext;
var prepareForCommit = $$$hostConfig.prepareForCommit;
var resetAfterCommit = $$$hostConfig.resetAfterCommit;
var createInstance = $$$hostConfig.createInstance;
var appendInitialChild = $$$hostConfig.appendInitialChild;
var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
var prepareUpdate = $$$hostConfig.prepareUpdate;
var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
var shouldDeprioritizeSubtree = $$$hostConfig.shouldDeprioritizeSubtree;
var createTextInstance = $$$hostConfig.createTextInstance;
var scheduleTimeout = $$$hostConfig.setTimeout;
var cancelTimeout = $$$hostConfig.clearTimeout;
var noTimeout = $$$hostConfig.noTimeout;
var now = $$$hostConfig.now;
var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
var supportsMutation = $$$hostConfig.supportsMutation;
var supportsPersistence = $$$hostConfig.supportsPersistence;
var supportsHydration = $$$hostConfig.supportsHydration;
var DEPRECATED_mountResponderInstance = $$$hostConfig.DEPRECATED_mountResponderInstance;
var DEPRECATED_unmountResponderInstance = $$$hostConfig.DEPRECATED_unmountResponderInstance;
var getFundamentalComponentInstance = $$$hostConfig.getFundamentalComponentInstance;
var mountFundamentalComponent = $$$hostConfig.mountFundamentalComponent;
var shouldUpdateFundamentalComponent = $$$hostConfig.shouldUpdateFundamentalComponent;
var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;
var beforeRemoveInstance = $$$hostConfig.beforeRemoveInstance; // -------------------
//      Mutation
//     (optional)
// -------------------

var appendChild = $$$hostConfig.appendChild;
var appendChildToContainer = $$$hostConfig.appendChildToContainer;
var commitTextUpdate = $$$hostConfig.commitTextUpdate;
var commitMount = $$$hostConfig.commitMount;
var commitUpdate = $$$hostConfig.commitUpdate;
var insertBefore = $$$hostConfig.insertBefore;
var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
var removeChild = $$$hostConfig.removeChild;
var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
var resetTextContent = $$$hostConfig.resetTextContent;
var hideInstance = $$$hostConfig.hideInstance;
var hideTextInstance = $$$hostConfig.hideTextInstance;
var unhideInstance = $$$hostConfig.unhideInstance;
var unhideTextInstance = $$$hostConfig.unhideTextInstance;
var updateFundamentalComponent = $$$hostConfig.updateFundamentalComponent;
var unmountFundamentalComponent = $$$hostConfig.unmountFundamentalComponent; // -------------------
//     Persistence
//     (optional)
// -------------------

var cloneInstance = $$$hostConfig.cloneInstance;
var createContainerChildSet = $$$hostConfig.createContainerChildSet;
var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;
var cloneFundamentalInstance = $$$hostConfig.cloneInstance; // -------------------
//     Hydration
//     (optional)
// -------------------

var canHydrateInstance = $$$hostConfig.canHydrateInstance;
var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;
var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;
var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
var hydrateInstance = $$$hostConfig.hydrateInstance;
var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;
var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;
var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
var didNotHydrateContainerInstance = $$$hostConfig.didNotHydrateContainerInstance;
var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
var didNotFindHydratableContainerInstance = $$$hostConfig.didNotFindHydratableContainerInstance;
var didNotFindHydratableContainerTextInstance = $$$hostConfig.didNotFindHydratableContainerTextInstance;
var didNotFindHydratableContainerSuspenseInstance = $$$hostConfig.didNotFindHydratableContainerSuspenseInstance;
var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';

    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;

      if (owner) {
        ownerName = getComponentName(owner.type);
      }

      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;

  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);

  return info;
}
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}
function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}
function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = "\u269B";
var warningEmoji = "\u26D4";
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).

var currentPhase = null;
var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.

var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
// to avoid stretch the commit phase with measurement overhead.

var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + " " + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
  var suffix = warning ? " Warning: " + warning : '';
  return "" + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);

  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {} // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.
  // Clear marks immediately to avoid growing buffer.


  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + " (#" + debugID + ")";
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
  } else {
    // Composite component methods.
    return componentName + "." + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }

  labelsInCurrentCommit.add(label);
  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;

    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }

  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;

  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }

    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }

  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  {
    effectCountInCurrentCommit++;
  }
}
function recordScheduleUpdate() {
  {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }

    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}
function startWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, this is the fiber to unwind from.


    currentFiber = fiber;

    if (!beginFiberMark(fiber, null)) {
      return;
    }

    fiber._debugIsCurrentlyTiming = true;
  }
}
function cancelWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.


    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}
function stopWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}
function stopFailedWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}
function startPhaseTimer(fiber, phase) {
  {
    if (!supportsUserTiming) {
      return;
    }

    clearPendingPhaseMeasurement();

    if (!beginFiberMark(fiber, phase)) {
      return;
    }

    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}
function stopPhaseTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }

    currentPhase = null;
    currentPhaseFiber = null;
  }
}
function startWorkLoopTimer(nextUnitOfWork) {
  {
    currentFiber = nextUnitOfWork;

    if (!supportsUserTiming) {
      return;
    }

    commitCountInCurrentWorkLoop = 0; // This is top level call.
    // Any other measurements are performed within.

    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

    resumeTimers();
  }
}
function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = "An update to " + componentName + " interrupted the previous render";
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }

    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}
function startCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}
function stopCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }

    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();
    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}
function startCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}
function stopCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
  }
}
function startCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}
function stopCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
  }
}
function startCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}
function stopCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext;
    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      getCurrentFiberStackInDev);
    }

    return _assign({}, parentContext, {}, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var BlockingRoot = 1;
var ConcurrentRoot = 2;

var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
    Scheduler_now = Scheduler.unstable_now,
    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling" );
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now$1 = initialTimeMs < 10000 ? Scheduler_now : function () {
  return Scheduler_now() - initialTimeMs;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority;

    case Scheduler_NormalPriority:
      return NormalPriority;

    case Scheduler_LowPriority:
      return LowPriority;

    case Scheduler_IdlePriority:
      return IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority:
      return Scheduler_UserBlockingPriority;

    case NormalPriority:
      return Scheduler_NormalPriority;

    case LowPriority:
      return Scheduler_LowPriority;

    case IdlePriority:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function runWithPriority(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    try {
      var _isSync = true;
      var queue = syncQueue;
      runWithPriority(ImmediatePriority, function () {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(_isSync);
          } while (callback !== null);
        }
      });
      syncQueue = null;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
      throw error;
    } finally {
      isFlushingSyncQueue = false;
    }
  }
}

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
// tag instead

var BlockingMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
// Never work can be committed in an inconsistent state without tearing the UI.
// The main example is offscreen content, like a hidden subtree. So one possible
// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
// which are inconsistent in the sense that they haven't finished yet, but
// aren't visibly inconsistent because the server rendered HTML matches what the
// hydrated tree would look like.

var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
// order to be consistent.

var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
// priority of hover targets.

var ContinuousHydration = 3;
var Sync = MAX_SIGNED_31_BIT_INT;
var Batched = Sync - 1;
var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

function msToExpirationTime(ms) {
  // Always subtract from the offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}
function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
// the names to reflect.


var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;
function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}
function computeSuspenseExpiration(currentTime, timeoutMs) {
  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
} // We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.

var HIGH_PRIORITY_EXPIRATION =  500 ;
var HIGH_PRIORITY_BATCH_SIZE = 100;
function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}
function inferPriorityFromExpirationTime(currentTime, expirationTime) {
  if (expirationTime === Sync) {
    return ImmediatePriority;
  }

  if (expirationTime === Never || expirationTime === Idle) {
    return IdlePriority;
  }

  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

  if (msUntil <= 0) {
    return ImmediatePriority;
  }

  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
    return UserBlockingPriority;
  }

  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
    return NormalPriority;
  } // TODO: Handle LowPriority
  // Assume anything lower has idle priority


  return IdlePriority;
}

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);
      var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);

      error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    syncUpdates(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleWork(fiber, Sync);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}
function readLazyComponentType(lazyComponent) {
  initializeLazyComponentType(lazyComponent);

  if (lazyComponent._status !== Resolved) {
    throw lazyComponent._result;
  }

  return lazyComponent._result;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  } else {
    push(valueCursor, context._currentValue2, providerFiber);
    context._currentValue2 = nextValue;

    {
      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer2 = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  if (isPrimaryRenderer) {
    context._currentValue = currentValue;
  } else {
    context._currentValue2 = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (objectIs(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
      }
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;

      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime, null);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var alternate = fiber.alternate;

          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          } // Since we already found a match, we can stop traversing the
          // dependency list.


          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (dependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        expirationTime: NoWork,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return isPrimaryRenderer ? context._currentValue : context._currentValue2;
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    baseQueue: null,
    shared: {
      pending: null
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      baseQueue: currentQueue.baseQueue,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(expirationTime, suspenseConfig) {
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  update.next = update;

  {
    update.priority = getCurrentPriorityLevel();
  }

  return update;
}
function enqueueUpdate(fiber, update) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;
  var pending = sharedQueue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  sharedQueue.pending = update;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, update) {
  var current = workInProgress.alternate;

  if (current !== null) {
    // Ensure the work-in-progress queue is a clone
    cloneUpdateQueue(current, workInProgress);
  } // Captured updates go only on the work-in-progress queue.


  var queue = workInProgress.updateQueue; // Append the update to the end of the list.

  var last = queue.baseQueue;

  if (last === null) {
    queue.baseQueue = update.next = update;
    update.next = update;
  } else {
    update.next = last.next;
    last.next = update;
  }
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              payload.call(instance, prevState, nextProps);
            }
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  } // The last rebase update that is NOT part of the base state.


  var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    baseQueue = pendingQueue;
    queue.shared.pending = null; // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      var currentQueue = current.updateQueue;

      if (currentQueue !== null) {
        currentQueue.baseQueue = pendingQueue;
      }
    }
  } // These values may change as we process the queue.


  if (baseQueue !== null) {
    var first = baseQueue.next; // Iterate through the list of updates to compute the result.

    var newState = queue.baseState;
    var newExpirationTime = NoWork;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;

    if (first !== null) {
      var update = first;

      do {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          // Priority is insufficient. Skip this update. If this is the first
          // skipped update, the previous update/state is the new base
          // update/state.
          var clone = {
            expirationTime: update.expirationTime,
            suspenseConfig: update.suspenseConfig,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newBaseQueueLast === null) {
            newBaseQueueFirst = newBaseQueueLast = clone;
            newBaseState = newState;
          } else {
            newBaseQueueLast = newBaseQueueLast.next = clone;
          } // Update the remaining priority in the queue.


          if (updateExpirationTime > newExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority.
          if (newBaseQueueLast !== null) {
            var _clone = {
              expirationTime: Sync,
              // This update is going to be committed so we never want uncommit it.
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            newBaseQueueLast = newBaseQueueLast.next = _clone;
          } // Mark the event time of this update as relevant to this render pass.
          // TODO: This should ideally use the true event time of this update rather than
          // its priority which is a derived and not reverseable value.
          // TODO: We should skip this update if it was already committed but currently
          // we have no way of detecting the difference between a committed and suspended
          // update here.


          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
          var callback = update.callback;

          if (callback !== null) {
            workInProgress.effectTag |= Callback;
            var effects = queue.effects;

            if (effects === null) {
              queue.effects = [update];
            } else {
              effects.push(update);
            }
          }
        }

        update = update.next;

        if (update === null || update === first) {
          pendingQueue = queue.shared.pending;

          if (pendingQueue === null) {
            break;
          } else {
            // An update was scheduled from inside a reducer. Add the new
            // pending updates to the end of the list and keep processing.
            update = baseQueue.next = pendingQueue.next;
            pendingQueue.next = first;
            queue.baseQueue = baseQueue = pendingQueue;
            queue.shared.pending = null;
          }
        }
      } while (true);
    }

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    }

    queue.baseState = newBaseState;
    queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.

    markUnprocessedUpdateTime(newExpirationTime);
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
function requestCurrentSuspenseConfig() {
  return ReactCurrentBatchConfig.suspense;
}

var fakeInternalInstance = {};
var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + "_" + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if ( workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.expirationTime === NoWork) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    {
      if ( workInProgress.mode & StrictMode) {
        // Invoke the function an extra time to help detect side-effects.
        instance.shouldComponentUpdate(newProps, newState, nextContext);
      }
    }

    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if ( workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');

      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    child._store.validated = true;
    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref" );
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
        }
      }

      if (!element._owner) {
        {
          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information." );
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';

    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }

    {
      {
        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum );
      }
    }
  }
}

function warnOnFunctionType() {
  {
    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null) {
      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) )) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error( "An iterable object provided no iterator." );
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        switch (child.tag) {
          case Fragment:
            {
              if (element.type === REACT_FRAGMENT_TYPE) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;

                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }

                return existing;
              }

              break;
            }

          case Block:

          // We intentionally fallthrough here if enableBlocksAPI is not on.
          // eslint-disable-next-lined no-fallthrough

          default:
            {
              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
               isCompatibleFamilyForHotReloading(child, element) )) {
                deleteRemainingChildren(returnFiber, child.sibling);

                var _existing3 = useFiber(child, element.props);

                _existing3.ref = coerceRef(returnFiber, child, element);
                _existing3.return = returnFiber;

                {
                  _existing3._debugSource = element._source;
                  _existing3._debugOwner = element._owner;
                }

                return _existing3;
              }

              break;
            }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case FunctionComponent:
          {
            var Component = returnFiber.type;

            {
              {
                throw Error( (Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (!(current === null || workInProgress.child === current.child)) {
    {
      throw Error( "Resuming work not yet implemented." );
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, renderExpirationTime) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, renderExpirationTime);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

function createDeprecatedResponderListener(responder, props) {
  var eventResponderListener = {
    responder: responder,
    props: props
  };

  {
    Object.freeze(eventResponderListener);
  }

  return eventResponderListener;
}

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Layout =
/*    */
2;
var Passive$1 =
/*   */
4;

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
  renderExpirationTime = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.expirationTime = NoWork; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (workInProgress.expirationTime === renderExpirationTime) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      workInProgress.expirationTime = NoWork;

      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
        {
          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
        }
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (workInProgress.expirationTime === renderExpirationTime);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  didScheduleRenderPhaseUpdate = false;

  if (!!didRenderTooFewHooks) {
    {
      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);

  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }
  }

  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
  }

  didScheduleRenderPhaseUpdate = false;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error( "Rendered more hooks than during the previous render." );
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime < renderExpirationTime) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          expirationTime: update.expirationTime,
          suspenseConfig: update.suspenseConfig,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.


        if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
          currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
          markUnprocessedUpdateTime(updateExpirationTime);
        }
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            expirationTime: Sync,
            // This update is going to be committed so we never want uncommit it.
            suspenseConfig: update.suspenseConfig,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Mark the event time of this update as relevant to this render pass.
        // TODO: This should ideally use the true event time of this update rather than
        // its priority which is a derived and not reverseable value.
        // TODO: We should skip this update if it was already committed but currently
        // we have no way of detecting the difference between a committed and suspended
        // update here.


        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

        if (update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(hookEffectTag, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value, config) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function updateDeferredValue(value, config) {
  var _updateState = updateState(),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function rerenderDeferredValue(value, config) {
  var _rerenderState = rerenderState(),
      prevValue = _rerenderState[0],
      setValue = _rerenderState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function startTransition(setPending, config, callback) {
  var priorityLevel = getCurrentPriorityLevel();
  runWithPriority(priorityLevel < UserBlockingPriority ? UserBlockingPriority : priorityLevel, function () {
    setPending(true);
  });
  runWithPriority(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setPending(false);
      callback();
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  });
}

function mountTransition(config) {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1];

  var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function updateTransition(config) {
  var _updateState2 = updateState(),
      isPending = _updateState2[0],
      setPending = _updateState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function rerenderTransition(config) {
  var _rerenderState2 = rerenderState(),
      isPending = _rerenderState2[0],
      setPending = _rerenderState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function dispatchAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var currentTime = requestCurrentTimeForUpdate();
  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    action: action,
    eagerReducer: null,
    eagerState: null,
    next: null
  };

  {
    update.priority = getCurrentPriorityLevel();
  } // Append the update to the end of the list.


  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    update.expirationTime = renderExpirationTime;
    currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
  } else {
    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.eagerReducer = lastRenderedReducer;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleWork(fiber, expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useResponder: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
}

var now$2 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$2();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$2();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$2();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$2() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type, props);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;

            case SuspenseComponent:
              didNotFindHydratableContainerSuspenseInstance(parentContainer);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type, props);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
  if (!supportsHydration) {
    {
      {
        throw Error( "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error( "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function skipPastDehydratedSuspenseInstance(fiber) {
  if (!supportsHydration) {
    {
      {
        throw Error( "Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {
  if (!supportsHydration) {
    return false;
  }

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {
  if (!supportsHydration) {
    return;
  }

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }

  var currentChild = current.child; // This is always exactly one child

  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }

      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

      if (outerPropTypes) {
        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      } // Inner propTypes will be validated in the function component path.

    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false;

      if (updateExpirationTime < renderExpirationTime) {
        // The pending update priority was cleared at the beginning of
        // beginWork. We're about to bail out, but there might be additional
        // updates at a lower priority. Usually, the priority level of the
        // remaining updates is accumlated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.expirationTime = current.expirationTime;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderExpirationTime) {
  {
    workInProgress.effectTag |= Update;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current !== null) {
      // A class component without an instance only mounts if it suspended
      // inside a non-concurrent tree, in an inconsistent state. We want to
      // treat it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.effectTag |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

  {
    var inst = workInProgress.stateNode;

    if (inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictMode) {
        instance.render();
      }

      setIsRendering(false);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(current !== null && updateQueue !== null)) {
    {
      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag = node.effectTag & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
    {
      markSpawnedWork(Never);
    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // A lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.

  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  {
    {
      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
    }
  }
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderExpirationTime);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || workInProgress._debugID || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName2 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName3 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support contextType.', _componentName3);

        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryTime: NoWork
};

function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
  // If the context is telling us that we should show a fallback, and we're not
  // already showing content, then we should show the fallback instead.
  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
}

function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.effectTag |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var nextDidTimeout = false;
  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.

  if (current === null) {
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
    } // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.


    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
      primaryChildFragment.return = workInProgress;

      if ((workInProgress.mode & BlockingMode) === NoMode) {
        // Outside of blocking mode, we commit the effects from the
        // partially completed, timed-out tree, too.
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
        var progressedChild = progressedPrimaryChild;

        while (progressedChild !== null) {
          progressedChild.return = primaryChildFragment;
          progressedChild = progressedChild.sibling;
        }
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
      // fallback children.

      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current.memoizedState;

    if (prevState !== null) {
      // wrapped in a fragment fiber.


      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren2 = nextProps.fallback;

        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

        _primaryChildFragment2.return = workInProgress;

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState = workInProgress.memoizedState;

          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment2.child = _progressedPrimaryChild;
            var _progressedChild2 = _progressedPrimaryChild;

            while (_progressedChild2 !== null) {
              _progressedChild2.return = _primaryChildFragment2;
              _progressedChild2 = _progressedChild2.sibling;
            }
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;

          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }

          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        } // Clone the fallback child fragment, too. These we'll continue
        // working on.


        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

        _fallbackChildFragment2.return = workInProgress;
        _primaryChildFragment2.sibling = _fallbackChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment2;
        return _fallbackChildFragment2;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?
        // Continue rendering the children, like we normally do.

        workInProgress.memoizedState = null;
        return workInProgress.child = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current.child;

      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren3 = nextProps.fallback;

        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);

        _primaryChildFragment3.return = workInProgress;
        _primaryChildFragment3.child = _currentPrimaryChild;

        if (_currentPrimaryChild !== null) {
          _currentPrimaryChild.return = _primaryChildFragment3;
        } // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;


        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState2 = workInProgress.memoizedState;

          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

          _primaryChildFragment3.child = _progressedPrimaryChild2;
          var _progressedChild3 = _progressedPrimaryChild2;

          while (_progressedChild3 !== null) {
            _progressedChild3.return = _primaryChildFragment3;
            _progressedChild3 = _progressedChild3.sibling;
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration2 = 0;
          var _hiddenChild2 = _primaryChildFragment3.child;

          while (_hiddenChild2 !== null) {
            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
            _hiddenChild2 = _hiddenChild2.sibling;
          }

          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
        } // Create a fragment from the fallback children, too.


        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

        _fallbackChildFragment3.return = workInProgress;
        _primaryChildFragment3.sibling = _fallbackChildFragment3;
        _fallbackChildFragment3.effectTag |= Placement;
        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment3;
        return _fallbackChildFragment3;
      } else {
        // Still haven't timed out. Continue rendering the children, like we
        // normally do.
        workInProgress.memoizedState = null;
        var _nextPrimaryChildren2 = nextProps.children;
        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
  }
}

function scheduleWorkOnFiber(fiber, renderExpirationTime) {
  if (fiber.expirationTime < renderExpirationTime) {
    fiber.expirationTime = renderExpirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
    alternate.expirationTime = renderExpirationTime;
  }

  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderExpirationTime);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailExpiration = 0;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.effectTag |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    // Outside of blocking mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  }

  return workInProgress.child;
}

function updateContextProvider(current, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderExpirationTime) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  var updateExpirationTime = workInProgress.expirationTime;

  if (updateExpirationTime !== NoWork) {
    markUnprocessedUpdateTime(updateExpirationTime);
  } // Check if the children have any pending work.


  var childExpirationTime = workInProgress.childExpirationTime;

  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current;
      returnFiber.lastEffect = current;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current;
    }

    current.nextEffect = null;
    current.effectTag = Deletion;
    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork(current, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);

          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
            {
              markSpawnedWork(Never);
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
          }

          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          {
            // Profiler should only call onRender when one of its descendants actually rendered.
            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (hasChildWork) {
              workInProgress.effectTag |= Update;
            }
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (didSuspendBefore) {
              if (_hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.effectTag |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (_hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    } else {
      // An update was scheduled on this fiber, but there are no new props
      // nor legacy context. Set this to false. If an update queue or context
      // consumer produces a changed value, it will set this to true. Otherwise,
      // the component will assume the children have not changed and bail out.
      didReceiveUpdate = false;
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderExpirationTime);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderExpirationTime);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderExpirationTime);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderExpirationTime);

    case Mode:
      return updateMode(current, workInProgress, renderExpirationTime);

    case Profiler:
      return updateProfiler(current, workInProgress, renderExpirationTime);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderExpirationTime);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderExpirationTime);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

if (supportsMutation) {
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
} else if (supportsPersistence) {
  // Persistent host tree mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      // eslint-disable-next-line no-labels
       if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var props = node.memoizedProps;
          var type = node.type;
          instance = cloneHiddenInstance(instance, type, props, node);
        }

        appendInitialChild(parent, instance);
      } else if (node.tag === HostText) {
        var _instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var text = node.memoizedProps;
          _instance = cloneHiddenTextInstance(_instance, text, node);
        }

        appendInitialChild(parent, _instance);
      } else if (node.tag === HostPortal) ; else if (node.tag === SuspenseComponent) {
        if ((node.effectTag & Update) !== NoEffect) {
          // Need to toggle the visibility of the primary children.
          var newIsHidden = node.memoizedState !== null;

          if (newIsHidden) {
            var primaryChildParent = node.child;

            if (primaryChildParent !== null) {
              if (primaryChildParent.child !== null) {
                primaryChildParent.child.return = primaryChildParent;
                appendAllChildren(parent, primaryChildParent, true, newIsHidden);
              }

              var fallbackChildParent = primaryChildParent.sibling;

              if (fallbackChildParent !== null) {
                fallbackChildParent.return = node;
                node = fallbackChildParent;
                continue;
              }
            }
          }
        }

        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


      node = node;

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }; // An unfortunate fork of appendAllChildren because we have two different parent types.


  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      // eslint-disable-next-line no-labels
       if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var props = node.memoizedProps;
          var type = node.type;
          instance = cloneHiddenInstance(instance, type, props, node);
        }

        appendChildToContainerChildSet(containerChildSet, instance);
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (needsVisibilityToggle && isHidden) {
          // This child is inside a timed out tree. Hide it.
          var text = node.memoizedProps;
          _instance3 = cloneHiddenTextInstance(_instance3, text, node);
        }

        appendChildToContainerChildSet(containerChildSet, _instance3);
      } else if (node.tag === HostPortal) ; else if (node.tag === SuspenseComponent) {
        if ((node.effectTag & Update) !== NoEffect) {
          // Need to toggle the visibility of the primary children.
          var newIsHidden = node.memoizedState !== null;

          if (newIsHidden) {
            var primaryChildParent = node.child;

            if (primaryChildParent !== null) {
              if (primaryChildParent.child !== null) {
                primaryChildParent.child.return = primaryChildParent;
                appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
              }

              var fallbackChildParent = primaryChildParent.sibling;

              if (fallbackChildParent !== null) {
                fallbackChildParent.return = node;
                node = fallbackChildParent;
                continue;
              }
            }
          }
        }

        if (node.child !== null) {
          // Continue traversing like normal
          node.child.return = node;
          node = node.child;
          continue;
        }
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


      node = node;

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {
    var portalOrRoot = workInProgress.stateNode;
    var childrenUnchanged = workInProgress.firstEffect === null;

    if (childrenUnchanged) ; else {
      var container = portalOrRoot.containerInfo;
      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

      markUpdate(workInProgress);
      finalizeContainerChildren(container, newChildSet);
    }
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    var currentInstance = current.stateNode;
    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
    // This guarantees that we can reuse all of them.

    var childrenUnchanged = workInProgress.firstEffect === null;

    if (childrenUnchanged && oldProps === newProps) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }

    var recyclableInstance = workInProgress.stateNode;
    var currentHostContext = getHostContext();
    var updatePayload = null;

    if (oldProps !== newProps) {
      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
    }

    if (childrenUnchanged && updatePayload === null) {
      // No changes, just reuse the existing instance.
      // Note that this might release a previous clone.
      workInProgress.stateNode = currentInstance;
      return;
    }

    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
      markUpdate(workInProgress);
    }

    workInProgress.stateNode = newInstance;

    if (childrenUnchanged) {
      // If there are no other effects in this tree, we need to flag this node as having one.
      // Even though we're not going to use it for anything.
      // Otherwise parents won't know that there are new children to propagate upwards.
      markUpdate(workInProgress);
    } else {
      // If children might have changed, we have to add them all to the set.
      appendAllChildren(newInstance, workInProgress, false, false);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    if (oldText !== newText) {
      // If the text content differs, we'll create a new text instance for it.
      var rootContainerInstance = getRootHostContainer();
      var currentHostContext = getHostContext();
      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
      // This lets the parents know that at least one of their children has changed.

      markUpdate(workInProgress);
    } else {
      workInProgress.stateNode = current.stateNode;
    }
  };
} else {
  // No host operations
  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          }
        }

        updateHostContainer(workInProgress);
        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.


            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

            workInProgress.stateNode = instance;
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.


            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;

          if (!nextDidTimeout && prevState !== null) {
            // We just switched from the fallback to the normal children.
            // Delete the fallback.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode during the begin phase?
            var currentFallbackChild = current.child.sibling;

            if (currentFallbackChild !== null) {
              // Deletions go at the beginning of the return fiber's effect list
              var first = workInProgress.firstEffect;

              if (first !== null) {
                workInProgress.firstEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = first;
              } else {
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = null;
              }

              currentFallbackChild.effectTag = Deletion;
            }
          }
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in blocking mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BlockingMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        if (supportsPersistence) {
          // TODO: Only schedule updates if not prevDidTimeout.
          if (nextDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the promise. This flag is also used to hide the
            // primary children.
            workInProgress.effectTag |= Update;
          }
        }

        if (supportsMutation) {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the promise. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if this
            // is currently timed out, too.
            workInProgress.effectTag |= Update;
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      return null;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          return null;
        }

        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.effectTag |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.effectTag |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.effectTag |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                // We need to delete the row we just rendered.
                // Reset the effect list to what it was before we rendered this
                // child. The nested children have already appended themselves.
                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                if (lastEffect !== null) {
                  lastEffect.nextEffect = null;
                } // We're done.


                return null;
              }
            } else if ( // The time it took to render last row is greater than time until
            // the expiration.
            now$1() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. If we can show
              // them, then they really have the same priority as this render.
              // So we'll pick it back up the very next render pass once we've had
              // an opportunity to yield for paint.

              var nextPriority = renderExpirationTime - 1;
              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

              {
                markSpawnedWork(nextPriority);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          if (renderState.tailExpiration === 0) {
            // Heuristic for how long we're willing to spend rendering rows
            // until we just give up and show what we have so far.
            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
            renderState.tailExpiration = now$1() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
            // is a per component value. It should really be since the start
            // of the total render or last commit. Consider using something like
            // globalMostRecentFallbackTime. That doesn't account for being
            // suspended for part of the time or when it's a new render.
            // It should probably use a global start time value instead.
          } // Pop a row.


          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          renderState.renderingStartTime = now$1();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        return null;
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var effectTag = workInProgress.effectTag;

        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;

        if (!((_effectTag & DidCapture) === NoEffect)) {
          {
            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
          }
        }

        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        var _effectTag2 = workInProgress.effectTag;

        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
        }
      }

      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.

      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

function logCapturedError(capturedError) {

  var error = capturedError.error;

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      } // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.


      console['error'](error); // Don't transform to our wrapper
      // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }

    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

    console['error'](combinedMessage); // Don't transform to our wrapper
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;

  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  startPhaseTimer(current, 'componentWillUnmount');
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current, unmountError);
    }
  }
}

function safelyDetachRef(current) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }

        return;
      }

    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitHookEffectListUnmount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  if ((finishedWork.effectTag & Passive) !== NoEffect) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          // TODO (#17945) We should call all passive destroy functions (for all fibers)
          // before calling any create functions. The current approach only serializes
          // these for a single fiber.
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          break;
        }
    }
  }
}

function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        // At this point layout effects have already been destroyed (during mutation phase).
        // This is done to prevent sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListMount(Layout | HasEffect, finishedWork);

        return;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.effectTag & Update) {
          if (current === null) {
            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }

        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }

              if (instance.state !== finishedWork.memoizedState) {
                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance);
        }

        return;
      }

    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props, finishedWork);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        {
          var onRender = finishedWork.memoizedProps.onRender;

          if (typeof onRender === 'function') {
            {
              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  if (supportsMutation) {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
        // Found a nested Suspense component that timed out. Skip over the
        // primary child fragment, which should remain hidden.
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current) {
  var currentRef = current.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current, renderPriorityLevel) {
  onCommitUnmount(current);

  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        var updateQueue = current.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;

            {
              // When the owner fiber is deleted, the destroy function of a passive
              // effect hook is called during the synchronous commit phase. This is
              // a concession to implementation complexity. Calling it in the
              // passive effect phase (like they usually are, when dependencies
              // change during an update) would require either traversing the
              // children of the deleted fiber again, or including unmount effects
              // as part of the fiber effect list.
              //
              // Because this is during the sync commit phase, we need to change
              // the priority.
              //
              // TODO: Reconsider this implementation trade off.
              var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
              runWithPriority(priorityLevel, function () {
                var effect = firstEffect;

                do {
                  var _destroy = effect.destroy;

                  if (_destroy !== undefined) {
                    safelyCallDestroy(current, _destroy);
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              });
            }
          }
        }

        return;
      }

    case ClassComponent:
      {
        safelyDetachRef(current);
        var instance = current.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current, instance);
        }

        return;
      }

    case HostComponent:
      {

        safelyDetachRef(current);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        if (supportsMutation) {
          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
        } else if (supportsPersistence) {
          emptyPortalContainer(current);
        }

        return;
      }

    case FundamentalComponent:
      {

        return;
      }

    case DehydratedFragment:
      {

        return;
      }

    case ScopeComponent:
      {

        return;
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
    !supportsMutation || node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current) {
  var alternate = current.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.

  current.return = null;
  current.child = null;
  current.memoizedState = null;
  current.updateQueue = null;
  current.dependencies = null;
  current.alternate = null;
  current.firstEffect = null;
  current.lastEffect = null;
  current.pendingProps = null;
  current.memoizedProps = null;
  current.stateNode = null;

  if (alternate !== null) {
    detachFiber(alternate);
  }
}

function emptyPortalContainer(current) {
  if (!supportsPersistence) {
    return;
  }

  var portal = current.stateNode;
  var containerInfo = portal.containerInfo;
  var emptyChildSet = createContainerChildSet(containerInfo);
  replaceContainerChildren(containerInfo, emptyChildSet);
}

function commitContainer(finishedWork) {
  if (!supportsPersistence) {
    return;
  }

  switch (finishedWork.tag) {
    case ClassComponent:
    case HostComponent:
    case HostText:
    case FundamentalComponent:
      {
        return;
      }

    case HostRoot:
    case HostPortal:
      {
        var portalOrRoot = finishedWork.stateNode;
        var containerInfo = portalOrRoot.containerInfo,
            pendingChildren = portalOrRoot.pendingChildren;
        replaceContainerChildren(containerInfo, pendingChildren);
        return;
      }
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {
  if (!supportsMutation) {
    return;
  } // Recursively insert all host nodes into the parent.


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

  }

  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  if (isContainer) {
    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
  } else {
    insertOrAppendPlacementNode(finishedWork, before, parent);
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current, renderPriorityLevel) {
  if (supportsMutation) {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current, renderPriorityLevel);
  } else {
    // Detach refs and call componentWillUnmount() on the whole subtree.
    commitNestedUnmounts(finishedRoot, current, renderPriorityLevel);
  }

  detachFiber(current);
}

function commitWork(current, finishedWork) {
  if (!supportsMutation) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case MemoComponent:
      case SimpleMemoComponent:
      case Block:
        {
          // Layout effects are destroyed during the mutation phase so that all
          // destroy functions for all fibers are called before any create functions.
          // This prevents sibling component effects from interfering with each other,
          // e.g. a destroy function in one component should never override a ref set
          // by a create function in another component during the same commit.
          commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
          return;
        }

      case Profiler:
        {
          return;
        }

      case SuspenseComponent:
        {
          commitSuspenseComponent(finishedWork);
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case SuspenseListComponent:
        {
          attachSuspenseRetryListeners(finishedWork);
          return;
        }

      case HostRoot:
        {
          if (supportsHydration) {
            var root = finishedWork.stateNode;

            if (root.hydrate) {
              // We've just hydrated. No need to hydrate again.
              root.hydrate = false;
              commitHydratedContainer(root.containerInfo);
            }
          }

          break;
        }
    }

    commitContainer(finishedWork);
    return;
  }

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        // Layout effects are destroyed during the mutation phase so that all
        // destroy functions for all fibers are called before any create functions.
        // This prevents sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current !== null ? current.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current !== null ? current.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        if (supportsHydration) {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;
  var newDidTimeout;
  var primaryChildParent = finishedWork;

  if (newState === null) {
    newDidTimeout = false;
  } else {
    newDidTimeout = true;
    primaryChildParent = finishedWork.child;
    markCommitTimeOfFallback();
  }

  if (supportsMutation && primaryChildParent !== null) {
    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
  if (!supportsHydration) {
    return;
  }

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of thenables.
  // For each thenable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var thenables = finishedWork.updateQueue;

  if (thenables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    thenables.forEach(function (thenable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

      if (!retryCache.has(thenable)) {
        {
          if (thenable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(thenable);
        thenable.then(retry, retry);
      }
    });
  }
}

function commitResetTextContent(current) {
  if (!supportsMutation) {
    return;
  }

  resetTextContent(current.stateNode);
}

var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      logError(fiber, errorInfo);
      return getDerivedStateFromError(error$1);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logError(fiber, errorInfo);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (fiber.expirationTime !== Sync) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
          }
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }

  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    if ((sourceFiber.mode & BlockingMode) === NoMode) {
      // Reset the memoizedState to what it was before we attempted
      // to render it.
      var currentSource = sourceFiber.alternate;

      if (currentSource) {
        sourceFiber.updateQueue = currentSource.updateQueue;
        sourceFiber.memoizedState = currentSource.memoizedState;
        sourceFiber.expirationTime = currentSource.expirationTime;
      } else {
        sourceFiber.updateQueue = null;
        sourceFiber.memoizedState = null;
      }
    }

    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var thenables = _workInProgress.updateQueue;

        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        } // If the boundary is outside of blocking mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a blocking mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BlockingMode) === NoMode) {
          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(Sync, null);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.expirationTime = Sync; // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
        // this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, renderExpirationTime, thenable);
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*                    */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
// Describes where we are in the React execution stack
var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The expiration time we're rendering

var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
// This is conceptually a time stamp but expressed in terms of an ExpirationTime
// because we deal mostly with expiration times in the hot path, so this avoids
// the conversion happening in the hot path.

var workInProgressRootLatestProcessedExpirationTime = Sync;
var workInProgressRootLatestSuspenseTimeout = Sync;
var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
// This flag determines if it might be worthwhile to restart if an opportunity
// happens latere.

var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500;
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority;
var pendingPassiveEffectsExpirationTime = NoWork;
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.

var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.

var currentEventTime = NoWork;
function requestCurrentTimeForUpdate() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return msToExpirationTime(now$1());
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoWork) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = msToExpirationTime(now$1());
  return currentEventTime;
}
function getCurrentTime() {
  return msToExpirationTime(now$1());
}
function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return Sync;
  }

  var priorityLevel = getCurrentPriorityLevel();

  if ((mode & ConcurrentMode) === NoMode) {
    return priorityLevel === ImmediatePriority ? Sync : Batched;
  }

  if ((executionContext & RenderContext) !== NoContext) {
    // Use whatever time we're already rendering
    // TODO: Should there be a way to opt out, like with `runWithPriority`?
    return renderExpirationTime$1;
  }

  var expirationTime;

  if (suspenseConfig !== null) {
    // Compute an expiration time based on the Suspense timeout.
    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  } else {
    // Compute an expiration time based on the Scheduler priority.
    switch (priorityLevel) {
      case ImmediatePriority:
        expirationTime = Sync;
        break;

      case UserBlockingPriority:
        // TODO: Rename this to computeUserBlockingExpiration
        expirationTime = computeInteractiveExpiration(currentTime);
        break;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowPriority
        // TODO: Rename this to... something better.
        expirationTime = computeAsyncExpiration(currentTime);
        break;

      case IdlePriority:
        expirationTime = Idle;
        break;

      default:
        {
          {
            throw Error( "Expected a valid priority level" );
          }
        }

    }
  } // If we're in the middle of rendering a tree, do not update at the same
  // expiration time that is already rendering.
  // TODO: We shouldn't have to do this if the update is on a different root.
  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
  // the root when we check for this condition.


  if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
    // This is a trick to move this update into a separate batch
    expirationTime -= 1;
  }

  return expirationTime;
}
function scheduleUpdateOnFiber(fiber, expirationTime) {
  checkForNestedUpdates();
  warnAboutRenderPhaseUpdatesInDEV(fiber);
  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return;
  }

  checkForInterruption(fiber, expirationTime);
  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
  // priority as an argument to that function and this one.

  var priorityLevel = getCurrentPriorityLevel();

  if (expirationTime === Sync) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of legacy mode.
        flushSyncCallbackQueue();
      }
    }
  } else {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, expirationTime);
  }

  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
  // discrete, even inside a discrete event.
  priorityLevel === UserBlockingPriority || priorityLevel === ImmediatePriority)) {
    // This is the result of a discrete event. Track the lowest priority
    // discrete update per root so we can flush them early, if needed.
    if (rootsWithPendingDiscreteUpdates === null) {
      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
    } else {
      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
      }
    }
  }
}
var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  } // Walk the parent path to the root and update the child expiration time.


  var node = fiber.return;
  var root = null;

  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;

      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;

        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }

      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
  }

  if (root !== null) {
    if (workInProgressRoot === root) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that's unprocessed work on this root.
      markUnprocessedUpdateTime(expirationTime);

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: This happens to work when receiving an update during the render
        // phase, because of the trick inside computeExpirationForFiber to
        // subtract 1 from `renderExpirationTime` to move it into a
        // separate bucket. But we should probably model it with an exception,
        // using the same mechanism we use to force hydration of a subtree.
        // TODO: This does not account for low pri updates that were already
        // scheduled before the root started rendering. Need to track the next
        // pending expiration time (perhaps by backtracking the return path) and
        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
        markRootSuspendedAtTime(root, renderExpirationTime$1);
      }
    } // Mark that the root has a pending update.


    markRootUpdatedAtTime(root, expirationTime);
  }

  return root;
}

function getNextRootExpirationTimeToWorkOn(root) {
  // Determines the next expiration time that the root should render, taking
  // into account levels that may be suspended, or levels that may have
  // received a ping.
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    return lastExpiredTime;
  } // "Pending" refers to any update that hasn't committed yet, including if it
  // suspended. The "suspended" range is therefore a subset.


  var firstPendingTime = root.firstPendingTime;

  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
    // The highest priority pending time is not suspended. Let's work on that.
    return firstPendingTime;
  } // If the first pending time is suspended, check if there's a lower priority
  // pending level that we know about. Or check if we received a ping. Work
  // on whichever is higher priority.


  var lastPingedTime = root.lastPingedTime;
  var nextKnownPendingLevel = root.nextKnownPendingLevel;
  var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

  if ( nextLevel <= Idle && firstPendingTime !== nextLevel) {
    // Don't work on Idle/Never priority unless everything else is committed.
    return NoWork;
  }

  return nextLevel;
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the
// expiration time of the existing task is the same as the expiration time of
// the next level that the root has work on. This function is called on every
// update, and right before exiting a task.


function ensureRootIsScheduled(root) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    // Special case: Expired work should flush synchronously.
    root.callbackExpirationTime = Sync;
    root.callbackPriority = ImmediatePriority;
    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    return;
  }

  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
  var existingCallbackNode = root.callbackNode;

  if (expirationTime === NoWork) {
    // There's nothing to work on.
    if (existingCallbackNode !== null) {
      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      root.callbackPriority = NoPriority;
    }

    return;
  } // TODO: If this is an update, we already read the current time. Pass the
  // time as an argument.


  var currentTime = requestCurrentTimeForUpdate();
  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
  // expiration time. Otherwise, we'll cancel it and schedule a new one.

  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;
    var existingCallbackExpirationTime = root.callbackExpirationTime;

    if ( // Callback must have the exact same expiration time.
    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
    existingCallbackPriority >= priorityLevel) {
      // Existing callback is sufficient.
      return;
    } // Need to schedule a new task.
    // TODO: Instead of scheduling a new task, we should be able to change the
    // priority of the existing one.


    cancelCallback(existingCallbackNode);
  }

  root.callbackExpirationTime = expirationTime;
  root.callbackPriority = priorityLevel;
  var callbackNode;

  if (expirationTime === Sync) {
    // Sync React callbacks are scheduled on a special internal queue
    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
    // ordering because tasks are processed in timeout order.
    {
      timeout: expirationTimeToMs(expirationTime) - now$1()
    });
  }

  root.callbackNode = callbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoWork;

  if (didTimeout) {
    // The render task took too long to complete. Mark the current time as
    // expired to synchronously render all expired work in a single batch.
    var currentTime = requestCurrentTimeForUpdate();
    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

    ensureRootIsScheduled(root);
    return null;
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

  if (expirationTime !== NoWork) {
    var originalCallbackNode = root.callbackNode;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Should not already be working." );
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // There's still work left over. Exit without committing.
        stopInterruptedWorkLoopTimer();
      } else {
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        stopFinishedWorkLoopTimer();
        var finishedWork = root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
      }

      ensureRootIsScheduled(root);

      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
    }
  }

  return null;
}

function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error( "Root did not complete. This is a bug in React." );
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // If this was an async render, the error may have happened due to
        // a mutation in a concurrent event. Try rendering one more time,
        // synchronously, to see if the error goes away. If there are
        // lower priority updates, let's include those, too, in case they
        // fix the inconsistency. Render at Idle to include all updates.
        // If it was Idle or Never or some not-yet-invented time, render
        // at that time.
        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
        // and therefore not hit this path again.

        break;
      }

    case RootSuspended:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        } // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.
        // If we have processed new updates during this render, we may now
        // have a new loading state ready. We want to ensure that we commit
        // that as soon as possible.


        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // If we have not processed any new updates during this pass, then
          // this is either a retry of an existing fallback state or a
          // hidden tree. Hidden trees shouldn't be batched with other work
          // and after that's fixed it can only be a retry. We're going to
          // throttle committing retries so that we don't show too many
          // loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            if (workInProgressRootHasPendingPing) {
              var lastPingedTime = root.lastPingedTime;

              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                // This render was pinged but we didn't get to restart
                // earlier so try restarting now instead.
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }

            var nextTime = getNextRootExpirationTimeToWorkOn(root);

            if (nextTime !== NoWork && nextTime !== expirationTime) {
              // There's additional work on this root.
              break;
            }

            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              root.lastPingedTime = lastSuspendedTime;
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var _lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === _lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // We're suspended in a state that should be avoided. We'll try to
          // avoid committing it for as long as the timeouts let us.
          if (workInProgressRootHasPendingPing) {
            var _lastPingedTime = root.lastPingedTime;

            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
              // This render was pinged but we didn't get to restart earlier
              // so try restarting now instead.
              root.lastPingedTime = expirationTime;
              prepareFreshStack(root, expirationTime);
              break;
            }
          }

          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
            // There's additional work on this root.
            break;
          }

          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
            // We should prefer to render the fallback of at the last
            // suspended level. Ping the last suspended level to try
            // rendering it again.
            root.lastPingedTime = _lastSuspendedTime;
            break;
          }

          var _msUntilTimeout;

          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
            // We have processed a suspense config whose expiration time we
            // can use as the timeout.
            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now$1();
          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
            // This should never normally happen because only new updates
            // cause delayed states, so we should have processed something.
            // However, this could also happen in an offscreen tree.
            _msUntilTimeout = 0;
          } else {
            // If we don't have a suspense config, we're going to use a
            // heuristic to determine how long we can suspend.
            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
            var currentTimeMs = now$1();
            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
            var timeElapsed = currentTimeMs - eventTimeMs;

            if (timeElapsed < 0) {
              // We get this wrong some time since we estimate the time.
              timeElapsed = 0;
            }

            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
            // event time is exact instead of inferred from expiration time
            // we don't need this.

            if (timeUntilExpirationMs < _msUntilTimeout) {
              _msUntilTimeout = timeUntilExpirationMs;
            }
          } // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
          // If we have exceeded the minimum loading delay, which probably
          // means we have shown a spinner already, we might have to suspend
          // a bit longer to ensure that the spinner is shown for
          // enough time.
          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

          if (_msUntilTimeout2 > 10) {
            markRootSuspendedAtTime(root, expirationTime);
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
            break;
          }
        }

        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error( "Unknown root exit status." );
          }
        }
      }
  }
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  // Check if there's expired work on this root. Otherwise, render at Sync.
  var lastExpiredTime = root.lastExpiredTime;
  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
    prepareFreshStack(root, expirationTime);
    startWorkOnPendingInteractions(root, expirationTime);
  } // If we have a work-in-progress fiber, it means there's still work to do
  // in this root.


  if (workInProgress !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    var prevInteractions = pushInteractions(root);
    startWorkLoopTimer(workInProgress);

    do {
      try {
        workLoopSync();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (true);

    resetContextDependencies();
    executionContext = prevExecutionContext;
    popDispatcher(prevDispatcher);

    {
      popInteractions(prevInteractions);
    }

    if (workInProgressRootExitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      stopInterruptedWorkLoopTimer();
      prepareFreshStack(root, expirationTime);
      markRootSuspendedAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
      throw fatalError;
    }

    if (workInProgress !== null) {
      // This is a sync render, so we should have finished the whole tree.
      {
        {
          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    } else {
      // We now have a consistent tree. Because this is a sync render, we
      // will commit it even if something suspended.
      stopFinishedWorkLoopTimer();
      root.finishedWork = root.current.alternate;
      root.finishedExpirationTime = expirationTime;
      finishSyncRender(root);
    } // Before exiting, make sure there's a callback scheduled for the next
    // pending level.


    ensureRootIsScheduled(root);
  }

  return null;
}

function finishSyncRender(root) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;
  commitRoot(root);
}

function flushRoot(root, expirationTime) {
  markRootExpiredAtTime(root, expirationTime);
  ensureRootIsScheduled(root);

  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
    flushSyncCallbackQueue();
  }
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    {
      if ((executionContext & RenderContext) !== NoContext) {
        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
      }
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}
function deferredUpdates(fn) {
  // TODO: Remove in favor of Scheduler.next
  return runWithPriority(NormalPriority, fn);
}
function syncUpdates(fn, a, b, c) {
  return runWithPriority(ImmediatePriority, fn.bind(null, a, b, c));
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (expirationTime, root) {
      markRootExpiredAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
    }); // Now flush the immediate queue.

    flushSyncCallbackQueue();
  }
}

function batchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates(fn, a, b, c, d) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  try {
    // Should this
    return runWithPriority(UserBlockingPriority, fn.bind(null, a, b, c, d));
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      {
        throw Error( "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering." );
      }
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return runWithPriority(ImmediatePriority, fn.bind(null, a));
  } finally {
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    flushSyncCallbackQueue();
  }
}
function flushControlled(fn) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    runWithPriority(ImmediatePriority, fn);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}

function prepareFreshStack(root, expirationTime) {
  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null);
  renderExpirationTime$1 = expirationTime;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootLatestProcessedExpirationTime = Sync;
  workInProgressRootLatestSuspenseTimeout = Sync;
  workInProgressRootCanSuspendUsingConfig = null;
  workInProgressRootNextUnprocessedUpdateTime = NoWork;
  workInProgressRootHasPendingPing = false;

  {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }
}

function handleError(root, thrownValue) {
  do {
    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber();

      if (workInProgress === null || workInProgress.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // interntionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return null;
      }

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
      }

      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
      workInProgress = completeUnitOfWork(workInProgress);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;
      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher(root) {
  var prevDispatcher = ReactCurrentDispatcher$1.current;
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$1.current = prevDispatcher;
}

function pushInteractions(root) {
  {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }
}

function popInteractions(prevInteractions) {
  {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now$1();
}
function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
    workInProgressRootLatestProcessedExpirationTime = expirationTime;
  }

  if (suspenseConfig !== null) {
    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
    }
  }
}
function markUnprocessedUpdateTime(expirationTime) {
  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
  }
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there's a lower priority update somewhere else in the tree.


  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
    // Mark the current render as suspended, and then mark that there's a
    // pending update.
    // TODO: This should immediately interrupt the current render, instead
    // of waiting until the next time we yield.
    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function inferTimeFromExpirationTime(expirationTime) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
}

function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time by subtracting the timeout
  // that was added to the event time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  startWorkTimer(unitOfWork);
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(unitOfWork);
  }

  ReactCurrentOwner$2.current = null;
  return next;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  workInProgress = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = workInProgress.alternate;
    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      setCurrentFiber(workInProgress);
      var next = void 0;

      if ( (workInProgress.mode & ProfileMode) === NoMode) {
        next = completeWork(current, workInProgress, renderExpirationTime$1);
      } else {
        startProfilerTimer(workInProgress);
        next = completeWork(current, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      stopWorkTimer(workInProgress);
      resetCurrentFiber();
      resetChildExpirationTime(workInProgress);

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return next;
      }

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }

        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }

          returnFiber.lastEffect = workInProgress.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }

          returnFiber.lastEffect = workInProgress;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
      }

      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        // TODO: The name stopFailedWorkTimer is misleading because Suspense
        // also captures and restarts.
        stopFailedWorkTimer(workInProgress);
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      stopWorkTimer(workInProgress);

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }
    }

    var siblingFiber = workInProgress.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      return siblingFiber;
    } // Otherwise, return to the parent


    workInProgress = returnFiber;
  } while (workInProgress !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }

  return null;
}

function getRemainingExpirationTime(fiber) {
  var updateExpirationTime = fiber.expirationTime;
  var childExpirationTime = fiber.childExpirationTime;
  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
}

function resetChildExpirationTime(completedWork) {
  if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

  if ( (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;

      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }

      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;

      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }

      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }

      _child = _child.sibling;
    }
  }

  completedWork.childExpirationTime = newChildExpirationTime;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  var finishedWork = root.finishedWork;
  var expirationTime = root.finishedExpirationTime;

  if (finishedWork === null) {
    return null;
  }

  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;

  if (!(finishedWork !== root.current)) {
    {
      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackExpirationTime = NoWork;
  root.callbackPriority = NoPriority;
  root.nextKnownPendingLevel = NoWork;
  startCommitTimer(); // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    renderExpirationTime$1 = NoWork;
  } // This indicates that the last root we worked on is not the same one that
  // we're committing now. This most commonly happens when a suspended root
  // times out.
  // Get the list of effects.


  var firstEffect;

  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    startCommitSnapshotEffectsTimer();
    prepareForCommit(root.containerInfo);
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitSnapshotEffectsTimer();

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    startCommitHostEffectsTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitHostEffectsTimer();
    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    startCommitLifeCyclesTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitLifeCyclesTimer();
    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    startCommitSnapshotEffectsTimer();
    stopCommitSnapshotEffectsTimer();

    {
      recordCommitTime();
    }

    startCommitHostEffectsTimer();
    stopCommitHostEffectsTimer();
    startCommitLifeCyclesTimer();
    stopCommitLifeCyclesTimer();
  }

  stopCommitTimer();
  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsExpirationTime = expirationTime;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;
      nextEffect = nextNextEffect;
    }
  } // Check if there's remaining work on this root


  var remainingExpirationTime = root.firstPendingTime;

  if (remainingExpirationTime !== NoWork) {
    {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingExpirationTime);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, expirationTime);
    }
  }

  if (remainingExpirationTime === Sync) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.

  ensureRootIsScheduled(root);

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // This is a legacy edge case. We just committed the initial mount of
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.
    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();
  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if ((effectTag & Snapshot) !== NoEffect) {
      setCurrentFiber(nextEffect);
      recordEffect();
      var current = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current, nextEffect);
      resetCurrentFiber();
    }

    if ((effectTag & Passive) !== NoEffect) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current = nextEffect.alternate;

      if (current !== null) {
        commitDetachRef(current);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.effectTag &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.effectTag &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.effectTag &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.effectTag &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect, renderPriorityLevel);
          break;
        }
    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


    recordEffect();
    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedExpirationTime) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current = nextEffect.alternate;
      commitLifeCycles(root, current, nextEffect);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority;
    return runWithPriority(priorityLevel, flushPassiveEffectsImpl);
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var expirationTime = pendingPassiveEffectsExpirationTime;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsExpirationTime = NoWork;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Cannot flush passive effects while already rendering." );
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root);

  {
    // Note: This currently assumes there are no passive effects on the root fiber
    // because the root is not part of its own effect list.
    // This could change in the future.
    var _effect2 = root.current.firstEffect;

    while (_effect2 !== null) {
      {
        setCurrentFiber(_effect2);
        invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

        if (hasCaughtError()) {
          if (!(_effect2 !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error5 = clearCaughtError();

          captureCommitPhaseError(_effect2, _error5);
        }

        resetCurrentFiber();
      }

      var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC

      _effect2.nextEffect = null;
      _effect2 = nextNextEffect;
    }
  }

  {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, expirationTime);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
  enqueueUpdate(rootFiber, update);
  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, Sync);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
        Sync);
        enqueueUpdate(fiber, update);
        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, thenable, suspendedTime) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, we'll always suspend so we can always
    // restart. If we're suspended without any updates, it might be a retry.
    // If it's early in the retry we can restart. We can't know for sure
    // whether we'll eventually process an update during this render pass,
    // but it's somewhat unlikely that we get to a ping before that, since
    // getting to the root most update is usually very fast.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root. Don't need to schedule a ping because
      // we're already working on this tree.
      prepareFreshStack(root, renderExpirationTime$1);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootHasPendingPing = true;
    }

    return;
  }

  if (!isRootSuspendedAtTime(root, suspendedTime)) {
    // The root is no longer suspended at this time.
    return;
  }

  var lastPingedTime = root.lastPingedTime;

  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
    // There's already a lower priority ping scheduled.
    return;
  } // Mark the time at which this ping was scheduled.


  root.lastPingedTime = suspendedTime;

  ensureRootIsScheduled(root);
  schedulePendingInteractions(root, suspendedTime);
}

function retryTimedOutBoundary(boundaryFiber, retryTime) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryTime === NoWork) {
    var suspenseConfig = null; // Retries don't carry over the already committed update.

    var currentTime = requestCurrentTimeForUpdate();
    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
  } // TODO: Special case idle priority?


  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, retryTime);
  }
}
function resolveRetryThenable(boundaryFiber, thenable) {
  var retryTime = NoWork; // Default

  var retryCache;

  {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

  if (busyMinDurationMs <= 0) {
    return 0;
  }

  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

  var currentTimeMs = now$1();
  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
  var timeElapsed = currentTimeMs - eventTimeMs;

  if (timeElapsed <= busyDelayMs) {
    // If we haven't yet waited longer than the initial delay, we don't
    // have to wait any additional time.
    return 0;
  }

  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

  return msUntilTimeout;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function stopFinishedWorkLoopTimer() {
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function stopInterruptedWorkLoopTimer() {
  // TODO: Track which fiber caused the interruption.
  var didCompleteRoot = false;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
    interruptedBy = fiberThatReceivedUpdate;
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    }
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
  }
}

var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, expirationTime) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, expirationTime);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && (executionContext & RenderContext) !== NoContext) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if (warnsIfNotActing === true && IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if (warnsIfNotActing === true && (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if (warnsIfNotActing === true && executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;

        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      }
    }
  }
}

function computeThreadID(root, expirationTime) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + root.interactionThreadID;
}

function markSpawnedWork(expirationTime) {

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [expirationTime];
  } else {
    spawnedWorkDuringRender.push(expirationTime);
  }
}

function scheduleInteractions(root, expirationTime, interactions) {

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(expirationTime);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, expirationTime) {

  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, expirationTime) {
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
    if (scheduledExpirationTime >= expirationTime) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedExpirationTime) {

  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      var threadID = computeThreadID(root, committedExpirationTime);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
        pendingInteractionMap.delete(scheduledExpirationTime);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
}

var onScheduleFiberRoot = null;
var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    if (true) {
      // Only used by Fast Refresh
      if (typeof hook.onScheduleFiberRoot === 'function') {
        onScheduleFiberRoot = function (root, children) {
          try {
            hook.onScheduleFiberRoot(rendererID, root, children);
          } catch (err) {
            if ( true && !hasLoggedError) {
              hasLoggedError = true;

              error('React instrumentation encountered an error: %s', err);
            }
          }
        };
      }
    }

    onCommitFiberRoot = function (root, expirationTime) {
      try {
        var didError = (root.current.effectTag & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          var currentTime = getCurrentTime();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        } else {
          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
        }
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };

    onCommitFiberUnmount = function (fiber) {
      try {
        hook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onScheduleRoot(root, children) {
  if (typeof onScheduleFiberRoot === 'function') {
    onScheduleFiberRoot(root, children);
  }
}
function onCommitRoot(root, expirationTime) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root, expirationTime);
  }
}
function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.effectTag = NoEffect;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  } // This is normally DEV-only except www when it adds listeners.
  // TODO: remove the User Timing integration in favor of Root Events.


  {
    this._debugID = debugCounter++;
    this._debugIsCurrentlyTiming = false;
  }

  {
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      {
        workInProgress._debugID = current._debugID;
      }

      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    expirationTime: currentDependencies.expirationTime,
    firstContext: currentDependencies.firstContext,
    responders: currentDependencies.responders
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderExpirationTime) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childExpirationTime = NoWork;
    workInProgress.expirationTime = renderExpirationTime;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BlockingMode | StrictMode;
  } else if (tag === BlockingRoot) {
    mode = BlockingMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber;
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = Mode;
        mode |= ConcurrentMode | BlockingMode | StrictMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_BLOCK_TYPE:
                fiberTag = Block;
                break getTag;

            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
            }
          }
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      error('Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  {
    target._debugID = source._debugID;
  }

  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.current = null;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.pingCache = null;
  this.finishedExpirationTime = NoWork;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoPriority;
  this.firstPendingTime = NoWork;
  this.firstSuspendedTime = NoWork;
  this.lastSuspendedTime = NoWork;
  this.nextKnownPendingLevel = NoWork;
  this.lastPingedTime = NoWork;
  this.lastExpiredTime = NoWork;

  {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  initializeUpdateQueue(uninitializedFiber);
  return root;
}
function isRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;
  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
}
function markRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;

  if (firstSuspendedTime < expirationTime) {
    root.firstSuspendedTime = expirationTime;
  }

  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
    root.lastSuspendedTime = expirationTime;
  }

  if (expirationTime <= root.lastPingedTime) {
    root.lastPingedTime = NoWork;
  }

  if (expirationTime <= root.lastExpiredTime) {
    root.lastExpiredTime = NoWork;
  }
}
function markRootUpdatedAtTime(root, expirationTime) {
  // Update the range of pending times
  var firstPendingTime = root.firstPendingTime;

  if (expirationTime > firstPendingTime) {
    root.firstPendingTime = expirationTime;
  } // Update the range of suspended times. Treat everything lower priority or
  // equal to this update as unsuspended.


  var firstSuspendedTime = root.firstSuspendedTime;

  if (firstSuspendedTime !== NoWork) {
    if (expirationTime >= firstSuspendedTime) {
      // The entire suspended range is now unsuspended.
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (expirationTime >= root.lastSuspendedTime) {
      root.lastSuspendedTime = expirationTime + 1;
    } // This is a pending level. Check if it's higher priority than the next
    // known pending level.


    if (expirationTime > root.nextKnownPendingLevel) {
      root.nextKnownPendingLevel = expirationTime;
    }
  }
}
function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
  // Update the range of pending times
  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
  // equal to this update as unsuspended.

  if (finishedExpirationTime <= root.lastSuspendedTime) {
    // The entire suspended range is now unsuspended.
    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
    // Part of the suspended range is now unsuspended. Narrow the range to
    // include everything between the unsuspended time (non-inclusive) and the
    // last suspended time.
    root.firstSuspendedTime = finishedExpirationTime - 1;
  }

  if (finishedExpirationTime <= root.lastPingedTime) {
    // Clear the pinged time
    root.lastPingedTime = NoWork;
  }

  if (finishedExpirationTime <= root.lastExpiredTime) {
    // Clear the expired time
    root.lastExpiredTime = NoWork;
  }
}
function markRootExpiredAtTime(root, expirationTime) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
    root.lastExpiredTime = expirationTime;
  }
}

var didWarnAboutMessageChannel = false;
var enqueueTaskImpl = null;
function enqueueTask(task) {
  if (enqueueTaskImpl === null) {
    try {
      // read require off the module object to get around the bundlers.
      // we don't want them to detect a require and bundle a Node polyfill.
      var requireString = ('require' + Math.random()).slice(0, 7);
      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
      // version of setImmediate, bypassing fake timers if any.

      enqueueTaskImpl = nodeRequire('timers').setImmediate;
    } catch (_err) {
      // we're in a browser
      // we can't use regular timers because they may still be faked
      // so we try MessageChannel+postMessage instead
      enqueueTaskImpl = function (callback) {
        {
          if (didWarnAboutMessageChannel === false) {
            didWarnAboutMessageChannel = true;

            if (typeof MessageChannel === 'undefined') {
              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
            }
          }
        }

        var channel = new MessageChannel();
        channel.port1.onmessage = callback;
        channel.port2.postMessage(undefined);
      };
    }
  }

  return enqueueTaskImpl(task);
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstance(component) {
  var fiber = get(component);

  if (fiber === undefined) {
    if (typeof component.render === 'function') {
      {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }
    } else {
      {
        {
          throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
        }
      }
    }
  }

  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error( "Unable to find node on an unmounted component." );
          }
        }
      } else {
        {
          {
            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;

        if (fiber.mode & StrictMode) {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate);
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var currentTime = requestCurrentTimeForUpdate();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$1);
      warnIfNotScopedWithMatchingAct(current$1);
    }
  }

  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  enqueueUpdate(current$1, update);
  scheduleWork(current$1, expirationTime);
  return expirationTime;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}
function attemptSynchronousHydration(fiber) {
  switch (fiber.tag) {
    case HostRoot:
      var root = fiber.stateNode;

      if (root.hydrate) {
        // Flush the first scheduled "update".
        flushRoot(root, root.firstPendingTime);
      }

      break;

    case SuspenseComponent:
      flushSync(function () {
        return scheduleWork(fiber, Sync);
      }); // If we're still blocked after this, we need to increase
      // the priority of any promises resolving within this
      // boundary so that they next attempt also has higher pri.

      var retryExpTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
      markRetryTimeIfNotHydrated(fiber, retryExpTime);
      break;
  }
}

function markRetryTimeImpl(fiber, retryTime) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    if (suspenseState.retryTime < retryTime) {
      suspenseState.retryTime = retryTime;
    }
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryTimeIfNotHydrated(fiber, retryTime) {
  markRetryTimeImpl(fiber, retryTime);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryTimeImpl(alternate, retryTime);
  }
}

function attemptUserBlockingHydration(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptContinuousHydration(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  scheduleWork(fiber, ContinuousHydration);
  markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
}
function attemptHydrationAtCurrentPriority(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var currentTime = requestCurrentTimeForUpdate();
  var expTime = computeExpirationForFiber(currentTime, fiber, null);
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideProps = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }

    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    if (currentHook !== null) {
      var newState = copyWithSet(currentHook.memoizedState, path, value);
      currentHook.memoizedState = newState;
      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleWork(fiber, Sync);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleWork(fiber, Sync);
  };

  scheduleUpdate = function (fiber) {
    scheduleWork(fiber, Sync);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals(_assign({}, devToolsConfig, {
    overrideHookState: overrideHookState,
    overrideProps: overrideProps,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }

      return findFiberByHostInstance(instance);
    },
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  function () {
      return current;
    } 
  }));
}
var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;
var isSchedulerMocked = typeof Scheduler.unstable_flushAllWithoutAsserting === 'function';

var flushWork = Scheduler.unstable_flushAllWithoutAsserting || function () {
  var didFlushWork = false;

  while (flushPassiveEffects()) {
    didFlushWork = true;
  }

  return didFlushWork;
};

function flushWorkAndMicroTasks(onDone) {
  try {
    flushWork();
    enqueueTask(function () {
      if (flushWork()) {
        flushWorkAndMicroTasks(onDone);
      } else {
        onDone();
      }
    });
  } catch (err) {
    onDone(err);
  }
} // we track the 'depth' of the act() calls with this counter,
// so we can tell if any async act() calls try to run in parallel.


var actingUpdatesScopeDepth = 0;

function act(callback) {

  var previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;
  var previousIsSomeRendererActing;
  var previousIsThisRendererActing;
  actingUpdatesScopeDepth++;
  previousIsSomeRendererActing = IsSomeRendererActing$1.current;
  previousIsThisRendererActing = IsThisRendererActing.current;
  IsSomeRendererActing$1.current = true;
  IsThisRendererActing.current = true;

  function onDone() {
    actingUpdatesScopeDepth--;
    IsSomeRendererActing$1.current = previousIsSomeRendererActing;
    IsThisRendererActing.current = previousIsThisRendererActing;

    {
      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {
        // if it's _less than_ previousActingUpdatesScopeDepth, then we can assume the 'other' one has warned
        error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
      }
    }
  }

  var result;

  try {
    result = batchedUpdates(callback);
  } catch (error) {
    // on sync errors, we still want to 'cleanup' and decrement actingUpdatesScopeDepth
    onDone();
    throw error;
  }

  if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
    // setup a boolean that gets set to true only
    // once this act() call is await-ed
    var called = false;

    {
      if (typeof Promise !== 'undefined') {
        //eslint-disable-next-line no-undef
        Promise.resolve().then(function () {}).then(function () {
          if (called === false) {
            error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, interleaving multiple act ' + 'calls and mixing their scopes. You should - await act(async () => ...);');
          }
        });
      }
    } // in the async case, the returned thenable runs the callback, flushes
    // effects and  microtasks in a loop until flushPassiveEffects() === false,
    // and cleans up


    return {
      then: function (resolve, reject) {
        called = true;
        result.then(function () {
          if (actingUpdatesScopeDepth > 1 || isSchedulerMocked === true && previousIsSomeRendererActing === true) {
            onDone();
            resolve();
            return;
          } // we're about to exit the act() scope,
          // now's the time to flush tasks/effects


          flushWorkAndMicroTasks(function (err) {
            onDone();

            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
        }, function (err) {
          onDone();
          reject(err);
        });
      }
    };
  } else {
    {
      if (result !== undefined) {
        error('The callback passed to act(...) function ' + 'must return undefined, or a Promise. You returned %s', result);
      }
    } // flush effects until none remain, and cleanup


    try {
      if (actingUpdatesScopeDepth === 1 && (isSchedulerMocked === false || previousIsSomeRendererActing === false)) {
        // we're about to exit the act() scope,
        // now's the time to flush effects
        flushWork();
      }

      onDone();
    } catch (err) {
      onDone();
      throw err;
    } // in the sync case, the returned thenable only warns *if* await-ed


    return {
      then: function (resolve) {
        {
          error('Do not await the result of calling act(...) with sync logic, it is not a Promise.');
        }

        resolve();
      }
    };
  }
}

var ReactFiberReconciler = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createContainer: createContainer,
  updateContainer: updateContainer,
  batchedEventUpdates: batchedEventUpdates,
  batchedUpdates: batchedUpdates,
  unbatchedUpdates: unbatchedUpdates,
  deferredUpdates: deferredUpdates,
  syncUpdates: syncUpdates,
  discreteUpdates: discreteUpdates,
  flushDiscreteUpdates: flushDiscreteUpdates,
  flushControlled: flushControlled,
  flushSync: flushSync,
  flushPassiveEffects: flushPassiveEffects,
  IsThisRendererActing: IsThisRendererActing,
  getPublicRootInstance: getPublicRootInstance,
  attemptSynchronousHydration: attemptSynchronousHydration,
  attemptUserBlockingHydration: attemptUserBlockingHydration,
  attemptContinuousHydration: attemptContinuousHydration,
  attemptHydrationAtCurrentPriority: attemptHydrationAtCurrentPriority,
  findHostInstance: findHostInstance,
  findHostInstanceWithWarning: findHostInstanceWithWarning,
  findHostInstanceWithNoPortals: findHostInstanceWithNoPortals,
  shouldSuspend: shouldSuspend,
  injectIntoDevTools: injectIntoDevTools,
  act: act
});

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var ReactFiberReconciler$1 = getCjsExportFromNamespace(ReactFiberReconciler);

// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.


var reactReconciler = ReactFiberReconciler$1.default || ReactFiberReconciler$1;

module.exports = reactReconciler;
    var $$$renderer = module.exports;
    module.exports = $$$reconciler;
    return $$$renderer;
  };
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/react-reconciler/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-reconciler/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-reconciler.development.js */ "./node_modules/react-reconciler/cjs/react-reconciler.development.js");
}


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");
var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var ReactVersion = '16.13.1';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  suspense: null
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

var Resolved = 1;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = {};
var currentlyValidatingElement = null;
function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  _assign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];

function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;

  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}
/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {

      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';

      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }

      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
        }
      }
    }
  }

  return subtreeCount;
}
/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}
/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;
  func.call(context, child, bookKeeping.count++);
}
/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */


function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;
  var mappedChild = func.call(context, child, bookKeeping.count++);

  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }

    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';

  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }

  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}
/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */


function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _ctor: ctor,
    // React uses these fields to store the result.
    _status: -1,
    _result: null
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes;
    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  return {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  setCurrentlyValidatingElement(element);

  {
    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }

  setCurrentlyValidatingElement(null);
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var name = getComponentName(type);
    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      setCurrentlyValidatingElement(element);
      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
      setCurrentlyValidatingElement(null);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true;

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    setCurrentlyValidatingElement(fragment);
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        break;
      }
    }

    if (fragment.ref !== null) {
      error('Invalid attribute `ref` supplied to `React.Fragment`.');
    }

    setCurrentlyValidatingElement(null);
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    var testMap = new Map([[frozenObject, null]]);
    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler-tracing.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

{
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}
function unstable_clear(callback) {

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

{
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_trace = unstable_trace;
exports.unstable_unsubscribe = unstable_unsubscribe;
exports.unstable_wrap = unstable_wrap;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

var enableSchedulerDebugging = false;
var enableProfiling = true;

var requestHostCallback;
var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;

if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

    if (typeof requestAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable

  {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      // Using console['error'] to evade Babel and ESLint
      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
;
var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

{
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        // Using console['error'] to evade Babel and ESLint
        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} ;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}


/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/scheduler/tracing.js":
/*!*******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ "./node_modules/scheduler/cjs/scheduler-tracing.development.js");
}


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/westfield-runtime-client/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/westfield-runtime-client/dist/index.js ***!
  \*************************************************************/
/*! exports provided: webFS, display, frame, Proxy, WlDisplayProxy, WlDisplayProtocolName, WlDisplayError, WlRegistryProxy, WlRegistryProtocolName, WlCallbackProxy, WlCallbackProtocolName, WlCompositorProxy, WlCompositorProtocolName, WlShmPoolProxy, WlShmPoolProtocolName, WlShmProxy, WlShmProtocolName, WlShmError, WlShmFormat, WlBufferProxy, WlBufferProtocolName, WlDataOfferProxy, WlDataOfferProtocolName, WlDataOfferError, WlDataSourceProxy, WlDataSourceProtocolName, WlDataSourceError, WlDataDeviceProxy, WlDataDeviceProtocolName, WlDataDeviceError, WlDataDeviceManagerProxy, WlDataDeviceManagerProtocolName, WlDataDeviceManagerDndAction, WlShellProxy, WlShellProtocolName, WlShellError, WlShellSurfaceProxy, WlShellSurfaceProtocolName, WlShellSurfaceResize, WlShellSurfaceTransient, WlShellSurfaceFullscreenMethod, WlSurfaceProxy, WlSurfaceProtocolName, WlSurfaceError, WlSeatProxy, WlSeatProtocolName, WlSeatCapability, WlPointerProxy, WlPointerProtocolName, WlPointerError, WlPointerButtonState, WlPointerAxis, WlPointerAxisSource, WlKeyboardProxy, WlKeyboardProtocolName, WlKeyboardKeymapFormat, WlKeyboardKeyState, WlTouchProxy, WlTouchProtocolName, WlOutputProxy, WlOutputProtocolName, WlOutputSubpixel, WlOutputTransform, WlOutputMode, WlRegionProxy, WlRegionProtocolName, WlSubcompositorProxy, WlSubcompositorProtocolName, WlSubcompositorError, WlSubsurfaceProxy, WlSubsurfaceProtocolName, WlSubsurfaceError, GrWebGlBufferProxy, GrWebGlBufferProtocolName, GrWebGlProxy, GrWebGlProtocolName, GrWebShmBufferProxy, GrWebShmBufferProtocolName, GrWebShmProxy, GrWebShmProtocolName, XdgWmBaseProxy, XdgWmBaseProtocolName, XdgWmBaseError, XdgPositionerProxy, XdgPositionerProtocolName, XdgPositionerError, XdgPositionerAnchor, XdgPositionerGravity, XdgPositionerConstraintAdjustment, XdgSurfaceProxy, XdgSurfaceProtocolName, XdgSurfaceError, XdgToplevelProxy, XdgToplevelProtocolName, XdgToplevelResizeEdge, XdgToplevelState, XdgPopupProxy, XdgPopupProtocolName, XdgPopupError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "webFS", function() { return webFS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "display", function() { return display; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frame", function() { return frame; });
/* harmony import */ var westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! westfield-runtime-common */ "./node_modules/westfield-runtime-common/dist/index.js");
/* harmony import */ var _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./westfield-runtime-client */ "./node_modules/westfield-runtime-client/dist/westfield-runtime-client.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Proxy", function() { return _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_1__["Proxy"]; });

/* harmony import */ var _protocol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./protocol */ "./node_modules/westfield-runtime-client/dist/protocol/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDisplayProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDisplayProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDisplayProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDisplayProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDisplayError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDisplayError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlRegistryProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlRegistryProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlRegistryProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlRegistryProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlCallbackProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlCallbackProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlCallbackProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlCallbackProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlCompositorProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlCompositorProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlCompositorProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlCompositorProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmPoolProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShmPoolProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmPoolProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShmPoolProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShmProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShmProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShmError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmFormat", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShmFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlBufferProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlBufferProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlBufferProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlBufferProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataOfferProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataOfferProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataOfferError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataSourceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataSourceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataSourceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataDeviceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataDeviceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataDeviceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataDeviceManagerProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataDeviceManagerProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerDndAction", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlDataDeviceManagerDndAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShellProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShellProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShellError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShellSurfaceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShellSurfaceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceResize", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShellSurfaceResize"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceTransient", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShellSurfaceTransient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceFullscreenMethod", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlShellSurfaceFullscreenMethod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSurfaceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSurfaceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSurfaceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSeatProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSeatProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSeatProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSeatProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSeatCapability", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSeatCapability"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlPointerProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlPointerProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlPointerError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerButtonState", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlPointerButtonState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerAxis", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlPointerAxis"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerAxisSource", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlPointerAxisSource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlKeyboardProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlKeyboardProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardKeymapFormat", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlKeyboardKeymapFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardKeyState", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlKeyboardKeyState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlTouchProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlTouchProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlTouchProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlTouchProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlOutputProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlOutputProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputSubpixel", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlOutputSubpixel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputTransform", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlOutputTransform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputMode", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlOutputMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlRegionProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlRegionProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlRegionProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlRegionProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSubcompositorProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSubcompositorProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSubcompositorError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSubsurfaceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSubsurfaceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["WlSubsurfaceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebGlBufferProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["GrWebGlBufferProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebGlBufferProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["GrWebGlBufferProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebGlProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["GrWebGlProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebGlProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["GrWebGlProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebShmBufferProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["GrWebShmBufferProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebShmBufferProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["GrWebShmBufferProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebShmProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["GrWebShmProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebShmProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["GrWebShmProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgWmBaseProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgWmBaseProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgWmBaseError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPositionerProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPositionerProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPositionerError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerAnchor", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPositionerAnchor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerGravity", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPositionerGravity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerConstraintAdjustment", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPositionerConstraintAdjustment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgSurfaceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgSurfaceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgSurfaceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgToplevelProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgToplevelProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelResizeEdge", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgToplevelResizeEdge"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelState", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgToplevelState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPopupProxy", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPopupProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPopupProtocolName", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPopupProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPopupError", function() { return _protocol__WEBPACK_IMPORTED_MODULE_2__["XdgPopupError"]; });

/*
MIT License

Copyright (c) 2020 Erik De Rijcke

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const webFS = _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_1__["WebFS"].create(_uuidv4());
const connection = new westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["Connection"]();
const display = new _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_1__["DisplayImpl"](connection);
function _uuidv4() {
    // @ts-ignore
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c => (c ^ self.crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));
}
function _setupMessageHandling(display, connection, webFS) {
    const _flushQueue = [];
    onmessage = (event) => {
        if (connection.closed) {
            return;
        }
        const webWorkerMessage = event.data;
        if (webWorkerMessage.protocolMessage instanceof ArrayBuffer) {
            const buffer = new Uint32Array(/** @type {ArrayBuffer} */ webWorkerMessage.protocolMessage);
            const fds = webWorkerMessage.meta.map(transferable => {
                if (transferable instanceof ArrayBuffer) {
                    return webFS.fromArrayBuffer(transferable);
                }
                else if (transferable instanceof ImageBitmap) {
                    return webFS.fromImageBitmap(transferable);
                }
                else if (transferable instanceof OffscreenCanvas) {
                    return webFS.fromOffscreenCanvas(transferable);
                } // else if (transferable instanceof MessagePort) {
                // }
                else {
                    throw new Error(`COMPOSITOR BUG? Unsupported transferable received from compositor: ${transferable}.`);
                }
            });
            try {
                connection.message({ buffer, fds });
            }
            catch (e) {
                if (display.errorHandler && typeof display.errorHandler === 'function') {
                    display.errorHandler(e);
                }
                else {
                    console.error('\tname: ' + e.name + ' message: ' + e.message + ' text: ' + e.text);
                    console.error('error object stack: ');
                    console.error(e.stack);
                }
            }
        }
        else {
            console.error(`[web-worker-client] server send an illegal message.`);
            connection.close();
        }
    };
    connection.onFlush = (wireMessages) => __awaiter(this, void 0, void 0, function* () {
        _flushQueue.push(wireMessages);
        if (_flushQueue.length > 1) {
            return;
        }
        while (_flushQueue.length) {
            const sendWireMessages = _flushQueue[0];
            // convert to single arrayBuffer so it can be send over a data channel using zero copy semantics.
            const messagesSize = sendWireMessages.reduce((previousValue, currentValue) => previousValue + currentValue.buffer.byteLength, 0);
            const sendBuffer = new Uint32Array(new ArrayBuffer(messagesSize));
            let offset = 0;
            const meta = [];
            for (const wireMessage of sendWireMessages) {
                for (const webFd of wireMessage.fds) {
                    const transferable = yield webFd.getTransferable();
                    meta.push(transferable);
                }
                const message = new Uint32Array(wireMessage.buffer);
                sendBuffer.set(message, offset);
                offset += message.length;
            }
            self.postMessage({ protocolMessage: sendBuffer.buffer, meta }, [sendBuffer.buffer, ...meta]);
            _flushQueue.shift();
        }
    });
}
_setupMessageHandling(display, connection, webFS);
function frame(wlSurfaceProxy) {
    return () => {
        return new Promise(resolve => {
            const wlCallbackProxy = wlSurfaceProxy.frame();
            wlCallbackProxy.listener = {
                done: (data) => {
                    resolve(data);
                    wlCallbackProxy.destroy();
                }
            };
        });
    };
}


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/westfield-runtime-client/dist/protocol/gr_web_gl.js":
/*!**************************************************************************!*\
  !*** ./node_modules/westfield-runtime-client/dist/protocol/gr_web_gl.js ***!
  \**************************************************************************/
/*! exports provided: GrWebGlBufferProxy, GrWebGlBufferProtocolName, GrWebGlProxy, GrWebGlProtocolName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrWebGlBufferProxy", function() { return GrWebGlBufferProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrWebGlBufferProtocolName", function() { return GrWebGlBufferProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrWebGlProxy", function() { return GrWebGlProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrWebGlProtocolName", function() { return GrWebGlProtocolName; });
/* harmony import */ var westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! westfield-runtime-common */ "./node_modules/westfield-runtime-common/dist/index.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ "./node_modules/westfield-runtime-client/dist/protocol/index.js");
/* harmony import */ var _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../westfield-runtime-client */ "./node_modules/westfield-runtime-client/dist/westfield-runtime-client.js");
/*
 *
 *        Copyright © 2019 Erik De Rijcke
 *
 *        Permission is hereby granted, free of charge, to any person
 *        obtaining a copy of this software and associated documentation files
 *        (the "Software"), to deal in the Software without restriction,
 *        including without limitation the rights to use, copy, modify, merge,
 *        publish, distribute, sublicense, and/or sell copies of the Software,
 *        and to permit persons to whom the Software is furnished to do so,
 *        subject to the following conditions:
 *
 *        The above copyright notice and this permission notice (including the
 *        next paragraph) shall be included in all copies or substantial
 *        portions of the Software.
 *
 *        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 *        BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 *        ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *        SOFTWARE.
 *
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class GrWebGlBufferProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.offscreenCanvas(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["h"])(message)));
        });
    }
}
const GrWebGlBufferProtocolName = 'gr_web_gl_buffer';
/**
 *
 *            A singleton global object that provides support for web gl.
 *
 *            Clients can create wl_buffer objects using the create_buffer request.
 *
 */
class GrWebGlProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *                Create a web_gl_buffer object.
     *
     * @since 1
     *
     */
    createWebGlBuffer() {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["GrWebGlBufferProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *                Create a wl_buffer object from a gr_web_gl_buffer so it can be used with a surface.
     *
     * @since 1
     *
     */
    createBuffer(grWebGlBuffer) {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["WlBufferProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(grWebGlBuffer)]);
    }
}
const GrWebGlProtocolName = 'gr_web_gl';
//# sourceMappingURL=gr_web_gl.js.map

/***/ }),

/***/ "./node_modules/westfield-runtime-client/dist/protocol/gr_web_shm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/westfield-runtime-client/dist/protocol/gr_web_shm.js ***!
  \***************************************************************************/
/*! exports provided: GrWebShmBufferProxy, GrWebShmBufferProtocolName, GrWebShmProxy, GrWebShmProtocolName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrWebShmBufferProxy", function() { return GrWebShmBufferProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrWebShmBufferProtocolName", function() { return GrWebShmBufferProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrWebShmProxy", function() { return GrWebShmProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GrWebShmProtocolName", function() { return GrWebShmProtocolName; });
/* harmony import */ var westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! westfield-runtime-common */ "./node_modules/westfield-runtime-common/dist/index.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ "./node_modules/westfield-runtime-client/dist/protocol/index.js");
/* harmony import */ var _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../westfield-runtime-client */ "./node_modules/westfield-runtime-client/dist/westfield-runtime-client.js");
/*
 *
 *        Copyright © 2019 Erik De Rijcke
 *
 *        Permission is hereby granted, free of charge, to any person
 *        obtaining a copy of this software and associated documentation files
 *        (the "Software"), to deal in the Software without restriction,
 *        including without limitation the rights to use, copy, modify, merge,
 *        publish, distribute, sublicense, and/or sell copies of the Software,
 *        and to permit persons to whom the Software is furnished to do so,
 *        subject to the following conditions:
 *
 *        The above copyright notice and this permission notice (including the
 *        next paragraph) shall be included in all copies or substantial
 *        portions of the Software.
 *
 *        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 *        BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 *        ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *        CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *        SOFTWARE.
 *
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class GrWebShmBufferProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *                Attaches an HTML5 array buffer to the compositor. After attaching, the array buffer ownership is passed
     *                to the compositor main thread. The array buffer can not be used for writing anymore by the client as
     *                per HTML5 Transferable objects spec.
     *
     *                The pixel format of the attached array buffer must always be RGBA8888 as per HTML5 ImageData spec.
     *                Stride must always equal width.
     *
     * @since 1
     *
     */
    attach(contents) {
        this._marshall(this.id, 0, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["fileDescriptor"])(contents)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.detach(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["h"])(message)));
        });
    }
}
const GrWebShmBufferProtocolName = 'gr_web_shm_buffer';
/**
 *
 *            A singleton global object that provides support for shared memory through HTML5 array buffers.
 *
 *            Clients can create wl_buffer objects using the create_buffer request.
 *
 */
class GrWebShmProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *                Create a gr_web_shm_buffer object.
     *
     * @since 1
     *
     */
    createWebArrayBuffer() {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["GrWebShmBufferProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *                Create a wl_buffer object from a web_array_buffer so it can be used with a surface.
     *
     * @since 1
     *
     */
    createBuffer(webArrayBuffer, width, height) {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["WlBufferProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(webArrayBuffer), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
}
const GrWebShmProtocolName = 'gr_web_shm';
//# sourceMappingURL=gr_web_shm.js.map

/***/ }),

/***/ "./node_modules/westfield-runtime-client/dist/protocol/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/westfield-runtime-client/dist/protocol/index.js ***!
  \**********************************************************************/
/*! exports provided: WlDisplayProxy, WlDisplayProtocolName, WlDisplayError, WlRegistryProxy, WlRegistryProtocolName, WlCallbackProxy, WlCallbackProtocolName, WlCompositorProxy, WlCompositorProtocolName, WlShmPoolProxy, WlShmPoolProtocolName, WlShmProxy, WlShmProtocolName, WlShmError, WlShmFormat, WlBufferProxy, WlBufferProtocolName, WlDataOfferProxy, WlDataOfferProtocolName, WlDataOfferError, WlDataSourceProxy, WlDataSourceProtocolName, WlDataSourceError, WlDataDeviceProxy, WlDataDeviceProtocolName, WlDataDeviceError, WlDataDeviceManagerProxy, WlDataDeviceManagerProtocolName, WlDataDeviceManagerDndAction, WlShellProxy, WlShellProtocolName, WlShellError, WlShellSurfaceProxy, WlShellSurfaceProtocolName, WlShellSurfaceResize, WlShellSurfaceTransient, WlShellSurfaceFullscreenMethod, WlSurfaceProxy, WlSurfaceProtocolName, WlSurfaceError, WlSeatProxy, WlSeatProtocolName, WlSeatCapability, WlPointerProxy, WlPointerProtocolName, WlPointerError, WlPointerButtonState, WlPointerAxis, WlPointerAxisSource, WlKeyboardProxy, WlKeyboardProtocolName, WlKeyboardKeymapFormat, WlKeyboardKeyState, WlTouchProxy, WlTouchProtocolName, WlOutputProxy, WlOutputProtocolName, WlOutputSubpixel, WlOutputTransform, WlOutputMode, WlRegionProxy, WlRegionProtocolName, WlSubcompositorProxy, WlSubcompositorProtocolName, WlSubcompositorError, WlSubsurfaceProxy, WlSubsurfaceProtocolName, WlSubsurfaceError, GrWebGlBufferProxy, GrWebGlBufferProtocolName, GrWebGlProxy, GrWebGlProtocolName, GrWebShmBufferProxy, GrWebShmBufferProtocolName, GrWebShmProxy, GrWebShmProtocolName, XdgWmBaseProxy, XdgWmBaseProtocolName, XdgWmBaseError, XdgPositionerProxy, XdgPositionerProtocolName, XdgPositionerError, XdgPositionerAnchor, XdgPositionerGravity, XdgPositionerConstraintAdjustment, XdgSurfaceProxy, XdgSurfaceProtocolName, XdgSurfaceError, XdgToplevelProxy, XdgToplevelProtocolName, XdgToplevelResizeEdge, XdgToplevelState, XdgPopupProxy, XdgPopupProtocolName, XdgPopupError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _wayland__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wayland */ "./node_modules/westfield-runtime-client/dist/protocol/wayland.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDisplayProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDisplayProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDisplayProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDisplayProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDisplayError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDisplayError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlRegistryProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlRegistryProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlRegistryProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlRegistryProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlCallbackProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlCallbackProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlCallbackProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlCallbackProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlCompositorProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlCompositorProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlCompositorProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlCompositorProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmPoolProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShmPoolProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmPoolProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShmPoolProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShmProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShmProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShmError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShmFormat", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShmFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlBufferProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlBufferProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlBufferProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlBufferProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataOfferProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataOfferProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataOfferError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataSourceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataSourceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataSourceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataDeviceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataDeviceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataDeviceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataDeviceManagerProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataDeviceManagerProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerDndAction", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlDataDeviceManagerDndAction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShellProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShellProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShellError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShellSurfaceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShellSurfaceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceResize", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShellSurfaceResize"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceTransient", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShellSurfaceTransient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceFullscreenMethod", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlShellSurfaceFullscreenMethod"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSurfaceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSurfaceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSurfaceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSeatProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSeatProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSeatProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSeatProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSeatCapability", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSeatCapability"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlPointerProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlPointerProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlPointerError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerButtonState", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlPointerButtonState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerAxis", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlPointerAxis"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlPointerAxisSource", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlPointerAxisSource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlKeyboardProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlKeyboardProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardKeymapFormat", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlKeyboardKeymapFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardKeyState", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlKeyboardKeyState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlTouchProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlTouchProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlTouchProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlTouchProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlOutputProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlOutputProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputSubpixel", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlOutputSubpixel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputTransform", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlOutputTransform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlOutputMode", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlOutputMode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlRegionProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlRegionProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlRegionProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlRegionProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSubcompositorProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSubcompositorProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSubcompositorError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceProxy", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSubsurfaceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceProtocolName", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSubsurfaceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceError", function() { return _wayland__WEBPACK_IMPORTED_MODULE_0__["WlSubsurfaceError"]; });

/* harmony import */ var _gr_web_gl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gr_web_gl */ "./node_modules/westfield-runtime-client/dist/protocol/gr_web_gl.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebGlBufferProxy", function() { return _gr_web_gl__WEBPACK_IMPORTED_MODULE_1__["GrWebGlBufferProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebGlBufferProtocolName", function() { return _gr_web_gl__WEBPACK_IMPORTED_MODULE_1__["GrWebGlBufferProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebGlProxy", function() { return _gr_web_gl__WEBPACK_IMPORTED_MODULE_1__["GrWebGlProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebGlProtocolName", function() { return _gr_web_gl__WEBPACK_IMPORTED_MODULE_1__["GrWebGlProtocolName"]; });

/* harmony import */ var _gr_web_shm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gr_web_shm */ "./node_modules/westfield-runtime-client/dist/protocol/gr_web_shm.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebShmBufferProxy", function() { return _gr_web_shm__WEBPACK_IMPORTED_MODULE_2__["GrWebShmBufferProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebShmBufferProtocolName", function() { return _gr_web_shm__WEBPACK_IMPORTED_MODULE_2__["GrWebShmBufferProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebShmProxy", function() { return _gr_web_shm__WEBPACK_IMPORTED_MODULE_2__["GrWebShmProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GrWebShmProtocolName", function() { return _gr_web_shm__WEBPACK_IMPORTED_MODULE_2__["GrWebShmProtocolName"]; });

/* harmony import */ var _xdg_shell__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./xdg_shell */ "./node_modules/westfield-runtime-client/dist/protocol/xdg_shell.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseProxy", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgWmBaseProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseProtocolName", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgWmBaseProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseError", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgWmBaseError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerProxy", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPositionerProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerProtocolName", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPositionerProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerError", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPositionerError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerAnchor", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPositionerAnchor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerGravity", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPositionerGravity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerConstraintAdjustment", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPositionerConstraintAdjustment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceProxy", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgSurfaceProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceProtocolName", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgSurfaceProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceError", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgSurfaceError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelProxy", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgToplevelProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelProtocolName", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgToplevelProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelResizeEdge", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgToplevelResizeEdge"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelState", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgToplevelState"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPopupProxy", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPopupProxy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPopupProtocolName", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPopupProtocolName"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "XdgPopupError", function() { return _xdg_shell__WEBPACK_IMPORTED_MODULE_3__["XdgPopupError"]; });





//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/westfield-runtime-client/dist/protocol/wayland.js":
/*!************************************************************************!*\
  !*** ./node_modules/westfield-runtime-client/dist/protocol/wayland.js ***!
  \************************************************************************/
/*! exports provided: WlDisplayProxy, WlDisplayProtocolName, WlDisplayError, WlRegistryProxy, WlRegistryProtocolName, WlCallbackProxy, WlCallbackProtocolName, WlCompositorProxy, WlCompositorProtocolName, WlShmPoolProxy, WlShmPoolProtocolName, WlShmProxy, WlShmProtocolName, WlShmError, WlShmFormat, WlBufferProxy, WlBufferProtocolName, WlDataOfferProxy, WlDataOfferProtocolName, WlDataOfferError, WlDataSourceProxy, WlDataSourceProtocolName, WlDataSourceError, WlDataDeviceProxy, WlDataDeviceProtocolName, WlDataDeviceError, WlDataDeviceManagerProxy, WlDataDeviceManagerProtocolName, WlDataDeviceManagerDndAction, WlShellProxy, WlShellProtocolName, WlShellError, WlShellSurfaceProxy, WlShellSurfaceProtocolName, WlShellSurfaceResize, WlShellSurfaceTransient, WlShellSurfaceFullscreenMethod, WlSurfaceProxy, WlSurfaceProtocolName, WlSurfaceError, WlSeatProxy, WlSeatProtocolName, WlSeatCapability, WlPointerProxy, WlPointerProtocolName, WlPointerError, WlPointerButtonState, WlPointerAxis, WlPointerAxisSource, WlKeyboardProxy, WlKeyboardProtocolName, WlKeyboardKeymapFormat, WlKeyboardKeyState, WlTouchProxy, WlTouchProtocolName, WlOutputProxy, WlOutputProtocolName, WlOutputSubpixel, WlOutputTransform, WlOutputMode, WlRegionProxy, WlRegionProtocolName, WlSubcompositorProxy, WlSubcompositorProtocolName, WlSubcompositorError, WlSubsurfaceProxy, WlSubsurfaceProtocolName, WlSubsurfaceError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDisplayProxy", function() { return WlDisplayProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDisplayProtocolName", function() { return WlDisplayProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDisplayError", function() { return WlDisplayError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlRegistryProxy", function() { return WlRegistryProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlRegistryProtocolName", function() { return WlRegistryProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlCallbackProxy", function() { return WlCallbackProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlCallbackProtocolName", function() { return WlCallbackProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlCompositorProxy", function() { return WlCompositorProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlCompositorProtocolName", function() { return WlCompositorProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShmPoolProxy", function() { return WlShmPoolProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShmPoolProtocolName", function() { return WlShmPoolProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShmProxy", function() { return WlShmProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShmProtocolName", function() { return WlShmProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShmError", function() { return WlShmError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShmFormat", function() { return WlShmFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlBufferProxy", function() { return WlBufferProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlBufferProtocolName", function() { return WlBufferProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferProxy", function() { return WlDataOfferProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferProtocolName", function() { return WlDataOfferProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataOfferError", function() { return WlDataOfferError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceProxy", function() { return WlDataSourceProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceProtocolName", function() { return WlDataSourceProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataSourceError", function() { return WlDataSourceError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceProxy", function() { return WlDataDeviceProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceProtocolName", function() { return WlDataDeviceProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceError", function() { return WlDataDeviceError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerProxy", function() { return WlDataDeviceManagerProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerProtocolName", function() { return WlDataDeviceManagerProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlDataDeviceManagerDndAction", function() { return WlDataDeviceManagerDndAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShellProxy", function() { return WlShellProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShellProtocolName", function() { return WlShellProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShellError", function() { return WlShellError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceProxy", function() { return WlShellSurfaceProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceProtocolName", function() { return WlShellSurfaceProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceResize", function() { return WlShellSurfaceResize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceTransient", function() { return WlShellSurfaceTransient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlShellSurfaceFullscreenMethod", function() { return WlShellSurfaceFullscreenMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceProxy", function() { return WlSurfaceProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceProtocolName", function() { return WlSurfaceProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSurfaceError", function() { return WlSurfaceError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSeatProxy", function() { return WlSeatProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSeatProtocolName", function() { return WlSeatProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSeatCapability", function() { return WlSeatCapability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlPointerProxy", function() { return WlPointerProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlPointerProtocolName", function() { return WlPointerProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlPointerError", function() { return WlPointerError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlPointerButtonState", function() { return WlPointerButtonState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlPointerAxis", function() { return WlPointerAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlPointerAxisSource", function() { return WlPointerAxisSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardProxy", function() { return WlKeyboardProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardProtocolName", function() { return WlKeyboardProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardKeymapFormat", function() { return WlKeyboardKeymapFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlKeyboardKeyState", function() { return WlKeyboardKeyState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlTouchProxy", function() { return WlTouchProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlTouchProtocolName", function() { return WlTouchProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlOutputProxy", function() { return WlOutputProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlOutputProtocolName", function() { return WlOutputProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlOutputSubpixel", function() { return WlOutputSubpixel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlOutputTransform", function() { return WlOutputTransform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlOutputMode", function() { return WlOutputMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlRegionProxy", function() { return WlRegionProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlRegionProtocolName", function() { return WlRegionProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorProxy", function() { return WlSubcompositorProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorProtocolName", function() { return WlSubcompositorProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSubcompositorError", function() { return WlSubcompositorError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceProxy", function() { return WlSubsurfaceProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceProtocolName", function() { return WlSubsurfaceProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlSubsurfaceError", function() { return WlSubsurfaceError; });
/* harmony import */ var westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! westfield-runtime-common */ "./node_modules/westfield-runtime-common/dist/index.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ "./node_modules/westfield-runtime-client/dist/protocol/index.js");
/* harmony import */ var _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../westfield-runtime-client */ "./node_modules/westfield-runtime-client/dist/westfield-runtime-client.js");
/*
 *
 *    Copyright © 2008-2011 Kristian Høgsberg
 *    Copyright © 2010-2011 Intel Corporation
 *    Copyright © 2012-2013 Collabora, Ltd.
 *
 *    Permission is hereby granted, free of charge, to any person
 *    obtaining a copy of this software and associated documentation files
 *    (the "Software"), to deal in the Software without restriction,
 *    including without limitation the rights to use, copy, modify, merge,
 *    publish, distribute, sublicense, and/or sell copies of the Software,
 *    and to permit persons to whom the Software is furnished to do so,
 *    subject to the following conditions:
 *
 *    The above copyright notice and this permission notice (including the
 *    next paragraph) shall be included in all copies or substantial
 *    portions of the Software.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *    NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 *    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 *    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 *    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *    SOFTWARE.
 *
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



/**
 *
 *      The core global object.  This is a special singleton object.  It
 *      is used for internal Wayland protocol features.
 *
 */
class WlDisplayProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	The sync request asks the server to emit the 'done' event
     *	on the returned wl_callback object.  Since requests are
     *	handled in-order and events are delivered in-order, this can
     *	be used as a barrier to ensure all previous requests and the
     *	resulting events have been handled.
     *
     *	The object returned by this request will be destroyed by the
     *	compositor after the callback is fired and as such the client must not
     *	attempt to use it after that point.
     *
     *	The callback_data passed in the callback is the event serial.
     *
     * @since 1
     *
     */
    sync() {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["WlCallbackProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	This request creates a registry object that allows the client
     *	to list and bind the global objects available from the
     *	compositor.
     *
     * @since 1
     *
     */
    getRegistry() {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["WlRegistryProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.error(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.deleteId(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
const WlDisplayProtocolName = 'wl_display';
var WlDisplayError;
(function (WlDisplayError) {
    /**
     * server couldn't find object
     */
    WlDisplayError[WlDisplayError["_invalidObject"] = 0] = "_invalidObject";
    /**
     * method doesn't exist on the specified interface
     */
    WlDisplayError[WlDisplayError["_invalidMethod"] = 1] = "_invalidMethod";
    /**
     * server is out of memory
     */
    WlDisplayError[WlDisplayError["_noMemory"] = 2] = "_noMemory";
})(WlDisplayError || (WlDisplayError = {}));
/**
 *
 *      The singleton global registry object.  The server has a number of
 *      global objects that are available to all clients.  These objects
 *      typically represent an actual object in the server (for example,
 *      an input device) or they are singleton objects that provide
 *      extension functionality.
 *
 *      When a client creates a registry object, the registry object
 *      will emit a global event for each global currently in the
 *      registry.  Globals come and go as a result of device or
 *      monitor hotplugs, reconfiguration or other events, and the
 *      registry will send out global and global_remove events to
 *      keep the client up to date with the changes.  To mark the end
 *      of the initial burst of events, the client can use the
 *      wl_display.sync request immediately after calling
 *      wl_display.get_registry.
 *
 *      A client can bind to a global object by using the bind
 *      request.  This creates a client-side handle that lets the object
 *      emit events to the client and lets the client invoke requests on
 *      the object.
 *
 */
class WlRegistryProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
    * Bind a new object to the global.
    *
    * Binds a new, client-created object to the server using the specified name as the identifier.
    *
    */
    bind(name, interface_, proxyClass, version) {
        return this._marshallConstructor(this.id, 0, proxyClass, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(name), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["string"])(interface_), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(version), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.global(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.globalRemove(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
const WlRegistryProtocolName = 'wl_registry';
/**
 *
 *      Clients can handle the 'done' event to get notified when
 *      the related request is done.
 *
 */
class WlCallbackProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.done(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
const WlCallbackProtocolName = 'wl_callback';
/**
 *
 *      A compositor.  This object is a singleton global.  The
 *      compositor is in charge of combining the contents of multiple
 *      surfaces into one displayable output.
 *
 */
class WlCompositorProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Ask the compositor to create a new surface.
     *
     * @since 1
     *
     */
    createSurface() {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["WlSurfaceProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	Ask the compositor to create a new region.
     *
     * @since 1
     *
     */
    createRegion() {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["WlRegionProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
}
const WlCompositorProtocolName = 'wl_compositor';
/**
 *
 *      The wl_shm_pool object encapsulates a piece of memory shared
 *      between the compositor and client.  Through the wl_shm_pool
 *      object, the client can allocate shared memory wl_buffer objects.
 *      All objects created through the same pool share the same
 *      underlying mapped memory. Reusing the mapped memory avoids the
 *      setup/teardown overhead and is useful when interactively resizing
 *      a surface or for many small buffers.
 *
 */
class WlShmPoolProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Create a wl_buffer object from the pool.
     *
     *	The buffer is created offset bytes into the pool and has
     *	width and height as specified.  The stride argument specifies
     *	the number of bytes from the beginning of one row to the beginning
     *	of the next.  The format is the pixel format of the buffer and
     *	must be one of those advertised through the wl_shm.format event.
     *
     *	A buffer will keep a reference to the pool it was created from
     *	so it is valid to destroy the pool immediately after creating
     *	a buffer from it.
     *
     * @since 1
     *
     */
    createBuffer(offset, width, height, stride, format) {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["WlBufferProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(offset), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(stride), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(format)]);
    }
    /**
     *
     *	Destroy the shared memory pool.
     *
     *	The mmapped memory will be released when all
     *	buffers that have been created from this pool
     *	are gone.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 1, []);
    }
    /**
     *
     *	This request will cause the server to remap the backing memory
     *	for the pool from the file descriptor passed when the pool was
     *	created, but using the new size.  This request can only be
     *	used to make the pool bigger.
     *
     * @since 1
     *
     */
    resize(size) {
        this._marshall(this.id, 2, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(size)]);
    }
}
const WlShmPoolProtocolName = 'wl_shm_pool';
/**
 *
 *      A singleton global object that provides support for shared
 *      memory.
 *
 *      Clients can create wl_shm_pool objects using the create_pool
 *      request.
 *
 *      At connection setup time, the wl_shm object emits one or more
 *      format events to inform clients about the valid pixel formats
 *      that can be used for buffers.
 *
 */
class WlShmProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Create a new wl_shm_pool object.
     *
     *	The pool can be used to create shared memory based buffer
     *	objects.  The server will mmap size bytes of the passed file
     *	descriptor, to use as backing memory for the pool.
     *
     * @since 1
     *
     */
    createPool(fd, size) {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["WlShmPoolProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["fileDescriptor"])(fd), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(size)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.format(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
const WlShmProtocolName = 'wl_shm';
var WlShmError;
(function (WlShmError) {
    /**
     * buffer format is not known
     */
    WlShmError[WlShmError["_invalidFormat"] = 0] = "_invalidFormat";
    /**
     * invalid size or stride during pool or buffer creation
     */
    WlShmError[WlShmError["_invalidStride"] = 1] = "_invalidStride";
    /**
     * mmapping the file descriptor failed
     */
    WlShmError[WlShmError["_invalidFd"] = 2] = "_invalidFd";
})(WlShmError || (WlShmError = {}));
var WlShmFormat;
(function (WlShmFormat) {
    /**
     * 32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_argb8888"] = 0] = "_argb8888";
    /**
     * 32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_xrgb8888"] = 1] = "_xrgb8888";
    /**
     * 8-bit color index format, [7:0] C
     */
    WlShmFormat[WlShmFormat["_c8"] = 538982467] = "_c8";
    /**
     * 8-bit RGB format, [7:0] R:G:B 3:3:2
     */
    WlShmFormat[WlShmFormat["_rgb332"] = 943867730] = "_rgb332";
    /**
     * 8-bit BGR format, [7:0] B:G:R 2:3:3
     */
    WlShmFormat[WlShmFormat["_bgr233"] = 944916290] = "_bgr233";
    /**
     * 16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian
     */
    WlShmFormat[WlShmFormat["_xrgb4444"] = 842093144] = "_xrgb4444";
    /**
     * 16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian
     */
    WlShmFormat[WlShmFormat["_xbgr4444"] = 842089048] = "_xbgr4444";
    /**
     * 16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian
     */
    WlShmFormat[WlShmFormat["_rgbx4444"] = 842094674] = "_rgbx4444";
    /**
     * 16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian
     */
    WlShmFormat[WlShmFormat["_bgrx4444"] = 842094658] = "_bgrx4444";
    /**
     * 16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian
     */
    WlShmFormat[WlShmFormat["_argb4444"] = 842093121] = "_argb4444";
    /**
     * 16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian
     */
    WlShmFormat[WlShmFormat["_abgr4444"] = 842089025] = "_abgr4444";
    /**
     * 16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian
     */
    WlShmFormat[WlShmFormat["_rgba4444"] = 842088786] = "_rgba4444";
    /**
     * 16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian
     */
    WlShmFormat[WlShmFormat["_bgra4444"] = 842088770] = "_bgra4444";
    /**
     * 16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian
     */
    WlShmFormat[WlShmFormat["_xrgb1555"] = 892424792] = "_xrgb1555";
    /**
     * 16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian
     */
    WlShmFormat[WlShmFormat["_xbgr1555"] = 892420696] = "_xbgr1555";
    /**
     * 16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian
     */
    WlShmFormat[WlShmFormat["_rgbx5551"] = 892426322] = "_rgbx5551";
    /**
     * 16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian
     */
    WlShmFormat[WlShmFormat["_bgrx5551"] = 892426306] = "_bgrx5551";
    /**
     * 16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian
     */
    WlShmFormat[WlShmFormat["_argb1555"] = 892424769] = "_argb1555";
    /**
     * 16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian
     */
    WlShmFormat[WlShmFormat["_abgr1555"] = 892420673] = "_abgr1555";
    /**
     * 16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian
     */
    WlShmFormat[WlShmFormat["_rgba5551"] = 892420434] = "_rgba5551";
    /**
     * 16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian
     */
    WlShmFormat[WlShmFormat["_bgra5551"] = 892420418] = "_bgra5551";
    /**
     * 16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian
     */
    WlShmFormat[WlShmFormat["_rgb565"] = 909199186] = "_rgb565";
    /**
     * 16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian
     */
    WlShmFormat[WlShmFormat["_bgr565"] = 909199170] = "_bgr565";
    /**
     * 24-bit RGB format, [23:0] R:G:B little endian
     */
    WlShmFormat[WlShmFormat["_rgb888"] = 875710290] = "_rgb888";
    /**
     * 24-bit BGR format, [23:0] B:G:R little endian
     */
    WlShmFormat[WlShmFormat["_bgr888"] = 875710274] = "_bgr888";
    /**
     * 32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_xbgr8888"] = 875709016] = "_xbgr8888";
    /**
     * 32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_rgbx8888"] = 875714642] = "_rgbx8888";
    /**
     * 32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_bgrx8888"] = 875714626] = "_bgrx8888";
    /**
     * 32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_abgr8888"] = 875708993] = "_abgr8888";
    /**
     * 32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_rgba8888"] = 875708754] = "_rgba8888";
    /**
     * 32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_bgra8888"] = 875708738] = "_bgra8888";
    /**
     * 32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian
     */
    WlShmFormat[WlShmFormat["_xrgb2101010"] = 808669784] = "_xrgb2101010";
    /**
     * 32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian
     */
    WlShmFormat[WlShmFormat["_xbgr2101010"] = 808665688] = "_xbgr2101010";
    /**
     * 32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian
     */
    WlShmFormat[WlShmFormat["_rgbx1010102"] = 808671314] = "_rgbx1010102";
    /**
     * 32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian
     */
    WlShmFormat[WlShmFormat["_bgrx1010102"] = 808671298] = "_bgrx1010102";
    /**
     * 32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian
     */
    WlShmFormat[WlShmFormat["_argb2101010"] = 808669761] = "_argb2101010";
    /**
     * 32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian
     */
    WlShmFormat[WlShmFormat["_abgr2101010"] = 808665665] = "_abgr2101010";
    /**
     * 32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian
     */
    WlShmFormat[WlShmFormat["_rgba1010102"] = 808665426] = "_rgba1010102";
    /**
     * 32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian
     */
    WlShmFormat[WlShmFormat["_bgra1010102"] = 808665410] = "_bgra1010102";
    /**
     * packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_yuyv"] = 1448695129] = "_yuyv";
    /**
     * packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_yvyu"] = 1431918169] = "_yvyu";
    /**
     * packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_uyvy"] = 1498831189] = "_uyvy";
    /**
     * packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_vyuy"] = 1498765654] = "_vyuy";
    /**
     * packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian
     */
    WlShmFormat[WlShmFormat["_ayuv"] = 1448433985] = "_ayuv";
    /**
     * 2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane
     */
    WlShmFormat[WlShmFormat["_nv12"] = 842094158] = "_nv12";
    /**
     * 2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane
     */
    WlShmFormat[WlShmFormat["_nv21"] = 825382478] = "_nv21";
    /**
     * 2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane
     */
    WlShmFormat[WlShmFormat["_nv16"] = 909203022] = "_nv16";
    /**
     * 2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane
     */
    WlShmFormat[WlShmFormat["_nv61"] = 825644622] = "_nv61";
    /**
     * 3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes
     */
    WlShmFormat[WlShmFormat["_yuv410"] = 961959257] = "_yuv410";
    /**
     * 3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes
     */
    WlShmFormat[WlShmFormat["_yvu410"] = 961893977] = "_yvu410";
    /**
     * 3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes
     */
    WlShmFormat[WlShmFormat["_yuv411"] = 825316697] = "_yuv411";
    /**
     * 3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes
     */
    WlShmFormat[WlShmFormat["_yvu411"] = 825316953] = "_yvu411";
    /**
     * 3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes
     */
    WlShmFormat[WlShmFormat["_yuv420"] = 842093913] = "_yuv420";
    /**
     * 3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes
     */
    WlShmFormat[WlShmFormat["_yvu420"] = 842094169] = "_yvu420";
    /**
     * 3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes
     */
    WlShmFormat[WlShmFormat["_yuv422"] = 909202777] = "_yuv422";
    /**
     * 3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes
     */
    WlShmFormat[WlShmFormat["_yvu422"] = 909203033] = "_yvu422";
    /**
     * 3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes
     */
    WlShmFormat[WlShmFormat["_yuv444"] = 875713881] = "_yuv444";
    /**
     * 3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes
     */
    WlShmFormat[WlShmFormat["_yvu444"] = 875714137] = "_yvu444";
})(WlShmFormat || (WlShmFormat = {}));
/**
 *
 *      A buffer provides the content for a wl_surface. Buffers are
 *      created through factory interfaces such as wl_drm, wl_shm or
 *      similar. It has a width and a height and can be attached to a
 *      wl_surface, but the mechanism by which a client provides and
 *      updates the contents is defined by the buffer factory interface.
 *
 */
class WlBufferProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Destroy a buffer. If and how you need to release the backing
     *	storage is defined by the buffer factory interface.
     *
     *	For possible side-effects to a surface, see wl_surface.attach.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.release());
        });
    }
}
const WlBufferProtocolName = 'wl_buffer';
/**
 *
 *      A wl_data_offer represents a piece of data offered for transfer
 *      by another client (the source client).  It is used by the
 *      copy-and-paste and drag-and-drop mechanisms.  The offer
 *      describes the different mime types that the data can be
 *      converted to and provides the mechanism for transferring the
 *      data directly from the source client.
 *
 */
class WlDataOfferProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Indicate that the client can accept the given mime type, or
     *	NULL for not accepted.
     *
     *	For objects of version 2 or older, this request is used by the
     *	client to give feedback whether the client can receive the given
     *	mime type, or NULL if none is accepted; the feedback does not
     *	determine whether the drag-and-drop operation succeeds or not.
     *
     *	For objects of version 3 or newer, this request determines the
     *	final result of the drag-and-drop operation. If the end result
     *	is that no mime types were accepted, the drag-and-drop operation
     *	will be cancelled and the corresponding drag source will receive
     *	wl_data_source.cancelled. Clients may still use this event in
     *	conjunction with wl_data_source.action for feedback.
     *
     * @since 1
     *
     */
    accept(serial, mimeType) {
        this._marshall(this.id, 0, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["stringOptional"])(mimeType)]);
    }
    /**
     *
     *	To transfer the offered data, the client issues this request
     *	and indicates the mime type it wants to receive.  The transfer
     *	happens through the passed file descriptor (typically created
     *	with the pipe system call).  The source client writes the data
     *	in the mime type representation requested and then closes the
     *	file descriptor.
     *
     *	The receiving client reads from the read end of the pipe until
     *	EOF and then closes its end, at which point the transfer is
     *	complete.
     *
     *	This request may happen multiple times for different mime types,
     *	both before and after wl_data_device.drop. Drag-and-drop destination
     *	clients may preemptively fetch data or examine it more closely to
     *	determine acceptance.
     *
     * @since 1
     *
     */
    receive(mimeType, fd) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["string"])(mimeType), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["fileDescriptor"])(fd)]);
    }
    /**
     *
     *	Destroy the data offer.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 2, []);
    }
    /**
     *
     *	Notifies the compositor that the drag destination successfully
     *	finished the drag-and-drop operation.
     *
     *	Upon receiving this request, the compositor will emit
     *	wl_data_source.dnd_finished on the drag source client.
     *
     *	It is a client error to perform other requests than
     *	wl_data_offer.destroy after this one. It is also an error to perform
     *	this request after a NULL mime type has been set in
     *	wl_data_offer.accept or no action was received through
     *	wl_data_offer.action.
     *
     * @since 3
     *
     */
    finish() {
        this._marshall(this.id, 3, []);
    }
    /**
     *
     *	Sets the actions that the destination side client supports for
     *	this operation. This request may trigger the emission of
     *	wl_data_source.action and wl_data_offer.action events if the compositor
     *	needs to change the selected action.
     *
     *	This request can be called multiple times throughout the
     *	drag-and-drop operation, typically in response to wl_data_device.enter
     *	or wl_data_device.motion events.
     *
     *	This request determines the final result of the drag-and-drop
     *	operation. If the end result is that no action is accepted,
     *	the drag source will receive wl_drag_source.cancelled.
     *
     *	The dnd_actions argument must contain only values expressed in the
     *	wl_data_device_manager.dnd_actions enum, and the preferred_action
     *	argument must only contain one of those values set, otherwise it
     *	will result in a protocol error.
     *
     *	While managing an "ask" action, the destination drag-and-drop client
     *	may perform further wl_data_offer.receive requests, and is expected
     *	to perform one last wl_data_offer.set_actions request with a preferred
     *	action other than "ask" (and optionally wl_data_offer.accept) before
     *	requesting wl_data_offer.finish, in order to convey the action selected
     *	by the user. If the preferred action is not in the
     *	wl_data_offer.source_actions mask, an error will be raised.
     *
     *	If the "ask" action is dismissed (e.g. user cancellation), the client
     *	is expected to perform wl_data_offer.destroy right away.
     *
     *	This request can only be made on drag-and-drop offers, a protocol error
     *	will be raised otherwise.
     *
     * @since 3
     *
     */
    setActions(dndActions, preferredAction) {
        this._marshall(this.id, 4, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(dndActions), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(preferredAction)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.offer(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.sourceActions(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [2](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.action(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
const WlDataOfferProtocolName = 'wl_data_offer';
var WlDataOfferError;
(function (WlDataOfferError) {
    /**
     * finish request was called untimely
     */
    WlDataOfferError[WlDataOfferError["_invalidFinish"] = 0] = "_invalidFinish";
    /**
     * action mask contains invalid values
     */
    WlDataOfferError[WlDataOfferError["_invalidActionMask"] = 1] = "_invalidActionMask";
    /**
     * action argument has an invalid value
     */
    WlDataOfferError[WlDataOfferError["_invalidAction"] = 2] = "_invalidAction";
    /**
     * offer doesn't accept this request
     */
    WlDataOfferError[WlDataOfferError["_invalidOffer"] = 3] = "_invalidOffer";
})(WlDataOfferError || (WlDataOfferError = {}));
/**
 *
 *      The wl_data_source object is the source side of a wl_data_offer.
 *      It is created by the source client in a data transfer and
 *      provides a way to describe the offered data and a way to respond
 *      to requests to transfer the data.
 *
 */
class WlDataSourceProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	This request adds a mime type to the set of mime types
     *	advertised to targets.  Can be called several times to offer
     *	multiple types.
     *
     * @since 1
     *
     */
    offer(mimeType) {
        this._marshall(this.id, 0, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["string"])(mimeType)]);
    }
    /**
     *
     *	Destroy the data source.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 1, []);
    }
    /**
     *
     *	Sets the actions that the source side client supports for this
     *	operation. This request may trigger wl_data_source.action and
     *	wl_data_offer.action events if the compositor needs to change the
     *	selected action.
     *
     *	The dnd_actions argument must contain only values expressed in the
     *	wl_data_device_manager.dnd_actions enum, otherwise it will result
     *	in a protocol error.
     *
     *	This request must be made once only, and can only be made on sources
     *	used in drag-and-drop, so it must be performed before
     *	wl_data_device.start_drag. Attempting to use the source other than
     *	for drag-and-drop will raise a protocol error.
     *
     * @since 3
     *
     */
    setActions(dndActions) {
        this._marshall(this.id, 2, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(dndActions)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.target(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["sOptional"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.send(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["h"])(message)));
        });
    }
    [2](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.cancelled());
        });
    }
    [3](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.dndDropPerformed());
        });
    }
    [4](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.dndFinished());
        });
    }
    [5](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.action(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
const WlDataSourceProtocolName = 'wl_data_source';
var WlDataSourceError;
(function (WlDataSourceError) {
    /**
     * action mask contains invalid values
     */
    WlDataSourceError[WlDataSourceError["_invalidActionMask"] = 0] = "_invalidActionMask";
    /**
     * source doesn't accept this request
     */
    WlDataSourceError[WlDataSourceError["_invalidSource"] = 1] = "_invalidSource";
})(WlDataSourceError || (WlDataSourceError = {}));
/**
 *
 *      There is one wl_data_device per seat which can be obtained
 *      from the global wl_data_device_manager singleton.
 *
 *      A wl_data_device provides access to inter-client data transfer
 *      mechanisms such as copy-and-paste and drag-and-drop.
 *
 */
class WlDataDeviceProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	This request asks the compositor to start a drag-and-drop
     *	operation on behalf of the client.
     *
     *	The source argument is the data source that provides the data
     *	for the eventual data transfer. If source is NULL, enter, leave
     *	and motion events are sent only to the client that initiated the
     *	drag and the client is expected to handle the data passing
     *	internally.
     *
     *	The origin surface is the surface where the drag originates and
     *	the client must have an active implicit grab that matches the
     *	serial.
     *
     *	The icon surface is an optional (can be NULL) surface that
     *	provides an icon to be moved around with the cursor.  Initially,
     *	the top-left corner of the icon surface is placed at the cursor
     *	hotspot, but subsequent wl_surface.attach request can move the
     *	relative position. Attach requests must be confirmed with
     *	wl_surface.commit as usual. The icon surface is given the role of
     *	a drag-and-drop icon. If the icon surface already has another role,
     *	it raises a protocol error.
     *
     *	The current and pending input regions of the icon wl_surface are
     *	cleared, and wl_surface.set_input_region is ignored until the
     *	wl_surface is no longer used as the icon surface. When the use
     *	as an icon ends, the current and pending input regions become
     *	undefined, and the wl_surface is unmapped.
     *
     * @since 1
     *
     */
    startDrag(source, origin, icon, serial) {
        this._marshall(this.id, 0, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(source), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(origin), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(icon), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    /**
     *
     *	This request asks the compositor to set the selection
     *	to the data from the source on behalf of the client.
     *
     *	To unset the selection, set the source to NULL.
     *
     * @since 1
     *
     */
    setSelection(source, serial) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(source), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    /**
     *
     *	This request destroys the data device.
     *
     * @since 2
     *
     */
    release() {
        super.destroy();
        this._marshall(this.id, 2, []);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.dataOffer(new WlDataOfferProxy(this.display, this._connection, Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["n"])(message))));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.enter(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["oOptional"])(message, this._connection)));
        });
    }
    [2](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.leave());
        });
    }
    [3](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.motion(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message)));
        });
    }
    [4](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.drop());
        });
    }
    [5](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.selection(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["oOptional"])(message, this._connection)));
        });
    }
}
const WlDataDeviceProtocolName = 'wl_data_device';
var WlDataDeviceError;
(function (WlDataDeviceError) {
    /**
     * given wl_surface has another role
     */
    WlDataDeviceError[WlDataDeviceError["_role"] = 0] = "_role";
})(WlDataDeviceError || (WlDataDeviceError = {}));
/**
 *
 *      The wl_data_device_manager is a singleton global object that
 *      provides access to inter-client data transfer mechanisms such as
 *      copy-and-paste and drag-and-drop.  These mechanisms are tied to
 *      a wl_seat and this interface lets a client get a wl_data_device
 *      corresponding to a wl_seat.
 *
 *      Depending on the version bound, the objects created from the bound
 *      wl_data_device_manager object will have different requirements for
 *      functioning properly. See wl_data_source.set_actions,
 *      wl_data_offer.accept and wl_data_offer.finish for details.
 *
 */
class WlDataDeviceManagerProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Create a new data source.
     *
     * @since 1
     *
     */
    createDataSource() {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["WlDataSourceProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	Create a new data device for a given seat.
     *
     * @since 1
     *
     */
    getDataDevice(seat) {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["WlDataDeviceProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(seat)]);
    }
}
const WlDataDeviceManagerProtocolName = 'wl_data_device_manager';
var WlDataDeviceManagerDndAction;
(function (WlDataDeviceManagerDndAction) {
    /**
     * no action
     */
    WlDataDeviceManagerDndAction[WlDataDeviceManagerDndAction["_none"] = 0] = "_none";
    /**
     * copy action
     */
    WlDataDeviceManagerDndAction[WlDataDeviceManagerDndAction["_copy"] = 1] = "_copy";
    /**
     * move action
     */
    WlDataDeviceManagerDndAction[WlDataDeviceManagerDndAction["_move"] = 2] = "_move";
    /**
     * ask action
     */
    WlDataDeviceManagerDndAction[WlDataDeviceManagerDndAction["_ask"] = 4] = "_ask";
})(WlDataDeviceManagerDndAction || (WlDataDeviceManagerDndAction = {}));
/**
 *
 *      This interface is implemented by servers that provide
 *      desktop-style user interfaces.
 *
 *      It allows clients to associate a wl_shell_surface with
 *      a basic surface.
 *
 */
class WlShellProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Create a shell surface for an existing surface. This gives
     *	the wl_surface the role of a shell surface. If the wl_surface
     *	already has another role, it raises a protocol error.
     *
     *	Only one shell surface can be associated with a given surface.
     *
     * @since 1
     *
     */
    getShellSurface(surface) {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["WlShellSurfaceProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(surface)]);
    }
}
const WlShellProtocolName = 'wl_shell';
var WlShellError;
(function (WlShellError) {
    /**
     * given wl_surface has another role
     */
    WlShellError[WlShellError["_role"] = 0] = "_role";
})(WlShellError || (WlShellError = {}));
/**
 *
 *      An interface that may be implemented by a wl_surface, for
 *      implementations that provide a desktop-style user interface.
 *
 *      It provides requests to treat surfaces like toplevel, fullscreen
 *      or popup windows, move, resize or maximize them, associate
 *      metadata like title and class, etc.
 *
 *      On the server side the object is automatically destroyed when
 *      the related wl_surface is destroyed. On the client side,
 *      wl_shell_surface_destroy() must be called before destroying
 *      the wl_surface object.
 *
 */
class WlShellSurfaceProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	A client must respond to a ping event with a pong request or
     *	the client may be deemed unresponsive.
     *
     * @since 1
     *
     */
    pong(serial) {
        this._marshall(this.id, 0, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    /**
     *
     *	Start a pointer-driven move of the surface.
     *
     *	This request must be used in response to a button press event.
     *	The server may ignore move requests depending on the state of
     *	the surface (e.g. fullscreen or maximized).
     *
     * @since 1
     *
     */
    move(seat, serial) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(seat), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    /**
     *
     *	Start a pointer-driven resizing of the surface.
     *
     *	This request must be used in response to a button press event.
     *	The server may ignore resize requests depending on the state of
     *	the surface (e.g. fullscreen or maximized).
     *
     * @since 1
     *
     */
    resize(seat, serial, edges) {
        this._marshall(this.id, 2, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(seat), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(edges)]);
    }
    /**
     *
     *	Map the surface as a toplevel surface.
     *
     *	A toplevel surface is not fullscreen, maximized or transient.
     *
     * @since 1
     *
     */
    setToplevel() {
        this._marshall(this.id, 3, []);
    }
    /**
     *
     *	Map the surface relative to an existing surface.
     *
     *	The x and y arguments specify the location of the upper left
     *	corner of the surface relative to the upper left corner of the
     *	parent surface, in surface-local coordinates.
     *
     *	The flags argument controls details of the transient behaviour.
     *
     * @since 1
     *
     */
    setTransient(parent, x, y, flags) {
        this._marshall(this.id, 4, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(parent), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(flags)]);
    }
    /**
     *
     *	Map the surface as a fullscreen surface.
     *
     *	If an output parameter is given then the surface will be made
     *	fullscreen on that output. If the client does not specify the
     *	output then the compositor will apply its policy - usually
     *	choosing the output on which the surface has the biggest surface
     *	area.
     *
     *	The client may specify a method to resolve a size conflict
     *	between the output size and the surface size - this is provided
     *	through the method parameter.
     *
     *	The framerate parameter is used only when the method is set
     *	to "driver", to indicate the preferred framerate. A value of 0
     *	indicates that the client does not care about framerate.  The
     *	framerate is specified in mHz, that is framerate of 60000 is 60Hz.
     *
     *	A method of "scale" or "driver" implies a scaling operation of
     *	the surface, either via a direct scaling operation or a change of
     *	the output mode. This will override any kind of output scaling, so
     *	that mapping a surface with a buffer size equal to the mode can
     *	fill the screen independent of buffer_scale.
     *
     *	A method of "fill" means we don't scale up the buffer, however
     *	any output scale is applied. This means that you may run into
     *	an edge case where the application maps a buffer with the same
     *	size of the output mode but buffer_scale 1 (thus making a
     *	surface larger than the output). In this case it is allowed to
     *	downscale the results to fit the screen.
     *
     *	The compositor must reply to this request with a configure event
     *	with the dimensions for the output on which the surface will
     *	be made fullscreen.
     *
     * @since 1
     *
     */
    setFullscreen(method, framerate, output) {
        this._marshall(this.id, 5, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(method), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(framerate), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(output)]);
    }
    /**
     *
     *	Map the surface as a popup.
     *
     *	A popup surface is a transient surface with an added pointer
     *	grab.
     *
     *	An existing implicit grab will be changed to owner-events mode,
     *	and the popup grab will continue after the implicit grab ends
     *	(i.e. releasing the mouse button does not cause the popup to
     *	be unmapped).
     *
     *	The popup grab continues until the window is destroyed or a
     *	mouse button is pressed in any other client's window. A click
     *	in any of the client's surfaces is reported as normal, however,
     *	clicks in other clients' surfaces will be discarded and trigger
     *	the callback.
     *
     *	The x and y arguments specify the location of the upper left
     *	corner of the surface relative to the upper left corner of the
     *	parent surface, in surface-local coordinates.
     *
     * @since 1
     *
     */
    setPopup(seat, serial, parent, x, y, flags) {
        this._marshall(this.id, 6, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(seat), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(parent), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(flags)]);
    }
    /**
     *
     *	Map the surface as a maximized surface.
     *
     *	If an output parameter is given then the surface will be
     *	maximized on that output. If the client does not specify the
     *	output then the compositor will apply its policy - usually
     *	choosing the output on which the surface has the biggest surface
     *	area.
     *
     *	The compositor will reply with a configure event telling
     *	the expected new surface size. The operation is completed
     *	on the next buffer attach to this surface.
     *
     *	A maximized surface typically fills the entire output it is
     *	bound to, except for desktop elements such as panels. This is
     *	the main difference between a maximized shell surface and a
     *	fullscreen shell surface.
     *
     *	The details depend on the compositor implementation.
     *
     * @since 1
     *
     */
    setMaximized(output) {
        this._marshall(this.id, 7, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(output)]);
    }
    /**
     *
     *	Set a short title for the surface.
     *
     *	This string may be used to identify the surface in a task bar,
     *	window list, or other user interface elements provided by the
     *	compositor.
     *
     *	The string must be encoded in UTF-8.
     *
     * @since 1
     *
     */
    setTitle(title) {
        this._marshall(this.id, 8, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["string"])(title)]);
    }
    /**
     *
     *	Set a class for the surface.
     *
     *	The surface class identifies the general class of applications
     *	to which the surface belongs. A common convention is to use the
     *	file name (or the full path if it is a non-standard location) of
     *	the application's .desktop file as the class.
     *
     * @since 1
     *
     */
    setClass(clazz) {
        this._marshall(this.id, 9, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["string"])(clazz)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.ping(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.configure(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message)));
        });
    }
    [2](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.popupDone());
        });
    }
}
const WlShellSurfaceProtocolName = 'wl_shell_surface';
var WlShellSurfaceResize;
(function (WlShellSurfaceResize) {
    /**
     * no edge
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_none"] = 0] = "_none";
    /**
     * top edge
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_top"] = 1] = "_top";
    /**
     * bottom edge
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_bottom"] = 2] = "_bottom";
    /**
     * left edge
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_left"] = 4] = "_left";
    /**
     * top and left edges
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_topLeft"] = 5] = "_topLeft";
    /**
     * bottom and left edges
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_bottomLeft"] = 6] = "_bottomLeft";
    /**
     * right edge
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_right"] = 8] = "_right";
    /**
     * top and right edges
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_topRight"] = 9] = "_topRight";
    /**
     * bottom and right edges
     */
    WlShellSurfaceResize[WlShellSurfaceResize["_bottomRight"] = 10] = "_bottomRight";
})(WlShellSurfaceResize || (WlShellSurfaceResize = {}));
var WlShellSurfaceTransient;
(function (WlShellSurfaceTransient) {
    /**
     * do not set keyboard focus
     */
    WlShellSurfaceTransient[WlShellSurfaceTransient["_inactive"] = 1] = "_inactive";
})(WlShellSurfaceTransient || (WlShellSurfaceTransient = {}));
var WlShellSurfaceFullscreenMethod;
(function (WlShellSurfaceFullscreenMethod) {
    /**
     * no preference, apply default policy
     */
    WlShellSurfaceFullscreenMethod[WlShellSurfaceFullscreenMethod["_default"] = 0] = "_default";
    /**
     * scale, preserve the surface's aspect ratio and center on output
     */
    WlShellSurfaceFullscreenMethod[WlShellSurfaceFullscreenMethod["_scale"] = 1] = "_scale";
    /**
     * switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch
     */
    WlShellSurfaceFullscreenMethod[WlShellSurfaceFullscreenMethod["_driver"] = 2] = "_driver";
    /**
     * no upscaling, center on output and add black borders to compensate size mismatch
     */
    WlShellSurfaceFullscreenMethod[WlShellSurfaceFullscreenMethod["_fill"] = 3] = "_fill";
})(WlShellSurfaceFullscreenMethod || (WlShellSurfaceFullscreenMethod = {}));
/**
 *
 *      A surface is a rectangular area that is displayed on the screen.
 *      It has a location, size and pixel contents.
 *
 *      The size of a surface (and relative positions on it) is described
 *      in surface-local coordinates, which may differ from the buffer
 *      coordinates of the pixel content, in case a buffer_transform
 *      or a buffer_scale is used.
 *
 *      A surface without a "role" is fairly useless: a compositor does
 *      not know where, when or how to present it. The role is the
 *      purpose of a wl_surface. Examples of roles are a cursor for a
 *      pointer (as set by wl_pointer.set_cursor), a drag icon
 *      (wl_data_device.start_drag), a sub-surface
 *      (wl_subcompositor.get_subsurface), and a window as defined by a
 *      shell protocol (e.g. wl_shell.get_shell_surface).
 *
 *      A surface can have only one role at a time. Initially a
 *      wl_surface does not have a role. Once a wl_surface is given a
 *      role, it is set permanently for the whole lifetime of the
 *      wl_surface object. Giving the current role again is allowed,
 *      unless explicitly forbidden by the relevant interface
 *      specification.
 *
 *      Surface roles are given by requests in other interfaces such as
 *      wl_pointer.set_cursor. The request should explicitly mention
 *      that this request gives a role to a wl_surface. Often, this
 *      request also creates a new protocol object that represents the
 *      role and adds additional functionality to wl_surface. When a
 *      client wants to destroy a wl_surface, they must destroy this 'role
 *      object' before the wl_surface.
 *
 *      Destroying the role object does not remove the role from the
 *      wl_surface, but it may stop the wl_surface from "playing the role".
 *      For instance, if a wl_subsurface object is destroyed, the wl_surface
 *      it was created for will be unmapped and forget its position and
 *      z-order. It is allowed to create a wl_subsurface for the same
 *      wl_surface again, but it is not allowed to use the wl_surface as
 *      a cursor (cursor is a different role than sub-surface, and role
 *      switching is not allowed).
 *
 */
class WlSurfaceProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Deletes the surface and invalidates its object ID.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	Set a buffer as the content of this surface.
     *
     *	The new size of the surface is calculated based on the buffer
     *	size transformed by the inverse buffer_transform and the
     *	inverse buffer_scale. This means that the supplied buffer
     *	must be an integer multiple of the buffer_scale.
     *
     *	The x and y arguments specify the location of the new pending
     *	buffer's upper left corner, relative to the current buffer's upper
     *	left corner, in surface-local coordinates. In other words, the
     *	x and y, combined with the new surface size define in which
     *	directions the surface's size changes.
     *
     *	Surface contents are double-buffered state, see wl_surface.commit.
     *
     *	The initial surface contents are void; there is no content.
     *	wl_surface.attach assigns the given wl_buffer as the pending
     *	wl_buffer. wl_surface.commit makes the pending wl_buffer the new
     *	surface contents, and the size of the surface becomes the size
     *	calculated from the wl_buffer, as described above. After commit,
     *	there is no pending buffer until the next attach.
     *
     *	Committing a pending wl_buffer allows the compositor to read the
     *	pixels in the wl_buffer. The compositor may access the pixels at
     *	any time after the wl_surface.commit request. When the compositor
     *	will not access the pixels anymore, it will send the
     *	wl_buffer.release event. Only after receiving wl_buffer.release,
     *	the client may reuse the wl_buffer. A wl_buffer that has been
     *	attached and then replaced by another attach instead of committed
     *	will not receive a release event, and is not used by the
     *	compositor.
     *
     *	Destroying the wl_buffer after wl_buffer.release does not change
     *	the surface contents. However, if the client destroys the
     *	wl_buffer before receiving the wl_buffer.release event, the surface
     *	contents become undefined immediately.
     *
     *	If wl_surface.attach is sent with a NULL wl_buffer, the
     *	following wl_surface.commit will remove the surface content.
     *
     * @since 1
     *
     */
    attach(buffer, x, y) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(buffer), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y)]);
    }
    /**
     *
     *	This request is used to describe the regions where the pending
     *	buffer is different from the current surface contents, and where
     *	the surface therefore needs to be repainted. The compositor
     *	ignores the parts of the damage that fall outside of the surface.
     *
     *	Damage is double-buffered state, see wl_surface.commit.
     *
     *	The damage rectangle is specified in surface-local coordinates,
     *	where x and y specify the upper left corner of the damage rectangle.
     *
     *	The initial value for pending damage is empty: no damage.
     *	wl_surface.damage adds pending damage: the new pending damage
     *	is the union of old pending damage and the given rectangle.
     *
     *	wl_surface.commit assigns pending damage as the current damage,
     *	and clears pending damage. The server will clear the current
     *	damage as it repaints the surface.
     *
     *	Alternatively, damage can be posted with wl_surface.damage_buffer
     *	which uses buffer coordinates instead of surface coordinates,
     *	and is probably the preferred and intuitive way of doing this.
     *
     * @since 1
     *
     */
    damage(x, y, width, height) {
        this._marshall(this.id, 2, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
    /**
     *
     *	Request a notification when it is a good time to start drawing a new
     *	frame, by creating a frame callback. This is useful for throttling
     *	redrawing operations, and driving animations.
     *
     *	When a client is animating on a wl_surface, it can use the 'frame'
     *	request to get notified when it is a good time to draw and commit the
     *	next frame of animation. If the client commits an update earlier than
     *	that, it is likely that some updates will not make it to the display,
     *	and the client is wasting resources by drawing too often.
     *
     *	The frame request will take effect on the next wl_surface.commit.
     *	The notification will only be posted for one frame unless
     *	requested again. For a wl_surface, the notifications are posted in
     *	the order the frame requests were committed.
     *
     *	The server must send the notifications so that a client
     *	will not send excessive updates, while still allowing
     *	the highest possible update rate for clients that wait for the reply
     *	before drawing again. The server should give some time for the client
     *	to draw and commit after sending the frame callback events to let it
     *	hit the next output refresh.
     *
     *	A server should avoid signaling the frame callbacks if the
     *	surface is not visible in any way, e.g. the surface is off-screen,
     *	or completely obscured by other opaque surfaces.
     *
     *	The object returned by this request will be destroyed by the
     *	compositor after the callback is fired and as such the client must not
     *	attempt to use it after that point.
     *
     *	The callback_data passed in the callback is the current time, in
     *	milliseconds, with an undefined base.
     *
     * @since 1
     *
     */
    frame() {
        return this._marshallConstructor(this.id, 3, ___WEBPACK_IMPORTED_MODULE_1__["WlCallbackProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	This request sets the region of the surface that contains
     *	opaque content.
     *
     *	The opaque region is an optimization hint for the compositor
     *	that lets it optimize the redrawing of content behind opaque
     *	regions.  Setting an opaque region is not required for correct
     *	behaviour, but marking transparent content as opaque will result
     *	in repaint artifacts.
     *
     *	The opaque region is specified in surface-local coordinates.
     *
     *	The compositor ignores the parts of the opaque region that fall
     *	outside of the surface.
     *
     *	Opaque region is double-buffered state, see wl_surface.commit.
     *
     *	wl_surface.set_opaque_region changes the pending opaque region.
     *	wl_surface.commit copies the pending region to the current region.
     *	Otherwise, the pending and current regions are never changed.
     *
     *	The initial value for an opaque region is empty. Setting the pending
     *	opaque region has copy semantics, and the wl_region object can be
     *	destroyed immediately. A NULL wl_region causes the pending opaque
     *	region to be set to empty.
     *
     * @since 1
     *
     */
    setOpaqueRegion(region) {
        this._marshall(this.id, 4, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(region)]);
    }
    /**
     *
     *	This request sets the region of the surface that can receive
     *	pointer and touch events.
     *
     *	Input events happening outside of this region will try the next
     *	surface in the server surface stack. The compositor ignores the
     *	parts of the input region that fall outside of the surface.
     *
     *	The input region is specified in surface-local coordinates.
     *
     *	Input region is double-buffered state, see wl_surface.commit.
     *
     *	wl_surface.set_input_region changes the pending input region.
     *	wl_surface.commit copies the pending region to the current region.
     *	Otherwise the pending and current regions are never changed,
     *	except cursor and icon surfaces are special cases, see
     *	wl_pointer.set_cursor and wl_data_device.start_drag.
     *
     *	The initial value for an input region is infinite. That means the
     *	whole surface will accept input. Setting the pending input region
     *	has copy semantics, and the wl_region object can be destroyed
     *	immediately. A NULL wl_region causes the input region to be set
     *	to infinite.
     *
     * @since 1
     *
     */
    setInputRegion(region) {
        this._marshall(this.id, 5, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(region)]);
    }
    /**
     *
     *	Surface state (input, opaque, and damage regions, attached buffers,
     *	etc.) is double-buffered. Protocol requests modify the pending state,
     *	as opposed to the current state in use by the compositor. A commit
     *	request atomically applies all pending state, replacing the current
     *	state. After commit, the new pending state is as documented for each
     *	related request.
     *
     *	On commit, a pending wl_buffer is applied first, and all other state
     *	second. This means that all coordinates in double-buffered state are
     *	relative to the new wl_buffer coming into use, except for
     *	wl_surface.attach itself. If there is no pending wl_buffer, the
     *	coordinates are relative to the current surface contents.
     *
     *	All requests that need a commit to become effective are documented
     *	to affect double-buffered state.
     *
     *	Other interfaces may add further double-buffered surface state.
     *
     * @since 1
     *
     */
    commit(serial) {
        this._marshall(this.id, 6, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    /**
     *
     *	This request sets an optional transformation on how the compositor
     *	interprets the contents of the buffer attached to the surface. The
     *	accepted values for the transform parameter are the values for
     *	wl_output.transform.
     *
     *	Buffer transform is double-buffered state, see wl_surface.commit.
     *
     *	A newly created surface has its buffer transformation set to normal.
     *
     *	wl_surface.set_buffer_transform changes the pending buffer
     *	transformation. wl_surface.commit copies the pending buffer
     *	transformation to the current one. Otherwise, the pending and current
     *	values are never changed.
     *
     *	The purpose of this request is to allow clients to render content
     *	according to the output transform, thus permitting the compositor to
     *	use certain optimizations even if the display is rotated. Using
     *	hardware overlays and scanning out a client buffer for fullscreen
     *	surfaces are examples of such optimizations. Those optimizations are
     *	highly dependent on the compositor implementation, so the use of this
     *	request should be considered on a case-by-case basis.
     *
     *	Note that if the transform value includes 90 or 270 degree rotation,
     *	the width of the buffer will become the surface height and the height
     *	of the buffer will become the surface width.
     *
     *	If transform is not one of the values from the
     *	wl_output.transform enum the invalid_transform protocol error
     *	is raised.
     *
     * @since 2
     *
     */
    setBufferTransform(transform) {
        this._marshall(this.id, 7, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(transform)]);
    }
    /**
     *
     *	This request sets an optional scaling factor on how the compositor
     *	interprets the contents of the buffer attached to the window.
     *
     *	Buffer scale is double-buffered state, see wl_surface.commit.
     *
     *	A newly created surface has its buffer scale set to 1.
     *
     *	wl_surface.set_buffer_scale changes the pending buffer scale.
     *	wl_surface.commit copies the pending buffer scale to the current one.
     *	Otherwise, the pending and current values are never changed.
     *
     *	The purpose of this request is to allow clients to supply higher
     *	resolution buffer data for use on high resolution outputs. It is
     *	intended that you pick the same buffer scale as the scale of the
     *	output that the surface is displayed on. This means the compositor
     *	can avoid scaling when rendering the surface on that output.
     *
     *	Note that if the scale is larger than 1, then you have to attach
     *	a buffer that is larger (by a factor of scale in each dimension)
     *	than the desired surface size.
     *
     *	If scale is not positive the invalid_scale protocol error is
     *	raised.
     *
     * @since 3
     *
     */
    setBufferScale(scale) {
        this._marshall(this.id, 8, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(scale)]);
    }
    /**
     *
     *	This request is used to describe the regions where the pending
     *	buffer is different from the current surface contents, and where
     *	the surface therefore needs to be repainted. The compositor
     *	ignores the parts of the damage that fall outside of the surface.
     *
     *	Damage is double-buffered state, see wl_surface.commit.
     *
     *	The damage rectangle is specified in buffer coordinates,
     *	where x and y specify the upper left corner of the damage rectangle.
     *
     *	The initial value for pending damage is empty: no damage.
     *	wl_surface.damage_buffer adds pending damage: the new pending
     *	damage is the union of old pending damage and the given rectangle.
     *
     *	wl_surface.commit assigns pending damage as the current damage,
     *	and clears pending damage. The server will clear the current
     *	damage as it repaints the surface.
     *
     *	This request differs from wl_surface.damage in only one way - it
     *	takes damage in buffer coordinates instead of surface-local
     *	coordinates. While this generally is more intuitive than surface
     *	coordinates, it is especially desirable when using wp_viewport
     *	or when a drawing library (like EGL) is unaware of buffer scale
     *	and buffer transform.
     *
     *	Note: Because buffer transformation changes and damage requests may
     *	be interleaved in the protocol stream, it is impossible to determine
     *	the actual mapping between surface and buffer damage until
     *	wl_surface.commit time. Therefore, compositors wishing to take both
     *	kinds of damage into account will have to accumulate damage from the
     *	two requests separately and only transform from one to the other
     *	after receiving the wl_surface.commit.
     *
     * @since 4
     *
     */
    damageBuffer(x, y, width, height) {
        this._marshall(this.id, 9, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.enter(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.leave(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection)));
        });
    }
}
const WlSurfaceProtocolName = 'wl_surface';
var WlSurfaceError;
(function (WlSurfaceError) {
    /**
     * buffer scale value is invalid
     */
    WlSurfaceError[WlSurfaceError["_invalidScale"] = 0] = "_invalidScale";
    /**
     * buffer transform value is invalid
     */
    WlSurfaceError[WlSurfaceError["_invalidTransform"] = 1] = "_invalidTransform";
})(WlSurfaceError || (WlSurfaceError = {}));
/**
 *
 *      A seat is a group of keyboards, pointer and touch devices. This
 *      object is published as a global during start up, or when such a
 *      device is hot plugged.  A seat typically has a pointer and
 *      maintains a keyboard focus and a pointer focus.
 *
 */
class WlSeatProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	The ID provided will be initialized to the wl_pointer interface
     *	for this seat.
     *
     *	This request only takes effect if the seat has the pointer
     *	capability, or has had the pointer capability in the past.
     *	It is a protocol violation to issue this request on a seat that has
     *	never had the pointer capability.
     *
     * @since 1
     *
     */
    getPointer() {
        return this._marshallConstructor(this.id, 0, ___WEBPACK_IMPORTED_MODULE_1__["WlPointerProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	The ID provided will be initialized to the wl_keyboard interface
     *	for this seat.
     *
     *	This request only takes effect if the seat has the keyboard
     *	capability, or has had the keyboard capability in the past.
     *	It is a protocol violation to issue this request on a seat that has
     *	never had the keyboard capability.
     *
     * @since 1
     *
     */
    getKeyboard() {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["WlKeyboardProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	The ID provided will be initialized to the wl_touch interface
     *	for this seat.
     *
     *	This request only takes effect if the seat has the touch
     *	capability, or has had the touch capability in the past.
     *	It is a protocol violation to issue this request on a seat that has
     *	never had the touch capability.
     *
     * @since 1
     *
     */
    getTouch() {
        return this._marshallConstructor(this.id, 2, ___WEBPACK_IMPORTED_MODULE_1__["WlTouchProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	Using this request a client can tell the server that it is not going to
     *	use the seat object anymore.
     *
     * @since 5
     *
     */
    release() {
        super.destroy();
        this._marshall(this.id, 3, []);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.capabilities(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.name(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message)));
        });
    }
}
const WlSeatProtocolName = 'wl_seat';
var WlSeatCapability;
(function (WlSeatCapability) {
    /**
     * the seat has pointer devices
     */
    WlSeatCapability[WlSeatCapability["_pointer"] = 1] = "_pointer";
    /**
     * the seat has one or more keyboards
     */
    WlSeatCapability[WlSeatCapability["_keyboard"] = 2] = "_keyboard";
    /**
     * the seat has touch devices
     */
    WlSeatCapability[WlSeatCapability["_touch"] = 4] = "_touch";
})(WlSeatCapability || (WlSeatCapability = {}));
/**
 *
 *      The wl_pointer interface represents one or more input devices,
 *      such as mice, which control the pointer location and pointer_focus
 *      of a seat.
 *
 *      The wl_pointer interface generates motion, enter and leave
 *      events for the surfaces that the pointer is located over,
 *      and button and axis events for button presses, button releases
 *      and scrolling.
 *
 */
class WlPointerProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Set the pointer surface, i.e., the surface that contains the
     *	pointer image (cursor). This request gives the surface the role
     *	of a cursor. If the surface already has another role, it raises
     *	a protocol error.
     *
     *	The cursor actually changes only if the pointer
     *	focus for this device is one of the requesting client's surfaces
     *	or the surface parameter is the current pointer surface. If
     *	there was a previous surface set with this request it is
     *	replaced. If surface is NULL, the pointer image is hidden.
     *
     *	The parameters hotspot_x and hotspot_y define the position of
     *	the pointer surface relative to the pointer location. Its
     *	top-left corner is always at (x, y) - (hotspot_x, hotspot_y),
     *	where (x, y) are the coordinates of the pointer location, in
     *	surface-local coordinates.
     *
     *	On surface.attach requests to the pointer surface, hotspot_x
     *	and hotspot_y are decremented by the x and y parameters
     *	passed to the request. Attach must be confirmed by
     *	wl_surface.commit as usual.
     *
     *	The hotspot can also be updated by passing the currently set
     *	pointer surface to this request with new values for hotspot_x
     *	and hotspot_y.
     *
     *	The current and pending input regions of the wl_surface are
     *	cleared, and wl_surface.set_input_region is ignored until the
     *	wl_surface is no longer used as the cursor. When the use as a
     *	cursor ends, the current and pending input regions become
     *	undefined, and the wl_surface is unmapped.
     *
     * @since 1
     *
     */
    setCursor(serial, surface, hotspotX, hotspotY) {
        this._marshall(this.id, 0, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(surface), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(hotspotX), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(hotspotY)]);
    }
    /**
     *
     *	Using this request a client can tell the server that it is not going to
     *	use the pointer object anymore.
     *
     *	This request destroys the pointer proxy object, so clients must not call
     *	wl_pointer_destroy() after using this request.
     *
     * @since 3
     *
     */
    release() {
        super.destroy();
        this._marshall(this.id, 1, []);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.enter(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.leave(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection)));
        });
    }
    [2](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.motion(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message)));
        });
    }
    [3](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.button(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [4](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.axis(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message)));
        });
    }
    [5](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.frame());
        });
    }
    [6](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.axisSource(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [7](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.axisStop(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [8](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.axisDiscrete(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message)));
        });
    }
}
const WlPointerProtocolName = 'wl_pointer';
var WlPointerError;
(function (WlPointerError) {
    /**
     * given wl_surface has another role
     */
    WlPointerError[WlPointerError["_role"] = 0] = "_role";
})(WlPointerError || (WlPointerError = {}));
var WlPointerButtonState;
(function (WlPointerButtonState) {
    /**
     * the button is not pressed
     */
    WlPointerButtonState[WlPointerButtonState["_released"] = 0] = "_released";
    /**
     * the button is pressed
     */
    WlPointerButtonState[WlPointerButtonState["_pressed"] = 1] = "_pressed";
})(WlPointerButtonState || (WlPointerButtonState = {}));
var WlPointerAxis;
(function (WlPointerAxis) {
    /**
     * vertical axis
     */
    WlPointerAxis[WlPointerAxis["_verticalScroll"] = 0] = "_verticalScroll";
    /**
     * horizontal axis
     */
    WlPointerAxis[WlPointerAxis["_horizontalScroll"] = 1] = "_horizontalScroll";
})(WlPointerAxis || (WlPointerAxis = {}));
var WlPointerAxisSource;
(function (WlPointerAxisSource) {
    /**
     * a physical wheel rotation
     */
    WlPointerAxisSource[WlPointerAxisSource["_wheel"] = 0] = "_wheel";
    /**
     * finger on a touch surface
     */
    WlPointerAxisSource[WlPointerAxisSource["_finger"] = 1] = "_finger";
    /**
     * continuous coordinate space
     */
    WlPointerAxisSource[WlPointerAxisSource["_continuous"] = 2] = "_continuous";
    /**
     * a physical wheel tilt
     */
    WlPointerAxisSource[WlPointerAxisSource["_wheelTilt"] = 3] = "_wheelTilt";
})(WlPointerAxisSource || (WlPointerAxisSource = {}));
/**
 *
 *      The wl_keyboard interface represents one or more keyboards
 *      associated with a seat.
 *
 */
class WlKeyboardProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     * @since 3
     *
     */
    release() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.keymap(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["h"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.enter(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["a"])(message)));
        });
    }
    [2](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.leave(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection)));
        });
    }
    [3](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.key(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [4](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.modifiers(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [5](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.repeatInfo(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message)));
        });
    }
}
const WlKeyboardProtocolName = 'wl_keyboard';
var WlKeyboardKeymapFormat;
(function (WlKeyboardKeymapFormat) {
    /**
     * no keymap; client must understand how to interpret the raw keycode
     */
    WlKeyboardKeymapFormat[WlKeyboardKeymapFormat["_noKeymap"] = 0] = "_noKeymap";
    /**
     * libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode
     */
    WlKeyboardKeymapFormat[WlKeyboardKeymapFormat["_xkbV1"] = 1] = "_xkbV1";
})(WlKeyboardKeymapFormat || (WlKeyboardKeymapFormat = {}));
var WlKeyboardKeyState;
(function (WlKeyboardKeyState) {
    /**
     * key is not pressed
     */
    WlKeyboardKeyState[WlKeyboardKeyState["_released"] = 0] = "_released";
    /**
     * key is pressed
     */
    WlKeyboardKeyState[WlKeyboardKeyState["_pressed"] = 1] = "_pressed";
})(WlKeyboardKeyState || (WlKeyboardKeyState = {}));
/**
 *
 *      The wl_touch interface represents a touchscreen
 *      associated with a seat.
 *
 *      Touch interactions can consist of one or more contacts.
 *      For each contact, a series of events is generated, starting
 *      with a down event, followed by zero or more motion events,
 *      and ending with an up event. Events relating to the same
 *      contact point can be identified by the ID of the sequence.
 *
 */
class WlTouchProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     * @since 3
     *
     */
    release() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.down(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.up(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message)));
        });
    }
    [2](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.motion(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message)));
        });
    }
    [3](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.frame());
        });
    }
    [4](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.cancel());
        });
    }
    [5](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.shape(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message)));
        });
    }
    [6](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.orientation(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["f"])(message)));
        });
    }
}
const WlTouchProtocolName = 'wl_touch';
/**
 *
 *      An output describes part of the compositor geometry.  The
 *      compositor works in the 'compositor coordinate system' and an
 *      output corresponds to a rectangular area in that space that is
 *      actually visible.  This typically corresponds to a monitor that
 *      displays part of the compositor space.  This object is published
 *      as global during start up, or when a monitor is hotplugged.
 *
 */
class WlOutputProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Using this request a client can tell the server that it is not going to
     *	use the output object anymore.
     *
     * @since 3
     *
     */
    release() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.geometry(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.mode(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message)));
        });
    }
    [2](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.done());
        });
    }
    [3](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.scale(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message)));
        });
    }
}
const WlOutputProtocolName = 'wl_output';
var WlOutputSubpixel;
(function (WlOutputSubpixel) {
    /**
     * unknown geometry
     */
    WlOutputSubpixel[WlOutputSubpixel["_unknown"] = 0] = "_unknown";
    /**
     * no geometry
     */
    WlOutputSubpixel[WlOutputSubpixel["_none"] = 1] = "_none";
    /**
     * horizontal RGB
     */
    WlOutputSubpixel[WlOutputSubpixel["_horizontalRgb"] = 2] = "_horizontalRgb";
    /**
     * horizontal BGR
     */
    WlOutputSubpixel[WlOutputSubpixel["_horizontalBgr"] = 3] = "_horizontalBgr";
    /**
     * vertical RGB
     */
    WlOutputSubpixel[WlOutputSubpixel["_verticalRgb"] = 4] = "_verticalRgb";
    /**
     * vertical BGR
     */
    WlOutputSubpixel[WlOutputSubpixel["_verticalBgr"] = 5] = "_verticalBgr";
})(WlOutputSubpixel || (WlOutputSubpixel = {}));
var WlOutputTransform;
(function (WlOutputTransform) {
    /**
     * no transform
     */
    WlOutputTransform[WlOutputTransform["_normal"] = 0] = "_normal";
    /**
     * 90 degrees counter-clockwise
     */
    WlOutputTransform[WlOutputTransform["_90"] = 1] = "_90";
    /**
     * 180 degrees counter-clockwise
     */
    WlOutputTransform[WlOutputTransform["_180"] = 2] = "_180";
    /**
     * 270 degrees counter-clockwise
     */
    WlOutputTransform[WlOutputTransform["_270"] = 3] = "_270";
    /**
     * 180 degree flip around a vertical axis
     */
    WlOutputTransform[WlOutputTransform["_flipped"] = 4] = "_flipped";
    /**
     * flip and rotate 90 degrees counter-clockwise
     */
    WlOutputTransform[WlOutputTransform["_flipped90"] = 5] = "_flipped90";
    /**
     * flip and rotate 180 degrees counter-clockwise
     */
    WlOutputTransform[WlOutputTransform["_flipped180"] = 6] = "_flipped180";
    /**
     * flip and rotate 270 degrees counter-clockwise
     */
    WlOutputTransform[WlOutputTransform["_flipped270"] = 7] = "_flipped270";
})(WlOutputTransform || (WlOutputTransform = {}));
var WlOutputMode;
(function (WlOutputMode) {
    /**
     * indicates this is the current mode
     */
    WlOutputMode[WlOutputMode["_current"] = 1] = "_current";
    /**
     * indicates this is the preferred mode
     */
    WlOutputMode[WlOutputMode["_preferred"] = 2] = "_preferred";
})(WlOutputMode || (WlOutputMode = {}));
/**
 *
 *      A region object describes an area.
 *
 *      Region objects are used to describe the opaque and input
 *      regions of a surface.
 *
 */
class WlRegionProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Destroy the region.  This will invalidate the object ID.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	Add the specified rectangle to the region.
     *
     * @since 1
     *
     */
    add(x, y, width, height) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
    /**
     *
     *	Subtract the specified rectangle from the region.
     *
     * @since 1
     *
     */
    subtract(x, y, width, height) {
        this._marshall(this.id, 2, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
}
const WlRegionProtocolName = 'wl_region';
/**
 *
 *      The global interface exposing sub-surface compositing capabilities.
 *      A wl_surface, that has sub-surfaces associated, is called the
 *      parent surface. Sub-surfaces can be arbitrarily nested and create
 *      a tree of sub-surfaces.
 *
 *      The root surface in a tree of sub-surfaces is the main
 *      surface. The main surface cannot be a sub-surface, because
 *      sub-surfaces must always have a parent.
 *
 *      A main surface with its sub-surfaces forms a (compound) window.
 *      For window management purposes, this set of wl_surface objects is
 *      to be considered as a single window, and it should also behave as
 *      such.
 *
 *      The aim of sub-surfaces is to offload some of the compositing work
 *      within a window from clients to the compositor. A prime example is
 *      a video player with decorations and video in separate wl_surface
 *      objects. This should allow the compositor to pass YUV video buffer
 *      processing to dedicated overlay hardware when possible.
 *
 */
class WlSubcompositorProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Informs the server that the client will not be using this
     *	protocol object anymore. This does not affect any other
     *	objects, wl_subsurface objects included.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	Create a sub-surface interface for the given surface, and
     *	associate it with the given parent surface. This turns a
     *	plain wl_surface into a sub-surface.
     *
     *	The to-be sub-surface must not already have another role, and it
     *	must not have an existing wl_subsurface object. Otherwise a protocol
     *	error is raised.
     *
     * @since 1
     *
     */
    getSubsurface(surface, parent) {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["WlSubsurfaceProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(surface), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(parent)]);
    }
}
const WlSubcompositorProtocolName = 'wl_subcompositor';
var WlSubcompositorError;
(function (WlSubcompositorError) {
    /**
     * the to-be sub-surface is invalid
     */
    WlSubcompositorError[WlSubcompositorError["_badSurface"] = 0] = "_badSurface";
})(WlSubcompositorError || (WlSubcompositorError = {}));
/**
 *
 *      An additional interface to a wl_surface object, which has been
 *      made a sub-surface. A sub-surface has one parent surface. A
 *      sub-surface's size and position are not limited to that of the parent.
 *      Particularly, a sub-surface is not automatically clipped to its
 *      parent's area.
 *
 *      A sub-surface becomes mapped, when a non-NULL wl_buffer is applied
 *      and the parent surface is mapped. The order of which one happens
 *      first is irrelevant. A sub-surface is hidden if the parent becomes
 *      hidden, or if a NULL wl_buffer is applied. These rules apply
 *      recursively through the tree of surfaces.
 *
 *      The behaviour of a wl_surface.commit request on a sub-surface
 *      depends on the sub-surface's mode. The possible modes are
 *      synchronized and desynchronized, see methods
 *      wl_subsurface.set_sync and wl_subsurface.set_desync. Synchronized
 *      mode caches the wl_surface state to be applied when the parent's
 *      state gets applied, and desynchronized mode applies the pending
 *      wl_surface state directly. A sub-surface is initially in the
 *      synchronized mode.
 *
 *      Sub-surfaces have also other kind of state, which is managed by
 *      wl_subsurface requests, as opposed to wl_surface requests. This
 *      state includes the sub-surface position relative to the parent
 *      surface (wl_subsurface.set_position), and the stacking order of
 *      the parent and its sub-surfaces (wl_subsurface.place_above and
 *      .place_below). This state is applied when the parent surface's
 *      wl_surface state is applied, regardless of the sub-surface's mode.
 *      As the exception, set_sync and set_desync are effective immediately.
 *
 *      The main surface can be thought to be always in desynchronized mode,
 *      since it does not have a parent in the sub-surfaces sense.
 *
 *      Even if a sub-surface is in desynchronized mode, it will behave as
 *      in synchronized mode, if its parent surface behaves as in
 *      synchronized mode. This rule is applied recursively throughout the
 *      tree of surfaces. This means, that one can set a sub-surface into
 *      synchronized mode, and then assume that all its child and grand-child
 *      sub-surfaces are synchronized, too, without explicitly setting them.
 *
 *      If the wl_surface associated with the wl_subsurface is destroyed, the
 *      wl_subsurface object becomes inert. Note, that destroying either object
 *      takes effect immediately. If you need to synchronize the removal
 *      of a sub-surface to the parent surface update, unmap the sub-surface
 *      first by attaching a NULL wl_buffer, update parent, and then destroy
 *      the sub-surface.
 *
 *      If the parent wl_surface object is destroyed, the sub-surface is
 *      unmapped.
 *
 */
class WlSubsurfaceProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	The sub-surface interface is removed from the wl_surface object
     *	that was turned into a sub-surface with a
     *	wl_subcompositor.get_subsurface request. The wl_surface's association
     *	to the parent is deleted, and the wl_surface loses its role as
     *	a sub-surface. The wl_surface is unmapped.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	This schedules a sub-surface position change.
     *	The sub-surface will be moved so that its origin (top left
     *	corner pixel) will be at the location x, y of the parent surface
     *	coordinate system. The coordinates are not restricted to the parent
     *	surface area. Negative values are allowed.
     *
     *	The scheduled coordinates will take effect whenever the state of the
     *	parent surface is applied. When this happens depends on whether the
     *	parent surface is in synchronized mode or not. See
     *	wl_subsurface.set_sync and wl_subsurface.set_desync for details.
     *
     *	If more than one set_position request is invoked by the client before
     *	the commit of the parent surface, the position of a new request always
     *	replaces the scheduled position from any previous request.
     *
     *	The initial position is 0, 0.
     *
     * @since 1
     *
     */
    setPosition(x, y) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y)]);
    }
    /**
     *
     *	This sub-surface is taken from the stack, and put back just
     *	above the reference surface, changing the z-order of the sub-surfaces.
     *	The reference surface must be one of the sibling surfaces, or the
     *	parent surface. Using any other surface, including this sub-surface,
     *	will cause a protocol error.
     *
     *	The z-order is double-buffered. Requests are handled in order and
     *	applied immediately to a pending state. The final pending state is
     *	copied to the active state the next time the state of the parent
     *	surface is applied. When this happens depends on whether the parent
     *	surface is in synchronized mode or not. See wl_subsurface.set_sync and
     *	wl_subsurface.set_desync for details.
     *
     *	A new sub-surface is initially added as the top-most in the stack
     *	of its siblings and parent.
     *
     * @since 1
     *
     */
    placeAbove(sibling) {
        this._marshall(this.id, 2, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(sibling)]);
    }
    /**
     *
     *	The sub-surface is placed just below the reference surface.
     *	See wl_subsurface.place_above.
     *
     * @since 1
     *
     */
    placeBelow(sibling) {
        this._marshall(this.id, 3, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(sibling)]);
    }
    /**
     *
     *	Change the commit behaviour of the sub-surface to synchronized
     *	mode, also described as the parent dependent mode.
     *
     *	In synchronized mode, wl_surface.commit on a sub-surface will
     *	accumulate the committed state in a cache, but the state will
     *	not be applied and hence will not change the compositor output.
     *	The cached state is applied to the sub-surface immediately after
     *	the parent surface's state is applied. This ensures atomic
     *	updates of the parent and all its synchronized sub-surfaces.
     *	Applying the cached state will invalidate the cache, so further
     *	parent surface commits do not (re-)apply old state.
     *
     *	See wl_subsurface for the recursive effect of this mode.
     *
     * @since 1
     *
     */
    setSync() {
        this._marshall(this.id, 4, []);
    }
    /**
     *
     *	Change the commit behaviour of the sub-surface to desynchronized
     *	mode, also described as independent or freely running mode.
     *
     *	In desynchronized mode, wl_surface.commit on a sub-surface will
     *	apply the pending state directly, without caching, as happens
     *	normally with a wl_surface. Calling wl_surface.commit on the
     *	parent surface has no effect on the sub-surface's wl_surface
     *	state. This mode allows a sub-surface to be updated on its own.
     *
     *	If cached state exists when wl_surface.commit is called in
     *	desynchronized mode, the pending state is added to the cached
     *	state, and applied as a whole. This invalidates the cache.
     *
     *	Note: even if a sub-surface is set to desynchronized, a parent
     *	sub-surface may override it to behave as synchronized. For details,
     *	see wl_subsurface.
     *
     *	If a surface's parent surface behaves as desynchronized, then
     *	the cached state is applied on set_desync.
     *
     * @since 1
     *
     */
    setDesync() {
        this._marshall(this.id, 5, []);
    }
}
const WlSubsurfaceProtocolName = 'wl_subsurface';
var WlSubsurfaceError;
(function (WlSubsurfaceError) {
    /**
     * wl_surface is not a sibling or the parent
     */
    WlSubsurfaceError[WlSubsurfaceError["_badSurface"] = 0] = "_badSurface";
})(WlSubsurfaceError || (WlSubsurfaceError = {}));
//# sourceMappingURL=wayland.js.map

/***/ }),

/***/ "./node_modules/westfield-runtime-client/dist/protocol/xdg_shell.js":
/*!**************************************************************************!*\
  !*** ./node_modules/westfield-runtime-client/dist/protocol/xdg_shell.js ***!
  \**************************************************************************/
/*! exports provided: XdgWmBaseProxy, XdgWmBaseProtocolName, XdgWmBaseError, XdgPositionerProxy, XdgPositionerProtocolName, XdgPositionerError, XdgPositionerAnchor, XdgPositionerGravity, XdgPositionerConstraintAdjustment, XdgSurfaceProxy, XdgSurfaceProtocolName, XdgSurfaceError, XdgToplevelProxy, XdgToplevelProtocolName, XdgToplevelResizeEdge, XdgToplevelState, XdgPopupProxy, XdgPopupProtocolName, XdgPopupError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseProxy", function() { return XdgWmBaseProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseProtocolName", function() { return XdgWmBaseProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgWmBaseError", function() { return XdgWmBaseError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerProxy", function() { return XdgPositionerProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerProtocolName", function() { return XdgPositionerProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerError", function() { return XdgPositionerError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerAnchor", function() { return XdgPositionerAnchor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerGravity", function() { return XdgPositionerGravity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPositionerConstraintAdjustment", function() { return XdgPositionerConstraintAdjustment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceProxy", function() { return XdgSurfaceProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceProtocolName", function() { return XdgSurfaceProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgSurfaceError", function() { return XdgSurfaceError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelProxy", function() { return XdgToplevelProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelProtocolName", function() { return XdgToplevelProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelResizeEdge", function() { return XdgToplevelResizeEdge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgToplevelState", function() { return XdgToplevelState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPopupProxy", function() { return XdgPopupProxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPopupProtocolName", function() { return XdgPopupProtocolName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XdgPopupError", function() { return XdgPopupError; });
/* harmony import */ var westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! westfield-runtime-common */ "./node_modules/westfield-runtime-common/dist/index.js");
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! . */ "./node_modules/westfield-runtime-client/dist/protocol/index.js");
/* harmony import */ var _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../westfield-runtime-client */ "./node_modules/westfield-runtime-client/dist/westfield-runtime-client.js");
/*
 *
 *    Copyright © 2008-2013 Kristian Høgsberg
 *    Copyright © 2013      Rafael Antognolli
 *    Copyright © 2013      Jasper St. Pierre
 *    Copyright © 2010-2013 Intel Corporation
 *    Copyright © 2015-2017 Samsung Electronics Co., Ltd
 *    Copyright © 2015-2017 Red Hat Inc.
 *
 *    Permission is hereby granted, free of charge, to any person obtaining a
 *    copy of this software and associated documentation files (the "Software"),
 *    to deal in the Software without restriction, including without limitation
 *    the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *    and/or sell copies of the Software, and to permit persons to whom the
 *    Software is furnished to do so, subject to the following conditions:
 *
 *    The above copyright notice and this permission notice (including the next
 *    paragraph) shall be included in all copies or substantial portions of the
 *    Software.
 *
 *    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 *    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *    DEALINGS IN THE SOFTWARE.
 *
 */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



/**
 *
 *      The xdg_wm_base interface is exposed as a global object enabling clients
 *      to turn their wl_surfaces into windows in a desktop environment. It
 *      defines the basic functionality needed for clients and the compositor to
 *      create windows that can be dragged, resized, maximized, etc, as well as
 *      creating transient windows such as popup menus.
 *
 */
class XdgWmBaseProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Destroy this xdg_wm_base object.
     *
     *	Destroying a bound xdg_wm_base object while there are surfaces
     *	still alive created by this xdg_wm_base object instance is illegal
     *	and will result in a protocol error.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	Create a positioner object. A positioner object is used to position
     *	surfaces relative to some parent surface. See the interface description
     *	and xdg_surface.get_popup for details.
     *
     * @since 1
     *
     */
    createPositioner() {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["XdgPositionerProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	This creates an xdg_surface for the given surface. While xdg_surface
     *	itself is not a role, the corresponding surface may only be assigned
     *	a role extending xdg_surface, such as xdg_toplevel or xdg_popup.
     *
     *	This creates an xdg_surface for the given surface. An xdg_surface is
     *	used as basis to define a role to a given surface, such as xdg_toplevel
     *	or xdg_popup. It also manages functionality shared between xdg_surface
     *	based surface roles.
     *
     *	See the documentation of xdg_surface for more details about what an
     *	xdg_surface is and how it is used.
     *
     * @since 1
     *
     */
    getXdgSurface(surface) {
        return this._marshallConstructor(this.id, 2, ___WEBPACK_IMPORTED_MODULE_1__["XdgSurfaceProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(surface)]);
    }
    /**
     *
     *	A client must respond to a ping event with a pong request or
     *	the client may be deemed unresponsive. See xdg_wm_base.ping.
     *
     * @since 1
     *
     */
    pong(serial) {
        this._marshall(this.id, 3, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.ping(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
const XdgWmBaseProtocolName = 'xdg_wm_base';
var XdgWmBaseError;
(function (XdgWmBaseError) {
    /**
     * given wl_surface has another role
     */
    XdgWmBaseError[XdgWmBaseError["_role"] = 0] = "_role";
    /**
     * xdg_wm_base was destroyed before children
     */
    XdgWmBaseError[XdgWmBaseError["_defunctSurfaces"] = 1] = "_defunctSurfaces";
    /**
     * the client tried to map or destroy a non-topmost popup
     */
    XdgWmBaseError[XdgWmBaseError["_notTheTopmostPopup"] = 2] = "_notTheTopmostPopup";
    /**
     * the client specified an invalid popup parent surface
     */
    XdgWmBaseError[XdgWmBaseError["_invalidPopupParent"] = 3] = "_invalidPopupParent";
    /**
     * the client provided an invalid surface state
     */
    XdgWmBaseError[XdgWmBaseError["_invalidSurfaceState"] = 4] = "_invalidSurfaceState";
    /**
     * the client provided an invalid positioner
     */
    XdgWmBaseError[XdgWmBaseError["_invalidPositioner"] = 5] = "_invalidPositioner";
})(XdgWmBaseError || (XdgWmBaseError = {}));
/**
 *
 *      The xdg_positioner provides a collection of rules for the placement of a
 *      child surface relative to a parent surface. Rules can be defined to ensure
 *      the child surface remains within the visible area's borders, and to
 *      specify how the child surface changes its position, such as sliding along
 *      an axis, or flipping around a rectangle. These positioner-created rules are
 *      constrained by the requirement that a child surface must intersect with or
 *      be at least partially adjacent to its parent surface.
 *
 *      See the various requests for details about possible rules.
 *
 *      At the time of the request, the compositor makes a copy of the rules
 *      specified by the xdg_positioner. Thus, after the request is complete the
 *      xdg_positioner object can be destroyed or reused; further changes to the
 *      object will have no effect on previous usages.
 *
 *      For an xdg_positioner object to be considered complete, it must have a
 *      non-zero size set by set_size, and a non-zero anchor rectangle set by
 *      set_anchor_rect. Passing an incomplete xdg_positioner object when
 *      positioning a surface raises an error.
 *
 */
class XdgPositionerProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Notify the compositor that the xdg_positioner will no longer be used.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	Set the size of the surface that is to be positioned with the positioner
     *	object. The size is in surface-local coordinates and corresponds to the
     *	window geometry. See xdg_surface.set_window_geometry.
     *
     *	If a zero or negative size is set the invalid_input error is raised.
     *
     * @since 1
     *
     */
    setSize(width, height) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
    /**
     *
     *	Specify the anchor rectangle within the parent surface that the child
     *	surface will be placed relative to. The rectangle is relative to the
     *	window geometry as defined by xdg_surface.set_window_geometry of the
     *	parent surface.
     *
     *	When the xdg_positioner object is used to position a child surface, the
     *	anchor rectangle may not extend outside the window geometry of the
     *	positioned child's parent surface.
     *
     *	If a negative size is set the invalid_input error is raised.
     *
     * @since 1
     *
     */
    setAnchorRect(x, y, width, height) {
        this._marshall(this.id, 2, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
    /**
     *
     *	Defines the anchor point for the anchor rectangle. The specified anchor
     *	is used derive an anchor point that the child surface will be
     *	positioned relative to. If a corner anchor is set (e.g. 'top_left' or
     *	'bottom_right'), the anchor point will be at the specified corner;
     *	otherwise, the derived anchor point will be centered on the specified
     *	edge, or in the center of the anchor rectangle if no edge is specified.
     *
     * @since 1
     *
     */
    setAnchor(anchor) {
        this._marshall(this.id, 3, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(anchor)]);
    }
    /**
     *
     *	Defines in what direction a surface should be positioned, relative to
     *	the anchor point of the parent surface. If a corner gravity is
     *	specified (e.g. 'bottom_right' or 'top_left'), then the child surface
     *	will be placed towards the specified gravity; otherwise, the child
     *	surface will be centered over the anchor point on any axis that had no
     *	gravity specified.
     *
     * @since 1
     *
     */
    setGravity(gravity) {
        this._marshall(this.id, 4, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(gravity)]);
    }
    /**
     *
     *	Specify how the window should be positioned if the originally intended
     *	position caused the surface to be constrained, meaning at least
     *	partially outside positioning boundaries set by the compositor. The
     *	adjustment is set by constructing a bitmask describing the adjustment to
     *	be made when the surface is constrained on that axis.
     *
     *	If no bit for one axis is set, the compositor will assume that the child
     *	surface should not change its position on that axis when constrained.
     *
     *	If more than one bit for one axis is set, the order of how adjustments
     *	are applied is specified in the corresponding adjustment descriptions.
     *
     *	The default adjustment is none.
     *
     * @since 1
     *
     */
    setConstraintAdjustment(constraintAdjustment) {
        this._marshall(this.id, 5, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(constraintAdjustment)]);
    }
    /**
     *
     *	Specify the surface position offset relative to the position of the
     *	anchor on the anchor rectangle and the anchor on the surface. For
     *	example if the anchor of the anchor rectangle is at (x, y), the surface
     *	has the gravity bottom|right, and the offset is (ox, oy), the calculated
     *	surface position will be (x + ox, y + oy). The offset position of the
     *	surface is the one used for constraint testing. See
     *	set_constraint_adjustment.
     *
     *	An example use case is placing a popup menu on top of a user interface
     *	element, while aligning the user interface element of the parent surface
     *	with some user interface element placed somewhere in the popup surface.
     *
     * @since 1
     *
     */
    setOffset(x, y) {
        this._marshall(this.id, 6, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y)]);
    }
}
const XdgPositionerProtocolName = 'xdg_positioner';
var XdgPositionerError;
(function (XdgPositionerError) {
    /**
     * invalid input provided
     */
    XdgPositionerError[XdgPositionerError["_invalidInput"] = 0] = "_invalidInput";
})(XdgPositionerError || (XdgPositionerError = {}));
var XdgPositionerAnchor;
(function (XdgPositionerAnchor) {
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_none"] = 0] = "_none";
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_top"] = 1] = "_top";
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_bottom"] = 2] = "_bottom";
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_left"] = 3] = "_left";
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_right"] = 4] = "_right";
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_topLeft"] = 5] = "_topLeft";
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_bottomLeft"] = 6] = "_bottomLeft";
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_topRight"] = 7] = "_topRight";
    /**
     *
     */
    XdgPositionerAnchor[XdgPositionerAnchor["_bottomRight"] = 8] = "_bottomRight";
})(XdgPositionerAnchor || (XdgPositionerAnchor = {}));
var XdgPositionerGravity;
(function (XdgPositionerGravity) {
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_none"] = 0] = "_none";
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_top"] = 1] = "_top";
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_bottom"] = 2] = "_bottom";
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_left"] = 3] = "_left";
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_right"] = 4] = "_right";
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_topLeft"] = 5] = "_topLeft";
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_bottomLeft"] = 6] = "_bottomLeft";
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_topRight"] = 7] = "_topRight";
    /**
     *
     */
    XdgPositionerGravity[XdgPositionerGravity["_bottomRight"] = 8] = "_bottomRight";
})(XdgPositionerGravity || (XdgPositionerGravity = {}));
var XdgPositionerConstraintAdjustment;
(function (XdgPositionerConstraintAdjustment) {
    /**
     *
     */
    XdgPositionerConstraintAdjustment[XdgPositionerConstraintAdjustment["_none"] = 0] = "_none";
    /**
     *
     */
    XdgPositionerConstraintAdjustment[XdgPositionerConstraintAdjustment["_slideX"] = 1] = "_slideX";
    /**
     *
     */
    XdgPositionerConstraintAdjustment[XdgPositionerConstraintAdjustment["_slideY"] = 2] = "_slideY";
    /**
     *
     */
    XdgPositionerConstraintAdjustment[XdgPositionerConstraintAdjustment["_flipX"] = 4] = "_flipX";
    /**
     *
     */
    XdgPositionerConstraintAdjustment[XdgPositionerConstraintAdjustment["_flipY"] = 8] = "_flipY";
    /**
     *
     */
    XdgPositionerConstraintAdjustment[XdgPositionerConstraintAdjustment["_resizeX"] = 16] = "_resizeX";
    /**
     *
     */
    XdgPositionerConstraintAdjustment[XdgPositionerConstraintAdjustment["_resizeY"] = 32] = "_resizeY";
})(XdgPositionerConstraintAdjustment || (XdgPositionerConstraintAdjustment = {}));
/**
 *
 *      An interface that may be implemented by a wl_surface, for
 *      implementations that provide a desktop-style user interface.
 *
 *      It provides a base set of functionality required to construct user
 *      interface elements requiring management by the compositor, such as
 *      toplevel windows, menus, etc. The types of functionality are split into
 *      xdg_surface roles.
 *
 *      Creating an xdg_surface does not set the role for a wl_surface. In order
 *      to map an xdg_surface, the client must create a role-specific object
 *      using, e.g., get_toplevel, get_popup. The wl_surface for any given
 *      xdg_surface can have at most one role, and may not be assigned any role
 *      not based on xdg_surface.
 *
 *      A role must be assigned before any other requests are made to the
 *      xdg_surface object.
 *
 *      The client must call wl_surface.commit on the corresponding wl_surface
 *      for the xdg_surface state to take effect.
 *
 *      Creating an xdg_surface from a wl_surface which has a buffer attached or
 *      committed is a client error, and any attempts by a client to attach or
 *      manipulate a buffer prior to the first xdg_surface.configure call must
 *      also be treated as errors.
 *
 *      Mapping an xdg_surface-based role surface is defined as making it
 *      possible for the surface to be shown by the compositor. Note that
 *      a mapped surface is not guaranteed to be visible once it is mapped.
 *
 *      For an xdg_surface to be mapped by the compositor, the following
 *      conditions must be met:
 *      (1) the client has assigned an xdg_surface-based role to the surface
 *      (2) the client has set and committed the xdg_surface state and the
 *	  role-dependent state to the surface
 *      (3) the client has committed a buffer to the surface
 *
 *      A newly-unmapped surface is considered to have met condition (1) out
 *      of the 3 required conditions for mapping a surface if its role surface
 *      has not been destroyed.
 *
 */
class XdgSurfaceProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	Destroy the xdg_surface object. An xdg_surface must only be destroyed
     *	after its role object has been destroyed.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	This creates an xdg_toplevel object for the given xdg_surface and gives
     *	the associated wl_surface the xdg_toplevel role.
     *
     *	See the documentation of xdg_toplevel for more details about what an
     *	xdg_toplevel is and how it is used.
     *
     * @since 1
     *
     */
    getToplevel() {
        return this._marshallConstructor(this.id, 1, ___WEBPACK_IMPORTED_MODULE_1__["XdgToplevelProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    /**
     *
     *	This creates an xdg_popup object for the given xdg_surface and gives
     *	the associated wl_surface the xdg_popup role.
     *
     *	If null is passed as a parent, a parent surface must be specified using
     *	some other protocol, before committing the initial state.
     *
     *	See the documentation of xdg_popup for more details about what an
     *	xdg_popup is and how it is used.
     *
     * @since 1
     *
     */
    getPopup(parent, positioner) {
        return this._marshallConstructor(this.id, 2, ___WEBPACK_IMPORTED_MODULE_1__["XdgPopupProxy"], [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])(), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(parent), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(positioner)]);
    }
    /**
     *
     *	The window geometry of a surface is its "visible bounds" from the
     *	user's perspective. Client-side decorations often have invisible
     *	portions like drop-shadows which should be ignored for the
     *	purposes of aligning, placing and constraining windows.
     *
     *	The window geometry is double buffered, and will be applied at the
     *	time wl_surface.commit of the corresponding wl_surface is called.
     *
     *	When maintaining a position, the compositor should treat the (x, y)
     *	coordinate of the window geometry as the top left corner of the window.
     *	A client changing the (x, y) window geometry coordinate should in
     *	general not alter the position of the window.
     *
     *	Once the window geometry of the surface is set, it is not possible to
     *	unset it, and it will remain the same until set_window_geometry is
     *	called again, even if a new subsurface or buffer is attached.
     *
     *	If never set, the value is the full bounds of the surface,
     *	including any subsurfaces. This updates dynamically on every
     *	commit. This unset is meant for extremely simple clients.
     *
     *	The arguments are given in the surface-local coordinate space of
     *	the wl_surface associated with this xdg_surface.
     *
     *	The width and height must be greater than zero. Setting an invalid size
     *	will raise an error. When applied, the effective window geometry will be
     *	the set window geometry clamped to the bounding rectangle of the
     *	combined geometry of the surface of the xdg_surface and the associated
     *	subsurfaces.
     *
     * @since 1
     *
     */
    setWindowGeometry(x, y, width, height) {
        this._marshall(this.id, 3, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
    /**
     *
     *	When a configure event is received, if a client commits the
     *	surface in response to the configure event, then the client
     *	must make an ack_configure request sometime before the commit
     *	request, passing along the serial of the configure event.
     *
     *	For instance, for toplevel surfaces the compositor might use this
     *	information to move a surface to the top left only when the client has
     *	drawn itself for the maximized or fullscreen state.
     *
     *	If the client receives multiple configure events before it
     *	can respond to one, it only has to ack the last configure event.
     *
     *	A client is not required to commit immediately after sending
     *	an ack_configure request - it may even ack_configure several times
     *	before its next surface commit.
     *
     *	A client may send multiple ack_configure requests before committing, but
     *	only the last request sent before a commit indicates which configure
     *	event the client really is responding to.
     *
     * @since 1
     *
     */
    ackConfigure(serial) {
        this._marshall(this.id, 4, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.configure(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
const XdgSurfaceProtocolName = 'xdg_surface';
var XdgSurfaceError;
(function (XdgSurfaceError) {
    /**
     *
     */
    XdgSurfaceError[XdgSurfaceError["_notConstructed"] = 1] = "_notConstructed";
    /**
     *
     */
    XdgSurfaceError[XdgSurfaceError["_alreadyConstructed"] = 2] = "_alreadyConstructed";
    /**
     *
     */
    XdgSurfaceError[XdgSurfaceError["_unconfiguredBuffer"] = 3] = "_unconfiguredBuffer";
})(XdgSurfaceError || (XdgSurfaceError = {}));
/**
 *
 *      This interface defines an xdg_surface role which allows a surface to,
 *      among other things, set window-like properties such as maximize,
 *      fullscreen, and minimize, set application-specific metadata like title and
 *      id, and well as trigger user interactive operations such as interactive
 *      resize and move.
 *
 *      Unmapping an xdg_toplevel means that the surface cannot be shown
 *      by the compositor until it is explicitly mapped again.
 *      All active operations (e.g., move, resize) are canceled and all
 *      attributes (e.g. title, state, stacking, ...) are discarded for
 *      an xdg_toplevel surface when it is unmapped.
 *
 *      Attaching a null buffer to a toplevel unmaps the surface.
 *
 */
class XdgToplevelProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	This request destroys the role surface and unmaps the surface;
     *	see "Unmapping" behavior in interface section for details.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	Set the "parent" of this surface. This surface should be stacked
     *	above the parent surface and all other ancestor surfaces.
     *
     *	Parent windows should be set on dialogs, toolboxes, or other
     *	"auxiliary" surfaces, so that the parent is raised when the dialog
     *	is raised.
     *
     *	Setting a null parent for a child window removes any parent-child
     *	relationship for the child. Setting a null parent for a window which
     *	currently has no parent is a no-op.
     *
     *	If the parent is unmapped then its children are managed as
     *	though the parent of the now-unmapped parent has become the
     *	parent of this surface. If no parent exists for the now-unmapped
     *	parent then the children are managed as though they have no
     *	parent surface.
     *
     * @since 1
     *
     */
    setParent(parent) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(parent)]);
    }
    /**
     *
     *	Set a short title for the surface.
     *
     *	This string may be used to identify the surface in a task bar,
     *	window list, or other user interface elements provided by the
     *	compositor.
     *
     *	The string must be encoded in UTF-8.
     *
     * @since 1
     *
     */
    setTitle(title) {
        this._marshall(this.id, 2, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["string"])(title)]);
    }
    /**
     *
     *	Set an application identifier for the surface.
     *
     *	The app ID identifies the general class of applications to which
     *	the surface belongs. The compositor can use this to group multiple
     *	surfaces together, or to determine how to launch a new application.
     *
     *	For D-Bus activatable applications, the app ID is used as the D-Bus
     *	service name.
     *
     *	The compositor shell will try to group application surfaces together
     *	by their app ID. As a best practice, it is suggested to select app
     *	ID's that match the basename of the application's .desktop file.
     *	For example, "org.freedesktop.FooViewer" where the .desktop file is
     *	"org.freedesktop.FooViewer.desktop".
     *
     *	See the desktop-entry specification [0] for more details on
     *	application identifiers and how they relate to well-known D-Bus
     *	names and .desktop files.
     *
     *	[0] http://standards.freedesktop.org/desktop-entry-spec/
     *
     * @since 1
     *
     */
    setAppId(appId) {
        this._marshall(this.id, 3, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["string"])(appId)]);
    }
    /**
     *
     *	Clients implementing client-side decorations might want to show
     *	a context menu when right-clicking on the decorations, giving the
     *	user a menu that they can use to maximize or minimize the window.
     *
     *	This request asks the compositor to pop up such a window menu at
     *	the given position, relative to the local surface coordinates of
     *	the parent surface. There are no guarantees as to what menu items
     *	the window menu contains.
     *
     *	This request must be used in response to some sort of user action
     *	like a button press, key press, or touch down event.
     *
     * @since 1
     *
     */
    showWindowMenu(seat, serial, x, y) {
        this._marshall(this.id, 4, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(seat), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(x), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(y)]);
    }
    /**
     *
     *	Start an interactive, user-driven move of the surface.
     *
     *	This request must be used in response to some sort of user action
     *	like a button press, key press, or touch down event. The passed
     *	serial is used to determine the type of interactive move (touch,
     *	pointer, etc).
     *
     *	The server may ignore move requests depending on the state of
     *	the surface (e.g. fullscreen or maximized), or if the passed serial
     *	is no longer valid.
     *
     *	If triggered, the surface will lose the focus of the device
     *	(wl_pointer, wl_touch, etc) used for the move. It is up to the
     *	compositor to visually indicate that the move is taking place, such as
     *	updating a pointer cursor, during the move. There is no guarantee
     *	that the device focus will return when the move is completed.
     *
     * @since 1
     *
     */
    move(seat, serial) {
        this._marshall(this.id, 5, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(seat), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    /**
     *
     *	Start a user-driven, interactive resize of the surface.
     *
     *	This request must be used in response to some sort of user action
     *	like a button press, key press, or touch down event. The passed
     *	serial is used to determine the type of interactive resize (touch,
     *	pointer, etc).
     *
     *	The server may ignore resize requests depending on the state of
     *	the surface (e.g. fullscreen or maximized).
     *
     *	If triggered, the client will receive configure events with the
     *	"resize" state enum value and the expected sizes. See the "resize"
     *	enum value for more details about what is required. The client
     *	must also acknowledge configure events using "ack_configure". After
     *	the resize is completed, the client will receive another "configure"
     *	event without the resize state.
     *
     *	If triggered, the surface also will lose the focus of the device
     *	(wl_pointer, wl_touch, etc) used for the resize. It is up to the
     *	compositor to visually indicate that the resize is taking place,
     *	such as updating a pointer cursor, during the resize. There is no
     *	guarantee that the device focus will return when the resize is
     *	completed.
     *
     *	The edges parameter specifies how the surface should be resized,
     *	and is one of the values of the resize_edge enum. The compositor
     *	may use this information to update the surface position for
     *	example when dragging the top left corner. The compositor may also
     *	use this information to adapt its behavior, e.g. choose an
     *	appropriate cursor image.
     *
     * @since 1
     *
     */
    resize(seat, serial, edges) {
        this._marshall(this.id, 6, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(seat), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(edges)]);
    }
    /**
     *
     *	Set a maximum size for the window.
     *
     *	The client can specify a maximum size so that the compositor does
     *	not try to configure the window beyond this size.
     *
     *	The width and height arguments are in window geometry coordinates.
     *	See xdg_surface.set_window_geometry.
     *
     *	Values set in this way are double-buffered. They will get applied
     *	on the next commit.
     *
     *	The compositor can use this information to allow or disallow
     *	different states like maximize or fullscreen and draw accurate
     *	animations.
     *
     *	Similarly, a tiling window manager may use this information to
     *	place and resize client windows in a more effective way.
     *
     *	The client should not rely on the compositor to obey the maximum
     *	size. The compositor may decide to ignore the values set by the
     *	client and request a larger size.
     *
     *	If never set, or a value of zero in the request, means that the
     *	client has no expected maximum size in the given dimension.
     *	As a result, a client wishing to reset the maximum size
     *	to an unspecified state can use zero for width and height in the
     *	request.
     *
     *	Requesting a maximum size to be smaller than the minimum size of
     *	a surface is illegal and will result in a protocol error.
     *
     *	The width and height must be greater than or equal to zero. Using
     *	strictly negative values for width and height will result in a
     *	protocol error.
     *
     * @since 1
     *
     */
    setMaxSize(width, height) {
        this._marshall(this.id, 7, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
    /**
     *
     *	Set a minimum size for the window.
     *
     *	The client can specify a minimum size so that the compositor does
     *	not try to configure the window below this size.
     *
     *	The width and height arguments are in window geometry coordinates.
     *	See xdg_surface.set_window_geometry.
     *
     *	Values set in this way are double-buffered. They will get applied
     *	on the next commit.
     *
     *	The compositor can use this information to allow or disallow
     *	different states like maximize or fullscreen and draw accurate
     *	animations.
     *
     *	Similarly, a tiling window manager may use this information to
     *	place and resize client windows in a more effective way.
     *
     *	The client should not rely on the compositor to obey the minimum
     *	size. The compositor may decide to ignore the values set by the
     *	client and request a smaller size.
     *
     *	If never set, or a value of zero in the request, means that the
     *	client has no expected minimum size in the given dimension.
     *	As a result, a client wishing to reset the minimum size
     *	to an unspecified state can use zero for width and height in the
     *	request.
     *
     *	Requesting a minimum size to be larger than the maximum size of
     *	a surface is illegal and will result in a protocol error.
     *
     *	The width and height must be greater than or equal to zero. Using
     *	strictly negative values for width and height will result in a
     *	protocol error.
     *
     * @since 1
     *
     */
    setMinSize(width, height) {
        this._marshall(this.id, 8, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(width), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["int"])(height)]);
    }
    /**
     *
     *	Maximize the surface.
     *
     *	After requesting that the surface should be maximized, the compositor
     *	will respond by emitting a configure event with the "maximized" state
     *	and the required window geometry. The client should then update its
     *	content, drawing it in a maximized state, i.e. without shadow or other
     *	decoration outside of the window geometry. The client must also
     *	acknowledge the configure when committing the new content (see
     *	ack_configure).
     *
     *	It is up to the compositor to decide how and where to maximize the
     *	surface, for example which output and what region of the screen should
     *	be used.
     *
     *	If the surface was already maximized, the compositor will still emit
     *	a configure event with the "maximized" state.
     *
     *	If the surface is in a fullscreen state, this request has no direct
     *	effect. It will alter the state the surface is returned to when
     *	unmaximized if not overridden by the compositor.
     *
     * @since 1
     *
     */
    setMaximized() {
        this._marshall(this.id, 9, []);
    }
    /**
     *
     *	Unmaximize the surface.
     *
     *	After requesting that the surface should be unmaximized, the compositor
     *	will respond by emitting a configure event without the "maximized"
     *	state. If available, the compositor will include the window geometry
     *	dimensions the window had prior to being maximized in the configure
     *	event. The client must then update its content, drawing it in a
     *	regular state, i.e. potentially with shadow, etc. The client must also
     *	acknowledge the configure when committing the new content (see
     *	ack_configure).
     *
     *	It is up to the compositor to position the surface after it was
     *	unmaximized; usually the position the surface had before maximizing, if
     *	applicable.
     *
     *	If the surface was already not maximized, the compositor will still
     *	emit a configure event without the "maximized" state.
     *
     *	If the surface is in a fullscreen state, this request has no direct
     *	effect. It will alter the state the surface is returned to when
     *	unmaximized if not overridden by the compositor.
     *
     * @since 1
     *
     */
    unsetMaximized() {
        this._marshall(this.id, 10, []);
    }
    /**
     *
     *	Make the surface fullscreen.
     *
     *	After requesting that the surface should be fullscreened, the
     *	compositor will respond by emitting a configure event with the
     *	"fullscreen" state and the fullscreen window geometry. The client must
     *	also acknowledge the configure when committing the new content (see
     *	ack_configure).
     *
     *	The output passed by the request indicates the client's preference as
     *	to which display it should be set fullscreen on. If this value is NULL,
     *	it's up to the compositor to choose which display will be used to map
     *	this surface.
     *
     *	If the surface doesn't cover the whole output, the compositor will
     *	position the surface in the center of the output and compensate with
     *	with border fill covering the rest of the output. The content of the
     *	border fill is undefined, but should be assumed to be in some way that
     *	attempts to blend into the surrounding area (e.g. solid black).
     *
     *	If the fullscreened surface is not opaque, the compositor must make
     *	sure that other screen content not part of the same surface tree (made
     *	up of subsurfaces, popups or similarly coupled surfaces) are not
     *	visible below the fullscreened surface.
     *
     * @since 1
     *
     */
    setFullscreen(output) {
        this._marshall(this.id, 11, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["objectOptional"])(output)]);
    }
    /**
     *
     *	Make the surface no longer fullscreen.
     *
     *	After requesting that the surface should be unfullscreened, the
     *	compositor will respond by emitting a configure event without the
     *	"fullscreen" state.
     *
     *	Making a surface unfullscreen sets states for the surface based on the following:
     *	* the state(s) it may have had before becoming fullscreen
     *	* any state(s) decided by the compositor
     *	* any state(s) requested by the client while the surface was fullscreen
     *
     *	The compositor may include the previous window geometry dimensions in
     *	the configure event, if applicable.
     *
     *	The client must also acknowledge the configure when committing the new
     *	content (see ack_configure).
     *
     * @since 1
     *
     */
    unsetFullscreen() {
        this._marshall(this.id, 12, []);
    }
    /**
     *
     *	Request that the compositor minimize your surface. There is no
     *	way to know if the surface is currently minimized, nor is there
     *	any way to unset minimization on this surface.
     *
     *	If you are looking to throttle redrawing when minimized, please
     *	instead use the wl_surface.frame event for this, as this will
     *	also work with live previews on windows in Alt-Tab, Expose or
     *	similar compositor features.
     *
     * @since 1
     *
     */
    setMinimized() {
        this._marshall(this.id, 13, []);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.configure(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["a"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.close());
        });
    }
}
const XdgToplevelProtocolName = 'xdg_toplevel';
var XdgToplevelResizeEdge;
(function (XdgToplevelResizeEdge) {
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_none"] = 0] = "_none";
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_top"] = 1] = "_top";
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_bottom"] = 2] = "_bottom";
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_left"] = 4] = "_left";
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_topLeft"] = 5] = "_topLeft";
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_bottomLeft"] = 6] = "_bottomLeft";
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_right"] = 8] = "_right";
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_topRight"] = 9] = "_topRight";
    /**
     *
     */
    XdgToplevelResizeEdge[XdgToplevelResizeEdge["_bottomRight"] = 10] = "_bottomRight";
})(XdgToplevelResizeEdge || (XdgToplevelResizeEdge = {}));
var XdgToplevelState;
(function (XdgToplevelState) {
    /**
     * the surface is maximized
     */
    XdgToplevelState[XdgToplevelState["_maximized"] = 1] = "_maximized";
    /**
     * the surface is fullscreen
     */
    XdgToplevelState[XdgToplevelState["_fullscreen"] = 2] = "_fullscreen";
    /**
     * the surface is being resized
     */
    XdgToplevelState[XdgToplevelState["_resizing"] = 3] = "_resizing";
    /**
     * the surface is now activated
     */
    XdgToplevelState[XdgToplevelState["_activated"] = 4] = "_activated";
})(XdgToplevelState || (XdgToplevelState = {}));
/**
 *
 *      A popup surface is a short-lived, temporary surface. It can be used to
 *      implement for example menus, popovers, tooltips and other similar user
 *      interface concepts.
 *
 *      A popup can be made to take an explicit grab. See xdg_popup.grab for
 *      details.
 *
 *      When the popup is dismissed, a popup_done event will be sent out, and at
 *      the same time the surface will be unmapped. See the xdg_popup.popup_done
 *      event for details.
 *
 *      Explicitly destroying the xdg_popup object will also dismiss the popup and
 *      unmap the surface. Clients that want to dismiss the popup when another
 *      surface of their own is clicked should dismiss the popup using the destroy
 *      request.
 *
 *      The parent surface must have either the xdg_toplevel or xdg_popup surface
 *      role.
 *
 *      A newly created xdg_popup will be stacked on top of all previously created
 *      xdg_popup surfaces associated with the same xdg_toplevel.
 *
 *      The parent of an xdg_popup must be mapped (see the xdg_surface
 *      description) before the xdg_popup itself.
 *
 *      The x and y arguments passed when creating the popup object specify
 *      where the top left of the popup should be placed, relative to the
 *      local surface coordinates of the parent surface. See
 *      xdg_surface.get_popup. An xdg_popup must intersect with or be at least
 *      partially adjacent to its parent surface.
 *
 *      The client must call wl_surface.commit on the corresponding wl_surface
 *      for the xdg_popup state to take effect.
 *
 */
class XdgPopupProxy extends _westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["Proxy"] {
    /**
     * Do not construct proxies directly. Instead use one of the factory methods from other proxies.
     */
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    /**
     *
     *	This destroys the popup. Explicitly destroying the xdg_popup
     *	object will also dismiss the popup, and unmap the surface.
     *
     *	If this xdg_popup is not the "topmost" popup, a protocol error
     *	will be sent.
     *
     * @since 1
     *
     */
    destroy() {
        super.destroy();
        this._marshall(this.id, 0, []);
    }
    /**
     *
     *	This request makes the created popup take an explicit grab. An explicit
     *	grab will be dismissed when the user dismisses the popup, or when the
     *	client destroys the xdg_popup. This can be done by the user clicking
     *	outside the surface, using the keyboard, or even locking the screen
     *	through closing the lid or a timeout.
     *
     *	If the compositor denies the grab, the popup will be immediately
     *	dismissed.
     *
     *	This request must be used in response to some sort of user action like a
     *	button press, key press, or touch down event. The serial number of the
     *	event should be passed as 'serial'.
     *
     *	The parent of a grabbing popup must either be an xdg_toplevel surface or
     *	another xdg_popup with an explicit grab. If the parent is another
     *	xdg_popup it means that the popups are nested, with this popup now being
     *	the topmost popup.
     *
     *	Nested popups must be destroyed in the reverse order they were created
     *	in, e.g. the only popup you are allowed to destroy at all times is the
     *	topmost one.
     *
     *	When compositors choose to dismiss a popup, they may dismiss every
     *	nested grabbing popup as well. When a compositor dismisses popups, it
     *	will follow the same dismissing order as required from the client.
     *
     *	The parent of a grabbing popup must either be another xdg_popup with an
     *	active explicit grab, or an xdg_popup or xdg_toplevel, if there are no
     *	explicit grabs already taken.
     *
     *	If the topmost grabbing popup is destroyed, the grab will be returned to
     *	the parent of the popup, if that parent previously had an explicit grab.
     *
     *	If the parent is a grabbing popup which has already been dismissed, this
     *	popup will be immediately dismissed. If the parent is a popup that did
     *	not take an explicit grab, an error will be raised.
     *
     *	During a popup grab, the client owning the grab will receive pointer
     *	and touch events for all their surfaces as normal (similar to an
     *	"owner-events" grab in X11 parlance), while the top most grabbing popup
     *	will always have keyboard focus.
     *
     * @since 1
     *
     */
    grab(seat, serial) {
        this._marshall(this.id, 1, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["object"])(seat), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(serial)]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.configure(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["i"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.popupDone());
        });
    }
}
const XdgPopupProtocolName = 'xdg_popup';
var XdgPopupError;
(function (XdgPopupError) {
    /**
     * tried to grab after being mapped
     */
    XdgPopupError[XdgPopupError["_invalidGrab"] = 0] = "_invalidGrab";
})(XdgPopupError || (XdgPopupError = {}));
//# sourceMappingURL=xdg_shell.js.map

/***/ }),

/***/ "./node_modules/westfield-runtime-client/dist/westfield-runtime-client.js":
/*!********************************************************************************!*\
  !*** ./node_modules/westfield-runtime-client/dist/westfield-runtime-client.js ***!
  \********************************************************************************/
/*! exports provided: Proxy, DisplayImpl, WebFS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Proxy", function() { return Proxy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisplayImpl", function() { return DisplayImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebFS", function() { return WebFS; });
/* harmony import */ var westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! westfield-runtime-common */ "./node_modules/westfield-runtime-common/dist/index.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class Proxy extends westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["WlObject"] {
    constructor(display, connection, id) {
        super(id);
        this.display = display;
        this._connection = connection;
        connection.registerWlObject(this);
    }
    destroy() {
        super.destroy();
        this._connection.unregisterWlObject(this);
    }
    _marshallConstructor(id, opcode, proxyClass, argsArray) {
        // construct new object
        const proxy = new proxyClass(this.display, this._connection, this.display.generateNextId());
        // determine required wire message length
        let size = 4 + 2 + 2; // id+size+opcode
        argsArray.forEach(arg => {
            if (arg.type === 'n') {
                arg.value = proxy.id;
            }
            size += arg.size;
        });
        this._connection.marshallMsg(id, opcode, size, argsArray);
        return proxy;
    }
    _marshall(id, opcode, argsArray) {
        // determine required wire message length
        let size = 4 + 2 + 2; // id+size+opcode
        argsArray.forEach(arg => size += arg.size);
        this._connection.marshallMsg(id, opcode, size, argsArray);
    }
}
// c/p to break circular dep.
class WlDisplayProxy extends Proxy {
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    sync() {
        return this._marshallConstructor(this.id, 0, WlCallbackProxy, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    getRegistry() {
        return this._marshallConstructor(this.id, 1, WlRegistryProxy, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.error(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["o"])(message, this._connection), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.deleteId(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
// c/p to break circular dep.
class WlRegistryProxy extends Proxy {
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    bind(name, interface_, proxyClass, version) {
        return this._marshallConstructor(this.id, 0, proxyClass, [Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(name), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["string"])(interface_), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["uint"])(version), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["newObject"])()]);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.global(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["s"])(message), Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
    [1](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.globalRemove(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
// c/p to break circular dep.
class WlCallbackProxy extends Proxy {
    constructor(display, connection, id) {
        super(display, connection, id);
    }
    [0](message) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield ((_a = this.listener) === null || _a === void 0 ? void 0 : _a.done(Object(westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["u"])(message)));
        });
    }
}
class DisplayImpl {
    constructor(connection) {
        this._recycledIds = [];
        this._lastId = 1;
        this._connection = connection;
        this._displayProxy = new WlDisplayProxy(this, this._connection, 1);
        this._destroyPromise = new Promise(((resolve, reject) => {
            this._destroyResolve = resolve;
            this._destroyReject = reject;
        }));
        this._displayProxy.listener = {
            deleteId: (id) => {
                this._recycledIds.push(id);
            },
            error: (proxy, code, message) => {
                this._protocolError(proxy, code, message);
            }
        };
    }
    close() {
        if (this._connection.closed) {
            return;
        }
        this._connection.close();
        this._destroyResolve();
    }
    _protocolError(proxy, code, message) {
        if (this._connection.closed) {
            return;
        }
        this._connection.close();
        this._destroyReject(new Error(`Protocol error. type: ${proxy.constructor.name}, id: ${proxy.id}, code: ${code}, message: ${message}`));
    }
    onClose() {
        return this._destroyPromise;
    }
    getRegistry() {
        return this._displayProxy.getRegistry();
    }
    generateNextId() {
        if (this._recycledIds.length) {
            return this._recycledIds.shift();
        }
        else {
            return ++this._lastId;
        }
    }
    sync() {
        return new Promise(resolve => {
            const wlCallbackProxy = this._displayProxy.sync();
            wlCallbackProxy.listener = {
                done: (data) => {
                    resolve(data);
                    wlCallbackProxy.destroy();
                }
            };
        });
    }
    flush() {
        this._connection.flush();
    }
}
// TODO This is currently a literal copy of the server implementation. Do all use cases match 1o1 and can we use a single common code base between client & server for WebFS?
class WebFS {
    constructor(fdDomainUUID) {
        this._webFDs = {};
        this._nextFD = 0;
        this._fdDomainUUID = fdDomainUUID;
    }
    static create(fdDomainUUID) {
        return new WebFS(fdDomainUUID);
    }
    fromArrayBuffer(arrayBuffer) {
        const fd = this._nextFD++;
        const type = 'ArrayBuffer';
        const webFdURL = new URL(`client://`);
        webFdURL.searchParams.append('fd', `${fd}`);
        webFdURL.searchParams.append('type', type);
        webFdURL.searchParams.append('clientId', this._fdDomainUUID);
        const webFD = new westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["WebFD"](fd, type, webFdURL, () => Promise.resolve(arrayBuffer), () => {
            delete this._webFDs[fd];
        });
        this._webFDs[fd] = webFD;
        return webFD;
    }
    fromImageBitmap(imageBitmap) {
        const fd = this._nextFD++;
        const type = 'ImageBitmap';
        const webFdURL = new URL(`client://`);
        webFdURL.searchParams.append('fd', `${fd}`);
        webFdURL.searchParams.append('type', type);
        webFdURL.searchParams.append('clientId', this._fdDomainUUID);
        const webFD = new westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["WebFD"](fd, type, webFdURL, () => Promise.resolve(imageBitmap), () => {
            delete this._webFDs[fd];
        });
        this._webFDs[fd] = webFD;
        return webFD;
    }
    fromOffscreenCanvas(offscreenCanvas) {
        const fd = this._nextFD++;
        const type = 'OffscreenCanvas';
        const webFdURL = new URL(`client://`);
        webFdURL.searchParams.append('fd', `${fd}`);
        webFdURL.searchParams.append('type', type);
        webFdURL.searchParams.append('clientId', this._fdDomainUUID);
        const webFD = new westfield_runtime_common__WEBPACK_IMPORTED_MODULE_0__["WebFD"](fd, type, webFdURL, () => Promise.resolve(offscreenCanvas), () => {
            delete this._webFDs[fd];
        });
        this._webFDs[fd] = webFD;
        return webFD;
    }
    // TODO fromMessagePort
    getWebFD(fd) {
        return this._webFDs[fd];
    }
}
//# sourceMappingURL=westfield-runtime-client.js.map

/***/ }),

/***/ "./node_modules/westfield-runtime-common/dist/Connection.js":
/*!******************************************************************!*\
  !*** ./node_modules/westfield-runtime-common/dist/Connection.js ***!
  \******************************************************************/
/*! exports provided: WlObject, Fixed, WebFD, uint, fileDescriptor, int, fixed, object, objectOptional, newObject, string, stringOptional, array, arrayOptional, u, i, f, oOptional, o, n, sOptional, s, aOptional, a, h, Connection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WlObject", function() { return WlObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fixed", function() { return Fixed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebFD", function() { return WebFD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uint", function() { return uint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fileDescriptor", function() { return fileDescriptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int", function() { return int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fixed", function() { return fixed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "object", function() { return object; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "objectOptional", function() { return objectOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newObject", function() { return newObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "string", function() { return string; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringOptional", function() { return stringOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "array", function() { return array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayOptional", function() { return arrayOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "u", function() { return u; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return i; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return f; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oOptional", function() { return oOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return o; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return n; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sOptional", function() { return sOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return s; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "aOptional", function() { return aOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return a; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return h; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return Connection; });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/*
MIT License

Copyright (c) 2020 Erik De Rijcke

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
const textDecoder = new TextDecoder('utf8');
class WlObject {
    constructor(id) {
        this._destroyPromise = new Promise(resolve => this._destroyResolver = resolve);
        this._destroyListeners = [];
        this.id = id;
        this._destroyPromise.then(() => this._destroyListeners.forEach(destroyListener => destroyListener(this)));
    }
    destroy() {
        this._destroyResolver();
    }
    addDestroyListener(destroyListener) {
        this._destroyListeners.push(destroyListener);
    }
    removeDestroyListener(destroyListener) {
        this._destroyListeners = this._destroyListeners.filter((item) => item !== destroyListener);
    }
    onDestroy() {
        return this._destroyPromise;
    }
}
class Fixed {
    /**
     * use parseFixed instead
     * @param {number}raw
     */
    constructor(raw) {
        this._raw = raw;
    }
    static parse(data) {
        return new Fixed((data * 256.0) >> 0);
    }
    /**
     * Represent fixed as a signed 24-bit integer.
     *
     */
    asInt() {
        return ((this._raw / 256.0) >> 0);
    }
    /**
     * Represent fixed as a signed 24-bit number with an 8-bit fractional part.
     *
     */
    asDouble() {
        return this._raw / 256.0;
    }
}
class WebFD {
    constructor(fd, fdType, fdURL, onGetTransferable, onClose) {
        this.fd = fd;
        this.type = fdType;
        this.url = fdURL;
        this._onGetTransferable = onGetTransferable;
        this._onClose = onClose;
    }
    getTransferable() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._onGetTransferable(this);
        });
    }
    close() {
        this._onClose(this);
    }
}
function uint(arg) {
    return {
        value: arg,
        type: 'u',
        size: 4,
        optional: false,
        _marshallArg: function (wireMsg) {
            new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = arg;
            wireMsg.bufferOffset += this.size;
        }
    };
}
function fileDescriptor(arg) {
    return {
        value: arg,
        type: 'h',
        size: 0,
        optional: false,
        _marshallArg: function (wireMsg) {
            wireMsg.fds.push(arg);
        }
    };
}
function int(arg) {
    return {
        value: arg,
        type: 'i',
        size: 4,
        optional: false,
        _marshallArg: function (wireMsg) {
            new Int32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = this.value;
            wireMsg.bufferOffset += this.size;
        }
    };
}
function fixed(arg) {
    return {
        value: arg,
        type: 'f',
        size: 4,
        optional: false,
        _marshallArg: function (wireMsg) {
            new Int32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = this.value._raw;
            wireMsg.bufferOffset += this.size;
        }
    };
}
function object(arg) {
    return {
        value: arg,
        type: 'o',
        size: 4,
        optional: false,
        _marshallArg: function (wireMsg) {
            new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = this.value.id;
            wireMsg.bufferOffset += this.size;
        }
    };
}
function objectOptional(arg) {
    return {
        value: arg,
        type: 'o',
        size: 4,
        optional: true,
        _marshallArg: function (wireMsg) {
            new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = (this.value === undefined ? 0 : this.value.id);
            wireMsg.bufferOffset += this.size;
        }
    };
}
function newObject() {
    return {
        value: 0,
        type: 'n',
        size: 4,
        optional: false,
        _marshallArg: function (wireMsg) {
            new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = this.value;
            wireMsg.bufferOffset += this.size;
        }
    };
}
function string(arg) {
    return {
        value: `${arg}\0`,
        type: 's',
        size: 4 + (function () {
            // fancy logic to calculate size with padding to a multiple of 4 bytes (int).
            // length+1 for null terminator
            return (arg.length + 1 + 3) & ~3;
        })(),
        optional: false,
        _marshallArg: function (wireMsg) {
            new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = this.value.length;
            const strLen = this.value.length;
            const buf8 = new Uint8Array(wireMsg.buffer, wireMsg.bufferOffset + 4, strLen);
            for (let i = 0; i < strLen; i++) {
                buf8[i] = this.value[i].charCodeAt(0);
            }
            wireMsg.bufferOffset += this.size;
        }
    };
}
function stringOptional(arg) {
    return {
        value: arg ? `${arg}\0` : undefined,
        type: 's',
        size: 4 + (function () {
            if (arg === undefined) {
                return 0;
            }
            else {
                // fancy logic to calculate size with padding to a multiple of 4 bytes (int).
                // length+1 for null terminator
                return (arg.length + 1 + 3) & ~3;
            }
        })(),
        optional: true,
        _marshallArg: function (wireMsg) {
            if (this.value === undefined) {
                new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = 0;
            }
            else {
                new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = this.value.length;
                const strLen = this.value.length;
                const buf8 = new Uint8Array(wireMsg.buffer, wireMsg.bufferOffset + 4, strLen);
                for (let i = 0; i < strLen; i++) {
                    buf8[i] = this.value[i].charCodeAt(0);
                }
            }
            wireMsg.bufferOffset += this.size;
        }
    };
}
function array(arg) {
    return {
        value: arg,
        type: 'a',
        size: 4 + (function () {
            // fancy logic to calculate size with padding to a multiple of 4 bytes (int).
            return (arg.byteLength + 3) & ~3;
        })(),
        optional: false,
        _marshallArg: function (wireMsg) {
            new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = this.value.byteLength;
            const byteLength = this.value.byteLength;
            new Uint8Array(wireMsg.buffer, wireMsg.bufferOffset + 4, byteLength).set(new Uint8Array(this.value.buffer, 0, byteLength));
            wireMsg.bufferOffset += this.size;
        }
    };
}
function arrayOptional(arg) {
    return {
        value: arg,
        type: 'a',
        size: 4 + (function () {
            if (arg === undefined) {
                return 0;
            }
            else {
                // fancy logic to calculate size with padding to a multiple of 4 bytes (int).
                return (arg.byteLength + 3) & ~3;
            }
        })(),
        optional: true,
        _marshallArg: function (wireMsg) {
            if (this.value === undefined) {
                new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = 0;
            }
            else {
                new Uint32Array(wireMsg.buffer, wireMsg.bufferOffset, 1)[0] = this.value.byteLength;
                const byteLength = this.value.byteLength;
                new Uint8Array(wireMsg.buffer, wireMsg.bufferOffset + 4, byteLength).set(new Uint8Array(this.value.buffer, 0, byteLength));
            }
            wireMsg.bufferOffset += this.size;
        }
    };
}
function checkMessageSize(message, consumption) {
    if (message.consumed + consumption > message.size) {
        throw new Error(`Request too short.`);
    }
    else {
        message.consumed += consumption;
    }
}
function u(message) {
    checkMessageSize(message, 4);
    return message.buffer[message.bufferOffset++];
}
function i(message) {
    checkMessageSize(message, 4);
    const arg = new Int32Array(message.buffer.buffer, message.buffer.byteOffset + (message.bufferOffset * Uint32Array.BYTES_PER_ELEMENT), 1)[0];
    message.bufferOffset += 1;
    return arg;
}
function f(message) {
    checkMessageSize(message, 4);
    const arg = new Int32Array(message.buffer.buffer, message.buffer.byteOffset + (message.bufferOffset * Uint32Array.BYTES_PER_ELEMENT), 1)[0];
    message.bufferOffset += 1;
    return new Fixed(arg >> 0);
}
function oOptional(message, connection) {
    checkMessageSize(message, 4);
    const arg = message.buffer[message.bufferOffset++];
    if (arg === 0) {
        return undefined;
    }
    else {
        const wlObject = connection.wlObjects[arg];
        if (wlObject) {
            // TODO add an extra check to make sure we cast correctly
            return wlObject;
        }
        else {
            throw new Error(`Unknown object id ${arg}`);
        }
    }
}
function o(message, connection) {
    checkMessageSize(message, 4);
    const arg = message.buffer[message.bufferOffset++];
    const wlObject = connection.wlObjects[arg];
    if (wlObject) {
        // TODO add an extra check to make sure we cast correctly
        return wlObject;
    }
    else {
        throw new Error(`Unknown object id ${arg}`);
    }
}
function n(message) {
    checkMessageSize(message, 4);
    return message.buffer[message.bufferOffset++];
}
function sOptional(message) {
    checkMessageSize(message, 4);
    const stringSize = message.buffer[message.bufferOffset++];
    if (stringSize === 0) {
        return undefined;
    }
    else {
        const alignedSize = ((stringSize + 3) & ~3);
        checkMessageSize(message, alignedSize);
        // size -1 to eliminate null byte
        const byteArray = new Uint8Array(message.buffer.buffer, message.buffer.byteOffset + (message.bufferOffset * Uint32Array.BYTES_PER_ELEMENT), stringSize - 1);
        message.bufferOffset += (alignedSize / 4);
        return textDecoder.decode(byteArray);
    }
}
function s(message) {
    checkMessageSize(message, 4);
    const stringSize = message.buffer[message.bufferOffset++];
    const alignedSize = ((stringSize + 3) & ~3);
    checkMessageSize(message, alignedSize);
    // size -1 to eliminate null byte
    const byteArray = new Uint8Array(message.buffer.buffer, message.buffer.byteOffset + (message.bufferOffset * Uint32Array.BYTES_PER_ELEMENT), stringSize - 1);
    message.bufferOffset += (alignedSize / 4);
    return textDecoder.decode(byteArray);
}
function aOptional(message, optional) {
    checkMessageSize(message, 4);
    const arraySize = message.buffer[message.bufferOffset++];
    if (arraySize === 0) {
        return undefined;
    }
    else {
        const alignedSize = ((arraySize + 3) & ~3);
        checkMessageSize(message, alignedSize);
        const arg = message.buffer.buffer.slice(message.buffer.byteOffset + (message.bufferOffset * Uint32Array.BYTES_PER_ELEMENT), message.buffer.byteOffset + (message.bufferOffset * Uint32Array.BYTES_PER_ELEMENT) + arraySize);
        message.bufferOffset += alignedSize;
        return arg;
    }
}
function a(message) {
    checkMessageSize(message, 4);
    const arraySize = message.buffer[message.bufferOffset++];
    const alignedSize = ((arraySize + 3) & ~3);
    checkMessageSize(message, alignedSize);
    const arg = message.buffer.buffer.slice(message.buffer.byteOffset + (message.bufferOffset * Uint32Array.BYTES_PER_ELEMENT), message.buffer.byteOffset + (message.bufferOffset * Uint32Array.BYTES_PER_ELEMENT) + arraySize);
    message.bufferOffset += alignedSize;
    return arg;
}
function h(message) {
    if (message.fds.length > 0) {
        let webFd = message.fds.shift();
        if (webFd === undefined) {
            throw new Error('No more webfds found in wl message.');
        }
        return webFd;
    }
    else {
        throw new Error('Not enough file descriptors in message object.');
    }
}
class Connection {
    constructor() {
        this.wlObjects = {};
        this.closed = false;
        this._outMessages = [];
        this._inMessages = [];
        this._idleHandlers = [];
    }
    /**
     * Adds a one-shot idle handler. The idle handler is fired once, after all incoming request messages have been processed.
     */
    addIdleHandler(idleHandler) {
        this._idleHandlers = [...this._idleHandlers, idleHandler];
    }
    removeIdleHandler(idleHandler) {
        this._idleHandlers = this._idleHandlers.filter(handler => handler !== idleHandler);
    }
    marshallMsg(id, opcode, size, argsArray) {
        const wireMsg = {
            buffer: new ArrayBuffer(size),
            fds: [],
            bufferOffset: 0
        };
        // write actual wire message
        const bufu32 = new Uint32Array(wireMsg.buffer);
        const bufu16 = new Uint16Array(wireMsg.buffer);
        bufu32[0] = id;
        bufu16[2] = opcode;
        bufu16[3] = size;
        wireMsg.bufferOffset = 8;
        // write actual argument value to buffer
        argsArray.forEach((arg) => arg._marshallArg(wireMsg));
        this.onSend(wireMsg);
    }
    _idle() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const idleHandler of this._idleHandlers) {
                yield idleHandler();
            }
        });
    }
    /**
     * Handle received wire messages.
     */
    message(incomingWireMessages) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.closed) {
                return;
            }
            // more than one message in queue means the message loop is in await, don't concurrently process the new
            // message, instead return early and let the resume-from-await pick up the newly queued message.
            if (this._inMessages.push(Object.assign(Object.assign({}, incomingWireMessages), { bufferOffset: 0, consumed: 0, size: 0 })) > 1) {
                return;
            }
            while (this._inMessages.length) {
                const wireMessages = this._inMessages[0];
                while (wireMessages.bufferOffset < wireMessages.buffer.length) {
                    const id = wireMessages.buffer[wireMessages.bufferOffset];
                    const sizeOpcode = wireMessages.buffer[wireMessages.bufferOffset + 1];
                    wireMessages.size = sizeOpcode >>> 16;
                    const opcode = sizeOpcode & 0x0000FFFF;
                    if (wireMessages.size > wireMessages.buffer.byteLength) {
                        throw new Error('Request buffer too small');
                    }
                    const wlObject = this.wlObjects[id];
                    if (wlObject) {
                        wireMessages.bufferOffset += 2;
                        wireMessages.consumed = 8;
                        try {
                            // @ts-ignore
                            yield wlObject[opcode](wireMessages);
                        }
                        catch (e) {
                            console.error(`
wlObject: ${wlObject.constructor.name}[${opcode}](..)
name: ${e.name} message: ${e.message} text: ${e.text}
error object stack:
${e.stack}
`);
                            this.close();
                            throw e;
                        }
                        if (this.closed) {
                            return;
                        }
                    }
                    else {
                        throw new Error(`invalid object ${id}`);
                    }
                }
                this._inMessages.shift();
            }
            this.flush();
            yield this._idle();
        });
    }
    /**
     * This doesn't actually send the message, but queues it so it can be send on flush.
     */
    onSend(wireMsg) {
        if (this.closed) {
            return;
        }
        this._outMessages.push(wireMsg);
    }
    flush() {
        var _a;
        if (this.closed) {
            return;
        }
        if (this._outMessages.length === 0) {
            return;
        }
        (_a = this.onFlush) === null || _a === void 0 ? void 0 : _a.call(this, this._outMessages);
        this._outMessages = [];
    }
    close() {
        if (this.closed) {
            return;
        }
        // destroy resources in descending order
        Object.values(this.wlObjects).sort((a, b) => a.id - b.id).forEach((wlObject) => wlObject.destroy());
        this.closed = true;
    }
    registerWlObject(wlObject) {
        if (this.closed) {
            return;
        }
        if (wlObject.id in this.wlObjects) {
            throw new Error(`Illegal object id: ${wlObject.id}. Already registered.`);
        }
        this.wlObjects[wlObject.id] = wlObject;
    }
    unregisterWlObject(wlObject) {
        if (this.closed) {
            return;
        }
        delete this.wlObjects[wlObject.id];
    }
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./node_modules/westfield-runtime-common/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/westfield-runtime-common/dist/index.js ***!
  \*************************************************************/
/*! exports provided: WlObject, Fixed, WebFD, uint, fileDescriptor, int, fixed, object, objectOptional, newObject, string, stringOptional, array, arrayOptional, u, i, f, oOptional, o, n, sOptional, s, aOptional, a, h, Connection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Connection */ "./node_modules/westfield-runtime-common/dist/Connection.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WlObject", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["WlObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Fixed", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["Fixed"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebFD", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["WebFD"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "uint", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["uint"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fileDescriptor", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["fileDescriptor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "int", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["int"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fixed", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["fixed"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "object", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["object"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectOptional", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["objectOptional"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "newObject", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["newObject"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "string", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["string"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringOptional", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["stringOptional"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "array", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["array"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "arrayOptional", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["arrayOptional"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "u", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["u"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "i", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["i"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "f", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["f"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "oOptional", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["oOptional"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "o", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["o"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "n", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["n"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sOptional", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["sOptional"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "s", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["s"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "aOptional", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["aOptional"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "h", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["h"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return _Connection__WEBPACK_IMPORTED_MODULE_0__["Connection"]; });


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxjQUFjLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL0Nvbm5lY3Rpb24nXG4iXX0=

/***/ }),

/***/ "./src/App.tsx":
/*!*********************!*\
  !*** ./src/App.tsx ***!
  \*********************/
/*! exports provided: App */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "App", function() { return App; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_canvaskit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-canvaskit */ "./node_modules/react-canvaskit/dist/index.js");
/* harmony import */ var _ParagraphDemo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ParagraphDemo */ "./src/ParagraphDemo.tsx");



const robotoPromise = fetch('https://storage.googleapis.com/skia-cdn/google-web-fonts/Roboto-Regular.ttf')
    .then((resp) => resp.arrayBuffer());
const notoColorEmojiPromise = fetch('https://storage.googleapis.com/skia-cdn/misc/NotoColorEmoji.ttf')
    .then((resp) => resp.arrayBuffer());
const fontsPromise = Promise.all([robotoPromise, notoColorEmojiPromise]);
const App = () => {
    const [fonts, setFonts] = react__WEBPACK_IMPORTED_MODULE_0___default.a.useState(undefined);
    fontsPromise.then(fetchedFonts => setFonts(fetchedFonts));
    return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react_canvaskit__WEBPACK_IMPORTED_MODULE_1__["FontManagerProvider"], { fontData: fonts },
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_ParagraphDemo__WEBPACK_IMPORTED_MODULE_2__["default"], null)));
};


/***/ }),

/***/ "./src/GreenfieldContext.tsx":
/*!***********************************!*\
  !*** ./src/GreenfieldContext.tsx ***!
  \***********************************/
/*! exports provided: useGreenfield, GreenfieldProvider, initGreenfieldContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useGreenfield", function() { return useGreenfield; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreenfieldProvider", function() { return GreenfieldProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initGreenfieldContext", function() { return initGreenfieldContext; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

// @ts-ignore
let useGreenfield = undefined;
// @ts-ignore
let GreenfieldProvider = undefined;
function initGreenfieldContext(contextConfig) {
    const FrameContext = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](contextConfig);
    useGreenfield = () => react__WEBPACK_IMPORTED_MODULE_0__["useContext"](FrameContext);
    GreenfieldProvider = ({ children }) => react__WEBPACK_IMPORTED_MODULE_0__["createElement"](FrameContext.Provider, { value: contextConfig }, children);
}


/***/ }),

/***/ "./src/ParagraphDemo.tsx":
/*!*******************************!*\
  !*** ./src/ParagraphDemo.tsx ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_canvaskit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-canvaskit */ "./node_modules/react-canvaskit/dist/index.js");
/* harmony import */ var _useAnimationFrame__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useAnimationFrame */ "./src/useAnimationFrame.tsx");



const fontPaint = { style: react_canvaskit__WEBPACK_IMPORTED_MODULE_1__["PaintStyle"].Fill, antiAlias: true };
const X = 250;
const Y = 250;
const paragraphText = 'The quick brown fox 🦊 ate a zesty hamburgerfonts 🍔.\nThe 👩‍👩‍👧‍👧 laughed.';
/* harmony default export */ __webpack_exports__["default"] = (() => {
    const skParagraphRef = react__WEBPACK_IMPORTED_MODULE_0___default.a.useRef(null);
    const fontManager = Object(react_canvaskit__WEBPACK_IMPORTED_MODULE_1__["useFontManager"])();
    const calcWrapTo = (time) => 350 + 150 * Math.sin(time / 2000);
    const [wrapTo, setWrapTo] = react__WEBPACK_IMPORTED_MODULE_0___default.a.useState(calcWrapTo(performance.now()));
    Object(_useAnimationFrame__WEBPACK_IMPORTED_MODULE_2__["default"])(time => setWrapTo(calcWrapTo(time)));
    return (react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ck-canvas", { clear: '#FFFFFF' },
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ck-paragraph", { fontManager: fontManager, ref: skParagraphRef, textStyle: {
                color: '#000000',
                // Noto Mono is the default canvaskit font, we use it as a fallback
                fontFamilies: ['Noto Mono', 'Roboto', 'Noto Color Emoji'],
                fontSize: 50
            }, textAlign: react_canvaskit__WEBPACK_IMPORTED_MODULE_1__["TextAlignEnum"].Left, maxLines: 7, ellipsis: '...', layout: wrapTo }, paragraphText),
        react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("ck-line", { x1: wrapTo, y1: 0, x2: wrapTo, y2: 400, paint: fontPaint })));
});


/***/ }),

/***/ "./src/index.tsx":
/*!***********************!*\
  !*** ./src/index.tsx ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react_canvaskit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-canvaskit */ "./node_modules/react-canvaskit/dist/index.js");
/* harmony import */ var westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! westfield-runtime-client */ "./node_modules/westfield-runtime-client/dist/index.js");
/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./App */ "./src/App.tsx");
/* harmony import */ var _GreenfieldContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GreenfieldContext */ "./src/GreenfieldContext.tsx");
// Copyright 2019 Erik De Rijcke
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
// documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
// Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class GLBuffer {
    constructor(proxy, bufferProxy) {
        this.proxy = proxy;
        this.bufferProxy = bufferProxy;
    }
    static create(webGL) {
        const proxy = webGL.createWebGlBuffer();
        const bufferProxy = webGL.createBuffer(proxy);
        const glBuffer = new GLBuffer(proxy, bufferProxy);
        proxy.listener = glBuffer;
        bufferProxy.listener = glBuffer;
        return glBuffer;
    }
    offscreenCanvas(canvas) {
        return __awaiter(this, void 0, void 0, function* () {
            this.canvas = (yield canvas.getTransferable());
        });
    }
    release() {
    }
}
class Window {
    constructor(registry) {
        this._lastFrameRenderTime = Date.now();
        this._frameCount = 0;
        this._frameCallbacks = [];
        this._registry = registry;
    }
    static create() {
        const registry = westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["display"].getRegistry();
        const window = new Window(registry);
        registry.listener = window;
        return window;
    }
    global(name, interface_, version) {
        switch (interface_) {
            case westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlCompositorProtocolName"]: {
                this._compositor = this._registry.bind(name, westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlCompositorProtocolName"], westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlCompositorProxy"], version);
                this._surface = this._compositor.createSurface();
                this._onFrame = Object(westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["frame"])(this._surface);
                break;
            }
            case westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["GrWebGlProtocolName"]: {
                this._webGL = this._registry.bind(name, westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["GrWebGlProtocolName"], westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["GrWebGlProxy"], version);
                this._glBuffer = GLBuffer.create(this._webGL);
                break;
            }
            case westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlShellProtocolName"]: {
                this._shell = this._registry.bind(name, westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlShellProtocolName"], westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlShellProxy"], version);
                break;
            }
            case westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlSeatProtocolName"]: {
                this._seat = this._registry.bind(name, westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlSeatProtocolName"], westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlSeatProxy"], version);
                this._seat.listener = this;
            }
        }
    }
    init(width, height) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._shell === undefined) {
                throw new Error('No shell.');
            }
            if (this._surface === undefined) {
                throw new Error('No surface.');
            }
            this._shellSurface = this._shell.getShellSurface(this._surface);
            this._shellSurface.listener = this;
            this._shellSurface.setToplevel();
            this._shellSurface.setTitle('Simple WebGL');
            const syncPromise = westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["display"].sync();
            westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["display"].flush();
            yield syncPromise;
            if (this._glBuffer === undefined) {
                throw new Error('No GLBuffer.');
            }
            if (this._glBuffer.canvas === undefined) {
                throw new Error('No canvas on GLBuffer.');
            }
            this._glBuffer.canvas.width = width;
            this._glBuffer.canvas.height = height;
            Object(_GreenfieldContext__WEBPACK_IMPORTED_MODULE_4__["initGreenfieldContext"])({
                requestSurfaceFrame: frameCallback => this._frameCallbacks = [...this._frameCallbacks, frameCallback]
            });
            const canvas = this._glBuffer.canvas;
            yield Object(react_canvaskit__WEBPACK_IMPORTED_MODULE_1__["init"])();
            Object(react_canvaskit__WEBPACK_IMPORTED_MODULE_1__["render"])(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GreenfieldContext__WEBPACK_IMPORTED_MODULE_4__["GreenfieldProvider"], null,
                react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_App__WEBPACK_IMPORTED_MODULE_3__["App"], null)), canvas, () => this.draw());
            setInterval(() => {
                console.log(`Simpl-WebGL: ${this._frameCount} fps`);
                this._frameCount = 0;
            }, 1000);
        });
    }
    draw() {
        var _a;
        if (this._surface === undefined) {
            throw new Error('No surface.');
        }
        if (this._glBuffer === undefined) {
            throw new Error('No GLBuffer.');
        }
        if (this._glBuffer.canvas === undefined) {
            throw new Error('No canvas on GLBuffer.');
        }
        (_a = this._onFrame) === null || _a === void 0 ? void 0 : _a.call(this).then(time => {
            // we need to create a copy to avoid deleting new callbacks that are added by our foreach loop.
            const frameCallbackCopy = this._frameCallbacks;
            this._frameCallbacks = [];
            frameCallbackCopy.forEach(frameCallback => frameCallback(time));
        });
        this._surface.attach(this._glBuffer.bufferProxy, 0, 0);
        this._surface.damage(0, 0, this._glBuffer.canvas.width, this._glBuffer.canvas.height);
        // serial is only required if our buffer contents would take a long time to send to the compositor ie. in a network remote case
        this._surface.commit(0);
        westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["display"].flush();
        this._frameCount++;
    }
    globalRemove(name) {
        // FIXME keep track of the name number of the globals we bind so we can do cleanup if a global should go away.
    }
    configure(edges, width, height) {
    }
    ping(serial) {
        if (this._shellSurface === undefined) {
            throw new Error('No shellsurface.');
        }
        this._shellSurface.pong(serial);
    }
    popupDone() {
    }
    capabilities(capabilities) {
        if (this._seat === undefined) {
            throw new Error('No seat.');
        }
        if (capabilities & westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlSeatCapability"]._pointer) {
            this._pointer = this._seat.getPointer();
            this._pointer.listener = this;
        }
        else if (this._pointer) {
            this._pointer.release();
            this._pointer = undefined;
        }
    }
    name(name) {
    }
    axis(time, axis, value) {
    }
    axisDiscrete(axis, discrete) {
    }
    axisSource(axisSource) {
    }
    axisStop(time, axis) {
    }
    button(serial, time, button, state) {
        if (this._shellSurface === undefined || this._seat === undefined) {
            return;
        }
        if (state & westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["WlPointerButtonState"]._pressed) {
            this._shellSurface.move(this._seat, serial);
        }
    }
    enter(serial, surface, surfaceX, surfaceY) {
    }
    frame() {
    }
    leave(serial, surface) {
    }
    motion(time, surfaceX, surfaceY) {
    }
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        // create a new window with some buffers
        const window = Window.create();
        // create a sync promise
        const syncPromise = westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["display"].sync();
        // flush out window creation & sync requests to the compositor
        westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["display"].flush();
        // wait for compositor to have processed all our outgoing requests
        yield syncPromise;
        // Now begin drawing after the compositor is done processing all our requests
        yield window.init(500, 500);
        westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["display"].flush();
        // wait for the display connection to close
        try {
            yield westfield_runtime_client__WEBPACK_IMPORTED_MODULE_2__["display"].onClose();
            console.log('Application exit.');
        }
        catch (e) {
            console.error('Application terminated with error.');
            console.error(e.stackTrace);
        }
    });
}
main();


/***/ }),

/***/ "./src/useAnimationFrame.tsx":
/*!***********************************!*\
  !*** ./src/useAnimationFrame.tsx ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _GreenfieldContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GreenfieldContext */ "./src/GreenfieldContext.tsx");


/* harmony default export */ __webpack_exports__["default"] = ((callback) => {
    const { requestSurfaceFrame } = Object(_GreenfieldContext__WEBPACK_IMPORTED_MODULE_1__["useGreenfield"])();
    const animate = (time) => {
        callback(time);
        requestSurfaceFrame(animate);
    };
    react__WEBPACK_IMPORTED_MODULE_0___default.a.useEffect(() => requestSurfaceFrame(animate), []); // Make sure the effect runs only once
});


/***/ }),

/***/ 0:
/*!*****************************!*\
  !*** multi ./src/index.tsx ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/erik/git/greenfield/client-demos/react-canvaskit/src/index.tsx */"./src/index.tsx");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,