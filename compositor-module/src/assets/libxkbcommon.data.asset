default
xkb_keycodes "jolla" {

   // These keycodes are beyond the X11 255 limit value so it would
   // only be valid for the use with SW which supports extended keycodes,
   // like xkbcommon.

   <I264> = 264;	// Jolla phone has the wired headset button sending this keycode

};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
default xkb_keycodes "138" {

    minimum= 8;
    maximum= 255;

    <ESC>  = 37;
    <AE01> = 38;
    <AE02> = 39;
    <AE03> = 40;
    <AE04> = 41;
    <AE05> = 42;
    <AE06> = 43;
    <AE07> = 44;
    <AE08> = 45;
    <AE09> = 46;
    <AE10> = 47;
    <AE11> = 48;
    <AE12> = 49;
    <TLDE> = 50;
    <BKSP> = 51;

    <TAB>  = 61;
    <AD01> = 62;
    <AD02> = 63;
    <AD03> = 64;
    <AD04> = 65;
    <AD05> = 66;
    <AD06> = 67;
    <AD07> = 68;
    <AD08> = 69;
    <AD09> = 70;
    <AD10> = 71;
    <AD11> = 72;
    <AD12> = 73;

    <LCTL> = 84;
    <AC01> = 85;
    <AC02> = 86;
    <AC03> = 87;
    <AC04> = 88;
    <AC05> = 89;
    <AC06> = 90;
    <AC07> = 91;
    <AC08> = 92;
    <AC09> = 93;
    <AC10> = 94;
    <AC11> = 95;
    <BKSL> = 96;
    <RTRN> = 97;

    <LFSH> = 107;
    <AB01> = 108;
    <AB02> = 109;
    <AB03> = 110;
    <AB04> = 111;
    <AB05> = 112;
    <AB06> = 113;
    <AB07> = 114;
    <AB08> = 115;
    <AB09> = 116;
    <AB10> = 117;
    <AB11> = 52;
    <RTSH> = 118;

    <CAPS> = 127;
    <LALT> = 27;
    <LMTA> = 128;
    <UNK4> = 125;
    <SPCE> = 129;
    <UNK5> = 10;
    <RMTA> = 130;
    <RALT> = 23;
    <COMP> = 75;
    <LNFD> = 119;
    <UNK6> = 56;

    <FK01> = 13;
    <FK02> = 14;
    <FK03> = 16;
    <FK04> = 18;
    <FK05> = 20;
    <FK06> = 22;
    <FK07> = 24;
    <FK08> = 25;
    <FK09> = 26;
    <FK10> = 15;
    <FK11> = 17;
    <FK12> = 19;
    <FK13> = 137;
    <FK14> = 138;
    <FK15> = 139;
    <FK16> = 140;
    <FK17> = 141;
    <FK18> = 142;
    <FK19> = 143;
    <FK20> = 144;
    <FK21> = 145;
    <FK22> = 146;
    <FK23> = 147;
    <FK24> = 148;
    <FK25> = 153;
    <FK26> = 154;
    <FK27> = 155;
    <FK28> = 156;
    <FK29> = 149;
    <FK30> = 150;
    <FK31> = 151;
    <FK32> = 152;

    <UNDO> = 34;
    <COPY> = 59;
    <PAST> = 81;
     <CUT> = 105;
    <HELP> = 126;

    <BREA> = 9;
    <PRSC> = 30;
    <KNJI> = 21;
    <PAUS> = 29;

    <UNK0> = 82;
    <UNK1> = 83;
    <UNK2> = 12;
    <PGUP> = 35;
    <HOME> = 32;
    <PGDN> = 36;
    <UNK3> = 28;
     <DEL> = 74;
     <INS> = 60;
      <UP> = 33;
    <DOWN> = 103;
    <LEFT> = 57;
    <RGHT> = 80;
    <EXEC> = 11;

    <KPMU> = 55;
    <KPDV> = 54;
    <KPAD> = 133;
    <KPSU> = 79;

    <KP7>  = 76;
    <KP8>  = 77;
    <KP9>  = 78;
    <KPEQ> = 53;

    <KP4>  = 99;
    <KP5>  = 100;
    <KP6>  = 101;
    <KPDC> = 58;

    <KP1>  = 120;
    <KP2>  = 121;
    <KP3>  = 122;
    <KPEN> = 98;

    <KP0>  = 102;
    <KP00> = 31;

    <UNK7> = 123;
    <UNK8> = 124;
};
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//

xkb_keycodes "type6" {

    minimum= 8;
    maximum= 132;

    <ESC>  = 36;
    <AE01> = 37;
    <AE02> = 38;
    <AE03> = 39;
    <AE04> = 40;
    <AE05> = 41;
    <AE06> = 42;
    <AE07> = 43;
    <AE08> = 44;
    <AE09> = 45;
    <AE10> = 46;
    <AE11> = 47;
    <AE12> = 48;
    <TLDE> = 49;
    <BKSP> = 50;

    <TAB>  = 60;
    <AD01> = 61;
    <AD02> = 62;
    <AD03> = 63;
    <AD04> = 64;
    <AD05> = 65;
    <AD06> = 66;
    <AD07> = 67;
    <AD08> = 68;
    <AD09> = 69;
    <AD10> = 70;
    <AD11> = 71;
    <AD12> = 72;
    <DELE> = 73;
    <COMP> = 74;
    <ALGR> = 20;
    alias <RALT> = <ALGR>;

    <LCTL> = 83;
    <AC01> = 84;
    <AC02> = 85;
    <AC03> = 86;
    <AC04> = 87;
    <AC05> = 88;
    <AC06> = 89;
    <AC07> = 90;
    <AC08> = 91;
    <AC09> = 92;
    <AC10> = 93;
    <AC11> = 94;
    <BKSL> = 95;
    <RTRN> = 96;

    <LFSH> = 106;
    <AB01> = 107;
    <AB02> = 108;
    <AB03> = 109;
    <AB04> = 110;
    <AB05> = 111;
    <AB06> = 112;
    <AB07> = 113;
    <AB08> = 114;
    <AB09> = 115;
    <AB10> = 116;
    <RTSH> = 117;

    <LALT> = 26;
    <CAPS> = 126;
    <LMTA> = 127;
    <SPCE> = 128;
    <RMTA> = 129;

    <FK01> = 12;
    <FK02> = 13;
    <FK03> = 15;
    <FK04> = 17;
    <FK05> = 19;
    <FK06> = 21;
    <FK07> = 23;
    <FK08> = 24;
    <FK09> = 25;
    <FK10> = 14;
    <FK11> = 16;
    <FK12> = 18;
    <STOP> = 8;
    <AGAI> = 10;
    <PROP> = 32;
    <UNDO> = 33;
    <FRNT> = 56;
    <COPY> = 58;
    <OPEN> = 79;
    <PAST> = 80;
    <FIND> = 102;
    <CUT>  = 104;

    <PRSC> = 29;
    <SCLK> = 30;
    <PAUS> = 28;

    <NMLK> = 105;
    <KPDV> = 53;
    <KPMU> = 54;
    <KPSU> = 78;

    <KP7>  = 75;
    <KP8>  = 76;
    <KP9>  = 77;
    <KPAD> = 132;

    <KP4>  = 98;
    <KP5>  = 99;
    <KP6>  = 100;

    <KP1>  = 119;
    <KP2>  = 120;
    <KP3>  = 121;
    <KPEN> = 97;

    <KP0>  = 101;
    <KPDL> = 57;

    <UP>   = 27;
    <LEFT> = 31;
    <DOWN> = 34;
    <RGHT> = 35;

    <INS>  = 51;
    <HOME> = 59;
    <END>  = 81;
    <PGUP> = 103;
    <PGDN> = 130;
    <HELP> = 125;

    <MUTE> = 52;
    <VOL-> = 9;
    <VOL+> = 11;
    <POWR> = 55;
    indicator 4 = "Caps Lock";
    indicator 3 = "Compose";
    indicator 2 = "Scroll Lock";
    indicator 1 = "Num Lock";
};


xkb_keycodes "type6tuv" {
    include "sun(type6)"
    <LSGT> = 131;
};

xkb_keycodes "type6_jp" {
    include "sun(type6)"
    <EXEC> = 122;
    <KANJ> = 123;
    <HENK> = 124;
    <UNDR> = 118;
};

xkb_keycodes "type6_euro" {
    include "sun(type6)"
    <LSGT> = 131;
};

xkb_keycodes "type6unix" {
    include "sun(type6)"
};

// Even though this is labeled as _usb, I verified these keycodes as accurate
// on my type5 serial and type6 serial keyboards as well on linux-2.6 boxes.
// I'm not sure where the "type6" keycodes above are coming from...
default xkb_keycodes "type6_usb" {
    include "xfree86"

//    <STOP> = 232;
//    <AGAI> = 133;
//    <PROP> = 134;
//    <UNDO> = 135;
//    <FRNT> = 140;
//    <COPY> = 248;
//    <OPEN> = 191;
//    <PAST> = 192;
//    <FIND> = 122;
//    <CUT>  = 188;

 //   <HELP> = 245;

    // The blank has keycode 239 on my type6 serial kb, but 134 on
    // my type6 usb keyboard (same as <PROP>)
//    <BLNK> = 239;

    // AltGr + PrScr actually sends a different keycode
//    <SYRQ> = 92;

//    <MUTE> = 160;
//    <VOL-> = 174;
//    <VOL+> = 176;
//    <POWR> = 222;

      <I150> = 155;
      <I160> = 160;
      <I235> = 235;

    indicator 4 = "Compose";
};

xkb_keycodes "type6tuv_usb" {
    include "sun(type6_usb)"
//    <LSGT> = 94;
//    <BKSL> = 51;
};

xkb_keycodes "type6_jp_usb" {
    include "sun(type6_usb)"
    alias <UNDR> = <KPDC>;  // 123
    alias <EXEC> = <NFER>;  // 131
    alias <KANJ> = <XFER>;  // 129
    alias <HENK> = <HKTG>;  // 208
    indicator 5 = "Kana";
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
xkb_keycodes "rs6k-101" {

    <TLDE> = 9;
    <AE01> = 10;
    <AE02> = 11;
    <AE03> = 12;
    <AE04> = 13;
    <AE05> = 14;
    <AE06> = 15;
    <AE07> = 16;
    <AE08> = 17;
    <AE09> = 18;
    <AE10> = 19;
    <AE11> = 20;
    <AE12> = 21;
    <BKSP> = 23;

    <TAB>  = 24;
    <AD01> = 25;
    <AD02> = 26;
    <AD03> = 27;
    <AD04> = 28;
    <AD05> = 29;
    <AD06> = 30;
    <AD07> = 31;
    <AD08> = 32;
    <AD09> = 33;
    <AD10> = 34;
    <AD11> = 35;
    <AD12> = 36;
    <BKSL> = 37;

    <CAPS> = 38;
    <AC01> = 39;
    <AC02> = 40;
    <AC03> = 41;
    <AC04> = 42;
    <AC05> = 43;
    <AC06> = 44;
    <AC07> = 45;
    <AC08> = 46;
    <AC09> = 47;
    <AC10> = 48;
    <AC11> = 49;
    <RTRN> = 51;

    <LFSH> = 52;
    <AB01> = 54;
    <AB02> = 55;
    <AB03> = 56;
    <AB04> = 57;
    <AB05> = 58;
    <AB06> = 59;
    <AB07> = 60;
    <AB08> = 61;
    <AB09> = 62;
    <AB10> = 63;
    <RTSH> = 65;

    <LCTL> = 66;
    <LALT> = 68;
    <SPCE> = 69;
    <RALT> = 70;
    <RCTL> = 72;

    <ESC>  = 118;
    <FK01> = 120;
    <FK02> = 121;
    <FK03> = 122;
    <FK04> = 123;
    <FK05> = 124;
    <FK06> = 125;
    <FK07> = 126;
    <FK08> = 127;
    <FK09> = 128;
    <FK10> = 129;
    <FK11> = 130;
    <FK12> = 131;

    <PRSC> = 132;
    <SCLK> = 133;
    <PAUS> = 134;

    <INS>  = 83;
    <HOME> = 88;
    <PGUP> = 93;
    <DELE> = 84;
    <END>  = 89;
    <PGDN> = 94;

    <UP>   = 91;
    <LEFT> = 87;
    <DOWN> = 92;
    <RGHT> = 97;

    <NMLK> = 98;
    <KPDV> = 103;
    <KPMU> = 108;
    <KPSU> = 113;

     <KP7> = 99;
     <KP8> = 104;
     <KP9> = 109;
    <KPAD> = 114;

     <KP4> = 100;
     <KP5> = 105;
     <KP6> = 110;

     <KP1> = 101;
     <KP2> = 106;
     <KP3> = 111;
    <KPEN> = 116;

     <KP0> = 107;
    <KPDL> = 112;

    indicator 1 = "Caps Lock";
    indicator 2 = "Num Lock";
    indicator 3 = "Scroll Lock";
};
xkb_keycodes "rs6k-102" {
    include "ibm(rs6k-101)"
    <LSGT> = 53;
};
//
//Copyright (c) 1996  X Consortium
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and/or sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the X Consortium shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from the X Consortium.
//
//
default xkb_keycodes "macintosh" {
   include "xfree86"

   <FK13> = 182;
   <FK14> = 183;
   <FK15> = 184;
   <KPEQ> = 157;
   
};

xkb_keycodes "old" {

    minimum= 8;
    maximum= 255;

    <ESC>  = 61;
    <TLDE> = 58;
    <AE01> = 26;
    <AE02> = 27;
    <AE03> = 28;
    <AE04> = 29;
    <AE05> = 31;
    <AE06> = 30;
    <AE07> = 34;
    <AE08> = 36;
    <AE09> = 33;
    <AE10> = 37;
    <AE11> = 35;
    <AE12> = 32;
    <BKSP> = 59;

    <TAB>  = 56;
    <AD01> = 20;
    <AD02> = 21;
    <AD03> = 22;
    <AD04> = 23;
    <AD05> = 25;
    <AD06> = 24;
    <AD07> = 40;
    <AD08> = 42;
    <AD09> = 39;
    <AD10> = 43;
    <AD11> = 41;
    <AD12> = 38;
    <BKSL> = 50;

    <CAPS> = 65;
    <AC01> = 8;
    <AC02> = 9;
    <AC03> = 10;
    <AC04> = 11;
    <AC05> = 13;
    <AC06> = 12;
    <AC07> = 46;
    <AC08> = 48;
    <AC09> = 45;
    <AC10> = 49;
    <AC11> = 47;
    <RTRN> = 44;

    <LSGT> = 18;
    <AB01> = 14;
    <AB02> = 15;
    <AB03> = 16;
    <AB04> = 17;
    <AB05> = 19;
    <AB06> = 53;
    <AB07> = 54;
    <AB08> = 51;
    <AB09> = 55;
    <AB10> = 52;

    <SPCE> = 57;

    <LCTL> = 62;  // Left Control
    <LALT> = 63;  // Left Option
    <LFSH> = 64;  // Left Shift
    <RALT> = 66;  // Left Command
//    <RTSH> = 131; // Right Shift
//    <RALT> = 132; // Right Command
//    <RCTL> = 133; // Right Control
//    <RMTA> = 134; // Right Option

    <FK01> = 130;
    <FK02> = 128;
    <FK03> = 107;
    <FK04> = 126;
    <FK05> = 104;
    <FK06> = 105;
    <FK07> = 106;
    <FK08> = 108;
    <FK09> = 109;
    <FK10> = 117;
    <FK11> = 111;
    <FK12> = 119;

    <PRSC> = 113;
    <SCLK> = 115;
    <PAUS> = 121;

    <INS>  = 122;
    <HOME> = 123;
    <PGUP> = 124;
    <DELE> = 125;
    <END>  = 127;
    <PGDN> = 129;

    <UP>   = 70;
    <LEFT> = 67;
    <DOWN> = 69;
    <RGHT> = 68;

    <NMLK> = 79;
    <KPEQ> = 89;
    <KPDV> = 83;
    <KPMU> = 75;

    <KP7>  = 97;
    <KP8>  = 99;
    <KP9>  = 100;
    <KPSU> = 86;

    <KP4>  = 94;
    <KP5>  = 95;
    <KP6>  = 96;
    <KPAD> = 77;

    <KP1>  = 91;
    <KP2>  = 92;
    <KP3>  = 93;
    <KPEN> = 84;

    <KP0>  = 90;
    <KPDL> = 73;

    indicator 3 = "Scroll Lock";
    indicator 2 = "Num Lock";
    indicator 1 = "Caps Lock";

    alias <ALGR> = <RALT>;
};

xkb_keycodes "hhk" {
   include "macintosh"

    <AC12> = 51;

    <LWIN> = 49;
    <EISU> = 131;
    <KANA> = 129;
    <RWIN> = 208;

    <FK13> = 111;
    <FK14> = 78;
    <FK15> = 110;
};

// Aluminium Keyboards
xkb_keycodes "alukbd" {
    include "xfree86"

    // Fkeys missing in xfree86 keycodes
    <FK18> = 129;
    <FK19> = 130;

    // Eject key that matches the geometry definition
    alias <I169> = <K6C>;

    // Japanese keypad separator (KPSP in base, JPCM in evdev)
    alias <JPCM> = <KPDC>;
};

// Aluminium Keyboards JIS
// As of HID Usage Table v1.11, it seems there are no usages
// for keys EISU or KANA. JIS Aluminium Keyboards overcome
// this by outputting usages of keys Hanja and Hangul
xkb_keycodes "jisevdev" {
    alias <KANA> = <HJCV>;   // Switch to kana mode
    alias <EISU> = <HNGL>;   // Switch to alphanumeric mode
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
default xkb_keycodes "hp-101" {

    <TLDE> = 23;
    <AE01> = 31;
    <AE02> = 39;
    <AE03> = 47;
    <AE04> = 46;
    <AE05> = 55;
    <AE06> = 63;
    <AE07> = 70;
    <AE08> = 71;
    <AE09> = 79;
    <AE10> = 78;
    <AE11> = 87;
    <AE12> = 94;
    <BKSP> = 111;

    <TAB>  = 22;
    <AD01> = 30;
    <AD02> = 38;
    <AD03> = 45;
    <AD04> = 54;
    <AD05> = 53;
    <AD06> = 62;
    <AD07> = 69;
    <AD08> = 76;
    <AD09> = 77;
    <AD10> = 86;
    <AD11> = 93;
    <AD12> = 100;
    <BKSL> = 101;

    <CAPS> = 29;
    <AC01> = 37;
    <AC02> = 36;
    <AC03> = 44;
    <AC04> = 52;
    <AC05> = 61;
    <AC06> = 60;
    <AC07> = 68;
    <AC08> = 75;
    <AC09> = 84;
    <AC10> = 85;
    <AC11> = 91;
    <RTRN> = 99;

    <LFSH> = 27;
    <AB01> = 35;
    <AB02> = 43;
    <AB03> = 42;
    <AB04> = 51;
    <AB05> = 59;
    <AB06> = 58;
    <AB07> = 67;
    <AB08> = 74;
    <AB09> = 82;
    <AB10> = 83;
    <RTSH> = 98;

    <LCTL> = 26;
    <LALT> = 34;
    <SPCE> = 50;
    <RALT> = 66;
    <RCTL> = 97;

    <ESC>  = 17;
    <FK01> = 16;
    <FK02> = 24;
    <FK03> = 32;
    <FK04> = 40;
    <FK05> = 48;
    <FK06> = 56;
    <FK07> = 64;
    <FK08> = 72;
    <FK09> = 80;
    <FK10> = 88;
    <FK11> = 95;
    <FK12> = 103;

    <PRSC> = 96;
    <SCLK> = 104;
    <PAUS> = 107;

    <INS>  = 112;
    <HOME> = 119;
    <PGUP> = 120;
    <DELE> = 109;
    <END>  = 110;
    <PGDN> = 118;

    <UP>   = 108;
    <LEFT> = 106;
    <DOWN> = 105;
    <RGHT> = 115;

    <NMLK> = 127;
    <KPDV> = 128;
    <KPMU> = 135;
    <KPSU> = 141;

     <KP7> = 117;
     <KP8> = 126;
     <KP9> = 134;
    <KPAD> = 133;

     <KP4> = 116;
     <KP5> = 124;
     <KP6> = 125;

     <KP1> = 114;
     <KP2> = 123;
     <KP3> = 131;
    <KPEN> = 130;

     <KP0> = 121;
    <KPDL> = 122;

    indicator 1 = "Caps Lock";
    indicator 2 = "Num Lock";
    indicator 3 = "Scroll Lock";
};

xkb_keycodes "hil" {

    <TLDE> = 71;
    <AE01> = 70;
    <AE02> = 69;
    <AE03> = 68;
    <AE04> = 67;
    <AE05> = 66;
    <AE06> = 65;
    <AE07> = 64;
    <AE08> = 96;
    <AE09> = 97;
    <AE10> = 98;
    <AE11> = 99;
    <AE12> = 100;
    <BKSP> = 101;

    <TAB>  = 63;
    <AD01> = 62;
    <AD02> = 61;
    <AD03> = 60;
    <AD04> = 59;
    <AD05> = 58;
    <AD06> = 57;
    <AD07> = 56;
    <AD08> = 104;
    <AD09> = 105;
    <AD10> = 106;
    <AD11> = 107;
    <AD12> = 108;
    <BKSL> = 109;

    <CAPS> = 55;
    <AC01> = 53;
    <AC02> = 52;
    <AC03> = 51;
    <AC04> = 50;
    <AC05> = 49;
    <AC06> = 48;
    <AC07> = 112;
    <AC08> = 113;
    <AC09> = 114;
    <AC10> = 115;
    <AC11> = 116;
    <RTRN> = 117;

    <LFSH> = 13;
    <AB01> = 36;
    <AB02> = 35;
    <AB03> = 34;
    <AB04> = 33;
    <AB05> = 32;
    <AB06> = 128;
    <AB07> = 120;
    <AB08> = 121;
    <AB09> = 122;
    <AB10> = 123;
    <RTSH> = 12;

    <LCTL> = 14;
    <LALT> = 11;
    <SPCE> = 129;
    <RALT> = 10;
    <PRSC> = 87;

    <ESC>  = 39;
    <BRK>  = 15;
    <STOP> = 86;
    <FK01> = 84;
    <FK02> = 83;
    <FK03> = 82;
    <FK04> = 81;
    <MENU> = 80;
    <SYST> = 88;
    <FK05> = 89;
    <FK06> = 90;
    <FK07> = 91;
    <FK08> = 92;
    <FK09> = 45;
    <FK10> = 41;
    <FK11> = 43;
    <FK12> = 47;
    <CLRL> = 94;
    <CLR>  = 95;

    <INSL> = 102;
    <DELL> = 103;
    <INSC> = 110;
    <DELC> = 111;

    <HOME> = 118;
    <PGUP> = 119;
    <PGDN> = 127;
    <SELE> = 125;

    <UP>   = 134;
    <LEFT> = 132;
    <DOWN> = 133;
    <RGHT> = 135;

    <KPDV> = 25;
    <KPMU> = 29;
    <KPAD> = 27;
    <KPSU> = 31;

     <KP7> = 21;
     <KP8> = 17;
     <KP9> = 19;
    <KPEN> = 23;

     <KP4> = 16;
     <KP5> = 18;
     <KP6> = 20;
    <KPSP> = 22;

     <KP1> = 24;
     <KP2> = 26;
     <KP3> = 28;
    <KPTB> = 46;

     <KP0> = 30;
    <KPDL> = 44;
};
// "standard" XFree86 codes
// It seems that the "default" must be the first entry in the file.

default xkb_keycodes "xfree86" {
    include "xfree86(basic)"
    <BKSL> =  51;
    alias <AC12> = <BKSL>;
    <LSGT> =  94;
};

xkb_keycodes "basic" {

    minimum= 8;
    maximum= 255;

    <TLDE> =  49;
    alias <AE00> = <TLDE>;	// Some geometries use AE00
    <AE01> =  10;
    <AE02> =  11;
    <AE03> =  12;
    <AE04> =  13;
    <AE05> =  14;
    <AE06> =  15;
    <AE07> =  16;
    <AE08> =  17;
    <AE09> =  18;
    <AE10> =  19;
    <AE11> =  20;
    <AE12> =  21;
    <BKSP> =  22;

    <TAB>  =  23;
    <AD01> =  24;
    <AD02> =  25;
    <AD03> =  26;
    <AD04> =  27;
    <AD05> =  28;
    <AD06> =  29;
    <AD07> =  30;
    <AD08> =  31;
    <AD09> =  32;
    <AD10> =  33;
    <AD11> =  34;
    <AD12> =  35;
    <RTRN> =  36;

    <CAPS> =  66;
    <AC01> =  38;
    <AC02> =  39;
    <AC03> =  40;
    <AC04> =  41;
    <AC05> =  42;
    <AC06> =  43;
    <AC07> =  44;
    <AC08> =  45;
    <AC09> =  46;
    <AC10> =  47;
    <AC11> =  48;

    <LFSH> =  50;
    <AB01> =  52;
    <AB02> =  53;
    <AB03> =  54;
    <AB04> =  55;
    <AB05> =  56;
    <AB06> =  57;
    <AB07> =  58;
    <AB08> =  59;
    <AB09> =  60;
    <AB10> =  61;
    <RTSH> =  62;

    <LALT> =  64;
    <LCTL> =  37;
    <SPCE> =  65;
    <RCTL> = 109;
    <RALT> = 113;
    // Microsoft keyboard extra keys
    <LWIN> = 115;
    <RWIN> = 116;
    <MENU> = 117;

    <ESC>  =   9;
    <FK01> =  67;
    <FK02> =  68;
    <FK03> =  69;
    <FK04> =  70;
    <FK05> =  71;
    <FK06> =  72;
    <FK07> =  73;
    <FK08> =  74;
    <FK09> =  75;
    <FK10> =  76;
    <FK11> =  95;
    <FK12> =  96;

    <PRSC> = 111;
    <SYRQ> =  92;
    <SCLK> =  78;
    <PAUS> = 110;
    <BRK>  = 114;

    <INS>  = 106;
    <HOME> =  97;
    <PGUP> =  99;
    <DELE> = 107;
    <END>  = 103;
    <PGDN> = 105;

    <UP>   =  98;
    <LEFT> = 100;
    <DOWN> = 104;
    <RGHT> = 102;

    <NMLK> =  77;
    <KPDV> = 112;
    <KPMU> =  63;
    <KPSU> =  82;

    <KP7>  =  79;
    <KP8>  =  80;
    <KP9>  =  81;
    <KPAD> =  86;

    <KP4>  =  83;
    <KP5>  =  84;
    <KP6>  =  85;

    <KP1>  =  87;
    <KP2>  =  88;
    <KP3>  =  89;
    <KPEN> = 108;

    <KP0>  =  90;
    <KPDL> =  91;
    <KPEQ> = 126;

    <FK13> =  118;
    <FK14> =  119;
    <FK15> =  120;
    <FK16> =  121;
    <FK17> =  122;
    <KPDC> =  123;

    // Keys that are generated on Japanese keyboards

    alias <HZTG> = <TLDE>;	// Hankaku_Zenkaku toggle
    <HKTG> =   208;		// Hiragana_Katakana toggle
    <AB11> =   211;		// backslash/underscore
    <XFER> =   129;		// Henkan
    <NFER> =   131;		// Muhenkan
    <AE13> =   133;		// Yen
    <EISU> =   210;		// Alphanumeric mode on macintosh
    <KANA> =   209;		// Kana mode on macintosh

    // Keys that are generated on Korean keyboards

    alias <HNGL> = <FK16>;     // Hangul Latin toggle
    alias <HJCV> = <FK17>;     // Hangul to Hanja conversion

    // Extended keys that may be generated on "Internet" keyboards.
    // These are not standardised, hence the meaningless names.
    // The entries commented out are never generated because the raw codes
    // in those positions are already used for well-defined keys.

    <I02> =   130;
    <I04> =   132;
    alias <I05> = <AE13>;
    <I06> =   134;
    <I07> =   135;
    <I08> =   136;
    <I09> =   137;
    <I0A> =   138;
    <I0B> =   139;
    <I0C> =   140;
    <I0D> =   141;
    <I0E> =   142;
    <I0F> =   143;
    <I10> =   144;
    <I11> =   145;
    <I12> =   146;
    <I13> =   147;
    <I14> =   148;
    <I15> =   149;
    <I16> =   150;
    <I17> =   151;
    <I18> =   152;
    <I19> =   153;
    <I1A> =   154;
    <I1B> =   155;
    // <I1C> =   156;	<META>
    // <I1D> =   157;	<K59>
    <I1E> =   158;
    <I1F> =   159;
    <I20> =   160;
    <I21> =   161;
    <I22> =   162;
    <I23> =   163;
    <I24> =   164;
    <I25> =   165;
    <I26> =   166;
    <I27> =   167;
    <I28> =   168;
    <I29> =   169;
    // <I2A> =   170;	<K5A>
    <I2B> =   171;
    <I2C> =   172;
    <I2D> =   173;
    <I2E> =   174;
    <I2F> =   175;
    <I30> =   176;
    <I31> =   177;
    <I32> =   178;
    <I33> =   179;
    <I34> =   180;
    // <I35> =   181;	<K5B>
    // <I36> =   182;	<K5D>
    // <I37> =   183;	<K5E>
    // <I38> =   184;	<K5F>
    <I39> =   185;
    <I3A> =   186;
    <I3B> =   187;
    <I3C> =   188;
    // <I3D> =   189;	<K62>
    // <I3E> =   190;	<K63>
    // <I3F> =   191;	<K64>
    // <I40> =   192;	<K65>
    // <I41> =   193;	<K66>
    <I42> =   194;
    <I43> =   195;
    <I44> =   196;
    <I45> =   197;
    // <I46> =   198;	<K67>
    // <I47> =   199;	<K68>
    // <I48> =   200;	<K69>
    // <I49> =   201;	<K6A>
    <I4A> =   202;
    // <I4B> =   203;	<K6B>
    // <I4C> =   204;	<K6C>
    // <I4D> =   205;	<K6D>
    // <I4E> =   206;	<K6E>
    // <I4F> =   207;	<K6F>
    // <I50> =   208;	<K70>
    // <I51> =   209;	<K71>
    // <I52> =   210;	<K72>
    // <I53> =   211;	<K73>
    <I54> =   212;
    <I55> =   213;
    <I56> =   214;
    <I57> =   215;
    <I58> =   216;
    <I59> =   217;
    <I5A> =   218;
    // <I5B> =   219;	<K74>
    // <I5C> =   220;	<K75>
    // <I5D> =   221;	<K76>
    <I5E> =   222;
    <I5F> =   223;
    <I60> =   224;
    <I61> =   225;
    <I62> =   226;
    <I63> =   227;
    <I64> =   228;
    <I65> =   229;
    <I66> =   230;
    <I67> =   231;
    <I68> =   232;
    <I69> =   233;
    <I6A> =   234;
    <I6B> =   235;
    <I6C> =   236;
    <I6D> =   237;
    <I6E> =   238;
    <I6F> =   239;
    <I70> =   240;
    <I71> =   241;
    <I72> =   242;
    <I73> =   243;
    <I74> =   244;
    <I75> =   245;
    <I76> =   246;
    <I77> =   247;
    <I78> =   248;
    <I79> =   249;
    <I7A> =   250;
    <I7B> =   251;
    <I7C> =   252;
    alias <IR7C> = <I7C>;
    <I7D> =   253;
    alias <IR7D> = <I7D>;
    <I7E> =   254;
    <I7F> =   255;

    // MacBooks generate 0x65 for the lower brightness key
    <II65> =  101;

    // Required for apple/logitech_g15 keyboard
    <II5D> = 93;

    // Codes generated for scancodes 0x59-0x5f, 0x62-0x76
    <K59> =   157;		// <I1D>
    <K5A> =   170;		// <I2A>
    <K5B> =   181;		// <I35>
    alias <K5C> = <KPEQ>;
    <K5D> =   182;		// <I36>
    <K5E> =   183;		// <I37>
    <K5F> =   184;		// <I38>
    <K62> =   189;		// <I3D>
    <K63> =   190;		// <I3E>
    <K64> =   191;		// <I3F>
    <K65> =   192;		// <I40>
    <K66> =   193;		// <I41>
    <K67> =   198;		// <I46>
    <K68> =   199;		// <I47>
    <K69> =   200;		// <I48>
    <K6A> =   201;		// <I49>
    <K6B> =   203;		// <I4B>
    <K6C> =   204;		// <I4C>
    <K6D> =   205;		// <I4D>
    <K6E> =   206;		// <I4E>
    <K6F> =   207;		// <I4F>
    alias <K70> = <HKTG>;	// <I50>
    alias <K71> = <KANA>;	// <I51>
    alias <K72> = <EISU>;	// <I52>
    alias <K73> = <AB11>;	// <I53>
    <K74> =   219;		// <I5B>
    <K75> =   220;		// <I5C>
    <K76> =   221;		// <I5D>
   
    // Solaris compatibility

    alias <LMTA> = <LWIN>;
    alias <RMTA> = <RWIN>;
    alias <COMP> = <MENU>;
    alias <POWR> = <I0C>;
    alias <MUTE> = <I0D>;
    alias <VOL-> = <I0E>;
    alias <VOL+> = <I0F>;
    alias <HELP> = <I10>;
    alias <STOP> = <I11>;
    alias <AGAI> = <I12>;
    alias <PROP> = <I13>;
    alias <UNDO> = <I14>;
    alias <FRNT> = <I15>;
    alias <COPY> = <I16>;
    alias <OPEN> = <I17>;
    alias <PAST> = <I18>;
    alias <FIND> = <I19>;
    alias <CUT>  = <I1A>;
    alias <OUTP> = <I56>;
    alias <KITG> = <I57>;
    alias <KIDN> = <I58>;
    alias <KIUP> = <I59>;

    // Other codes never generated.  The XFree86 ddx never generates
    // these codes.
    // Thus we can use them as fake keys
    <MDSW> =     8;
    <LVL3> =   124; // <U7C>
    <ALT>  =   125; // <U7D>
    <META> =   156; // <I1C>
    <SUPR> =   127; // <U7F>
    <HYPR> =   128; // <U80>

    indicator 1 = "Caps Lock";
    indicator 2 = "Num Lock";
    indicator 3 = "Scroll Lock";

    alias <ALGR> = <RALT>;

    // For Brazilian ABNT2
    alias <KPPT> = <I06>;
};

// What keyboard is this?

xkb_keycodes "102" {
    include "xfree86(xfree86)"

    // There will be warnings from xkbcomp because of multiple definitions.

    <RALT> = 122;
    <RCTL> = 123;

    <PRSC> = 121;
    <PAUS> = 118;

    <INS>  = 131;
    <HOME> = 135;
    <PGUP> = 119;
    <DELE> = 129;
    <END>  = 130;
    <PGDN> = 134;

    <UP>   = 128;
    <LEFT> = 132;
    <DOWN> = 120;
    <RGHT> = 133;

    <KPDV> = 125;

    <KPEN> = 124;
};


// IBM ThinkPad Z60m/Z60t/Z61m/Z61t
xkb_keycodes "thinkpadz60" {
    include "xfree86(xfree86)"
    <MENU> = 227;
};
default xkb_keycodes "empty" {
    minimum= 8;
    maximum= 255;
};
default xkb_keycodes "us" {

    minimum= 8;
    maximum= 255;

    <ESC>  =   9;
    <AE01> =  10;
    <AE02> =  11;
    <AE03> =  12;
    <AE04> =  13;
    <AE05> =  14;
    <AE06> =  15;
    <AE07> =  16;
    <AE08> =  17;
    <AE09> =  18;
    <AE10> =  19;
    <AE11> =  20;
    <AE12> =  21;
    <TLDE> =  49;
    <BKSP> =  22;

    <TAB>  =  23;
    <AD01> =  24;
    <AD02> =  25;
    <AD03> =  26;
    <AD04> =  27;
    <AD05> =  28;
    <AD06> =  29;
    <AD07> =  30;
    <AD08> =  31;
    <AD09> =  32;
    <AD10> =  33;
    <AD11> =  34;
    <AD12> =  35;
    <RTRN> =  36;
    <DELE> =  91;

    <LCTL> =  37;
    <AC01> =  38;
    <AC02> =  39;
    <AC03> =  40;
    <AC04> =  41;
    <AC05> =  42;
    <AC06> =  43;
    <AC07> =  44;
    <AC08> =  45;
    <AC09> =  46;
    <AC10> =  47;
    <AC11> =  48;
    <BKSL> =  51;

    <LFSH> =  50;
    <AB01> =  52;
    <AB02> =  53;
    <AB03> =  54;
    <AB04> =  55;
    <AB05> =  56;
    <AB06> =  57;
    <AB07> =  58;
    <AB08> =  59;
    <AB09> =  60;
    <AB10> =  61;
    <RTSH> =  62;

    <ALT>  =  64;
    <SPCE> =  65;
    <CAPS> =  66;

    <FK01> =  67;
    <FK02> =  68;
    <FK03> =  69;
    <FK04> =  70;
    <FK05> =  71;
    <FK06> =  72;
    <FK07> =  73;
    <FK08> =  74;
    <FK09> =  75;
    <FK10> =  76;

    <HELP> = 106;
    <UNDO> = 105;
    <INS>  =  90;
    <HOME> =  79;
    <UP>   =  80;
    <LEFT> =  83;
    <DOWN> =  88;
    <RGHT> =  85;

    <KPLP> = 107;
    <KPRP> = 108;
    <KPDV> = 109;
    <KPMU> = 110;

    <KP7>  = 111;
    <KP8>  = 112;
    <KP9>  = 113;
    <KPSU> =  82;

    <KP4>  = 114;
    <KP5>  = 115;
    <KP6>  = 116;
    <KPAD> =  86;

    <KP1>  = 117;
    <KP2>  = 118;
    <KP3>  = 119;

    <KP0>  = 120;
    <KPDC> = 121;
    <KPEN> = 122;
};

xkb_keycodes "de" {
    include "ataritt(us)"

    <LSGT> = 104;
};
default xkb_keycodes "usa1" {

    minimum= 8;
    maximum= 255;

    <ESC>  = 77;
    <FK01> = 88;
    <FK02> = 89;
    <FK03> = 90;
    <FK04> = 91;
    <FK05> = 92;
    <FK06> = 93;
    <FK07> = 94;
    <FK08> = 95;
    <FK09> = 96;
    <FK10> = 97;

    <TLDE> = 8;
    <AE01> = 9;
    <AE02> = 10;
    <AE03> = 11;
    <AE04> = 12;
    <AE05> = 13;
    <AE06> = 14;
    <AE07> = 15;
    <AE08> = 16;
    <AE09> = 17;
    <AE10> = 18;
    <AE11> = 19;
    <AE12> = 20;
    <BKSL> = 21;
    <BKSP> = 73;

    <TAB>  = 74;
    <AD01> = 24;
    <AD02> = 25;
    <AD03> = 26;
    <AD04> = 27;
    <AD05> = 28;
    <AD06> = 29;
    <AD07> = 30;
    <AD08> = 31;
    <AD09> = 32;
    <AD10> = 33;
    <AD11> = 34;
    <AD12> = 35;
    <RTRN> = 76;

    <LCTL> = 107;
    <CAPS> = 106;
    <AC01> = 40;
    <AC02> = 41;
    <AC03> = 42;
    <AC04> = 43;
    <AC05> = 44;
    <AC06> = 45;
    <AC07> = 46;
    <AC08> = 47;
    <AC09> = 48;
    <AC10> = 49;
    <AC11> = 50;

    <LFSH> = 104;
    <AB01> = 57;
    <AB02> = 58;
    <AB03> = 59;
    <AB04> = 60;
    <AB05> = 61;
    <AB06> = 62;
    <AB07> = 63;
    <AB08> = 64;
    <AB09> = 65;
    <AB10> = 66;
    <RTSH> = 105;

    <LALT> = 108;
    <LAMI> = 110;
    <SPCE> = 72;
    <RAMI> = 111;
    <RALT> = 109;

    <DELE> = 78;
    <HELP> = 103;
    <UP>   = 84;
    <LEFT> = 87;
    <DOWN> = 85;
    <RGHT> = 86;

    <KPLP> = 98;
    <KPRP> = 99;
    <KPDV> = 100;
    <KPMU> = 101;

    <KP7>  = 69;
    <KP8>  = 70;
    <KP9>  = 71;
    <KPSU> = 82;

    <KP4>  = 53;
    <KP5>  = 54;
    <KP6>  = 55;
    <KPAD> = 102;

    <KP1>  = 37;
    <KP2>  = 38;
    <KP3>  = 39;

    <KP0>  = 23;
    <KPDC> = 68;
    <KPEN> = 75;
};

xkb_keycodes "de" {

    minimum= 8;
    maximum= 255;

    <ESC>  = 77;
    <FK01> = 88;
    <FK02> = 89;
    <FK03> = 90;
    <FK04> = 91;
    <FK05> = 92;
    <FK06> = 93;
    <FK07> = 94;
    <FK08> = 95;
    <FK09> = 96;
    <FK10> = 97;

    <TLDE> = 8;
    <AE01> = 9;
    <AE02> = 10;
    <AE03> = 11;
    <AE04> = 12;
    <AE05> = 13;
    <AE06> = 14;
    <AE07> = 15;
    <AE08> = 16;
    <AE09> = 17;
    <AE10> = 18;
    <AE11> = 19;
    <AE12> = 20;
    <BKSL> = 21;
    <BKSP> = 73;

    <TAB>  = 74;
    <AD01> = 24;
    <AD02> = 25;
    <AD03> = 26;
    <AD04> = 27;
    <AD05> = 28;
    <AD06> = 29;
    <AD07> = 30;
    <AD08> = 31;
    <AD09> = 32;
    <AD10> = 33;
    <AD11> = 34;
    <AD12> = 35;
    <RTRN> = 76;

    <LCTL> = 107;
    <CAPS> = 106;
    <AC01> = 40;
    <AC02> = 41;
    <AC03> = 42;
    <AC04> = 43;
    <AC05> = 44;
    <AC06> = 45;
    <AC07> = 46;
    <AC08> = 47;
    <AC09> = 48;
    <AC10> = 49;
    <AC11> = 50;
    <AC12> = 51;

    <LFSH> = 104;
    <LSGT> = 56;
    <AB01> = 57;
    <AB02> = 58;
    <AB03> = 59;
    <AB04> = 60;
    <AB05> = 61;
    <AB06> = 62;
    <AB07> = 63;
    <AB08> = 64;
    <AB09> = 65;
    <AB10> = 66;
    <RTSH> = 105;

    <LALT> = 108;
    <LAMI> = 110;
    <SPCE> = 72;
    <RAMI> = 111;
    <RALT> = 109;

    <DELE> = 78;
    <HELP> = 103;
    <UP>   = 84;
    <LEFT> = 87;
    <DOWN> = 85;
    <RGHT> = 86;

    <KPLP> = 98;
    <KPRP> = 99;
    <KPDV> = 100;
    <KPMU> = 101;

    <KP7>  = 69;
    <KP8>  = 70;
    <KP9>  = 71;
    <KPSU> = 82;

    <KP4>  = 53;
    <KP5>  = 54;
    <KP6>  = 55;
    <KPAD> = 102;

    <KP1>  = 37;
    <KP2>  = 38;
    <KP3>  = 39;

    <KP0>  = 23;
    <KPDC> = 68;
    <KPEN> = 75;
};

// OLPC's mechanical keyboard moves several keys to the AA row.  make
// them easier to write symbol files naturally.

// see http://wiki.laptop.org/go/OLPC_English_Non-membrane_Keyboard
// and http://wiki.laptop.org/go/OLPC_Spanish_Non-membrane_Keyboard

default
xkb_keycodes "olpc" {

   alias <AE00> = <TLDE>;	// many OLPC keyboards don't put tilde there
   alias <AC12> = <BKSL>;	// on model olpc, physical position of BKSL

};

default
xkb_keycodes "olpcm" {

   alias <AE00> = <TLDE>;	// many OLPC keyboards don't put tilde there
   alias <AA02> = <BKSL>;	// on model olpcm, new physical position of BKSL
   alias <AA06> = <AE12>;	// on model olpcm, new physical position of =+
   alias <AA07> = <AC11>;	// on model olpcm, new physical position of '"

};

// keycode aliases for phonetic keyboard maps

default
xkb_keycodes "qwerty" {

   alias <LatQ> = <AD01>;
   alias <LatW> = <AD02>;
   alias <LatE> = <AD03>;
   alias <LatR> = <AD04>;
   alias <LatT> = <AD05>;
   alias <LatY> = <AD06>;
   alias <LatU> = <AD07>;
   alias <LatI> = <AD08>;
   alias <LatO> = <AD09>;
   alias <LatP> = <AD10>;

   alias <LatA> = <AC01>;
   alias <LatS> = <AC02>;
   alias <LatD> = <AC03>;
   alias <LatF> = <AC04>;
   alias <LatG> = <AC05>;
   alias <LatH> = <AC06>;
   alias <LatJ> = <AC07>;
   alias <LatK> = <AC08>;
   alias <LatL> = <AC09>;

   alias <LatZ> = <AB01>;
   alias <LatX> = <AB02>;
   alias <LatC> = <AB03>;
   alias <LatV> = <AB04>;
   alias <LatB> = <AB05>;
   alias <LatN> = <AB06>;
   alias <LatM> = <AB07>;
};

xkb_keycodes "azerty" {

   alias <LatA> = <AD01>;
   alias <LatZ> = <AD02>;
   alias <LatE> = <AD03>;
   alias <LatR> = <AD04>;
   alias <LatT> = <AD05>;
   alias <LatY> = <AD06>;
   alias <LatU> = <AD07>;
   alias <LatI> = <AD08>;
   alias <LatO> = <AD09>;
   alias <LatP> = <AD10>;

   alias <LatQ> = <AC01>;
   alias <LatS> = <AC02>;
   alias <LatD> = <AC03>;
   alias <LatF> = <AC04>;
   alias <LatG> = <AC05>;
   alias <LatH> = <AC06>;
   alias <LatJ> = <AC07>;
   alias <LatK> = <AC08>;
   alias <LatL> = <AC09>;
   alias <LatM> = <AC10>;

   alias <LatW> = <AB01>;
   alias <LatX> = <AB02>;
   alias <LatC> = <AB03>;
   alias <LatV> = <AB04>;
   alias <LatB> = <AB05>;
   alias <LatN> = <AB06>;
};

xkb_keycodes "qwertz" {

   alias <LatQ> = <AD01>;
   alias <LatW> = <AD02>;
   alias <LatE> = <AD03>;
   alias <LatR> = <AD04>;
   alias <LatT> = <AD05>;
   alias <LatZ> = <AD06>;
   alias <LatU> = <AD07>;
   alias <LatI> = <AD08>;
   alias <LatO> = <AD09>;
   alias <LatP> = <AD10>;

   alias <LatA> = <AC01>;
   alias <LatS> = <AC02>;
   alias <LatD> = <AC03>;
   alias <LatF> = <AC04>;
   alias <LatG> = <AC05>;
   alias <LatH> = <AC06>;
   alias <LatJ> = <AC07>;
   alias <LatK> = <AC08>;
   alias <LatL> = <AC09>;

   alias <LatY> = <AB01>;
   alias <LatX> = <AB02>;
   alias <LatC> = <AB03>;
   alias <LatV> = <AB04>;
   alias <LatB> = <AB05>;
   alias <LatN> = <AB06>;
   alias <LatM> = <AB07>;
};
The keycodes component of a keyboard mapping specifies the range and
interpretation of the raw keycodes reported by the device. It sets the keycodes
symbolic name, the minimum and maximum legal codes for the keyboard, and the
symbolic name for each key. The keycodes component might also contain aliases
for some keys, symbolic names for some indicators and a description of which
indicators are physically present.
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
//
default xkb_keycodes "pc98" {

    minimum= 8;
    maximum= 255;

    <ESC>  =   8;
    <AE01> =   9;
    <AE02> =  10;
    <AE03> =  11;
    <AE04> =  12;
    <AE05> =  13;
    <AE06> =  14;
    <AE07> =  15;
    <AE08> =  16;
    <AE09> =  17;
    <AE10> =  18;
    <AE11> =  19;
    <AE12> =  20;
    <BKSL> =  21;
    <BKSP> =  22;

    <TAB>  =  23;
    <AD01> =  24;
    <AD02> =  25;
    <AD03> =  26;
    <AD04> =  27;
    <AD05> =  28;
    <AD06> =  29;
    <AD07> =  30;
    <AD08> =  31;
    <AD09> =  32;
    <AD10> =  33;
    <AD11> =  34;
    <AD12> =  35;
    <RTRN> =  36;

    <LCTL> =  124;
    <CAPS> =  121;
    <AC01> =  37;
    <AC02> =  38;
    <AC03> =  39;
    <AC04> =  40;
    <AC05> =  41;
    <AC06> =  42;
    <AC07> =  43;
    <AC08> =  44;
    <AC09> =  45;
    <AC10> =  46;
    <AC11> =  47;
    <AC12> =  48;

    <LFSH> = 120;
    <AB01> =  49;
    <AB02> =  50;
    <AB03> =  51;
    <AB04> =  52;
    <AB05> =  53;
    <AB06> =  54;
    <AB07> =  55;
    <AB08> =  56;
    <AB09> =  57;
    <AB10> =  58;
    <AB11> =  59;

    <ALGR> = 122;
    <LALT> = 123;
    <NFER> =  89;
    <SPCE> =  60;
    <XFER> =  61;

    <BRK>  = 104;
    <PRSC> = 105;
    <FK01> = 106;
    <FK02> = 107;
    <FK03> = 108;
    <FK04> = 109;
    <FK05> = 110;
    <FK06> = 111;
    <FK07> = 112;
    <FK08> = 113;
    <FK09> = 114;
    <FK10> = 115;
    <FK11> =  90;
    <FK12> =  91;
    <FK13> =  92;
    <FK14> =  93;
    <FK15> =  94;


    <INS>  =  64;
    <DELE> =  65;
    <PGUP> =  63;
    <PGDN> =  62;
    <UP>   =  66;
    <LEFT> =  67;
    <RGHT> =  68;
    <DOWN> =  69;

    <HOME> =  70;
    <HELP> =  71;

    <KPSU> =  72;
    <KPDV> =  73;

    <KP7>  =  74;
    <KP8>  =  75;
    <KP9>  =  76;
    <KPMU> =  77;

    <KP4>  =  78;
    <KP5>  =  79;
    <KP6>  =  80;
    <KPAD> =  81;

    <KP1>  =  82;
    <KP2>  =  83;
    <KP3>  =  84;
    <KPEQ> =  85;

    <KP0>  =  86;
    <KPSP> =  87;
    <KPDC> =  88;

    indicator 1 = "Caps Lock";
    indicator 2 = "Kana";
};
// translation from evdev scancodes to something resembling xfree86 keycodes.

default xkb_keycodes "evdev" {
	minimum = 8;
	maximum = 255;

        # Added for pc105 compatibility
        <LSGT> = 94;

	<TLDE> = 49;
	<AE01> = 10;
	<AE02> = 11;
	<AE03> = 12;
	<AE04> = 13;
	<AE05> = 14;
	<AE06> = 15;
	<AE07> = 16;
	<AE08> = 17;
	<AE09> = 18;
	<AE10> = 19;
	<AE11> = 20;
	<AE12> = 21;
	<BKSP> = 22;

	<TAB> = 23;
	<AD01> = 24;
	<AD02> = 25;
	<AD03> = 26;
	<AD04> = 27;
	<AD05> = 28;
	<AD06> = 29;
	<AD07> = 30;
	<AD08> = 31;
	<AD09> = 32;
	<AD10> = 33;
	<AD11> = 34;
	<AD12> = 35;
	<BKSL> = 51;
	alias <AC12> = <BKSL>;
	<RTRN> = 36;

	<CAPS> = 66;
	<AC01> = 38;
	<AC02> = 39;
	<AC03> = 40;
	<AC04> = 41;
	<AC05> = 42;
	<AC06> = 43;
	<AC07> = 44;
	<AC08> = 45;
	<AC09> = 46;
	<AC10> = 47;
	<AC11> = 48;

	<LFSH> = 50;
	<AB01> = 52;
	<AB02> = 53;
	<AB03> = 54;
	<AB04> = 55;
	<AB05> = 56;
	<AB06> = 57;
	<AB07> = 58;
	<AB08> = 59;
	<AB09> = 60;
	<AB10> = 61;
	<RTSH> = 62;

	<LALT> = 64;
	<LCTL> = 37;
	<SPCE> = 65;
	<RCTL> = 105;
	<RALT> = 108;
	// Microsoft keyboard extra keys
	<LWIN> = 133;
	<RWIN> = 134;
	<COMP> = 135;
	alias <MENU> = <COMP>;

	<ESC> = 9;
	<FK01> = 67;
	<FK02> = 68;
	<FK03> = 69;
	<FK04> = 70;
	<FK05> = 71;
	<FK06> = 72;
	<FK07> = 73;
	<FK08> = 74;
	<FK09> = 75;
	<FK10> = 76;
	<FK11> = 95;
	<FK12> = 96;

	<PRSC> = 107;
	// <SYRQ> = 107;
	<SCLK> = 78;
	<PAUS> = 127;
	// <BRK> = 419;

	<INS> = 118;
	<HOME> = 110;
	<PGUP> = 112;
	<DELE> = 119;
	<END> = 115;
	<PGDN> = 117;

	<UP> = 111;
	<LEFT> = 113;
	<DOWN> = 116;
	<RGHT> = 114;

	<NMLK> = 77;
	<KPDV> = 106;
	<KPMU> = 63;
	<KPSU> = 82;

	<KP7> = 79;
	<KP8> = 80;
	<KP9> = 81;
	<KPAD> = 86;

	<KP4> = 83;
	<KP5> = 84;
	<KP6> = 85;

	<KP1> = 87;
	<KP2> = 88;
	<KP3> = 89;
	<KPEN> = 104;

	<KP0> = 90;
	<KPDL> = 91;
	<KPEQ> = 125;

	<FK13> = 191;
	<FK14> = 192;
	<FK15> = 193;
	<FK16> = 194;
	<FK17> = 195;
	<FK18> = 196;
	<FK19> = 197;
	<FK20> = 198;
	<FK21> = 199;
	<FK22> = 200;
	<FK23> = 201;
	<FK24> = 202;

	// Keys that are generated on Japanese keyboards

	//<HZTG> =  93;	// Hankaku/Zenkakau toggle - not actually used
	alias <HZTG> = <TLDE>;
	<HKTG> = 101;	// Hiragana/Katakana toggle
	<AB11> = 97;	// backslash/underscore
	<HENK> = 100;	// Henkan
	<MUHE> = 102;	// Muhenkan
	<AE13> = 132;	// Yen
	<KATA> =  98;	// Katakana
	<HIRA> =  99;	// Hiragana
	<JPCM> = 103;	// KPJPComma
	//<RO>   =  97;	// Romaji

	// Keys that are generated on Korean keyboards

	<HNGL> = 130;	// Hangul Latin toggle
	<HJCV> = 131;	// Hangul to Hanja conversion

	// Solaris compatibility

	alias <LMTA> = <LWIN>;
	alias <RMTA> = <RWIN>;
	<MUTE> = 121;
	<VOL-> = 122;
	<VOL+> = 123;
	<POWR> = 124;
	<STOP> = 136;
	<AGAI> = 137;
	<PROP> = 138;
	<UNDO> = 139;
	<FRNT> = 140;
	<COPY> = 141;
	<OPEN> = 142;
	<PAST> = 143;
	<FIND> = 144;
	<CUT>  = 145;
	<HELP> = 146;

	// Extended keys that may be generated on "Internet" keyboards.
	// evdev has standardize names for these.

	<LNFD> = 109;	// #define KEY_LINEFEED            101
	<I120> = 120;	// #define KEY_MACRO               112
	<I126> = 126;	// #define KEY_KPPLUSMINUS         118
	<I128> = 128;   // #define KEY_SCALE               120
	<I129> = 129;	// #define KEY_KPCOMMA             121
	<I147> = 147;	// #define KEY_MENU                139
	<I148> = 148;	// #define KEY_CALC                140
	<I149> = 149;	// #define KEY_SETUP               141
	<I150> = 150;	// #define KEY_SLEEP               142
	<I151> = 151;	// #define KEY_WAKEUP              143
	<I152> = 152;	// #define KEY_FILE                144
	<I153> = 153;	// #define KEY_SENDFILE            145
	<I154> = 154;	// #define KEY_DELETEFILE          146
	<I155> = 155;	// #define KEY_XFER                147
	<I156> = 156;	// #define KEY_PROG1               148
	<I157> = 157;	// #define KEY_PROG2               149
	<I158> = 158;	// #define KEY_WWW                 150
	<I159> = 159;	// #define KEY_MSDOS               151
	<I160> = 160;	// #define KEY_COFFEE              152
	<I161> = 161;	// #define KEY_DIRECTION           153
	<I162> = 162;	// #define KEY_CYCLEWINDOWS        154
	<I163> = 163;	// #define KEY_MAIL                155
	<I164> = 164;	// #define KEY_BOOKMARKS           156
	<I165> = 165;	// #define KEY_COMPUTER            157
	<I166> = 166;	// #define KEY_BACK                158
	<I167> = 167;	// #define KEY_FORWARD             159
	<I168> = 168;	// #define KEY_CLOSECD             160
	<I169> = 169;	// #define KEY_EJECTCD             161
	<I170> = 170;	// #define KEY_EJECTCLOSECD        162
	<I171> = 171;	// #define KEY_NEXTSONG            163
	<I172> = 172;	// #define KEY_PLAYPAUSE           164
	<I173> = 173;	// #define KEY_PREVIOUSSONG        165
	<I174> = 174;	// #define KEY_STOPCD              166
	<I175> = 175;	// #define KEY_RECORD              167
	<I176> = 176;	// #define KEY_REWIND              168
	<I177> = 177;	// #define KEY_PHONE               169
	<I178> = 178;	// #define KEY_ISO                 170
	<I179> = 179;	// #define KEY_CONFIG              171
	<I180> = 180;	// #define KEY_HOMEPAGE            172
	<I181> = 181;	// #define KEY_REFRESH             173
	<I182> = 182;	// #define KEY_EXIT                174
	<I183> = 183;	// #define KEY_MOVE                175
	<I184> = 184;	// #define KEY_EDIT                176
	<I185> = 185;	// #define KEY_SCROLLUP            177
	<I186> = 186;	// #define KEY_SCROLLDOWN          178
	<I187> = 187;	// #define KEY_KPLEFTPAREN         179
	<I188> = 188;	// #define KEY_KPRIGHTPAREN        180
	<I189> = 189;	// #define KEY_NEW                 181
	<I190> = 190;	// #define KEY_REDO                182
	<I208> = 208;	// #define KEY_PLAYCD              200
	<I209> = 209;	// #define KEY_PAUSECD             201
	<I210> = 210;	// #define KEY_PROG3               202
	<I211> = 211;	// #define KEY_PROG4               203 conflicts with AB11
	<I212> = 212;   // #define KEY_DASHBOARD           204
	<I213> = 213;	// #define KEY_SUSPEND             205
	<I214> = 214;	// #define KEY_CLOSE               206
	<I215> = 215;	// #define KEY_PLAY                207
	<I216> = 216;	// #define KEY_FASTFORWARD         208
	<I217> = 217;	// #define KEY_BASSBOOST           209
	<I218> = 218;	// #define KEY_PRINT               210
	<I219> = 219;	// #define KEY_HP                  211
	<I220> = 220;	// #define KEY_CAMERA              212
	<I221> = 221;	// #define KEY_SOUND               213
	<I222> = 222;	// #define KEY_QUESTION            214
	<I223> = 223;	// #define KEY_EMAIL               215
	<I224> = 224;	// #define KEY_CHAT                216
	<I225> = 225;	// #define KEY_SEARCH              217
	<I226> = 226;	// #define KEY_CONNECT             218
	<I227> = 227;	// #define KEY_FINANCE             219
	<I228> = 228;	// #define KEY_SPORT               220
	<I229> = 229;	// #define KEY_SHOP                221
	<I230> = 230;	// #define KEY_ALTERASE            222
	<I231> = 231;	// #define KEY_CANCEL              223
	<I232> = 232;	// #define KEY_BRIGHTNESSDOWN      224
	<I233> = 233;	// #define KEY_BRIGHTNESSUP        225
	<I234> = 234;	// #define KEY_MEDIA               226
	<I235> = 235;	// #define KEY_SWITCHVIDEOMODE     227
	<I236> = 236;	// #define KEY_KBDILLUMTOGGLE      228
	<I237> = 237;	// #define KEY_KBDILLUMDOWN        229
	<I238> = 238;	// #define KEY_KBDILLUMUP          230
	<I239> = 239;	// #define KEY_SEND                231
	<I240> = 240;	// #define KEY_REPLY               232
	<I241> = 241;	// #define KEY_FORWARDMAIL         233
	<I242> = 242;	// #define KEY_SAVE                234
	<I243> = 243;	// #define KEY_DOCUMENTS           235
	<I244> = 244;	// #define KEY_BATTERY             236
	<I245> = 245;	// #define KEY_BLUETOOTH           237
	<I246> = 246;	// #define KEY_WLAN                238
	<I247> = 247;	// #define KEY_UWB                 239
	<I248> = 248;	// #define KEY_UNKNOWN             240
	<I249> = 249;	// #define KEY_VIDEO_NEXT          241
	<I250> = 250;	// #define KEY_VIDEO_PREV          242
	<I251> = 251;	// #define KEY_BRIGHTNESS_CYCLE    243
	<I252> = 252;	// #define KEY_BRIGHTNESS_ZERO     244
	<I253> = 253;	// #define KEY_DISPLAY_OFF         245
	<I254> = 254;	// #define KEY_WWAN                246
	<I255> = 255;	// #define KEY_RFKILL              247

	<I372> = 372;   // #define KEY_FAVORITES           364
	<I380> = 380;   // #define KEY_FULL_SCREEN         372
	<I382> = 382;   // #define KEY_KEYBOARD            374
	<I442> = 442;   // #define KEY_DOLLAR              434
	<I443> = 443;   // #define KEY_EURO                435
	<I569> = 569;   // #define KEY_ROTATE_LOCK_TOGGLE  561

	// Fake keycodes for virtual keys
	<LVL3> =   92;
	<MDSW> =   203;
	<ALT>  =   204;
	<META> =   205;
	<SUPR> =   206;
	<HYPR> =   207;

	indicator 1  = "Caps Lock";
	indicator 2  = "Num Lock";
	indicator 3  = "Scroll Lock";
	indicator 4  = "Compose";
	indicator 5  = "Kana";
	indicator 6  = "Sleep";
	indicator 7  = "Suspend";
	indicator 8  = "Mute";
	indicator 9  = "Misc";
	indicator 10 = "Mail";
	indicator 11 = "Charging";

	alias <ALGR> = <RALT>;

	// For Brazilian ABNT2
	alias <KPPT> = <I129>;
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
xkb_keycodes "nwp5461" {

     <ESC> = 18;
    <AE01> = 19;
    <AE02> = 20;
    <AE03> = 21;
    <AE04> = 22;
    <AE05> = 23;
    <AE06> = 24;
    <AE07> = 25;
    <AE08> = 26;
    <AE09> = 27;
    <AE10> = 28;
    <AE11> = 29;
    <AE12> = 30;
    <BKSL> = 31;
    <BKSP> = 32;

    <TAB>  = 33;
    <AD01> = 34;
    <AD02> = 35;
    <AD03> = 36;
    <AD04> = 37;
    <AD05> = 38;
    <AD06> = 39;
    <AD07> = 40;
    <AD08> = 41;
    <AD09> = 42;
    <AD10> = 43;
    <AD11> = 44;
    <AD12> = 45;
    <DELE> = 46;

    <LCTL> = 47;
    <AC01> = 48;
    <AC02> = 49;
    <AC03> = 50;
    <AC04> = 51;
    <AC05> = 52;
    <AC06> = 53;
    <AC07> = 54;
    <AC08> = 55;
    <AC09> = 56;
    <AC10> = 57;
    <AC11> = 58;
    <TLDE> = 59;
    <RTRN> = 60;

    <LFSH> = 61;
    <AB01> = 62;
    <AB02> = 63;
    <AB03> = 64;
    <AB04> = 65;
    <AB05> = 66;
    <AB06> = 67;
    <AB07> = 68;
    <AB08> = 69;
    <AB09> = 70;
    <AB10> = 71;
    <AB11> = 72;
    <RTSH> = 73;

    <LALT> = 74;
    <CAPS> = 75;
    <STOP> = 76;
    <SPCE> = 77;
     <CUT> = 78;
    <EXEC> = 81;

    <FK01> = 8;
    <FK02> = 9;
    <FK03> = 10;
    <FK04> = 11;
    <FK05> = 12;
    <FK06> = 13;
    <FK07> = 14;
    <FK08> = 15;
    <FK09> = 16;
    <FK10> = 17;
    <FK11> = 111;
    <FK12> = 112;

    <HELP> = 113;
     <INS> = 114;
     <CLR> = 115;
    <PGUP> = 116;
    <PGDN> = 117;

    <KPTB> = 109;
      <UP> = 95;
    <LEFT> = 98;
    <DOWN> = 99;
    <RGHT> = 100;

    <KPMU> = 107;
    <KPDV> = 108;
    <KPAD> = 89;

     <KP7> = 82;
     <KP8> = 83;
     <KP9> = 84;
    <KPSU> = 85;

     <KP4> = 86;
     <KP5> = 87;
     <KP6> = 88;
    <KPSP> = 93;

     <KP1> = 90;
     <KP2> = 91;
     <KP3> = 92;
    <KPEN> = 97;

     <KP0> = 94;
    <KPDC> = 96;
};
default xkb_keycodes "universal" {
    minimum= 8;
    maximum= 255;
    include "sgi_vndr/indy(pc105)"
    alternate <BKSL> = 91;
    alternate <BKSL> = 100;
    alternate <BKSL> = 101;
};
xkb_keycodes "pc101" {
    minimum= 8;
    maximum= 255;

    <TLDE> = 22;
    <AE01> = 30;
    <AE02> = 38;
    <AE03> = 46;
    <AE04> = 45;
    <AE05> = 54;
    <AE06> = 62;
    <AE07> = 69;
    <AE08> = 70;
    <AE09> = 78;
    <AE10> = 77;
    <AE11> = 86;
    <AE12> = 93;
    <BKSP> = 110;

    <TAB>  = 21;
    <AD01> = 29;
    <AD02> = 37;
    <AD03> = 44;
    <AD04> = 53;
    <AD05> = 52;
    <AD06> = 61;
    <AD07> = 68;
    <AD08> = 75;
    <AD09> = 76;
    <AD10> = 85;
    <AD11> = 92;
    <AD12> = 99;
    <RTRN> = 98;

    <CAPS> = 28;
    <AC01> = 36;
    <AC02> = 35;
    <AC03> = 43;
    <AC04> = 51;
    <AC05> = 60;
    <AC06> = 59;
    <AC07> = 67;
    <AC08> = 74;
    <AC09> = 83;
    <AC10> = 84;
    <AC11> = 90;

    <LFSH> = 26;
    <AB01> = 34;
    <AB02> = 42;
    <AB03> = 41;
    <AB04> = 50;
    <AB05> = 58;
    <AB06> = 57;
    <AB07> = 66;
    <AB08> = 73;
    <AB09> = 81;
    <AB10> = 82;
    <RTSH> = 97;
    <BKSL> = 100;

    <LALT> = 33;
    <LCTL> = 25;
    <SPCE> = 49;
    <RCTL> = 96;
    <RALT> = 65;

    <ESC>  = 16;
    <FK01> = 15;
    <FK02> = 23;
    <FK03> = 31;
    <FK04> = 39;
    <FK05> = 47;
    <FK06> = 55;
    <FK07> = 63;
    <FK08> = 71;
    <FK09> = 79;
    <FK10> = 87;
    <FK11> = 94;
    <FK12> = 102;

    <PRSC> = 95;
    <SCLK> = 103;
    <PAUS> = 106;

    <INS>  = 111;
    <HOME> = 118;
    <PGUP> = 119;
    <DELE> = 108;
    <END>  = 109;
    <PGDN> = 117;

    <UP>   = 107;
    <LEFT> = 105;
    <DOWN> = 104;
    <RGHT> = 114;

    <NMLK> = 126;
    <KPDV> = 127;
    <KPMU> = 134;
    <KPSU> = 140;

    <KP7>  = 116;
    <KP8>  = 125;
    <KP9>  = 133;
    <KPAD> = 132;

    <KP4>  = 115;
    <KP5>  = 123;
    <KP6>  = 124;

    <KP1>  = 113;
    <KP2>  = 122;
    <KP3>  = 130;
    <KPEN> = 129;

    <KP0>  = 120;
    <KPDL> = 121;

    alias <AE00> = <TLDE>;
    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
    alias <AA01> = <LALT>;
    alias <AA09> = <RALT>;
    alias <ALGR> = <RALT>;
    alias <AA12> = <RCTL>;

    virtual indicator 1 = "L1";
    virtual indicator 2 = "L2";
    virtual indicator 3 = "L3";
    virtual indicator 4 = "L4";
    indicator 5 = "Caps Lock";
    indicator 6 = "Num Lock";
    indicator 7 = "Scroll Lock";

};
xkb_keycodes "pc102" {
    <BKSL> = 91;
    <LSGT> = 27;
    augment "sgi_vndr/indy(pc101)"
    maximum= 255;
    minimum= 8;
};
xkb_keycodes "pc104" {
    include "sgi_vndr/indy(pc101)"
    minimum= 8;
    maximum= 255;

    // These key names are here to support so-called "Windows95"
    // keyboards like the Microsoft Natural keyboard.
    <LWIN> = 147;
    <RWIN> = 148;
    <MENU> = 149;
};
xkb_keycodes "pc105" {
    <LSGT> = 27;
    augment "sgi_vndr/indy(pc104)"
    minimum= 8;
    maximum= 255;
};
xkb_keycodes "jp106" {
    <HZTG> = 22;
    <AB11> = 89;
    <AC12> = 91;
    <NFER> = 141;
    <XFER> = 142;
    <HKTG> = 143;
    alias <TLDE> = <HZTG>;
    alias <AE00> = <HZTG>;
    alias <AE13> = <BKSL>;
    augment "sgi_vndr/indy(pc101)"
    minimum= 8;
    maximum= 255;
};
// can be combined with any other "indy" keycode
// description to add virtual keys which can be
// used to implement an overlay-based numeric
// keypad.
partial hidden xkb_keycodes "overlayKeypad" {
    <KO7> = 17;
    <KO8> = 18;
    <KO9> = 19;
    <KO6> = 146;
    <KO5> = 145;
    <KO4> = 144;
    <KO1> = 136;
    <KO2> = 137;
    <KO3> = 138;
    <KO0> = 135;
    <KODL> = 139;
};
partial hidden xkb_keycodes "shiftLock" {
    indicator 5 = "Shift Lock";
};
default xkb_keycodes "pc101" {
    minimum= 8;
    maximum= 255;

    <TLDE> = 62;
    <AE01> = 15;
    <AE02> = 21;
    <AE03> = 22;
    <AE04> = 29;
    <AE05> = 30;
    <AE06> = 37;
    <AE07> = 38;
    <AE08> = 45;
    <AE09> = 46;
    <AE10> = 53;
    <AE11> = 54;
    <AE12> = 61;
    <BKSP> = 68;

    <TAB>  = 16;
    <AD01> = 17;
    <AD02> = 23;
    <AD03> = 24;
    <AD04> = 31;
    <AD05> = 32;
    <AD06> = 39;
    <AD07> = 40;
    <AD08> = 47;
    <AD09> = 48;
    <AD10> = 55;
    <AD11> = 56;
    <AD12> = 63;
    <RTRN> = 58;

    <CAPS> = 11;
    <AC01> = 18;
    <AC02> = 19;
    <AC03> = 25;
    <AC04> = 26;
    <AC05> = 33;
    <AC06> = 34;
    <AC07> = 41;
    <AC08> = 42;
    <AC09> = 49;
    <AC10> = 50;
    <AC11> = 57;

    <LFSH> = 13;
    <AB01> = 27;
    <AB02> = 28;
    <AB03> = 35;
    <AB04> = 36;
    <AB05> = 43;
    <AB06> = 44;
    <AB07> = 51;
    <AB08> = 52;
    <AB09> = 59;
    <AB10> = 60;
    <RTSH> = 12;
    <BKSL> = 64;

    <LALT> = 91;
    <LCTL> = 10;
    <SPCE> = 90;
    <RCTL> = 93;
    <RALT> = 92;

    <ESC>  = 14;
    <FK01> = 94;
    <FK02> = 95;
    <FK03> = 96;
    <FK04> = 97;
    <FK05> = 98;
    <FK06> = 99;
    <FK07> = 100;
    <FK08> = 101;
    <FK09> = 102;
    <FK10> = 103;
    <FK11> = 104;
    <FK12> = 105;

    <PRSC> = 106;
    <SCLK> = 107;
    <PAUS> = 108;

    <INS>  = 109;
    <HOME> = 110;
    <PGUP> = 111;
    <DELE> = 69;
    <END>  = 112;
    <PGDN> = 113;

    <UP>   = 88;
    <LEFT> = 80;
    <DOWN> = 81;
    <RGHT> = 87;

    <NMLK> = 114;
    <KPDV> = 115;
    <KPMU> = 116;
    <KPSU> = 83;

    <KP7>  = 74;
    <KP8>  = 75;
    <KP9>  = 82;
    <KPAD> = 117;

    <KP4>  = 70;
    <KP5>  = 76;
    <KP6>  = 77;

    <KP1>  = 65;
    <KP2>  = 71;
    <KP3>  = 72;
    <KPEN> = 89;

    <KP0>  = 66;
    <KPDL> = 73;

    alias <AE00> = <TLDE>;
    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
    alias <AA01> = <LALT>;
    alias <AA09> = <RALT>;
    alias <ALGR> = <RALT>;
    alias <AA12> = <RCTL>;

    virtual indicator 1 = "L1";
    virtual indicator 2 = "L2";
    virtual indicator 3 = "L3";
    virtual indicator 4 = "L4";
    indicator 5 = "Caps Lock";
    indicator 6 = "Num Lock";
    indicator 7 = "Scroll Lock";
};
xkb_keycodes "pc102" {
    include "sgi_vndr/indigo(pc101)"
    <LSGT> = 118;
};
default xkb_keycodes "iris" {
    include "sgi_vndr/indigo(pc101)"
    indicator 1 = "L1";
    indicator 2 = "L2";
    indicator 3 = "L3";
    indicator 4 = "L4";
    indicator 5 = "Caps Lock";
    indicator 6 = "Num Lock";
    indicator 7 = "Scroll Lock";
};
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log
// Revision 1.2  1996/06/18  09:13:22  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.6.2  1995/08/07  17:40:34  William_Walker
// 	Upgrade XKB to protocol 0.62 (dual submit from decx11)
// 	[1995/08/06  14:06:25  William_Walker]
//
// Revision 1.1.2.4  1995/08/05  15:25:55  William_Walker
// 	Upgrade to XKB protocol 0.62
// 	[1995/08/05  14:39:58  William_Walker]
// 
// Revision 1.1.2.3  1995/06/27  12:17:31  William_Walker
// 	     Rename <TLDE> to ISO9995 compliant <AE00>.
// 	[1995/06/26  20:24:04  William_Walker]
// 
// Revision 1.1.2.2  1995/06/05  19:21:28  William_Walker
// 	New file.  I love keymaps.
// 	[1995/06/05  18:07:29  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: lk  Revision: /main/3  (DEC) Date: 1996/01/24 12:13:31 
// 
xkb_keycodes "lk_common" {
    // "Function" keys
    <FK01>	= 86;
    <FK02>	= 87;
    <FK03>	= 88;
    <FK04>	= 89;
    <FK05>	= 90;
    <FK06>	= 100;
    <FK07>	= 101;
    <FK08>	= 102;
    <FK09>	= 103;
    <FK10>	= 104;
    <FK11>	= 113;
    <FK12>	= 114;

    <UP>	= 170;
    <LEFT>	= 167;
    <DOWN>	= 169;
    <RGHT>	= 168;

    // "Keypad" keys
    <KP7>	= 157;
    <KP8>	= 158;
    <KP9>	= 159;
    <KP4>	= 153;
    <KP5>	= 154;
    <KP6>	= 155;
    <KP1>	= 150;
    <KP2>	= 151;
    <KP3>	= 152;
    <KPEN>	= 149;
    <KP0>	= 146;
    <KPDL>	= 148;

    // "Alphanumeric" keys
    <AE00>	= 191;
    <AE01>	= 192;
    <AE02>	= 197;
    <AE03>	= 203;
    <AE04>	= 208;
    <AE05>	= 214;
    <AE06>	= 219;
    <AE07>	= 224;
    <AE08>	= 229;
    <AE09>	= 234;
    <AE10>	= 239;
    <AE11>	= 249;
    <AE12>	= 245;
    <BKSP>	= 188;

    <TAB>	= 190;
    <AD01>	= 193;
    <AD02>	= 198;
    <AD03>	= 204;
    <AD04>	= 209;
    <AD05>	= 215;
    <AD06>	= 220;
    <AD07>	= 225;
    <AD08>	= 230;
    <AD09>	= 235;
    <AD10>	= 240;
    <AD11>	= 250;
    <AD12>	= 246;
    <RTRN>	= 189;

    <LCTL>	= 175;
    <CAPS>	= 176;
    <AC01>	= 194;
    <AC02>	= 199;
    <AC03>	= 205;
    <AC04>	= 210;
    <AC05>	= 216;
    <AC06>	= 221;
    <AC07>	= 226;
    <AC08>	= 231;
    <AC09>	= 236;
    <AC10>	= 242;
    <AC11>	= 251;

    <LFSH>	= 174;
    <AB01>	= 195;
    <AB02>	= 200;
    <AB03>	= 206;
    <AB04>	= 211;
    <AB05>	= 217;
    <AB06>	= 222;
    <AB07>	= 227;
    <AB08>	= 232;
    <AB09>	= 237;
    <AB10>	= 243;
    <RTSH>	= 171;

    <SPCE>	= 212;

    <LDM>	= 255; // Support R5 Lock Down Modifiers

    alias <TLDE> = <AE00>;
};

xkb_keycodes "lkx01" {
    include "digital_vndr/lk(lk_common)"
    <AB00>	= 201;
    <FK13>	= 115;
    <FK14>	= 116;
    <FK17>	= 128;
    <FK18>	= 129;
    <FK19>	= 130;
    <FK20>	= 131;
    <HELP>	= 124;
    <DO>	= 125;
    <FIND>	= 138;
    <INS>	= 139;
    <DELE>	= 140;
    <SELE>	= 141;
    <PGUP>	= 142;
    <PGDN>	= 143;
    <KPF1>	= 161;
    <KPF2>	= 162;
    <KPF3>	= 163;
    <KPF4>	= 164;
    <KPSU>	= 160;
    <KPCO>	= 156;
    <BKSL>	= 247;
    <LCMP>	= 177;
};

xkb_keycodes "lk201" {
    include "digital_vndr/lk(lkx01)"
    indicator 4 = "Scroll Lock";
    indicator 3 = "Caps Lock";
    indicator 2 = "Compose";
    indicator 1 = "Wait";
};

xkb_keycodes "lk421" {
    include	"digital_vndr/lk(lkx01)"
    <LALT>	= 172;
    <RALT>	= 178;
    <RCMP>	= 173;
};

xkb_keycodes "lk401" {
    include	"digital_vndr/lk(lk421)"
    indicator 4 = "Scroll Lock";
    indicator 3 = "Caps Lock";
};

xkb_keycodes "lk44x" {
    include "digital_vndr/lk(lk_common)"
    <ESC>	= 85;
    <PRSC>	= 115;
    <SCLK>	= 116;
    <PAUS>	= 124;
    <INS>	= 138;
    <HOME>	= 139;
    <PGUP>	= 140;
    <DELE>	= 141;
    <END>	= 142;
    <PGDN>	= 143;
    <NMLK>	= 161;
    <KPDV>	= 162;
    <KPMU>	= 163;
    <KPSU>	= 164;
    <KPAD>	= 156;
    <LALT>	= 172;
    <RALT>	= 178;
    <RCTL>	= 173;
};

xkb_keycodes "lk443" {
    include "digital_vndr/lk(lk44x)"
    <BKSL>	= 247;
    indicator 3 = "Caps Lock";
    indicator 4 = "Scroll Lock";
    indicator 5 = "Num Lock";
};

xkb_keycodes "lk444" {
    include "digital_vndr/lk(lk44x)"
    <BKSL>	= 201;
    <AC12>	= 247;
    indicator 3 = "Caps Lock";
    indicator 4 = "Scroll Lock";
    indicator 5 = "Num Lock";
};

// LK201-LT = lk201
// LK421-AJ = lk421  +AB11
// LK421-JJ = lk421aj+MUHE+KANJ+HIRA
// LK401-AJ = lk401
// LK401-BJ = lk401  +MUHE+KANJ+HIRA
// LK401-JJ = lk401bj+AB11
// LK401-LT = lk401
// LK441-LT = lk443

xkb_keycodes "lk421aj" {
    include "digital_vndr/lk(lk421)"
    <AB11>  = 252;
};

xkb_keycodes "lk421jj" {
    include "digital_vndr/lk(lk421aj)"
    <MUHE>  = 94;
    <KANJ>  = 95;
    <HIRA>  = 97;
};

xkb_keycodes "lk401bj" {
    include "digital_vndr/lk(lk401)"
    <MUHE>  = 94;
    <KANJ>  = 95;
    <HIRA>  = 97;
};

xkb_keycodes "lk401jj" {
    include "digital_vndr/lk(lk401bj)"
    <AB11>  = 252;
};
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log
// Revision 1.2  1996/06/18  09:13:25  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.6.3  1995/10/25  21:00:14  William_Walker
// 	Add pc104-key support
// 	[1995/10/23  15:46:21  William_Walker]
//
// Revision 1.1.6.2  1995/08/07  17:40:37  William_Walker
// 	Upgrade XKB to protocol 0.62 (dual submit from decx11)
// 	[1995/08/06  14:06:28  William_Walker]
// 
// Revision 1.1.2.4  1995/08/05  15:25:56  William_Walker
// 	Upgrade to XKB protocol 0.62
// 	[1995/08/05  14:40:02  William_Walker]
// 
// Revision 1.1.2.3  1995/06/27  12:17:32  William_Walker
// 	     Rename <TLDE> to ISO9995 compliant <AE00>.
// 	[1995/06/26  20:24:07  William_Walker]
// 
// Revision 1.1.2.2  1995/06/05  19:21:31  William_Walker
// 	New file.  I love keymaps.
// 	[1995/06/05  18:07:34  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: pc  Revision: /main/3  (DEC) Date: 1996/01/24 12:13:36 
// 
xkb_keycodes "pc_common" {
    // "Function" keys
    <FK01>	= 9;
    <FK02>	= 15;
    <FK03>	= 23;
    <FK04>	= 31;
    <FK05>	= 39;
    <FK06>	= 47;
    <FK07>	= 55;
    <FK08>	= 63;
    <FK09>	= 71;
    <FK10>	= 79;
    <FK11>	= 86;
    <FK12>	= 94;

    // "Editing" keys

    <UP>	= 99;
    <LEFT>	= 97;
    <DOWN>	= 96;
    <RGHT>	= 106;

    // "Keypad" keys
    <KP7>	= 108;
    <KP8>	= 117;
    <KP9>	= 125;

    <KP4>	= 107;
    <KP5>	= 115;
    <KP6>	= 116;

    <KP1>	= 105;
    <KP2>	= 114;
    <KP3>	= 122;
    <KPEN>	= 121;

    <KP0>	= 112;
    <KPDL>	= 113;

    // "Alphanumeric" keys
    <AE01>	= 22;
    <AE02>	= 30;
    <AE03>	= 38;
    <AE04>	= 37;
    <AE05>	= 46;
    <AE06>	= 54;
    <AE07>	= 61;
    <AE08>	= 62;
    <AE09>	= 70;
    <AE10>	= 69;
    <AE11>	= 78;
    <AE12>	= 85;
    <BKSP>	= 102;

    <TAB>	= 13;
    <AD01>	= 21;
    <AD02>	= 29;
    <AD03>	= 36;
    <AD04>	= 45;
    <AD05>	= 44;
    <AD06>	= 53;
    <AD07>	= 60;
    <AD08>	= 67;
    <AD09>	= 68;
    <AD10>	= 77;
    <AD11>	= 84;
    <AD12>	= 91;

    <CAPS>	= 20;
    <AC01>	= 28;
    <AC02>	= 27;
    <AC03>	= 35;
    <AC04>	= 43;
    <AC05>	= 52;
    <AC06>	= 51;
    <AC07>	= 59;
    <AC08>	= 66;
    <AC09>	= 75;
    <AC10>	= 76;
    <AC11>	= 82;
    <RTRN>	= 90;

    <LFSH>	= 18;
    <AB01>	= 26;
    <AB02>	= 34;
    <AB03>	= 33;
    <AB04>	= 42;
    <AB05>	= 50;
    <AB06>	= 49;
    <AB07>	= 58;
    <AB08>	= 65;
    <AB09>	= 73;
    <AB10>	= 74;
    <RTSH>	= 89;

    <LCTL>	= 17;
    <LALT>	= 25;
    <SPCE>	= 41;
    <RALT>	= 57;

    <LDM>	= 255; // Support R5 Lock Down Modifiers

};

xkb_keycodes "pc10x" {
    include "digital_vndr/pc(pc_common)"
    <ESC>	= 8;
    <AE00>	= 14;
    <PRSC>	= 87;
    <SCLK>	= 95;
    <PAUS>	= 98;
    <INS>	= 103;
    <HOME>	= 110;
    <PGUP>	= 111;
    <DELE>	= 100;
    <END>	= 101;
    <PGDN>	= 109;
    <NMLK>	= 118;
    <KPDV>	= 119;
    <KPMU>	= 126;
    <KPSU>	= 132;
    <KPAD>	= 124;
    <RCTL>	= 88;

    alias <TLDE> = <AE00>;

    indicator 3 = "Caps Lock";
    indicator 4 = "Scroll Lock";
};

xkb_keycodes "pc101" {
    include "digital_vndr/pc(pc10x)"
    <BKSL>  = 92;
    indicator 5 = "Num Lock";
};


xkb_keycodes "pc102" {
    include "digital_vndr/pc(pc10x)"
    <BKSL>  = 19;
    <AC12>  = 83;
    indicator 5 = "Num Lock";
};

xkb_keycodes "pc104" {
    include "digital_vndr/pc(pc101)"
    <LWIN>  = 139;
    <RWIN>  = 140;
    <MENU>  = 141;
};

xkb_keycodes "lk411_common" {
    include "digital_vndr/pc(pc_common)"
    <AE00>      = 8;
    <AB00>      = 14;
    <FK13>	= 24;
    <FK14>	= 10;
    <FK17>	= 16;
    <FK18>	= 87;
    <FK19>	= 95;
    <FK20>	= 98;
    <HELP>	= 11;
    <DO>	= 12;
    <FIND>	= 110;
    <INS>	= 103;
    <DELE>	= 100;
    <SELE>	= 101;
    <PGUP>	= 111;
    <PGDN>	= 109;
    <KPF1>	= 118;
    <KPF2>	= 119;
    <KPF3>	= 126;
    <KPF4>	= 132;
    <KPSU>	= 19;
    <KPCO>	= 124;
    <LCMP>	= 40;
    <RCMP>	= 88;

    alias <TLDE> = <AE00>;

    indicator 3 = "Caps Lock";
    indicator 4 = "Scroll Lock";
};

xkb_keycodes "lk411" {
    include "digital_vndr/pc(lk411_common)"
    <BKSL>	= 92;
};

xkb_keycodes "lk450" {
    include	"digital_vndr/pc(lk411)"
    indicator 2 = "Compose";
    indicator 1 = "Wait";
};

// Japanese variants
//
// PCXAJ-AA = pc+BKSL+AC12+AB11+MUHE+KANJ+HIRA+indicator
// LK411-AJ = lk411+MUHE+KANJ+HIRA
// LK411-JJ = lk411+BKSL+AZ01+MUHE+KANJ+HIRA
// LK411-LT = lk411

xkb_keycodes "pcxajaa" {
    include "digital_vndr/pc(pc10x)"
    <BKSL>  = 93;
    <AC12>  = 83;
    <AB11>  = 81;
    <MUHE>  = 133;
    <KANJ>  = 134;
    <HIRA>  = 135;
    indicator 5 = "Group 2";
};

xkb_keycodes "lk411jj" {
    include "digital_vndr/pc(lk411_common)"
    <AB11>  = 81;
    <BKSL>  = 83;
    <MUHE>  = 133;
    <KANJ>  = 134;
    <HIRA>  = 135;
};
// The right Alt key (while pressed) chooses the second keyboard group.
partial modifier_keys
xkb_symbols "switch" {
    key <RALT> {
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods= AltGr
    };
};

// The left Alt key (while pressed) chooses the second keyboard group.
partial modifier_keys
xkb_symbols "lswitch" {
    key <LALT> {
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods= AltGr
    };
};

// Either Win key (while pressed) chooses the second keyboard group.
partial modifier_keys
xkb_symbols "win_switch" {
    include "group(lwin_switch)"
    include "group(rwin_switch)"
};

// The left Win key (while pressed) chooses the second keyboard group.
// (Using this map, you should declare your keyboard as pc101 or pc102
// instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "lwin_switch" {
    key <LWIN> {
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods= AltGr
    };
};

// The right Win key (while pressed) chooses the second keyboard group.
// (Using this map, you should declare your keyboard as pc101 or pc102
// instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "rwin_switch" {
    key <RWIN> {
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods= AltGr
    };
};

// The right Menu key (while pressed) chooses the second keyboard group.
// while Shift+Menu acts as Menu.
partial modifier_keys
xkb_symbols "menu_switch" {
    key <MENU> {
        symbols[Group1] = [ Mode_switch, Menu ],
        virtualMods= AltGr
    };
};

// The right Ctrl key (while pressed) chooses the second keyboard group.
// (Needed mainly for the Canadian keyboard.)
partial modifier_keys
xkb_symbols "rctrl_switch" {
    key <RCTL> {
        symbols[Group1] = [ Mode_switch ]
    };
};

// Pressing the right Alt key switches to the next group.
partial modifier_keys
xkb_symbols "toggle" {
    virtual_modifiers AltGr;
    key <RALT> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing both Shift keys switches to the next or previous group
// (depending on which Shift is pressed first).
partial modifier_keys
xkb_symbols "shifts_toggle" {
    key <LFSH> { [ Shift_L, ISO_Prev_Group ] };
    key <RTSH> { [ Shift_R, ISO_Next_Group ] };
};

// Pressing Shift+Caps_Lock switches to the next group.
partial modifier_keys
xkb_symbols "shift_caps_toggle" {
    key <CAPS> { [ Caps_Lock, ISO_Next_Group ] };
};

// Pressing Caps_Lock selects the first group,
// pressing Shift+Caps_Lock selects the last group.
partial modifier_keys
xkb_symbols "shift_caps_switch" {
    key <CAPS> { [ ISO_First_Group, ISO_Last_Group ] };
};

// toggle using win + space as combo
partial modifier_keys
xkb_symbols "win_space_toggle" {
  key <SPCE> {
    type="PC_SUPER_LEVEL2",
    symbols[Group1]= [ space, ISO_Next_Group ],
    symbols[Group2]= [ space, ISO_Next_Group ]
  };
};

// Pressing the left Win key selects the first group,
// pressing the right Win or the Menu key selects the last group.
partial modifier_keys
xkb_symbols "win_menu_switch" {
    virtual_modifiers AltGr;
    key <LWIN> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_First_Group ]
    };
    key <MENU> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Last_Group ]
    };
    key <RWIN> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Last_Group ]
    };
};

// Pressing the left Ctrl key selects the first group,
// pressing the right Ctrl key selects the last group.
partial modifier_keys
xkb_symbols "lctrl_rctrl_switch" {
    virtual_modifiers AltGr;
    key <LCTL> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_First_Group ]
    };
    key <RCTL> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Last_Group ]
    };
};


//
// CTRL-SHIFT toggle section
//
partial modifier_keys
xkb_symbols "lctrl_lshift_toggle" {
    key <LFSH> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Shift_L, ISO_Next_Group ]
    };
    key <LCTL> { [ Control_L, ISO_Next_Group ] };
};

partial modifier_keys
xkb_symbols "lctrl_lshift_toggle_rev" {
    key <LFSH> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Shift_L, ISO_Prev_Group ]
    };
    key <LCTL> { [ Control_L, ISO_Prev_Group ] };
};

partial modifier_keys
xkb_symbols "rctrl_rshift_toggle" {
    key <RTSH> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Shift_R, ISO_Next_Group ]
    };
    key <RCTL> { [ Control_R, ISO_Next_Group ] };
};

partial modifier_keys
xkb_symbols "ctrl_shift_toggle" {
    include "group(lctrl_lshift_toggle)"
    include "group(rctrl_rshift_toggle)"
};

partial modifier_keys
xkb_symbols "ctrl_shift_toggle_bidir" {
    include "group(lctrl_lshift_toggle_rev)"
    include "group(rctrl_rshift_toggle)"
};


//
// CTRL-ALT toggle section
//
partial modifier_keys
xkb_symbols "lctrl_lalt_toggle" {
    virtual_modifiers Alt;
    key <LALT> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= Alt
    };
    key <LCTL> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Control_L, ISO_Next_Group ]
    };
};

partial modifier_keys
xkb_symbols "lctrl_lalt_toggle_rev" {
    virtual_modifiers Alt;
    key <LALT> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Prev_Group ],
        virtualMods= Alt
    };
    key <LCTL> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Control_L, ISO_Prev_Group ]
    };
};

partial modifier_keys
xkb_symbols "rctrl_ralt_toggle" {
    virtual_modifiers Alt;
    key <RALT> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= Alt
    };
    key <RCTL> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Control_R, ISO_Next_Group ]
    };
};

partial modifier_keys
xkb_symbols "ctrl_alt_toggle" {
    include "group(lctrl_lalt_toggle)"
    include "group(rctrl_ralt_toggle)"
};

partial modifier_keys
xkb_symbols "ctrl_alt_toggle_bidir" {
    include "group(lctrl_lalt_toggle_rev)"
    include "group(rctrl_ralt_toggle)"
};


//
// ALT-SHIFT toggle section
//
partial modifier_keys
xkb_symbols "lalt_lshift_toggle" {
    virtual_modifiers Alt;
    key <LALT> {
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= Alt
    };
    key <LFSH> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Shift_L, ISO_Next_Group ]
    };
};

partial modifier_keys
xkb_symbols "lalt_lshift_toggle_rev" {
    virtual_modifiers Alt;
    key <LALT> {
        symbols[Group1] = [ NoSymbol, ISO_Prev_Group ],
        virtualMods= Alt
    };
    key <LFSH> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Shift_L, ISO_Prev_Group ]
    };
};

partial modifier_keys
xkb_symbols "ralt_rshift_toggle" {
    virtual_modifiers Alt;
    key <RALT> {
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= Alt
    };
    key <RTSH> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ Shift_R, ISO_Next_Group ]
    };
};

partial modifier_keys
xkb_symbols "alt_shift_toggle" {
    include "group(lalt_lshift_toggle)"
    include "group(ralt_rshift_toggle)"
};

partial modifier_keys
xkb_symbols "alt_shift_toggle_bidir" {
    include "group(lalt_lshift_toggle_rev)"
    include "group(ralt_rshift_toggle)"
};


// Pressing the Menu key switches to the next group,
// while Shift+Menu acts as Menu.
partial modifier_keys
xkb_symbols "menu_toggle" {
    key <MENU> { [ ISO_Next_Group, Menu ] };
};

// Pressing the left Win key switches to the next group.
// (Using this map, you should declare your keyboard as
// pc101 or pc102 instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "lwin_toggle" {
    virtual_modifiers AltGr;
    key <LWIN> {
         virtualMods= AltGr,
        symbols[Group1] = [ ISO_Next_Group ]
    };
};

// Pressing the right Win key switches to the next group.
// (Using this map, you should declare your keyboard as
// pc101 or pc102 instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "rwin_toggle" {
    virtual_modifiers AltGr;
    key <RWIN> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Next_Group ]
    };
};

// Pressing both Ctrl keys switches to the next or previous group
// (depending on which Ctrl is pressed first).
partial modifier_keys
xkb_symbols "ctrls_toggle" {
    virtual_modifiers LControl, RControl;
    key <LCTL> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Prev_Group ],
        virtualMods= LControl
    };
    key <RCTL> {
        type[Group1]="PC_CONTROL_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= RControl
    };
};

// Pressing both Alt switches to the next or previous group
// (depending on which Alt is pressed first).
partial modifier_keys
xkb_symbols "alts_toggle" {
    virtual_modifiers LAlt, RAlt;
    key <LALT> {
        type[Group1]="PC_RALT_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Prev_Group ],
        virtualMods= LAlt
    };
    key <RALT> {
        type[Group1]="PC_LALT_LEVEL2",
        symbols[Group1] = [ NoSymbol, ISO_Next_Group ],
        virtualMods= RAlt
    };
};

// Pressing the left Shift key switches to the next group.
partial modifier_keys
xkb_symbols "lshift_toggle" {
    virtual_modifiers AltGr;
    key <LFSH> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing the right Shift key switches to the next group.
partial modifier_keys
xkb_symbols "rshift_toggle" {
    virtual_modifiers AltGr;
    key <RTSH> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing the left Alt key switches to the next group.
partial modifier_keys
xkb_symbols "lalt_toggle" {
    virtual_modifiers AltGr;
    key <LALT> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing the left Ctrl key switches to the next group.
partial modifier_keys
xkb_symbols "lctrl_toggle" {
    virtual_modifiers AltGr;
    key <LCTL> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing the right Ctrl key switches to the next group.
partial modifier_keys
xkb_symbols "rctrl_toggle" {
    virtual_modifiers AltGr;
    key <RCTL> {
        symbols[Group1] = [ ISO_Next_Group ],
        virtualMods= AltGr
    };
};

// Pressing Alt+Caps_Lock switches to the next group,
// pressing Caps_Lock toggles CapsLock.
partial modifier_keys
xkb_symbols "alt_caps_toggle" {
    key <CAPS> {
       type="PC_ALT_LEVEL2",
       symbols[Group1] = [ Caps_Lock, ISO_Next_Group ]
    };
};

hidden partial modifier_keys
xkb_symbols "olpc" {
    key <I219> { [ ISO_Next_Group, ISO_Prev_Group ] };
};

partial modifier_keys
xkb_symbols "alt_space_toggle" {
    key <SPCE> {
        type[Group1]="PC_ALT_LEVEL2",
        symbols[Group1] = [ space, ISO_Next_Group ]
    };
};

// Pressing the Scroll Lock key switches to the next group,
partial modifier_keys
xkb_symbols "sclk_toggle" {
    virtual_modifiers AltGr;
    key <SCLK> {
        virtualMods= AltGr,
        symbols[Group1] = [ ISO_Next_Group ]
    };
};

// Control_L+Win_L selects the first group (presumably Lat),
// Control_R+Menu selects the second group (presumably Rus).
partial modifier_keys
xkb_symbols "lctrl_lwin_rctrl_menu" {
    key <LWIN> {
        type[Group1] = "PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Super_L, ISO_First_Group ]
    };
    key <MENU> {
        type[Group1] = "PC_CONTROL_LEVEL2",
        symbols[Group1] = [ Menu, ISO_Last_Group ]
    };
};

// Control_L+Win_L toggles groups.
partial modifier_keys
xkb_symbols "lctrl_lwin_toggle" {
    key <LWIN> {
        type[ Group1 ]    = "PC_CONTROL_LEVEL2",
        symbols[ Group1 ] = [ Super_L,    ISO_Next_Group ]
    };
};

// Esperanto keyboard maps -- "Ekverto"
//
// Ekverto A ("legacy") (2004-01-10)
// Chusslove Illich (Ĉaslavo Iliĉo) <caslav.ilic@gmx.net>
//
// Ekverto B ("basic") (2006-12-02)
// Benno Schulenberg (Beno Sĥilenberĥ) <bensberg@justemail.net>
// Chusslove Illich (Ĉaslavo Iliĉo) <caslav.ilic@gmx.net>

default partial alphanumeric_keys
xkb_symbols "basic" {

  include "us(basic)"
  name[Group1]= "Esperanto";

  key.type[Group1] = "FOUR_LEVEL_ALPHABETIC";

  key <AD01>  { [ scircumflex,  Scircumflex,  q,             Q          ] };
  key <AD02>  { [ gcircumflex,  Gcircumflex,  w,             W          ] };
  key <AB02>  { [ ccircumflex,  Ccircumflex,  x,             X          ] };
  key <AD06>  { [ ubreve,       Ubreve,       y,             Y          ] };

  key.type[Group1] = "FOUR_LEVEL_SEMIALPHABETIC";

  key <AD11>  { [ jcircumflex,  Jcircumflex,  bracketleft,   braceleft  ] };
  key <AD12>  { [ hcircumflex,  Hcircumflex,  bracketright,  braceright ] };

  key <AD09>  { [ o,            O,            braceleft,     braceleft  ] };
  key <AD10>  { [ p,            P,            braceright,    braceright ] };

  key <AC01>  { [ a,            A,     leftsinglequotemark,  NoSymbol   ] };
  key <AC02>  { [ s,            S,    rightsinglequotemark,  NoSymbol   ] };
  key <AC03>  { [ d,            D,     leftdoublequotemark,  NoSymbol   ] };
  key <AC04>  { [ f,            F,    rightdoublequotemark,  NoSymbol   ] };

  key <AB06>  { [ n,            N,            endash,        endash     ] };
  key <AB07>  { [ m,            M,            emdash,        emdash     ] };

  key.type[Group1] = "FOUR_LEVEL";

  key <AE05>  { [ 5,            percent,      EuroSign,      EuroSign   ] };

  include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "legacy" {

  name[Group1]= "Esperanto (legacy)";

  key.type[Group1] = "FOUR_LEVEL";

  key <TLDE>  { [ grave,         asciitilde,  NoSymbol,  NoSymbol ] };
  key <AE01>  { [ 1,             exclam,      NoSymbol,  NoSymbol ] };
  key <AE02>  { [ 2,             quotedbl,    NoSymbol,  NoSymbol ] };
  key <AE03>  { [ 3,             numbersign,  NoSymbol,  NoSymbol ] };
  key <AE04>  { [ 4,             dollar,      NoSymbol,  NoSymbol ] };
  key <AE05>  { [ 5,             percent,     NoSymbol,  NoSymbol ] };
  key <AE06>  { [ 6,             apostrophe,  NoSymbol,  NoSymbol ] };
  key <AE07>  { [ 7,             ampersand,   NoSymbol,  NoSymbol ] };
  key <AE08>  { [ 8,             asterisk,    NoSymbol,  NoSymbol ] };
  key <AE09>  { [ 9,             parenleft,   NoSymbol,  NoSymbol ] };
  key <AE10>  { [ 0,             parenright,  NoSymbol,  NoSymbol ] };
  key <AE11>  { [ minus,         underscore,  NoSymbol,  NoSymbol ] };
  key <AE12>  { [ equal,         plus,        NoSymbol,  NoSymbol ] };

  key <AB08>  { [ comma,         semicolon,   NoSymbol,  NoSymbol ] };
  key <AB09>  { [ period,        colon,       NoSymbol,  NoSymbol ] };
  key <AB10>  { [ slash,         question,    NoSymbol,  NoSymbol ] };

  key <AD11>  { [ bracketleft,   braceleft,   NoSymbol,  NoSymbol ] };
  key <AD12>  { [ bracketright,  braceright,  NoSymbol,  NoSymbol ] };

  key <BKSL>  { [ backslash,     bar,         NoSymbol,  NoSymbol ] };
  key <LSGT>  { [ NoSymbol,      NoSymbol,    NoSymbol,  NoSymbol ] };

  key.type[Group1] = "FOUR_LEVEL_SEMIALPHABETIC";

  key <AD01>  { [ scircumflex,  Scircumflex,  at,                    NoSymbol ] };
  key <AD02>  { [ jcircumflex,  Jcircumflex,  asciicircum,           NoSymbol ] };
  key <AD03>  { [ e,            E,            EuroSign,              NoSymbol ] };
  key <AD04>  { [ r,            R,            emdash,                NoSymbol ] };
  key <AD05>  { [ t,            T,            endash,                NoSymbol ] };
  key <AD06>  { [ gcircumflex,  Gcircumflex,  NoSymbol,              NoSymbol ] };
  key <AD07>  { [ u,            U,            NoSymbol,              NoSymbol ] };
  key <AD08>  { [ i,            I,            NoSymbol,              NoSymbol ] };
  key <AD09>  { [ o,            O,            NoSymbol,              NoSymbol ] };
  key <AD10>  { [ p,            P,            NoSymbol,              NoSymbol ] };

  key <AC01>  { [ a,            A,            less,                  NoSymbol ] };
  key <AC02>  { [ s,            S,            greater,               NoSymbol ] };
  key <AC03>  { [ d,            D,            leftdoublequotemark,   NoSymbol ] };
  key <AC04>  { [ f,            F,            rightdoublequotemark,  NoSymbol ] };
  key <AC05>  { [ g,            G,            NoSymbol,              NoSymbol ] };
  key <AC06>  { [ h,            H,            NoSymbol,              NoSymbol ] };
  key <AC07>  { [ j,            J,            NoSymbol,              NoSymbol ] };
  key <AC08>  { [ k,            K,            NoSymbol,              NoSymbol ] };
  key <AC09>  { [ l,            L,            NoSymbol,              NoSymbol ] };
  key <AC10>  { [ ubreve,       Ubreve,       NoSymbol,              NoSymbol ] };
  key <AC11>  { [ hcircumflex,  Hcircumflex,  NoSymbol,              NoSymbol ] };

  key <AB01>  { [ z,            Z,            leftsinglequotemark,   NoSymbol ] };
  key <AB02>  { [ ccircumflex,  Ccircumflex,  rightsinglequotemark,  NoSymbol ] };
  key <AB03>  { [ c,            C,            NoSymbol,              NoSymbol ] };
  key <AB04>  { [ v,            V,            NoSymbol,              NoSymbol ] };
  key <AB05>  { [ b,            B,            NoSymbol,              NoSymbol ] };
  key <AB06>  { [ n,            N,            NoSymbol,              NoSymbol ] };
  key <AB07>  { [ m,            M,            NoSymbol,              NoSymbol ] };

  include "level3(ralt_switch)"
};

// Add the Esperanto supersigned letters to their related keys on a Qwerty keyboard.
// This is a generic "component" that is not used by the other layouts in this file,
// but is meant to be applied to any Qwerty layout.  If you have any questions, ask
// J. Pablo Fernández <pupeno@pupeno.com>.
partial
xkb_symbols "qwerty" {
    key <AB03> { [ NoSymbol, NoSymbol, ccircumflex, Ccircumflex ] };
    key <AC05> { [ NoSymbol, NoSymbol, gcircumflex, Gcircumflex ] };
    key <AC06> { [ NoSymbol, NoSymbol, hcircumflex, Hcircumflex ] };
    key <AC07> { [ NoSymbol, NoSymbol, jcircumflex, Jcircumflex ] };
    key <AC02> { [ NoSymbol, NoSymbol, scircumflex, Scircumflex ] };
    key <AD07> { [ NoSymbol, NoSymbol,      ubreve,      Ubreve ] };
};

// Add the Esperanto supersigned letters to their related keys in a
// Dvorak layout.  Similar comment as above applies.
partial
xkb_symbols "dvorak" {
    key <AD08> { [ NoSymbol, NoSymbol, ccircumflex, Ccircumflex ] };
    key <AD07> { [ NoSymbol, NoSymbol, gcircumflex, Gcircumflex ] };
    key <AC07> { [ NoSymbol, NoSymbol, hcircumflex, Hcircumflex ] };
    key <AB03> { [ NoSymbol, NoSymbol, jcircumflex, Jcircumflex ] };
    key <AC10> { [ NoSymbol, NoSymbol, scircumflex, Scircumflex ] };
    key <AC04> { [ NoSymbol, NoSymbol,      ubreve,      Ubreve ] };
};

// Add the Esperanto supersigned letters to their related keys in a
// Colemak layout.  Similar comment as above applies.
partial
xkb_symbols "colemak" {
    key <AB03> { [ NoSymbol, NoSymbol, ccircumflex, Ccircumflex ] };
    key <AD05> { [ NoSymbol, NoSymbol, gcircumflex, Gcircumflex ] };
    key <AC06> { [ NoSymbol, NoSymbol, hcircumflex, Hcircumflex ] };
    key <AD06> { [ NoSymbol, NoSymbol, jcircumflex, Jcircumflex ] };
    key <AC03> { [ NoSymbol, NoSymbol, scircumflex, Scircumflex ] };
    key <AD08> { [ NoSymbol, NoSymbol,      ubreve,      Ubreve ] };
};
// EXTRAS:
//
// APL Keyboard Layouts

// This file supports:
// -	The Sharp APL for Unix (SAX) layout
// -	The IBM APL2 layout
// -	The Manugistics APL*PLUS II (Version 5.1, 1993) keyboard layout
// -	The Dyalog APL layout - with additions for box drawing and commands

// Unicode APL table: http://aplwiki.com/UnicodeAplTable
// ...and another: http://publibfp.boulder.ibm.com/epubs/pdf/h2110611.pdf (appendix A)
// Generic Unicode stuff: http://www.fileformat.info/info/unicode/category/index.htm

// Tim Nelson (this file's creator) says:

// This file doesn't deal with all the combining stuff -- I'm not an APL programmer,
// and am not quite sure what's needed here.  However, it may be possible to get this
// working with dead keys and the like.  Patches gratefully accepted.  
// [Geoff Streeter: What has been done to is to support all of the APL overstrikes in the compose table]

// Some of the shift-key assignments may differ from the APL tradition.  If
// that's not considered acceptable, it should be possible to remap the 
// shift keys.  I have striven, however, to ensure that the use of shift keys
// in these maps is at least self-consistent.  

// I'm assuming that this will be used with another keyboard layout (ie. for 
// your language), with a special shift key to use these maps.  

// 2018-07-02 added some codes to the Unicode Private Use page.
// 2017-02-27 changed ¤ to ⌺, added ⊆
// 2012-09-26 changed "overbar" to macron which fixed some strangeness in xterm

// 2011-12-22 Geoff Streeter: geoff@dyalog.com
// Added the Dyalog support.
// Corrected (what he thinks) are some errors.
// 	Resolving the confusion between APL's and Unicode's concept of Left and Right tacks.
// 	Unsure about some of the inheritance from APL2 into APLPLUS. Patches welcome.
// Complied with freedesktop.org requirement that the keycodes be in sorted order. Which
// leads to the bottom to top (roughly) definitions.

// default layout seems to have to be the first one. Choosing the basic Dyalog layout is definitely
// better than using the "common" one. Choosing the complete Dyalog layout is not useful to non-Dyalog
// users.

default partial alphanumeric_keys
xkb_symbols "basic" {

	include "apl(dyalog_base)"	// forward reference to a good APL keyboard without Dyalogs extras

	name[Group1]="APL";
};

// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃         ┃
// │     │ ¨   │ ¯   │ <   │ ≤   │ =   │ ≥   │ >   │ ≠   │ ∨   │ ∧   │     │     ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     │     ┃       ┃
// ┃       ┃ ?   │ ⍵   │ ∊   │ ⍴   │ ~   │ ↑   │ ↓   │ ⍳   │ ○   │ *   │ ←   │     ┃       ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     ┃      ┃
// ┃        ┃ ⍺   │ ⌈   │ ⌊   │ _   │ ∇   │ ∆   │ ∘   │ '   │ ⎕   │     │     │     ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     ┃             ┃
// ┃       ┃     │ ⊂   │ ⊃   │ ∩   │ ∪   │ ⊥   │ ⊤   │ |   │     │     │     ┃             ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

hidden partial alphanumeric_keys
xkb_symbols "common" {

	key <AB01> { [	U2282		] }; // Z: ⊂ -- Subset Of
	key <AB02> { [	U2283		] }; // X: ⊃ -- Superset Of
	key <AB03> { [	U2229		] }; // C: ∩ -- Intersection
	key <AB04> { [	U222A		] }; // V: ∪ -- Union
	key <AB05> { [	U22A5		] }; // B: ⊥ -- Up Tack
	key <AB06> { [	U22A4		] }; // N: ⊤ -- Down Tack
	key <AB07> { [	U007C		] }; // M: | -- Vertical Line

	key <AC01> { [	U237A		] }; // A: ⍺ -- APL Functional Symbol Alpha
	key <AC02> { [	U2308		] }; // S: ⌈ -- Left Ceiling
	key <AC03> { [	U230A		] }; // D: ⌊ -- Left Floor
	key <AC04> { [	underscore	] }; // F:
	key <AC05> { [	U2207		] }; // G: ∇ -- Nabla
	key <AC06> { [	U2206		] }; // H: ∆ -- Increment
	key <AC07> { [	U2218		] }; // J: ∘ -- Ring Operator
	key <AC08> { [	apostrophe 	] }; // K:
	key <AC09> { [	U2395		] }; // L: ⎕ -- APL Functional Symbol Quad

	key <AD01> { [	question	] }; // Q:
	key <AD02> { [	U2375		] }; // W: ⍵ -- APL Functional Symbol Omega
	key <AD03> { [	U220A		] }; // E: ∊ -- Small Element Of
	key <AD04> { [	U2374		] }; // R: ⍴ -- APL Functional Symbol Rho
	key <AD05> { [	asciitilde	] }; // T:
	key <AD06> { [	U2191		] }; // Y: ↑ -- Upwards Arrow
	key <AD07> { [	U2193		] }; // U: ↓ -- Downwards Arrow
	key <AD08> { [	U2373		] }; // I: ⍳ -- APL Functional Symbol Iota
	key <AD09> { [	U25CB		] }; // O: ○ -- White Circle
	key <AD10> { [	asterisk	] }; // P: * -- asterisk
	key <AD11> { [	U2190		] }; // [: ← -- Leftwards Arrow

	key <AE01> { [	diaeresis	] };
	key <AE02> { [	macron		] }; // ¯ -- Macron
	key <AE03> { [	less		] };
	key <AE04> { [	U2264		] }; // ≤ -- Less-than Or Equal To
	key <AE05> { [	equal		] };
	key <AE06> { [	U2265		] }; // ≥ -- Greater-than Or Equal To
	key <AE07> { [	greater		] };
	key <AE08> { [	U2260		] }; // ≠ -- Not Equal To
	key <AE09> { [	U2228		] }; // ∨ -- Logical Or
	key <AE10> { [	U2227		] }; // ∧ -- Logical And
};

// Keys common to a number of keyboards that allow normal language usage alongside APL

// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │ ⍱   │ ⍲   │     │  ⌹  ┃         ┃
// │ ⋄   │ ¨   │ ¯   │ <   │ ≤   │ =   │ ≥   │ >   │ ≠   │ ∨   │ ∧   │  ×  │  ÷  ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     │     ┃       ┃
// ┃       ┃ ?   │ ⍵   │ ∊   │ ⍴   │ ~   │ ↑   │ ↓   │ ⍳   │ ○   │ *   │ ←   │  →  ┃       ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     ┃      ┃
// ┃        ┃ ⍺   │ ⌈   │ ⌊   │ _   │ ∇   │ ∆   │ ∘   │ '   │ ⎕   │     │     │     ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     ┃             ┃
// ┃       ┃     │ ⊂   │ ⊃   │ ∩   │ ∪   │ ⊥   │ ⊤   │ |   │     │     │     ┃             ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "unified" {

	include "apl(common)"

	name[Group1]= "APL symbols (unified)";

	key <AD12> { [ U2192			] }; // ]: → -- Rightwards Arrow
	key <AE09> { [ NoSymbol,	U2371	] }; // 9: ⍱ -- APL Functional Symbol Down Caret Tilde
	key <AE10> { [ NoSymbol,	U2372	] }; // 0: ⍲ -- APL Functional Symbol Up Caret Tilde
	key <AE11> { [ U00D7			] }; // -: × -- Multiplication Sign
	key <AE12> { [ U00F7,		U2339	] }; // =: ÷ ⌹ -- Division Sign / APL Functional Symbol Quad Divide
	key <TLDE> { [ U22C4			] }; // `: ⋄ -- Diamond Operator
};

// Layout: http://www.wickensonline.co.uk/apl-unicomp.html

// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │     │ ¡   │     │     │ ¢   │     │     │     │ ⍂   │ ⍱   │ ⍲   │  ≡  │  ⌹  ┃         ┃
// │ ⋄   │ ¨   │ ¯   │ <   │ ≤   │ =   │ ≥   │ >   │ ≠   │ ∨   │ ∧   │  ×  │  ÷  ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ ¿   │ ⌽   │ ⍷   │     │ ⍉   │     │     │ ⍸   │ ⍥   │ ⍣   │     │     ┃       ┃
// ┃       ┃ ?   │ ⍵   │ ∊   │ ⍴   │ ~   │ ↑   │ ↓   │ ⍳   │ ○   │ *   │ ←   │  →  ┃       ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ ⊖   │     │     │ ⍫   │ ⍒   │ ⍋   │ ⍤   │ ⌻   │ ⍞   │     │     │  ⍀  ┃      ┃
// ┃        ┃ ⍺   │ ⌈   │ ⌊   │ _   │ ∇   │ ∆   │ ∘   │ '   │ ⎕   │  ⊢  │  ⊣  │  ⍝  ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃     │     │     │ ⍝   │     │  ⍎  │  ⍕  │ ⌶   │  ⍪  │  ⍙  │  ⌿  ┃             ┃
// ┃       ┃     │ ⊂   │ ⊃   │ ∩   │ ∪   │ ⊥   │ ⊤   │ |   │  ⍞  │  ⍎  │  ⍕  ┃             ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "sax" {

	include "apl(unified)"

	name[Group1]= "APL symbols (SAX, Sharp APL for Unix)";

	key <AB03> { [	NoSymbol,	U235D	] }; // C: ⍝ -- APL Functional Symbol Up Shoe Jot
	key <AB05> { [	NoSymbol,	U234E	] }; // B: ⍎ -- APL Functional Symbol Down Tack Jot (Unicode got the name wrong; it should have been "Up Tack")
	key <AB06> { [	NoSymbol,	U2355	] }; // N: ⍕ -- APL Functional Symbol Up Tack Jot (Unicode got the name wrong; it should have been "Down Tack")
	key <AB07> { [	NoSymbol,	U2336	] }; // M: ⌶ -- APL Functional Symbol I-Beam
	key <AB08> { [	U235E,		U236A	] }; // ,: ⍞ ⍪ -- APL Functional Symbol Quote Quad / APL Functional Symbol Comma Bar
	key <AB09> { [	U234E,		U2359	] }; // .: ⍎ ⍙ -- [See B key] / APL Functional Symbol Delta Underbar
	key <AB10> { [	U2355,		U233F	] }; // /: ⍕ ⌿ -- [See N key] / APL Functional Symbol Slash Bar

	key <AC01> { [	NoSymbol,	U2296	] }; // A: ⊖ -- Circled Minus
	key <AC04> { [	NoSymbol,	U236B	] }; // F: ⍫ -- APL Functional Symbol Del Tilde
	key <AC05> { [	NoSymbol,	U2352	] }; // G: ∇ ⍒ -- APL Functional Symbol Del Stile
	key <AC06> { [	NoSymbol,	U234B	] }; // H: ∆ ⍋ -- APL Functional Symbol Delta Stile
	key <AC07> { [	NoSymbol,	U2364	] }; // J: ⍤ -- APL Functional Symbol Jot Diaeresis
	key <AC08> { [	NoSymbol,	U233B	] }; // K: ⌻
	key <AC09> { [	NoSymbol,	U235E	] }; // L: ⍞ -- APL Functional Symbol Quote Quad
	key <AC10> { [	U22A2			] }; // ;: ⊢ -- Right Tack
	key <AC11> { [	U22A3			] }; // ': ⊣ -- Left Tack

	key <AD01> { [	NoSymbol,	U00BF	] }; // Q: ¿ -- Inverted Question Mark
	key <AD02> { [	NoSymbol,	U233D	] }; // W: ⌽ -- APL Functional Symbol Circle Stile
	key <AD03> { [	NoSymbol,	U2377	] }; // E: ⍷ -- APL Functional Symbol Epsilon Underbar
	key <AD05> { [	NoSymbol,	U2349	] }; // T: ⍉ -- APL Functional Symbol Circle Backslash
	key <AD08> { [	NoSymbol,	U2378	] }; // I: ⍸ -- APL Functional Symbol Iota Underbar
	key <AD09> { [	NoSymbol,	U2365	] }; // O: ⍥ -- APL Functional Symbol Circle Diaeresis
	key <AD10> { [	NoSymbol,	U235F	] }; // P: ⍟ -- APL Functional Symbol Circle Star
	key <AE01> { [	NoSymbol,	U00A1	] }; // 1: ¡ -- Inverted Exclamation Mark
	key <AE04> { [	NoSymbol,	cent	] }; // 4:
	key <AE08> { [	NoSymbol,	U2342	] }; // 8: ⍂ -- APL Functional Symbol Quad Backslash
	key <AE11> { [	NoSymbol,	U2261	] }; // -: ≡ -- Identical To

	key <BKSL> { [	U235D,		U2340	] }; // \: ⍝ ⍀ -- APL Functional Symbol Up Shoe Jot / APL Functional Symbol Backslash Bar
};

// Layout: http://www.wickensonline.co.uk/apl-unicomp.html

// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │  ⍂  │ ⌶   │ ⍫   │ ⍒   │ ⍋   │ ⌽   │ ⍉   │ ⊖   │ ⍟   │ ⍱   │ ⍲   │  !  │  ⌹  ┃         ┃
// │  ⌻  │     │     │     │     │     │     │     │     │     │     │  -  │  ÷  ┃         ┃
// │     │ ¨   │ ¯   │ <   │ ≤   │ =   │ ≥   │ >   │ ≠   │ ∨   │ ∧   │  +  │  ×  ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │ ⍞   │  ⍙  ┃       ┃
// ┃       ┃     │     │     │     │     │     │     │     │     │     │ →   │  ⍸  ┃       ┃
// ┃       ┃ ?   │ ⍵   │ ∊   │ ⍴   │ ~   │ ↑   │ ↓   │ ⍳   │ ○   │ *   │ ←   │  ⌷  ┃       ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │  ⍎  │  ⍕  │  ⍤  ┃      ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │  (  │  )  │  ⍷  ┃      ┃
// ┃        ┃ ⍺   │ ⌈   │ ⌊   │ _   │ ∇   │ ∆   │ ∘   │ '   │ ⎕   │  [  │  ]  │  ≡  ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │  ⍝  │  ⍀  │  ⌿  ┃             ┃
// ┃       ┃     │     │     │     │     │     │     │     │  ;  │  :  │  \  ┃             ┃
// ┃       ┃     │ ⊂   │ ⊃   │ ∩   │ ∪   │ ⊥   │ ⊤   │ |   │  ,  │  .  │  /  ┃             ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "apl2" {

	include "apl(common)"

	name[Group1]= "APL symbols (IBM APL2)";

	// The first column is NoSymbol because it inherits.  The second is NoSymbol because those keys don't do anything
	// AFS - short for APL Functional Symbol

	key <AB08> { [	comma,		semicolon,	U235D	] }; // ,: ⍝ -- AFS Up Shoe Jot
	key <AB09> { [	period,		colon,		U2340	] }; // .: ⍀ -- AFS Backslash Bar
	key <AB10> { [	slash,		backslash,	U233F	] }; // /: ⌿ -- AFS Slash Bar

	key <AC10> { [	bracketleft, 	parenleft,	U234E	] }; // ;: ⍎ -- [See B key in SAX layout]
	key <AC11> { [	bracketright, 	parenright, 	U2355	] }; // ': ⍕ -- [See N key in SAX layout] 

	key <AD11> { [	NoSymbol,	U2192,		U235E	] }; // [: (←) → ⍞ -- Rightwards Arrow / AFS Quote Quad
	key <AD12> { [	U2337,		U2378,		U2359	] }; // ]: ⌷ ⍸ ⍙ -- AFS Squish Quad / AFS Iota Underbar / AFS Delta Underbar

	key <AE01> { [	NoSymbol, 	NoSymbol,	U2336	] }; // 1: ⌶ -- AFS I-Beam
	key <AE02> { [	NoSymbol, 	NoSymbol,	U236B	] }; // 2: ⍫ -- AFS Del Tilde
	key <AE03> { [	NoSymbol, 	NoSymbol,	U2353	] }; // 3: ⍒ -- AFS Del Stile
	key <AE04> { [	NoSymbol, 	NoSymbol,	U234B	] }; // 4: ⍋ -- AFS Delta Stile
	key <AE05> { [	NoSymbol, 	NoSymbol,	U233D	] }; // 5: ⌽ -- AFS Circle Stile
	key <AE06> { [	NoSymbol, 	NoSymbol,	U2349	] }; // 6: ⍉ -- AFS Circle Backslash
	key <AE07> { [	NoSymbol, 	NoSymbol,	U2296	] }; // 7: ⊖ -- Circled Minus
	key <AE08> { [	NoSymbol, 	NoSymbol,	U235F	] }; // 8: ⍟ -- AFS Circle Star
	key <AE09> { [	NoSymbol, 	NoSymbol,	U2371	] }; // 9: ⍱ -- AFS Down Caret Tilde
	key <AE10> { [	NoSymbol, 	NoSymbol,	U2372	] }; // 0: ⍲ -- AFS Up Caret Tilde
	key <AE11> { [	plus,		minus,		exclam	] }; // -:
	key <AE12> { [	U00D7,		U00F7,		U2339	] }; // =: × ÷ ⌹ -- Multiplication Sign / Division Sign / AFS Quad Divide

	key <BKSL> { [	U2261,		U2377,		U2364	] }; // \: ≡ ⍷ ⍤ -- Identical To / AFS Epsilon Underbar / AFS Jot Diaeresis

	key <TLDE> { [	NoSymbol,	U233B,		U2342	] }; // `: ⌻ ⍂ -- 

	include "level3(ralt_switch)"
};

// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │  ⍪  │ ≡   │ ⍫   │ ⍒   │ ⍋   │ ⌽   │ ⍉   │ ⊖   │ ⍟   │ ⍱   │ ⍲   │  !  │  ⌹  ┃         ┃
// │  ⋄  │     │     │     │     │     │     │     │     │     │     │  -  │  ÷  ┃         ┃
// │  $  │ ¨   │ ¯   │ <   │ ≤   │ =   │ ≥   │ >   │ ≠   │ ∨   │ ∧   │  +  │  ×  ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │ ⍞   │  ⍬  ┃       ┃
// ┃       ┃     │     │     │     │     │     │     │     │     │     │ →   │  ⍸  ┃       ┃
// ┃       ┃ ?   │ ⍵   │ ∊   │ ⍴   │ ~   │ ↑   │ ↓   │ ⍳   │ ○   │ *   │ ←   │  →  ┃       ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │  ⍎  │  ⍕  │  ⍙  ┃      ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │  (  │  )  │  ⊣  ┃      ┃
// ┃        ┃ ⍺   │ ⌈   │ ⌊   │ _   │ ∇   │ ∆   │ ∘   │ '   │ ⎕   │  [  │  ]  │  ⊢  ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │  ⍝  │  ⍀  │  ⌿  ┃             ┃
// ┃       ┃     │     │     │     │     │     │     │     │  ;  │  :  │  \  ┃             ┃
// ┃       ┃     │ ⊂   │ ⊃   │ ∩   │ ∪   │ ⊥   │ ⊤   │ |   │  ,  │  .  │  /  ┃             ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "aplplusII" {

	include "apl(apl2)"

	name[Group1]= "APL symbols (Manugistics APL*PLUS II)";

	// AFS is short for APL Functional Symbol
	key <AC10> { [	bracketleft,	parenleft,	U234E	] }; // ;: ⍎ -- [See B key in SAX layout]
	key <AC11> { [	bracketright,	parenright,	U2355	] }; // ': ⍕ -- [See N key in SAX layout] 
	key <AD11> { [	U2190,		NoSymbol,	U235E	] }; // [: ← ⍞ -- Leftwards Arrow / AFS Quote Quad
	key <AD12> { [	U2192,		NoSymbol,	U236C	] }; // ]: → ⍬ -- Rightwards Arrow / AFS Zilde
	key <AE01> { [	NoSymbol, 	NoSymbol, 	U2261	] }; // 1: ≡ -- Identical To
	key <BKSL> { [	U22A2,		U22A3,		U2359	] }; // \: ⊢ ⊣ ⍙ -- Left Tack / Right Tack / AFS Delta Underbar
	key <TLDE> { [	dollar,		U22C4,		U236A	] }; // `: ⋄ ⍪ -- Diamond Operator / AFS Comma Bar
};


// MicroAPL layout: http://aplwiki.com/APLXKeyboardLayouts
// I didn't do the old-style MicroAPL layout; patches gratefully accepted

// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ⍞   │ ⌶   │ ⍫   │ ⍒   │ ⍋   │ ⌽   │ ⍉   │ ⊖   │ ⍟   │ ⍱   │ ⍲   │  !  │  ⌹  ┃         ┃
// │ ⋄   │ ¨   │ ¯   │ <   │ ≤   │ =   │ ≥   │ >   │ ≠   │ ∨   │ ∧   │  ×  │  ÷  ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │ ⍇   │  ⍈  ┃       ┃
// ┃       ┃ ?   │ ⍵   │ ∊   │ ⍴   │ ~   │ ↑   │ ↓   │ ⍳   │ ○   │ *   │ ←   │  →  ┃       ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │  ≡  │  ≢  │  ⊣  ┃      ┃
// ┃        ┃ ⍺   │ ⌈   │ ⌊   │ _   │ ∇   │ ∆   │ ∘   │ '   │ ⎕   │  ⍎  │  ⍕  │  ⊢  ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │  ⍪  │  ⍤  │     ┃             ┃
// ┃       ┃     │ ⊂   │ ⊃   │ ∩   │ ∪   │ ⊥   │ ⊤   │ |   │  ⍝  │  ⍀  │  ⌿  ┃             ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "aplx" {

	include "apl(unified)"

	name[Group1]= "APL symbols (APLX unified)";

	key <AB08> { [	U235D,		U236A	] }; // ,: ⍝ ⍪ -- APL Functional Symbol Up Shoe Jot / APL Functional Symbol Comma Bar
	key <AB09> { [	U2340,		U2364	] }; // .: ⍀ ⍤ -- APL Functional Symbol Backslash Bar / APL Functional Symbol Jot Diaeresis
	key <AB10> { [	U233F 			] }; // /: ⌿ -- APL Functional Symbol Slash Bar

	key <AC10> { [	U234E,		U2261	] }; // ;: ⍎ ≡ -- [See B key in SAX layout] / Identical To
	key <AC11> { [	U2355,		U2262	] }; // ': ⍕ ≢ -- [See N key in SAX layout] / Not Identical To

	key <AD11> { [	NoSymbol,	U2347	] }; // [: ⍇ -- Box With Left Arrow
	key <AD12> { [	NoSymbol,	U2348	] }; // ]: ⍈ -- Box With Right Arrow

	key <AE01> { [	NoSymbol,	U2336	] }; // 1: ⌶ -- APL Functional Symbol I-Beam
	key <AE02> { [	NoSymbol,	U236B	] }; // 2: ⍫ -- APL Functional Symbol Del Tilde
	key <AE03> { [	NoSymbol,	U2353	] }; // 3: ⍒ -- APL Functional Symbol Del Stile
	key <AE04> { [	NoSymbol,	U234B	] }; // 4: ⍋ -- APL Functional Symbol Delta Stile
	key <AE05> { [	NoSymbol,	U233D	] }; // 5: ⌽ -- APL Functional Symbol Circle Stile
	key <AE06> { [	NoSymbol,	U2349	] }; // 6: ⍉ -- APL Functional Symbol Circle Backslash
	key <AE07> { [	NoSymbol,	U2296	] }; // 7: ⊖ -- Circled Minus
	key <AE08> { [	NoSymbol,	U235F	] }; // 8: ⍟ -- APL Functional Symbol Circle Star
	key <AE11> { [	NoSymbol,	exclam 	] }; // -:

	key <BKSL> { [	U22A2,		U22A3	] }; // \: ⊢ ⊣ -- Right Tack / Left Tack

	key <TLDE> { [	NoSymbol,	U235E	] }; // `: ⍞ -- APL Functional Symbol Quote Quad
};

// APL language support for the Dyalog keyboard.
// Dyalog Ltd sell this keyboard with APL engravings. The current model is 
// engraved on a Cherry G80. Base languages for US, UK and DK are availible.

// Geoff Streeter, Dyalog Ltd. 2007-09-03
// geoff@dyalog.com
// extended for APL special actions 2008-09-09
// add variant 2010-11-26
// made BKSL and LTGT keys the same to remove a compatibility issue with the UK physical keyboard
// add key (quad equals) 2013-03-12
// add currency 2014-05-23
// add parallel 2014-05-23
// add circle jot 2014-05-23
// add t diaeresis 2014-05-23
// add del diaerisis 2014-05-23
// add quad query 2014-05-23
// add dagger 2014-05-23
// correct spelling of key name LTGT→LSGT 2016-05-26
// add enclose underbar 2017-02-27
// add alpha underbar 2019-03-22
// add omega underbar 2019-03-22
// change all "partial hidden" to "hidden partial" - seems to be a compiler change

// The intention is that this keyboard layout overlays a base keyboard that provides 
// the alphabet and similar. If this keyboard is placed as the 2nd layout then it can
// be reached with a latching shift to increase group by one.

hidden partial alphanumeric_keys
xkb_symbols "dyalog_base" {

// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ⌺   │ ⌶   │ ⍫   │ ⍒   │ ⍋   │ ⌽   │ ⍉   │ ⊖   │ ⍟   │ ⍱   │ ⍲   │ !   │ ⌹   ┃         ┃
// │ ⋄   │ ¨   │ ¯   │ <   │ ≤   │ =   │ ≥   │ >   │ ≠   │ ∨   │ ∧   │ ×   │ ÷   ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ ⍰   │ ⍹   │ ⍷   │ ⌾   │ ⍨   │     │     │ ⍸   │ ⍥   │ ⍣   │ ⍞   │ ⍬   ┃       ┃
// ┃       ┃ ?   │ ⍵   │ ∊   │ ⍴   │ ~   │ ↑   │ ↓   │ ⍳   │ ○   │ *   │ ←   │ →   ┃       ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ ⍶   │     │     │     │ ⍢   │     │ ⍤   │ ⌸   │ ⌷   │ ≡   │ ≢   │ ⊣   ┃      ┃
// ┃        ┃ ⍺   │ ⌈   │ ⌊   │ _   │ ∇   │ ∆   │ ∘   │ '   │ ⎕   │ ⍎   │ ⍕   │ ⊢   ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃  ⊣  │ ⊆   │     │     │     │ ⍭   │ ⍡   │ ∥   │ ⍪   │ ⍙   │ ⍠   ┃             ┃
// ┃       ┃  ⊢  │ ⊂   │ ⊃   │ ∩   │ ∪   │ ⊥   │ ⊤   │ |   │ ⍝   │ ⍀   │ ⌿   ┃             ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛


	key <AB01> { [ U2282,		U2286	] };	// subset of, enclose if simple
	key <AB02> { [ U2283			] };	// superset of
	key <AB03> { [ U2229			] };	// intersection
	key <AB04> { [ U222A			] };	// union
	key <AB05> { [ U22a5,		U236d	] };	// up tack, stile tide
	key <AB06> { [ U22a4,		U2361	] };	// down tack, down tack diaeresis
	key <AB07> { [ bar,		U2225	] };	// vertical line, parallel to
	key <AB08> { [ U235d,		U236a	] };	// up shoe jot, comma bar
	key <AB09> { [ U2340,		U2359	] };	// backslash bar, delta underbar
	key <AB10> { [ U233f,		U2360	] };	// slash bar, quad colon
	key <AC01> { [ U237a,		U2376	] };	// alpha, alpha underscore
	key <AC02> { [ U2308			] };	// left ceiling
	key <AC03> { [ U230a			] };	// left floor
	key <AC04> { [ underscore		] };	// low line
	key <AC05> { [ U2207,		U2362	] };	// nabla, del diaerisis
	key <AC06> { [ U2206			] };	// increment
	key <AC07> { [ U2218,		U2364	] };	// ring operator, jot diaeresis
	key <AC08> { [ apostrophe,	U2338	] };	// quote, key
	key <AC09> { [ U2395,		U2337	] };	// quad, squish quad
	key <AC10> { [ U234e,		U2261	] };	// up tack jot, identical to
	key <AC11> { [ U2355,		U2262	] };	// down tack jot,  not identical to
	key <AD01> { [ question,	U2370	] };	// ?, quad question
	key <AD02> { [ U2375,		U2379	] };	// omega, omega underscore
	key <AD03> { [ U220a,		U2377	] };	// small element of, epsilon underbar
	key <AD04> { [ U2374,		U233E	] };	// rho, circle jot
	key <AD05> { [ asciitilde,	U2368	] };	// tilde, tilde diaeresis
	key <AD06> { [ U2191			] };	// upwards arrow
	key <AD07> { [ U2193			] };	// downwards arrow
	key <AD08> { [ U2373,		U2378	] };	// iota, iota underbar
	key <AD09> { [ U25cb,		U2365	] };	// circle, circle diaeresis
	key <AD10> { [ asterisk,	U2363	] };	// asterisk, star diaeresis
	key <AD11> { [ U2190,		U235e	] };	// left arrow, quote quad
	key <AD12> { [ U2192,		U236c	] };	// right arrow, zilde
	key <AE01> { [ diaeresis,	U2336	] };	// i-beam
	key <AE02> { [ macron,		U236B	] };	// deltilde
	key <AE03> { [ less,		U2352	] };	// downgrade
	key <AE04> { [ U2264,		U234b	] };	// lesseq upgrade
	key <AE05> { [ equal,		U233d	] };	// circlestile
	key <AE06> { [ U2265,		U2349	] };	// greatereq circleslope
	key <AE07> { [ greater,		U2296	] };	// circlebar
	key <AE08> { [ U2260,		U235f	] };	// notequal, circlestar
	key <AE09> { [ U2228,		U2371	] };	// logical or, down caret tilde
	key <AE10> { [ U2227,		U2372	] };	// logical and, up caret tilde
	key <AE11> { [ multiply,	exclam	] };
	key <AE12> { [ division,	U2339	] };	// quad divide
	key <BKSL> { [ U22a2,		U22a3	] };	// right tack, left tack
	key <LSGT> { [ U22a2,		U22a3	] };	// right tack, left tack
	key <TLDE> { [ U22c4,		U233a	] };	// diamond, quad diamond
};

hidden partial keypad_keys
xkb_symbols "dyalog_box" {

// ┌───┬───┬───┬───┐
// │   │   │   │   │
// ├───┼───┼───┼───┤
// │ ┌ │ ┬ │ ┐ │   │
// ├───┼───┼───┤   │
// │ ├ │ ┼ │ ┤ │   │
// ├───┼───┼───┼───┤
// │ └ │ ┴ │ ┘ │   │
// ├───┴───┼───┤   │
// │   ─   │ │ │   │
// └───────┴───┴───┘

	key <KP0>  { [ U2500 ] };	// box drawing light horizontal
	key <KP1>  { [ U2514 ] };	// box drawing light up and right
	key <KP2>  { [ U2534 ] };	// box drawing light up and horizontal
	key <KP3>  { [ U2518 ] };	// box drawing light up and left
	key <KP4>  { [ U251c ] };	// box drawing light vertical and right
	key <KP5>  { [ U253c ] };	// box drawing light vertical and horizontal
	key <KP6>  { [ U2524 ] };	// box drawing light vertical and left
	key <KP7>  { [ U250c ] };	// box drawing light down and right
	key <KP8>  { [ U252c ] };	// box drawing light down and horizontal
	key <KP9>  { [ U2510 ] };	// box drawing light down and left
	key <KPDL> { [ U2502 ] };	// box drawing light vertical
};

hidden partial
xkb_symbols "dyalog_codes" {

//	Layout of private use area for this. In the style of the Unicode book
//
//				APL special actions		F800-F88F
//
//	│F800 F810 F820 F830 F840 F850 F860 F870 F880
//	├────┬────┬────┬────┬────┬────┬────┬────┬────┐
//     0│QT  │LL  │BK  │FX  │Rc  │BP  │PA  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     1│ER  │HO  │ZM  │LN  │LW  │AB  │SA  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     2│TB  │CT  │SC  │MC  │RW  │HT  │RZ  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     3│BT  │PT  │RP  │MR  │Lw  │TH  │AC  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     4│EP  │IN  │NX  │JP  │Rw  │RM  │MA  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     5│UC  │II  │PV  │D1  │Uc  │CB  │OF  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     6│DC  │DI  │RT  │D2  │Dc  │PR  │FS  │    │TO  │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     7│RC  │DP  │RA  │D3  │Ll  │SR  │FA  │    │MO  │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     8│LC  │DB  │ED  │D4  │Rl  │IS  │TT  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     9│US  │RD  │TC  │D5  │Ul  │TL  │FT  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     A│DS  │TG  │NB  │U1  │Dl  │UA  │PL  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     B│RS  │DK  │NS  │U2  │Us  │AO  │CA  │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     C│LS  │OP  │ST  │U3  │Ds  │DO  │    │    │    │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     D│UL  │CP  │EN  │U4  │DD  │GL  │    │    │S1  │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     E│DL  │MV  │IF  │U5  │DH  │CH  │    │    │S2  │
//	├────┼────┼────┼────┼────┼────┼────┼────┼────┤
//     F│RL  │FD  │HK  │Lc  │BH  │PU  │    │    │OS  │
//	└────┴────┴────┴────┴────┴────┴────┴────┴────┘
//
//				APL Function Keys		F700-F7FF
//
//	│F700 ...                           ...  F7F0
//	├────┬────┬────┬────┬....┬────┬────┬────┬────┐
//     0│F0  │F16 │F32 │F48 │    │F192│F208│F224│F240│
//	.
//	.
//	.
//     F│F15 │F31 │F47 │F63 │    │F207│F223│F239│F255│
//	└────┴────┴────┴────┴....┴────┴────┴────┴────┘
//	
//	whilst these locations are defined. Dyalog's "aplkeys/xterm" file copes with
//	normal function keys from the base keyboard rather than this overlay

// ┌─────┐                                                                       ┌───┐
// │ CA  │                                                                       │ZM │
// │ QT  │                                                                       │ZM │
// └─────┘                                                                       └───┘

// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃   CB    ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃   BP    ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃ BT    ┃     │     │     │     │     │     │     │     │     │     │     │     ┃       ┃
// ┃ TB    ┃     │     │     │     │     │     │     │     │     │     │     │     ┃       ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     ┃ TC   ┃
// ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     ┃ ED   ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     ┃             ┃
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     ┃             ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃              MO                   ┃       ┃       ┃       ┃
// ┃       ┃       ┃       ┃              TO                   ┃       ┃       ┃       ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛


	key <BKSP> { [ Uf850,	Uf855	] };	// BP CB
	key <ESC>  { [ Uf800,	Uf86b	] };	// QT CA
	key <FK11> { [ Uf821,	Uf821	] };	// ZM, ZM put this on both, the unshifted one sometimes gets lost
	key <RTRN> { [ Uf828,	Uf829	] };	// ED, TC
	key <SPCE> { [ Uf886,	Uf887	] };	// TO, MO
	key <TAB>  { [ Uf802,	Uf803	] };	// TB, BT

//      ┌─────┐
//      │     │
//      │ BK  │
// ┌────┼─────┼────┐
// │ BH │     │ RM │
// │ PV │ FD  │ NX │
// └────┴─────┴────┘

	key <DOWN> { [ Uf81f		] };	// FD
	key <LEFT> { [ Uf825,	Uf84f	] };	// PV, BH
	key <RGHT> { [ Uf824,	Uf854	] };	// NX, RM
	key <UP>   { [ Uf820		] };	// BK


// ┌───┬───┬───┐
// │PT │LL │UL │
// │CP │LS │US │
// ├───┼───┼───┤
// │CT │RL │DL │
// │DK │RS │DS │
// └───┴───┴───┘

	key <DELE> { [ Uf81b, Uf812 ] };	// DK, CT
	key <END>  { [ Uf80b, Uf80f ] };	// RS, RL
	key <HOME> { [ Uf80c, Uf810 ] };	// LS, LL
	key <INS>  { [ Uf81d, Uf813 ] };	// CP, PT
	key <PGDN> { [ Uf80a, Uf80e ] };	// DS, DL
	key <PGUP> { [ Uf809, Uf80d ] };	// US, UL

// ┌───┬───┬───┬───┐
// │   │RD │TG │LN │
// ├───┼───┼───┼───┤
// │   │   │   │   │
// ├───┼───┼───┤TL │
// │   │   │   │   │
// ├───┼───┼───┼───┤
// │   │   │   │   │
// ├───┴───┼───┤   │
// │       │   │   │
// └───────┴───┴───┘


	key <KPAD> { [ Uf859 ] };	// TL
	key <KPDV> { [ Uf819 ] };	// RD
	key <KPMU> { [ Uf81a ] };	// TG
	key <KPSU> { [ Uf831 ] };	// LN
};

xkb_symbols "dyalog" {

	include "apl(dyalog_base)"
	include "apl(dyalog_box)"
	include "apl(dyalog_codes)"

	name[Group1] = "APL symbols (Dyalog APL)";
};

partial
xkb_symbols "level3" {
 name[Group1] = "APL on Level3";

 //from apl(dyalog_base) -- any way to just include it shifted to level3?

 key <AB01> { [ NoSymbol,	NoSymbol,	U2282,		U2286	] };	// subset of, enclose if simple
 key <AB02> { [ NoSymbol,	NoSymbol,	U2283			] };	// superset of
 key <AB03> { [ NoSymbol,	NoSymbol,	U2229			] };	// intersection
 key <AB04> { [ NoSymbol,	NoSymbol,	U222A			] };	// union
 key <AB05> { [ NoSymbol,	NoSymbol,	U22a5,		U236d	] };	// up tack, stile tide
 key <AB06> { [ NoSymbol,	NoSymbol,	U22a4,		U2361	] };	// down tack, down tack diaeresis
 key <AB07> { [ NoSymbol,	NoSymbol,	bar,		U2225	] };	// vertical line, parallel to
 key <AB08> { [ NoSymbol,	NoSymbol,	U235d,		U236a	] };	// up shoe jot, comma bar
 key <AB09> { [ NoSymbol,	NoSymbol,	U2340,		U2359	] };	// backslash bar, delta underbar
 key <AB10> { [ NoSymbol,	NoSymbol,	U233f,		U2360	] };	// slash bar, quad colon
 key <AC01> { [ NoSymbol,	NoSymbol,	U237a,		U2376	] };	// alpha, alpha underscore
 key <AC02> { [ NoSymbol,	NoSymbol,	U2308			] };	// left ceiling
 key <AC03> { [ NoSymbol,	NoSymbol,	U230a			] };	// left floor
 key <AC04> { [ NoSymbol,	NoSymbol,	underscore		] };	// low line
 key <AC05> { [ NoSymbol,	NoSymbol,	U2207,		U2362	] };	// nabla, del diaerisis
 key <AC06> { [ NoSymbol,	NoSymbol,	U2206			] };	// increment
 key <AC07> { [ NoSymbol,	NoSymbol,	U2218,		U2364	] };	// ring operator, jot diaeresis
 key <AC08> { [ NoSymbol,	NoSymbol,	apostrophe,	U2338	] };	// quote, key
 key <AC09> { [ NoSymbol,	NoSymbol,	U2395,		U2337	] };	// quad, squish quad
 key <AC10> { [ NoSymbol,	NoSymbol,	U234e,		U2261	] };	// up tack jot, identical to
 key <AC11> { [ NoSymbol,	NoSymbol,	U2355,		U2262	] };	// down tack jot,  not identical to
 key <AD01> { [ NoSymbol,	NoSymbol,	question,	U2370	] };	// ?, quad question
 key <AD02> { [ NoSymbol,	NoSymbol,	U2375,		U2379	] };	// omega, omega underscore
 key <AD03> { [ NoSymbol,	NoSymbol,	U220a,		U2377	] };	// small element of, epsilon underbar
 key <AD04> { [ NoSymbol,	NoSymbol,	U2374,		U233E	] };	// rho, circle jot
 key <AD05> { [ NoSymbol,	NoSymbol,	asciitilde,	U2368	] };	// tilde, tilde diaeresis
 key <AD06> { [ NoSymbol,	NoSymbol,	U2191			] };	// upwards arrow
 key <AD07> { [ NoSymbol,	NoSymbol,	U2193			] };	// downwards arrow
 key <AD08> { [ NoSymbol,	NoSymbol,	U2373,		U2378	] };	// iota, iota underbar
 key <AD09> { [ NoSymbol,	NoSymbol,	U25cb,		U2365	] };	// circle, circle diaeresis
 key <AD10> { [ NoSymbol,	NoSymbol,	asterisk,	U2363	] };	// asterisk, star diaeresis
 key <AD11> { [ NoSymbol,	NoSymbol,	U2190,		U235e	] };	// left arrow, quote quad
 key <AD12> { [ NoSymbol,	NoSymbol,	U2192,		U236c	] };	// right arrow, zilde
 key <AE01> { [ NoSymbol,	NoSymbol,	diaeresis,	U2336	] };	// i-beam
 key <AE02> { [ NoSymbol,	NoSymbol,	macron,		U236B	] };	// deltilde
 key <AE03> { [ NoSymbol,	NoSymbol,	less,		U2352	] };	// downgrade
 key <AE04> { [ NoSymbol,	NoSymbol,	U2264,		U234b	] };	// lesseq upgrade
 key <AE05> { [ NoSymbol,	NoSymbol,	equal,		U233d	] };	// circlestile
 key <AE06> { [ NoSymbol,	NoSymbol,	U2265,		U2349	] };	// greatereq circleslope
 key <AE07> { [ NoSymbol,	NoSymbol,	greater,	U2296	] };	// circlebar
 key <AE08> { [ NoSymbol,	NoSymbol,	U2260,		U235f	] };	// notequal, circlestar
 key <AE09> { [ NoSymbol,	NoSymbol,	U2228,		U2371	] };	// logical or, down caret tilde
 key <AE10> { [ NoSymbol,	NoSymbol,	U2227,		U2372	] };	// logical and, up caret tilde
 key <AE11> { [ NoSymbol,	NoSymbol,	multiply,	exclam	] };
 key <AE12> { [ NoSymbol,	NoSymbol,	division,	U2339	] };	// quad divide
 key <BKSL> { [ NoSymbol,	NoSymbol,	U22a2,		U22a3	] };	// right tack, left tack
 key <LSGT> { [ NoSymbol,	NoSymbol,	U22a2,		U22a3	] };	// right tack, left tack
 key <TLDE> { [ NoSymbol,	NoSymbol,	U22c4,		U233a	] };	// diamond, quad diamond
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "ro"

    name[Group1]="Moldavian";
};


// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │   ~ │ !   │ "   │ #   │ ;   │ %   │ :   │ ?   │ *   │ ( ̣  │ )   │ --  │ +   ┃ ⌫ Back  ┃
// │   ` │ 1   │ 2 @ │ 3   │ 4 $ │ 5 € │ 6 ^ │ 7 & │ 8   │ 9   │ 0   │ -   │ =   ┃  space  ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ Ţ Q │ Ê W │ E   │ R   │ T   │ Y   │ U   │ İ   │ O   │ P   │ Ö { │ Ü } ┃ Enter ┃
// ┃Tab ↹  ┃ ţ q │ ê w │ e   │ r   │ t   │ y   │ u   │ i   │ o   │ p   │ ö [ │ ü ] ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ A   │ S   │ D   │ F   │ G   │ H   │ J   │ K   │ L   │Ş    │I    │ /   ┃      ┃
// ┃Caps ⇬  ┃ a   │ s   │ d   │ f   │ g   │ h   │ j   │ k   │ l   │ş    │ı'   │ \   ┃      ┃
// ┣━━━━━━━━┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃             │ Z   │ Ç X │ C   │ V   │ B   │ N   │ M   │Ä    │<    │>    ┃             ┃
// ┃Shift ⇧      │ z   │ ç x │ c   │ v   │ b   │ n   │ m   │ä    │,    │.    ┃Shift ⇧      ┃
// ┣━━━━━━━┳━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣                               ⍽ ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣           Space               ⍽ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛


// A, Ä, B, C, Ç, D, E, Ê, F, G, H, I, İ, J, K, L, M, N, O, Ö, P, R, S, Ş, T, Ţ, U, Ü, V, Y, Z.

partial alphanumeric_keys								
xkb_symbols "gag" {								

    include "us(basic)"

    name[Group1]="Moldavian (Gagauz)";

    key <TLDE> 	{	[	grave,	asciitilde			]	};
    key <AE01> 	{	[	1,	exclam			]	};
    key <AE02> 	{	[	2,	quotedbl,	at	]	};
    key <AE03> 	{	[	3,	numbersign			]	};
    key <AE04> 	{	[	4,	semicolon,	dollar		]	};
    key <AE05> 	{	[	5,	percent,	EuroSign,	cent	]	};
    key <AE06> 	{	[	6,	colon,	asciicircum		]	};
    key <AE07> 	{	[	7,	question,	ampersand		]	};
    key <AE08> 	{	[	8,	asterisk			]	};
    key <AE09> 	{	[	9,	parenleft			]	};
    key <AE10> 	{	[	0,	parenright			]	};
    key <AE11> 	{	[	minus,	underscore			]	};
    key <AE12> 	{	[	equal,	plus			]	};

    key <AD01> 	{	[	tcedilla,	Tcedilla,	q,	Q	]	};
    key <AD02> 	{	[	ecircumflex,	Ecircumflex,	w,	W	]	};
    key <AD03> 	{	[	e,	E			]	};
    key <AD04> 	{	[	r,	R			]	};
    key <AD05> 	{	[	t,	T			]	};
    key <AD06> 	{	[	y,	Y			]	};
    key <AD07> 	{	[	u,	U			]	};
    key <AD08> 	{	[	i,	Iabovedot,	i,	I	]	};
    key <AD09> 	{	[	o,	O			]	};
    key <AD10> 	{	[	p,	P			]	};
    key <AD11> 	{	[	odiaeresis,	Odiaeresis,	bracketleft,	braceleft	]	};
    key <AD12> 	{	[	udiaeresis,	Udiaeresis,	bracketright,	braceright	]	};

    key <AC01> 	{	[	a,	A			]	};
    key <AC02> 	{	[	s,	S			]	};
    key <AC03> 	{	[	d,	D			]	};
    key <AC04> 	{	[	f,	F			]	};
    key <AC05> 	{	[	g,	G			]	};
    key <AC06> 	{	[	h,	H			]	};
    key <AC07> 	{	[	j,	J			]	};
    key <AC08> 	{	[	k,	K			]	};
    key <AC09> 	{	[	l,	L			]	};
    key <AC10> 	{	[	scedilla,	Scedilla			]	};
    key <AC11> 	{	[	idotless,	I,	apostrophe		]	};

    key <AB01> 	{	[	z,	Z			]	};
    key <AB02> 	{	[	ccedilla,	Ccedilla,	x,	X	]	};
    key <AB03> 	{	[	c,	C			]	};
    key <AB04> 	{	[	v,	V			]	};
    key <AB05> 	{	[	b,	B			]	};
    key <AB06> 	{	[	n,	N			]	};
    key <AB07> 	{	[	m,	M			]	};
    key <AB08> 	{	[	adiaeresis,	Adiaeresis			]	};
    key <AB09> 	{	[	comma,	less			]	};
    key <AB10> 	{	[	period,	greater,	slash		]	};

    key <BKSL> 	{	[	backslash,	bar			]	};

    include "level3(ralt_switch)"
};								
// Montenegro keyboard mapping
//
// Initially, a copy of Serbian variants
//

default partial alphanumeric_keys
xkb_symbols "basic" {
  include "rs(latin)"
  name[Group1]= "Montenegrin";

  key <AD06> { [ any, any, zacute, Zacute ] }; // z
  key <AC02> { [ any, any, sacute, Sacute ] }; // s
};

partial alphanumeric_keys
xkb_symbols "cyrillic" {
  include "rs(basic)"
  name[Group1]= "Montenegrin (Cyrillic)";
};

partial alphanumeric_keys
xkb_symbols "cyrillicyz" {
  include "rs(yz)"
  name[Group1]= "Montenegrin (Cyrillic, ZE and ZHE swapped)";
};

partial alphanumeric_keys
xkb_symbols "latinunicode" {
  include "rs(latinunicode)"
  name[Group1]= "Montenegrin (Latin, Unicode)";

  key <AD06> { [ any, any, zacute, Zacute ] }; // z
  key <AC02> { [ any, any, sacute, Sacute ] }; // s
};

partial alphanumeric_keys
xkb_symbols "latinyz" {
  include "rs(latinyz)"
  name[Group1]= "Montenegrin (Latin, QWERTY)";

  key <AB02> { [ any, any, zacute, Zacute ] }; // z
  key <AC02> { [ any, any, sacute, Sacute ] }; // s
};

partial alphanumeric_keys
xkb_symbols "latinunicodeyz" {
  include "rs(latinunicodeyz)"
  name[Group1]= "Montenegrin (Latin, Unicode, QWERTY)";

  key <AB02> { [ any, any, zacute, Zacute ] }; // z
  key <AC02> { [ any, any, sacute, Sacute ] }; // s
};

xkb_symbols "cyrillicalternatequotes" {
  include "rs(alternatequotes)"
  name[Group1]= "Montenegrin (Cyrillic, with guillemets)";
};

xkb_symbols "latinalternatequotes" {
  include "rs(latinalternatequotes)"
  name[Group1]= "Montenegrin (Latin, with guillemets)";

  key <AD06> { [ any, any, zacute,        Zacute         ] }; // z
  key <AC02> { [ any, any, sacute,        Sacute         ] }; // s
  key <LSGT> { [ any, any, guillemotleft, guillemotright ] }; // <
};
// keyboards having the RupeeSign on the 4 key
partial
xkb_symbols "4" {
    key <AE04>	{ [  NoSymbol,   NoSymbol,   U20B9 ]	};
};
// X Keyboard Extension file for Sinhala (Sri Lanka) (2004-04-22)
// Maintainer  : Harshula Jayasuriya <harshula@gmail.com>
// Last Updated: 2011-05-25
// This is a phonetic static mapping for a standard US-English keyboard
// (QWERTY)
// http://www.nongnu.org/sinhala/doc/keymaps/sinhala-keyboard_3.html

// Repaya, Rakaransaya and Yansaya aren't inserted with A-r, R and Y,
// respectively. The problem lies with the XKB infrastructure which
// only allows a one-to-one mapping of keycodes to Unicode codepoints.
// Unfortunately, the 3 mentioned glyphs actually consists of 3
// Unicode codepoints each. The result is that the user must
// manually construct the glyph by typing each of the 3 codepoints.
// ALT-, represents the 'JOIN' key, it requires
// two codepoints, hence it also has to be manually constructed.
// Similarly, ALT-/ representing the 'TOUCH' key requires
// two codepoints.

// Repaya = rayanna,AL,ZWJ
// Rakaransaya = AL,ZWJ,rayanna
// Yansaya = AL,ZWJ,yayanna
// JOIN = AL,ZWJ
// TOUCH = ZWJ,AL

// Where,
// AL = Al Lakuna = ALT-a
// ZWJ = Zero Width Joiner = ALT-/
// rayanna = r
// yayanna = y

default partial alphanumeric_keys
xkb_symbols "sin_phonetic" {

  include "us"
  name[Group1] = "Sinhala (phonetic)";
  key.type[Group1] = "FOUR_LEVEL";

  // q - p
  key <AD01> { [ Sinh_ri, Sinh_rii, Sinh_ru2, Sinh_ruu2 ] };
  key <AD02> { [ Sinh_ae, Sinh_aee, Sinh_ae2, Sinh_aee2 ] };
  key <AD03> { [ Sinh_e, Sinh_ee, Sinh_e2, Sinh_ee2 ] };
  key <AD04> { [ Sinh_ra, Sinh_al, Sinh_ra, NoSymbol ] };
  key <AD05> { [ Sinh_tha, Sinh_thha, Sinh_tta, Sinh_ttha ] };
  key <AD06> { [ Sinh_ya, Sinh_al, NoSymbol, NoSymbol ] };
  key <AD07> { [ Sinh_u, Sinh_uu, Sinh_u2, Sinh_uu2 ] };
  key <AD08> { [ Sinh_i, Sinh_ii, Sinh_i2, Sinh_ii2 ] };
  key <AD09> { [ Sinh_o, Sinh_oo, Sinh_o2, Sinh_oo2 ] };
  key <AD10> { [ Sinh_pa, Sinh_pha, NoSymbol, NoSymbol ] };

  // a - l
  key <AC01> { [ Sinh_a, Sinh_aa, Sinh_al, Sinh_aa2 ] };
  key <AC02> { [ Sinh_sa, Sinh_sha, Sinh_ssha, NoSymbol ] };
  key <AC03> { [ Sinh_dha, Sinh_dhha, Sinh_dda, Sinh_ddha ] };
  key <AC04> { [ Sinh_fa, NoSymbol, Sinh_ai2, Sinh_ai ] };
  key <AC05> { [ Sinh_ga, Sinh_gha, Sinh_nga, NoSymbol ] };
  key <AC06> { [ Sinh_ha, Sinh_h2, Sinh_au2, Sinh_au ] };
  key <AC07> { [ Sinh_ja, Sinh_jha, Sinh_nja, NoSymbol ] };
  key <AC08> { [ Sinh_ka, Sinh_kha, Sinh_lu, Sinh_luu ] };
  key <AC09> { [ Sinh_la, Sinh_lla, Sinh_lu2, Sinh_luu2 ] };

  // z - ?
  key <AB01> { [ Sinh_nya, Sinh_jnya, NoSymbol, NoSymbol ] };
  key <AB02> { [ Sinh_ndha, Sinh_ndda, NoSymbol, NoSymbol ] };
  key <AB03> { [ Sinh_ca, Sinh_cha, NoSymbol, NoSymbol ] };
  key <AB04> { [ Sinh_va, NoSymbol, NoSymbol, NoSymbol ] };
  key <AB05> { [ Sinh_ba, Sinh_bha, NoSymbol, NoSymbol ] };
  key <AB06> { [ Sinh_na, Sinh_nna, Sinh_ng, Sinh_ng2 ] };
  key <AB07> { [ Sinh_ma, Sinh_mba, NoSymbol, NoSymbol ] };
  key <AB08> { [ any, any, Sinh_al, NoSymbol ] };
  key <AB09> { [ any, any, Sinh_kunddaliya, NoSymbol ] };
  key <AB10> { [ any, any, 0x100200d, NoSymbol ] };

  // Space
  include "nbsp(nb2zwnj3s)"

  include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "tam_unicode" {
    include "in(tam_tamilnet)"
    name[Group1]= "Tamil (Sri Lanka, TamilNet '99)";
};

partial alphanumeric_keys
xkb_symbols "tam_TAB" {
    include "in(tam_tamilnet_TAB)"
    name[Group1]= "Tamil (Sri Lanka, TamilNet '99, TAB encoding)";
};

// SINHALA - US, SUBSTITUTES SOME AND ADDS SOME
// =============================================
//
// This started as an upgrade to the first romanized version of
// Sinhala called PTS Pali created in the 1860s. PTS requires
// dots and bars on letters that are rare in fonts, and impossible
// to type. Its singular purpose was to print Tripitaka, the
// collection of Buddhist discourses.
//
// This version covers the entire newer Sinhala phoneme chart
// (Hodiya) that became standard just before the end of the 19th
// century. All the phonemes map to the SBCS. It is easy and
// faster than English to type. It overcomes the setback of
// Unicode Sinhala that it is not compatible with Pali and
// Sanskrit because it encodes two ligatures as base letters and
// the SLS1134 specification matching shape and morpheme sets
// violating Sanskrit orthography.
//
// Most importantly, this romanized version of Sinhala has a
// companion orthographic font that displays the text in the
// native script and a JavaScript converts it to Unicode Sinhala
// and back dramatically increasing Sinhala seen on the web due
// to its ease of use
//
// Dedication:
// Thomas William Rhys Davids, Ven. Udagama Sumangala
// Rev. Fr. A. M. Gunasekara, Rev. Fr. Theodore G. Perera
// Ven. Mettavihari
//
// Maintainer:
// JC Ahangama - sing@ahangama.com
//
partial alphanumeric_keys modifier_keys
xkb_symbols "us" {
  include "us(basic)"
  name[Group1]= "Sinhala (US)";
//
//                   UNSHIFTED,         SHIFT,           ALT
//                   --------------------------------------------
//
  key <AB01> { [             z,    VoidSymbol,    VoidSymbol ] };
  key <AB02> { [             x,    VoidSymbol,    VoidSymbol ] };
  key <AB03> { [             c,      ccedilla,    VoidSymbol ] };
  key <AB04> { [             v,    VoidSymbol,    VoidSymbol ] };
  key <AB05> { [             b,             B,    VoidSymbol ] };
  key <AB06> { [             n,             N,        ntilde ] };
  key <AB07> { [             m,    VoidSymbol,    VoidSymbol ] };
  key <AB08> { [         comma,          less,           UAB ] };
  key <AB09> { [        period,       greater,           UBB ] };
  key <AB10> { [         slash,      question,         U200C ] };

  key <AC01> { [             a,        aacute,    adiaeresis ] };
  key <AC02> { [             s,    VoidSymbol,    VoidSymbol ] };
  key <AC03> { [           eth,           ETH,    VoidSymbol ] };
  key <AC04> { [         thorn,             f,    VoidSymbol ] };
  key <AC05> { [             g,             G,    VoidSymbol ] };
  key <AC06> { [             h,    VoidSymbol,    VoidSymbol ] };
  key <AC07> { [             j,      ccedilla,    VoidSymbol ] };
  key <AC08> { [             k,    VoidSymbol,    VoidSymbol ] };
  key <AC09> { [             l,             L,   ocircumflex ] };
  key <AC10> { [     semicolon,         colon,    VoidSymbol ] };
  key <AC11> { [    apostrophe,      quotedbl,    VoidSymbol ] };

  key <AD01> { [             d,             D,             q ] };
  key <AD02> { [            ae,         acute,    VoidSymbol ] };
  key <AD03> { [             e,        eacute,    ediaeresis ] };
  key <AD04> { [             r,   ucircumflex,    VoidSymbol ] };
  key <AD05> { [             t,    VoidSymbol,    VoidSymbol ] };
  key <AD06> { [             y,    VoidSymbol,    VoidSymbol ] };
  key <AD07> { [             u,        uacute,    udiaeresis ] };
  key <AD08> { [             i,        iacute,    idiaeresis ] };
  key <AD09> { [             o,        oacute,    odiaeresis ] };
  key <AD10> { [             p,    VoidSymbol,    VoidSymbol ] };
  key <AD11> { [   bracketleft,     braceleft,    VoidSymbol ] };
  key <AD12> { [  bracketright,    braceright,    VoidSymbol ] };

  key <AE01> { [             1,        exclam,   dead_macron ] };
  key <AE02> { [             2,            at, dead_belowdot ] };
  key <AE03> { [             3,    numbersign, dead_abovedot ] };
  key <AE04> { [             4,        dollar,      currency ] };
  key <AE05> { [             5,       percent,           UB0 ] };
  key <AE06> { [             6,   asciicircum,    onequarter ] };
  key <AE07> { [             7,     ampersand,       onehalf ] };
  key <AE08> { [             8,      asterisk, threequarters ] };
  key <AE09> { [             9,     parenleft,    VoidSymbol ] };
  key <AE10> { [             0,    parenright,    VoidSymbol ] };
  key <AE11> { [         minus,    underscore,         U2014 ] };
  key <AE12> { [         equal,          plus,    VoidSymbol ] };

  key <BKSL> { [     backslash,           bar,    VoidSymbol ] };
  key <SPCE> { [         space,  nobreakspace,    VoidSymbol ] };
  key <TLDE> { [         grave,    asciitilde,    VoidSymbol ] };
  include "level3(alt_switch)"
};
// Kirghiz (aka Kyrgyz) Standard Keyboard
//
// Standard	 -	Phonetic
// ______________- ________________
// ё1234567890өң     ё1234567890яю
// Ё!"№;%:?*()ӨҢ     Ё!"№;%:?-()ЯЮ
//
// йцукенгшщзхъү     өүертыуиопчшъ
// фывапролджэ       асдфгңйклэь
// ячсмитьбю.(,)     зхжвбнмцщ.(,)

// Authors:
// Timur Jamakeev <ztimur [at] gmail.com>
// Ilyas Bakirov <just_ilyas [at] yahoo.com>
// Yury Fedorov <yury-fedorov [at] prime-task.com>
// Emil Asanov <a7 [at] on.kg>
// Ulan Melisbek <ulan.melisbek [at] gmail.com>


// Kyrgyz standard keyboard
default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]= "Kyrgyz";

    key	<AE01> {	[		1,	    exclam 	]	};
    key	<AE02> {	[		2,        quotedbl	]	};
    key	<AE03> {	[		3,      numerosign	]	};
    key	<AE04> {	[		4,       semicolon	]	};
    key	<AE05> {	[		5,	   percent	]	};
    key	<AE06> {	[		6,	     colon	]	};
    key	<AE07> {	[		7,	  question	]	};
    key	<AE08> {	[		8,	  asterisk	]	};
    key	<AE09> {	[		9,	 parenleft	]	};
    key	<AE10> {	[		0,	parenright	]	};
    key	<AE11> {	[    Cyrillic_o_bar,  		Cyrillic_O_bar		]	};
    key	<AE12> {	[    Cyrillic_en_descender,   	Cyrillic_EN_descender	]	};
    key	<BKSL> {	[    Cyrillic_u_straight,  	Cyrillic_U_straight	]	};
    key	<AB10> {	[	   period,	     comma	]	};
    key <LSGT> {        [           slash,             bar      ]       };

    key	<TLDE> {	[     Cyrillic_io,     Cyrillic_IO	]	};
    key	<AD01> {	[ Cyrillic_shorti, Cyrillic_SHORTI	]	};
    key	<AD02> {	[    Cyrillic_tse,    Cyrillic_TSE	]	};
    key	<AD03> {	[      Cyrillic_u,	Cyrillic_U	]	};
    key	<AD04> {	[     Cyrillic_ka,     Cyrillic_KA	]	};
    key	<AD05> {	[     Cyrillic_ie,     Cyrillic_IE	]	};
    key	<AD06> {	[     Cyrillic_en,     Cyrillic_EN	]	};
    key	<AD07> {	[    Cyrillic_ghe,    Cyrillic_GHE	]	};
    key	<AD08> {	[    Cyrillic_sha,    Cyrillic_SHA	]	};
    key	<AD09> {	[  Cyrillic_shcha,  Cyrillic_SHCHA	]	};
    key	<AD10> {	[     Cyrillic_ze,     Cyrillic_ZE	]	};
    key	<AD11> {	[     Cyrillic_ha,     Cyrillic_HA	]	};
    key	<AD12> {	[	Cyrillic_hardsign,	Cyrillic_HARDSIGN	]	};
    key	<AC01> {	[     Cyrillic_ef,     Cyrillic_EF	]	};
    key	<AC02> {	[   Cyrillic_yeru,   Cyrillic_YERU	]	};
    key	<AC03> {	[     Cyrillic_ve,     Cyrillic_VE	]	};
    key	<AC04> {	[      Cyrillic_a,	Cyrillic_A	]	};
    key	<AC05> {	[     Cyrillic_pe,     Cyrillic_PE	]	};
    key	<AC06> {	[     Cyrillic_er,     Cyrillic_ER	]	};
    key	<AC07> {	[      Cyrillic_o,	Cyrillic_O	]	};
    key	<AC08> {	[     Cyrillic_el,     Cyrillic_EL	]	};
    key	<AC09> {	[     Cyrillic_de,     Cyrillic_DE	]	};
    key	<AC10> {	[    Cyrillic_zhe,    Cyrillic_ZHE	]	};
    key	<AC11> {	[      Cyrillic_e,	Cyrillic_E	]	};
    key	<AB01> {	[     Cyrillic_ya,     Cyrillic_YA	]	};
    key	<AB02> {	[    Cyrillic_che,    Cyrillic_CHE	]	};
    key	<AB03> {	[     Cyrillic_es,     Cyrillic_ES	]	};
    key	<AB04> {	[     Cyrillic_em,     Cyrillic_EM	]	};
    key	<AB05> {	[      Cyrillic_i,	Cyrillic_I	]	};
    key	<AB06> {	[     Cyrillic_te,     Cyrillic_TE	]	};
    key	<AB07> {	[ 	Cyrillic_softsign,	Cyrillic_SOFTSIGN	]	};
    key	<AB08> {	[     Cyrillic_be,     Cyrillic_BE	]	};
    key	<AB09> {	[     Cyrillic_yu,     Cyrillic_YU	]	};
};

// Kyrgyz phonetic layout
partial alphanumeric_keys
xkb_symbols "phonetic" {

    name[Group1]="Kyrgyz (phonetic)";

    key	<AE01> {	[		1,	    	exclam 			]	};
    key	<AE02> {	[		2,        	quotedbl		]	};
    key	<AE03> {	[		3,      	numerosign		]	};
    key	<AE04> {	[		4,     	 	semicolon		]	};
    key	<AE05> {	[		5,    	   	percent			]	};
    key	<AE06> {	[		6, 	     	colon			]	};
    key	<AE07> {	[		7,	  	question		]	};
    key	<AE08> {	[		8,           	minus			]	};
    key	<AE09> {	[		9,	 	parenleft		]	};
    key	<AE10> {	[		0,		parenright		]	};
    key	<AE11> {	[    	Cyrillic_ya,     	Cyrillic_YA		]	};
    key	<AE12> {	[    	Cyrillic_yu,     	Cyrillic_YU		]	};

    key	<AD11> {	[    	Cyrillic_che,		Cyrillic_CHE		]	};
    key	<AD12> {	[    	Cyrillic_sha,    	Cyrillic_SHA		]	};
    key	<BKSL> {	[	Cyrillic_hardsign, 	Cyrillic_HARDSIGN	]	};
    key	<AB09> {	[    	Cyrillic_shcha,    	Cyrillic_SHCHA		]	};
    key	<AB10> {	[      	period, 		comma			]	};
    key	<AB08> {	[	Cyrillic_tse, 		Cyrillic_TSE		]	};
    key	<AC10> {	[	Cyrillic_e,        	Cyrillic_E		]	};
    key	<AC11> {	[	Cyrillic_softsign, 	Cyrillic_SOFTSIGN	]	};
    key	<TLDE> {	[     	Cyrillic_io,     	Cyrillic_IO		]	};

    key	<LatQ> {	[     	Cyrillic_o_bar,  	Cyrillic_O_bar		]	};
    key	<LatZ> {	[     	Cyrillic_ze,     	Cyrillic_ZE		]	};
    key	<LatS> {	[     	Cyrillic_es,     	Cyrillic_ES		]	};
    key	<LatA> {	[     	Cyrillic_a,		Cyrillic_A		]	};
    key	<LatW> {	[     	Cyrillic_u_straight,  	Cyrillic_U_straight	]	};
    key	<LatC> {	[     	Cyrillic_zhe,    	Cyrillic_ZHE		]	};
    key	<LatX> {	[	Cyrillic_ha,     	Cyrillic_HA 		]	};
    key	<LatD> {	[     	Cyrillic_de,		Cyrillic_DE		]	};
    key	<LatE> {	[     	Cyrillic_ie,     	Cyrillic_IE		]	};
    key	<LatV> {	[     	Cyrillic_ve,     	Cyrillic_VE		]	};
    key	<LatF> {	[     	Cyrillic_ef,     	Cyrillic_EF		]	};
    key	<LatT> {	[     	Cyrillic_te,     	Cyrillic_TE		]	};
    key	<LatR> {	[     	Cyrillic_er,     	Cyrillic_ER		]	};
    key	<LatN> {	[     	Cyrillic_en,     	Cyrillic_EN		]	};
    key	<LatB> {	[     	Cyrillic_be,     	Cyrillic_BE		]	};
    key	<LatH> {	[     	Cyrillic_en_descender,  Cyrillic_EN_descender	]	};
    key	<LatG> {	[    	Cyrillic_ghe,    	Cyrillic_GHE		]	};
    key	<LatY> {	[   	Cyrillic_yeru,   	Cyrillic_YERU		]	};
    key	<LatM> {	[     	Cyrillic_em,     	Cyrillic_EM		]	};
    key	<LatJ> {	[ 	Cyrillic_shorti, 	Cyrillic_SHORTI		]	};
    key	<LatU> {	[      	Cyrillic_u,		Cyrillic_U		]	};
    key	<LatK> {	[     	Cyrillic_ka,     	Cyrillic_KA		]	};
    key	<LatI> {	[      	Cyrillic_i,		Cyrillic_I		]	};
    key	<LatO> {	[      	Cyrillic_o,		Cyrillic_O		]	};
    key	<LatL> {	[     	Cyrillic_el,     	Cyrillic_EL		]	};
    key	<LatP> {	[     	Cyrillic_pe,     	Cyrillic_PE		]	};
};
// Nazar Annagurban <nazar_xg@hotmail.com>, 2009

// Default layout (based on Vista Turkmen layout)
default partial
xkb_symbols "basic" {

    include "us"
    name[Group1]="Turkmen";

    key <TLDE> {	[    zcaron, 	Zcaron,		grave,	asciitilde	]	};

    key <AD01> {	[ adiaeresis, 	Adiaeresis,	q,	Q 	]	};
    key <AD11> {	[    ncaron, 	Ncaron,		bracketleft,	braceleft	]	};
    key <AD12> {	[odiaeresis, 	Odiaeresis, 	bracketright,	braceright	]	};

    key <AB02> {	[udiaeresis, 	Udiaeresis,	x,	X	]	};
    key <AB03> {	[  ccedilla, 	Ccedilla,	c,	C	]	};
    key <AB04> {	[    yacute, 	Yacute, 	v,	V	]	};

    key <BKSL> {	[  scedilla, 	Scedilla,	backslash,         bar	]	};

    include "level3(ralt_switch)"
};

// Turkmen Alt-Q Layout
// This layout provides turkmen letter via the AltGr key
partial
xkb_symbols "alt" {

    include "us"
    name[Group1]="Turkmen (Alt-Q)";

    key <AD06> {	[	  y,	Y,	yacute,		Yacute		]	};
    key <AD07> {	[	  u,	U,	udiaeresis,	Udiaeresis	]	};
    key <AD09> {	[	  o,	O,	odiaeresis,	Odiaeresis	]	};

    key <AC01> {	[	  a,	A,	adiaeresis,	Adiaeresis	]	};
    key <AC02> {	[	  s,	S,	scedilla,	Scedilla	]	};

    key <AB01> {	[	  z,	Z,	zcaron,		Zcaron		]	};
    key <AB03> {	[  	  c,	C,	ccedilla,	Ccedilla	]	};
    key <AB06> {	[	  n,	N,	ncaron,		Ncaron		]	};

    include "level3(ralt_switch)"
};
//
// Dzongkha / Tibetan layout for Bhutanese keyboard
//
/////////////////////////////////////////////////////////////////
//
//   Based on the official layout for Dzongkha
//   approved by the Department of Information Technology &
//   Dzongkha Development Authority of the Government of Bhutan
//
//   Copyright (C) 2004, Gregory Mokhin <mokhin@bog.msu.ru>
///////////////////////////////////////////////////////////////// 
//   Version 0.97  2004-01-09  Layout map provided by Chris Fynn
//   Version 1.0   2004-07-29  Some correction by Pema Geyleg <pema_geyleg@druknet.bt>
/////////////////////////////////////////////////////////////////

default partial alphanumeric_keys
xkb_symbols "basic" {
      name[Group1]= "Dzongkha";

      key <TLDE> { [      0x1000F09, 0x1000F0A, 0x1000F6C, 0x1000F6D ]	};

// numbers e.a.
      key <AE01> { [      0x1000F21, 0x1000F04, 1, exclam ]	};
      key <AE02> { [      0x1000F22, 0x1000F05, 2, at     ]	};
      key <AE03> { [      0x1000F23, 0x1000F06, 3, numbersign ]	};
      key <AE04> { [      0x1000F24, 0x1000F48, 4, dollar  ]	};
      key <AE05> { [      0x1000F25, 0x1000F70, 5, percent ]	};
      key <AE06> { [      0x1000F26, 0x1000F08, 6, 0x1000F01 ]	};
      key <AE07> { [      0x1000F27, 0x1000F38, 7, ampersand ]	};
      key <AE08> { [      0x1000F28, 0x1000F34, 8, asterisk ]	};
      key <AE09> { [      0x1000F29, 0x1000F3C, 9, parenleft ]	};
      key <AE10> { [      0x1000F20, 0x1000F3D, 0, parenright ]	};
      key <AE11> { [      0x1000F14, 0x1000F7F, minus, underscore ]	};
      key <AE12> { [      0x1000F0D, 0x1000F11, equal, plus ]	};

// consonants ( ka kha ga nga )
      key <AD01> { [      0x1000F40, 0x1000F90, 0x1000F88, VoidSymbol  ]	};
      key <AD02> { [      0x1000F41, 0x1000F91, 0x1000F89, VoidSymbol  ]	};
      key <AD03> { [      0x1000F42, 0x1000F92, 0x1000F6E, 0x1000F6F] 	};
      key <AD04> { [      0x1000F44, 0x1000F94, 0x1000F83, 0x1000F82  ]	};

// vowels ( i u e o )
      key <AD05> { [      0x1000F72, 0x1000F80, 0x1000F1A, VoidSymbol  ]	};
      key <AD06> { [      0x1000F74, 0x1000F84, 0x1000F1B, VoidSymbol  ]	};
      key <AD07> { [      0x1000F7A, 0x1000F7B, 0x1000F1C, VoidSymbol ]	};
      key <AD08> { [      0x1000F7C, 0x1000F7D, 0x1000F1D, 0x1000F17  ]	};

// consonants ( ca cha ja nya )
      key <AD09> { [      0x1000F45, 0x1000F95, 0x1000F1E, 0x1000F18   ]	};
      key <AD10> { [      0x1000F46, 0x1000F96, 0x1000F1F, 0x1000F19   ]	};
      key <AD11> { [      0x1000F47, 0x1000F97, bracketleft, 0x1000F3E ]	};
      key <AD12> { [      0x1000F49, 0x1000F99, bracketright, 0x1000F3F  ]	};

// consonants ( ta tha da na pa pha ba ma tsa tsha dza wa )
      key <AC01> { [      0x1000F4F, 0x1000F9F, 0x1000F4A, 0x1000F9A ]	};
      key <AC02> { [      0x1000F50, 0x1000FA0, 0x1000F4B, 0x1000F9B ]	};
      key <AC03> { [      0x1000F51, 0x1000FA1, 0x1000F4C, 0x1000F9C ]	};
      key <AC04> { [      0x1000F53, 0x1000FA3, 0x1000F4E, 0x1000F9E ]	};
      key <AC05> { [      0x1000F54, 0x1000FA4, 0x1002039, guillemotleft ]	};
      key <AC06> { [      0x1000F55, 0x1000FA5, 0x100203A, guillemotright ]	};
      key <AC07> { [      0x1000F56, 0x1000FA6, 0x1000F37, 0x1000F35 ]	};
      key <AC08> { [      0x1000F58, 0x1000FA8, 0x1000F7E, VoidSymbol ]	};
      key <AC09> { [      0x1000F59, 0x1000FA9, 0x1000F39, VoidSymbol ]	};
      key <AC10> { [      0x1000F5A, 0x1000FAA, colon, semicolon ]	};
      key <AC11> { [      0x1000F5B, 0x1000FAB, apostrophe, quotedbl ]	};

// TODO: BKSL and LSGT are from gb layout, are there any variants?
      key <BKSL> { [      0x1000F5D, 0x1000FAD, backslash, 0x1000FBA ]	};
      key <LSGT> { [      0x1000F0D, 0x1000F11, 0x1000F10, 0x1000F0F ]	};

// consonants ( zha za 'a ya ra la sha sa ha a )
      key <AB01> { [      0x1000F5E, 0x1000FAE, 0x1000F13, 0x1000F36 ]	};
      key <AB02> { [      0x1000F5F, 0x1000FAF, 0x1000FBE, 0x1000FBF ]	};
      key <AB03> { [      0x1000F60, 0x1000F71, 0x1000F03, 0x1000FB0 ]	};
      key <AB04> { [      0x1000F61, 0x1000FB1, 0x1000F12, 0x1000FBB ]	};
      key <AB05> { [      0x1000F62, 0x1000FB2, 0x1000F6A, 0x1000FBC ]	};
      key <AB06> { [      0x1000F63, 0x1000FB3, 0x1000F8A, 0x1000F8B ]	};
      key <AB07> { [      0x1000F64, 0x1000FB4, 0x1000F65, 0x1000FB5 ]	};
      key <AB08> { [      0x1000F66, 0x1000FB6, comma, less ]	};
      key <AB09> { [      0x1000F67, 0x1000FB7, period, greater ]	};
      key <AB10> { [      0x1000F68, 0x1000FB8, slash, question ]	};

// space
      key <SPCE> { [ 0x1000F0B, space, 0x1000F0C, nobreakspace ] };

    include "level3(ralt_switch)"
};
// Typographic Keyboard
// Sergei Stolyarov <sergei@regolit.com>

// Initial contribution by Alexey Ten <alexeyten+deb@gmail.com>
// Additional contribution and code cleanup by Artur Dryomov <artur.dryomov@gmail.com>

// Mainly based on the layout proposed by Ilya Birman
// http://ilyabirman.ru/projects/typography-layout/

default partial
xkb_symbols "base" {

    // 1st keyboard row
    key <TLDE> { [ NoSymbol,   NoSymbol,              NoSymbol,              approxeq ] }; // "~"
    key <AE01> { [ NoSymbol,   NoSymbol,           onesuperior,            exclamdown ] }; // "1"
    key <AE02> { [ NoSymbol,   NoSymbol,           twosuperior,               onehalf ] }; // "2"
    key <AE03> { [ NoSymbol,   NoSymbol,         threesuperior,              onethird ] }; // "3"
    key <AE04> { [ NoSymbol,   NoSymbol,                dollar,            onequarter ] }; // "4"
    key <AE05> { [ NoSymbol,   NoSymbol,                 U2030,              NoSymbol ] }; // "5"
    key <AE06> { [ NoSymbol,   NoSymbol,               uparrow,              NoSymbol ] }; // "6"
    key <AE07> { [ NoSymbol,   NoSymbol,             ampersand,          questiondown ] }; // "7"
    key <AE08> { [ NoSymbol,   NoSymbol,              infinity,             oneeighth ] }; // "8"
    key <AE09> { [ NoSymbol,   NoSymbol,             leftarrow,              NoSymbol ] }; // "9"
    key <AE10> { [ NoSymbol,   NoSymbol,            rightarrow,              NoSymbol ] }; // "0"
    key <AE11> { [ NoSymbol,   NoSymbol,                emdash,                endash ] }; // "-"
    key <AE12> { [ NoSymbol,   NoSymbol,              notequal,             plusminus ] }; // "="

    // 2nd keyboard row
    key <AD03> { [ NoSymbol,   NoSymbol,              EuroSign,              NoSymbol ] }; // "e"
    key <AD04> { [ NoSymbol,   NoSymbol,            registered,              NoSymbol ] }; // "r"
    key <AD05> { [ NoSymbol,   NoSymbol,             trademark,              NoSymbol ] }; // "t"
    key <AD06> { [ NoSymbol,   NoSymbol,                   yen,              NoSymbol ] }; // "y"
    key <AD07> { [ NoSymbol,   NoSymbol,                 U20B4,              NoSymbol ] }; // "u"
    key <AD10> { [ NoSymbol,   NoSymbol,                 acute,           doubleacute ] }; // "p"
    key <AD11> { [ NoSymbol,   NoSymbol,           bracketleft,             braceleft ] }; // "["
    key <AD12> { [ NoSymbol,   NoSymbol,          bracketright,            braceright ] }; // "]"

    // 3rd keyboard row
    key <AC01> { [ NoSymbol,   NoSymbol,                 U0301,              NoSymbol ] }; // "a"
    key <AC02> { [ NoSymbol,   NoSymbol,               section,              NoSymbol ] }; // "s"
    key <AC03> { [ NoSymbol,   NoSymbol,                degree,              division ] }; // "d"
    key <AC04> { [ NoSymbol,   NoSymbol,              sterling,              NoSymbol ] }; // "f"
    key <AC06> { [ NoSymbol,   NoSymbol,                 U20BD,              NoSymbol ] }; // "h"
    key <AC07> { [ NoSymbol,   NoSymbol,    doublelowquotemark,    singlelowquotemark ] }; // "j"
    key <AC08> { [ NoSymbol,   NoSymbol,   leftdoublequotemark,   leftsinglequotemark ] }; // "k"
    key <AC09> { [ NoSymbol,   NoSymbol,  rightdoublequotemark,  rightsinglequotemark ] }; // "l"
    key <AC10> { [ NoSymbol,   NoSymbol,   leftsinglequotemark,               minutes ] }; // ";"
    key <AC11> { [ NoSymbol,   NoSymbol,  rightsinglequotemark,               seconds ] }; // "'"

    // 4th keyboard row
    key <AB02> { [ NoSymbol,   NoSymbol,              multiply,                 U22C5 ] }; // "x"
    key <AB03> { [ NoSymbol,   NoSymbol,             copyright,                  cent ] }; // "c"
    key <AB04> { [ NoSymbol,   NoSymbol,             downarrow,                 U25CA ] }; // "v"
    key <AB07> { [ NoSymbol,   NoSymbol,                 U2212,    enfilledcircbullet ] }; // "m"
    key <AB08> { [ NoSymbol,   NoSymbol,         guillemotleft,                  less ] }; // ","
    key <AB09> { [ NoSymbol,   NoSymbol,        guillemotright,               greater ] }; // "."
    key <AB10> { [ NoSymbol,   NoSymbol,              ellipsis,              NoSymbol ] }; // "/"

    // 5th keyboard row
    key <SPCE> { [    space,      space,          nobreakspace,          nobreakspace ] }; // " "

    // Reference
    // U+2030 PER MILLE SIGN
    // U+20B4 HRYVNIA SIGN
    // U+0301 COMBINING ACUTE ACCENT
    // U+20BD RUBLE SIGN
    // U+22C5 DOT OPERATOR
    // U+25CA LOZENGE
    // U+2212 MINUS SIGN
};
partial modifier_keys
xkb_symbols "ralt" {
    key <RALT>	{ type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "lwin" {
    key <LWIN>	{ type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "lwin-altgr" {
    key <LWIN>	{ type[Group1]="FOUR_LEVEL", [ Super_L, Super_L, Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "rwin" {
    key <RWIN>	{ type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "rwin-altgr" {
    key <RWIN>	{ type[Group1]="FOUR_LEVEL", [ Super_R, Super_R, Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "menu" {
    key <MENU>	{ type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "menu-altgr" {
    key <MENU>	{ type[Group1]="FOUR_LEVEL", [ Menu, Menu, Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "rctrl" {
    key <RCTL> { type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "rctrl-altgr" {
    key <RCTL> { type[Group1]="FOUR_LEVEL", [ Control_R, Control_R, Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "lctrl" {
    key <LCTL> { type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "lctrl-altgr" {
    key <LCTL> { type[Group1]="FOUR_LEVEL", [ Control_L, Control_L, Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "caps" {
    key <CAPS> { type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "caps-altgr" {
    key <CAPS> { type[Group1]="FOUR_LEVEL", [ Caps_Lock, Caps_Lock, Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "102" {
    key <LSGT> { type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "102-altgr" {
    key <LSGT> { type[Group1]="FOUR_LEVEL", [ less, greater, Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "paus" {
    key <PAUS> { type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "prsc" {
    key <PRSC> { type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};

partial modifier_keys
xkb_symbols "sclk" {
    key <SCLK> { type[Group1]="TWO_LEVEL", [ Multi_key, Multi_key ] };
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]= "Arabic";

    key.type[Group1]="FOUR_LEVEL";
    
    key <TLDE> {  [     Arabic_thal,        Arabic_shadda,            Arabic_percent,               U0609 ]};  // ‎ذ‎ ‎◌ّ‎     ‎٪‎ ‎؉‎
    key <AE01> {  [               1,               exclam,                  Arabic_1,            NoSymbol ]};  // 1 !     ١
    key <AE02> {  [               2,                   at,                  Arabic_2,            NoSymbol ]};  // 2 @     ٢
    key <AE03> {  [               3,           numbersign,                  Arabic_3,            NoSymbol ]};  // 3 #     ٣
    key <AE04> {  [               4,               dollar,                  Arabic_4,            NoSymbol ]};  // 4 $     ٤
    key <AE05> {  [               5,              percent,                  Arabic_5,               U2030 ]};  // 5 %     ٥ ‰
    key <AE06> {  [               6,          asciicircum,                  Arabic_6,            NoSymbol ]};  // 6 ^     ٦
    key <AE07> {  [               7,            ampersand,                  Arabic_7,            NoSymbol ]};  // 7 &     ٧
    key <AE08> {  [               8,             asterisk,                  Arabic_8,            NoSymbol ]};  // 8 *     ٨
    key <AE09> {  [               9,           parenright,                  Arabic_9,            NoSymbol ]};  // 9 )     ٩
    key <AE10> {  [               0,            parenleft,                  Arabic_0,            NoSymbol ]};  // 0 (      ٠
    key <AE11> {  [           minus,           underscore,                    endash,               U2011 ]};  // - _     – Non-Breaking-Hyphen
    key <AE12> {  [           equal,                 plus,                  notequal,               U2248 ]};  // = +     ≠ ≈ 

    key <AD01> {  [      Arabic_dad,         Arabic_fatha,                  NoSymbol,               U2066 ]};  // ‎ض‎ ‎◌َ       LEFT‑TO‑RIGHT ISOLATE
    key <AD02> {  [      Arabic_sad,      Arabic_fathatan,                  NoSymbol,               U2067 ]};  // ‎ص‎ ‎◌ً       RIGHT‑TO‑LEFT ISOLATE
    key <AD03> {  [     Arabic_theh,         Arabic_damma,                  NoSymbol,               U2068 ]};  // ‎ث‎ ‎◌ُ       FIRST STRONG ISOLATE
    key <AD04> {  [      Arabic_qaf,      Arabic_dammatan,                  NoSymbol,               U2069 ]};  // ‎ق‎ ‎◌ٌ       POP DIRECTIONAL ISOLATE
    key <AD05> {  [      Arabic_feh,                UFEF9,                Arabic_veh,            NoSymbol ]};  // ‎ف‎ ‎ﻹ     ‎ڤ
    key <AD06> {  [    Arabic_ghain,Arabic_hamzaunderalef,                  NoSymbol,               U202A ]};  // ‎غ‎ ‎إ‎       LEFT-TO-RIGHT-EMBEDDING
    key <AD07> {  [      Arabic_ain,                grave,                  NoSymbol,               U202B ]};  // ‎ع‎ `       RIGHT-TO-LEFT EMBEDDING
    key <AD08> {  [       Arabic_ha,             division,                  NoSymbol,               U202C ]};  // ‎ه‎ ÷       POP DIRECTIONAL FORMATTING
    key <AD09> {  [     Arabic_khah,             multiply,                  NoSymbol,            NoSymbol ]};  // ‎خ‎ ×
    key <AD10> {  [      Arabic_hah,     Arabic_semicolon,                  NoSymbol,               U200E ]};  // ‎ح‎ ؛       LEFT-TO-RIGHT MARK
    key <AD11> {  [     Arabic_jeem,                 less,              Arabic_tcheh,               U200F ]};  // ‎ج‎ <     ‎چ‎ RIGHT-TO-LEFT MARK
    key <AD12> {  [      Arabic_dal,              greater,                  NoSymbol,               U061C ]};  // ‎د‎ >       ARABIC LETTER MARK

    key <AC01> {  [    Arabic_sheen,         Arabic_kasra,                  NoSymbol,            NoSymbol ]};  // ‎ش‎ ‎◌ِ‎
    key <AC02> {  [     Arabic_seen,      Arabic_kasratan,                  NoSymbol,            NoSymbol ]};  // ‎س‎ ‎◌ٍ‎
    key <AC03> {  [      Arabic_yeh,         bracketright,                  NoSymbol,            NoSymbol ]};  // ‎ي‎ ]
    key <AC04> {  [      Arabic_beh,          bracketleft,                Arabic_peh,            NoSymbol ]};  // ‎ب‎ [     ‎پ‎ 
    key <AC05> {  [      Arabic_lam,               U0FEF7,                  NoSymbol,            NoSymbol ]};  // ‎ل‎ ‎ﻷ‎
    key <AC06> {  [     Arabic_alef,   Arabic_hamzaonalef,                     U0671,            NoSymbol ]};  // ‎ا‎ ‎أ     ‎ٱ‎ 
    key <AC07> {  [      Arabic_teh,       Arabic_tatweel,                  NoSymbol,            NoSymbol ]};  // ‎ت‎ ‎ـ‎
    key <AC08> {  [     Arabic_noon,         Arabic_comma,                     U066B,            NoSymbol ]};  // ‎ن‎ ‎،‎     ‎٫‎
    key <AC09> {  [     Arabic_meem,                slash,                  NoSymbol,            NoSymbol ]};  // ‎م‎ /
    key <AC10> {  [      Arabic_kaf,                colon,                Arabic_gaf,            NoSymbol ]};  // ‎ك‎ :     ‎گ‎
    key <AC11> {  [      Arabic_tah,             quotedbl,                     U27E9,               U200D ]};  // ‎ط‎ "     ⟩ ZWJ
    key <BKSL> {  [       backslash,             ellipsis,                     U27E8,               U202F ]};  // \ …     ⟨ NNBSP

    key <LSGT> {  [             bar,            brokenbar,                  NoSymbol,            NoSymbol ]};  // | ¦ 
    key <AB01> { [Arabic_hamzaonyeh,           asciitilde,            guillemotright,               U203A ]};  // ‎ئ‎ ~     » ›
    key <AB02> {  [    Arabic_hamza,         Arabic_sukun,             guillemotleft,               U2039 ]};  // ‎ء‎ ◌ْ     « ‹
    key <AB03> { [Arabic_hamzaonwaw,           braceright,                  NoSymbol,            NoSymbol ]};  // ‎ؤ }
    key <AB04> {  [       Arabic_ra,            braceleft,                  NoSymbol,            NoSymbol ]};  // ‎ر‎ {
    key <AB05> {  [           UFEFB,                UFEF5,                  NoSymbol,            NoSymbol ]};  // ‎ﻻ‎ ‎ﻵ‎
    key <AB06> {[Arabic_alefmaksura,   Arabic_maddaonalef,   Arabic_superscript_alef,            NoSymbol ]};  // ‎ى‎ ‎آ‎     ‎◌ٰ‎ 
    key <AB07> { [Arabic_tehmarbuta,           apostrophe,                  NoSymbol,            NoSymbol ]};  // ‎ة‎ '
    key <AB08> {  [      Arabic_waw,                comma,                     U066C,            NoSymbol ]};  // ‎و‎ ,     ‎٬
    key <AB09> {  [     Arabic_zain,               period,                Arabic_jeh,            NoSymbol ]};  // ‎ز‎ .     ‎ژ‎
    key <AB10> {  [      Arabic_zah, Arabic_question_mark,                     U066D,               U200C ]};  // ‎ظ‎ ‎؟‎     ‎٭‎ ZWNJ
    
    include       "level3(ralt_switch)"
};

// Synonym for the default
partial alphanumeric_keys
xkb_symbols "qwerty" {
    include "ara(basic)"
    name[Group1]= "Arabic (QWERTY)";
};


// Replaces the Western numeral signs with Arabic-script digits on the keypad, pushing the Western digits to the third level accessible by the right alt key.
// As this set of definitions is unlisted, it is not usable without parallel mapping on the numeric row in the ara(digits) layout which includes it.
partial hidden keypad_keys
xkb_symbols "digits_KP" {
    
    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD";

    key <KP7>  { [ KP_Home,   Arabic_7, 7, NoSymbol ] };
    key <KP8>  { [ KP_Up,     Arabic_8, 8, NoSymbol ] };
    key <KP9>  { [ KP_Prior,  Arabic_9, 9, NoSymbol ] };

    key <KP4>  { [ KP_Left,   Arabic_4, 4, NoSymbol ] };
    key <KP5>  { [ KP_Begin,  Arabic_5, 5, NoSymbol ] };
    key <KP6>  { [ KP_Right,  Arabic_6, 6, NoSymbol ] };

    key <KP1>  { [ KP_End,    Arabic_1, 1, NoSymbol ] };
    key <KP2>  { [ KP_Down,   Arabic_2, 2, NoSymbol ] };
    key <KP3>  { [ KP_Next,   Arabic_3, 3, NoSymbol ] };

    key <KP0>  { [ KP_Insert, Arabic_0, 0, NoSymbol ] };
    
    include       "kpdl(momayyezoss)"
};

// Replaces the Western numeral signs with Arabic-script digits on the numeric row, pushing the Western digits to the third level accessible by the right alt key.
partial alphanumeric_keys
xkb_symbols "digits" {

    include       "ara(basic)"
    
    name[Group1]= "Arabic (Eastern Arabic numerals)";

    key <TLDE> { [Arabic_thal,Arabic_shadda, percent,U2030]};
    key <AE01> { [ Arabic_1,         exclam, 1, NoSymbol ] };
    key <AE02> { [ Arabic_2,             at, 2, NoSymbol ] };
    key <AE03> { [ Arabic_3,     numbersign, 3, NoSymbol ] };
    key <AE04> { [ Arabic_4,         dollar, 4, NoSymbol ] };
    key <AE05> { [ Arabic_5, Arabic_percent, 5, U0609    ] };
    key <AE06> { [ Arabic_6,    asciicircum, 6, NoSymbol ] };
    key <AE07> { [ Arabic_7,      ampersand, 7, NoSymbol ] };
    key <AE08> { [ Arabic_8,       asterisk, 8, NoSymbol ] };
    key <AE09> { [ Arabic_9,     parenright, 9, NoSymbol ] };
    key <AE10> { [ Arabic_0,      parenleft, 0, NoSymbol ] };

    include       "ara(digits_KP)"
};

// Synonym for the layout with the Latin-script and Arabic-script digits switched
partial alphanumeric_keys
xkb_symbols "qwerty_digits" {
    include "ara(digits)"
    name[Group1]= "Arabic (QWERTY, Eastern Arabic numerals)";
};


partial alphanumeric_keys
xkb_symbols "azerty" {
    include "ara(basic)"
    name[Group1]= "Arabic (AZERTY)";

	// The North African Arabic keyboard differs from the Middle East one
	// by the numeric row; it follows French keyboard style.
	//
	// PROBLEM: some characters are inaccessible: ! @ # $ % ^ *
	// Should they go elsewhere?  Replacing " ' that are now doubled?
	// Also, dead_circumflex and dead_diaeresis from French keyboard
	// as well as ugrave are missing, which questions the utility of the
	// other accentuated Latin letters. Maybe this is useful only with
	// a French keyboard in Group1? Then, shouldn't Group1 be filled?

    key <AE01> {  [       ampersand,               1      ]       };
    key <AE02> {  [          eacute,               2      ]       };
    key <AE03> {  [        quotedbl,               3      ]       };
    key <AE04> {  [      apostrophe,               4      ]       };
    key <AE05> {  [       parenleft,               5      ]       };
    key <AE06> {  [           minus,               6      ]       };
    key <AE07> {  [          egrave,               7      ]       };
    key <AE08> {  [      underscore,               8      ]       };
    key <AE09> {  [        ccedilla,               9      ]       };
    key <AE10> {  [          agrave,               0      ]       };
    key <AE11> {  [      parenright,          degree      ]       };
};

partial alphanumeric_keys
xkb_symbols "azerty_digits" {
    include "ara(azerty)"
    name[Group1]= "Arabic (AZERTY, Eastern Arabic numerals)";

    key <AE01> { [      ampersand, Arabic_1, 1, NoSymbol ] };
    key <AE02> { [         eacute, Arabic_2, 2, NoSymbol ] };
    key <AE03> { [       quotedbl, Arabic_3, 3, NoSymbol ] };
    key <AE04> { [     apostrophe, Arabic_4, 4, NoSymbol ] };
    key <AE05> { [      parenleft, Arabic_5, 5, NoSymbol ] };
    key <AE06> { [          minus, Arabic_6, 6, NoSymbol ] };
    key <AE07> { [         egrave, Arabic_7, 7, NoSymbol ] };
    key <AE08> { [     underscore, Arabic_8, 8, NoSymbol ] };
    key <AE09> { [       ccedilla, Arabic_9, 9, NoSymbol ] };
    key <AE10> { [         agrave, Arabic_0, 0, NoSymbol ] };
};


// Arabic keyboard using Buckwalter transliteration
// http://www.qamus.org/transliteration.htm
// Martin Vidner

partial alphanumeric_keys
xkb_symbols "buckwalter" {
    name[Group1]= "Arabic (Buckwalter)";

    // ARABIC LETTER SUPERSCRIPT ALEF
    key <TLDE> {  [       0x1000670,  Arabic_shadda       ]       };

    // Arabic_0 .. Arabic_9 do not work in Kate,
    // Unicode never seems to work worse.
    key <AE01> {  [       0x1000661,   VoidSymbol         ]       };
    key <AE02> {  [       0x1000662,   VoidSymbol         ]       };
    key <AE03> {  [       0x1000663,   VoidSymbol         ]       };
    key <AE04> {  [       0x1000664,   Arabic_sheen       ]       };
    key <AE05> {  [       0x1000665,   Arabic_percent     ]       };
    key <AE06> {  [       0x1000666,   VoidSymbol         ]       };
    key <AE07> {  [       0x1000667,   Arabic_hamzaonwaw  ]       };
    key <AE08> {  [       0x1000668,   Arabic_thal        ]       };
    // ORNATE LEFT PARENTHESIS
    key <AE09> {  [       0x1000669,   0x100fd3e          ]       };
    // ORNATE RIGHT PARENTHESIS
    key <AE10> {  [       0x1000660,   0x100fd3f          ]       };
    key <AE11> {  [       minus,       Arabic_tatweel     ]       };
    key <AE12> {  [       equal,       plus               ]       };

    key <AD01> {  [      Arabic_qaf,   VoidSymbol         ]       };
    key <AD02> {  [      Arabic_waw,   Arabic_hamzaonwaw  ]       };
    key <AD03> {  [      VoidSymbol,   Arabic_ain         ]       };
    key <AD04> {  [      Arabic_ra,    VoidSymbol         ]       };
    key <AD05> {  [      Arabic_teh,   Arabic_tah         ]       };
    key <AD06> {  [      Arabic_yeh,   Arabic_alefmaksura ]       };
    key <AD07> {  [      Arabic_damma, VoidSymbol         ]       };
    key <AD08> {  [      Arabic_kasra, Arabic_hamzaunderalef ]    };
    key <AD09> {  [      Arabic_sukun, Arabic_hamzaonalef ]       };
    key <AD10> {  [      Arabic_tehmarbuta, VoidSymbol    ]       };
    // ARABIC LETTER ALEF WASLA
    key <AD11> {  [      VoidSymbol,   0x1000671          ]       };
    key <AD12> {  [      VoidSymbol,   Arabic_hamzaonyeh  ]       };

    key <AC01> {  [    Arabic_fatha,   Arabic_alef        ]       };
    key <AC02> {  [    Arabic_seen,    Arabic_sad         ]       };
    key <AC03> {  [    Arabic_dal,     Arabic_dad         ]       };
    key <AC04> {  [    Arabic_feh,     Arabic_fathatan    ]       };
    key <AC05> {  [    Arabic_ghain,   VoidSymbol         ]       };
    key <AC06> {  [    Arabic_ha,      Arabic_hah         ]       };
    key <AC07> {  [    Arabic_jeem,    VoidSymbol         ]       };
    key <AC08> {  [    Arabic_kaf,     Arabic_kasratan    ]       };
    key <AC09> {  [    Arabic_lam,     VoidSymbol         ]       };
    key <AC10> {  [    Arabic_semicolon, VoidSymbol       ]       };
    key <AC11> {  [    Arabic_hamza,   VoidSymbol         ]       };

    key <BKSL> {  [    VoidSymbol,     Arabic_maddaonalef ]       };

    key <AB01> {  [    Arabic_zain,    Arabic_zah         ]       };
    key <AB02> {  [    Arabic_khah,    VoidSymbol         ]       };
    key <AB03> {  [    VoidSymbol,     VoidSymbol         ]       };
    key <AB04> {  [    Arabic_theh,    VoidSymbol         ]       };
    key <AB05> {  [    Arabic_beh,     VoidSymbol         ]       };
    key <AB06> {  [    Arabic_noon,    Arabic_dammatan    ]       };
    key <AB07> {  [    Arabic_meem,    VoidSymbol         ]       };
    key <AB08> {  [    Arabic_comma,   Arabic_hamzaunderalef ]    };
    // ARABIC FULL STOP (Urdu)
    key <AB09> {  [    0x10006d4,      Arabic_hamzaonalef ]       };
    key <AB10> {  [    VoidSymbol,     Arabic_question_mark ]     };
};

partial alphanumeric_keys
xkb_symbols "olpc" {

    include "ara(basic)"

    name[Group1]= "Arabic (OLPC)";

    // This OLPC layout comprises the following changes in comparison to the default Arabic one:
    //  ‣ Arabic and European digits are swapped (which entails swapping of the percent and permille signs).
    //  ‣ Lām-ʾalif is eliminated. People type as they pronounce, and lam-alef is just a visual formatting of the
    //    sequence and thus arguably not used on the keyboard. This frees four slots which are used for the following three changes.
    //  ‣ The <TLDE> characters move:
    //     • Thal from <TLDE> to <AB05>
    //     • Shadda from <TLDE> to <AD05>
    //  ‣ £ and € obtain the <AE06> and <AE07> keys, the ^ and & signs previously occupying them take seat at <AB05> and <AC05>.
    //  ‣ The <TLDE> key gets grave ` and asciitilde ~ as on English keyboards.
    //  ‣ In sum the grave and asciitilde are present twice, as their erstwhile places are not removed.
    //  ‣ The braces }{ take the place of the less-than and greater-than >< signs,
    //    but these the place of kasra and kasratan which establish themselves in the braces’ former steads.
    //  ‣ The … character on <BKSL> is replaced by |, because OLPC laptops have no <LSGT> key installed where the bar is else placed.
    
    key <TLDE> {  [           grave,      asciitilde, percent, U2030     ] };

    key <AE01> {  [       Arabic_1,          exclam,  1                  ] };
    key <AE02> {  [       Arabic_2,              at,  2                  ] };
    key <AE03> {  [       Arabic_3,      numbersign,  3                  ] };
    key <AE04> {  [       Arabic_4,          dollar,  4                  ] };
    key <AE05> {  [       Arabic_5,  Arabic_percent,  5,       U0609     ] };
    key <AE06> {  [       Arabic_6,        sterling,  6                  ] };
    key <AE07> {  [       Arabic_7,        EuroSign,  7                  ] };
    key <AE08> {  [       Arabic_8,        asterisk,  8                  ] };
    key <AE09> {  [       Arabic_9,      parenright,  9                  ] };
    key <AE10> {  [       Arabic_0,       parenleft,  0                  ] };

    key <AD05> {  [      Arabic_feh,   Arabic_shadda  ] };

    key <AD11> {  [     Arabic_jeem,      braceright  ] };
    key <AD12> {  [      Arabic_dal,       braceleft  ] };

    key <AC01> {  [    Arabic_sheen,         greater  ] };
    key <AC02> {  [     Arabic_seen,            less  ] };
    key <AC05> {  [      Arabic_lam,       ampersand  ] };
    key <BKSL> {  [       backslash,             bar  ] };

    key <AB03> {  [ Arabic_hamzaonwaw,   Arabic_kasra ] };
    key <AB04> {  [       Arabic_ra,  Arabic_kasratan ] };
    key <AB05> {  [     Arabic_thal,      asciicircum ] };

    include "group(olpc)"
};

partial alphanumeric_keys
xkb_symbols "mac" {
    
    //This is a layout that is compatible with macbooks

    include "ara(digits)"
    name[Group1]= "Arabic (Macintosh)";
    
    key <AE11> {  [            minus,      underscore      ]     };
    key <AE12> {  [            equal,            plus      ]     };
    
    key <TLDE> {  [   Arabic_tatweel,     VoidSymbol       ]	 };
    key <AD03> {  [      Arabic_theh,     Arabic_kasra     ]     };
    key <AD04> {  [       Arabic_qaf,     Arabic_kasratan  ]     };
    key <AD05> {  [       Arabic_feh,     Arabic_damma     ]     };
    key <AD06> {  [     Arabic_ghain,     Arabic_dammatan  ]     };
    key <AD07> {  [       Arabic_ain,     Arabic_sukun     ]     };
    key <AD08> {  [        Arabic_ha,     Arabic_shadda    ]     };
    key <AD09> {  [      Arabic_khah,     bracketright     ]     };
    key <AD10> {  [       Arabic_hah,     bracketleft      ]     };
    key <AD11> {  [      Arabic_jeem,     braceright        ]     };
    key <AD12> {  [Arabic_tehmarbuta,     braceleft       ]     };
    
    key <AC01> {  [    Arabic_sheen,     guillemotright     ]     };
    key <AC02> {  [     Arabic_seen,     guillemotleft    ]     };
    key <AC03> {  [      Arabic_yeh,     Arabic_alefmaksura]     };
    key <AC04> {  [      Arabic_beh,     0x1000670         ]     };
    key <AC05> {  [      Arabic_lam,     VoidSymbol        ]     };
    key <AC06> {  [     Arabic_alef,   Arabic_maddaonalef  ]     };
    key <AC07> {  [      Arabic_teh,     0x1000671         ]     };
    key <AC08> {  [     Arabic_noon,     VoidSymbol        ]     };
    key <AC09> {  [     Arabic_meem,     VoidSymbol        ]     };
    key <AC10> {  [      Arabic_kaf,            colon      ]     };
    key <AC11> {  [      Arabic_semicolon,      quotedbl   ]     };
    
    key <BKSL> {  [       backslash,             bar       ]     };
    
    key <LSGT> {  [   Arabic_tatweel,     VoidSymbol               ]     };
    key <AB01> {  [       Arabic_zah,     VoidSymbol               ]     };
    key <AB02> {  [       Arabic_tah,     VoidSymbol               ]     };
    key <AB03> {  [      Arabic_thal,     Arabic_hamzaonyeh        ]     };
    key <AB04> {  [       Arabic_dal,     Arabic_hamza             ]     };
    key <AB05> {  [      Arabic_zain,     Arabic_hamzaonalef       ]     };
    key <AB06> {  [        Arabic_ra,     Arabic_hamzaunderalef    ]     };
    key <AB07> {  [       Arabic_waw,     Arabic_hamzaonwaw        ]     };
    key <AB08> {  [     Arabic_comma,     greater                     ]     };
    key <AB09> {  [           period,     less                  ]     };
    key <AB10> {  [            slash,     Arabic_question_mark     ]     };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/ara(sun_type6)"
};

partial alphanumeric_keys
xkb_symbols "basic_ext" {

    name[Group1]= "Arabic (Arabic numerals, extensions in the 4th level)";

    key.type[Group1]="FOUR_LEVEL";
    
    key <TLDE> {  [     Arabic_thal,        Arabic_shadda,            Arabic_percent,         Arabic_ddal ]};  // ‎ذ‎ ‎◌ّ‎      ‎٪‎ ‎ڈ‎
    key <AE01> {  [               1,               exclam,                  Arabic_1,             Farsi_1 ]};  // 1 !      ١ ۱
    key <AE02> {  [               2,                   at,                  Arabic_2,             Farsi_2 ]};  // 2 @      ٢ ۲
    key <AE03> {  [               3,           numbersign,                  Arabic_3,             Farsi_3 ]};  // 3 #      ٣ ۳
    key <AE04> {  [               4,               dollar,                  Arabic_4,             Farsi_4 ]};  // 4 $      ٤ ۴
    key <AE05> {  [               5,              percent,                  Arabic_5,             Farsi_5 ]};  // 5 %      ٥ ۵
    key <AE06> {  [               6,            Farsi_yeh,                  Arabic_6,             Farsi_6 ]};  // 6 ‎ی‎      ٦ ۶
    key <AE07> {  [               7,            ampersand,                  Arabic_7,             Farsi_7 ]};  // 7 &      ٧ ۷
    key <AE08> {  [               8,             asterisk,                  Arabic_8,             Farsi_8 ]};  // 8 *      ٨ ۸
    key <AE09> {  [               9,           parenright,                  Arabic_9,             Farsi_9 ]};  // 9 )      ٩ ۹
    key <AE10> {  [               0,            parenleft,                  Arabic_0,             Farsi_0 ]};  // 0 (      ٠ ۰
    key <AE11> {  [           minus,           underscore,                    endash,               U2011 ]};  // - _     – Non-Breaking-Hyphen
    key <AE12> {  [           equal,                 plus,                  notequal,               U2248 ]};  // = +     ≠ ≈ 

    key <AD01> {  [      Arabic_dad,         Arabic_fatha,                     U0689,               U2066 ]};  // ‎ض‎ ‎◌َ     ډ LEFT‑TO‑RIGHT ISOLATE
    key <AD02> {  [      Arabic_sad,      Arabic_fathatan,                     U06D5,               U2067 ]};  // ‎ص‎ ‎◌ً     ە RIGHT‑TO‑LEFT ISOLATE
    key <AD03> {  [     Arabic_theh,         Arabic_damma,                     U067F,               U2068 ]};  // ‎ث‎ ‎◌ُ     ٿ FIRST STRONG ISOLATE
    key <AD04> {  [      Arabic_qaf,      Arabic_dammatan,                     U06A6,               U2069 ]};  // ‎ق‎ ‎◌ٌ     ڦ POP DIRECTIONAL ISOLATE
    key <AD05> {  [      Arabic_feh,                UFEF9,                Arabic_veh,               U068D ]};  // ‎ف‎ ‎ﻹ     ‎ڤ ‎ڍ‎
    key <AD06> {  [    Arabic_ghain,Arabic_hamzaunderalef,                     U0685,               U202A ]};  // ‎غ‎ ‎إ‎     ‎څ‎ LEFT-TO-RIGHT-EMBEDDING
    key <AD07> {  [      Arabic_ain,          Arabic_rreh,           Arabic_heh_goal,               U202B ]};  // ‎ع‎ ‎ڑ‎     ‎ہ‎ RIGHT-TO-LEFT EMBEDDING
    key <AD08> {  [       Arabic_ha,             division,    Arabic_heh_doachashmee,               U202C ]};  // ‎ه‎ ÷     ‎ھ‎ POP DIRECTIONAL FORMATTING
    key <AD09> {  [     Arabic_khah,             multiply,                     U0681,               U0687 ]};  // ‎خ‎ ×     ‎ځ‎ ‎ڇ‎
    key <AD10> {  [      Arabic_hah,     Arabic_semicolon,                     U0683,               U200E ]};  // ‎ح‎ ؛     ‎ڃ‎ LEFT-TO-RIGHT MARK
    key <AD11> {  [     Arabic_jeem,                 less,              Arabic_tcheh,               U200F ]};  // ‎ج‎ <     ‎چ‎ RIGHT-TO-LEFT MARK
    key <AD12> {  [      Arabic_dal,              greater,                     U0684,               U061C ]};  // ‎د‎ >     ‎ڄ‎ ARABIC LETTER MARK

    key <AC01> {  [    Arabic_sheen,         Arabic_kasra,                     U06C6,               U06C9 ]};  // ‎ش‎ ‎◌ِ‎     ‎ۆ‎ ‎ۉ‎
    key <AC02> {  [     Arabic_seen,      Arabic_kasratan,                     U067C,               U0680 ]};  // ‎س‎ ‎◌ٍ‎     ‎ټ‎ ‎ڀ‎
    key <AC03> {  [      Arabic_yeh,         bracketright,                     U06D0,               U06CD ]};  // ‎ي‎ ]     ‎ې‎ ‎ۍ‎
    key <AC04> {  [      Arabic_beh,          bracketleft,                Arabic_peh,               U067B ]};  // ‎ب‎ [     ‎پ‎ ‎ٻ‎
    key <AC05> {  [      Arabic_lam,               U0FEF7,                     U076A,               U0658 ]};  // ‎ل‎ ‎ﻷ‎     ‎ݪ‎  ٘‎◌‎
    key <AC06> {  [     Arabic_alef,   Arabic_hamzaonalef,                     U0671,  Arabic_noon_ghunna ]};  // ‎ا‎ ‎أ     ‎ٱ‎ ‎ں‎
    key <AC07> {  [      Arabic_teh,       Arabic_tatweel,                     U067D,               U067A ]};  // ‎ت‎ ‎ـ‎     ‎ٽ‎ ٺ‎ 
    key <AC08> {  [     Arabic_noon,         Arabic_comma,                     U066B,               U06BB ]};  // ‎ن‎ ‎،‎     ‎٫‎ ڻ‎
    key <AC09> {  [     Arabic_meem,                slash,                     U06B3,               U06B1 ]};  // ‎م‎ /     ‎ڳ‎ ‎ڱ‎
    key <AC10> {  [      Arabic_kaf,                colon,                Arabic_gaf,        Arabic_keheh ]};  // ‎ك‎ :     ‎گ‎ ‎ک‎
    key <AC11> {  [      Arabic_tah,             quotedbl,                     U27E9,               U200D ]};  // ‎ط‎ "     ⟩ ZWJ
    key <BKSL> {  [       backslash,             ellipsis,                     U27E8,               U202F ]};  // \ …     ⟨ NNBSP

    key <LSGT> {  [             bar,            brokenbar,                     U06C0,               U0620 ]};  // | ¦     ‎ۀ‎ ‎ؠ‎
    key <AB01> { [Arabic_hamzaonyeh,           asciitilde,            guillemotright,               U203A ]};  // ‎ئ‎ ~     » ›
    key <AB02> {  [    Arabic_hamza,         Arabic_sukun,             guillemotleft,               U2039 ]};  // ‎ء‎ ◌ْ     « ‹
    key <AB03> { [Arabic_hamzaonwaw,           braceright,                     U06C7,               U0677 ]};  // ‎ؤ }     ‎ۇ‎ ‎ٷ‎
    key <AB04> {  [       Arabic_ra,            braceleft,                     U0693,               U0699 ]};  // ‎ر‎ {     ‎ړ ‎ڙ‎
    key <AB05> {  [           UFEFB,                UFEF5,                     U06AB,               U06AD ]};  // ‎ﻻ‎ ‎ﻵ‎     ‎ګ‎ ‎ڭ‎
    key <AB06> {[Arabic_alefmaksura,   Arabic_maddaonalef,   Arabic_superscript_alef,    Arabic_yeh_baree ]};  // ‎ى‎ ‎آ‎     ‎◌ٰ‎ ‎ے‎
    key <AB07> { [Arabic_tehmarbuta,           apostrophe,           Arabic_fullstop,               U06AA ]};  // ‎ة‎ '     ۔ ‎ڪ‎
    key <AB08> {  [      Arabic_waw,                comma,                     U066C,               U06CB ]};  // ‎و‎ ,     ‎٬‎ ‎ۋ‎
    key <AB09> {  [     Arabic_zain,               period,                Arabic_jeh,               U0696 ]};  // ‎ز‎ .     ‎ژ‎ ‎ږ‎
    key <AB10> {  [      Arabic_zah, Arabic_question_mark,               Arabic_tteh,               U200C ]};  // ‎ظ‎ ‎؟‎     ‎ٹ‎ ZWNJ
    
    include       "level3(ralt_switch)"
};

// Replaces the Western numeral signs with Arabic-script digits on the keypad, pushing the Western digits to the third level accessible by the right alt key.
// As this set of definitions is unlisted, it is not usable without parallel mapping on the numeric row in the ara(basic_ext_digits) layout which includes it.
partial hidden keypad_keys
xkb_symbols "basic_ext_digits_KP" {
    
    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD";

    key <KP7>  { [ KP_Home,   Arabic_7, 7, Farsi_7 ] };
    key <KP8>  { [ KP_Up,     Arabic_8, 8, Farsi_8 ] };
    key <KP9>  { [ KP_Prior,  Arabic_9, 9, Farsi_9 ] };

    key <KP4>  { [ KP_Left,   Arabic_4, 4, Farsi_4 ] };
    key <KP5>  { [ KP_Begin,  Arabic_5, 5, Farsi_5 ] };
    key <KP6>  { [ KP_Right,  Arabic_6, 6, Farsi_6 ] };

    key <KP1>  { [ KP_End,    Arabic_1, 1, Farsi_1 ] };
    key <KP2>  { [ KP_Down,   Arabic_2, 2, Farsi_2 ] };
    key <KP3>  { [ KP_Next,   Arabic_3, 3, Farsi_3 ] };

    key <KP0>  { [ KP_Insert, Arabic_0, 0, Farsi_0 ] };
    
    include       "kpdl(momayyezoss)"
};

// Replaces the Western numeral signs with Arabic-script digits on the numeric row, pushing the Western digits to the third level accessible by the right alt key.
// The alternative numeral glyphs used in some languages that employ the Arabic script are featured in the fourth layer.
partial alphanumeric_keys
xkb_symbols "basic_ext_digits" {

    include       "ara(basic_ext)"
    
    name[Group1]= "Arabic (Eastern Arabic numerals, extensions in the 4th level)";

    key <TLDE> { [Arabic_thal,Arabic_shadda, percent, Arabic_ddal ]};
    key <AE01> { [ Arabic_1,         exclam, 1, Farsi_1 ] };
    key <AE02> { [ Arabic_2,             at, 2, Farsi_2 ] };
    key <AE03> { [ Arabic_3,     numbersign, 3, Farsi_3 ] };
    key <AE04> { [ Arabic_4,         dollar, 4, Farsi_4 ] };
    key <AE05> { [ Arabic_5, Arabic_percent, 5, Farsi_5 ] };
    key <AE06> { [ Arabic_6,      Farsi_yeh, 6, Farsi_6 ] };
    key <AE07> { [ Arabic_7,      ampersand, 7, Farsi_7 ] };
    key <AE08> { [ Arabic_8,       asterisk, 8, Farsi_8 ] };
    key <AE09> { [ Arabic_9,     parenright, 9, Farsi_9 ] };
    key <AE10> { [ Arabic_0,      parenleft, 0, Farsi_0 ] };

    include       "ara(basic_ext_digits_KP)"
};

// In this layout the Ugaritic characters get the places of the Arabic characters with the matching sound values.
partial alphanumeric_keys
xkb_symbols "uga" {

    name[Group1]= "Ugaritic instead of Arabic";

    key.type[Group1]="TWO_LEVEL";

    key <TLDE> { [   U1038F,      NoSymbol       ]};  // 𐎏
    key <AE01> { [        1,      exclam         ]};  // 1 !
    key <AE02> { [        2,      at             ]};  // 2 @
    key <AE03> { [        3,      numbersign     ]};  // 3 #
    key <AE04> { [        4,      dollar         ]};  // 4 $
    key <AE05> { [        5,      percent        ]};  // 5 %
    key <AE06> { [        6,      asciicircum    ]};  // 6 ^
    key <AE07> { [        7,      ampersand      ]};  // 7 &
    key <AE08> { [        8,      asterisk       ]};  // 8 *
    key <AE09> { [        9,      parenleft      ]};  // 9 (
    key <AE10> { [        0,      parenright     ]};  // 0 )
    key <AE11> { [    minus,      underscore     ]};  // - _
    key <AE12> { [    equal,      plus           ]};  // = +

    key <AD01> { [   U1039D,      NoSymbol       ]};  // 𐎝
    key <AD02> { [   U10395,      NoSymbol       ]};  // 𐎕
    key <AD03> { [   U10398,      NoSymbol       ]};  // 𐎘
    key <AD04> { [   U10396,      NoSymbol       ]};  // 𐎖
    key <AD05> { [   U10394,      NoSymbol       ]};  // 𐎔
    key <AD06> { [   U10399,      NoSymbol       ]};  // 𐎙
    key <AD07> { [   U10393,      grave          ]};  // 𐎓 `
    key <AD08> { [   U10385,      division       ]};  // 𐎅 ÷
    key <AD09> { [   U10383,      multiply       ]};  // 𐎃 ×
    key <AD10> { [   U10388,      semicolon      ]};  // 𐎈 ;
    key <AD11> { [   U10382,      greater        ]};  // 𐎂 >
    key <AD12> { [   U10384,      less           ]};  // 𐎄 <

    key <AC01> { [   U1038C,      U27E8          ]};  // 𐎌 ⟨
    key <AC02> { [   U10392,      U27E9          ]};  // 𐎒 ⟩
    key <AC03> { [   U1038A,      bracketleft    ]};  // 𐎊 [
    key <AC04> { [   U10381,      bracketright   ]};  // 𐎁 ]
    key <AC05> { [   U1038D,      NoSymbol       ]};  // 𐎍
    key <AC06> { [   U10380,      NoSymbol       ]};  // 𐎀
    key <AC07> { [   U1039A,      NoSymbol       ]};  // 𐎚
    key <AC08> { [   U10390,      NoSymbol       ]};  // 𐎐
    key <AC09> { [   U1038E,      slash          ]};  // 𐎎 /
    key <AC10> { [   U1038B,      colon          ]};  // 𐎋:
    key <AC11> { [   U10389,      quotedbl       ]};  // 𐎉  "
    key <BKSL> { [backslash,      ellipsis       ]};  // \ …

    key <LSGT> { [      bar,      endash         ]};  // | –
    key <AB01> { [   U1039B,      guillemotleft  ]};  // 𐎛 «
    key <AB02> { [ NoSymbol,      guillemotright ]};  //   »
    key <AB03> { [   U1039C,      braceleft      ]};  // 𐎜 {
    key <AB04> { [   U10397,      braceright     ]};  // 𐎗 }
    key <AB05> { [   U1039F,      U2039          ]};  // 𐎟 ‹
    key <AB06> { [ question,      U203A          ]};  // ? ›
    key <AB07> { [   U002BC,      apostrophe     ]};  // ʼ '
    key <AB08> { [   U10386,      comma          ]};  // 𐎆 ,
    key <AB09> { [   U10387,      period         ]};  // 𐎇 .
    key <AB10> { [   U10391,      periodcentered ]};  // 𐎑 ·
};
// Most keyboards have the EuroSign engraved on the E key
partial
xkb_symbols "e" {
    key <AD03>	{ [  NoSymbol,   NoSymbol,   EuroSign,	NoSymbol ]	};
};

// Many Apple keyboards have the EuroSign engraved on the 2 key
partial
xkb_symbols "2" {
    key <AE02>	{ [  NoSymbol,   NoSymbol,   EuroSign,	NoSymbol ]	};
};

// Some keyboards have the EuroSign engraved on the 4 key
partial
xkb_symbols "4" {
    key <AE04>	{ [  NoSymbol,   NoSymbol,   EuroSign,	NoSymbol ]	};
};

// Many keyboards have the EuroSign engraved on the 5 key
partial
xkb_symbols "5" {
    key <AE05>	{ [  NoSymbol,   NoSymbol,   EuroSign,	NoSymbol ]	};
};
default partial alphanumeric_keys
xkb_symbols "tswana" {

    include "us"

    name[Group1]= "Tswana";

    key <AC10> { [ semicolon,	    colon,  0x01000324,  0x01000324 ] };	//COMBINING DIAERESIS BELOW	
    key <AC11> { [apostrophe,    quotedbl,  0x01000301,  0x01000308 ] };	//COMBINING ACUTE ACCENT, COMBINING DIAERESIS
    key <TLDE> { [     grave,  asciitilde,  0x01000300,  0x01000303 ] };	//COMBINING GRAVE ACCENT, COMBINING TILDE
    key <AE06> { [   	   6, asciicircum,  0x01000302 	       	    ] };	//COMBINING CIRCUMFLEX ACCENT
    key <AE08> { [	   8,    asterisk,  0x01000307,  0x01000323 ] };	//COMBINING DOT ABOVE, COMBINING DOT BELOW
    key <AE09> { [	   9,   parenleft,  0x01000306	            ] };	//COMBINING BREVE
    key <AE10> { [	   0,  parenright,  0x0100030c 	            ] };	//COMBINING CARON
    key <AE11> { [     minus,  underscore,  0x01000304,  0x01000331 ] };	//COMBINING MACRON,COMBINING MACRON BELOW  
  	
    include "level3(ralt_switch)"
};
// 10-dot patterns on the home row + v and n
default partial alphanumeric_keys
xkb_symbols "home_row" {
    include "brai(keypad)"

    name[Group1]="Braille";

    key <AC04>	{ [ braille_dot_1 ] };
    key <AC03>	{ [ braille_dot_2 ] };
    key <AC02>	{ [ braille_dot_3 ] };
    key <AC07>	{ [ braille_dot_4 ] };
    key <AC08>	{ [ braille_dot_5 ] };
    key <AC09>	{ [ braille_dot_6 ] };
    key <AC01>	{ [ braille_dot_7 ] };
    key <AC10>	{ [ braille_dot_8 ] };
    key <AB04>	{ [ braille_dot_9 ] };
    key <AB06>	{ [ braille_dot_10 ] };
};

// 6-dot patterns for the left hand
partial alphanumeric_keys
xkb_symbols "left_hand" {
    include "brai(keypad_left)"

    name[Group1]="Braille (left-handed)";

    key <AC03>	{ [ braille_dot_1 ] };
    key <AC02>	{ [ braille_dot_2 ] };
    key <AC01>	{ [ braille_dot_3 ] };
    key <AC04>	{ [ braille_dot_4 ] };
    key <AB04>	{ [ braille_dot_5 ] };
    key <AB05>	{ [ braille_dot_6 ] };
};

// 6-dot patterns for the left hand
partial alphanumeric_keys
xkb_symbols "left_hand_invert" {
    include "brai(left_hand)"

    name[Group1]="Braille (left-handed inverted thumb)";

    key <AB05>	{ [ braille_dot_5 ] };
    key <AB04>	{ [ braille_dot_6 ] };
};

// 6-dot patterns for the right hand
partial alphanumeric_keys
xkb_symbols "right_hand" {
    include "brai(keypad)"

    name[Group1]="Braille (right-handed)";

    key <AC07>	{ [ braille_dot_1 ] };
    key <AB06>	{ [ braille_dot_2 ] };
    key <AB05>	{ [ braille_dot_3 ] };
    key <AC08>	{ [ braille_dot_4 ] };
    key <AC10>	{ [ braille_dot_5 ] };
    key <AC09>	{ [ braille_dot_6 ] };
};

// 6-dot patterns for the right hand
partial alphanumeric_keys
xkb_symbols "right_hand_invert" {
    include "brai(right_hand)"

    name[Group1]="Braille (right-handed inverted thumb)";

    key <AB05>	{ [ braille_dot_2 ] };
    key <AB06>	{ [ braille_dot_3 ] };
};

// 6-dot patterns on the keypad
hidden partial keypad_keys
xkb_symbols "keypad" {
    key <KP4>	{ [ braille_dot_1 ] };
    key <KP1>	{ [ braille_dot_2 ] };
    key <KP0>	{ [ braille_dot_3 ] };
    key <KP5>	{ [ braille_dot_4 ] };
    key <KP6>	{ [ braille_dot_5 ] };
    key <KPAD>	{ [ braille_dot_6 ] };
};

// 6-dot patterns on the keypad with left hand
hidden partial keypad_keys
xkb_symbols "keypad_left" {
    key <KPMU>	{ [ braille_dot_1 ] };
    key <KPDV>	{ [ braille_dot_2 ] };
    key <NMLK>	{ [ braille_dot_3 ] };
    key <KPSU>	{ [ braille_dot_4 ] };
    key <KPAD>	{ [ braille_dot_5 ] };
    key <KPEN>	{ [ braille_dot_6 ] };
};
// Iranian keyboard layout

////////////////////////////////////////
// Persian layout,
// based on
// Information Technology – Layout of Persian Letters and Symbols on Computer Keyboards
// ISIRI 9147 – 1st Edition
// Institute of Standards and Industrial Research of Iran
// http://www.isiri.org/UserStd/DownloadStd.aspx?id=9147
// http://behnam.esfahbod.info/standards/isiri-keyboard-9147.pdf
//
// Author: Behnam Esfahbod <behnam@esfahbod.info>
//

default partial alphanumeric_keys
xkb_symbols "pes" {
    name[Group1]= "Persian";

    include "ir(pes_part_basic)"
    include "ir(pes_part_ext)"

    include "nbsp(zwnj2nb3nnb4)"
    include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "pes_keypad" {
    name[Group1]= "Persian (with Persian keypad)";

    include "ir(pes_part_basic)"
    include "ir(pes_part_ext)"
    include "ir(pes_part_keypad)"

    include "nbsp(zwnj2nb3nnb4)"
    include "level3(ralt_switch)"
};

hidden partial alphanumeric_keys
xkb_symbols "pes_part_basic" {

    // Persian digits
    key <AE01> { [ Farsi_1,	exclam,		grave			] };
    key <AE02> { [ Farsi_2,	0x100066c,	at			] };
    key <AE03> { [ Farsi_3,	0x100066b,	numbersign		] };
    key <AE04> { [ Farsi_4,	0x100fdfc,	dollar			] };
    key <AE05> { [ Farsi_5,	0x100066a,	percent			] };
    key <AE06> { [ Farsi_6,	multiply,	asciicircum		] };
    key <AE07> { [ Farsi_7,	Arabic_comma,	ampersand		] };
    key <AE08> { [ Farsi_8,	asterisk,	enfilledcircbullet	] };
    key <AE09> { [ Farsi_9,	parenright,	0x100200e		] };
    key <AE10> { [ Farsi_0,	parenleft,	0x100200f		] };

    // Persian letters and symbols
    key <AD01> { [ Arabic_dad,		Arabic_sukun,		degree		] };
    key <AD02> { [ Arabic_sad,		Arabic_dammatan,	VoidSymbol	] };
    key <AD03> { [ Arabic_theh,		Arabic_kasratan,	0x13a4		] };
    key <AD04> { [ Arabic_qaf,		Arabic_fathatan,	VoidSymbol	] };
    key <AD05> { [ Arabic_feh,		Arabic_damma,		VoidSymbol	] };
    key <AD06> { [ Arabic_ghain,	Arabic_kasra,		VoidSymbol	] };
    key <AD07> { [ Arabic_ain,		Arabic_fatha,		VoidSymbol	] };
    key <AD08> { [ Arabic_heh,		Arabic_shadda,		0x100202d	] };
    key <AD09> { [ Arabic_khah,		bracketright,		0x100202e	] };
    key <AD10> { [ Arabic_hah,		bracketleft,		0x100202c	] };
    key <AD11> { [ Arabic_jeem,		braceright,		0x100202a	] };
    key <AD12> { [ Arabic_tcheh,	braceleft,		0x100202b	] };

    key <AC01> { [ Arabic_sheen,	Arabic_hamzaonwaw,	VoidSymbol	] };
    key <AC02> { [ Arabic_seen,		Arabic_hamzaonyeh,	VoidSymbol	] };
    key <AC03> { [ Farsi_yeh,		Arabic_yeh,		Arabic_alefmaksura ] };
    key <AC04> { [ Arabic_beh,		Arabic_hamzaunderalef,	VoidSymbol	] };
    key <AC05> { [ Arabic_lam,		Arabic_hamzaonalef,	VoidSymbol	] };
    key <AC06> { [ Arabic_alef,		Arabic_maddaonalef,	0x1000671	] };
    key <AC07> { [ Arabic_teh,		Arabic_tehmarbuta,	VoidSymbol	] };
    key <AC08> { [ Arabic_noon,		guillemotright,		0x100fd3e	] };
    key <AC09> { [ Arabic_meem,		guillemotleft,		0x100fd3f	] };
    key <AC10> { [ Arabic_keheh,	colon,			semicolon	] };
    key <AC11> { [ Arabic_gaf,		Arabic_semicolon,	quotedbl	] };

    key <AB01> { [ Arabic_zah,		Arabic_kaf,		VoidSymbol	] };
    key <AB02> { [ Arabic_tah,		0x1000653,		VoidSymbol	] };
    key <AB03> { [ Arabic_zain,		Arabic_jeh,		VoidSymbol	] };
    key <AB04> { [ Arabic_ra,		Arabic_superscript_alef,0x1000656	] };
    key <AB05> { [ Arabic_thal,		0x100200c,		0x100200d	] };
    key <AB06> { [ Arabic_dal,		Arabic_hamza_above,	Arabic_hamza_below	] };
    key <AB07> { [ Arabic_peh,		Arabic_hamza,		ellipsis	] };
    key <AB08> { [ Arabic_waw,		greater,		comma		] };
    key <AB09> { [ period,		less,			apostrophe	] };
    key <AB10> { [ slash,		Arabic_question_mark,	question	] };

    key <TLDE> { [ 0x100200d,		division,		asciitilde	] };
    key <AE11> { [ minus,		Arabic_tatweel,		underscore	] };
    key <AE12> { [ equal,		plus,			0x1002212	] };
    key <BKSL> { [ backslash,		bar,			0x1002010	] };
};

hidden partial alphanumeric_keys
xkb_symbols "pes_part_ext" {

    // Persian and ASCII digits
    key <AE01> { [ Farsi_1,	exclam,		grave,			1	] };
    key <AE02> { [ Farsi_2,	0x100066c,	at,			2	] };
    key <AE03> { [ Farsi_3,	0x100066b,	numbersign,		3	] };
    key <AE04> { [ Farsi_4,	0x100fdfc,	dollar,			4	] };
    key <AE05> { [ Farsi_5,	0x100066a,	percent,		5	] };
    key <AE06> { [ Farsi_6,	multiply,	asciicircum,		6	] };
    key <AE07> { [ Farsi_7,	Arabic_comma,	ampersand,		7	] };
    key <AE08> { [ Farsi_8,	asterisk,	enfilledcircbullet,	8	] };
    key <AE09> { [ Farsi_9,	parenright,	0x100200e,		9	] };
    key <AE10> { [ Farsi_0,	parenleft,	0x100200f,		0	] };
};

hidden partial alphanumeric_keys
xkb_symbols "pes_part_keypad" {

    // Persian digits and Mathematical operators
    key <KPDV> { [ division,	XF86_Ungrab	] };
    key <KPMU> { [ multiply,	XF86_ClearGrab	] };
    key <KPSU> { [ 0x1002212,	XF86_Prev_VMode	] };
    key <KPAD> { [ plus,	XF86_Next_VMode	] };

    key <KPEN> { [ KP_Enter	] };
    key <KPEQ> { [ equal	] };

    key <KP7>  { [ KP_Home,	Farsi_7	] };
    key <KP8>  { [ KP_Up,	Farsi_8	] };
    key <KP9>  { [ KP_Prior,	Farsi_9	] };

    key <KP4>  { [ KP_Left,	Farsi_4	] };
    key <KP5>  { [ KP_Begin,	Farsi_5	] };
    key <KP6>  { [ KP_Right,	Farsi_6	] };

    key <KP1>  { [ KP_End,	Farsi_1	] };
    key <KP2>  { [ KP_Down,	Farsi_2	] };
    key <KP3>  { [ KP_Next,	Farsi_3	] };

    key <KP0>  { [ KP_Insert,	Farsi_0	] };
    key <KPDL> { [ KP_Delete,	0x100066b	] };
};


////////////////////////////////////////
// Kurdish Layout

partial alphanumeric_keys
xkb_symbols "ku" {
    include "tr(ku)"
    name[Group1]= "Kurdish (Iran, Latin Q)";
};

partial alphanumeric_keys
xkb_symbols "ku_f" {
    include "tr(ku_f)"
    name[Group1]= "Kurdish (Iran, F)";
};

partial alphanumeric_keys
xkb_symbols "ku_alt" {
    include "tr(ku_alt)"
    name[Group1]= "Kurdish (Iran, Latin Alt-Q)";
};

////////////////////////////////////////
// Kurdish Soranî Bahdînî (Arabic) keyboard layout,
// based on the Kurdî Soranî Bahdînî keyboard from KurdITGroup
// which is based on National Iranian Keyboard Standard (ISIRI 2901:1994),
// with additions.
//
// Copyright (C) 2006 Erdal Ronahî, published under the GPL v2
//
// Special copyright note: author explicitly permitted to license this
// layout under MIT/X11 license, for details see
// https://bugs.freedesktop.org/show_bug.cgi?id=9541
//
// Author: Erdal Ronahî  <erdal.ronahi@gmail.com>
//
// Kurdish Arabic-Latin Layout for Soranî

partial alphanumeric_keys
xkb_symbols "ku_ara" {
    name[Group1]= "Kurdish (Iran, Arabic-Latin)";

    // Other 3-Level symbols
    key <TLDE> { [ 0x100200d,		division,		asciitilde	] };
    key <BKSL> { [ backslash,		bar,			ccedilla, Ccedilla	] };

    // Digits
    key <AE01> { [ 0x1000661,	exclam,		1,	grave		] };
    key <AE02> { [ 0x1000662,	at, 		2,	at		] };
    key <AE03> { [ 0x1000663,	numbersign,	3,	0x100066b	] };
    key <AE04> { [ 0x1000664,	dollar,		4, 	0x100fdfc	] };
    key <AE05> { [ 0x1000665,	percent,	5,	0x100066a	] };
    key <AE06> { [ 0x1000666,	asciicircum,	6,	multiply	] };
    key <AE07> { [ 0x1000667,	ampersand,	7, 	Arabic_comma	] };
    key <AE08> { [ 0x1000668,	asterisk,	8,	enfilledcircbullet	] };
    key <AE09> { [ 0x1000669,	parenright,	9,	0x100200e	] };
    key <AE10> { [ 0x1000660,	parenleft,	0,	0x100200f	] };
    key <AE11> { [ minus,		Arabic_tatweel,		underscore	] };
    key <AE12> { [ equal,		plus,			0x1002212	] };

    key <AD01> { [         Arabic_qaf,            X,  q,  Q ] };
    key <AD02> { [         Arabic_waw,            X,  w,  W ] };
    key <AD03> { [          0x10006d5,   Arabic_heh,  e,  E ] };
    key <AD04> { [         Arabic_ra ,    0x1000695,  r,  R ] };
    key <AD05> { [         Arabic_teh,   Arabic_tah,  t,  T ] };
    key <AD06> { [          0x10006cc,    0x10006ce,  y,  Y ] };
    key <AD07> { [  Arabic_hamzaonyeh, Arabic_hamza,  u,  U ] };
    key <AD08> { [         Arabic_hah,   Arabic_ain,  i,  I ] };
    key <AD09> { [          0x10006c6, Arabic_hamzaonwaw,  o,  O ] };
    key <AD10> { [          0x100067e,  Arabic_theh,  p,  P ] };
    key <AD11> { [ bracketright,	braceright,	ucircumflex, Ucircumflex	] };
    key <AD12> { [ bracketleft,		braceleft,	scedilla, Scedilla	] };

    key <AC01> { [ Arabic_alef,	Arabic_maddaonalef,	a, A	] };
    key <AC02> { [ Arabic_seen,		Arabic_sheen,	s, S	] };
    key <AC03> { [  Arabic_dal,		Arabic_thal,	d, D	] };
    key <AC04> { [  Arabic_feh,	Arabic_hamzaunderalef,	f, F	] };
    key <AC05> { [   0x10006af,		Arabic_ghain,	g, G	] };
    key <AC06> { [  Arabic_heh,		0x100200c,	h, H	] };
    key <AC07> { [   0x1000698,	Arabic_hamzaonalef,	j, J	] };
    key <AC08> { [   0x10006a9,		Arabic_kaf,	k, K	] };
    key <AC09> { [  Arabic_lam,		0x10006b5,	l, L	] };
    key <AC10> { [  Arabic_semicolon, 	colon,		ecircumflex, Ecircumflex	] };
    key <AC11> { [  apostrophe, 	quotedbl,	icircumflex, Icircumflex	] };

    key <AB01> { [ Arabic_zain,		Arabic_dad,	z, Z	] };
    key <AB02> { [ Arabic_khah,		Arabic_sad,	x, X	] };
    key <AB03> { [ Arabic_jeem,		0x1000686,	c, C	] };
    key <AB04> { [   0x10006a4,		Arabic_zah,	v, V	] };
    key <AB05> { [ Arabic_beh,		0x1000649,	b, B	] };
    key <AB06> { [ Arabic_noon,	Arabic_tehmarbuta,	n, N	] };
    key <AB07> { [ Arabic_meem,	Arabic_tatweel,		m, M	] };
    key <AB08> { [ Arabic_comma,	greater,	comma		] };
    key <AB09> { [ period,		less,		apostrophe	] };
    key <AB10> { [ slash,		Arabic_question_mark, 	question	] };

    include "nbsp(zwnj2nb3)"
    include "level3(ralt_switch)"
};

// EXTRAS:

/////////////////////////////////////////////////////////////////////////////////
//
// Generated keyboard layout file with the Keyboard Layout Editor.
// For more about the software, see http://code.google.com/p/keyboardlayouteditor
//
// Version 0.2, fixed AD09.
//
// Layout by Ernst Tremel, http://ubuntuforums.org/showpost.php?p=9365469&postcount=32
// Creation of this file by Simos Xenitellis.

partial alphanumeric_keys
xkb_symbols "ave"
{
	name[Group1] = "Avestan";

	key <AB01> { [ U10B30,         U10B32 ] }; // 𐬰 𐬲
	key <AB02> { [ U10B11,         U10B12 ] }; // 𐬑 𐬒
	key <AB03> { [ U10B17,          UE102 ] }; // 𐬗 
	key <AB04> { [ U10B2C,         U10B13 ] }; // 𐬬 𐬓
	key <AB05> { [ U10B20,         U10B21 ] }; // 𐬠 𐬡
	key <AB06> { [ U10B25,         U10B27 ] }; // 𐬥 𐬧
	key <AB07> { [ U10B28,         U10B29 ] }; // 𐬨 𐬩
	key <AB08> { [ U10B3C,         U10B39 ] }; // 𐬼 𐬹
	key <AB09> { [ U10B3E,         U10B3D ] }; // 𐬾 𐬽
	key <AB10> { [ U10B3F, periodcentered ] }; // 𐬿 ·

	key <AC01> { [ U10B00,         U10B01 ] }; // 𐬀 𐬁
	key <AC02> { [ U10B2F,         U10B31 ] }; // 𐬯 𐬱
	key <AC03> { [ U10B1B,         U10B1C ] }; // 𐬛 𐬜
	key <AC04> { [ U10B1F,         U10B16 ] }; // 𐬟 𐬖
	key <AC05> { [ U10B14,         U10B15 ] }; // 𐬔 𐬕
	key <AC06> { [ U10B35,          UE100 ] }; // 𐬵 
	key <AC07> { [ U10B18,         U10B24 ] }; // 𐬘 𐬤
	key <AC08> { [ U10B10,          UE101 ] }; // 𐬐 
	key <AC09> { [ U10B2E,          UE103 ] }; // 𐬮 
	key <AC10> { [ U10B3B,         U10B3A ] }; // 𐬻 𐬺
	key <AC11> { [ U10B1D                 ] }; // 𐬝

	key <AD01> { [ U10B22,         U10B23 ] }; // 𐬢 𐬣
	key <AD02> { [ U10B33,         U10B34 ] }; // 𐬳 𐬴
	key <AD03> { [ U10B08,         U10B09 ] }; // 𐬈 𐬉
	key <AD04> { [ U10B2D,         U10B26 ] }; // 𐬭 𐬦
	key <AD05> { [ U10B19,         U10B1A ] }; // 𐬙 𐬚
	key <AD06> { [ U10B2B,         U10B2A ] }; // 𐬫 𐬪
	key <AD07> { [ U10B0E,         U10B0F ] }; // 𐬎 𐬏
	key <AD08> { [ U10B0C,         U10B0D ] }; // 𐬌 𐬍
	key <AD09> { [ U10B0A,         U10B0B ] }; // 𐬊 𐬋
	key <AD10> { [ U10B1E                 ] }; // 𐬞
	key <AD11> { [ U10B06,         U10B07 ] }; // 𐬆 𐬇
	key <AD12> { [ U10B02,         U10B03 ] }; // 𐬂 𐬃

	key <AE01> { [ U10B78                 ] }; // 𐭸
	key <AE02> { [ U10B79                 ] }; // 𐭹
	key <AE03> { [ U10B7A                 ] }; // 𐭺
	key <AE04> { [ U10B7B                 ] }; // 𐭻
	key <AE05> { [ U10B7C                 ] }; // 𐭼
	key <AE06> { [ U10B7D                 ] }; // 𐭽
	key <AE07> { [ U10B7E                 ] }; // 𐭾
	key <AE08> { [ U10B7F                 ] }; // 𐭿

	key <BKSL> { [ U10B04,         U10B05 ] }; // 𐬄 𐬅
	key <LSGT> { [ U10B04,         U10B05 ] }; // 𐬄 𐬅
};
default  hidden partial modifier_keys
xkb_symbols "capslock" {
    replace key <CAPS> { [ Caps_Lock ] };
    modifier_map Lock { Caps_Lock };
};

hidden partial modifier_keys
xkb_symbols "shiftlock" {
    replace key <CAPS> { [ Shift_Lock ] };
    modifier_map Shift { Shift_Lock };
};

hidden partial modifier_keys
xkb_symbols "grouplock" {
    replace key <CAPS> { [ ISO_Next_Group, Caps_Lock ] };
};

hidden partial modifier_keys
xkb_symbols "groupshift" {
    key <CAPS> {
        type[Group1] = "PC_ALT_LEVEL2",
        [ Mode_switch, Caps_Lock ]
    };
};

hidden partial modifier_keys
xkb_symbols "swapescape" {
    key <CAPS> { [ Escape ] };
    key <ESC>  { [ Caps_Lock ] };
};

hidden partial modifier_keys
xkb_symbols "escape" {
    key <CAPS> { [ Escape ] };
};

hidden partial modifier_keys
xkb_symbols "escape_shifted_capslock" {
    key <CAPS> {
        type[Group1] = "TWO_LEVEL",
        symbols[Group1] = [ Escape, Caps_Lock ],
        actions[Group1] = [ NoAction(), LockMods(modifiers = Lock) ]
    };
};

hidden partial modifier_keys
xkb_symbols "backspace" {
    key <CAPS> { [ BackSpace ] };
};

hidden partial modifier_keys
xkb_symbols "super" {
    key <CAPS> { [ Super_L ] };
    modifier_map Mod4 { <CAPS> };
};

hidden partial modifier_keys
xkb_symbols "hyper" {
    key <CAPS> { [ Hyper_L ] };
    modifier_map Mod4 { <CAPS> };
};

hidden partial modifier_keys
xkb_symbols "menu" {
    key <CAPS> { [ Menu ] };
};

hidden partial modifier_keys
xkb_symbols "numlock" {
    key <CAPS> { [ Num_Lock ] };
};

// This changes the <CAPS> key to become a Control modifier,
// but it will still produce the Caps_Lock keysym.
hidden partial modifier_keys
xkb_symbols "ctrl_modifier" {
    replace key <CAPS> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ Caps_Lock ],
        actions[Group1] = [ SetMods(modifiers=Control) ]
    };
    modifier_map Control { <CAPS> };
};

hidden partial modifier_keys
xkb_symbols "none" {
    key <CAPS> { [ VoidSymbol ] };
};
// 17/07/2008
// -------------------------------------------------------------
// Standard Tojiki Keyboard Layout, Official Standard
// -------------------------------------------------------------
// Created by Victor Ibragimov <victor.ibragimov@gmail.com>
// Tajik Fedora & Software Localization Team
// -------------------------------------------------------------
//                        DUAL INPUT METHOD
// --------------------------------------------------------------------
// -------------- Tajiki Official Keyboard Layout----------------------
// --------------------------------------------------------------------
//

default partial alphanumeric_keys
xkb_symbols "basic"
{
	name[Group1] = "Tajik";

	include "kpdl(comma)"
	include "level3(ralt_switch)"

	key <AB01> { [    Cyrillic_ya,    Cyrillic_YA                                 ] }; // я Я
	key <AB02> { [   Cyrillic_che,   Cyrillic_CHE                                 ] }; // ч Ч
	key <AB03> { [    Cyrillic_es,    Cyrillic_ES                                 ] }; // с С
	key <AB04> { [    Cyrillic_em,    Cyrillic_EM                                 ] }; // м М
	key <AB05> { [     Cyrillic_i,     Cyrillic_I                                 ] }; // и И
	key <AB06> { [    Cyrillic_te,    Cyrillic_TE                                 ] }; // т Т
	key <AB07> { [ Cyrillic_i_macron, Cyrillic_I_macron                           ] }; // ӣ Ӣ
	key <AB08> { [    Cyrillic_be,    Cyrillic_BE                                 ] }; // б Б
	key <AB09> { [    Cyrillic_yu,    Cyrillic_YU                                 ] }; // ю Ю
	key <AB10> { [         period,          comma                                 ] }; // . ,
	key <AC01> { [    Cyrillic_ef,    Cyrillic_EF                                 ] }; // ф Ф
	key <AC02> { [ Cyrillic_che_descender, Cyrillic_CHE_descender                 ] }; // ҷ Ҷ
	key <AC03> { [    Cyrillic_ve,    Cyrillic_VE                                 ] }; // в В
	key <AC04> { [     Cyrillic_a,     Cyrillic_A                                 ] }; // а А
	key <AC05> { [    Cyrillic_pe,    Cyrillic_PE                                 ] }; // п П
	key <AC06> { [    Cyrillic_er,    Cyrillic_ER                                 ] }; // р Р
	key <AC07> { [     Cyrillic_o,     Cyrillic_O                                 ] }; // о О
	key <AC08> { [    Cyrillic_el,    Cyrillic_EL                                 ] }; // л Л
	key <AC09> { [    Cyrillic_de,    Cyrillic_DE                                 ] }; // д Д
	key <AC10> { [   Cyrillic_zhe,   Cyrillic_ZHE                                 ] }; // ж Ж
	key <AC11> { [     Cyrillic_e,     Cyrillic_E                                 ] }; // э Э
	key <AD01> { [ Cyrillic_shorti, Cyrillic_SHORTI                               ] }; // й Й
	key <AD02> { [ Cyrillic_ka_descender, Cyrillic_KA_descender                   ] }; // қ Қ
	key <AD03> { [     Cyrillic_u,     Cyrillic_U                                 ] }; // у У
	key <AD04> { [    Cyrillic_ka,    Cyrillic_KA                                 ] }; // к К
	key <AD05> { [    Cyrillic_ie,    Cyrillic_IE                                 ] }; // е Е
	key <AD06> { [    Cyrillic_en,    Cyrillic_EN                                 ] }; // н Н
	key <AD07> { [   Cyrillic_ghe,   Cyrillic_GHE                                 ] }; // г Г
	key <AD08> { [   Cyrillic_sha,   Cyrillic_SHA                                 ] }; // ш Ш
	key <AD09> { [ Cyrillic_ha_descender, Cyrillic_HA_descender                   ] }; // ҳ Ҳ
	key <AD10> { [    Cyrillic_ze,    Cyrillic_ZE                                 ] }; // з З
	key <AD11> { [    Cyrillic_ha,    Cyrillic_HA                                 ] }; // х Х
	key <AD12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN                           ] }; // ъ Ъ
	key <AE01> { [              1,         exclam,      0x10000a7                 ] }; // 1 ! §
	key <AE02> { [              2,       quotedbl,      0x10000ab,      0x10000bb ] }; // 2 " « »
	key <AE03> { [              3,     numerosign                                 ] }; // 3 №
	key <AE04> { [              4,      semicolon                                 ] }; // 4 ;
	key <AE05> { [              5,        percent                                 ] }; // 5 %
	key <AE06> { [              6,          colon,      0x1002013                 ] }; // 6 : –
	key <AE07> { [              7,       question,      ampersand                 ] }; // 7 ? &
	key <AE08> { [              8,       asterisk                                 ] }; // 8 *
	key <AE09> { [              9,      parenleft                                 ] }; // 9 (
	key <AE10> { [              0,     parenright,      0x10000b0                 ] }; // 0 ) °
	key <AE11> { [ Cyrillic_ghe_bar, Cyrillic_GHE_bar,      minus,     underscore ] }; // ғ Ғ - _
	key <AE12> { [ Cyrillic_u_macron, Cyrillic_U_macron,    equal,           plus ] }; // ӯ Ӯ = +
	key <BKSL> { [      backslash,          slash                                 ] }; // \ /
	key <LSGT> { [          slash,            bar                                 ] }; // / |
	key <TLDE> { [    Cyrillic_io,    Cyrillic_IO                                 ] }; // ё Ё
};

// --------------------------------------------------------------------
// -------------- Tojiki Rusi Keyboard Layout--------------------------
// --------------------------------------------------------------------
// AEN <aen@logic.ru>
// 2001/12/23 by Leon Kanter <leon@blackcatlinux.com>
// 2005/12/09 Valery Inozemtsev <shrek@altlinux.ru>
// Pablo Saratxaga <pablo@mandrakesoft> (for the dead keys changes)
// --------------------------------------------------------------------

xkb_symbols "legacy"
{
	name[Group1] = "Tajik (legacy)";

	include "kpdl(comma)"
	include "level3(ralt_switch)"

	key <AB01> { [    Cyrillic_ya,    Cyrillic_YA                                 ] }; // я Я
	key <AB02> { [   Cyrillic_che,   Cyrillic_CHE, Cyrillic_che_descender, Cyrillic_CHE_descender ] }; // ч Ч ҷ Ҷ
	key <AB03> { [    Cyrillic_es,    Cyrillic_ES                                 ] }; // с С
	key <AB04> { [    Cyrillic_em,    Cyrillic_EM                                 ] }; // м М
	key <AB05> { [     Cyrillic_i,     Cyrillic_I, Cyrillic_i_macron, Cyrillic_I_macron ] }; // и И ӣ Ӣ
	key <AB06> { [    Cyrillic_te,    Cyrillic_TE                                 ] }; // т Т
	key <AB07> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN                           ] }; // ь Ь
	key <AB08> { [    Cyrillic_be,    Cyrillic_BE                                 ] }; // б Б
	key <AB09> { [    Cyrillic_yu,    Cyrillic_YU                                 ] }; // ю Ю
	key <AB10> { [         period,          comma                                 ] }; // . ,
	key <AC01> { [    Cyrillic_ef,    Cyrillic_EF                                 ] }; // ф Ф
	key <AC02> { [  Cyrillic_yeru,  Cyrillic_YERU                                 ] }; // ы Ы
	key <AC03> { [    Cyrillic_ve,    Cyrillic_VE                                 ] }; // в В
	key <AC04> { [     Cyrillic_a,     Cyrillic_A                                 ] }; // а А
	key <AC05> { [    Cyrillic_pe,    Cyrillic_PE                                 ] }; // п П
	key <AC06> { [    Cyrillic_er,    Cyrillic_ER                                 ] }; // р Р
	key <AC07> { [     Cyrillic_o,     Cyrillic_O                                 ] }; // о О
	key <AC08> { [    Cyrillic_el,    Cyrillic_EL                                 ] }; // л Л
	key <AC09> { [    Cyrillic_de,    Cyrillic_DE                                 ] }; // д Д
	key <AC10> { [   Cyrillic_zhe,   Cyrillic_ZHE                                 ] }; // ж Ж
	key <AC11> { [     Cyrillic_e,     Cyrillic_E                                 ] }; // э Э
	key <AD01> { [ Cyrillic_shorti, Cyrillic_SHORTI                               ] }; // й Й
	key <AD02> { [   Cyrillic_tse,   Cyrillic_TSE                                 ] }; // ц Ц
	key <AD03> { [     Cyrillic_u,     Cyrillic_U, Cyrillic_u_macron, Cyrillic_U_macron ] }; // у У ӯ Ӯ
	key <AD04> { [    Cyrillic_ka,    Cyrillic_KA, Cyrillic_ka_descender, Cyrillic_KA_descender ] }; // к К қ Қ
	key <AD05> { [    Cyrillic_ie,    Cyrillic_IE                                 ] }; // е Е
	key <AD06> { [    Cyrillic_en,    Cyrillic_EN                                 ] }; // н Н
	key <AD07> { [   Cyrillic_ghe,   Cyrillic_GHE, Cyrillic_ghe_bar, Cyrillic_GHE_bar ] }; // г Г ғ Ғ
	key <AD08> { [   Cyrillic_sha,   Cyrillic_SHA                                 ] }; // ш Ш
	key <AD09> { [ Cyrillic_shcha, Cyrillic_SHCHA                                 ] }; // щ Щ
	key <AD10> { [    Cyrillic_ze,    Cyrillic_ZE                                 ] }; // з З
	key <AD11> { [    Cyrillic_ha,    Cyrillic_HA, Cyrillic_ha_descender, Cyrillic_HA_descender ] }; // х Х ҳ Ҳ
	key <AD12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN                           ] }; // ъ Ъ
	key <AE01> { [              1,         exclam,      0x10000a7                 ] }; // 1 ! §
	key <AE02> { [              2,       quotedbl,      0x10000ab,      0x10000bb ] }; // 2 " « »
	key <AE03> { [              3,     numerosign                                 ] }; // 3 №
	key <AE04> { [              4,      semicolon                                 ] }; // 4 ;
	key <AE05> { [              5,        percent                                 ] }; // 5 %
	key <AE06> { [              6,          colon,      0x1002013                 ] }; // 6 : –
	key <AE07> { [              7,       question,      ampersand                 ] }; // 7 ? &
	key <AE08> { [              8,       asterisk                                 ] }; // 8 *
	key <AE09> { [              9,      parenleft                                 ] }; // 9 (
	key <AE10> { [              0,     parenright                                 ] }; // 0 )
	key <AE11> { [          minus,     underscore                                 ] }; // - _
	key <AE12> { [          equal,           plus                                 ] }; // = +
	key <BKSL> { [      backslash,          slash                                 ] }; // \ /
	key <LSGT> { [          slash,            bar                                 ] }; // / |
	key <TLDE> { [    Cyrillic_io,    Cyrillic_IO                                 ] }; // ё Ё
};
// Coptic language layout based on coptic-dictionary.org
// with added diacritics.

default  partial alphanumeric_keys modifier_keys
xkb_symbols "basic" {

   name[Group1]= "Coptic";

    key <TLDE> {	[     U0307,	U0300           ]       };
    key <AE01> {	[	  1,	exclam 		]	};
    key <AE02> {	[	  2,	at		]	};
    key <AE03> {	[	  3,	numbersign	]	};
    key <AE04> {	[	  4,	dollar		]	};
    key <AE05> {	[	  5,	percent		]	};
    key <AE06> {	[	  6,	asciicircum	]	};
    key <AE07> {	[	  7,	ampersand	]	};
    key <AE08> {	[	  8,	asterisk	]	};
    key <AE09> {	[	  9,	parenleft	]	};
    key <AE10> {	[	  0,	parenright	]	};
    key <AE11> {	[     U0305,    minus,  underscore    ]	};
    key <AE12> {	[     U0308,    U2E17,  equal, plus   ]	};

    key <AD01> { [ U2C91, U2C90 ] };
    key <AD02> { [ U2CB1, U2CB0 ] };
    key <AD03> { [ U2C89, U2C88 ] };
    key <AD04> { [ U2CA3, U2CA2 ] };
    key <AD05> { [ U2CA7, U2CA6 ] };
    key <AD06> { [ U2CAF, U2CAE ] };
    key <AD07> { [ U2CA9, U2CA8 ] };
    key <AD08> { [ U2C93, U2C92 ] };
    key <AD09> { [ U2C9F, U2C9E ] };
    key <AD10> { [ U2CA1, U2CA0 ] };
    key <AD11> { [ U03E3, U03E2 ] };
    key <AD12> {	[ bracketleft,	bracketright	]	};
    key <AC01> { [ U2C81, U2C80 ] };
    key <AC02> { [ U2CA5, U2CA4 ] };
    key <AC03> { [ U2C87, U2C86 ] };
    key <AC04> { [ U03E5, U03E4 ] };
    key <AC05> { [ U2C85, U2C84 ] };
    key <AC06> { [ U03E9, U03E8 ] };
    key <AC07> { [ U03EB, U03EA ] };
    key <AC08> { [ U2C95, U2C94 ] };
    key <AC09> { [ U2C97, U2C96 ] };
    key <AC10> { [ U03E7, U03E6 ] };
    key <AC11> { [ U2CC9, U2CC8 ] };
    key <AB01> { [ U2C8D, U2C8C ] };
    key <AB02> { [ U2C9D, U2C9C ] };
    key <AB03> { [ U2CAD, U2CAC ] };
    key <AB04> { [ U2CAB, U2CAA ] };
    key <AB05> { [ U2C83, U2C82 ] };
    key <AB06> { [ U2C9B, U2C9A ] };
    key <AB07> { [ U2C99, U2C98 ] };
    key <AB08> { [ U03ED, U03EC ] };
    key <AB09> { [ U03EF, U03EE ] };
    key <AB10> { [ U2C8F, U2C8E ] };

    key <BKSL> { [ U0304, U0323 ] };
};
//
// Default Chinese is the same as American
//
default partial alphanumeric_keys
xkb_symbols "basic" {
    include "us(basic)"

    name[Group1]= "Chinese";
};

// Tibetan Standard Keyboard map for XKB/X.org
//
// Based on the CNS Tibetan keyboard as supported by Windows Vista
// using information published by Tashi Tsering:
// http://www.yalasoo.com/English/docs/yalasoo_en_MStbKb.html
//
// XKB version by Rich Felker <dalias@aerifal.cx>.
//
// The CNS Tibetan keyboard standard specifies 5 keyboards worth of keys,
// but apparently makes no requirements about how each is accessed. Only
// the first 2 are needed for native Tibetan text; the remainder are
// filled with special symbols and letters for transliterating foreign
// text. Further, CNS leaves the level of support of keyboards 2-5 as an
// option to the implementor (despite the fact that #2 is absolutely
// essential...). Windows Vista maps them as follows:
//
// 1. Unshifted
// 2. "m"-key-prefixed
// 3. Shift-modified
// 4. Ctrl+Alt+Shift-modified
// 5. "M"-key-prefixed
//
// I roughly copy the Windows Vista mapping, which was intended by the
// designer of the keyboard, with the following exceptions:
//
// The fifth keyboard is almost empty and contains only precomposed forms
// of subjoined letter characters whose use is strongly discouraged, and
// is not implemented at all in this XKB map. The fourth is implemented,
// but is accessed by an "m"-prefix (or "M"-prefix, for convenience)
// followed by a Shift-modified key. This avoids stealing the Ctrl and Alt
// keys, which belong to applications on *nix and not to the keyboard or
// input method. Aside from enterring rare special symbols and
// foreign-word-transliteration letters, these differences should not
// affect users.
//
// Implementation notes:
//
// A latching ISO Level3 shift is used for the "m"-prefix modifier. In
// principle moving it to other keys (e.g. AltGr) would be possible
// according to user preference, but this is not practical for typing
// Tibetan, since the subjoined consonants, of which Tibetan has 0-2 per
// syllable, are accessed via this mechanism.
//
// One annoyance is that the latching Level3 shift fails to work if the
// previous key is not yet released when "m" is pressed (the key release
// event kills the latch). I consider this a bug in X and don't know an
// easy way to work around it. Complain to the maintainers if it bothers
// you and maybe they'll find a fix. You won't notice it unless you're
// fast at typing Tibetan anyway.

partial alphanumeric_keys
xkb_symbols "tib" {

    name[Group1]= "Tibetan";

    key <TLDE> { [ 0x1000f68, 0x1000f01, 0x1000fb8, 0x1000f00 ] }; # ཨ ༁ ྸ ༀ
    key <AE01> { [ 0x1000f21, 0x1000f2a, 0x1000f04, 0x1000f76 ] }; # ༡ ༪ ༄ ྲྀ
    key <AE02> { [ 0x1000f22, 0x1000f2b, 0x1000f05, 0x1000f77 ] }; # ༢ ༫ ༅ ཷ
    key <AE03> { [ 0x1000f23, 0x1000f2c, 0x1000f7e, 0x1000f78 ] }; # ༣ ༬ ཾ ླྀ
    key <AE04> { [ 0x1000f24, 0x1000f2d, 0x1000f83, 0x1000f79 ] }; # ༤ ༭ ྃ ཹ
    key <AE05> { [ 0x1000f25, 0x1000f2e, 0x1000f37, 0x1000f81 ] }; # ༥ ༮ ༷ ཱྀ
    key <AE06> { [ 0x1000f26, 0x1000f2f, 0x1000f35, 0x1000f09 ] }; # ༦ ༯ ༵ ༉
    key <AE07> { [ 0x1000f27, 0x1000f30, 0x1000f7f, 0x1000f0a ] }; # ༧ ༰ ཿ ༊
    key <AE08> { [ 0x1000f28, 0x1000f31, 0x1000f14, 0x1000f0f ] }; # ༨ ༱ ༔ ༏
    key <AE09> { [ 0x1000f29, 0x1000f32, 0x1000f11, 0x1000f10 ] }; # ༩ ༲ ༑ ༐
    key <AE10> { [ 0x1000f20, 0x1000f33, 0x1000f08, 0x1000f12 ] }; # ༠ ༳ ༈ ༒
    key <AE11> { [ 0x1000f67, 0x1000f3c, 0x1000fb7, 0x1000f0c ] }; # ཧ ༼ ྷ ༌
    key <AE12> { [ 0x1000f5d, 0x1000f3d, 0x1000fba, 0x1000f13 ] }; # ཝ ༽ ྺ ༓

    key <AD01> { [ 0x1000f45, 0x1000f15, 0x1000f95, 0x1000f89 ] }; # ཅ ༕ ྕ ྉ
    key <AD02> { [ 0x1000f46, 0x1000f16, 0x1000f96, 0x1000f88 ] }; # ཆ ༖ ྖ ྈ
    key <AD03> { [ 0x1000f7a, 0x1000f17, 0x1000f7b, 0x1000fbe ] }; # ེ ༗ ཻ ྾
    key <AD04> { [ 0x1000f62, 0x1000fbc, 0x1000fb2, 0x1000f6a ] }; # ར ྼ ྲ ཪ
    key <AD05> { [ 0x1000f4f, 0x1000f4a, 0x1000f9f, 0x1000f9a ] }; # ཏ ཊ ྟ ྚ
    key <AD06> { [ 0x1000f61, 0x1000fbb, 0x1000fb1, 0x1000fbf ] }; # ཡ ྻ ྱ ྿
    key <AD07> { [ 0x1000f74, 0x1000f18, 0x1000fad, 0x1000f75 ] }; # ུ ༘ ྭ ཱུ
    key <AD08> { [ 0x1000f72, 0x1000f19, 0x1000f80, 0x1000f73 ] }; # ི ༙ ྀ ཱི
    key <AD09> { [ 0x1000f7c, 0x1000f1a, 0x1000f7d, 0x1000fc0 ] }; # ོ ༚ ཽ ࿀
    key <AD10> { [ 0x1000f55, 0x1000f1b, 0x1000fa5, 0x1000fc1 ] }; # ཕ ༛ ྥ ࿁
    key <AD11> { [ 0x1000f59, 0x1000f1c, 0x1000fa9, 0x1000fc2 ] }; # ཙ ༜ ྩ ࿂
    key <AD12> { [ 0x1000f5a, 0x1000f1d, 0x1000faa, 0x1000fc3 ] }; # ཚ ༝ ྪ ࿃
    key <BKSL> { [ 0x1000f5b, 0x1000f1e, 0x1000fab, 0x1000f5c ] }; # ཛ ༞ ྫ ཛྷ

    key <AC01> { [ 0x1000f60, 0x1000f71, 0x1000fb0, 0x1000fc4 ] }; # འ ཱ ྰ ࿄
    key <AC02> { [ 0x1000f66, 0x1000f1f, 0x1000fb6, 0x1000fc5 ] }; # ས ༟ ྶ ࿅
    key <AC03> { [ 0x1000f51, 0x1000f4c, 0x1000fa1, 0x1000f9c ] }; # ད ཌ ྡ ྜ
    key <AC04> { [ 0x1000f56, 0x1000f3e, 0x1000fa6, 0x1000f57 ] }; # བ ༾ ྦ བྷ
    key <AC05> { [ 0x1000f44, 0x1000f3f, 0x1000f94, 0x1000fc6 ] }; # ང ༿ ྔ ࿆
    key <AC06> { [ 0x1000f58, 0x1000fcf, 0x1000fa8, 0x1000fc7 ] }; # མ ࿏ ྨ ࿇
    key <AC07> { [ 0x1000f0b, 0x1000f02, 0x1000f84, 0x1000fc8 ] }; # ་ ༂ ྄ ࿈
    key <AC08> { [ 0x1000f42, 0x1000f03, 0x1000f92, 0x1000f43 ] }; # ག ༃ ྒ གྷ
    key <AC09> { [ 0x1000f63, 0x1000f06, 0x1000fb3, 0x1000fc9 ] }; # ལ ༆ ླ ࿉
    key <AC10> { [ 0x1000f5e, 0x1000f07, 0x1000fae, 0x1000fca ] }; # ཞ ༇ ྮ ࿊
    key <AC11> { [ 0x1000f0d, 0x1000f38, 0x1000f0e, 0x1000fcb ] }; # ། ༸ ༎ ࿋

    key <AB01> { [ 0x1000f5f, 0x1000f34, 0x1000faf, 0x1000fcc ] }; # ཟ ༴ ྯ ࿌
    key <AB02> { [ 0x1000f64, 0x1000f65, 0x1000fb4, 0x1000fb5 ] }; # ཤ ཥ ྴ ྵ
    key <AB03> { [ 0x1000f40, 0x1000f69, 0x1000f90, 0x1000fb9 ] }; # ཀ ཀྵ ྐ ྐྵ
    key <AB04> { [ 0x1000f41, 0x1000f87, 0x1000f91, 0x1000f36 ] }; # ཁ ྇ ྑ ༶
    key <AB05> { [ 0x1000f54, 0x1000f86, 0x1000fa4, 0x1000f82 ] }; # པ ྆ ྤ ྂ
    key <AB06> { [ 0x1000f53, 0x1000f4e, 0x1000fa3, 0x1000f9e ] }; # ན ཎ ྣ ྞ
    key <AB07> { [ ISO_Level3_Latch, ISO_Level3_Latch, 0x1000f85, 0x1000f52 ] }; # -བཏགས་ ྅ དྷ
    key <AB08> { [ 0x1000f50, 0x1000f4b, 0x1000fa0, 0x1000f9b ] }; # ཐ ཋ ྠ ྛ
    key <AB09> { [ 0x1000f47, 0x1000f3a, 0x1000f97, 0x1000f8b ] }; # ཇ ༺ ྗ ྋ
    key <AB10> { [ 0x1000f49, 0x1000f3b, 0x1000f99, 0x1000f8a ] }; # ཉ ༻ ྙ ྊ
};

// Tibetan Standard Keyboard with ASCII numerals
//
// Users may prefer that the numeral keys enter ASCII numerals instead of
// Tibetan numerals, since the latter are not in modern use in Tibet.
// This is especially an issue for laptop users who do not have a numeric
// keypad by which to access the ASCII numerals, and who need to type
// numbers to be interpreted by applications.
//
// In this mapping, the Shift-modified numeral keys generate Tibetan
// numerals, since it was unclear to me that the standard Latin punctuation
// keys would be any use without Latin letters. (One can imagine wanting to
// type an email address using the @ sign, but as of present non-ASCII
// email addresses are not possible.) This mapping may change in the future
// if a clearly better use for the shifted numerals is pointed out by users.

partial alphanumeric_keys
xkb_symbols "tib_asciinum" {
    include "cn(tib)"

    name[Group1]= "Tibetan (with ASCII numerals)";

    key <AE01> { [ 1, 0x1000f21, 0x1000f04, 0x1000f76 ] }; # 1 ༡ ༄ ྲྀ
    key <AE02> { [ 2, 0x1000f22, 0x1000f05, 0x1000f77 ] }; # 2 ༢ ༅ ཷ
    key <AE03> { [ 3, 0x1000f23, 0x1000f7e, 0x1000f78 ] }; # 3 ༣ ཾ ླྀ
    key <AE04> { [ 4, 0x1000f24, 0x1000f83, 0x1000f79 ] }; # 4 ༤ ྃ ཹ
    key <AE05> { [ 5, 0x1000f25, 0x1000f37, 0x1000f81 ] }; # 5 ༥ ༷ ཱྀ
    key <AE06> { [ 6, 0x1000f26, 0x1000f35, 0x1000f09 ] }; # 6 ༦ ༵ ༉
    key <AE07> { [ 7, 0x1000f27, 0x1000f7f, 0x1000f0a ] }; # 7 ༧ ཿ ༊
    key <AE08> { [ 8, 0x1000f28, 0x1000f14, 0x1000f0f ] }; # 8 ༨ ༔ ༏
    key <AE09> { [ 9, 0x1000f29, 0x1000f11, 0x1000f10 ] }; # 9 ༩ ༑ ༐
    key <AE10> { [ 0, 0x1000f20, 0x1000f08, 0x1000f12 ] }; # 0 ༠ ༈ ༒
};

// Uyghur Standard Keyboard Map for XKB/X.Org
//
// XKB version in collaboration by Muhemmed Abdullah <muhammad@yulghun.com>,
// Abdussalam Abdurrahman <abdusalam.abdurahman@gmail.com>, and
// Ekrem Tomur <ekrem.tomur@gmail.com>

partial alphanumeric_keys
xkb_symbols "ug" {
    include "us(basic)"

    name[Group1]= "Uyghur";

    key <AE09> { [ 9,                parenright           ] };  // 9 )
    key <AE10> { [ 0,                parenleft            ] };  // 0 (
    key <AE11> { [ minus,            0x1002014            ] };  // - —

    key <AD01> { [ 0x1000686,        VoidSymbol           ] };  // چ
    key <AD02> { [ 0x10006cb,        VoidSymbol           ] };  // ۋ
    key <AD03> { [ 0x10006d0,        VoidSymbol           ] };  // ې
    key <AD04> { [ 0x1000631,        VoidSymbol           ] };  // ر
    key <AD05> { [ 0x100062a,        VoidSymbol           ] };  // ت
    key <AD06> { [ 0x100064a,        VoidSymbol           ] };  // ي
    key <AD07> { [ 0x10006c7,        VoidSymbol           ] };  // ۇ
    key <AD08> { [ 0x10006ad,        VoidSymbol           ] };  // ڭ
    key <AD09> { [ 0x1000648,        VoidSymbol           ] };  // و
    key <AD10> { [ 0x100067e,        VoidSymbol           ] };  // پ
    key <AD11> { [ bracketright,     guillemotright       ] };  // ] »
    key <AD12> { [ bracketleft,      guillemotleft        ] };  // [ «

    key <AC01> { [ 0x10006be,        VoidSymbol           ] };  // ھ
    key <AC02> { [ 0x1000633,        VoidSymbol           ] };  // س
    key <AC03> { [ 0x100062f,        0x1000698            ] };  // د ژ
    key <AC04> { [ 0x1000627,        0x1000641            ] };  // ا ف
    key <AC05> { [ 0x10006d5,        0x10006af            ] };  // ە گ
    key <AC06> { [ 0x1000649,        0x100062e            ] };  // ى خ
    key <AC07> { [ 0x1000642,        0x100062c            ] };  // ق ج
    key <AC08> { [ 0x1000643,        0x10006c6            ] };  // ك ۆ
    key <AC09> { [ 0x1000644,        VoidSymbol           ] };  // ل
    key <AC10> { [ Arabic_semicolon, colon                ] };  // ؛ :

    key <AB01> { [ 0x1000632,        VoidSymbol           ] };  // ز
    key <AB02> { [ 0x1000634,        VoidSymbol           ] };  // ش
    key <AB03> { [ 0x100063a,        VoidSymbol           ] };  // غ
    key <AB04> { [ 0x10006c8,        VoidSymbol           ] };  // ۈ
    key <AB05> { [ 0x1000628,        VoidSymbol           ] };  // ب
    key <AB06> { [ 0x1000646,        VoidSymbol           ] };  // ن
    key <AB07> { [ 0x1000645,        VoidSymbol           ] };  // م
    key <AB08> { [ Arabic_comma,     0x100203a            ] };  // ، ›
    key <AB09> { [ period,           0x1002039            ] };  // . ‹
    key <AB10> { [ 0x1000626,        Arabic_question_mark ] };  // ئ ؟
};

// Pinyin Keyboard, in the style of altgr-intl
//
// Chinese speakers and learners often find it hard to type Hanyu Pinyin
// with all its tones and ü. This rule defines an altgr-intl-like behavior,
// with dead keys activated by "AltGr + <key>". It also works with many
// "pinyin" extensions, such as Tongyong Pinyin (Taiwan Mandarin) and
// various SASM/GNC romanizations.
//
// Number row keys 1 2 3 4 are defined as dead-keys for the tones.
// They correspond to the four tones in Hanyu Pinyin.
//
// To generate a · for "neutral" syllables, use AltGr + ` (grave).
// To generate a raw ü, use AltGr + v.
// V is used instead of ü for tones.
//
// AltGr+Shift+` triggers dead_abovering (˚), used by the Taiwanese
// Tongyong Pinyin variant for the "neutral" tone.
//
// AltGr+6 triggers dead_circumflex (^) for ê ẑ ĉ ŝ, etc.
// These can be stacked after tones to produce ế and ề; other tones require
// combining characters, available through nobreakspace (AltGr+Space).
//
// AltGr+Shift+6 triggers dead_diaeresis (¨) for SASM/GNC
// romanization of tib, mon, and ug.
//
// This file should be used with an appropriate XCompose file with
// definitons for dead_{macron,acute,caron,grave} + a/e/i/o/u/v(ü).
// --Mingye Wang <arthur200126@gmail.com>

partial alphanumeric_keys
xkb_symbols "altgr-pinyin" {
   include "us(basic)"
   name[Group1]= "Hanyu Pinyin (with AltGr dead keys)";

   key <TLDE> { [      grave,	asciitilde,  periodcentered,dead_abovering ]	};
   key <AE01> { [	   1,	exclam,		dead_macron,	    macron ]	};
   key <AE02> { [	   2,	at,		dead_acute,	     acute ]	};
   key <AE03> { [	   3,	numbersign,	dead_caron,	     caron ]	};
   key <AE04> { [	   4,	dollar,		dead_grave,	     grave ]	};

   key <AE06> { [	   6,	asciicircum,	dead_circumflex, dead_diaeresis ]	};
   key <AB04> {	[	   v,	V,		udiaeresis,	Udiaeresis ]	};

   key <SPCE>  { [     space,   space,	      nobreakspace,   nobreakspace ]	};

   include "level3(ralt_switch)"
};

// Mongolian Bichig (traditional) Keyboard Map for XKB/X.Org
//
// by Maurizio M. Gavioli <mmg@vistamaresoft.com>, 2019 from PRC
// standard GB/T 28038-2011, par. 4.3.
// The original standard has vertical presentation forms (UFExx range)
// for level 2 of AB08 - AB10, AD11 - AD13, AE01, AE09, AE10; they have
// been replaced by the corresponding decompositions, assuming that:
// 1) presentation forms are a job of the font stack more than of the
//    keyboard management.
// 2) these keyboard layout will not necessarily be used only for
//    vertical text orientations.

partial alphanumeric_keys
xkb_symbols "mon_trad" {
    include "us(basic)"

    name[Group1]= "Mongolian (Bichig)";

    key <TLDE> { [ U180D,   asciitilde ] };  // ~: FVS3, ~
    key <AE01> { [ 1,           exclam ] };  // 1: 1, !
    key <AE02> { [ 2,            U2048 ] };  // 2: 2, ⁈
    key <AE03> { [ 3,            U2049 ] };  // 3: 3, ⁉
    key <AE04> { [ 4,                4 ] };  // 4: 4
    key <AE05> { [ 5,          percent ] };  // 5: 5, %
    key <AE06> { [ 6,            U200C ] };  // 6: 6, ZWNJ
    key <AE07> { [ 7,            U180A ] };  // 7: 7, ᠊  NIRUGU
    key <AE08> { [ 8,            U200D ] };  // 8: 8, ZWJ
    key <AE09> { [ 9,        parenleft ] };  // 9: 9, (
    key <AE10> { [ 0,       parenright ] };  // 0: 0, )
    key <AE11> { [ U202F,        U180E ] };  // -: NNBSP, MVS
    key <AE12> { [ equal,	      plus ] };  // +: =, +

    key <AD01> { [ U1823,        U1842 ] };  // Q: ᠣ O, ᡂ CHI
    key <AD02> { [ U1838,        U1838 ] };  // W: ᠸ  WA
    key <AD03> { [ U1821,        U1827 ] };  // E: ᠡ E,  ᠧ EE
    key <AD04> { [ U1837,        U183F ] };  // R: ᠷ RA, ᠿ   ZRA
    key <AD05> { [ U1832,        U1832 ] };  // T: ᠲ TA
    key <AD06> { [ U1836,        U1836 ] };  // Y: ᠶ YA
    key <AD07> { [ U1826,        U1826 ] };  // U: ᠦ UE
    key <AD08> { [ U1822,        U1822 ] };  // I: ᠢ I
    key <AD09> { [ U1825,        U1825 ] };  // O: ᠥ OE
    key <AD10> { [ U182B,        U182B ] };  // P: ᠫ PA
    key <AD11> { [ bracketleft,  U3008 ] };  // [: [,    〈
    key <AD12> { [ bracketright, U3009 ] };  // ]: ],    〉
    key <BKSL> { [ U1801,        U2014 ] };  // \: ᠁, —

    key <AC01> { [ U1820,        U1820 ] };  // A: ᠠ  A
    key <AC02> { [ U1830,        U1830 ] };  // S: ᠰ SA
    key <AC03> { [ U1833,        U1833 ] };  // D: ᠳ DA
    key <AC04> { [ U1839,        U1839 ] };  // F: ᠹ FA
    key <AC05> { [ U182D,        U182D ] };  // G: ᠭ GA
    key <AC06> { [ U182C,        U183E ] };  // H: ᠬ QA, ᠾ HAA
    key <AC07> { [ U1835,        U1835 ] };  // J: ᠵ JA
    key <AC08> { [ U183A,        U183B ] };  // K: ᠺ KA, ᠻ KHA
    key <AC09> { [ U182F,        U1840 ] };  // L: ᠯ LA, ᡀ LHA
    key <AC10> { [ semicolon,    U1804 ] };  // ;: ;, ᠄
    key <AC11> { [ U180B,        U180C ] };  // `: FVS1, FVS2

    key <AB01> { [ U183D,        U1841 ] };  // Z: ᠽ ZA, ᡁ ZHI
    key <AB02> { [ U1831,        U1831 ] };  // X: ᠱ SHA
    key <AB03> { [ U1834,        U183C ] };  // C: ᠴ CHA, ᠼ TSA
    key <AB04> { [ U1824,        U1824 ] };  // V: ᠤ U
    key <AB05> { [ U182A,        U182A ] };  // B: ᠪ BA
    key <AB06> { [ U1828,        U1829 ] };  // N: ᠨ NA, ᠩ ANG
    key <AB07> { [ U182E,        U182E ] };  // M: ᠮ MA
    key <AB08> { [ U1802,        U300A ] };  // ,: ᠂, 《
    key <AB09> { [ U1803,        U300B ] };  // .: ᠃, 》
    key <AB10> { [ U00B7,     question ] };  // /: ·, ?
};

// Mongolian (Todo) Keyboard Map for XKB/X.Org
//
// by Maurizio M. Gavioli <mmg@vistamaresoft.com>, 2019 from PRC
// standard GB/T 28038-2011, par. 4.4.
// The original standard has vertical presentation forms (UFExx range)
// in AB08 - AB10, AC10, AD11 - AD13, AE01, AE09 - AE11: they have been
// replaced by the corresponding decompositions; see explanation for
// "mon_trad" above.

partial alphanumeric_keys
xkb_symbols "mon_trad_todo" {
    include "us(basic)"

    name[Group1]= "Mongolian (Todo)";

    key <TLDE> { [ U180D,   asciitilde ] };  // ~: FVS3, ~
    key <AE01> { [ 1,           exclam ] };  // 1: 1, !
    key <AE02> { [ 2,            U2048 ] };  // 2: 2, ⁈
    key <AE03> { [ 3,            U2049 ] };  // 3: 3, ⁉
    key <AE04> { [ 4,            U1843 ] };  // 4: 4, ᡃ TODO LONG VOWEL
    key <AE05> { [ 5,          percent ] };  // 5: 5, %
    key <AE06> { [ 6,            U200C ] };  // 6: 6, ZWNJ
    key <AE07> { [ 7,            U180A ] };  // 7: 7, ᠊  NIRUGU
    key <AE08> { [ 8,            U200D ] };  // 8: 8, ZWJ
    key <AE09> { [ 9,        parenleft ] };  // 9: 9, (
    key <AE10> { [ 0,       parenright ] };  // 0: 0, )
    key <AE11> { [ U202F,        U2014 ] };  // -: NNBSP, — EM DASH
    key <AE12> { [ equal,	      plus ] };  // +: =, +

    key <AD01> { [ U1846,        U1806 ] };  // Q: ᡆ TODO O, ᠆ (Todo hyphen)
    key <AD02> { [ U1856,        U1856 ] };  // W: ᡖ TODO WA
    key <AD03> { [ U1844,        U1844 ] };  // E: ᡄ TODO E
    key <AD04> { [ U1837,        U1837 ] };  // R: ᠷ RA
    key <AD05> { [ U1850,        U1850 ] };  // T: ᡐ TODO TA
    key <AD06> { [ U1855,        U1855 ] };  // Y: ᡕ TODO YA
    key <AD07> { [ U1849,        U1849 ] };  // U: ᡉ TODO UE
    key <AD08> { [ U1845,        U1845 ] };  // I: ᡅ TODO I
    key <AD09> { [ U1848,        U1848 ] };  // O: ᡈ TODO OE
    key <AD10> { [ U184C,        U184C ] };  // P: ᠫ PA
    key <AD11> { [ bracketleft,  U300C ] };  // [: [, 「
    key <AD12> { [ bracketright, U300D ] };  // ]: ], 」
    key <BKSL> { [ U1801,        U00B7 ] };  // \: ᠁, ·

    key <AC01> { [ U1820,        U1820 ] };  // A: ᠠ  A
    key <AC02> { [ U1830,        U1830 ] };  // S: ᠰ SA
    key <AC03> { [ U1851,        U1851 ] };  // D: ᡑ TODO DA
    key <AC04> { [ U1838,        U1838 ] };  // F: ᠸ  WA
    key <AC05> { [ U184E,        U1858 ] };  // G: ᡎ TODO GA, ᡘ TODO GAA
    key <AC06> { [ U184D,        U1859 ] };  // H: ᡍ TODO Qa, ᡙ TODO HAA
    key <AC07> { [ U1853,        U185A ] };  // J: ᡓ TODO JA, ᡚ TODO JIA
    key <AC08> { [ U1857,        U1857 ] };  // K: ᡗ TODO KA
    key <AC09> { [ U182F,        U1840 ] };  // L: ᠯ LA, ᡀ LHA
    key <AC10> { [ semicolon,    U1804 ] };  // ;: ;, ᠄
    key <AC11> { [ U180B,        U180C ] };  // `: FVS1, FVS2

    key <AB01> { [ U1834,        U185C ] };  // Z: ᠴ CHA, ᠼ TODO DZA
    key <AB02> { [ U1831,        U1831 ] };  // X: ᠱ SHA
    key <AB03> { [ U1854,        U1852 ] };  // C: ᡔ TODO TSA ᡒ TODO CHA
    key <AB04> { [ U1847,        U1847 ] };  // V: ᡇ TODO U
    key <AB05> { [ U184B,        U184B ] };  // B: ᡋ  TODO BA
    key <AB06> { [ U1828,        U184A ] };  // N: ᠨ NA, ᠩ TODO ANG
    key <AB07> { [ U184F,        U184F ] };  // M: ᡏ TODO MA
    key <AB08> { [ comma,        U300E ] };  // ,: ,, 『
    key <AB09> { [ U3002,        U300F ] };  // .: 。, 』
    key <AB10> { [ U3001,     question ] };  // /: 、, ?
};

// Mongolian (Xibe) Keyboard Map for XKB/X.Org
//
// by Maurizio M. Gavioli <mmg@vistamaresoft.com>, 2019 from PRC
// standard GB/T 28038-2011, par. 4.5.
// The original standard has vertical presentation forms (UFExx range)
// in AB08 - AB10, AD11 - AD13, AE01, AE09, AE10; they have been
// replaced by the corresponding decompositions; see explanation for
// "mon_trad" above.

partial alphanumeric_keys
xkb_symbols "mon_trad_xibe" {
    include "us(basic)"

    name[Group1]= "Mongolian (Xibe)";

    key <TLDE> { [ U180D,   asciitilde ] };  // ~: FVS3, ~
    key <AE01> { [ 1,           exclam ] };  // 1: 1, !
    key <AE02> { [ 2,            U2018 ] };  // 2: 2, ‘
    key <AE03> { [ 3,            U2019 ] };  // 3: 3, ’
    key <AE04> { [ 4,            U1807 ] };  // 4: 4, ᠇ SIBE SYLL. BOUND. MARKER
    key <AE05> { [ 5,          percent ] };  // 5: 5, %
    key <AE06> { [ 6,            U200C ] };  // 6: 6, ZWNJ
    key <AE07> { [ 7,            U180A ] };  // 7: 7, ᠊  NIRUGU
    key <AE08> { [ 8,            U200D ] };  // 8: 8, ZWJ
    key <AE09> { [ 9,        parenleft ] };  // 9: 9, (
    key <AE10> { [ 0,       parenright ] };  // 0: 0, )
    key <AE11> { [ U202F,        U202F ] };  // -: NNBSP
    key <AE12> { [ equal,	      plus ] };  // +: =, +

    key <AD01> { [ U1834,        U1834 ] };  // Q: ᠴ CHA
    key <AD02> { [ U1838,        U1838 ] };  // W: ᠸ  WA
    key <AD03> { [ U185D,        U185D ] };  // E: ᡝ SIBE E
    key <AD04> { [ U1837,        U1870 ] };  // R: ᠷ RA, ᡰ SIBE RAA
    key <AD05> { [ U1868,        U1868 ] };  // T: ᡨ SIBE TA
    key <AD06> { [ U1836,        U1836 ] };  // Y: ᠶ YA
    key <AD07> { [ U1860,        U1860 ] };  // U: ᡠ SIBE UE
    key <AD08> { [ U185E,        U185F ] };  // I: ᡞ SIBE I, ᡟ SIBE IY
    key <AD09> { [ U1823,        U1823 ] };  // O: ᠣ O
    key <AD10> { [ U1866,        U1866 ] };  // P: ᡦ SIBE PA
    key <AD11> { [ bracketleft,  U201C ] };  // [: [, “
    key <AD12> { [ bracketright, U201D ] };  // ]: ], ”
    key <BKSL> { [ U1801,        U2014 ] };  // \: ᠁, —

    key <AC01> { [ U1820,        U1820 ] };  // A: ᠠ  A
    key <AC02> { [ U1830,        U1830 ] };  // S: ᠰ SA
    key <AC03> { [ U1869,        U1869 ] };  // D: ᡩ SIBE DA
    key <AC04> { [ U186B,        U186B ] };  // F: ᡫ SIBE FA
    key <AC05> { [ U1864,        U186C ] };  // G: ᡤ SIBE GA, ᡬ SIBE GAA
    key <AC06> { [ U1865,        U186D ] };  // H: ᡥ SIBE HA, ᡭ SIBE HAA
    key <AC07> { [ U186A,        U186A ] };  // J: ᡪ SIBE JA
    key <AC08> { [ U1863,        U183A ] };  // K: ᡣ SIBE KA, ᠺ KA
    key <AC09> { [ U182F,        U182F ] };  // L: ᠯ LA
    key <AC10> { [ semicolon,    U1804 ] };  // ;: ;, ᠄
    key <AC11> { [ U180B,        U180C ] };  // `: FVS1, FVS2

    key <AB01> { [ U186F,        U1872 ] };  // Z: ᡯ SIBE ZA, ᡲ SIBE ZHA
    key <AB02> { [ U1867,        U1867 ] };  // X: ᡧ SIBE SHA
    key <AB03> { [ U186E,        U1871 ] };  // C: ᡮ SIBE TSA, ᡱ SIBE CHA
    key <AB04> { [ U1861,        U1861 ] };  // V: ᡡ SIBE U
    key <AB05> { [ U182A,        U182A ] };  // B: ᠪ BA
    key <AB06> { [ U1828,        U1862 ] };  // N: ᠨ NA, ᡢ SIBE ANG
    key <AB07> { [ U182E,        U182E ] };  // M: ᠮ MA
    key <AB08> { [ comma,        U300E ] };  // ,: ,, 『
    key <AB09> { [ U3002,        U300F ] };  // .: 。, 』
    key <AB10> { [ U3001,     question ] };  // /: 、, ?
};

// Mongolian (Manchu) Keyboard Map for XKB/X.Org
//
// by Maurizio M. Gavioli <mmg@vistamaresoft.com>, 2019 from PRC
// standard GB/T 28038-2011, par. 4.6.
// The original standard has vertical presentation forms (UFExx range)
// for level 2 of AB10, ABC10, AD11 - AD13, AE01, AE09, AE10; they have been
// replaced by the corresponding decompositions; see explanation for
// "mon_trad" above.


partial alphanumeric_keys
xkb_symbols "mon_trad_manchu" {
    include "us(basic)"

    name[Group1]= "Mongolian (Manchu)";

    key <TLDE> { [ U180D,   asciitilde ] };  // ~: FVS3, ~
    key <AE01> { [ 1,           exclam ] };  // 1: 1, !
    key <AE02> { [ 2,                2 ] };  // 2: 2
    key <AE03> { [ 3,                3 ] };  // 3: 3
    key <AE04> { [ 4,                4 ] };  // 4: 4
    key <AE05> { [ 5,          percent ] };  // 5: 5, %
    key <AE06> { [ 6,            U200C ] };  // 6: 6, ZWNJ
    key <AE07> { [ 7,            U180A ] };  // 7: 7, ᠊  NIRUGU
    key <AE08> { [ 8,            U200D ] };  // 8: 8, ZWJ
    key <AE09> { [ 9,        parenleft ] };  // 9: 9, (
    key <AE10> { [ 0,       parenright ] };  // 0: 0, )
    key <AE11> { [ U202F,        U202F ] };  // -: NNBSP
    key <AE12> { [ equal,	      plus ] };  // +: =, +

    key <AD01> { [ U1834,        U1834 ] };  // Q: ᠴ CHA
    key <AD02> { [ U1838,        U1838 ] };  // W: ᠸ  WA
    key <AD03> { [ U185D,        U185D ] };  // E: ᡝ SIBE E
    key <AD04> { [ U1875,        U1870 ] };  // R: ᡵ MANCHU RA, ᡰ SIBE RAA
    key <AD05> { [ U1868,        U1868 ] };  // T: ᡠ SIBE TA
    key <AD06> { [ U1836,        U1836 ] };  // Y: ᠶ YA
    key <AD07> { [ U1860,        U1860 ] };  // U: ᡠ SIBE UE
    key <AD08> { [ U1873,        U185F ] };  // I: ᡳ MANCHU I, ᡟ SIBE IY
    key <AD09> { [ U1823,        U1823 ] };  // O: ᠣ  O
    key <AD10> { [ U1866,        U1866 ] };  // P: ᡦ SIBE PA
    key <AD11> { [ bracketleft,  bracketleft  ] };  // [: [
    key <AD12> { [ bracketright, bracketright ] };  // ]: ]
    key <BKSL> { [ U1801,        U2014 ] };  // \: ᠁, —

    key <AC01> { [ U1820,        U1820 ] };  // A: ᠠ  A
    key <AC02> { [ U1830,        U1830 ] };  // S: ᠰ SA
    key <AC03> { [ U1869,        U1869 ] };  // D: ᡩ SIBE DA
    key <AC04> { [ U1876,        U1876 ] };  // F: ᡶ MANCHU FA
    key <AC05> { [ U1864,        U186C ] };  // G: ᡩ SIBE GA, ᡶ SIBE GAA
    key <AC06> { [ U1865,        U186D ] };  // H: ᡩ SIBE HA, ᡶ SIBE HAA
    key <AC07> { [ U1835,        U1835 ] };  // J: ᠵ JA
    key <AC08> { [ U1874,        U183A ] };  // K: ᡴ MANCHU KA, ᠺ KA
    key <AC09> { [ U182F,        U182F ] };  // L: ᠯ LA
    key <AC10> { [ semicolon,    U1804 ] };  // ;: ;, ᠄
    key <AC11> { [ U180B,        U180C ] };  // `: FVS1, FVS2

    key <AB01> { [ U186F,        U1872 ] };  // Z: ᡯ SIBE ZA, ᡲ SIBE ZHA
    key <AB02> { [ U1867,        U1867 ] };  // X: ᡧ SIBE SHA
    key <AB03> { [ U186E,        U1871 ] };  // C: ᡮ SIBE TSA, ᡱ SIBE CHA
    key <AB04> { [ U1861,        U1861 ] };  // V: ᡡ SIBE U
    key <AB05> { [ U182A,        U182A ] };  // B: ᠪ BA
    key <AB06> { [ U1828,        U1862 ] };  // N: ᠨ NA, ᡢ SIBE ANG
    key <AB07> { [ U182E,        U182E ] };  // M: ᠮ MA
    key <AB08> { [ U1808,        U1808 ] };  // ,: ᠈
    key <AB09> { [ U1809,        U1809 ] };  // .: ᠉
    key <AB10> { [ question,  question ] };  // /:  , ?
};

// Mongolian Bichig Galik Keyboard Map for XKB/X.Org
//
// by Maurizio M. Gavioli <mmg@vistamaresoft.com>, 2019 from PRC
// standard GB/T 28038-2011, par. 4.7.

partial alphanumeric_keys
xkb_symbols "mon_trad_galik" {
    include "us(basic)"

    name[Group1]= "Mongolian (Galik)";

    key <TLDE> { [ U180D,        U180D ] };  // ~: FVS3
    key <AE01> { [ U1811,        U1811 ] };  // 1: ᠑
    key <AE02> { [ U1812,        U1812 ] };  // 2: ᠒
    key <AE03> { [ U1813,        U1813 ] };  // 3: ᠓
    key <AE04> { [ U1814,        U1814 ] };  // 4: ᠔
    key <AE05> { [ U1815,        U1815 ] };  // 5: ᠕
    key <AE06> { [ U1816,        U200C ] };  // 6: ᠖, ZWNJ
    key <AE07> { [ U1817,        U1817 ] };  // 7: ᠗
    key <AE08> { [ U1818,        U200D ] };  // 8: ᠘, ZWJ
    key <AE09> { [ U1819,        U1919 ] };  // 9: ᠙
    key <AE10> { [ U1810,        U1910 ] };  // 0: ᠐
    key <AE11> { [ U202F,        U180E ] };  // -: NNBSP, MVS
    key <AE12> { [ VoidSymbol, VoidSymbol ] };  // +: ---

    key <AD01> { [ U1880,        U1827 ] };  // Q: ᢀ ALI GALI ANUNASVARA ONE, ᠧ EE
    key <AD02> { [ U1881,        U1823 ] };  // W: ᢁ ALI GALI VISARGA ONE, ᠣ O
    key <AD03> { [ U1882,        U1821 ] };  // E: ᢂ ALI GALI DAMARU, ᠡ E
    key <AD04> { [ U1883,        U1883 ] };  // R: ᢃ ALI GALI UBADAMA
    key <AD05> { [ U1884,        U1884 ] };  // T: ᢄ ALI GAL INVERTED UDADAMA
    key <AD06> { [ U1885,        U1885 ] };  // Y: ᢅ ALI GALI BALUDA
    key <AD07> { [ U1886,        U1826 ] };  // U: ᢆ ALI GALI THREE BALUDA, ᠦ UE
    key <AD08> { [ U1887,        U1822 ] };  // I: ᢇ ALI GALI A, ᠢ I
    key <AD09> { [ U1888,        U1888 ] };  // O: ᢈALI GALI I
    key <AD10> { [ U1889,        U1889 ] };  // P: ᢉ ALI GALI KA
    key <AD11> { [ U188A,        U188A ] };  // [: ᢊ ALI GALI NGA
    key <AD12> { [ U1895,        U1895 ] };  // ]: ᢕ ALI GALI ZHA
    key <BKSL> { [ VoidSymbol, VoidSymbol ] };  // \: --

    key <AC01> { [ U188B,        U1820 ] };  // A: ᠀  ALI GALI CA,ᠠ  A
    key <AC02> { [ U188C,        U188C ] };  // S: ᡛ ALI GALI TTA
    key <AC03> { [ U188D,        U188D ] };  // D: ᢍ ALI GALI THA
    key <AC04> { [ U188E,        U188E ] };  // F: ᢎ ALI GALI DDA
    key <AC05> { [ U188F,        U188F ] };  // G: ᢏ ALI GALI NNA
    key <AC06> { [ U1890,        U1890 ] };  // H: ᢐ ALI GALI TA
    key <AC07> { [ U1891,        U1853 ] };  // J: ᢑ ALI GALI DA, ᡓ TODO JA
    key <AC08> { [ U1892,        U1858 ] };  // K: ᢒ ALI GALI PA, ᡘ TODO GAA
    key <AC09> { [ U1893,        U1893 ] };  // L: ᢓ ALI GALI PHA
    key <AC10> { [ U1894,        U1894 ] };  // ;: ᢔ ALI GALI SSA
    key <AC11> { [ U180B,        U180C ] };  // `: FVS1, FVS2

    key <AB01> { [ U1896,        U185C ] };  // Z: ᢖ ALI GALI ZA, ᡜ TODO DZA
    key <AB02> { [ U1897,        U1897 ] };  // X: ᢗ ALI GALI AH
    key <AB03> { [ U18A6,        U18A6 ] };  // C: ᢦ ALI GALI HALF U
    key <AB04> { [ U18A7,        U1824 ] };  // V: ᢦ ALI GALI HALF YA ,ᠤ U
    key <AB05> { [ U18A9,        U18A9 ] };  // B: ᢩ   ALI GALI DAGALGA
    key <AB06> { [ U1805,        U1805 ] };  // N: ᠅
    key <AB07> { [ U1800,        U185B ] };  // M: ᠀ BIRGA, ᡛ TODO NYA
    key <AB08> { [ U1802,        U1802 ] };  // ,: ᠂
    key <AB09> { [ U1803,        U1803 ] };  // .: ᠃
    key <AB10> { [ VoidSymbol, VoidSymbol ] };  // /:
};

// Mongolian (Todo Galik) Keyboard Map for XKB/X.Org
//
// by Maurizio M. Gavioli <mmg@vistamaresoft.com>, 2019 from PRC
// standard GB/T 28038-2011, par. 4.8.

partial alphanumeric_keys
xkb_symbols "mon_todo_galik" {
    include "us(basic)"

    name[Group1]= "Mongolian (Todo Galik)";

    key <TLDE> { [ U180D,        U180D ] };  // ~: FVS3
    key <AE01> { [ U1811,        U1811 ] };  // 1: ᠑
    key <AE02> { [ U1812,        U1812 ] };  // 2: ᠒
    key <AE03> { [ U1813,        U1813 ] };  // 3: ᠓
    key <AE04> { [ U1814,        U1843 ] };  // 4: ᠔, ᡃ TODO LONG VOWEL SIGN

    key <AE05> { [ U1815,        U1815 ] };  // 5: ᠕
    key <AE06> { [ U1816,        U200C ] };  // 6: ᠖, ZWNJ
    key <AE07> { [ U1817,        U1817 ] };  // 7: ᠗
    key <AE08> { [ U1818,        U200D ] };  // 8: ᠘, ZWJ
    key <AE09> { [ U1819,        U1919 ] };  // 9: ᠙
    key <AE10> { [ U1810,        U1910 ] };  // 0: ᠐
    key <AE11> { [ U202F,        U202F ] };  // -: NNBSP
    key <AE12> { [ VoidSymbol, VoidSymbol ] };  // /: ---

    key <AD01> { [ U1880,        U1880 ] };  // Q: ᢀ ALI GALI ANUNASVARA ONE
    key <AD02> { [ U1881,        U1846 ] };  // W: ᢁ ALI GALI VISARGA ONE, ᡆ TODO O
    key <AD03> { [ U1882,        U1844 ] };  // E: ᢂ ALI GALI DAMARU, ᡄ TODO E
    key <AD04> { [ U1883,        U1883 ] };  // R: ᢃ ALI GALI UBADAMA
    key <AD05> { [ U1884,        U1884 ] };  // T: ᢄ ALI GAL INVERTED UDADAMA
    key <AD06> { [ U1885,        U1885 ] };  // Y: ᢅ ALI GALI BALUDA
    key <AD07> { [ U1886,        U1849 ] };  // U: ᢆ ALI GALI THREE BALUDA, ᡉ TODO UE
    key <AD08> { [ U1889,        U1845 ] };  // I: ᢉ ALI GALI KA, ᡅ TODO I
    key <AD09> { [ U188A,        U188A ] };  // O: ᢊ ALI GALI NGA
    key <AD10> { [ U1887,        U1887 ] };  // P: ᢇ ALI GALI A
    key <AD11> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AD12> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <BKSL> { [ VoidSymbol, VoidSymbol ] };  // /: ---

    key <AC01> { [ U188B,        U1820 ] };  // A: ᢋ ALI GALI CA, ᠠ  A
    key <AC02> { [ U188C,        U188C ] };  // S: ᢌ ALI GALI TTA
    key <AC03> { [ U188D,        U188D ] };  // D: ᢍ ALI GALI THA
    key <AC04> { [ U188E,        U188E ] };  // F: ᢎ ALI GALI DDA
    key <AC05> { [ U188F,        U188F ] };  // G: ᢏ ALI GALI NNA
    key <AC06> { [ U1894,        U1894 ] };  // ;: ᢔ ALI GALI SSA
    key <AC07> { [ U1896,        U1896 ] };  // Z: ᢖ ALI GALI ZA
    key <AC08> { [ U1897,        U1897 ] };  // X: ᢗ ALI GALI AH
    key <AC09> { [ U1898,        U1898 ] };  // L: ᢘ TODO ALI GALI TA
    key <AC10> { [ U1892,        U1892 ] };  // K: ᢒ ALI GALI PA
    key <AC11> { [ U180B,        U180C ] };  // `: FVS1, FVS2

    key <AB01> { [ U1899,        U1899 ] };  // Z: ᢙ TODO ALI GALI ZHA
    key <AB02> { [ U18A7,        U18A6 ] };  // X: ᢧ ALI GALI HALF YA
    key <AB03> { [ U1893,        U1893 ] };  // C: ᢓ ALI GALI PHA
    key <AB04> { [ U1847,        U1847 ] };  // V: ᡇ TODO U
    key <AB05> { [ U18A9,        U18A9 ] };  // B: ᢩ   ALIGALI DAGALGA
    key <AB06> { [ U1805,        U1805 ] };  // N: ᠅ FOUR DOTS
    key <AB07> { [ U1800,        U185B ] };  // M: ᠀ BIRGA, ᡛ TODO NIA
    key <AB08> { [ U1802,        U1802 ] };  // ,: ᠂ COMMA
    key <AB09> { [ U1803,        U1803 ] };  // .: ᠃  FULL STOP
    key <AB10> { [ VoidSymbol, VoidSymbol ] };  // /: ---
};

// Mongolian (Manchu Galik) Keyboard Map for XKB/X.Org
//
// by Maurizio M. Gavioli <mmg@vistamaresoft.com>, 2019 from PRC
// standard GB/T 28038-2011, par. 4.9.


partial alphanumeric_keys
xkb_symbols "mon_manchu_galik" {
    include "us(basic)"

    name[Group1]= "Mongolian (Manchu Galik)";

    key <TLDE> { [ U180D,        U180D ] };  // ~: FVS3
    key <AE01> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AE02> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AE03> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AE04> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AE05> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AE06> { [ VoidSymbol,   U200C ] };  // 6: --, ZWNJ
    key <AE07> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AE08> { [ VoidSymbol,   U200D ] };  // 8: 8, ZWJ
    key <AE09> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AE10> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AE11> { [ U202F,        U202F ] };  // -: NNBSP
    key <AE12> { [ VoidSymbol, VoidSymbol ] };  // /: ---

    key <AD01> { [ U1880,        U1880 ] };  // Q: ᢀ ALI GALI ANUNASVARA ONE
    key <AD02> { [ U1881,        U1881 ] };  // W: ᢁ ALI GALI VISARGA ONE
    key <AD03> { [ U1882,        U185D ] };  // E: ᢂ ALI GALI DAMARU, ᡝ SIBE E
    key <AD04> { [ U1883,        U1883 ] };  // R: ᢃ ALI GALI UBADAMA
    key <AD05> { [ U1884,        U1884 ] };  // T: ᢄ ALI GAL INVERTED UDADAMA
    key <AD06> { [ U1885,        U1885 ] };  // Y: ᢅ ALI GALI BALUDA
    key <AD07> { [ U1886,        U1860 ] };  // U: ᢆ ALI GALI THREE BALUDA, ᡠ SIBE UE
    key <AD08> { [ U1887,        U1873 ] };  // I: ᢇ ALI GALI A, ᡳ MANCHU I
    key <AD09> { [ U1888,        U1823 ] };  // O: ᢈ ALI GALI I, ᠣ O
    key <AD10> { [ U188F,        U188F ] };  // P: ᢏ ALI GALI NNA
    key <AD11> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AD12> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <BKSL> { [ VoidSymbol, VoidSymbol ] };  // /: ---

    key <AC01> { [ U1892,        U1820 ] };  // A: ᢒ ALI GALI PA, ᠠ  A
    key <AC02> { [ U189A,        U189A ] };  // S: ᢚ MANCHU ALI GALI GHA
    key <AC03> { [ U189B,        U189B ] };  // D: ᢛ MANCHU ALI GALI NGA
    key <AC04> { [ U189C,        U189C ] };  // F: ᢜ MANCHU ALI GALI CA
    key <AC05> { [ U189D,        U189D ] };  // G: ᢝ MANCHU ALI GALI JHA
    key <AC06> { [ U189E,        U189E ] };  // H: ᢞ MANCHU ALI GALI TTA
    key <AC07> { [ U189F,        U189F ] };  // J: ᢟ MANCHU ALI GALI DDHA
    key <AC08> { [ U18A0,        U18A0 ] };  // K: ᢠ MANCHU ALI GALI TA
    key <AC09> { [ U18A1,        U18A1 ] };  // L: ᢡ MANCHU ALI GALI DHA
    key <AC10> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AC11> { [ U180B,        U180C ] };  // `: FVS1, FVS2

    key <AB01> { [ U18A2,        U18A2 ] };  // Z: ᢢ MANCHU ALI GALI SSA
    key <AB02> { [ U18A3,        U18A3 ] };  // X: ᢣ MANCHU ALI GALI CYA
    key <AB03> { [ U18A4,        U18A4 ] };  // C: ᢤ MANCHU ALI GALI ZHA
    key <AB04> { [ U18A5,        U1861 ] };  // V: ᢥ MANCHU ALI GALI ZA, ᡡ SIBE U
    key <AB05> { [ U18A8,        U18A8 ] };  // B: ᢨ MANCHU ALI GALI BHA
    key <AB06> { [ U18AA,        U18AA ] };  // N: ᢪ MANCHU ALI GALI LHA
    key <AB07> { [ VoidSymbol, VoidSymbol ] };  // /: ---
    key <AB08> { [ U1808,        U1808 ] };  // ,: ᠈
    key <AB09> { [ U1809,        U1809 ] };  // .: ᠉
    key <AB10> { [ VoidSymbol, VoidSymbol ] };  // /: ---
};
// based on a keyboard map from an 'xkb/symbols/dev' file

default partial alphanumeric_keys
xkb_symbols "basic" {

      name[Group1]= "Nepali";

// `,1,2,3,4,5,6,7,8,9,0,-,=

      key <TLDE> { [      0x100093D,0x100093C ]	};
      key <AE01> { [      0x1000967, exclam		]	};
      key <AE02> { [      0x1000968, at			]	};
      key <AE03> { [      0x1000969, numbersign		]	};
      key <AE04> { [      0x100096A, dollar		]	};
      key <AE05> { [      0x100096B, percent		]	};
      key <AE06> { [      0x100096C, asciicircum	]	};
      key <AE07> { [      0x100096D, ampersand		]	};
      key <AE08> { [      0x100096e, asterisk		]	};
      key <AE09> { [      0x100096F	 		]	};
      key <AE10> { [      0x1000966,0x1000970		]	};
      key <AE11> { [      minus, 0x1000952 		]	};
      key <AE12> { [      0x100200D, 0x100200C		]	};

// q,w,e,r,t,y,u,i,o,p,[,]

      key <AD01> { [      0x100091F,  0x1000920       	]	};
      key <AD02> { [      0x100094C,  0x1000914       	]	};
      key <AD03> { [      0x1000947,  0x1000948       	]	};
      key <AD04> { [      0x1000930,  0x1000943       	]	};
      key <AD05> { [      0x1000924,  0x1000925       	]	};
      key <AD06> { [      0x100092F,  0x100091E 	]	};
      key <AD07> { [      0x1000941,  0x1000942 	]	};
      key <AD08> { [      0x100093F,  0x1000940 	]	};
      key <AD09> { [      0x100094B,  0x1000913		]	};
      key <AD10> { [      0x100092A,  0x100092B 	]	};
      key <AD11> { [      0x1000907,  0x1000908		]	};
      key <AD12> { [      0x100090F,  0x1000910		]	};

// a,s,d,f,g,h,j,k,l,;,',Backslash 
      key <AC01> { [      0x100093E,  0x1000906       	]	};
      key <AC02> { [      0x1000938,  0x1000936       	]	};
      key <AC03> { [      0x1000926,  0x1000927       	]	};
      key <AC04> { [      0x1000909,  0x100090A       	]	};
      key <AC05> { [      0x1000917,  0x1000918       	]	};
      key <AC06> { [      0x1000939,  0x1000905 	]	};
      key <AC07> { [      0x100091C,  0x100091D 	]	};
      key <AC08> { [      0x1000915,  0x1000916 	]	};
      key <AC09> { [      0x1000932,  0x1000933 	]	};
      key <AC10> { [      semicolon,  colon 		]	};
      key <AC11> { [      apostrophe, quotedbl		]	};
      key <BKSL> { [      0x1000950,  0x1000903 	]	};


// z,x,c,v,b,n,m,,,.,/ 
      key <AB01> { [      0x1000937,  0x100090B		]	};
      key <AB02> { [      0x1000921,  0x1000922		]	};
      key <AB03> { [      0x100091B,  0x100091A         ]       };
      key <AB04> { [      0x1000935,  0x1000901		]       };
      key <AB05> { [      0x100092C,  0x100092D		]       };
      key <AB06> { [      0x1000928,  0x1000923         ]       };
      key <AB07> { [      0x100092E,  0x1000902         ]       };
      key <AB08> { [      comma,      0x1000919         ]       };
      key <AB09> { [      0x1000964,  0x1000965		]       };
      key <AB10> { [      0x100094D,  question		]       };
};

partial alphanumeric_keys

xkb_symbols "olpc" {
// Contact: Walter Bender <walter@laptop.org>

  include "np"
      key <TLDE> { [      0x100091E,  0x1000965 	]	}; // NYA; double danda
      key <AE01> { [      0x1000967,  0x10FFFFD	]	}; // Nepali digit one; U091C+U094D+U091E
      key <AE02> { [      0x1000968,  0x1000908		]	}; // Nepali digit two;      key <AE03> { [      0x1000969,  0x1000918 	]	}; // Nepali digit three;
      key <AE04> { [      0x100096A,  0x10FFFFC  	]	}; // Nepali digit four; U0926+U094D+U0927
      key <AE05> { [      0x100096B,  0x100091B  	]	}; // Nepali digit five
      key <AE06> { [      0x100096C,  0x100091F  	]	}; // Nepali digit six
      key <AE07> { [      0x100096D,  0x1000920  	]	}; // Nepali digit seven
      key <AE08> { [      0x100096e,  0x1000921  	]	}; // Nepali digit eight
      key <AE09> { [      0x100096F,  0x1000922	 	]	}; // Nepali digit nine
      key <AE10> { [      0x1000966,  0x1000923		]	}; // Nepali digit zero
      key <AE11> { [      0x1000914,  0x1000913         ]       }; // O, AU
      key <AE12> { [      0x100200C,  0x1000902 	]       }; // ZERO-WIDTH-NON-JOINER (ZWNJ); SIGN ANUSVARA
      key <BKSL> { [      0x100094D,  0x100200D 	]	}; // SIGN VIRAMA; ZERO-WIDTH-JOINER (ZWJ)
      key <AD01> { [      0x10FFFFB,  0x10FFFFA 	]	}; // U0924+U094D+U0930; U0924+U094D+U0924
      key <AD02> { [      0x1000927,  0x10FFFF9   	]	}; // DHA; U0921+U094D+U0922
      key <AD03> { [      0x100092D,  0x1000910 	]	}; // BHA, AI
      key <AD04> { [      0x100091A,  0x10FFFF8       ]	}; // CA; U0926+U094D+U0935
      key <AD05> { [      0x1000924,  0x10FFFF7		]	}; // TA; U091F+U094D+U091F
      key <AD06> { [      0x1000925,  0x10FFFF6   ]       }; // THA; U0920+U094D+U0920
      key <AD07> { [      0x1000917,  0x100090A 	]	}; // GA, UU
      key <AD08> { [      0x1000937,  0x10FFFF5    	]	}; // SSA; U0915+U094D+U0937
      key <AD09> { [      0x100092F,  0x1000907 	]	}; // YA, I
      key <AD10> { [      0x1000909,  0x100090F 	]	}; // U, E
      key <AD11> { [      0x10FFFF4,  0x1000943 	]	}; // U0928+U094D+ZWJ; VOWEL SIGN VOCALIC R
      key <AD12> { [      0x1000947,  0x1000948 	]	}; // SIGN E; SIGN AI
      key <AC01> { [      0x100092C,  0x1000906         ]       }; // BA, AA
      key <AC02> { [      0x1000915,  0x10FFFF3	]	}; // KA; U0919+U094D+U0915
      key <AC03> { [      0x100092E,  0x10FFFF2      ]       }; // MA; U0919+U094D+U0917
      key <AC04> { [      0x100093E,  0x1000901		]       }; // CANDRABINDU, VOWEL SIGN AA
      key <AC05> { [      0x1000928,  0x10FFFF1      	]	}; // NA; U0926+U094D+U0926
      key <AC06> { [      0x100091C,  0x100091D       	]	}; // JA, JHA
      key <AC07> { [      0x1000935,  0x100094B       	]	}; // VA, VOWEL SIGN O
      key <AC08> { [      0x100092A,  0x100092B       	]	}; // PA, PHA
      key <AC09> { [      0x100093F,  0x1000940 	]	}; // VOWEL SIGN I, VOWEL SIGN II
      key <AC10> { [      0x1000938,  0x10FFFF0 	]	}; // SA; U091F+U094D+U0920
      key <AC11> { [      0x1000941,  0x1000942 	]	}; // VOWEL SIGN U, VOWEL SIGN UU
      key <AB01> { [      0x1000936,  0x10FFFEF	]	}; // SHA; U0915+U094D+U0915
      key <AB02> { [      0x1000939,  0x10FFFEE	]       }; // HA; U0939+U094D+U092F
      key <AB03> { [      0x1000905, 0x100090B         	]	}; // A; U0909+U090B
      key <AB04> { [      0x1000916,  0x1000950 	]	}; // KHA, OM
      key <AB05> { [      0x1000926,  0x100094C		]	}; // DA, VOWEL SIGN AU
      key <AB06> { [      0x1000932,  0x10FFFED	]	}; // LA; U0926+U094D+U092F
      key <AB07> { [      0x1000903,  0x10FFFEC 	]	}; // SIGN VISARGA; U0921+U094D+U0921
      key <AB08> { [      0x100093D,  0x1000919		]       }; // SIGN AVAGRHA; NGA
      key <AB09> { [      0x1000964,  0x10FFFEB	]       }; // DANDA; U0936+U094D+U0930
      key <AB10> { [      0x1000930,  0x10FFFEA   		]       }; // RA; U0930+U0941

      include "group(olpc)"
};
// based on
// Estonian XKB-keymap by Ville Hallik <ville@linux.ee>
//

default partial alphanumeric_keys
xkb_symbols "basic" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple Estonian keyboard
    // This layout conforms to both EVS8:1993 and EVS8:2000 standards

    include "latin(type4)"

    name[Group1]="Estonian";

    key <AE03>	{ [         3, numbersign,     sterling,     sterling ]	};
    key <AE04>	{ [         4,   currency,       dollar,       dollar ]	};
    key <AE11>	{ [      plus,   question,    backslash, questiondown ]	};
    key <AE12>	{ [dead_acute, dead_grave,        grave,   apostrophe ]	};

    key <AD11>	{ [udiaeresis, Udiaeresis, dead_diaeresis, dead_abovering ] };
    key <AD12>	{ [    otilde,     Otilde,      section,  dead_macron ]	};

    key <AC02>	{ [         s,          S,       scaron,       Scaron ]	};
    key <AC10>	{ [odiaeresis, Odiaeresis,   dead_acute, dead_doubleacute ] };
    key <AC11>	{ [adiaeresis, Adiaeresis,  asciicircum,   dead_caron ]	};
    key <TLDE>	{ [dead_caron, dead_tilde,      notsign,      notsign ]	};

    key <BKSL>	{ [apostrophe,   asterisk,      onehalf,   dead_breve ]	};
    key <AB01>	{ [         z,          Z,       zcaron,       Zcaron ]	};
    key <AB08>	{ [     comma,  semicolon,         less,     multiply ]	};
    key <AB09>	{ [    period,      colon,      greater,     division ]	};
    key <AB10>	{ [     minus, underscore,          bar,     abovedot ] };

    include "level3(ralt_switch)"
    include "eurosign(e)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // Modifies the basic Estonian layout to eliminate all dead keys

    include "ee(basic)"
    name[Group1]="Estonian (no dead keys)";

    key <TLDE>	{ [asciicircum,asciitilde ]	};
    key <AE12>	{ [apostrophe,      grave ]	};
    key <AD11>	{ [udiaeresis, Udiaeresis,    diaeresis,       degree ]	};
    key <AD12>	{ [    otilde,     Otilde,      section,       macron ]	};
    key <AC10>	{ [odiaeresis, Odiaeresis,        acute,  doubleacute ]	};
    key <AC11>	{ [adiaeresis, Adiaeresis,  asciicircum,        caron ]	};
    key <BKSL>	{ [apostrophe,   asterisk,      onehalf,        breve ]	};
    key <AB10>	{ [     minus, underscore, dead_belowdot,    abovedot ]	};
};

// Dvorak with Estonian characters
partial alphanumeric_keys
xkb_symbols "dvorak" {
   include "us(dvorak)"
   name[Group1]= "Estonian (Dvorak)";

    key <AE03>	{ [         3, numbersign,   sterling ]	};
    key <AE04>	{ [         4,     dollar,    section,   currency ]	};
    key <AE08>	{ [         8,   asterisk,    onehalf ]	};

    key <AC01>	{ [         a,          A, adiaeresis, Adiaeresis ]	};
    key <AC02>	{ [         o,          O,     otilde,     Otilde ]	};
    key <AC03>	{ [         e,          E, odiaeresis, Odiaeresis ]	};
    key <AC04>	{ [         u,          U, udiaeresis, Udiaeresis ]	};
    key <AC10>	{ [         s,          S,     scaron,     Scaron ]	};
    key <AB10>	{ [         z,          Z,     zcaron,     Zcaron ]	};

    include "level3(ralt_switch)"
    include "kpdl(comma)"
    include "eurosign(5)"
};

// Estonian few characters on basic US keymap.
// by Elan Ruusamäe <glen@delfi.ee>
partial alphanumeric_keys
xkb_symbols "us" {
    include "us(euro)"
    name[Group1] = "Estonian (US)";

    // ž, Ž
    key <AB01>	{ [           z,  Z,          zcaron,     Zcaron     ]	};
    // ¢
    key <AB03>	{ [           c,  C,          cent,       cent       ]	};
    // š, Š
    key <AC02>	{ [           s,  S,          scaron,     Scaron     ]	};
    key <AC10>	{ [ semicolon,    colon,      odiaeresis, Odiaeresis ]	};
    key <AC11>	{ [ apostrophe,   quotedbl,   adiaeresis, Adiaeresis ]	};
    key <AD11>	{ [ bracketleft,  braceleft,  udiaeresis, Udiaeresis ]	};
    key <AD12>	{ [ bracketright, braceright, otilde,     Otilde     ]	};
    // £
    key <AE03>	{ [           3,  numbersign, sterling,   sterling   ]	};

    include "level3(ralt_switch)"
    include "eurosign(e)"
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/ee(sun_type6)"
};
default partial
xkb_symbols "fr" {
    name[Group1] = "French (Canada)";

    key <TLDE>	{ [ numbersign,       bar,     backslash ]	};
    key <AE01>	{ [         1,     exclam,     plusminus ]	};
    key <AE02>	{ [         2,   quotedbl,            at ]	};
    key <AE03>	{ [         3,      slash,      sterling ]	};
    key <AE04>	{ [         4,     dollar,          cent ]	};
    key <AE05>	{ [         5,    percent,      currency ] 	};
    key <AE06>	{ [         6,   question,       notsign ]	};
    key <AE07>	{ [         7,  ampersand,     brokenbar ]	};
    key <AE08>	{ [         8,   asterisk,   twosuperior ]	};
    key <AE09>	{ [         9,  parenleft, threesuperior ]	};
    key <AE10>	{ [         0, parenright,    onequarter ]	};
    key <AE11>	{ [     minus, underscore,       onehalf ]	};
    key <AE12>	{ [     equal,       plus, threequarters ]	};

    key <AD01>	{ [         q,          Q ]	};
    key <AD02>	{ [         w,          W ]	};
    key <AD03>	{ [         e,          E ]	};
    key <AD04>	{ [         r,          R ]	};
    key <AD05>	{ [         t,          T ]	};
    key <AD06>	{ [         y,          Y ]	};
    key <AD07>	{ [         u,          U ]	};
    key <AD08>	{ [         i,          I ]	};
    key <AD09>	{ [         o,          O,   section ]	};
    key <AD10>	{ [         p,          P, paragraph ]	};
    key <AD11>	{ [dead_circumflex, dead_circumflex, bracketleft  ]	};
    key <AD12>	{ [   dead_cedilla,  dead_diaeresis, bracketright ]	};

    key <AC01>	{ [         a,          A ]	};
    key <AC02>	{ [         s,          S ]	};
    key <AC03>	{ [         d,          D ]	};
    key <AC04>	{ [         f,          F ]	};
    key <AC05>	{ [         g,          G ]	};
    key <AC06>	{ [         h,          H ]	};
    key <AC07>	{ [         j,          J ]	};
    key <AC08>	{ [         k,          K ]	};
    key <AC09>	{ [         l,          L ]	};
    key <AC10>	{ [ semicolon,      colon, asciitilde ]	};
    key <AC11>	{ [dead_grave, dead_grave,  braceleft ]	};
    key <BKSL>	{ [      less,    greater, braceright ]	};

    key <LSGT>	{ [guillemotleft, guillemotright, degree]	};
    key <AB01>	{ [         z,          Z ]	};
    key <AB02>	{ [         x,          X ]	};
    key <AB03>	{ [         c,          C ]	};
    key <AB04>	{ [         v,          V ]	};
    key <AB05>	{ [         b,          B ]	};
    key <AB06>	{ [         n,          N ]	};
    key <AB07>	{ [         m,          M,           mu ]	};
    key <AB08>	{ [     comma, apostrophe,       macron ]	};
    key <AB09>	{ [    period,     period,       hyphen ]	};
    key <AB10>	{ [    eacute,     Eacute,   dead_acute ]	};

    key <SPCE>	{ [     space,      space, nobreakspace ]	};

    include "level3(ralt_switch)"
};

xkb_symbols "fr-dvorak" {
    name[Group1] = "French (Canada, Dvorak)";

    key <TLDE>  { [ numbersign,       bar,     backslash ]  };
    key <AE01>  { [         1,     exclam,     plusminus ]  };
    key <AE02>  { [         2,   quotedbl,            at ]  };
    key <AE03>  { [         3,      slash,      sterling ]  };
    key <AE04>  { [         4,     dollar,          cent ]  };
    key <AE05>  { [         5,    percent,      currency ]  };
    key <AE06>  { [         6,   question,       notsign ]  };
    key <AE07>  { [         7,  ampersand,     brokenbar ]  };
    key <AE08>  { [         8,   asterisk,   twosuperior ]  };
    key <AE09>  { [         9,  parenleft, threesuperior ]  };
    key <AE10>  { [         0, parenright,    onequarter ]  };
    key <AE11>  { [dead_circumflex, dead_circumflex, bracketleft  ] };
    key <AE12>  { [   dead_cedilla,  dead_diaeresis, bracketright ] };

    key <AD01>  { [dead_grave, dead_grave,  braceleft ] };
    key <AD02>  { [     comma, apostrophe,       macron ]   };
    key <AD03>  { [    period,     period,       hyphen ]   };
    key <AD04>  { [         p,          P, paragraph ]  };
    key <AD05>  { [         y,          Y ] };
    key <AD06>  { [         f,          F ] };
    key <AD07>  { [         g,          G ] };
    key <AD08>  { [         c,          C ] };
    key <AD09>  { [         r,          R ] };
    key <AD10>  { [         l,          L ] };
    key <AD11>  { [    eacute,     Eacute,   dead_acute ]   };
    key <AD12>  { [     equal,       plus, threequarters ]  };

    key <AC01>  { [         a,          A ] };
    key <AC02>  { [         o,          O,   section ]  };
    key <AC03>  { [         e,          E ] };
    key <AC04>  { [         u,          U ] };
    key <AC05>  { [         i,          I ] };
    key <AC06>  { [         d,          D ] };
    key <AC07>  { [         h,          H ] };
    key <AC08>  { [         t,          T ] };
    key <AC09>  { [         n,          N ] };
    key <AC10>  { [         s,          S ] };
    key <AC11>  { [     minus, underscore,       onehalf ]  };
    key <BKSL>  { [      less,    greater, braceright ] };

    key <LSGT>  { [guillemotleft, guillemotright, degree]   };
    key <AB01>  { [ semicolon,      colon, asciitilde ] };
    key <AB02>  { [         q,          Q ] };
    key <AB03>  { [         j,          J ] };
    key <AB04>  { [         k,          K ] };
    key <AB05>  { [         x,          X ] };
    key <AB06>  { [         b,          B ] };
    key <AB07>  { [         m,          M,           mu ]   };
    key <AB08>  { [         w,          W ] };
    key <AB09>  { [         v,          V ] };
    key <AB10>  { [         z,          Z ] };

    key <SPCE>  { [     space,      space, nobreakspace ]   };

    include "level3(ralt_switch)"
};

partial
xkb_symbols "fr-legacy" {

    include "ca(fr)"

    name[Group1] = "French (Canada, legacy)";

    key <TLDE>	{ [    degree,     degree,       notsign ]	};
    key <AE01>	{ [         1,     exclam,   onesuperior ]	};

    key <AE03>	{ [         3, numbersign, threesuperior ]	};
    key <AE04>	{ [         4,     dollar,    onequarter ]	};
    key <AE05>	{ [         5,    percent,       onehalf ] 	};
    key <AE06>	{ [         6,   question, threequarters ]	};
    key <AE07>	{ [         7,  ampersand,     braceleft ]	};
    key <AE08>	{ [         8,   asterisk,   bracketleft ]	};
    key <AE09>	{ [         9,  parenleft,  bracketright,   plusminus ]	};
    key <AE10>	{ [         0, parenright,    braceright ]	};
    key <AE11>	{ [     minus, underscore,           bar, questiondown]	};
    key <AE12>	{ [     equal,       plus,  dead_cedilla ]	};

    key <AD04>	{ [         r,          R,     paragraph,  registered ]	};
    key <AD06>	{ [         y,          Y,           yen ]	};
    key <AD09>	{ [         o,          O,        oslash,      Ooblique ] };
    key <AD10>	{ [         p,          P,         thorn,       THORN ]	};
    key <AD11>	{ [dead_circumflex, dead_circumflex,           degree ]	};
    key <AD12>	{ [  ccedilla,   Ccedilla, dead_tilde, dead_diaeresis ]	};

    key <AC01>	{ [         a,          A,            ae,          AE ]	};
    key <AC02>	{ [         s,          S,        ssharp,     section ]	};
    key <AC03>	{ [         d,          D,           eth,         ETH ]	};
    key <AC04>	{ [         f,          F,   ordfeminine ]	};
    key <AC10>	{ [ semicolon,      colon,    dead_acute,  dead_acute ]	};
    key <AC11>	{ [    egrave,     Egrave ]	};
    key <BKSL>	{ [    agrave,     Agrave,    dead_grave ]	};

    key <LSGT>	{ [    ugrave,     Ugrave,     backslash,         bar ]	};
    key <AB01>	{ [         z,          Z, guillemotleft  ]	};
    key <AB02>	{ [         x,          X, guillemotright ]	};
    key <AB03>	{ [         c,          C,          cent,   copyright ]	};
    key <AB07>	{ [         m,          M,            mu,   masculine ]	};
    key <AB08>	{ [     comma, apostrophe,         less ]	};
    key <AB09>	{ [    period,     period,      greater ]	};
    key <AB10>	{ [    eacute,     Eacute,        slash ]	};
};

partial
xkb_symbols "multi" {

    include "ca(fr)"

    name[Group1] = "Canadian (intl., 1st part)";

    key <TLDE>	{ [     slash,  backslash,           bar ]	};
    key <AE01>	{ [         1,     exclam ]	};
    key <AE02>	{ [         2,         at ]	};
    key <AE03>	{ [         3, numbersign ]	};
    key <AE04>	{ [         4,     dollar ]	};
    key <AE05>	{ [         5,    percent ] 	};
    key <AE06>	{ [         6,   question ]	};
    key <AE07>	{ [         7,  ampersand,    braceleft ]	};
    key <AE08>	{ [         8,   asterisk,   braceright ]	};
    key <AE09>	{ [         9,  parenleft,  bracketleft ]	};
    key <AE10>	{ [         0, parenright, bracketright ]	};
    key <AE11>	{ [     minus, underscore ]	};
    key <AE12>	{ [     equal,       plus,      notsign ]	};

    key <AD09>	{ [         o,          O ]	};
    key <AD10>	{ [         p,          P ]	};
    key <AD11>	{ [dead_circumflex, dead_diaeresis, dead_grave  ]	};
    key <AD12>	{ [  ccedilla,   Ccedilla,   asciitilde ]	};

    key <AC10>	{ [ semicolon,      colon,     degree ]	};
    key <AC11>	{ [    egrave,     Egrave ]	};
    key <BKSL>	{ [    agrave,     Agrave ]	};

    key <LSGT>	{ [    ugrave,     Ugrave ] 	};
    key <AB01>	{ [         z,          Z, guillemotleft  ]	};
    key <AB02>	{ [         x,          X, guillemotright ]	};
    key <AB08>	{ [     comma, apostrophe,           less ]	};
    key <AB09>	{ [    period,   quotedbl,        greater ]	};
    key <AB10>	{ [    eacute,     Eacute ]	};
};

partial
xkb_symbols "multi-2gr" {

    name[Group1] = "Canadian (intl., 2nd part)";

    key <TLDE>	{ [    NoSymbol,      hyphen ]	};
    key <AE01>	{ [   onesuperior,  exclamdown ]	};
    key <AE02>	{ [   twosuperior,  NoSymbol ]	};
    key <AE03>	{ [ threesuperior,    sterling ]	};
    key <AE04>	{ [    onequarter,    currency ]	};
    key <AE05>	{ [       onehalf,threeeighths ]	};
    key <AE06>	{ [ threequarters, fiveeighths ]	};
    key <AE07>	{ [    NoSymbol,seveneighths ]	};
    key <AE08>	{ [    NoSymbol,   trademark ]	};
    key <AE09>	{ [    NoSymbol,   plusminus ]	};

    key <AE11>	{ [    NoSymbol, questiondown]	};
    key <AE12>	{ [  dead_cedilla, dead_ogonek ]	};

    key <AD01>	{ [ NoSymbol,    Greek_OMEGA ]	};
    key <AD02>	{ [    lstroke,        Lstroke ]	};
    key <AD03>	{ [         oe,             OE ]	};
    key <AD04>	{ [  paragraph,     registered ]	};
    key <AD05>	{ [     tslash,         Tslash ]	};
    key <AD06>	{ [  leftarrow,            yen ]	};
    key <AD07>	{ [  downarrow,        uparrow ]	};
    key <AD08>	{ [ rightarrow,       idotless ]	};
    key <AD09>	{ [     oslash,       Ooblique ]	};
    key <AD10>	{ [      thorn,          THORN ]	};
    key <AD11>	{ [ NoSymbol, dead_abovering ]	};
    key <AD12>	{ [ dead_tilde,    dead_macron ]	};

    key <AC01>	{ [         ae,          AE ]	};
    key <AC02>	{ [     ssharp,     section ]	};
    key <AC03>	{ [        eth,         ETH ]	};
    key <AC04>	{ [ NoSymbol, ordfeminine ]	};
    key <AC05>	{ [        eng,         ENG ]	};
    key <AC06>	{ [    hstroke,     Hstroke ]	};
    key <AC07>	{ [      U0133,       U0132 ]	};
    key <AC08>	{ [        kra,  NoSymbol ]	};
    key <AC09>	{ [      U0140,       U013F ]	};
    key <AC10>	{ [ dead_acute, dead_doubleacute ]	};
    key <AC11>	{ [ NoSymbol,  dead_caron ]	};
    key <BKSL>	{ [ NoSymbol,  dead_breve ]	};


    key <LSGT>	{ [ NoSymbol,   brokenbar ]	};

    key <AB03>	{ [       cent,   copyright ]	};
    key <AB04>	{ [  leftdoublequotemark,  leftsinglequotemark ]	};
    key <AB05>	{ [ rightdoublequotemark, rightsinglequotemark ]	};
    key <AB06>	{ [      U0149,       U266A ]	};
    key <AB07>	{ [         mu,   masculine ]	};
    key <AB08>	{ [ Greek_horizbar, multiply ]	};
    key <AB09>	{ [ periodcentered, division ]	};
    key <AB10>	{ [ NoSymbol, dead_abovedot ]	};
};

// based on
// Inuktitut keyboard for X11
// written by Pablo Saratxaga <pablo@mandrakesoft.com>

alphanumeric_keys
xkb_symbols "ike" {

    name[Group1]= "Inuktitut";

    key	<AE01> { [ 0x01001595, 1		]	};
    key	<AE02> { [ 0x01001449, 2		]	};
    key	<AE03> { [ 0x01001550, 3		]	};
    key	<AE04> { [ 0x01001483, 4		]	};
    key	<AE05> { [ 0x01001466, 5		]	};
    key	<AE06> { [ 0x01001585, 6		]	};
    key	<AE07> { [ 0x010014bb, 7		]	};
    key	<AE08> { [ 0x010014d0, 8		]	};
    key	<AE09> { [ 0x010014ea, 9		]	};
    key	<AE10> { [ 0x0100153e, 0		]	};
    key	<AE11> { [ minus,	  underscore	]	};
    key	<AE12> { [ 0x0100155d, equal		]	};

	key <AD01> { [ 0x0100158f, 0x0100148b	]	};
	key <AD02> { [ 0x01001403, 0x01001431	]	};
	key <AD03> { [ 0x0100157f, 0x01001546	]	};
	key <AD04> { [ 0x0100146d, 0x01001596	]	};
	key <AD05> { [ 0x0100144e, 0x01001671	]	};
	key <AD06> { [ 0x010014ef, 0x01001673	]	};
	key <AD07> { [ 0x010014a5, 0x01001675	]	};
	key <AD08> { [ 0x010014c2, 0x010015a4	]	};
	key <AD09> { [ 0x010014d5, 0x010015a0	]	};
	key <AD10> { [ 0x01001528, 0x010015a6	]	};
	key <AD11> { [ 0x010014a1, 0x01001505	]	};
	key <AD12> { [ dead_abovedot, 0x0100141e]	};

	key <AC01> { [ 0x01001591, 0x0100148d	]	};
	key <AC02> { [ 0x01001405, 0x01001433	]	};
	key <AC03> { [ 0x01001581, 0x01001548	]	};
	key <AC04> { [ 0x0100146f, 0x01001555	]	};
	key <AC05> { [ 0x01001450, parenleft 	]	};
	key <AC06> { [ 0x010014f1, parenright	]	};
	key <AC07> { [ 0x010014a7, 0x0100152a	]	};
	key <AC08> { [ 0x010014c4, 0x01001557	]	};
	key <AC09> { [ 0x010014d7, 0x010015a2	]	};
	key <AC10> { [ semicolon,  colon     	]	};
	key <AC11> { [ apostrophe, quotedbl     ]	};

	key <AB01> { [ 0x01001593, 0x01001490	]	};
	key <AB02> { [ 0x0100140a, 0x01001438	]	};
	key <AB03> { [ 0x01001583, 0x0100154b	]	};
	key <AB04> { [ 0x01001472, question  	]	};
	key <AB05> { [ 0x01001455, 0x0100157c	]	};
	key <AB06> { [ 0x010014f4, 0x010014c7	]	};
	key <AB07> { [ 0x010014aa, 0x010014da	]	};
	key <AB08> { [ comma,      less      	]	};
	key <AB09> { [ period,     greater   	]	};
	key <AB10> { [ 0x0100152d, 0x01001559	]	};

    key	<TLDE> { [ 0x0100157b, 0x01001575	]	};
    key	<LSGT> { [ 0x01001579, 0x01001577	]	};
    key	<BKSL> { [ backslash,  bar		]	};
};

partial
xkb_symbols "multix" {

    name[Group1] = "Canadian (intl.)";

    key.type[group1]="EIGHT_LEVEL_SEMIALPHABETIC";
    key <TLDE>	{ [     slash,  backslash,            bar, NoSymbol,
    		   NoSymbol,     hyphen ]	};
    key <AE01>	{ [         1,     exclam,      plusminus, NoSymbol,
    		  onesuperior, exclamdown ]	};
    key <AE02>	{ [         2,         at,             at, NoSymbol,
    		  twosuperior, NoSymbol ]	};
    key <AE03>	{ [         3, numbersign,       sterling, NoSymbol,
    		threesuperior,   sterling ]	};
    key <AE04>	{ [         4,     dollar,           cent, NoSymbol,
    		   onequarter,   currency ]	};
    key <AE05>	{ [         5,    percent,       currency, NoSymbol,
    		      onehalf, threeeighths ]	};
    key <AE06>	{ [         6,   question,        notsign, NoSymbol,
    		threequarters, fiveeighths ]	};
    key <AE07>	{ [         7,  ampersand,      braceleft, NoSymbol,
    		   NoSymbol, seveneighths ]	};
    key <AE08>	{ [         8,   asterisk,     braceright, NoSymbol,
    		   NoSymbol,  trademark ]	};
    key <AE09>	{ [         9,  parenleft,    bracketleft, NoSymbol,
    		   NoSymbol,  plusminus ]	};
    key <AE10>	{ [         0, parenright,   bracketright, NoSymbol ] };
    key <AE11>	{ [     minus, underscore,        onehalf, NoSymbol,
    		   NoSymbol, questiondown]	};
    key <AE12>	{ [     equal,       plus,        notsign, NoSymbol,
    		dead_cedilla, dead_ogonek ]	};

    key.type[group1]="EIGHT_LEVEL_SEMIALPHABETIC";
    key <AD01>	{ [         q,           Q,     NoSymbol, NoSymbol,
		   NoSymbol, Greek_OMEGA ]	};
    key <AD02>	{ [         w,           W,     NoSymbol, NoSymbol,
   		      lstroke,     Lstroke ]	};
    key <AD03>	{ [         e,           E,     NoSymbol, NoSymbol,
    			   oe,          OE ]	};
    key <AD04>	{ [         r,           R,     NoSymbol, NoSymbol,
    		    paragraph,  registered ]	};
    key <AD05>	{ [         t,           T,     NoSymbol, NoSymbol,
		       tslash,      Tslash ]	};
    key <AD06>	{ [         y,           Y,     NoSymbol, NoSymbol,
		    leftarrow,         yen ]	};
    key <AD07>	{ [         u,           U,     NoSymbol, NoSymbol,
    		    downarrow,     uparrow ]	};
    key <AD08>	{ [         i,           I,     NoSymbol, NoSymbol,
    		   rightarrow,    idotless ]	};
    key <AD09>	{ [         o,           O,        section, NoSymbol,
		       oslash,    Ooblique ]	};
    key <AD10>	{ [         p,           P,      paragraph, NoSymbol,
		        thorn,       THORN ]	};

    key.type[group1]="EIGHT_LEVEL";
    key <AD11>	{ [dead_circumflex, dead_diaeresis, dead_grave, NoSymbol,
    			NoSymbol, dead_abovering ]	};

    key.type[group1]="EIGHT_LEVEL_SEMIALPHABETIC";
    key <AD12>	{ [  ccedilla,   Ccedilla,     asciitilde, NoSymbol,
		   dead_tilde,    dead_macron ]	};

    key <AC01>	{ [         a,          A,     NoSymbol, NoSymbol,
    			   ae,         AE ]	};
    key <AC02>	{ [         s,          S,     NoSymbol, NoSymbol,
    		       ssharp,    section ]	};
    key <AC03>	{ [         d,          D,     NoSymbol, NoSymbol,
    			  eth,        ETH ]	};
    key <AC04>	{ [         f,          F,     NoSymbol, NoSymbol,
    		   NoSymbol, ordfeminine ]	};
    key <AC05>	{ [         g,          G,     NoSymbol, NoSymbol,
    			  eng,        ENG ]	};
    key <AC06>	{ [         h,          H,     NoSymbol, NoSymbol,
    		      hstroke,    Hstroke ]	};
    key <AC07>	{ [         j,          J,     NoSymbol, NoSymbol,
    			U0133,      U0132 ]	};
    key <AC08>	{ [         k,          K,     NoSymbol, NoSymbol,
    			  kra, NoSymbol ]	};
    key <AC09>	{ [         l,          L,     NoSymbol, NoSymbol,
    			U0140,      U013F ]	};

    key.type[group1]="EIGHT_LEVEL";
    key <AC10>	{ [ semicolon,          colon,         degree, NoSymbol,
    		   dead_acute, dead_doubleacute ]	};

    key.type[group1]="EIGHT_LEVEL_SEMIALPHABETIC";
    key <AC11>	{ [    egrave,         Egrave,      braceleft, NoSymbol,
    		   NoSymbol,  dead_caron ]	};
    key <BKSL>	{ [    agrave,         Agrave,     braceright, NoSymbol,
    		   NoSymbol,  dead_breve ]	};

    key <LSGT>	{ [    ugrave,     Ugrave,         degree, NoSymbol,
    		   NoSymbol,   brokenbar ]	};

    key.type[group1]="FOUR_LEVEL_SEMIALPHABETIC";
    key <AB01>	{ [         z,          Z,  guillemotleft, NoSymbol ]	};
    key <AB02>	{ [         x,          X, guillemotright, NoSymbol ]	};

    key.type[group1]="EIGHT_LEVEL_SEMIALPHABETIC";
    key <AB03>	{ [         c,          C,     NoSymbol, NoSymbol,
    			 cent,   copyright ]	};
    key <AB04>	{ [         v,          V,     NoSymbol, NoSymbol,
    	  leftdoublequotemark,  leftsinglequotemark ]	};
    key <AB05>	{ [         b,          B,     NoSymbol, NoSymbol,
    	 rightdoublequotemark, rightsinglequotemark ]	};
    key <AB06>	{ [         n,          N,     NoSymbol, NoSymbol,
    			U0149,       U266A ]	};
    key <AB07>	{ [         m,          M,             mu, NoSymbol,
    			   mu,   masculine ]	};
    key <AB08>	{ [     comma, apostrophe,           less, NoSymbol,
    	       Greek_horizbar, multiply ]	};
    key <AB09>	{ [    period,   quotedbl,        greater, NoSymbol,
    	       periodcentered, division ]	};
    key <AB10>	{ [    eacute,     Eacute,     dead_acute, NoSymbol,
    		   NoSymbol, dead_abovedot ]	};

    include "nbsp(level3s)"

    modifier_map Control{ Control_L };

    include "level3(ralt_switch)"
    include "level5(rctrl_switch)"
};

// OLPC Section
xkb_symbols "olpc" {

    include "ca(fr)"

    key <AE02>	{ [          2,    quotedbl,          ograve,        Ograve ] };
    key <AE03>	{ [          3,    slash,          at,        VoidSymbol ] };

    key <AD03>	{ [          e,    E,          EuroSign, VoidSymbol]	};

    key <AB09>	{ [  period,         period,         0x1002010 ]	};

    key <I219>  { [  guillemotleft,  guillemotright, degree, VoidSymbol ] };
};

partial alphanumeric_keys
xkb_symbols "eng" {
    include "us(basic)"
    name[Group1] = "English (Canada)";

    key <LSGT>  { [ backslash, bar, VoidSymbol, VoidSymbol ] };
};

// EXTRAS:

partial alphanumeric_keys
xkb_symbols "kut" {

    // Ejective U0313 and acute accents are taken from shs layout.
    include "ca(shs)"

    name[Group1]= "Kutenai";

    // Alveolar Click
    key <AD05> {	[ t,	T,U01C2	,U01C2	]	};

    //Cent sign
    key <AB03> {	[ c,	C,U00A2,U00A2	]	};

    //Mid dot
    key <AB09> {	[ period,     greater,U00B7   	]	};

    //Glottal stop
    key <AB10> {	[ slash,	question, U0294	]	};

    //COMBINING COMMA ABOVE RIGHT
    key <AC11> {	[ apostrophe,	quotedbl, U0315,U0315	]	};

    //MODIFIER LETTER RIGHT HALF RING
    key <AC10> {	[ semicolon,	colon,U02BE,U02BE	]	};
};

// Secwepemctsin keyboard for X11
// written by Neskie Manuel <neskiem@gmail.com>
partial alphanumeric_keys
xkb_symbols "shs" {

    include "us"

    name[Group1]= "Secwepemctsin";

    // Using a "dead key" to get a COMBINING COMMA ABOVE
    // for ejectives on q, l, t, s, m, g, k, p, w, y, r.
    // The Compose key is used for the other acutes and grave.

    key <AB08>	{ [ comma, less, U0313    ]	};
    key <AC01>	{ [ a, A, aacute, Aacute  ]	};
    key <AD03>	{ [ e, E, eacute, Eacute  ]	};
    key <AD07>	{ [ u, U, uacute, Uacute  ]	};
    key <AD08>	{ [ i, I, iacute, Iacute  ]	};
    key <AD09>	{ [ o, O, oacute, Oacute  ]	};

    include "level3(ralt_switch)"
    include "compose(rctrl)"
};


partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/ca(sun_type6)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin"
    name[Group1]= "German (Switzerland)";

    key <TLDE> { [    section,     degree                           ] };
    key <AE01> { [          1,       plus,          bar, exclamdown ] };
    key <AE02> { [          2,   quotedbl,           at, oneeighth  ] };
    key <AE03> { [          3,   asterisk,   numbersign             ] };
    key <AE04> { [          4,   ccedilla                           ] };
    key <AE05> { [          5,    percent                           ] };
    key <AE06> { [          6,  ampersand,      notsign             ] };
    key <AE07> { [          7,      slash,          bar             ] };
    key <AE08> { [          8,  parenleft,         cent             ] };
    key <AE09> { [          9, parenright                           ] };
    key <AE10> { [          0,      equal                           ] };
    key <AE11> { [ apostrophe,   question,   dead_acute             ] };
    key <AE12> { [ dead_circumflex, dead_grave, dead_tilde          ] };

    key <AD03> { [          e,          E,     EuroSign             ] };
    key <AD06> { [          z,          Z                           ] };
    key <AD09> { [          o,          O,     oe,       OE         ] };
    key <AD11> { [ udiaeresis,     egrave,  bracketleft             ] };
    key <AD12> { [ dead_diaeresis, exclam, bracketright             ] };

    key <AC10> { [ odiaeresis,     eacute                           ] };
    key <AC11> { [ adiaeresis,     agrave,    braceleft             ] };
    key <BKSL> { [     dollar,   sterling,   braceright             ] };

    key <LSGT> { [       less,    greater,    backslash, brokenbar  ] };
    key <AB01> { [          y,          Y                           ] };
    key <AB08> { [      comma,  semicolon                           ] };
    key <AB09> { [     period,      colon                           ] };
    key <AB10> { [      minus, underscore                           ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "legacy" {
    include "ch(basic)"

    name[Group1]= "German (Switzerland, legacy)";
    key <AE07> { [          7,      slash,    brokenbar             ] };
};

partial alphanumeric_keys
xkb_symbols "de" {
    include "ch(basic)"
};

partial alphanumeric_keys
xkb_symbols "de_sundeadkeys" {
    // Modify the basic Swiss German layout to use Sun dead keys.
    include "ch(basic)"
    name[Group1]= "German (Switzerland, Sun dead keys)";

    key <AE11> { [      apostrophe,   question,   dead_acute  ] };
    key <AE12> { [ dead_circumflex, dead_grave,   dead_tilde  ] };
    key <AD12> { [  dead_diaeresis,     exclam, bracketright  ] };
};

partial alphanumeric_keys
xkb_symbols "de_nodeadkeys" {
    // modify the basic Swiss German layout not to have any dead keys
    include "ch(basic)"
    name[Group1]= "German (Switzerland, no dead keys)";
    key <AE11> { [  apostrophe, question,        acute  ] };
    key <AE12> { [ asciicircum,    grave,   asciitilde  ] };
    key <AD12> { [   diaeresis,   exclam, bracketright  ] };
};

partial alphanumeric_keys
xkb_symbols "fr" {

    include "ch(basic)"
    name[Group1]= "French (Switzerland)";

    override key <AD11> {
	[ egrave,	udiaeresis,	bracketleft	]
    };
    override key <AC10> {
	[ eacute,	odiaeresis	]
    };
    override key <AC11> {
	[ agrave,	adiaeresis,	braceleft	]
    };
};

partial alphanumeric_keys
xkb_symbols "fr_sundeadkeys" {
    // Modify the basic Swiss French layout to use Sun dead keys.
    include "ch(fr)"
    name[Group1]= "French (Switzerland, Sun dead keys)";

    key <AE11> { [      apostrophe,   question,   dead_acute  ] };
    key <AE12> { [ dead_circumflex, dead_grave,   dead_tilde  ] };
    key <AD12> { [  dead_diaeresis,     exclam, bracketright  ] };
};

partial alphanumeric_keys
xkb_symbols "fr_nodeadkeys" {
    // modify the basic Swiss French layout not to have any dead keys
    include "ch(fr)"
    name[Group1]= "French (Switzerland, no dead keys)";
    key <AE11> { [  apostrophe, question,        acute  ] };
    key <AE12> { [ asciicircum,    grave,   asciitilde  ] };
    key <AD12> { [   diaeresis,   exclam, bracketright  ] };
};

// Copied from macintosh_vndr/ch
// 03.01.2003
// Andreas Tobler <a.tobler@schweiz.ch>
// modified for Swiss German Apple Extended Keyboard II

partial alphanumeric_keys
xkb_symbols "de_mac" {

    name[Group1]= "German (Switzerland, Macintosh)";

    key <AE01> { [	1,	plus, 	plusminus,	infinity		]	};
    key <AE02> { [	2,	quotedbl, leftdoublequotemark, rightdoublequotemark 	]	};
    key <AE03> { [	3,	asterisk, 	numbersign,	leftcaret	]	};
					// not displayed here
    key <AE04> { [	4,	ccedilla, 	Ccedilla,	slash		]	};
    key <AE05> { [	5,	percent, 	bracketleft			]	};
    key <AE06> { [	6,	ampersand, 	bracketright			]	};
    key <AE07> { [	7,	slash, 	bar,		backslash		]	};
    key <AE08> { [	8,	parenleft, 	braceleft,	Ograve		]	};
    key <AE09> { [	9,	parenright, 	braceright,	Ocircumflex	]	};
    key <AE10> { [	0,	equal, 	notequal,	Uacute			]	};
    key <AE11> { [	apostrophe,	question, 	questiondown, 	NoSymbol		]	};
    key <AE12> { [	dead_circumflex,dead_grave, 	dead_acute,	asciicircum		]	};
    key <AD01> { [	q,	Q, 	oe,		OE			]	};
    key <AD02> { [	w,	W, 	Greek_SIGMA,	Aacute			]	};
    key <AD03> { [ 	e,	E, 	EuroSign,	Ediaeresis		]	};
    key <AD04> { [ 	r,	R, 	registered,	Egrave			]	};
    key <AD05> { [ 	t,	T, 	dagger,		Icircumflex		]	};
    key <AD06> { [	z,	Z, 	Greek_OMEGA,	Iacute			]	};
    key <AD07> { [ 	u,	U, 	degree,		Ugrave			]	};
    key <AD08> { [ 	i,	I, 	exclamdown,	idotless		]	};
    key <AD09> { [ 	o,	O, 	oslash,		Ooblique		]	};
    key <AD10> { [ 	p,	P, 	Greek_pi,	Greek_PI		]	};
    key <AD11> { [	udiaeresis,	egrave, 	section,	ydiaeresis		]	};
    key <AD12> { [	dead_diaeresis,	exclam, 	grave,		apostrophe		]	};
    key <AC01> { [ 	a,	A, 	aring,		Aring			]	};
    key <AC02> { [ 	s,	S, 	ssharp, 	U1E9E			]	};
					// ligature fl
    key <AC03> { [ 	d,	D, 	Greek_sigma,	NoSymbol		]	};
			// partialderivative is not available here att
    key <AC04> { [ 	f,	F, 	function,	doubledagger		]	};
    key <AC05> { [ 	g,	G, 	at,		comma			]	};
    key <AC06> { [ 	h,	H, 	ordfeminine,	periodcentered		]	};
    key <AC07> { [ 	j,	J,  	masculine,	eth	 		]	};
    key <AC08> { [ 	k,	K, 	Greek_DELTA,	macron			]	};
    key <AC09> { [ 	l,	L, 	notsign,	caret			]	};
    key <AC10> { [	odiaeresis,	eacute, 	cent,		breve	]	};
    key <AC11> { [	adiaeresis,	agrave, 	ae,		AE	]	};
    key <AB01> { [	y,	Y, 	yen,		Ydiaeresis		]	};
    key <AB02> { [ 	x,	X, 	similarequal,	trademark		]	};
    key <AB03> { [ 	c,	C, 	copyright,	NoSymbol		]	};
    key <AB04> { [ 	v,	V, 	radical,	diamond			]	};
    key <AB05> { [ 	b,	B, 	integral,	NoSymbol		]	};
    key <AB06> { [ 	n,	N, 	dead_tilde, 	enopencircbullet	]       };
					// to be fixed att
    key <AB07> { [ 	m,	M, 	mu,		dead_abovering		]       };
					// not sure att
    key <AB08> { [	comma,	semicolon, 	guillemotleft,	guillemotright	]	};
    key <AB09> { [	period,	colon, 	ellipsis,	division		]	};
    key <AB10> { [	minus,	underscore, 	hyphen,		emdash		]	};
    key <TLDE> { [	section,	degree,   	NoSymbol, 	NoSymbol		]	};
			// ligature fi	// per mille
    key <SPCE> { [	space, 	nobreakspace,	nobreakspace		]	};
    key <LSGT> { [	less,	greater, 	lessthanequal,	greaterthanequal	]  	};
    key <BKSL> { [	dollar,	sterling, 	paragraph,	enfilledcircbullet	]	};

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "fr_mac" {

    include "ch(de_mac)"
    name[Group1]= "French (Switzerland, Macintosh)";

    override key <AD11> {
	[ egrave,	udiaeresis,  bracketleft	]
    };
    override key <AC10> {
	[ eacute,	odiaeresis	]
    };
    override key <AC11> {
	[ agrave,	adiaeresis,   braceleft		]
    };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6_de" {
	include "sun_vndr/ch(sun_type6_de)"
};

partial alphanumeric_keys
	xkb_symbols "sun_type6_fr" {
	include "sun_vndr/ch(sun_type6_fr)"
};
// This layout includes all Indian layouts, including:
//     - Hindi
//     - Marathi
//     - Sanskrit
//     - Bangla
//     - Gujarati
//     - Kannada
//     - Malayalam
//     - Ol Chiki
//     - Oriya
//     - Tamil
//     - Telugu
//     - Urdu

// Links:
// - Indic INSCRIPT keyboard layout diagrams:
//     http://java.sun.com/products/jfc/tsc/articles/InputMethod/indiclayout.html
// - Bangla Baishakhi (Bangla layouts):
// - Bangla Baishakhi Inscript (Bangla layouts):
// - Bangla Bornona (Bangla layouts):
// - Uni Gitanjali (Bangla layouts):
//     http://nltr.org
// - Ekusheyr Shadhinota (Bangla layouts):
//     http://ekushey.org/projects/shadhinota/index.html
// - Microsoft Windows XP SP2: Indic Language Standards - an Introduction:
//     http://www.bhashaindia.com/MSProducts/XpSp2/Articles/IndicLanguageStandards.aspx
// - Ol Chiki:
//    http://www.unicode.org/L2/L2005/05243r-n2984-ol-chiki.pdf (fig. 9)

// based on a keyboard map from an 'xkb/symbols/dev' file

// Devangari is the default. Kill me if I am wrong:)
default partial alphanumeric_keys
xkb_symbols "deva" {
	// March 2004 -- David Holl <smyrph+dev_xkb@ece.wpi.edu>
	name[Group1]="Indian";

	key.type="FOUR_LEVEL";

	key <TLDE> { [ U094a, U0912,   grave, asciitilde  ] };
	key <AE01> { [ U0967, U090d,       1, exclam      ] };
	key <AE02> { [ U0968, U0945,       2, at          ] };
	// Shift+AE0[3-8] really need to return a macro of keys defined by
	// INSCRIPT in place of the symbols that are here for now.  But this
	// requires XKB to map 1 key into two to three other key presses.
	key <AE03> { [ U0969, numbersign,  3, numbersign  ] };
	key <AE04> { [ U096a, dollar,      4		  ] };
	key <AE05> { [ U096b, percent,     5, percent     ] };
	key <AE06> { [ U096c, asciicircum, 6, asciicircum ] };
	key <AE07> { [ U096d, ampersand,   7, ampersand   ] };
	key <AE08> { [ U096e, asterisk,    8, asterisk    ] };
	key <AE09> { [ U096f, parenleft,   9, parenleft   ] };
	key <AE10> { [ U0966, parenright,  0, parenright  ] };
	key <AE11> { [ minus, U0903, minus, underscore    ] };
	key <AE12> { [ U0943, U090b, U0944, U0960 ] };

	key <AD01> { [ U094c, U0914 ] };
	key <AD02> { [ U0948, U0910 ] };
	key <AD03> { [ U093e, U0906 ] };
	key <AD04> { [ U0940, U0908, U0963, U0961 ] };
	key <AD05> { [ U0942, U090a ] };
	key <AD06> { [ U092c, U092d ] };
	key <AD07> { [ U0939, U0919 ] };
	key <AD08> { [ U0917, U0918, U095a ] };
	key <AD09> { [ U0926, U0927 ] };
	key <AD10> { [ U091c, U091d, U095b ] };
	key <AD11> { [ U0921, U0922, U095c, U095d ] };
	key <AD12> { [ U093c, U091e ] };
	// I added \ / ? | for shell-convenience (file names and piping)
	key <BKSL> { [ U0949, U0911, U005C, U007C ] };

	key <AC01> { [ U094b, U0913 ] };
	key <AC02> { [ U0947, U090f ] };
	key <AC03> { [ U094d, U0905 ] };
	key <AC04> { [ U093f, U0907, U0962, U090c ] };
	key <AC05> { [ U0941, U0909 ] };
	key <AC06> { [ U092a, U092b, NoSymbol, U095e ] };
	key <AC07> { [ U0930, U0931 ] };
	key <AC08> { [ U0915, U0916, U0958, U0959 ] };
	key <AC09> { [ U0924, U0925 ] };
	key <AC10> { [ U091a, U091b, U0952 ] };
	key <AC11> { [ U091f, U0920, NoSymbol, U0951 ] };

	key <AB01> { [ U0946, U090e, U0953 ] };
	key <AB02> { [ U0902, U0901, NoSymbol, U0950 ] };
	key <AB03> { [ U092e, U0923, U0954 ] };
	key <AB04> { [ U0928, U0929 ] };
	key <AB05> { [ U0935, U0934 ] };
	key <AB06> { [ U0932, U0933 ] };
	key <AB07> { [ U0938, U0936 ] };
	key <AB08> { [ comma, U0937, U0970 ] };
	key <AB09> { [ period, U0964, U0965, U093d ] };
	// I added \ / ? | for shell-convenience (file names and piping)
	key <AB10> { [ U092f, U095f, slash, question ] };

	// space, space, Zero-Width-Non-Joiner (ZWNJ), Zero-Width-Joiner (ZWJ):
	include "nbsp(zwnj3zwj4)"
        include "rupeesign(4)"
        include "level3(ralt_switch)"
};

//Name		:	Bolnagri (Combined)
//Description	:	A phonetic keyboard layout for Devnagari(Hindi)
//			http://www.indlinux.org/wiki/index.php/BolNagri
//NOTE		: 	This is a combined map of bolnagri_matras and bolnagri_vowels.
//Inspired by "devrom" keymap by Steve Smith for the windows tool "keyman"
//Original Author :	Noah Levitt<nlevitt at columbia.edu>
//Past Authors  : Pramod.R <pramodr at gmail.com> and Ravikant <ravikant at sarai.net>
//Current Main. : G Karunakar <karunakar@indlinux.org>

partial alphanumeric_keys
xkb_symbols "bolnagri" {
     name[Group1] = "Hindi (Bolnagri)";
     key.type="FOUR_LEVEL";

    // Roman digits
    key <TLDE>  { [   U0902,	U0901,		grave, 	asciitilde ] }; // grave: anusvara, candrabindu
    key <AE01>  { [   1,	exclam,		U0967,		exclam	   ] };
    key <AE02>  { [   2,	at,		U0968,		at	   ] };
    key <AE03>  { [   3,    	numbersign, 	U0969,		numbersign ] };
    key <AE04>  { [   4,	dollar,		U096A			    ] }; // Rupee symbol on AltGr+4
    key <AE05>  { [   5,	percent,	U096B,		percent    ] };
    key <AE06>  { [   6,	asciicircum,	U096C,		asciicircum ] };
    key <AE07>  { [   7,	ampersand,	U096D,		ampersand  ] };
    key <AE08>  { [   8,	asterisk,	U096E,		asterisk   ] };
    key <AE09>  { [   9,	parenleft,	U096F,		parenleft  ] };
    key <AE10>  { [   0,	parenright,	U0966,		parenright ] };
    key <AE11>	{ [   minus,	underscore	     ] };
    key <AE12>	{ [   equal,	plus		     ] };
    key <BKSL>  { [   U0964,	U0965,		U007C,		U005C   ] }; //pipe : danda, double danda

    //Q Row	
    key <AD01>   { [   U200C, 	U200D   ] };  // Q: ZWNJ, ZWJ
    key <AD02>   { [   U0935,  	U950	] };  // W: wa, OM
    key <AD03>   { [   U0947,   U0948,	U090F,	U0910   ] };  // E: e, ai matras
    key <AD04>   { [   U0930,	U0943,	U0931,  U090B  	] };  // R: ra, vocalic Ri
    key <AD05>   { [   U0924,   U0925   ] };  // T: ta, tha
    key <AD06>   { [   U092f,	U091E   ] };  // Y: ya, nya
    key <AD07>   { [   U0941,   U0942,	U0909,	U090A   ] };  // U: u, uu matras
    key <AD08>   { [   U093F,   U0940,	U0907,	U0908   ] };  // I: i, ii matras
    key <AD09>   { [   U094B,   U094C,	U0913,	U0914   ] };  // O: o, au matras
    key <AD10>   { [   U092A,   U092B   ] };  // P: pa, pha
    key <AD11>   { [   bracketleft,   braceleft   ] };
    key <AD12>	 { [   bracketright, braceright   ] };

    //A Row
    key <AC01>   { [   U093E,	 U0906,	U0905,	U0906  ] };   // A: aa, full A, AA
    key <AC02>   { [   U0938,    U0937   ] };  // S: sa, ssa
    key <AC03>   { [   U0926,    U0927   ] };  // D: da, dha
    key <AC04>   { [   U091F,    U0920   ] };  // F: TA, THA
    key <AC05>   { [   U0917,    U0918   ] };  // G: ga, gha
    key <AC06>   { [   U0939,    U0903   ] };  // H: ha, visarg 
    key <AC07>   { [   U091C,    U091D   ] };  // J: ja, jha
    key <AC08>   { [   U0915,    U0916   ] };  // K: ka, kha
    key <AC09>   { [   U0932,	 U0933,	U0962,   U090C   ] };  // L: la, vocalic L or lru matra
    key <AC10>   { [   semicolon, colon  ] };
    key <AC11>   { [apostrophe, quotedbl ] };

    //Z Row
    key <AB01>   { [   U0936,	 U0945, U0936, U090D 	 ] };  // Z: sha, akaar candra
    key <AB02>   { [   U094D,    U0949, U094D, U0911	 ] };  // X: halant, aakaar candra, chandra A
    key <AB03>   { [   U091A,    U091B   ] };  // C: ca, cha
    key <AB04>   { [   U0921,    U0922   ] };  // V: da, dha
    key <AB05>   { [   U092C,    U092D   ] };  // B: ba, bha
    key <AB06>   { [   U0928,    U0923   ] };  // N: na, nna
    key <AB07>   { [   U092E,    U0919,	U092E,	U093D   ] };  // M: ma, nga, avagraha
    key <AB08>   { [   comma,    U0970	 ] };// comma: comma, dev abbreviation sign
    key <AB09>   { [   period,   U093C 	 ] };  // period: period, nukta
    key <AB10>	 { [   slash,   question ] };

//    modifier_map Shift  { Shift_L };
//    modifier_map Lock   { Caps_Lock };
//    modifier_map Control{ Control_L };
//    modifier_map Mod3   { Mode_switch };

    include "level3(ralt_switch)"
    include "rupeesign(4)"
};

// based on a keyboard map from an 'xkb/symbols/ben' file

partial alphanumeric_keys
xkb_symbols "ben" {
    name[Group1]= "Bangla (India)";

      // Mainly numbers.
      key <AE01> { [      U09E7 		]	};
      key <AE02> { [      U09E8 		]	};
      key <AE03> { [      U09E9 		]	};
      key <AE04> { [      U09EA 		]	};
      key <AE05> { [      U09EB		]	};
      key <AE06> { [      U09EC 		]	};
      key <AE07> { [      U09ED	        ]	};
      key <AE08> { [      U09EE 		]	};
      key <AE09> { [      U09EF, parenleft	]	};
      key <AE10> { [      U09E6, parenright	]	};
      key <AE11> { [      minus, U0983 	]	};
      key <AE12> { [      U098B, U09C3	]	};

// Mainly long vowels

      key <AD01> { [      U09CC,  U0994	]	};
      key <AD02> { [      U09C8,  U0990	]	};
      key <AD03> { [      U09BE,  U0986	]	};
      key <AD04> { [      U09C0,  U0988	]	};
      key <AD05> { [      U09C2,  U098A	]	};

// Mainly voiced consonants

      key <AD06> { [      U09AC,  U09AD	]	};
      key <AD07> { [      U09B9,  U0999 ]	};
      key <AD08> { [      U0997,  U0998 ]	};
      key <AD09> { [      U09A6,  U09A7 ]	};
      key <AD10> { [      U099C,  U099D ]	};
      key <AD11> { [      U09A1, U09A2 	]	};
      key <AD12> { [      U09BC, U099E 	]	};

// Mainly short vowels
      key <AC01> { [      U09CB,  U0993 ]	};
      key <AC02> { [      U09C7,  U098F ]	};
      key <AC03> { [      U09CD,  U0985 ]	};
      key <AC04> { [      U09BF,  U0987 ]	};
      key <AC05> { [      U09C1,  U0989 ]	};


// Mainly unvoiced consonants

      key <AC06> { [      U09AA,  U09AB ]	};
      key <AC07> { [      U09B0,  U09DD ]	};
      key <AC08> { [      U0995,  U0996 ]	};
      key <AC09> { [      U09A4,  U09A5 ]	};
      key <AC10> { [      U099A,  U099B ]	};
      key <AC11> { [      U099F, U09A0 	]	};
      key <BKSL> { [      U005C, U007C 	]	};

      key <AB01> { [      z, Z  		]       };
      key <AB02> { [      U0982,  U0981 ]       };
      key <AB03> { [      U09AE,  U09A3 ]       };
      key <AB04> { [      U09A8,  U09A8 ]       };
      key <AB05> { [      U09AC,  U09AC ]       };
      key <AB06> { [      U09B2,  U09B2 ]       };
      key <AB07> { [      U09B8,  U09B6 ]       };
      key <AB08> { [      comma,      U09B7 ]       };
      key <AB09> { [      period,     U0964 ]       };
      key <AB10> { [      U09DF,  U09AF	]       };

    include "level3(ralt_switch)"
    include "rupeesign(4)"
};

xkb_symbols "ben_probhat" {
 name[Group1]= "Bangla (India, Probhat)";
   key.type="FOUR_LEVEL";

   key <ESC>  { [ Escape ] };

// numbers
   key <TLDE> { [ U200D, asciitilde   ] };
   key <AE01> { [ U09E7, exclam, U09F4 ] };
   key <AE02> { [ U09E8, at, U09F5 ] };
   key <AE03> { [ U09E9, numbersign, U09F6 ] };
   key <AE04> { [ U09EA, U09F3, U09F7, U09F2 ] };
   key <AE05> { [ U09EB, percent      ] };
   key <AE06> { [ U09EC, asciicircum  ] };
   key <AE07> { [ U09ED, U099E, U09FA ] };
   key <AE08> { [ U09EE, U09CE    ] };
   key <AE09> { [ U09EF, parenleft    ] };
   key <AE10> { [ U09E6, parenright, U09F8, U09F9 ] };
   key <AE11> { [ minus,     underscore   ] };
   key <AE12> { [ equal,     plus         ] };
   key <BKSP> { [ BackSpace               ] };

// tab, q to ] 
   key <TAB>  { [   Tab,  ISO_Left_Tab     ] };
   key <AD01> { [   U09A6,  U09A7  ] };
   key <AD02> { [   U09C2,  U098A  ] };
   key <AD03> { [   U09C0,  U0988  ] };
   key <AD04> { [   U09B0,  U09DC  ] };
   key <AD05> { [   U099F,  U09A0  ] };
   key <AD06> { [   U098F,  U0990  ] };
   key <AD07> { [   U09C1,  U0989  ] };
   key <AD08> { [   U09BF,  U0987  ] };
   key <AD09> { [   U0993,  U0994  ] };
   key <AD10> { [   U09AA,  U09AB  ] };
   key <AD11> { [   U09C7,  U09C8  ] };
   key <AD12> { [   U09CB,  U09CC, U09D7 ] };
   key <RTRN> { [   Return                 ] };

// caps, a to ' 
//   key <CAPS> { [   Caps_Lock              ] };
   key <AC01> { [   U09BE,  U0985, U098C, U09E0 ] };
   key <AC02> { [   U09B8,  U09B7, U09E1, U09E3 ] };
   key <AC03> { [   U09A1,  U09A2, U09C4, U09E2 ] };
   key <AC04> { [   U09A4,  U09A5  ] };
   key <AC05> { [   U0997,  U0998  ] };
   key <AC06> { [   U09B9,  U0983, U09BD ] };
   key <AC07> { [   U099C,  U099D  ] };
   key <AC08> { [   U0995,  U0996  ] };
   key <AC09> { [   U09B2,  U0982  ] };
   key <AC10> { [   semicolon,  colon      ] };
   key <AC11> { [   apostrophe, quotedbl   ] };

// shift, z to /
//   key <LFSH> { [   Shift_L                ] };
   key <AB01> { [   U09DF,  U09AF  ] };
   key <AB02> { [   U09B6,  U09DD  ] };
   key <AB03> { [   U099A,  U099B  ] };
   key <AB04> { [   U0986,  U098B  ] };
   key <AB05> { [   U09AC,  U09AD  ] };
   key <AB06> { [   U09A8,  U09A3  ] };
   key <AB07> { [   U09AE,  U0999  ] };
   key <AB08> { [   comma,      U09C3  ] };
   key <AB09> { [   U0964,  U0981, U09BC ] };
   key <AB10> { [   U09CD,  question   ] };
   key <BKSL> { [   U200C,  U0965  ] };

//   key <LCTL> { [   Control_L              ] };
//   key <SPCE> { [   space                  ] };

//   modifier_map Shift  { Shift_L };
//   modifier_map Lock   { Caps_Lock };
//   modifier_map Control{ Control_L };

    include "level3(ralt_switch)"
    include "rupeesign(4)"
};

// Bangla Baishakhi, Bangla Baishakhi Inscript, Bangla Bornona, Uni Gitanjali Layouts are added by Promathesh Mandal <promathesh812004@gmail.com>

xkb_symbols "ben_baishakhi" {
 name[Group1]= "Bangla (India, Baishakhi)";
   key <ESC>   { [ Escape 					] };

// numbers
   key <TLDE> { [ 0x100200D, 0x100200C	] };
   key <AE01> { [ 0x10009E7, exclam		] };
   key <AE02> { [ 0x10009E8, at		] };
   key <AE03> { [ 0x10009E9, numbersign	] };
   key <AE04> { [ 0x10009EA, dollar, 0x10009F2	] };
   key <AE05> { [ 0x10009EB, percent		] };
   key <AE06> { [ 0x10009EC, asciicircum, 0x10009D7    ] };
   key <AE07> { [ 0x10009ED, ampersand ] };
   key <AE08> { [ 0x10009EE,   asterisk,0x10009FA       		] };
   key <AE09> { [ 0x10009EF, parenleft    	] };
   key <AE10> { [ 0x10009E6, parenright   	] };
   key <AE11> { [ minus, underscore   	] };
   key <AE12> { [ equal,     plus 	] };
   key <BKSP> { [ BackSpace               		] };

// tab, q to ] 
   key <TAB>   { [   Tab,  ISO_Left_Tab		] };
   key <AD01> { [   0x10009A1,  0x10009A2  ] };
   key <AD02> { [  0x10009C0 ,  0x10009C2  ] };
   key <AD03> { [   0x10009C7,  0x100098F, 0x1000990 ] };
   key <AD04> { [   0x10009B0 , 0x10009C3, 0x100098B             		] };
   key <AD05> { [   0x100099F,  0x10009A0	] };
   key <AD06> { [   0x10009AF,  0x10009DF	] };
   key <AD07> { [   0x10009C1,  0x1000989, 0x100098A  ] };
   key <AD08> { [   0x10009BF,  0x1000987, 0x1000988  ] };
   key <AD09> { [   0x10009CB,  0x1000993, 0x1000994	] };
   key <AD10> { [   0x10009AA,  0x10009AB	] };
   key <AD11> { [   bracketleft,  braceleft] };
   key <AD12> { [   bracketright,	braceright	] };
   key <RTRN> { [   Return                 		] };

// caps, a to ' 
// key <CAPS> { [   Caps_Lock            		] };
   key <AC01> { [   0x10009BE,  0x1000985, 0x1000986  ] };
   key <AC02> { [   0x10009B8,  0x10009B6,  0x10009B7  ] };
   key <AC03> { [   0x10009A6,  0x10009A7  ] };
   key <AC04> { [   0x10009A4,   0x10009A5, 0x10009CE  ] };
   key <AC05> { [   0x1000997,  0x1000998	] };
   key <AC06> { [   0x10009CD,  0x10009B9, 0x1000983  ] };
   key <AC07> { [   0x100099C,  0x100099D	] };
   key <AC08> { [   0x1000995,  0x1000996  	] };
  key <AC09> { [   0x10009B2,  0x1000964, 0x100098C  ] };
   key <AC10> { [   semicolon,  colon  	] };
   key <AC11> { [   apostrophe, quotedbl   	] };

// shift, z to /
// key <LFSH> { [   Shift_L              			] };
   key <AB01> { [   0x10009C8, 0x10009CC              		] };
   key <AB02> { [   0x10009DC, 0x10009DD              		] };
   key <AB03> { [   0x100099A,  0x100099B  ] };
   key <AB04> { [   0x10009F1,  0x10009F0	] };
   key <AB05> { [   0x10009AC,  0x10009AD  ] };
   key <AB06> { [   0x10009A8,  0x10009A3, 0x100099E  ] };
   key <AB07> { [   0x10009AE,  0x1000999, 0x1000981  ] };
   key <AB08> { [   comma,      less	] };
   key <AB09> { [    period,	greater,0x10009BC 		] };
   key <AB10> { [   slash,  question, 0x1000982   	] };
   key <BKSL> { [   backslash,        bar	] };

// third level with right-alt
    include "level3(ralt_switch)"

//   key <LCTL> { [   Control_L              ] };
//   key <SPCE> { [   space                  ] };

//   modifier_map Shift  { Shift_L };
//   modifier_map Lock   { Caps_Lock };
//   modifier_map Control{ Control_L };
};

xkb_symbols "ben_inscript" {
    name[Group1]= "Bangla (India, Baishakhi Inscript)";

      // Mainly numbers.
      key <TLDE> { [      0x100200D, 0x100200C	] 	};
      key <AE01> { [      0x10009E7  		]	};
      key <AE02> { [      0x10009E8 		]	};
      key <AE03> { [      0x10009E9 		]	};
      key <AE04> { [      0x10009EA 		]	};
      key <AE05> { [      0x10009EB		]	};
      key <AE06> { [      0x10009EC 		]	};
      key <AE07> { [      0x10009ED	        ]	};
      key <AE08> { [      0x10009EE 		]	};
      key <AE09> { [      0x10009EF, parenleft	]	};
      key <AE10> { [      0x10009E6, parenright	]	};
      key <AE11> { [      minus, 0x1000983 	]	};
      key <AE12> { [      0x10009C3, 0x100098B 	]	};

// Mainly long vowels

      key <AD01> { [      0x10009CC,  0x1000994	]	};
      key <AD02> { [      0x10009C8,  0x1000990	]	};
      key <AD03> { [      0x10009BE,  0x1000986	]	};
      key <AD04> { [      0x10009C0,  0x1000988	]	};
      key <AD05> { [      0x10009C2,  0x100098A	]	};

// Mainly voiced consonants

      key <AD06> { [      0x10009AC,  0x10009AD	]	};
      key <AD07> { [      0x10009B9,  0x1000999 ]	};
      key <AD08> { [      0x1000997,  0x1000998 ]	};
      key <AD09> { [      0x10009A6,  0x10009A7 ]	};
      key <AD10> { [      0x100099C,  0x100099D ]	};
      key <AD11> { [      0x10009A1,  0x10009A2 ]	};
      key <AD12> { [      0x10009BC,  0x100099E ]	};

// Mainly short vowels
      key <AC01> { [      0x10009CB,  0x1000993 ]	};
      key <AC02> { [      0x10009C7,  0x100098F ]	};
      key <AC03> { [      0x10009CD,  0x1000985 ]	};
      key <AC04> { [      0x10009BF,  0x1000987 ]	};
      key <AC05> { [      0x10009C1,  0x1000989 ]	};


// Mainly unvoiced consonants

      key <AC06> { [      0x10009AA,  0x10009AB ]	};
      key <AC07> { [      0x10009B0,  0x10009DD ]	};
      key <AC08> { [      0x1000995,  0x1000996 ]	};
      key <AC09> { [      0x10009A4,  0x10009A5 ]	};
      key <AC10> { [      0x100099A,  0x100099B ]	};
      key <AC11> { [      0x100099F, 0x10009A0 	]	};
      key <BKSL> { [      backslash, bar 	]	};

      key <AB01> { [      0x10009CE  		]       };
      key <AB02> { [      0x1000982,  0x1000981 ]       };
      key <AB03> { [      0x10009AE,  0x10009A3 ]       };
      key <AB04> { [      0x10009A8,  0x10009A8 ]       };
      key <AB05> { [      0x10009AC,  0x10009AC ]       };
      key <AB06> { [      0x10009B2,  0x10009B2 ]       };
      key <AB07> { [      0x10009B8,  0x10009B6 ]       };
      key <AB08> { [      comma,      0x10009B7 ]       };
      key <AB09> { [      period,     0x1000964 ]       };
      key <AB10> { [      0x10009DF,  0x10009AF	]       };
};

xkb_symbols "ben_gitanjali" {
 name[Group1]= "Bangla (India, Gitanjali)";
   key <ESC>   { [ Escape			] };

// numbers
   key <TLDE> { [ colon, question	] };
   key <AE01> { [ 0x10009E7, 0x10009CE	] };
   key <AE02> { [ 0x10009E8, apostrophe	] };
   key <AE03> { [ 0x10009E9, numbersign	] };
   key <AE04> { [ 0x10009EA, 0x10009F3	] };
   key <AE05> { [ 0x10009EB, slash	] };
   key <AE06> { [ 0x10009EC, period	] };
   key <AE07> { [ 0x10009ED, ampersand 	] };
   key <AE08> { [ 0x10009EE, asterisk 	] };
   key <AE09> { [ 0x10009EF, parenleft  ] };
   key <AE10> { [ 0x10009E6, parenright	] };
   key <AE11> { [ minus, 0x1000983   	] };
   key <AE12> { [ 0x10009C3, 0x100098B 	] };
   key <BKSP> { [ BackSpace		] };

// tab, q to ] 
   key <TAB>   { [   Tab,  ISO_Left_Tab	] };
   key <AD01> { [   0x10009D7,  0x1000994 ] };
   key <AD02> { [   0x10009C8,  0x1000990 ] };
   key <AD03> { [   0x10009BE,  0x1000985 ] };
   key <AD04> { [   0x10009C0,  0x1000988 ] };
   key <AD05> { [   0x10009C2,  0x100098A ] };
   key <AD06> { [   0x10009AC,  0x10009AD ] };
   key <AD07> { [   0x10009B9,  0x1000999 ] };
   key <AD08> { [   0x1000997,  0x1000998 ] };
   key <AD09> { [   0x10009A6,  0x10009A7 ] };
   key <AD10> { [   0x100099C,  0x100099D ] };
   key <AD11> { [   0x10009A1,  0x10009A2 ] };
   key <AD12> { [   0x100200C,  0x100099E ] };
   key <RTRN> { [   Return		  ] };

// caps, a to ' 
// key <CAPS> { [   Caps_Lock            		] };
   key <AC01> { [   0x100200D,  0x1000993 ] };
   key <AC02> { [   0x10009C7,  0x100098F ] };
   key <AC03> { [   0x10009CD		  ] };
   key <AC04> { [   0x10009BF,  0x1000987 ] };
   key <AC05> { [   0x10009C1,  0x1000989 ] };
   key <AC06> { [   0x10009AA,  0x10009AB ] };
   key <AC07> { [   0x10009B0,  0x10009F0 ] };
   key <AC08> { [   0x1000995,  0x1000996 ] };
   key <AC09> { [   0x10009A4,  0x10009A5 ] };
   key <AC10> { [   0x100099A,  0x100099B ] };
   key <AC11> { [   0x100099F,  0x10009A0 ] };

// shift, z to /
// key <LFSH> { [   Shift_L              			] };
   key <AB01> { [   0x10009C7, 0x100098F ] };
   key <AB02> { [   0x1000982, 0x1000981 ] };
   key <AB03> { [   0x10009AE, 0x10009A3 ] };
   key <AB04> { [   0x10009A8, 0x10009DC ] };
   key <AB05> { [   0x10009F1, 0x10009DD ] };
   key <AB06> { [   0x10009B2		 ] };
   key <AB07> { [   0x10009B8, 0x10009B6 ] };
   key <AB08> { [   comma,     0x10009B7 ] };
   key <AB09> { [   0x1000964, 0x10009FA ] };
   key <AB10> { [   0x10009AF, 0x10009DF ] };
   key <BKSL> { [   backslash, bar	 ] };

// third level with right-win
//    include "level3(lwin_switch)"

//   key <LCTL> { [   Control_L              ] };
//   key <SPCE> { [   space                  ] };

//   modifier_map Shift  { Shift_L };
//   modifier_map Lock   { Caps_Lock };
//   modifier_map Control{ Control_L };
};


xkb_symbols "ben_bornona" {
 name[Group1]= "Bangla (India, Bornona)";
   key <ESC>  { [ Escape 					] };

// numbers
   key <TLDE> { [ 0x100200D, 0x100200C   	] };
   key <AE01> { [ 0x10009E7, exclam         	] };
   key <AE02> { [ 0x10009E8, 0x1000981 	] };
   key <AE03> { [ 0x10009E9, numbersign   	] };
   key <AE04> { [ 0x10009EA, 0x10009F3    	] };
   key <AE05> { [ 0x10009EB, percent      	] };
   key <AE06> { [ 0x10009EC, 0x1000983    	] };
   key <AE07> { [ 0x10009ED, 0x10009CE	] };
   key <AE08> { [ 0x10009EE, asterisk		] };
   key <AE09> { [ 0x10009EF, parenleft    	] };
   key <AE10> { [ 0x10009E6, parenright	] };
   key <AE11> { [ minus,	   underscore	] };
   key <AE12> { [ equal,          plus			] };
   key <BKSP> { [ BackSpace               		] };

// tab, q to ] 
   key <TAB>   { [   Tab,  	ISO_Left_Tab	] };
   key <AD01> { [   0x1000982,  0x1000999, 0x10009D7	] };
   key <AD02> { [   0x10009A2,  0x10009A0, 0x100098A ] };
   key <AD03> { [   0x10009C7,  0x10009C8, 0x1000988	] };
   key <AD04> { [   0x10009B0,  0x10009C3, 0x100098B	] };
   key <AD05> { [   0x10009A4,  0x100099F	] };
   key <AD06> { [   0x10009A7,  0x10009A5, 0x100098F  ] };
   key <AD07> { [   0x10009C1,  0x10009C2, 0x1000989	] };
   key <AD08> { [   0x10009BF,  0x10009C0, 0x1000987	] };
   key <AD09> { [   0x10009CB,  0x10009CC, 0x1000993	] };
   key <AD10> { [   0x10009AA, 0x1000990, 0x1000994		] };
   key <AD11> { [   0x100005B,  0x100007B, 0x10009DC  ] };
   key <AD12> { [   0x100005D,  0x100007D  ] };
   key <RTRN> { [   Return					] };

// caps, a to ' 
// key <CAPS> { [   Caps_Lock            		] };
   key <AC01> { [   0x10009BE,  0x1000985, 0x10009F4  ] };
   key <AC02> { [   0x10009B8,  0x10009B6, 0x10009F5  ] };
   key <AC03> { [   0x10009A6,  0x10009A1, 0x10009F8  ] };
   key <AC04> { [   0x10009AB				] };
   key <AC05> { [   0x1000997,  0x1000998	] };
   key <AC06> { [   0x10009CD, 0x10009B9	] };
   key <AC07> { [   0x100099C,  0x100099D	] };
   key <AC08> { [   0x1000995,  0x1000996	] };
   key <AC09> { [   0x10009B2,  0x1000964  ] };
   key <AC10> { [   semicolon,  0x100003A	] };
   key <AC11> { [   apostrophe, quotedbl   	] };

// shift, z to /
// key <LFSH> { [   Shift_L              			] };
   key <AB01> { [   0x10009AF, 0x10009DC	] };
   key <AB02> { [   0x10009B7, 0x10009DD, 0x10009FA	] };
   key <AB03> { [   0x100099A,  0x100099B  ] };
   key <AB04> { [   0x10009AD				] };
   key <AB05> { [   0x10009AC,  0x10009DF	] };
   key <AB06> { [   0x10009A8,  0x10009A3	] };
   key <AB07> { [   0x10009AE,  0x100099E	] };
   key <AB08> { [   comma,      0x100003C	] };
   key <AB09> { [   0x100002E,  0x100003E  ] };
   key <AB10> { [   0x100002F,  question   	] };
   key <BKSL> { [   0x10009F1,  0x10009F0	] };

//   key <LCTL> { [   Control_L              ] };
//   key <SPCE> { [   space                  ] };

//   modifier_map Shift  { Shift_L };
//   modifier_map Lock   { Caps_Lock };
//   modifier_map Control{ Control_L };
// third level with right-alt
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "guj" {
      name[Group1]= "Gujarati";

      // Mainly numbers.
      key <AE01> { [      U0AE7, U0A8D 	]	};
      key <AE02> { [      U0AE8, U0AC5 	]	};
      key <AE03> { [      U0AE9 	 	]	};
      key <AE04> { [      U0AEA  	 	]	};
      key <AE05> { [      U0AEB  	 	]	};
      key <AE06> { [      U0AEC  	 	]	};
      key <AE07> { [      U0AED 		]	};
      key <AE08> { [      U0AEE  	 	]	};
      key <AE09> { [      U0AEF, parenleft 	]	};
      key <AE10> { [      U0AE6, parenright ]	};
      key <AE11> { [      minus,     U0A83  ]	};
      key <AE12> { [      U0A8B, U0AC3 	]	};

// Mainly long vowels

      key <AD01> { [      U0ACC, U0A94  ]	};
      key <AD02> { [      U0AC8, U0A90  ]	};
      key <AD03> { [      U0ABE, U0A86  ]	};
      key <AD04> { [      U0AC0, U0A88  ]	};
      key <AD05> { [      U0AC2, U0A8A  ]	};

// Mainly voiced consonants

      key <AD06> { [      U0AAC, U0AAD 	]	};
      key <AD07> { [      U0AB9, U0A99 	]	};
      key <AD08> { [      U0A97, U0A98 	]	};
      key <AD09> { [      U0AA6, U0AA7 	]	};
      key <AD10> { [      U0A9C, U0A9D 	]	};
      key <AD11> { [      U0AA1, U0AA2 	]	};
      key <AD12> { [      U0ABC, U0A9E 	]	};

// Mainly short vowels
      key <AC01> { [      U0ACB, U0A93	]	};
      key <AC02> { [      U0AC7, U0A8F	]	};
      key <AC03> { [      U0ACD, U0A85  ]	};
      key <AC04> { [      U0ABF, U0A87  ]	};
      key <AC05> { [      U0AC1, U0A89  ]	};

// Mainly unvoiced consonants

      key <AC06> { [      U0AAA, U0AAB 	]	};
      key <AC07> { [      U0AB0, U0AB0 	]	};
      key <AC08> { [      U0A95, U0A96 	]	};
      key <AC09> { [      U0AA4, U0AA5 	]	};
      key <AC10> { [      U0A9A, U0A9B 	]	};
      key <AC11> { [      U0A9F, U0AA0 	]	};
      key <BKSL> { [      U0AC9, U0A91 	]	};

      key <AB01> { [      z        , Z		]       };
      key <AB02> { [      U0A82, U0A81	]       };
      key <AB03> { [      U0AAE, U0AA3  ]       };
      key <AB04> { [      U0AA8, U0AA8   ]       };
      key <AB05> { [      U0AB5, U0AB5   ]       };
      key <AB06> { [      U0AB2, U0AB3  ]       };
      key <AB07> { [      U0AB8, U0AB6  ]       };
      key <AB08> { [      comma,     U0AB7  ]       };
      key <AB09> { [      period,    U0964  ]       };
      key <AB10> { [      U0AAF, question   ]       };
      include "rupeesign(4)"
      include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "kan" {

    // Inscript layout for Kannada  
    // Author : G Karunakar <karunakar@freedomink.org>
    // Date   : Wed Nov 13 17:22:58 IST 2002
    // Kannada digits mapped in basic only

    name[Group1]= "Kannada";

    key <TLDE> { [  U0cca, U0c92	] };
    key <AE01> { [  U0ce7			] };
    key <AE02> { [  U0ce8			] };
    key <AE03> { [  U0ce9			] };
    key <AE04> { [  U0cea			] };
    key <AE05> { [  U0ceb			] };
    key <AE06> { [  U0cec			] };
    key <AE07> { [  U0ced			] };
    key <AE08> { [  U0cee			] };
    key <AE09> { [  U0cef			] };
    key <AE10> { [  U0ce6			] };
    key <AE11> { [  U0c83			] };
    key <AE12> { [  U0cc3, U0c8b	] };

    key <AD01> { [  U0ccc, U0c94	] };
    key <AD02> { [  U0cc8, U0c90	] };
    key <AD03> { [  U0cbe, U0c86	] };
    key <AD04> { [  U0cc0, U0c88	] };
    key <AD05> { [  U0cc2, U0c8a	] };
    key <AD06> { [  U0cac, U0cad	] };
    key <AD07> { [  U0cb9, U0c99	] };
    key <AD08> { [  U0c97, U0c98	] };
    key <AD09> { [  U0ca6, U0ca7	] };
    key <AD10> { [  U0c9c, U0c9d	] };
    key <AD11> { [  U0ca1, U0ca2	] };
    key <AD12> { [  U0cbc, U0c9e	] };

    key <AC01> { [  U0ccb, U0c93	] };
    key <AC02> { [  U0cc7, U0c8f	] };
    key <AC03> { [  U0ccd, U0c85	] };
    key <AC04> { [  U0cbf, U0c87	] };
    key <AC05> { [  U0cc1, U0c89	] };
    key <AC06> { [  U0caa, U0cab	] };
    key <AC07> { [  U0cb0, U0cb1	] };
    key <AC08> { [  U0c95, U0c96	] };
    key <AC09> { [  U0ca4, U0ca5	] };
    key <AC10> { [  U0c9a, U0c9b	] };
    key <AC11> { [  U0c9f, U0ca0	] };

    key <AB01> { [  U0cc6, U0c8e	] };
    key <AB02> { [  U0c82			] };
    key <AB03> { [  U0cae, U0ca3	] };
    key <AB04> { [  U0ca8			] };
    key <AB05> { [  U0cb5, U0cb4	] };
    key <AB06> { [  U0cb2, U0cb3	] };
    key <AB07> { [  U0cb8, U0cb6	] };
    key <AB08> { [  comma     , U0cb7	] };
    key <AB09> { [  period    				] };
    key <AB10> { [  U0caf, U0040	] };

    key <RALT> {
	symbols[Group1] = [ Mode_switch, Multi_key ],
	virtualMods = AltGr
    };
    include "rupeesign(4)"
    include "level3(ralt_switch)"
};

// Description : A keymap for Malayalam
// Encoding    : Unicode (http://www.unicode.org)
// Author      : Baiju M <baiju@freeshell.org>
// Date        : Sat Aug  17 21:10:48 IST 2002
// Mapping:

partial alphanumeric_keys
xkb_symbols "mal" {

    name[Group1] = "Malayalam";

    //From grave to backslash (\)

    key <TLDE> { [ U0d4a , U0d12           ] };

// svu: 
// These lines were in former "mal" variant - 
// but the digits are replaced with the ones from 'mal_plusnum' -
// for the integrity of all Indian layouts
//
//    key <AE01> { [1           ,     exclam           ] };
//    key <AE02> { [2           ,         at           ] };
//    key <AE03> { [3           , numbersign           ] };
//    key <AE04> { [4           ,     dollar           ] };
//    key <AE05> { [5           ,    percent           ] };
//    key <AE06> { [6           ,asciicircum           ] };
//    key <AE07> { [7           ,  ampersand           ] };
//    key <AE08> { [8           , asterisk           ] };
//    key <AE09> { [9           ,  parenleft           ] };
//    key <AE10> { [0           , parenright           ] };

      key <AE01> { [ U0d67 ,      exclam ] };
      key <AE02> { [ U0d68 ,          at ] };
      key <AE03> { [ U0d69 ,  numbersign ] };
      key <AE04> { [ U0d6a ,      dollar ] };
      key <AE05> { [ U0d6b ,     percent ] };
      key <AE06> { [ U0d6c , asciicircum ] };
      key <AE07> { [ U0d6d ,   ampersand ] };
      key <AE08> { [ U0d6e ,  asterisk ] };
      key <AE09> { [ U0d6f ,   parenleft ] };
      key <AE10> { [ U0d66 ,  parenright ] };

    key <AE11> { [ minus      , U0d03           ] };
    key <AE12> { [ U0d43 , U0d0b           ] };
    key <BKSL>  { [U0200c, U05C ]};//bksl: ZWNJ 


    // From 'q' to right bracket (])

    key <AD01> { [ U0d4c , U0d14 ] };
    key <AD02> { [ U0d48 , U0d10 ] };
    key <AD03> { [ U0d3e , U0d06 ] };
    key <AD04> { [ U0d40 , U0d08 ] };
    key <AD05> { [ U0d42 , U0d0a ] };
    key <AD06> { [ U0d2c , U0d2d ] };
    key <AD07> { [ U0d39 , U0d19 ] };
    key <AD08> { [ U0d17 , U0d18 ] };
    key <AD09> { [ U0d26 , U0d27 ] };
    key <AD10> { [ U0d1c , U0d1d ] };
    key <AD11> { [ U0d21 , U0d22 ] };
    key <AD12> { [ U0200d , U0d1e ] };

    // From 'a' to apostrophe (')

    key <AC01> { [ U0d4b , U0d13 ] };
    key <AC02> { [ U0d47 , U0d0f ] };
    key <AC03> { [ U0d4d , U0d05 ] };
    key <AC04> { [ U0d3f , U0d07 ] };
    key <AC05> { [ U0d41 , U0d09 ] };
    key <AC06> { [ U0d2a , U0d2b ] };
    key <AC07> { [ U0d30 , U0d31 ] };
    key <AC08> { [ U0d15 , U0d16 ] };
    key <AC09> { [ U0d24 , U0d25 ] };
    key <AC10> { [ U0d1a , U0d1b ] };
    key <AC11> { [ U0d1f , U0d20 ] };

    // From 'z' to slash (/)

    key <AB01> { [ U0d46 , U0d0e ] };
    key <AB02> { [ U0d02 , U200b ] };//X:ZWSP
    key <AB03> { [ U0d2e , U0d23 ] };
    key <AB04> { [ U0d28 ] };
    key <AB05> { [ U0d35 , U0d34 ] };
    key <AB06> { [ U0d32 , U0d33 ] };
    key <AB07> { [ U0d38 , U0d36 ] };
    key <AB08> { [ comma      , U0d37 ] };
    key <AB09> { [ period     , U0200d ] };
    key <AB10> { [ U0d2f , question   ] };

    include "rupeesign(4)"
    include "level3(ralt_switch)"
};

//Name		:	Lalitha
//Description	:	A transliteration keyboard layout for Malayalam
//Original Author :	Noah Levitt<nlevitt at columbia.edu>
//Current Main  : 	Jinesh K.J<jinesh.k@gmail.com>, Swathantra Malayalam Computing (SMC)<smc-discuss@googlegroups.com>

partial alphanumeric_keys
xkb_symbols "mal_lalitha" {
     name[Group1] = "Malayalam (Lalitha)";
     key.type="FOUR_LEVEL";

    // Roman digits
    key <TLDE>  { [   U0D4D,	U0D02,		grave, 	asciitilde ] }; // grave: virama(chandrakala),anusvara
    key <AE01>  { [   1,	exclam,	U0D67,		exclam	   ] };
    key <AE02>  { [   2,	at,		U0D68,		at	   ] };
    key <AE03>  { [   3,    	numbersign, 	U0D69,		numbersign ] };
    key <AE04>  { [   4,	dollar,		U0D6A			     ] };
    key <AE05>  { [   5,	percent,	U0D6B,		percent    ] };
    key <AE06>  { [   6,	asciicircum,	U0D6C,		asciicircum ] };
    key <AE07>  { [   7,	ampersand,	U0D6D,		ampersand  ] };
    key <AE08>  { [   8,	asterisk,	U0D6E,		asterisk   ] };
    key <AE09>  { [   9,	parenleft,	U0D6F,		parenleft  ] };
    key <AE10>  { [   0,	parenright,	U0D66,		parenright ] };
    key <AE11>	{ [   minus,	underscore	     ] };
    key <AE12>	{ [   equal,	plus		     ] };
    key <BKSL>  { [   U005C,	U007C,		U200C	] };//backslash:pipe,backslash,ZWNJ 

    //Q Row	
    key <AD01>   { [   U0D48,	U0D4C,	U0D10,	U0D14  ] }; // Q: ai and au matras 
    key <AD02>   { [   U0D35	] };  // W: wa, OM
    key <AD03>   { [   U0D46,   U0D47,	U0D0E,	U0D0F   ] };  // E: e,ee matras
    key <AD04>   { [   U0D30,	U0D31,	U0D43,	U0D0B  	] };  // R: ra,rra, vocalic Ri
    key <AD05>   { [   U0D24,   U0D25,	U0D1F,	U0D20   ] };  // T: tha, ttha,ta,tta
    key <AD06>   { [   U0D2f    ] };  // Y: ya
    key <AD07>   { [   U0D41,   U0D42,	U0D09,	U0D0A   ] };  // U: u, uu matras
    key <AD08>   { [   U0D3F,   U0D40,	U0D07,	U0D08   ] };  // I: i, ii matras
    key <AD09>   { [   U0D4A,   U0D4B,	U0D12,	U0D13   ] };  // O: o, oo matras
    key <AD10>   { [   U0D2A   ] };  // P: pa
    key <AD11>   { [   bracketleft,   braceleft   ] };//braceleft:   
    key <AD12>	 { [   bracketright, braceright   ] };//braceright:

    //A Row
    key <AC01>   { [   U0D3E,	 U0D05,	U0D06,	U0D05  ] };   // A: a,aa
    key <AC02>   { [   U0D38,    U0D37   ] };  // S: sa, ssa
    key <AC03>   { [   U0D26,    U0D27,	U0D21,	U0D22   ] };  // D: soft da,soft dda,hard da,hard dda,
    key <AC04>   { [   U0D2B     ] };  // F: pha
    key <AC05>   { [   U0D17,    U0D18   ] };  // G: ga, gha
    key <AC06>   { [   U0D39,    U0D03   ] };  // H: ha, visarg 
    key <AC07>   { [   U0D1C,    U0D1D   ] };  // J: ja, jha
    key <AC08>   { [   U0D15,    U0D16   ] };  // K: ka, kha
    key <AC09>   { [   U0D32,	 U0D33   ] };  // L: la, vocalic L or lru matra`
    key <AC10>   { [   semicolon, colon  ] };
    key <AC11>   { [apostrophe, quotedbl ] };

    //Z Row
    key <AB01>   { [   U0D34,	 U0D36 	 ] };  // Z: sha,zha
    key <AB02>   { [   U0D4D,	 U200B  ] };  // X: chandrakala,ZWSP
    key <AB03>   { [   U0D1A,    U0D1B   ] };  // C: ca, cha
    key <AB04>   { [   U0D35,	 U200D  ] };  // V: va,ZWJ
    key <AB05>   { [   U0D2C,    U0D2D   ] };  // B: ba, bha
    key <AB06>   { [   U0D28,    U0D23,	U0D19,	U0D1E   ] };  // N: na, hard na,nga,nha
    key <AB07>   { [   U0D2E,	 U0D02  ] };  // M: ma
    key <AB08>   { [   comma,    U003C ] };// comma: comma
    key <AB09>   { [   period, 	 U003E ] };  // period: period
    key <AB10>	 { [   slash,   question ] };

//    modifier_map Shift  { Shift_L };
//    modifier_map Lock   { Caps_Lock };
//    modifier_map Control{ Control_L };
//    modifier_map Mod3   { Mode_switch };
    include "level3(ralt_switch)"
    include "rupeesign(4)"
};


partial alphanumeric_keys
xkb_symbols "olck" {

    // Layout for the Ol Chiki script.
    // http://www.unicode.org/L2/L2005/05243r-n2984-ol-chiki.pdf (figure 9)

    name[Group1]= "Ol Chiki";

    key <TLDE> { [  grave, U1C7B		] };

    key <AE01> { [  U1C51, exclam		] };
    key <AE02> { [  U1C52, at			] };
    key <AE03> { [  U1C53, numbersign		] };
    key <AE04> { [  U1C54, dollar, U20B9	] };
    key <AE05> { [  U1C55, percent		] };
    key <AE06> { [  U1C56, asciicircum		] };
    key <AE07> { [  U1C57, ampersand		] };
    key <AE08> { [  U1C58, asterisk		] };
    key <AE09> { [  U1C59, parenleft		] };
    key <AE10> { [  U1C50, parenright		] };
    key <AE11> { [  minus, U1C7C		] };
    key <AE12> { [  equal, plus			] };

    key <AD01> { [  U1C67			] };
    key <AD02> { [  U1C63			] };
    key <AD03> { [  U1C6E			] };
    key <AD04> { [  U1C68			] };
    key <AD05> { [  U1C74, U1C5B		] };
    key <AD06> { [  U1C6D  			] };
    key <AD07> { [  U1C69			] };
    key <AD08> { [  U1C64			] };
    key <AD09> { [  U1C5A, U1C73		] };
    key <AD10> { [  U1C6F  			] };
    key <AD11> { [  bracketleft, braceleft	] };
    key <AD12> { [  bracketright, braceright 	] };
    key <BKSL> { [  U1C7F, U1C7E		] };

    key <AC01> { [  U1C5F  			] };
    key <AC02> { [  U1C65			] };
    key <AC03> { [  U1C70, U1C6B		] };
    key <AC04> { [  U1C5D  			] };
    key <AC05> { [  U1C5C			] };
    key <AC06> { [  U1C66, U1C77		] };
    key <AC07> { [  U1C61  			] };
    key <AC08> { [  U1C60			] };
    key <AC09> { [  U1C5E			] };
    key <AC10> { [  semicolon, U1C7A		] };
    key <AC11> { [  apostrophe, quotedbl	] };

    key <AB01> { [  U1C72			] };
    key <AB02> { [  U1C7D			] };
    key <AB03> { [  U1C6A			] };
    key <AB04> { [  U1C76			] };
    key <AB05> { [  U1C75			] };
    key <AB06> { [  U1C71, U1C78		] };
    key <AB07> { [  U1C62, U1C6C		] };
    key <AB08> { [  comma, less			] };
    key <AB09> { [  U1C79, greater		] };
    key <AB10> { [  slash, question		] };

    key <RALT> {
	symbols[Group1] = [ Mode_switch, Multi_key ],
	virtualMods = AltGr
    };

    include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "ori" {
    // Inscript layout for Oriya  
    // Author: G Karunakar <karunakar@freedomink.org>
    // Date: Wed Nov 13 18:16:19 IST 2002

    name[Group1]= "Oriya";

    key <AE01> { [  U0b67			] };
    key <AE02> { [  U0b68			] };
    key <AE03> { [  U0b69			] };
    key <AE04> { [  U0b6a			] };
    key <AE05> { [  U0b6b			] };
    key <AE06> { [  U0b6c			] };
    key <AE07> { [  U0b6d			] };
    key <AE08> { [  U0b6e			] };
    key <AE09> { [  U0b6f			] };
    key <AE10> { [  U0b66			] };
    key <AE11> { [  U0b03			] };
    key <AE12> { [  U0b43, U0b0b	] };

    key <AD01> { [  U0b4c, U0b14	] };
    key <AD02> { [  U0b48, U0b10	] };
    key <AD03> { [  U0b3e, U0b06	] };
    key <AD04> { [  U0b40, U0b08	] };
    key <AD05> { [  U0b42, U0b0a	] };
    key <AD06> { [  U0b2c, U0b2d	] };
    key <AD07> { [  U0b39, U0b19	] };
    key <AD08> { [  U0b17, U0b18	] };
    key <AD09> { [  U0b26, U0b27	] };
    key <AD10> { [  U0b1c, U0b1d	] };
    key <AD11> { [  U0b21, U0b22	] };
    key <AD12> { [  U0b3c, U0b1e	] };

    key <AC01> { [  U0b4b, U0b13	] };
    key <AC02> { [  U0b47, U0b0f	] };
    key <AC03> { [  U0b4d, U0b05	] };
    key <AC04> { [  U0b3f, U0b07	] };
    key <AC05> { [  U0b41, U0b09	] };
    key <AC06> { [  U0b2a, U0b2b	] };
    key <AC07> { [  U0b30			] };
    key <AC08> { [  U0b15, U0b16	] };
    key <AC09> { [  U0b24, U0b25	] };
    key <AC10> { [  U0b1a, U0b1b	] };
    key <AC11> { [  U0b1f, U0b20	] };

    key <AB02> { [  U0b02, U0b01	] };
    key <AB03> { [  U0b2e, U0b23	] };
    key <AB04> { [  U0b28			] };
    key <AB05> { [  U0b35			] };
    key <AB06> { [  U0b32, U0b33	] };
    key <AB07> { [  U0b38, U0b36	] };
    key <AB08> { [  comma     , U0b37	] };
    key <AB09> { [  period    				] };
    key <AB10> { [  U0b2f, U0040	] };

    key <RALT> {
	symbols[Group1] = [ Mode_switch, Multi_key ],
	virtualMods = AltGr
    };
    include "rupeesign(4)"
    include "level3(ralt_switch)"
};

// based on a keyboard map from an 'xkb/symbols/tml' file
// INSCRIPT
partial alphanumeric_keys
xkb_symbols "tam" {
      name[Group1]= "Tamil (Inscript)";

      key <TLDE> { [      U0BCA, U0B92	]	};

      // Mainly numbers.
      key <AE01> { [      U0BE7 		]	};
      key <AE02> { [      U0BE8 		]	};
      key <AE03> { [      U0BE9 		]	};
      key <AE04> { [      U0BEA 		]	};
      key <AE05> { [      U0BEB 		]	};
      key <AE06> { [      U0BEC 		]	};
      key <AE07> { [      U0BED        	]	};
      key <AE08> { [      U0BEE 		]	};
      key <AE09> { [      U0BEF, parenleft	]	};
      key <AE10> { [      U0BF0, parenright	]	};
      key <AE11> { [      U0BF1, U0B83  ]	};
      key <AE12> { [      U0BF2, plus	] 	};

// Mainly long vowels

      key <AD01> { [      U0BCC,  U0B94 ]	};
      key <AD02> { [      U0BC8,  U0B90 ]	};
      key <AD03> { [      U0BBE,  U0B86 ]	};
      key <AD04> { [      U0BC0,  U0B88 ]	};
      key <AD05> { [      U0BC2,  U0B8A ]	};

// Mainly voiced consonants

      key <AD07> { [      U0BB9, U0B99	]	};
      key <AD10> { [      U0B9c 	]	};
      key <AD12> { [      U0B9E				]	};

// Mainly short vowels
      key <AC01> { [      U0BCB,  U0B93 ]	};
      key <AC02> { [      U0BC7,  U0B8F ]	};
      key <AC03> { [      U0BCD,  U0B85 ]	};
      key <AC04> { [      U0BBF,  U0B87 ]	};
      key <AC05> { [      U0BC1,  U0B89 ]	};

// Mainly unvoiced consonants

      key <AC06> { [      U0BAA 		]	};
      key <AC07> { [      U0BB0,  U0BB1 ]	};
      key <AC08> { [      U0B95 		]	};
      key <AC09> { [      U0BA4 		]	};
      key <AC10> { [      U0B9A 		]	};
      key <AC11> { [      U0B9F 		]	};
      key <BKSL> { [      U005C, U007C	]	};//backslash-bar  - Changed to Unicode

      key <AB01> { [      U0BC6,  U0B8E	]	};
      key <AB02> { [      U0B82   		]       };
      key <AB03> { [      U0BAE,  U0BA3 ]       };
      key <AB04> { [      U0BA8,  U0BA9 ]       };
      key <AB05> { [      U0BB5,  U0BB4 ]       };
      key <AB06> { [      U0BB2,  U0BB3 ]       };
      key <AB07> { [      U0BB8,  U0BB6	]       };
      key <AB08> { [      comma,      U0BB7 ]       };
      key <AB09> { [      period,     U0964 ]       };
      key <AB10> { [      U0BAF,  question  ]       };

      include "level3(ralt_switch)"
      include "rupeesign(4)"
};

partial alphanumeric_keys
xkb_symbols "tam_tamilnet" {

// Description: A keymap based on the TamilNet'99 typewriter keyboard 
// Encoding: Unicode (http://www.unicode.org)
// Author: Thuraiappah Vaseeharan <vasee@ieee.org>
// Modifed by: Malathi S <malathiramya@gmail.com>
// Secondary contact: Sri Ramadoss M <amachu@au-kbc.org>
// Date  : Fri Sep 4 11:32:00 CST 2009
// Mapping:

    name[Group1]= "Tamil (TamilNet '99)";

    // granthas
    key <TLDE> {  [ apostrophe, asciitilde ] };
    key <AE01> {  [ U0031, exclam ] } ;
    key <AE02> {  [ U0032, at ] } ;
    key <AE03> {  [ U0033, numbersign ] } ;
    key <AE04> {  [ U0034, U0BF9 ] } ;
    key <AE05> {  [ U0035, percent ] } ;
    key <AE06> {  [ U0036, asciicircum ] } ;
    key <AE07> {  [ U0037, ampersand ] } ;
    key <AE08> {  [ U0038, asterisk ] } ;
    key <AE09> {  [ U0039, parenleft ] } ;
    key <AE10> {  [ U0030, parenright ] } ;
    key <AE11> {  [ minus, underscore ] };
    key <AE12> {  [ equal, plus	] };


    // Qrow
    key <AD01> {  [ U0B9E, U0BB6 ] };
    key <AD02> {  [ U0BB1, U0BB7 ] };
    key <AD03> {  [ U0BA8, U0BB8 ] };
    key <AD04> {  [ U0B9A, U0BB9 ] };
    key <AD05> {  [ U0BB5, U0B9C ] };
    key <AD06> {  [ U0BB2 ] };
    key <AD07> {  [ U0BB0 ] };
    key <AD08> {  [ U0BC8, U0B90 ] };
    key <AD09> {  [ U0BCA, U0BCB ] };
    key <AD10> {  [ U0BBF, U0BC0 ] };
    key <AD11> {  [ U0BC1, U0BC2 ] };

    // Arow
    key <AC01> { [ U0BAF ] };
    key <AC02> { [ U0BB3 ] };
    key <AC03> { [ U0BA9 ] };
    key <AC04> { [ U0B95 ] };
    key <AC05> { [ U0BAA ] };
    key <AC06> { [ U0BBE, U0BB4 ] };
    key <AC07> { [ U0BA4 ] };
    key <AC08> { [ U0BAE ] };
    key <AC09> { [ U0B9F ] };
    key <AC10> { [ U0BCD, U0B83 ] };
    key <AC11> { [ U0B99 ] };

    // Zrow
    key <AB01> { [ U0BA3 ]  };
    key <AB02> { [ U0B92, U0B93 ]  };
    key <AB03> { [ U0B89, U0B8A ]  };
    key <AB04> { [ U0B8E, U0B8F ]  };
    key <AB05> { [ U0BC6, U0BC7 ]  };
    key <AB06> { [ U0B94, U0BCC ]  };
    key <AB07> { [ U0B85, U0B86 ]  };
    key <AB08> { [ U0B87, U0B88 ]  };
};

partial alphanumeric_keys
xkb_symbols "tam_tamilnet_with_tam_nums" {

// Description: A keymap based on the TamilNet'99 typewriter keyboard 
// Encoding: Unicode (http://www.unicode.org)
// Author: Malathi S <malathiramya@gmail.com>
// Secondary contact: Sri Ramadoss M <amachu@au-kbc.org>
// Date  : Fri Sep 4 11:33:00 CST 2009
// Mapping:

      name[Group1]= "Tamil (TamilNet '99 with Tamil numerals)";

      // Mainly numbers.
      key <TLDE> { [ apostrophe, asciitilde ] };
      key <AE01> { [ U0BE7, exclam ] };
      key <AE02> { [ U0BE8, at ] };
      key <AE03> { [ U0BE9, numbersign ] };
      key <AE04> { [ U0BEA, U0BF9 ] };
      key <AE05> { [ U0BEB, percent ] };
      key <AE06> { [ U0BEC, asciicircum ] };
      key <AE07> { [ U0BED, ampersand ] };
      key <AE08> { [ U0BEE, asterisk ] };
      key <AE09> { [ U0BEF, parenleft ] };
      key <AE10> { [ U0BE6, parenright ] };
      key <AE11> { [ minus, underscore ] };
      key <AE12> { [ equal, plus ] };


    // Qrow
    key <AD01> {  [ U0B9E, U0BB6 ] };
    key <AD02> {  [ U0BB1, U0BB7 ] };
    key <AD03> {  [ U0BA8, U0BB8 ] };
    key <AD04> {  [ U0B9a, U0BB9 ] };
    key <AD05> {  [ U0BB5, U0B9c ] };
    key <AD06> {  [ U0BB2 ] };
    key <AD07> {  [ U0BB0 ] };
    key <AD08> {  [ U0BC8, U0B90 ] };
    key <AD09> {  [ U0BCA, U0BCB ] };
    key <AD10> {  [ U0BBF, U0BC0 ] };
    key <AD11> {  [ U0BC1, U0BC2 ] };

    // Arow
    key <AC01> { [ U0BAF ] };
    key <AC02> { [ U0BB3 ] };
    key <AC03> { [ U0BA9 ] };
    key <AC04> { [ U0B95 ] };
    key <AC05> { [ U0BAA ] };
    key <AC06> { [ U0BBE, U0BB4 ] };
    key <AC07> { [ U0BA4 ] };
    key <AC08> { [ U0BAE ] };
    key <AC09> { [ U0B9F ] };
    key <AC10> { [ U0BCD, U0B83 ] };
    key <AC11> { [ U0B99 ] };

    // Zrow
    key <AB01> { [ U0BA3 ]  };
    key <AB02> { [ U0B92, U0B93 ]  };
    key <AB03> { [ U0B89, U0B8A ]  };
    key <AB04> { [ U0B8E, U0B8F ]  };
    key <AB05> { [ U0BC6, U0BC7 ]  };
    key <AB06> { [ U0B94, U0BCC ]  };
    key <AB07> { [ U0B85, U0B86 ]  };
    key <AB08> { [ U0B87, U0B88 ]  };
};

partial alphanumeric_keys
xkb_symbols "tam_tamilnet_TSCII" {

// Description	: A Tamil typewrite-style keymap 
//		  loosely based on TamilNet'99 reommendations 
// Encoding	: TSCII (http://www.tscii.org)
// Author	: Thuraiappah Vaseeharan <vasee@ieee.org>
// Last Modified: Sat Jan  5 17:11:26 CST 2002

    name[Group1]= "Tamil (TamilNet '99, TSCII encoding)";

    key <AE01> {  [ 0x10000b7, 0x10000a4 ] }; // aytham
    key <AE02> {  [ 0x1000082, 0x10000a5 ] }; // shri
    key <AE03> {  [ 0x1000083, 0x1000088 ] }; // ja
    key <AE04> {  [ 0x1000084, 0x1000089 ] }; // sha
    key <AE05> {  [ 0x1000085, 0x100008a ] }; // sa
    key <AE06> {  [ 0x1000086, 0x100008b ] }; // ha
    key <AE07> {  [ 0x1000087, 0x100008c ] }; // ksha

    // Qrow
    key <AD01> {  [ 0x10000bb, 0x100009a ] }; // nja
    key <AD02> {  [ 0x10000c8, 0x10000da ] }; // Ra
    key <AD03> {  [ 0x10000bf, 0x10000d1 ] }; // NNa
    key <AD04> {  [ 0x10000ba, 0x10000cd ] }; // ca
    key <AD05> {  [ 0x10000c5, 0x10000d7 ] }; // va
    key <AD06> {  [ 0x10000c4, 0x10000d6 ] }; // la
    key <AD07> {  [ 0x10000c3, 0x10000d5 ] }; // ra
    key <AD08> {  [ 0x10000a8, 0x10000b3 ] }; // sangili, ai
    key <AD09> {  [ 0x10000ca, 0x10000cb ] }; // di, dI
    key <AD10> {  [ 0x10000a2, 0x10000a3 ] }; // visiri
    key <AD11> {  [ dead_acute, 0x10000a3 ] }; // Ukaaram

    // Arow
    key <AC01> { [ 0x10000c2, 0x10000d4 ] }; // ya
    key <AC02> { [ 0x10000c7, 0x10000d9 ] }; // La
    key <AC03> { [ 0x10000c9, 0x10000db ] }; // na
    key <AC04> { [ 0x10000b8, 0x10000cc ] }; // ka
    key <AC05> { [ 0x10000c0, 0x10000d2 ] }; // pa
    key <AC06> { [ dead_grave,0x10000a1 ] }; // pulli,aravu
    key <AC07> { [ 0x10000be, 0x10000d0 ] }; // tha
    key <AC08> { [ 0x10000c1, 0x10000d3 ] }; // ma
    key <AC09> { [ 0x10000bc, 0x10000ce ] }; // da
    key <AC10> { [ 0x10000c6, 0x10000d8 ] }; // zha
    key <AC11> { [ 0x10000b9, 0x1000099 ] }; // nga

    // Zrow
    key <AB01> { [ 0x10000bd, 0x10000cf ] }; // Na
    key <AB02> { [ 0x10000b4, 0x10000b5 ] }; // o, O
    key <AB03> { [ 0x10000af, 0x10000b0 ] }; // u, U
    key <AB04> { [ 0x10000b1, 0x10000b2 ] }; // e, E
    key <AB05> { [ 0x10000a6, 0x10000a7 ] }; // kombus
    key <AB06> { [ 0x10000b6, 0x10000aa ] }; // au
    key <AB07> { [ 0x10000ab, 0x10000ac ] }; // a, A
    key <AB08> { [ 0x10000fe, 0x10000ae ] }; // i, I
};

partial alphanumeric_keys
xkb_symbols "tam_tamilnet_TAB" {

// Description: A keymap based on the TamilNet'99 typewriter keyboard 
// Encoding: TAB (http://www.tamilnet99.org)
// Author: Thuraiappah Vaseeharan <t_vasee@yahoo.com>
// Date  : Sun Aug 12 02:23:00 CDT 2001

    name[Group1]= "Tamil (TamilNet '99, TAB encoding)";

    // numeral row
    key <AE01> {  [ 0x10000e7, 0x10000a7 ] } ;
    key <AE02> {  [ 0x10000fa, 0x10000a8 ] } ;
    key <AE03> {  [ 0x10000fb ] } ;
    key <AE04> {  [ 0x10000fc ] } ;
    key <AE05> {  [ 0x10000fd ] } ;
    key <AE06> {  [ 0x10000fe ] } ;
    key <AE07> {  [ 0x10000ff ] } ;

    // q-row
    key <AD01> {  [ 0x10000eb, 0x10000b3 ] };
    key <AD02> {  [ 0x10000f8, 0x10000c1 ] };
    key <AD03> {  [ 0x10000ef, 0x10000b8 ] };
    key <AD04> {  [ 0x10000ea, 0x10000b2 ] };
    key <AD05> {  [ 0x10000f5, 0x10000be ] };
    key <AD06> {  [ 0x10000f4, 0x10000bd ] };
    key <AD07> {  [ 0x10000f3, 0x10000bc ] };
    key <AD08> {  [ 0x10000ac, 0x10000e4 ] };
    key <AD09> {  [ 0x10000ae, 0x10000af ] };
    key <AD10> {  [ 0x10000a4, 0x10000a6 ] };
    key <AD11> {  [ dead_circumflex, 0x10000a6 ] }; // Ukaaram

    // a-row
    key <AC01> {  [ 0x10000f2, 0x10000bb ] };
    key <AC02> {  [ 0x10000f7, 0x10000c0 ] };
    key <AC03> {  [ 0x10000f9, 0x10000c2 ] };
    key <AC04> {  [ 0x10000e8, 0x10000b0 ] };
    key <AC05> {  [ 0x10000f0, 0x10000b9 ] };
    key <AC06> {  [ 0x10000a2, 0x10000a3 ] };
    key <AC07> {  [ 0x10000ee, 0x10000b6 ] };
    key <AC08> {  [ 0x10000f1, 0x10000ba ] };
    key <AC09> {  [ 0x10000ec, 0x10000b4 ] };
    key <AC10> {  [ 0x10000f6, 0x10000bf ] };
    key <AC11> {  [ 0x10000e9, 0x10000b1 ] };

    // z-row
    key <AB01> {  [ 0x10000ed, 0x10000b5 ] };
    key <AB02> {  [ 0x10000e5, 0x10000e6 ] };
    key <AB03> {  [ 0x10000e0, 0x10000e1 ] };
    key <AB04> {  [ 0x10000e2, 0x10000e3 ] };
    key <AB05> {  [ 0x10000aa, 0x10000ab ] };
    key <AB06> {  [ 0x10000ac, 0x10000a3 ] };
    key <AB07> {  [ 0x10000dc, 0x10000dd ] };
    key <AB08> {  [ 0x10000de, 0x10000df ] };
};

partial alphanumeric_keys
xkb_symbols "tel" {

    // Inscript layout for Telugu using Unicode 
    // Author: G Karunakar <karunakar@freedomink.org>
    // Date:
    // See layout at http://www.indlinux.org/keymap/telugu.php

    name[Group1]= "Telugu";

    key <TLDE> { [  U0c4a, U0c12	] };
    key <AE01> { [  U0c67			] };
    key <AE02> { [  U0c68			] };
    key <AE03> { [  U0c69, numbersign	] };
    key <AE04> { [  U0c6a, dollar		] };
    key <AE05> { [  U0c6b, percent		] };
    key <AE06> { [  U0c6c, asciicircum	] };
    key <AE07> { [  U0c6d, ampersand	] };
    key <AE08> { [  U0c6e, asterisk	] };
    key <AE09> { [  U0c6f, parenleft	] };
    key <AE10> { [  U0c66, parenright	] };
    key <AE11> { [  U0c03, underscore	] };
    key <AE12> { [  U0c43, U0c0b	] };
    key <BKSP> { [  BackSpace			] };

    key <AD01> { [  U0c4c, U0c14	] };
    key <AD02> { [  U0c48, U0c10	] };
    key <AD03> { [  U0c3e, U0c06	] };
    key <AD04> { [  U0c40, U0c08	] };
    key <AD05> { [  U0c42, U0c0a	] };
    key <AD06> { [  U0c2c, U0c2d	] };
    key <AD07> { [  U0c39, U0c19	] };
    key <AD08> { [  U0c17, U0c18	] };
    key <AD09> { [  U0c26, U0c27	] };
    key <AD10> { [  U0c1c, U0c1d	] };
    key <AD11> { [  U0c21, U0c22	] };
    key <AD12> { [  U0c1e			] };

    key <AC01> { [  U0c4b, U0c13	] };
    key <AC02> { [  U0c47, U0c0f	] };
    key <AC03> { [  U0c4d, U0c05	] };
    key <AC04> { [  U0c3f, U0c07	] };
    key <AC05> { [  U0c41, U0c09	] };
    key <AC06> { [  U0c2a, U0c2b	] };
    key <AC07> { [  U0c30, U0c31	] };
    key <AC08> { [  U0c15, U0c16	] };
    key <AC09> { [  U0c24, U0c25	] };
    key <AC10> { [  U0c1a, U0c1b	] };
    key <AC11> { [  U0c1f, U0c20	] };

    key <AB01> { [  U0c46, U0c0e	] };
    key <AB02> { [  U0c02, U0c01	] };
    key <AB03> { [  U0c2e, U0c23	] };
    key <AB04> { [  U0c28			] };
    key <AB05> { [  U0c35			] };
    key <AB06> { [  U0c32, U0c33	] };
    key <AB07> { [  U0c38, U0c36	] };
    key <AB08> { [  comma     , U0c37	] };
    key <AB09> { [  period    				] };
    key <AB10> { [  U0c2f, U0040	] };

    key <RALT> {        
        symbols[Group1] = [ Mode_switch, Multi_key ],
        virtualMods = AltGr
    };
    include "rupeesign(4)"
    include "level3(ralt_switch)"
};

//Name                  :       Sarala
//Description           :       This is an adaptation of the Sarala keyboard (http://www.medhajananam.org/sarala/) developed 
//                              by Krishna Dhullipalla. Because of the way keyboard shortcuts are laid out in KDE, the keyboard
//                              modifiers had to be changed. The layout does not take any part of the original Sarala keyboard 
//                              code however. It has been developed from scratch, so the experience may differ.
//			        
//                              There is a ibus-m17n version of Sarala layout developed by Satya Pothamsetti <potham@gmail.com> on 
//                              http://www.medhajananam.org/.
//Standard		:	Supports Unicode 9.0.	 
//Help			:	This layout differs slightly from the layout on Medhajenanam. The layout has been depicted in the 
//				pdf file attached to this post on Sarala google group.
//				(https://groups.google.com/forum/#!topic/sarala-keyboard/-gsa90dUFcs).
//
//Layout Developed by   :       Krishna Dhullipalla <krishnadvr@yahoo.com> (http://www.medhajananam.org/)
//Author                :       Venkat R Akkineni <venkatram.akkineni@india.com>
//Date			:	Apr 28 2017
partial alphanumeric_keys
xkb_symbols "tel-sarala"
{
    name[Group1] = "Telugu (Sarala)";
    key.type="FOUR_LEVEL";
    // sequence 									  base, shift, alt, alt + shift
    key <AB01> { [          U0C4A,          U0C12                                 ] }; // ొ ఒ
    key <AB02> { [          U0C42,          U0C0A                                 ] }; // ూ ఊ
    key <AB03> { [          U0C21,          U0C22                                 ] }; // డ ఢ
    key <AB04> { [          U0C35,          U0C39                                 ] }; // వ హ
    key <AB05> { [          U0C2C,          U0C2D                                 ] }; // బ భ
    key <AB06> { [          U0C28,          U0C23                                 ] }; // న ణ
    key <AB07> { [          U0C2E,          U0C01                                 ] }; // మ ఁ
    key <AB08> { [         U002C,          U0C1E,      leftcaret 	    	  ] }; // , ఞ <
    key <AB09> { [         U002E,          U0C19,     rightcaret              	  ] }; // . ఙ >
    key <AB10> { [          U0C36,       question,      KP_Divide                 ] }; // శ ? /
    key <AC01> { [          U0C2F,          U0C3D           			  ] }; // య ఽ
    key <AC02> { [          U0C02,          U0C03                                 ] }; // ం ః
    key <AC03> { [          U0C26,          U0C27                                 ] }; // ద ధ
    key <AC04> { [          U0C4D,          U0C05                                 ] }; // ్ అ
    key <AC05> { [          U0C17,          U0C18                                 ] }; // గ ఘ
    key <AC06> { [          U0C1A,          U0C1B,          U0C58,          U0C59 ] }; // చ ఛ ౘ ౙ
    key <AC07> { [          U0C3E,          U0C06                                 ] }; // ా ఆ
    key <AC08> { [          U0C15,          U0C16,          U0C62,          U0C63 ] }; // క ఖ ౢ ౣ
    key <AC09> { [          U0C32,          U0C33,          U0C0C,          U0C61 ] }; // ల ళ ఌ ౡ
    key <AC10> { [          U0C1F,          U0C20,      semicolon,          colon ] }; // ట ఠ ; :
    key <AC11> { [     quoteright,       quotedbl	    	    		  ] }; // ' " 
    key <AD01> { [          U0C46,          U0C0E,          U0C44,          U0C34 ] }; // ె ఎ ౄ ఴ
    key <AD02> { [          U0C38,          U0C37,          U0C44                 ] }; // స ష ౄ
    key <AD03> { [          U0C47,          U0C0F,          U0C44                 ] }; // ే ఏ ౄ
    key <AD04> { [          U0C30,          U0C31,          U0C44,          U0C60 ] }; // ర ఱ ౄ ౠ
    key <AD05> { [          U0C24,          U0C25                                 ] }; // త థ
    key <AD06> { [          U0C40,          U0C08                                 ] }; // ీ ఈ
    key <AD07> { [          U0C41,          U0C09                                 ] }; // ు ఉ
    key <AD08> { [          U0C3F,          U0C07                                 ] }; // ి ఇ
    key <AD09> { [          U0C4B,          U0C13                                 ] }; // ో ఓ
    key <AD10> { [          U0C2A,          U0C2B                                 ] }; // ప ఫ
    key <AD11> { [          U0C1C,          U0C1D,    bracketleft,      braceleft ] }; // జ ఝ [ {
    key <AD12> { [          U0C48,          U0C10,   bracketright,     braceright ] }; // ై ఐ ] }
    key <AE01> { [           KP_1,         exclam,          U0C67,          U0C78 ] }; // 1 ! ౦ ౸
    key <AE02> { [           KP_2,             at,          U0C68,          U0C79 ] }; // 2 @ ౨ ౹
    key <AE03> { [           KP_3,     numbersign,          U0C69,          U0C7A ] }; // 3 # ౩ ౺
    key <AE04> { [           KP_4,         dollar,          U0C6A,          U0C7B ] }; // 4 $ ౪ ౻
    key <AE05> { [           KP_5,        percent,          U0C6B,          U0C7C ] }; // 5 % ౫ ౼
    key <AE06> { [           KP_6,    asciicircum,          U0C6C,          U0C7D ] }; // 6 ^ ౬ ౽
    key <AE07> { [           KP_7,      ampersand,          U0C6D,          U0C7E ] }; // 7 & ౭ ౾
    key <AE08> { [           KP_8,    KP_Multiply,          U0C6E,          U0C7F ] }; // 8 * ౮ ౿
    key <AE09> { [           KP_9,         U0028,           U0C6F,          U20B9 ] }; // 9 ( ౯ ₹
    key <AE10> { [           KP_0,         U0029,           U0C66,          U0C55 ] }; // 0 ) ౦ ౕ
    key <AE11> { [    KP_Subtract,       underbar,       NoSymbol,          U0C56 ] }; // - _  ౖ
    key <AE12> { [       KP_Equal,         KP_Add                                 ] }; // = +
    key <BKSL> { [          U0C4C,          U0C14,          U0964,          U0965 ] }; // ౌ ఔ । ॥
    key <TLDE> { [          U0C43,          U0C0B,      quoteleft,     asciitilde ] }; // ృ ఋ ` ~
    
    include "level3(ralt_switch)" 
};

partial alphanumeric_keys 
xkb_symbols "urd-phonetic" {
    include "pk(urd-phonetic)"
    name[Group1]= "Urdu (phonetic)";
};

partial alphanumeric_keys
xkb_symbols "urd-phonetic3" {
    include "pk(urd-crulp)"
    name[Group1]= "Urdu (alt. phonetic)";
};

partial alphanumeric_keys
xkb_symbols "urd-winkeys" {
    include "pk(urd-nla)"
    name[Group1]= "Urdu (Windows)";
};

// based on a keyboard map from an 'xkb/symbols/gur' file

partial alphanumeric_keys
xkb_symbols "guru" {
      name[Group1]= "Punjabi (Gurmukhi)";

      // Mainly numbers.
      key <AE01> { [      U0A67 		]	};
      key <AE02> { [      U0A68		]	};
      key <AE03> { [      U0A69, U0A71	]	};
      key <AE04> { [      U0A6A, U0A74	 	]	};
      key <AE05> { [      U0A6B, U262C		]	};
      key <AE06> { [      U0A6C  	 	]	};
      key <AE07> { [      U0A6D 		]	};
      key <AE08> { [      U0A6e  	 	]	};
      key <AE09> { [      U0A6F, parenleft 	]	};
      key <AE10> { [      U0A66, parenright ]	};
      key <AE11> { [      U0A03 	 	]	};
      key <AE12> { [      equal,	plus 	]	};

// Mainly long vowels

      key <AD01> { [      U0A4C, U0A14  ]	};
      key <AD02> { [      U0A48, U0A10  ]	};
      key <AD03> { [      U0A3E, U0A06  ]	};
      key <AD04> { [      U0A40, U0A08  ]	};
      key <AD05> { [      U0A42, U0A0A  ]	};

// Mainly voiced consonants

      key <AD06> { [      U0A2C, U0A2D 	]	};
      key <AD07> { [      U0A39, U0A19 	]	};
      key <AD08> { [      U0A17, U0A18 	]	};
      key <AD09> { [      U0A26, U0A27 	]	};
      key <AD10> { [      U0A1C, U0A1D 	]	};
      key <AD11> { [      U0A21, U0A22 	]	};
      key <AD12> { [      U0A3C, U0A1E 	]	};

// Mainly short vowels
      key <AC01> { [      U0A4B, U0A13  ]	};
      key <AC02> { [      U0A47, U0A0F  ]	};
      key <AC03> { [      U0A4D, U0A05  ]	};
      key <AC04> { [      U0A3F, U0A07  ]	};
      key <AC05> { [      U0A41, U0A09  ]	};

// Mainly unvoiced consonants

      key <AC06> { [      U0A2A, U0A2B 	]	};
      key <AC07> { [      U0A30, U0A5C 	]	};
      key <AC08> { [      U0A15, U0A16 	]	};
      key <AC09> { [      U0A24, U0A25 	]	};
      key <AC10> { [      U0A1A, U0A1B 	]	};
      key <AC11> { [      U0A1F, U0A20 	]	};
      key <BKSL> { [      U005C, U007C	]	};

      key <AB01> { [      z, 	 U0A01	]       };
      key <AB02> { [      U0A02, U0A70, U0A71  ]       };
      key <AB03> { [      U0A2E, U0A23  ]       };
      key <AB04> { [      U0A28, U0A28  ]       };
      key <AB05> { [      U0A35, U0A35  ]       };
      key <AB06> { [      U0A32, U0A33  ]       };
      key <AB07> { [      U0A38, U0A36  ]       };
      key <AB08> { [      comma,     less       ]       };
      key <AB09> { [      period,    U0964  ]       };
      key <AB10> { [      U0A2F, question   ]       };

    include "rupeesign(4)"
    include "level3(ralt_switch)"
};

//Name		:	Jhelum (Refind Inscript)
//Description	:	A Jhelum keyboard layout for Gurmukhi (Punjabi)
//			http://www.satluj.org/Jhelum.html
//Modified for Inscript to make
//Original Author :	Amanpreet Singh Alam <apreet.alam@gmail.com

partial alphanumeric_keys
xkb_symbols "jhelum" {
      name[Group1] = "Punjabi (Gurmukhi Jhelum)";
          key.type="FOUR_LEVEL";

     // Roman digits
     key <TLDE>  { [  grave, asciitilde, U0A02,U0A01 ] }; // grave: anusvara, candrabindu
     key <AE01>  { [   1,exclam,	U0A67,	exclam	   ] };
     key <AE02>  { [   2,at,	U0A68,	at	   ] };
     key <AE03>  { [   3,numbersign, U0A69,	numbersign ] };
     key <AE04>  { [   4,dollar,	U0A6A		 ] };
     key <AE05>  { [   5,percent,U0A6B,	percent    ] };
     key <AE06>  { [   6,U0A73, U0A6C,asciicircum ] };
     key <AE07>  { [   7,U0A72,U0A6D,ampersand  ] };
     key <AE08>  { [   8,asterisk,U0A6E,	asterisk   ] };
     key <AE09>  { [   9,parenleft,U0A6F,parenleft  ] };
     key <AE10>  { [   0,parenright,U0A66,parenright ] };
     key <AE11>	{ [   minus,underscore] };
     key <AE12>	{ [   equal,plus] };
     key <BKSL>  { [   U0964,U0965,U007C,U005C] }; //pipe : danda, double danda

     //Q Row	
     key <AD01>   { [   U0A4C, 	U0A14   ] };  // Q: oo, ooh
     key <AD02>   { [   U0A48,  	U0A10	] };  // W: ee, ae
     key <AD03>   { [   U0A3E,   U0A06  ] };  // E: a, aa
     key <AD04>   { [   U0A40,	U0A08, U20B9  	] };  // R: ee, ai, rupeesign
     key <AD05>   { [   U0A42,   U0A0A   ] };  // T: u, uu
     key <AD06>   { [   U0A30,	U0A5C   ] };  // Y: ra, raa
     key <AD07>   { [   U0A26,   U0A27   ] };  // U: tha, thha
     key <AD08>   { [   U0A17,   U0A18, U0A5A   ] };  // I:ga, gha
     key <AD09>   { [   U0A24,   U0A1F   ] };  // O: ta, tha
     key <AD10>   { [   U0A2A,   U0A5E, VoidSymbol,U0A5E  ] };  // P: pa, pha
     key <AD11>   { [   U0A21,   U0A22,   bracketleft,   braceleft   ] };
     key <AD12>	 { [   U0A19,   U0A1E,   bracketright, braceright   ] };

     //A Row
     key <AC01>   { [   U0A4B,	 U0A13  ] };   // A: o, oo
     key <AC02>   { [   U0A47,    U0A0F   ] };  // S: e, ee
     key <AC03>   { [   U0A4D,    U0A05   ] };  // D: halant, aa
     key <AC04>   { [   U0A3F,    U0A07   ] };  // F: i, aa
     key <AC05>   { [   U0A41,    U0A09   ] };  // G: u, uh
     key <AC06>   { [   U0A39,    U0A20   ] };  // H: ha, thha
     key <AC07>   { [   U0A1C,    U0A1D, U0A5B   ] };  // J: ja, jha
     key <AC08>   { [   U0A15,    U0A16,VoidSymbol ,U0A59   ] };  // K: ka, kha
     key <AC09>   { [   U0A32,	 U0A25, U0A33   ] };  // L: la, tha
     key <AC10>   { [   U0A38,   colon, U0A36  ] }; //; sa
     key <AC11>   { [apostrophe, quotedbl ] };

     //Z Row
     key <AB01>   { [   U0A71,	 U0A3C 	 ] };  // Z: addak, par bindi
     key <AB02>   { [   U0A02,    U0A70	 ] };  // X: bindi, tippi
     key <AB03>   { [   U0A1A,    U0A1B   ] };  // C: ca, cha
     key <AB04>   { [   U0A35,    U0A2F   ] };  // V: va, ya
     key <AB05>   { [   U0A2C,    U0A2D   ] };  // B: ba, bha
     key <AB06>   { [   U0A28,    U0A23   ] };  // N: na, nha
     key <AB07>   { [   U0A2E, U0A2E       ] };  // M: ma
     key <AB08>   { [   comma,    U262C	 ] };// comma: comma, dev abbreviation sign
     key <AB09>   { [   period,   U0A74 	 ] };  // period: period, nukta
     key <AB10>   { [   slash,   question ] };

//    modifier_map Shift  { Shift_L };
//    modifier_map Lock   { Caps_Lock };
//    modifier_map Control{ Control_L };
//    modifier_map Mod3   { Mode_switch };
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "olpc" {

// Contact: Walter Bender <walter@laptop.org>

  include "in(deva)"
  key <TLDE> { [	U094A,	U0912 ] }; // DEVANAGARI VOWEL SIGN SHORT O; DEVANAGARI LETTER SHORT O
  key <AE01> { [	U0967,	U090D ] }; // DEVANAGARI DIGIT ONE; DEVANAGARI LETTER CANDRA E
  key <AE02> { [	U0968,	U0945 ] }; // DEVANAGARI DIGIT TWO; DEVANAGARI VOWEL SIGN CANDRA E
  key <AE03> { [	U0969	 ] }; // DEVANAGARI DIGIT THREE;
  key <AE04> { [	U096A	 ] }; // DEVANAGARI DIGIT FOUR;
  key <AE05> { [	U096B	 ] }; // DEVANAGARI DIGIT FIVE;
  key <AE06> { [	U096C	 ] }; // DEVANAGARI DIGIT SIX;
  key <AE07> { [	U096D	 ] }; // DEVANAGARI DIGIT SEVEN;
  key <AE08> { [	U096E	 ] }; // DEVANAGARI DIGIT EIGHT;
  key <AE09> { [	U096F,	parenleft ] }; // DEVANAGARI DIGIT NINE;
  key <AE10> { [	U0966,	parenright ] }; // DEVANAGARI DIGIT ZERO;
  key <AE11> { [	minus,		U0903 ] }; // DEVANAGARI SIGN VISARGA;
  key <AE12> { [	U0943,	U090B ] }; // DEVANAGARI VOWEL SIGN VOCALIC R; DEVANAGARI LETTER VOCALIC R

  key <AD01> { [	U094C,	U0914 ] }; // DEVANAGARI VOWEL SIGN AU; DEVANAGARI LETTER AU
  key <AD02> { [	U0948,	U0910 ] }; // DEVANAGARI VOWEL SIGN AI; DEVANAGARI LETTER AI
  key <AD03> { [	U093E,	U0906 ] }; // DEVANAGARI VOWEL SIGN AA; DEVANAGARI LETTER AA
  key <AD04> { [	U0940,	U0908 ] }; // DEVANAGARI VOWEL SIGN II; DEVANAGARI LETTER II
  key <AD05> { [	U0942,	U090A ] }; // DEVANAGARI VOWEL SIGN UU; DEVANAGARI LETTER UU
  key <AD06> { [	U092C,	U092D ] }; // DEVANAGARI LETTER BA; DEVANAGARI LETTER BHA
  key <AD07> { [	U0939,	U0919 ] }; // DEVANAGARI LETTER HA; DEVANAGARI LETTER NGA
  key <AD08> { [	U0917,	U0918 ] }; // DEVANAGARI LETTER GA; DEVANAGARI LETTER GHA
  key <AD09> { [	U0926,	U0927 ] }; // DEVANAGARI LETTER DA; DEVANAGARI LETTER DHA
  key <AD10> { [	U091C,	U091D ] }; // DEVANAGARI LETTER JA; DEVANAGARI LETTER JHA
  key <AD11> { [	U0921,	U0922 ] }; // DEVANAGARI LETTER DDA; DEVANAGARI LETTER DDHA
  key <AD12> { [	U093C,	U091E ] }; // DEVANAGARI SIGN NUKTA; DEVANAGARI LETTER NYA

  key <BKSL> { [	U0949,	U0911 ] }; // DEVANAGARI VOWEL SIGN CANDRA O; DEVANAGARI LETTER CANDRA O

  key <AC01> { [	U094B,	U0913 ] }; // DEVANAGARI VOWEL SIGN O; DEVANAGARI LETTER O
  key <AC02> { [	U0947,	U090F ] }; // DEVANAGARI VOWEL SIGN E; DEVANAGARI LETTER E
  key <AC03> { [	U094D,	U0905 ] }; // DEVANAGARI SIGN VIRAMA; DEVANAGARI LETTER A
  key <AC04> { [	U093F,	U0907 ] }; // DEVANAGARI VOWEL SIGN I; DEVANAGARI LETTER I
  key <AC05> { [	U0941,	U0909 ] }; // DEVANAGARI VOWEL SIGN U; DEVANAGARI LETTER U
  key <AC06> { [	U092A,	U092B ] }; // DEVANAGARI LETTER PA; DEVANAGARI LETTER PHA
  key <AC07> { [	U0930,	U0931 ] }; // DEVANAGARI LETTER RA; DEVANAGARI LETTER RRA
  key <AC08> { [	U0915,	U0916 ] }; // DEVANAGARI LETTER KA; DEVANAGARI LETTER KHA
  key <AC09> { [	U0924,	U0925 ] }; // DEVANAGARI LETTER TA; DEVANAGARI LETTER THA
  key <AC10> { [	U091A,	U091B ] }; // DEVANAGARI LETTER CA; DEVANAGARI LETTER CHA
  key <AC11> { [	U091F,	U0920 ] }; // DEVANAGARI LETTER TTA; DEVANAGARI LETTER TTHA

  key <AB01> { [	U0946,	U090E ] }; // DEVANAGARI VOWEL SIGN SHORT E; DEVANAGARI LETTER SHORT E
  key <AB02> { [	U0902,	U0901 ] }; // DEVANAGARI SIGN ANUSVARA; DEVANAGARI SIGN CANDRABINDU
  key <AB03> { [	U092E,	U0923 ] }; // DEVANAGARI LETTER MA; DEVANAGARI LETTER NNA
  key <AB04> { [	U0928,	U0929 ] }; // DEVANAGARI LETTER NA; DEVANAGARI LETTER NNNA
  key <AB05> { [	U0935,	U0934 ] }; // DEVANAGARI LETTER VA; DEVANAGARI LETTER LLLA
  key <AB06> { [	U0932,	U0933 ] }; // DEVANAGARI LETTER LA; DEVANAGARI LETTER LLA
  key <AB07> { [	U0938,	U0936 ] }; // DEVANAGARI LETTER SA; DEVANAGARI LETTER SHA
  key <AB08> { [	comma,		U0937 ] }; // DEVANAGARI LETTER SSA
  key <AB09> { [	period,		U0964 ] }; // DEVANAGARI DANDA
  key <AB10> { [	U092F,	U095F ] }; // DEVANAGARI LETTER YA; DEVANAGARI LETTER YYA

  // space, space, Zero-Width-Non-Joiner (ZWNJ), Zero-Width-Joiner (ZWJ):
  include "nbsp(zwnj3zwj4)"

  include "group(olpc)"
  include "rupeesign(4)"
  include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "hin-wx" {

    name[Group1]= "Hindi (Wx)";

      key <TLDE> {	 [     grave, asciitilde, 2, 3    ]	};

      key <AE01> {	 [      0x1000967, exclam 		]	};
      key <AE02> {	 [      0x1000968, at 		]	};
      key <AE03> {	 [      0x1000969 , numbersign	 		]	};
      key <AE04> {	 [      0x100096A , dollar		]	};
      key <AE05> {	 [      0x100096B , percent 	 		]	};
      key <AE06> {	 [      0x100096C , asciicircum	 		]	};
      key <AE07> {	 [      0x100096D , ampersand                       ]	};
      key <AE08> {	 [      0x100096e , asterisk 	 		]	};
      key <AE09> {	 [      0x100096F, parenleft 		]	};
      key <AE10> {	 [      0x1000966, parenright 		]	};
      key <AE11> {	 [      minus, underscore 	 		]	};
      key <AE12> {	 [      equal, plus 		]	};


      key <AD01> {	 [      0x1000943,  0x1000944, 0x100090B, 0x1000960]	};
      key <AD02> {	 [      0x1000924,  0x1000925       	]	};
      key <AD03> {	 [      0x1000947,  0x1000948, 0x100090F, 0x1000910]	};
      key <AD04> {	 [      0x1000930,  0x1000937       	]	};
      key <AD05> {	 [      0x100091F,  0x1000920       	]	};


      key <AD06> {	 [      0x100092F 		]	};
      key <AD07> {	 [      0x1000941,  0x1000942, 0x1000909, 0x100090A ]	};
      key <AD08> {	 [      0x100093F,  0x1000940, 0x1000907, 0x1000908 ]	};
      key <AD09> {	 [      0x100094B,  0x100094C, 0x1000913, 0x1000914]	};
      key <AD10> {	 [      0x100092A,  0x100092B 		]	};
      key <AD11> {	 [      bracketleft, braceleft  		]	};
      key <AD12> {	 [      bracketright, braceright  		]	};
      key <BKSL> {       [      backslash, bar, 0x1000964, 0x1000965 ] };

      key <AC01> {	 [      0x100094D,  0x100093E, 0x1000905,0x1000906 ] 	};
      key <AC02> {	 [      0x1000938,  0x1000936       	]	};
      key <AC03> {	 [      0x1000921,  0x1000922       	]	};
      key <AC04> {	 [      0x1000919,  0x100091E       	]	};
      key <AC05> {	 [      0x1000917,  0x1000918       	]	};


      key <AC06> {	 [      0x1000939,  0x1000903 		]	};
      key <AC07> {	 [      0x100091C,  0x100091D 		]	};
      key <AC08> {	 [      0x1000915,  0x1000916 		]	};
      key <AC09> {	 [      0x1000932,  0x1000962, 0x1000933, 0x100090C]	};
      key <AC10> {	 [      semicolon, colon  		]	};
      key <AC11> {	 [      apostrophe, quotedbl 		]	};

      key <AB01> {	 [      0x1000901,   0x100093C, 0x100093D, 0x1000950]   };
      key <AB02> {       [      0x1000926,   0x1000927      ]       };
      key <AB03> {       [      0x100091A,   0x100091B         ]       };
      key <AB04> {       [      0x1000935                      ]       };
      key <AB05> {       [      0x100092C,   0x100092D        ]       };
      key <AB06> {       [      0x1000928,   0x1000923         ]       };
      key <AB07> {       [      0x100092E,   0x1000902         ]       };
      key <AB08> {       [      comma,       less         ]       };
      key <AB09> {       [      period,      greater       ]       };
      key <AB10> {       [      slash,      question        ]       };

    include "level3(ralt_switch)"
    include "rupeesign(4)"
};

partial alphanumeric_keys
xkb_symbols "eng" {

    include "us(basic)"
    name[Group1]= "English (India, with rupee)";

    include "rupeesign(4)"
    include "level3(ralt_switch)"
};


// Description : Enhanced INSCRIPT keymap for Malayalam
// Encoding    : Unicode (http://www.unicode.org)
// Author      : Mahesh T Pai <paivakil@gmail.com>
// Date        : March, 2011
// Source      : http://www.nongnu.org/smc/docs/images/ml_inscript_layout.jpg
// Comment     : Based on the Inscript Keyboard created by M Baiju
// Mapping:

partial alphanumeric_keys
xkb_symbols "mal_enhanced" {

    name[Group1] = "Malayalam (enhanced Inscript, with rupee)";

   //From grave to backslash (\)

      key <TLDE> { [ U0d4a ,       U0d12 ] };
      key <AE01> { [ U0d67 ,      exclam ] };
      key <AE02> { [ U0d68 ,          at ] };
      key <AE03> { [ U0d69 ,  numbersign ] };
      key <AE04> { [ U0d6a ,      dollar ] };
      key <AE05> { [ U0d6b ,     percent ] };
      key <AE06> { [ U0d6c , asciicircum ] };
      key <AE07> { [ U0d6d ,   ampersand ] };
      key <AE08> { [ U0d6e ,       U0d7e ] };
      key <AE09> { [ U0d6f ,   parenleft ] };
      key <AE10> { [ U0d66 ,  parenright ] };

      key <AE11> { [ minus , U0d03       ] };
      key <AE12> { [ U0d43 , U0d0b       ] };
      key <BKSL> { [ U0d7c , U05C        ] }; //bksl: chillu RR 


  // From 'q' to right bracket (])

    key <AD01> { [ U0d57 , U0d14 ] };
    key <AD02> { [ U0d48 , U0d10 ] };
    key <AD03> { [ U0d3e , U0d06 ] };
    key <AD04> { [ U0d40 , U0d08 ] };
    key <AD05> { [ U0d42 , U0d0a ] };
    key <AD06> { [ U0d2c , U0d2d ] };
    key <AD07> { [ U0d39 , U0d19 ] };
    key <AD08> { [ U0d17 , U0d18 ] };
    key <AD09> { [ U0d26 , U0d27 ] };
    key <AD10> { [ U0d1c , U0d1d ] };
    key <AD11> { [ U0d21 , U0d22 ] };
    key <AD12> { [ U0200d , U0d1e ] };

    // From 'a' to apostrophe (')

    key <AC01> { [ U0d4b , U0d13 ] };
    key <AC02> { [ U0d47 , U0d0f ] };
    key <AC03> { [ U0d4d , U0d05 ] };
    key <AC04> { [ U0d3f , U0d07 ] };
    key <AC05> { [ U0d41 , U0d09 ] };
    key <AC06> { [ U0d2a , U0d2b ] };
    key <AC07> { [ U0d30 , U0d31 ] };
    key <AC08> { [ U0d15 , U0d16 ] };
    key <AC09> { [ U0d24 , U0d25 ] };
    key <AC10> { [ U0d1a , U0d1b ] };
    key <AC11> { [ U0d1f , U0d20 ] };

    // From 'z' to slash (/)

    key <AB01> { [ U0d46 , U0d0e ] };
    key <AB02> { [ U0d02 , U0d7a ] };
    key <AB03> { [ U0d2e , U0d23 ] };
    key <AB04> { [ U0d28 , U0d7b ] };
    key <AB05> { [ U0d35 , U0d34 ] };
    key <AB06> { [ U0d32 , U0d33 ] };
    key <AB07> { [ U0d38 , U0d36 ] };
    key <AB08> { [ comma , U0d37 ] };
    key <AB09> { [ period , U0d7d ] }; //chillu l
    key <AB10> { [ U0d2f , question ] };

    include "rupeesign(4)"
    include "level3(ralt_switch)"
};


// ---- BEGIN Hindi KaGaPa phonetic ----
// Name:        KaGaPa phonetic
// Brief:       Devanagari layout (Hindi, Sanskrit, Nepali, Marathi, etc.)
// Diagram:     (Original)[http://baraha.com/help/Keyboards/dev_brhkbd.htm]
//              (This layout)[http://bdsatish.in/lang/dev-kagapa.png]
//
// Description: Based on KaGaPa layout (also called Baraha layout or Nudi layout)
//              which is a modified layout of the specification by Dr. K. P. Rao.
//              This is a phonetic layout with the following features:
//              [1] All letters are mapped to phonetically-similar English keys
//                  as much as possible.
//              [2] The independent vowel (svara) and its dependent vowel (maatra)
//                  use the same key (depending upon SHIFT, ALTGR or ALTGR + SHIFT).
//              [3] Consonant conjuncts are produced by explicitly invoking the
//                  'viraama' (key f). The 'short a' maatra is implicit in all
//                  consonants.
//              [4] Zero width non-joiner and joiner are on keys 6 and 7
//                  respectively. These are absolutely essential for alternative
//                  glyph renderings of consonant half-forms.
//              [5] Rigvedic accent marks, visarga variants.
//
// Author:      Satish BD <bdsatish@gmail.com>
//
partial alphanumeric_keys
xkb_symbols "hin-kagapa" {
     name[Group1] = "Hindi (KaGaPa, phonetic)";
     key.type="FOUR_LEVEL";

    // Roman digits
    key <TLDE>  { [   grave,   asciitilde,   U201C          ] };  // U201C: left double quotation mark
    key <AE01>  { [   1,            exclam,       U0967          ] };
    key <AE02>  { [   2,            at,           U0968,  U20A8  ] };  // U20A8: generic rupee sign (Rs)
    key <AE03>  { [   3,            numbersign,   U0969          ] };
    key <AE04>  { [   4,            dollar,       U096A,  U20B9  ] };  // U20B9: new Indian rupee sign
    key <AE05>  { [   5,            percent,      U096B          ] };
    key <AE06>  { [   6,            asciicircum,  U096C,  U200C  ] };  // ZWNJ
    key <AE07>  { [   7,            ampersand,    U096D,  U200D  ] };  // ZWJ
    key <AE08>  { [   8,            asterisk,     U096E,  U0901  ] };  // U0901: Devanagari candrabindu
    key <AE09>  { [   9,            parenleft,    U096F          ] };
    key <AE10>  { [   0,            parenright,   U0966,  U0970  ] };  // U0970: Devanagari abbreviation sign
    key <AE11>  { [   minus,        underscore,   U0952          ] };  // U0952: Devanagari stress sign anudatta
    key <AE12>  { [   equal,        plus                         ] };
    key <BKSL>  { [   U005C,        U007C,        U0964,  U0965  ] };  // backslash, pipe, danda, double danda

    //Q Row
    key <AD01>  { [   U091F,         U0920                       ] };  // Q: retroflex Ta, Tha
    key <AD02>  { [   U0921,         U0922,      U095C,  U095D   ] };  // W: retroflex Da, Dha, Da-nukta, Dha-nukta
    key <AD03>  { [   U0946,         U0947,      U090E,  U090F   ] };  // E: matras, short E, long E
    key <AD04>  { [   U0930,         U0943,      U090B,  U0931   ] };  // R: ra, vocalic R matra, vocalic R, ra-nukta
    key <AD05>  { [   U0924,         U0925                       ] };  // T: dental ta, tha
    key <AD06>  { [   U092F,         U0948,      U0910,  U095F   ] };  // Y: ya, ai matra, ai, ya-nukta
    key <AD07>  { [   U0941,         U0942,      U0909,  U090A   ] };  // U: matras, u, uu
    key <AD08>  { [   U093F,         U0940,      U0907,  U0908   ] };  // I: matras, i, ii
    key <AD09>  { [   U094A,         U094B,      U0912,  U0913   ] };  // O: matras, short o, long o
    key <AD10>  { [   U092A,         U092B,      U095E           ] };  // P: pa, pha, pha-nukta
    key <AD11>  { [   bracketleft,   braceleft                   ] };
    key <AD12>  { [   bracketright,  braceright                  ] };

    //A Row
    key <AC01>  { [   U093E,        U0906,     U0905,    U0972   ] };  // A: aa matra, aa, short a, candra a
    key <AC02>  { [   U0938,        U0936                        ] };  // S: sa, sha
    key <AC03>  { [   U0926,        U0927                        ] };  // D: dental da, dha
    key <AC04>  { [   U094D,        U0944,     U0960             ] };  // F: virama, vocalic RR matra, vocalic RR
    key <AC05>  { [   U0917,        U0918,     U095A             ] };  // G: ga, gha, ga-nukta
    key <AC06>  { [   U0939,        U0903,     U1CF5,    U1CF6   ] };  // H: ha, visarga, jihvamuliya, upadhmaniya
    key <AC07>  { [   U091C,        U091D,     U095B             ] };  // J: ja, jha, ja-nukta
    key <AC08>  { [   U0915,        U0916,     U0958,    U0959   ] };  // K: ka, kha, ka-nukta, kha-nukta
    key <AC09>  { [   U0932,        U0933,     U0962,    U090C   ] };  // L: la, lla, vocalic L matra, vocalic L
    key <AC10>  { [   semicolon,    colon,     U1CF2,    U1CF3   ] };  // U1CF2/3: ardhavisarga/rotated ardhavisarga
    key <AC11>  { [   apostrophe,   quotedbl,  U0951,    U201D   ] };  // U0951: Devanagari stress sign udatta
                                                                       // U201D: Right double quotation mark
    //Z Row
    key <AB01>  { [   U091E,   U0919                   ] };  // Z: nya, nga
    key <AB02>  { [   U0937,   U093C,  U0934           ] };  // X: ssa, nukta below, lla-nukta
    key <AB03>  { [   U091A,   U091B                   ] };  // C: ca, cha
    key <AB04>  { [   U0935,   U094C,  U0914           ] };  // V: va, matra au, au
    key <AB05>  { [   U092C,   U092D                   ] };  // B: ba, bha
    key <AB06>  { [   U0928,   U0923,  U0929           ] };  // N: na, nna, nnna
    key <AB07>  { [   U092E,   U0902,  U093D,  U0950   ] };  // M: ma, anusvara, avagraha, Devanagari OM
    key <AB08>  { [   comma,   U003C,  U0945,  U090D   ] };  // comma: comma, less than, matra, candra e
    key <AB09>  { [   period,  U003E,  U0949,  U0911   ] };  // period: period, greater than, matra, candra o
    key <AB10>  { [   slash,   question                ] };

    include "level3(ralt_switch)"
};
// ---- END Hindi KaGaPa ----

// Sanskrit uses Devanagari layout of Hindi
partial alphanumeric_keys
xkb_symbols "san-kagapa" {
  include "in(hin-kagapa)"
  name[Group1] = "Sanskrit (KaGaPa, phonetic)";
};

// Marathi uses Devanagari layout of Hindi
partial alphanumeric_keys
xkb_symbols "mar-kagapa" {
  include "in(hin-kagapa)"
  name[Group1] = "Marathi (KaGaPa, phonetic)";
};


// ---- BEGIN Kannada KaGaPa phonetic ----
// Name:        Kannada KaGaPa phonetic
// Diagram:     (Original)[http://www.baraha.com/help/Keyboards/kan_brhkbd.htm]
//              (This layout)[http://bdsatish.in/lang/kan-kagapa.png]
//
// Description: Based on KaGaPa layout (also called Baraha layout or Nudi layout).
//              See the description to "hin-kagapa" above.
//              Certain punctuation characters from Devanagari block are
//              retained for compatibility.
//
// Author:      Satish BD <bdsatish@gmail.com>
//
partial alphanumeric_keys
xkb_symbols "kan-kagapa" {
    name[Group1] = "Kannada (KaGaPa, phonetic)";
    key.type="FOUR_LEVEL";

    // Roman digits
    key <TLDE>  { [   grave,   asciitilde,   U201C          ] };  // U201C: left double quotation mark
    key <AE01>  { [   1,            exclam,       U0CE7          ] };
    key <AE02>  { [   2,            at,           U0CE8,  U20A8  ] };  // U20A8: generic rupee sign (Rs)
    key <AE03>  { [   3,            numbersign,   U0CE9          ] };
    key <AE04>  { [   4,            dollar,       U0CEA,  U20B9  ] };  // U20B9: new Indian rupee sign
    key <AE05>  { [   5,            percent,      U0CEB          ] };
    key <AE06>  { [   6,            asciicircum,  U0CEC,  U200C  ] };  // ZWNJ
    key <AE07>  { [   7,            ampersand,    U0CED,  U200D  ] };  // ZWJ
    key <AE08>  { [   8,            asterisk,     U0CEE,  U0901  ] };  // U0901: Devanagari candrabindu
    key <AE09>  { [   9,            parenleft,    U0CEF          ] };
    key <AE10>  { [   0,            parenright,   U0CE6          ] };
    key <AE11>  { [   minus,        underscore,   U0952          ] };  // U0952: Devanagari stress sign anudatta
    key <AE12>  { [   equal,        plus                         ] };
    key <BKSL>  { [   U005C,        U007C,        U0964,  U0965  ] };  // backslash, pipe, danda, double danda

    //Q Row
    key <AD01>  { [   U0C9F,         U0CA0                       ] };  // Q: retroflex Ta, Tha
    key <AD02>  { [   U0CA1,         U0CA2                       ] };  // W: retroflex Da, Dha
    key <AD03>  { [   U0CC6,         U0CC7,      U0C8E,  U0C8F   ] };  // E: matras, short E, long E
    key <AD04>  { [   U0CB0,         U0CC3,      U0C8B,  U0CB1   ] };  // R: ra, vocalic R matra, vocalic R, RRA
    key <AD05>  { [   U0CA4,         U0CA5                       ] };  // T: dental ta, tha
    key <AD06>  { [   U0CAF,         U0CC8,      U0C90           ] };  // Y: ya, ai matra, ai
    key <AD07>  { [   U0CC1,         U0CC2,      U0C89,  U0C8A   ] };  // U: matras, u, uu
    key <AD08>  { [   U0CBF,         U0CC0,      U0C87,  U0C88   ] };  // I: matras, i, ii
    key <AD09>  { [   U0CCA,         U0CCB,      U0C92,  U0C93   ] };  // O: matras, short o, long o
    key <AD10>  { [   U0CAA,         U0CAB                       ] };  // P: pa, pha
    key <AD11>  { [   bracketleft,   braceleft                   ] };
    key <AD12>  { [   bracketright,  braceright                  ] };

    //A Row
    key <AC01>  { [   U0CBE,        U0C86,     U0C85             ] };  // A: aa matra, aa, short a
    key <AC02>  { [   U0CB8,        U0CB6                        ] };  // S: sa, sha
    key <AC03>  { [   U0CA6,        U0CA7                        ] };  // D: dental da, dha
    key <AC04>  { [   U0CCD,        U0CC4,     U0CE0             ] };  // F: virama, vocalic RR matra, vocalic RR
    key <AC05>  { [   U0C97,        U0C98                        ] };  // G: ga, gha
    key <AC06>  { [   U0CB9,        U0C83,     U0CF1,    U0CF2   ] };  // H: ha, visarga, jihvanuliya, upadhmaniya
    key <AC07>  { [   U0C9C,        U0C9D                        ] };  // J: ja, jha
    key <AC08>  { [   U0C95,        U0C96                        ] };  // K: ka, kha
    key <AC09>  { [   U0CB2,        U0CB3,     U0CE2,    U0C8C   ] };  // L: la, lla, vocalic L matra, vocalic L
    key <AC10>  { [   semicolon,    colon                        ] };
    key <AC11>  { [   apostrophe,   quotedbl,  U0951,    U201D   ] };  // U0951: Devanagari stress sign udatta
                                                                       // U201D: Right double quotation mark
    //Z Row
    key <AB01>  { [   U0C9E,   U0C99                   ] };  // Z: nya, nga
    key <AB02>  { [   U0CB7,   U0CBC,  U0CDE           ] };  // X: ssa, nukta below, LLLA
    key <AB03>  { [   U0C9A,   U0C9B                   ] };  // C: ca, cha
    key <AB04>  { [   U0CB5,   U0CCC,  U0C94           ] };  // V: va, matra au, au
    key <AB05>  { [   U0CAC,   U0CAD                   ] };  // B: ba, bha
    key <AB06>  { [   U0CA8,   U0CA3                   ] };  // N: na, nna
    key <AB07>  { [   U0CAE,   U0C82,  U0CBD,  U0950   ] };  // M: ma, anusvara, avagraha, Devanagari OM
    key <AB08>  { [   comma,   U003C,  U0CB1           ] };  // comma: comma, less than, RRA
    key <AB09>  { [   period,  U003E,  U0CDE           ] };  // period: period, greater than, LLLA
    key <AB10>  { [   slash,   question                ] };

    include "level3(ralt_switch)"
};
// ---- END Kannada KaGaPa ----


// ---- BEGIN Telugu KaGaPa phonetic ----
// Name:        Telugu KaGaPa phonetic
// Diagram:     (Original)[http://www.baraha.com/help/Keyboards/tel_brhkbd.htm]
//              (This layout)[http://bdsatish.in/lang/tel-kagapa.png]
//
// Description: Based on KaGaPa layout (also called Baraha layout or Nudi layout).
//              See the description to "hin-kagapa" above.
//              Certain punctuation characters from Devanagari block are
//              retained for compatibility.
//
// Author:      Satish BD <bdsatish@gmail.com>
//
partial alphanumeric_keys
xkb_symbols "tel-kagapa" {
    name[Group1] = "Telugu (KaGaPa, phonetic)";
    key.type="FOUR_LEVEL";

    // Roman digits
    key <TLDE>  { [   grave,   asciitilde,   U201C          ] };  // U201C: left double quotation mark
    key <AE01>  { [   1,            exclam,       U0C67          ] };
    key <AE02>  { [   2,            at,           U0C68,  U20A8  ] };  // U20A8: generic rupee sign (Rs)
    key <AE03>  { [   3,            numbersign,   U0C69          ] };
    key <AE04>  { [   4,            dollar,       U0C6A,  U20B9  ] };  // U20B9: new Indian rupee sign
    key <AE05>  { [   5,            percent,      U0C6B          ] };
    key <AE06>  { [   6,            asciicircum,  U0C6C,  U200C  ] };  // ZWNJ
    key <AE07>  { [   7,            ampersand,    U0C6D,  U200D  ] };  // ZWJ
    key <AE08>  { [   8,            asterisk,     U0C6E,  U0C01  ] };  // U0C01: Telugu arasunna
    key <AE09>  { [   9,            parenleft,    U0C6F          ] };
    key <AE10>  { [   0,            parenright,   U0C66          ] };
    key <AE11>  { [   minus,        underscore,   U0952          ] };  // U0952: Devanagari stress sign anudatta
    key <AE12>  { [   equal,        plus                         ] };
    key <BKSL>  { [   U005C,        U007C,        U0964,  U0965  ] };  // backslash, pipe, danda, double danda

    //Q Row
    key <AD01>  { [   U0C1F,         U0C20                       ] };  // Q: retroflex Ta, Tha
    key <AD02>  { [   U0C21,         U0C22                       ] };  // W: retroflex Da, Dha
    key <AD03>  { [   U0C46,         U0C47,      U0C0E,  U0C0F   ] };  // E: matras, short E, long E
    key <AD04>  { [   U0C30,         U0C43,      U0C0B,  U0C31   ] };  // R: ra, vocalic R matra, vocalic R, RRA
    key <AD05>  { [   U0C24,         U0C25                       ] };  // T: dental ta, tha
    key <AD06>  { [   U0C2F,         U0C48,      U0C10           ] };  // Y: ya, ai matra, ai
    key <AD07>  { [   U0C41,         U0C42,      U0C09,  U0C0A   ] };  // U: matras, u, uu
    key <AD08>  { [   U0C3F,         U0C40,      U0C07,  U0C08   ] };  // I: matras, i, ii
    key <AD09>  { [   U0C4A,         U0C4B,      U0C12,  U0C13   ] };  // O: matras, short o, long o
    key <AD10>  { [   U0C2A,         U0C2B                       ] };  // P: pa, pha
    key <AD11>  { [   bracketleft,   braceleft                   ] };
    key <AD12>  { [   bracketright,  braceright                  ] };

    //A Row
    key <AC01>  { [   U0C3E,        U0C06,     U0C05             ] };  // A: aa matra, aa, short a
    key <AC02>  { [   U0C38,        U0C36                        ] };  // S: sa, sha
    key <AC03>  { [   U0C26,        U0C27                        ] };  // D: dental da, dha
    key <AC04>  { [   U0C4D,        U0C44,     U0C60             ] };  // F: virama, vocalic RR matra, vocalic RR
    key <AC05>  { [   U0C17,        U0C18                        ] };  // G: ga, gha
    key <AC06>  { [   U0C39,        U0C03                        ] };  // H: ha, visarga
    key <AC07>  { [   U0C1C,        U0C1D                        ] };  // J: ja, jha
    key <AC08>  { [   U0C15,        U0C16                        ] };  // K: ka, kha
    key <AC09>  { [   U0C32,        U0C33,     U0C62,    U0C0C   ] };  // L: la, lla, vocalic L matra, vocalic L
    key <AC10>  { [   semicolon,    colon                        ] };
    key <AC11>  { [   apostrophe,   quotedbl,  U0951,    U201D   ] };  // U0951: Devanagari stress sign udatta
                                                                       // U201D: Right double quotation mark
    //Z Row
    key <AB01>  { [   U0C1E,   U0C19                   ] };  // Z: nya, nga
    key <AB02>  { [   U0C37                            ] };  // X: ssa
    key <AB03>  { [   U0C1A,   U0C1B                   ] };  // C: ca, cha
    key <AB04>  { [   U0C35,   U0C4C,  U0C14           ] };  // V: va, matra au, au
    key <AB05>  { [   U0C2C,   U0C2D                   ] };  // B: ba, bha
    key <AB06>  { [   U0C28,   U0C23                   ] };  // N: na, nna
    key <AB07>  { [   U0C2E,   U0C02,  U0C3D,  U0950   ] };  // M: ma, anusvara, avagraha, Devanagari OM
    key <AB08>  { [   comma,   U003C,  U0C58           ] };  // comma: comma, less than, TSA
    key <AB09>  { [   period,  U003E,  U0C59           ] };  // period: period, greater than, DZA
    key <AB10>  { [   slash,   question                ] };

    include "level3(ralt_switch)"
};

// Description 	: Keymap for Manipuri language (Meetei mayek script)
// Encoding    	: Unicode (http://www.unicode.org)
// Author      	: Santosh Heigrujam <santosh.tomba@gmail.com>
// Date        	: December, 2013
// Source	: 
// Comment	:
	
partial alphanumeric_keys modifier_keys
xkb_symbols "eeyek" {

    name[Group1]= "Manipuri (Eeyek)";

    key <TLDE> {	[     grave,	asciitilde	]	};
    key <AE01> {	[	  Uabf1,	exclam 		]	};
    key <AE02> {	[	  Uabf2,	at		]	};
    key <AE03> {	[	  Uabf3,	numbersign	]	};
    key <AE04> {	[	  Uabf4,	dollar		]	};
    key <AE05> {	[	  Uabf5,	percent		]	};
    key <AE06> {	[	  Uabf6,	asciicircum	]	};
    key <AE07> {	[	  Uabf7,	ampersand	]	};
    key <AE08> {	[	  Uabf8,	asterisk	]	};
    key <AE09> {	[	  Uabf9,	parenleft	]	};
    key <AE10> {	[	  Uabf0,	parenright	]	};
    key <AE11> {	[     minus,	underscore	]	};
    key <AE12> {	[     equal,	plus		]	};

    key <AD01> {	[	  Uabc8,	Uabd8 		]	};
    key <AD02> {	[	  Uabcb,	Uabcb		]	};
    key <AD03> {	[	  Uabcf,	Uabe2		]	};
    key <AD04> {	[	  Uabd4,	Uabd4		]	};
    key <AD05> {	[	  Uabc7,	Uabe0		]	};
    key <AD06> {	[	  Uabcc,	Uabe6		]	};
    key <AD07> {	[	  Uabce,	Uabe8		]	};
    key <AD08> {	[	  Uabe4,	Uabe9		]	};
    key <AD09> {	[	  Uabe3,	Uabe7		]	};
    key <AD10> {	[	  Uabc4,	Uabde		]	};
    key <AD11> {	[ bracketleft,	braceleft	]	};
    key <AD12> {	[ bracketright,	braceright	]	};

    key <AC01> {	[	  Uabd1,	Uabe5 		]	};
    key <AC02> {	[	  Uabc1,	Uabd3		]	};
    key <AC03> {	[	  Uabd7,	Uabd9		]	};
    key <AC04> {	[	  Uabd0,	Uabda		]	};
    key <AC05> {	[	  Uabd2,	Uabd8		]	};
    key <AC06> {	[	  Uabcd,	Uabea		]	};
    key <AC07> {	[	  Uabd6,	Uabd3		]	};
    key <AC08> {	[	  Uabc0,	Uabdb		]	};
    key <AC09> {	[	  Uabc2,	Uabdc		]	};
    key <AC10> {	[ semicolon,	colon		]	};
    key <AC11> {	[ apostrophe,	quotedbl	]	};

    key <AB01> {	[	  Uabc9,	Uabe1 		]	};
    key <AB02> {	[	  Uabca,	Uabd9		]	};
    key <AB03> {	[	  Uabc6,	Uabeb		]	};
    key <AB04> {	[	  Uabda,	Uabed		]	};
    key <AB05> {	[	  Uabd5,	Uabec		]	};
    key <AB06> {	[	  Uabc5,	Uabdf		]	};
    key <AB07> {	[	  Uabc3,	Uabdd		]	};
    key <AB08> {	[     comma,	less		]	};
    key <AB09> {	[    period,	greater		]	};
    key <AB10> {	[     slash,	question	]	};

    key <BKSL> {	[ backslash,         bar	]	};
    
    include "level3(ralt_switch)"
};

// This layout is developed by Niranjan Tambe in July 2019
// for typing Indic languages in International Phonetic Alphabet (IPA).
// Contact - niranjanvikastambe@gmail.com

partial alphanumeric_keys modifier_keys
xkb_symbols "iipa" {

    name[Group1]= "Indic IPA";
    key <AE01>	{ [	1,		exclam]	};
    key <AE02>	{ [	2,		at]	};
    key <AE03>	{ [	3,		numbersign]	};
    key <AE04>	{ [	4,		U20B9]	};
    key <AE05>	{ [	5,		percent]	};
    key <AE06>	{ [	6,		asciicircum] };
    key <AE07>	{ [	7,		ampersand]	};
    key <AE08>	{ [	8,		asterisk]	};
    key <AE09>	{ [	9,		parenleft]	};
    key <AE10>	{ [	0,		parenright]	};
    key <AE11>	{ [	minus,	underscore]	};
    key <AE12>	{ [	equal,       plus]	};

    key <AD01>	{ [	U02B0,		U02B1]	}; // [ʰ], [ʱ]
    key <AD02>	{ [	U00E6,		q]	}; // [æ], [q] found in Urdu
    key <AD03>	{ [	a,			U028B]	}; // [a], [ʋ]
    key <AD04>	{ [	i,			U026A]	}; // [i] [ɪ]
    key <AD05>	{ [	u,			U026F]	}; // [u] [ɯ] found in Tamil
    key <AD06>	{ [	b,			Y]	}; // [b]
    key <AD07>	{ [	h,			U014B]	}; // [h], [ŋ]
    key <AD08>	{ [	g,			U0263]	}; // [g], [ɣ] found in Urdu
    key <AD09>	{ [	d,			U00F0]	}; // [d], [ð] found in Malayalam
    key <AD10>	{ [	U02A4,		U02A3]	}; // [ʤ], [ʣ] found in Marathi
    key <AD11>	{ [	U0256,		U027D]	}; // [ɖ], [ɽ]
    key <AD12>	{ [	bracketleft,	bracketright]	}; // "[", "]" needed for denoting phonetic symbols

    key <AC01>	{ [	o,		U0254]	}; // [o], [ɔ] found in Bangla
    key <AC02>	{ [	e,		U025B]	}; // [e], [ɛ]
    key <AC03>	{ [	U0259,	U0361]	}; // [ə], [   ͡  ]
    key <AC04>	{ [	i,		U026A]	}; // [i], [ɪ]
    key <AC05>	{ [	u,		U026F]	}; // [u], [ɯ]
    key <AC06>	{ [	p,		f]	}; // [p], [f]
    key <AC07>	{ [	U027E,	r]	}; // [ɾ], [r]
    key <AC08>	{ [	k,		x]	}; // [k], [x] found in Urdu
    key <AC09>	{ [	t,		U03B8]	}; // [t], [θ]
    key <AC10>	{ [	U02A7,	U02A6]	}; // [ʧ], [ʦ] found in Marathi
    key <AC11>	{ [	U0288,	quotedbl]	}; // [ʈ]
    key <TLDE>	{ [	grave, 	asciitilde]	};

    key <BKSL>	{ [	backslash,	bar]	};
    key <AB01>	{ [	U032A,		U0303]	}; // [ ̪], [ ̃] Dental mark, nasalisation mark
    key <AB02>	{ [	U0306,		X]	}; // [  ̆] Short sound
    key <AB03>	{ [	m,			U0273]	}; // [m], [ɳ]
    key <AB04>	{ [	n,			v]	}; // [n], [v]
    key <AB05>	{ [	w,			z] }; // [w], [z]
    key <AB06>	{ [	l,			U026D]	}; // [l], [ɭ]
    key <AB07>	{ [	s,			U0283]	}; // [s], [ʃ]
    key <AB08>	{ [	comma,		U0282]	}; // [ʂ]
    key <AB09>	{ [	period,		U02D0]	}; // [ː] Long sound
    key <AB10>	{ [	j,			slash] }; // [j]
};

// This layout is developed by Niranjan Tambe in July 2019
// for typing Marathi language with some necessary symbols.
// Contact - niranjanvikastambe@gmail.com

xkb_symbols "marathi" {
	name[Group1]="Marathi (enhanced Inscript)";
	key <TLDE> { [ U0962, U090C,   grave, asciitilde  ] }; // Added  ॢ & ऌ
	key <AE01> { [ U0967, exclam,       1, exclam      ] }; // Added exclamation mark
	key <AE02> { [ U0968, U0945,       2, at          ] }; // Added ॅ
	key <AE03> { [ U0969, U093D,  3, numbersign  ] }; // Added ऽ
	key <AE04> { [ U096a, U20B9,      4		  ] }; // Added ₹
	key <AE05> { [ U096b, percent,     5, percent     ] }; 
	key <AE06> { [ U096c, asciicircum, 6, asciicircum ] }; 
	key <AE07> { [ U096d, U0970,   7, ampersand   ] }; // Added ॰
	key <AE08> { [ U096e, U0950,    8, asterisk    ] };
	key <AE09> { [ U096f, parenleft,   9, parenleft   ] };
	key <AE10> { [ U0966, parenright,  0, parenright  ] };
	key <AE11> { [ minus, U0903, minus, underscore    ] };
	key <AE12> { [ U0943, U090b, U0944, U0960 ] };

	key <AD01> { [ U094c, U0914 ] };
	key <AD02> { [ U0948, U0910 ] };
	key <AD03> { [ U093e, U0906 ] };
	key <AD04> { [ U0940, U0908, U0963, U0961 ] };
	key <AD05> { [ U0942, U090a ] };
	key <AD06> { [ U092c, U092d ] };
	key <AD07> { [ U0939, U0919 ] };
	key <AD08> { [ U0917, U0918, U095a ] };
	key <AD09> { [ U0926, U0927 ] };
	key <AD10> { [ U091c, U091d, U095b ] };
	key <AD11> { [ U0921, U0922, U095c, U095d ] };
	key <AD12> { [ U093c, U091e ] };
	key <BKSL> { [ U0949, U0911, U005C, U007C ] };

	key <AC01> { [ U094b, U0913 ] };
	key <AC02> { [ U0947, U090f ] };
	key <AC03> { [ U094d, U0905 ] };
	key <AC04> { [ U093f, U0907, U0962, U090c ] };
	key <AC05> { [ U0941, U0909 ] };
	key <AC06> { [ U092a, U092b, NoSymbol, U095e ] };
	key <AC07> { [ U0930, U0931 ] };
	key <AC08> { [ U0915, U0916, U0958, U0959 ] };
	key <AC09> { [ U0924, U0925 ] };
	key <AC10> { [ U091a, U091b, U0952 ] };
	key <AC11> { [ U091f, U0920, NoSymbol, U0951 ] };

	key <AB01> { [ apostrophe, U0972, U0953 ] }; // Added apostrophe & ॲ
	key <AB02> { [ U0902, U0901, NoSymbol, U0950 ] }; 
	key <AB03> { [ U092e, U0923, U0954 ] };
	key <AB04> { [ U0928, quotedbl ] }; // Added "
	key <AB05> { [ U0935, UA8FB ] }; // Added headstroke
	key <AB06> { [ U0932, U0933 ] };
	key <AB07> { [ U0938, U0936 ] };
	key <AB08> { [ comma, U0937, U0970 ] };
	key <AB09> { [ period, U0964, U0965, U093d ] };
	key <AB10> { [ U092f, question, slash, question ] };
};
// EXTRAS:
// Vedic and Miscellaneous symbols
// This layout covers 'Extended Devanagari' and 'Vedic Extensions' Unicode blocks.
// This is helpful for including all the required symbols when typing complex texts such as those from Samaveda and Yajurveda.
// This layout only includes signs and symbols. Text needs to be typed seperately.
// Created by : Abhishek Deshpande     <abhishekdeshpande128@gmail.com>
// Date : 27th October, 2020
partial alphanumeric_keys
xkb_symbols "san-misc" {
     name[Group1] = "Sanskrit symbols";
     key.type="FOUR_LEVEL";

    // Roman digits
    key <TLDE>  { [   U1CD0,  UA8FA  ] };
    key <AE01>  { [   UA8E1,  U1CD1  ] };
    key <AE02>  { [   UA8E2,  UA8F2  ] };
    key <AE03>  { [   UA8E3,  UA8F3  ] };
    key <AE04>  { [   UA8E4,  UA8F4  ] };
    key <AE05>  { [   UA8E5,  UA8F5  ] };
    key <AE06>  { [   UA8E6,  UA8F6  ] };
    key <AE07>  { [   UA8E7,  UA8F7  ] };
    key <AE08>  { [   UA8E8,  UA8F8  ] };
    key <AE09>  { [   UA8E9,  UA8F9  ] };
    key <AE10>  { [   UA8E0,  UA8FC  ] };
    key <AE11>  { [   UA8FB,  U1CD2  ] };
    key <AE12>  { [   U1CF2,  U1CF3   ] };
    key <BKSL>  { [   U1CF8,  U1CF9   ] };

    //Q Row
    key <AD01>  { [   U1CD4,  U1CD5  ] };
    key <AD02>  { [   U1CD6,  U1CD7  ] };
    key <AD03>  { [   U1CD8,  U1CD9  ] };
    key <AD04>  { [   UA8EF  ] };
    key <AD05>  { [   U1CDA,  U1CDB  ] };
    key <AD06>  { [   UA8FE,   UA8FF  ] };
    key <AD07>  { [   UA8EB  ] };
    key <AD08>  { [   U1CDC,  U1CDD ] };
    key <AD09>  { [   U1CDE,  U1CDF  ] };
    key <AD10>  { [   UA8EE  ] };
    key <AD11>  { [   U1CE0  ] };
    key <AD12>  { [   U1CE1  ] };

    //A Row
    key <AC01>  { [   UA8EA  ] };
    key <AC02>  { [   UA8F1  ] };
    key <AC03>  { [   U1CE2  ] };
    key <AC04>  { [   U1CE3,  U1CE4  ] };
    key <AC05>  { [   U1CE5,  U1CE6  ] };
    key <AC06>  { [   U1CE7,  U1CE8  ] };
    key <AC07>  { [   U1CE9,  U1CEA  ] };
    key <AC08>  { [   UA8EC  ] };
    key <AC09>  { [   U1CEB,  U1CEC  ] };
    key <AC10>  { [   U1CEE,  U1CEF  ] };
    key <AC11>  { [   U1CF0,  U1CF1  ] };
    
    //Z Row
    key <AB01>  { [   U1CED  ] };
    key <AB02>  { [   U1CF4  ] };
    key <AB03>  { [   U1CF5  ] };
    key <AB04>  { [   UA8F0  ] };
    key <AB05>  { [   U1CF6  ] }; 
    key <AB06>  { [   UA8ED  ] };
    key <AB07>  { [   U0950,  UA8FD  ] };
    key <AB08>  { [   U1CF7,  U093D  ] };
    key <AB09>  { [   U1CFA,  U2638  ] };
    key <AB10>  { [   U0FD5,  U2740  ] };

    include "rupeesign(4)"
    include "level3(ralt_switch)"
};
//           Modi is an ancient Indian script that is used to write texts in Marathi, Hindi and Sanskrit. It is most commonly used to write Marathi language in Maharashtra.
//           This keyboard layout is Based on Marathi KaGaPa phonetic layout. Just the characters which are not applicable in Modi, are ommited.
//
//           Created by : Abhishek Deshpande     <abhishekdeshpande128@gmail.com>
//           Date : 9th February, 2020
// 
partial alphanumeric_keys
xkb_symbols "modi-kagapa" {
     name[Group1] = "Modi (KaGaPa phonetic)";
     key.type="FOUR_LEVEL";

 // Roman digits
    key <TLDE>  { [   grave,   asciitilde,   U201C           ] };  // U201C: left double quotation mark
    key <AE01>  { [   1,            exclam,       U11651          ] };
    key <AE02>  { [   2,            at,           U11652,  U20A8  ] };  // U20A8: generic rupee sign (Rs)
    key <AE03>  { [   3,            numbersign,   U11653          ] };
    key <AE04>  { [   4,            dollar,       U11654,  U20B9  ] };  // U20B9: new Indian rupee sign
    key <AE05>  { [   5,            percent,      U11655          ] };
    key <AE06>  { [   6,            asciicircum,  U11656,  U200C  ] };  // ZWNJ
    key <AE07>  { [   7,            ampersand,    U11657,  U200D  ] };  // ZWJ
    key <AE08>  { [   8,            asterisk,     U11658          ] };  
    key <AE09>  { [   9,            parenleft,    U11659          ] };
    key <AE10>  { [   0,            parenright,   U11650,  U11643 ] };  // U11643: Modi abbreviation sign
    key <AE11>  { [   minus,        underscore                    ] };  
    key <AE12>  { [   equal,        plus                          ] };
    key <BKSL>  { [   U005C,        U007C,        U11641,  U11642 ] };  // backslash, pipe, Modi danda, Modi double danda

    //Q Row
    key <AD01>  { [   U11618,         U11619                      ] };  // Q: retroflex Modi letter Ta, Tha
    key <AD02>  { [   U1161A,         U1161B                      ] };  // W: retroflex Modi letter Da, Dha 
    key <AD03>  { [   U11639,         U1160A,    U1160B           ] };  // E: Modi vovel sign E, Modi letter E, letter ai
    key <AD04>  { [   U11628,         U11635,    U11606           ] };  // R: Modi ra, Modi vowel sign vocalic R, vocalic letter R 
    key <AD05>  { [   U1161D,         U1161E                      ] };  // T: dental Modi letter ta, tha
    key <AD06>  { [   U11627,         U1163A                      ] };  // Y: Modi letter ya, Modi vowel sign ai
    key <AD07>  { [   U11633,         U11634,    U11604,  U11605  ] };  // U: Modi vowel sign u, uu, Modi letter u, uu
    key <AD08>  { [   U11631,         U11632,    U11602,  U11603  ] };  // I: Modi vowel sign i, ii, Modi letter i, ii
    key <AD09>  { [   U1163B,         U1160C                      ] };  // O: Modi vowel sign o, Modi letter o
    key <AD10>  { [   U11622,         U11623                      ] };  // P: Modi letter pa, pha 
    key <AD11>  { [   bracketleft,   braceleft                    ] };
    key <AD12>  { [   bracketright,  braceright                   ] };

    //A Row
    key <AC01>  { [   U11630,       U11601,     U11600           ] };  // A: Modi vowel sign aa, Modi letter aa, Modi letter a
    key <AC02>  { [   U1162D,       U1162B                       ] };  // S: Modi letter sa, sha
    key <AC03>  { [   U1161F,       U11620                       ] };  // D: dental Modi letter da, dha
    key <AC04>  { [   U1163F,       U11636,     U11607           ] };  // F: Modi sign virama, Modi vowel sign vocalic RR, letter vocalic RR
    key <AC05>  { [   U11610,       U11611                       ] };  // G: Modi letter ga, gha
    key <AC06>  { [   U1162E,       U1163E                       ] };  // H: Modi letter ha, Modi visarga
    key <AC07>  { [   U11615,       U11616                       ] };  // J: Modi letter ja, jha
    key <AC08>  { [   U1160E,       U1160F                       ] };  // K: Modi letter ka, kha
    key <AC09>  { [   U11629,       U1162F,     U11637,  U11608  ] };  // L: Modi letter la, lla, Modi vowel sign vocalic L, letter vocalic L
    key <AC10>  { [   semicolon,    colon                        ] };
    key <AC11>  { [   apostrophe,   quotedbl                     ] }; 
                                                                       
    //Z Row
    key <AB01>  { [   U11617,    U11612                     ] };  // Z: Modi letter nya, nga
    key <AB02>  { [   U1162C,    U11609,   U11638           ] };  // X: Modi letter ssa, Modi letter vocalic ll, Modi vowel sign vocalic ll 
    key <AB03>  { [   U11613,    U11614                     ] };  // C: Modi letter ca, cha
    key <AB04>  { [   U1162A,    U1163C,   U1160D           ] };  // V: Modi letter va, Modi vowel sign au, Modi letter au
    key <AB05>  { [   U11624,    U11625                     ] };  // B: Modi letter ba, bha
    key <AB06>  { [   U11621,    U1161C                     ] };  // N: Modi letter na, nna
    key <AB07>  { [   U11626,    U1163D,   U093D,    U0950  ] };  // M: Modi ma, Modi anusvara, avagraha, Devanagari OM (Avagraha & OM commonly occur in Marathi texts, so they are mapped here for convenience.)
    key <AB08>  { [   comma,     U003C,    U11640,   U11644 ] };  // comma: comma, less than, Modi chandrabindu, Modi sign huva
    key <AB09>  { [   period,    U003E                      ] };  // period: period, greater than
    key <AB10>  { [   slash,     question                   ] };

    include "level3(ralt_switch)"
};
// based on a keyboard map from an 'xkb/symbols/am' file

default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]= "Armenian";

    key <TLDE> {	[ Armenian_separation_mark,  Armenian_exclam ]	};
    key <LSGT> {	[ question,  		Armenian_hyphen	]	};
    key <BKSL> {	[ guillemotright, 	guillemotleft	]	};

    key <AE01> {	[ Armenian_fe,    	Armenian_FE  	]	};
    key <AE02> {	[ Armenian_dza,   	Armenian_DZA 	]	};
    key <AE03> {	[ Armenian_hyphen,  	0x1002014 	]	};
    key <AE04> {	[ comma,  		dollar		]	};
    key <AE05> {	[ Armenian_full_stop,  	0x1002026	] 	};
    key <AE06> {	[ Armenian_question,  	percent		]	};
    key <AE07> {	[ 0x1002024,  		Armenian_ligature_ew ] 	};
    key <AE08> {	[ Armenian_accent,  	Armenian_apostrophe  ] 	};
    key <AE09> {	[ parenright, 		parenleft 	] 	};
    key <AE10> {	[ Armenian_o,     	Armenian_O   	]	};
    key <AE11> {	[ Armenian_e,     	Armenian_E   	]	};
    key <AE12> {	[ Armenian_ghat,  	Armenian_GHAT	]	};

    key <AD01> {	[ Armenian_tche, 	Armenian_TCHE	]       };
    key <AD02> {	[ Armenian_pyur, 	Armenian_PYUR	]	};
    key <AD03> {	[ Armenian_ben,  	Armenian_BEN 	]       };
    key <AD04> {	[ Armenian_se,   	Armenian_SE  	]	};
    key <AD05> {	[ Armenian_men,  	Armenian_MEN 	]       };
    key <AD06> {	[ Armenian_vo,   	Armenian_VO  	]       };
    key <AD07> {	[ Armenian_vyun, 	Armenian_VYUN	]       };
    key <AD08> {	[ Armenian_ken,  	Armenian_KEN 	]       };
    key <AD09> {	[ Armenian_at,   	Armenian_AT  	]       };
    key <AD10> {	[ Armenian_to,   	Armenian_TO  	]       };
    key <AD11> {	[ Armenian_tsa,  	Armenian_TSA 	]       };
    key <AD12> {	[ Armenian_tso,  	Armenian_TSO 	]       };

    key <AC01> {	[ Armenian_je,   	Armenian_JE  	]       };
    key <AC02> {	[ Armenian_vev,  	Armenian_VEV 	]	};
    key <AC03> {	[ Armenian_gim,  	Armenian_GIM 	]       };
    key <AC04> {	[ Armenian_yech, 	Armenian_YECH	]       };
    key <AC05> {	[ Armenian_ayb,  	Armenian_AYB 	]       };
    key <AC06> {	[ Armenian_nu,   	Armenian_NU  	]	};
    key <AC07> {	[ Armenian_ini,  	Armenian_INI 	]       };
    key <AC08> {	[ Armenian_tyun, 	Armenian_TYUN	]       };
    key <AC09> {	[ Armenian_ho,   	Armenian_HO  	]       };
    key <AC10> {	[ Armenian_pe,   	Armenian_PE  	]       };
    key <AC11> {	[ Armenian_re,   	Armenian_RE  	]       };

    key <AB01> {	[ Armenian_zhe,  	Armenian_ZHE 	]       };
    key <AB02> {	[ Armenian_da,   	Armenian_DA  	]       };
    key <AB03> {	[ Armenian_cha,  	Armenian_CHA 	]       };
    key <AB04> {	[ Armenian_hi,   	Armenian_HI  	]       };
    key <AB05> {	[ Armenian_za,   	Armenian_ZA  	]       };
    key <AB06> {	[ Armenian_lyun, 	Armenian_LYUN	]       };
    key <AB07> {	[ Armenian_ke,   	Armenian_KE  	]       };
    key <AB08> {	[ Armenian_khe,  	Armenian_KHE 	]       };
    key <AB09> {	[ Armenian_sha,  	Armenian_SHA 	]       };
    key <AB10> {	[ Armenian_ra,   	Armenian_RA  	]       };
};

partial alphanumeric_keys
xkb_symbols "olpc" {
    include "am(basic)"
    include "group(olpc)"
};

xkb_symbols "phonetic" {
    include "am(basic)"
    name[Group1]= "Armenian (phonetic)";

    key <BKSL> {	[ Armenian_sha,   	Armenian_SHA  	]	};

    key <AE01> {	[ Armenian_e,     	Armenian_E    	]	};
    key <AE02> {	[ Armenian_to,    	Armenian_TO   	]	};
    key <AE03> {	[ Armenian_pyur,  	Armenian_PYUR 	]	};
    key <AE04> {	[ Armenian_dza,   	Armenian_DZA  	]       };
    key <AE05> {	[ Armenian_je,    	Armenian_JE   	]	};
    key <AE06> {	[ Armenian_vyun,  	Armenian_VYUN 	]	};
    key <AE07> {	[ Armenian_ligature_ew,	0x100058f 	]	};
    key <AE08> {	[ Armenian_ra,    	Armenian_RA   	]	};
    key <AE09> {	[ Armenian_cha,   	Armenian_CHA  	]	};
    key <AE10> {	[ Armenian_tche,  	Armenian_TCHE 	]	};
    key <AE11> {	[ Armenian_hyphen,  	0x1002015 	]       };
    key <AE12> {	[ Armenian_zhe,   	Armenian_ZHE  	]	};

    key <LatQ> {	[ Armenian_ke,    	Armenian_KE   	]	};
    key <LatW> {	[ Armenian_vo,    	Armenian_VO   	]	};
    key <LatE> {	[ Armenian_yech,  	Armenian_YECH 	]	};
    key <LatR> {	[ Armenian_re,    	Armenian_RE   	]	};
    key <LatT> {	[ Armenian_tyun,  	Armenian_TYUN 	]	};
    key <LatY> {	[ Armenian_at,    	Armenian_AT   	]	};
    key <LatU> {	[ Armenian_vyun,  	Armenian_VYUN 	]	};
    key <LatI> {	[ Armenian_ini,   	Armenian_INI  	]	};
    key <LatO> {	[ Armenian_o,     	Armenian_O    	]	};
    key <LatP> {	[ Armenian_pe,    	Armenian_PE   	]	};
    key <AD11> {	[ Armenian_khe,   	Armenian_KHE  	]	};
    key <AD12> {	[ Armenian_tsa,   	Armenian_TSA  	]	};

    key <LatA> {	[ Armenian_ayb,   	Armenian_AYB  	]	};
    key <LatS> {	[ Armenian_se,    	Armenian_SE   	]	};
    key <LatD> {	[ Armenian_da,    	Armenian_DA   	]	};
    key <LatF> {	[ Armenian_fe,    	Armenian_FE   	]	};
    key <LatG> {	[ Armenian_gim,   	Armenian_GIM  	]	};
    key <LatH> {	[ Armenian_ho,    	Armenian_HO   	]	};
    key <LatJ> {	[ Armenian_hi,    	Armenian_HI   	]	};
    key <LatK> {	[ Armenian_ken,   	Armenian_KEN  	]	};
    key <LatL> {	[ Armenian_lyun,  	Armenian_LYUN 	]	};
    key <AC10> {	[ semicolon,  		Armenian_full_stop ]	};
    key <AC11> {	[ Armenian_accent,  	0x1000022 	]	};

    key <LatZ> {	[ Armenian_za,    	Armenian_ZA   	]	};
    key <LatX> {	[ Armenian_ghat,  	Armenian_GHAT 	]	};
    key <LatC> {	[ Armenian_tso,   	Armenian_TSO  	]	};
    key <LatV> {	[ Armenian_vev,   	Armenian_VEV  	]	};
    key <LatB> {	[ Armenian_ben,   	Armenian_BEN  	]	};
    key <LatN> {	[ Armenian_nu,    	Armenian_NU   	]	};
    key <LatM> {	[ Armenian_men,   	Armenian_MEN  	]	};
    key <AB08> {	[ 0x100002C,  		0x10000AB 	]       };
    key <AB09> {	[ 0x1002024,  		0x10000BB 	]       };
    key <AB10> {	[ 0x100002F,  		Armenian_question ]	};
};

partial alphanumeric_keys
xkb_symbols "phonetic-alt" {
    include "am(phonetic)"
    name[Group1]= "Armenian (alt. phonetic)";

    key <AE08> {	[ Armenian_re,    	Armenian_RE   	]	};
    key <LatR> {	[ Armenian_ra,    	Armenian_RA   	]	};
};

partial alphanumeric_keys
xkb_symbols "olpc-phonetic" {
    include "am(phonetic-alt)"
    name[Group1]= "Armenian (OLPC, phonetic)";

    include "group(olpc)"
};

partial alphanumeric_keys
xkb_symbols "eastern" {

    name[Group1]="Armenian (eastern)";

    // This is the closer phonetic transliteration for Eastern Armenian
    // than the Windows XP layout for Eastern Armenian, which seems
    // to have contained a bug, with the reversal of 'g' for keh and 'c' for gim.
    // Also, AE01 (the colon) has been replaced with the Armenian_full_stop,
    // and capital AE07 (ken) with the Armenian ligature ew.

    key <TLDE> {	[ Armenian_separation_mark,  Armenian_exclam ]	};
    key <AE01> {	[ Armenian_full_stop,  	KP_1 ]		};
    key <AE02> {	[ Armenian_dza,  	Armenian_DZA ]	};
    key <AE03> {	[ Armenian_hi,  	Armenian_HI ]	};
    key <AE04> {	[ Armenian_accent,  	KP_3 ]		};
    key <AE05> {	[ comma,  		KP_4 ]		};
    key <AE06> {	[ minus,  		KP_9 ]		};
    key <AE07> {	[ period,  		Armenian_ligature_ew ]	};
    key <AE08> {	[ guillemotleft,  	parenleft ]	};
    key <AE09> {	[ guillemotright,  	parenright ]	};
    key <AE10> {	[ Armenian_o,  		Armenian_O ]	};
    key <AE11> {	[ Armenian_ra,  	Armenian_RA ]	};
    key <AE12> {	[ Armenian_zhe,  	Armenian_ZHE ]	};

    key <LatQ> {	[ Armenian_khe,  	Armenian_KHE ]	};
    key <LatW> {	[ Armenian_vyun,  	Armenian_VYUN ]	};
    key <LatE> {	[ Armenian_e,  		Armenian_E ]	};
    key <LatR> {	[ Armenian_re,  	Armenian_RE ]	};
    key <LatT> {	[ Armenian_tyun,  	Armenian_TYUN ]	};
    key <LatY> {	[ Armenian_yech,  	Armenian_YECH ]	};
    key <LatU> {	[ Armenian_at,  	Armenian_AT ]	};
    key <LatI> {	[ Armenian_ini,  	Armenian_INI ]	};
    key <LatO> {	[ Armenian_vo,  	Armenian_VO ]	};
    key <LatP> {	[ Armenian_pe,  	Armenian_PE ]	};
    key <AD11> {	[ Armenian_cha,  	Armenian_CHA ]	};
    key <AD12> {	[ Armenian_je,  	Armenian_JE ]	};
    key <BKSL> {	[ apostrophe,  		Armenian_question ]	};

    key <LatA> {	[ Armenian_ayb,  	Armenian_AYB ]	};
    key <LatS> {	[ Armenian_se,  	Armenian_SE ]	};
    key <LatD> {	[ Armenian_da,  	Armenian_DA ]	};
    key <LatF> {	[ Armenian_fe,  	Armenian_FE ]	};
    key <LatG> {	[ Armenian_gim,  	Armenian_GIM ]	};
    key <LatH> {	[ Armenian_ho,  	Armenian_HO ]	};
    key <LatJ> {	[ Armenian_tche,  	Armenian_TCHE ]	};
    key <LatK> {	[ Armenian_ken,  	Armenian_KEN ]	};
    key <LatL> {	[ Armenian_lyun,  	Armenian_LYUN ]	};
    key <AC10> {	[ Armenian_to,  	Armenian_TO ]	};
    key <AC11> {	[ Armenian_pyur,  	Armenian_PYUR ]	};

    key <LatZ> {	[ Armenian_za,  	Armenian_ZA ]	};
    key <LatX> {	[ Armenian_tso,  	Armenian_TSO ]	};
    key <LatC> {	[ Armenian_ke,  	Armenian_KE ]	};
    key <LatV> {	[ Armenian_vev,  	Armenian_VEV ]	};
    key <LatB> {	[ Armenian_ben,  	Armenian_BEN ]	};
    key <LatN> {	[ Armenian_nu,  	Armenian_NU ]	};
    key <LatM> {	[ Armenian_men,  	Armenian_MEN ]	};
    key <AB08> {	[ Armenian_sha,  	Armenian_SHA ]	};
    key <AB09> {	[ Armenian_ghat,  	Armenian_GHAT ]	};
    key <AB10> {	[ Armenian_tsa,  	Armenian_TSA ]	};
};

partial alphanumeric_keys
xkb_symbols "western" {
    include "am(eastern)"
    name[Group1]="Armenian (western)";

    // This is exactly the same layout for Western Armenian
    // as in Windows XP, except:
    // AE01 (the colon) has been replaced with the Armenian_full_stop and
    // capital AE07 (ken) with the Armenian ligature ew

    key <LatW> {	[ Armenian_vev,  	Armenian_VEV ]	};
    key <LatT> {	[ Armenian_da,  	Armenian_DA ]	};
    key <LatP> {	[ Armenian_ben,  	Armenian_BEN ]	};
    key <LatD> {	[ Armenian_tyun,  	Armenian_TYUN ]	};
    key <LatG> {	[ Armenian_ken,  	Armenian_KEN ]	};
    key <LatK> {	[ Armenian_ke,  	Armenian_KE ]	};
    key <LatC> {	[ Armenian_gim,  	Armenian_GIM ]	};
    key <LatV> {	[ Armenian_vyun,  	Armenian_VYUN ]	};
    key <LatB> {	[ Armenian_pe,  	Armenian_PE ]	};
};

partial alphanumeric_keys
xkb_symbols "eastern-alt" {
    include "am(eastern)"
    name[Group1]="Armenian (alt. eastern)";

	// This replicates the Windows XP keyboard layout for Eastern
	// Armenian exactly (including the bug), except:
 	// AE01 (the colon) has been replaced with the Armenian_full_stop and
	// capital AE07 (ken) with the Armenian ligature ew

    key <LatG> {	[ Armenian_ke,  	Armenian_KE ]	};
    key <LatC> {	[ Armenian_gim,  	Armenian_GIM ]	};
};
// Based on the Latvian and GB keyboard maps.

default partial alphanumeric_keys modifier_keys
xkb_symbols "basic" {

    // Describes the differences between an en_US layout
    // and a South African layout with dead keys.
    // By Dwayne Bailey (dwayne@translate.org.za).

    include "latin"

    name[Group1]="English (South Africa)";

    key <TLDE>  { [     grave, asciitilde,  dead_grave                ] };
    key <AE02>  { [         2,         at,         yen                ] };
    key <AE03>  { [         3, numbersign,    sterling                ] };
    key <AE04>  { [         4,     dollar,      dollar                ] };
    key <AE05>  { [         5,    percent,    EuroSign                ] };
    key <AE06>  { [         6,asciicircum, dead_circumflex            ] };

    key <AD03>  { [         e,          E,  ediaeresis,    Ediaeresis ] };
    key <AD04>  { [         r,          R, ecircumflex,   Ecircumflex ] };
    key <AD05>  { [         t,          T,       U1e71,         U1e70 ] };
    key <AD06>  { [         y,          Y, ucircumflex,   Ucircumflex ] };
    key <AD07>  { [         u,          U,  udiaeresis,    Udiaeresis ] };
    key <AD08>  { [         i,          I,  idiaeresis,    Idiaeresis ] };
    key <AD09>  { [         o,          O,  odiaeresis,    Odiaeresis ] };
    key <AD10>  { [         p,          P, ocircumflex,   Ocircumflex ] };

    key <AC01>  { [         a,          A,  adiaeresis,    Adiaeresis ] };
    key <AC02>  { [         s,          S,      scaron,        Scaron ] };
    key <AC03>  { [         d,          D,       U1e13,         U1e12 ] };
    key <AC09>  { [         l,          L,       U1e3d,         U1e3c ] };
    key <AC10>  { [ semicolon,      colon, dead_diaeresis             ] };
    key <AC11>  { [apostrophe,   quotedbl,  dead_acute                ] };

    key <AB06>  { [         n,          N,       U1e4b,         U1e4a ] };
    key <AB07>  { [         m,          M,       U1e45,         U1e44 ] };
    key <AB09>  { [    period,    greater, dead_abovedot              ] };

    include "level3(ralt_switch)"
};
// Eliminate CapsLock, making it another Ctrl.
partial modifier_keys
xkb_symbols "nocaps" {
    replace key <CAPS> { [ Control_L, Control_L ] };
    modifier_map  Control { <CAPS>, <LCTL> };
};

// Make the left Ctrl key a left Meta.
xkb_symbols "lctrl_meta" {
    replace key <LCTL> { [ Meta_L ] };
    modifier_map  Mod4 { <LCTL> };
};

// Swap the functions of the CapsLock key and the left Ctrl key.
partial modifier_keys
xkb_symbols "swapcaps" {
    replace key <CAPS> { [ Control_L ] };
    replace key <LCTL> { [ Caps_Lock ] };
    modifier_map Control { <CAPS> };
    modifier_map  Lock { <LCTL> };
};

// Swap the functions of the CapsLock key and the left Ctrl key,
// but make the Ctrl key a 'Hyper' modifier
partial modifier_keys
xkb_symbols "swapcaps_hyper" {
    replace key <CAPS> { [ Control_L ] };
    replace key <LCTL> { [ Hyper_L ] };
    modifier_map Control { <CAPS> };
    modifier_map Mod3 { <LCTL> };
};

// Set CapsLock to left Ctrl and left Ctrl to switch layout.
partial modifier_keys
xkb_symbols "swapcaps_and_switch_layout" {
    replace key <CAPS> { [ Control_L ] };
    replace key <LCTL> { [ ISO_Next_Group ] };
    modifier_map Control { <CAPS> };
    modifier_map  Lock { <LCTL> };
};

// Move Ctrl to the leftmost key on the middle row and CapsLock to the
// leftmost key on the bottom row.  Only works if the geometry or keycodes
// file has defined appropriate aliases for the keys in question.
partial modifier_keys
xkb_symbols "ac_ctrl" {
    replace key <AC00> { [ Control_L ] };
    replace key <AA00> { [ Caps_Lock ] };
    modifier_map  Control { <AC00> };
    modifier_map  Lock    { <AA00> };
};

// Move Ctrl to the leftmost key on the bottom row and CapsLock to the
// leftmost key on the middle row.  Only works if the geometry or keycodes
// file has defined appropriate aliases for the keys in question.
partial modifier_keys
xkb_symbols "aa_ctrl" {
    replace key <AA00> { [ Control_L ] };
    replace key <AC00> { [ Caps_Lock ] };
    modifier_map  Control { <AA00> };
    modifier_map  Lock    { <AC00> };
};

// Right Ctrl functions as another right Alt.
partial modifier_keys
xkb_symbols "rctrl_ralt" {
    key <RCTL> { symbols[Group1]= [ Alt_R ] };
    modifier_map Mod1{ <RCTL> };
};

// Menu key functions as another right Ctrl.
partial modifier_keys
xkb_symbols "menu_rctrl" {
    replace key <MENU> { [ Control_R, Control_R ] };
    modifier_map Control { Control_L, <MENU> };
};

// Right Alt key functions as another right Ctrl.
partial modifier_keys
xkb_symbols "ralt_rctrl" {
    replace key <RALT> { type[Group1] = "TWO_LEVEL",
                         symbols[Group1] = [ Control_R, Control_R ] };
    modifier_map Control { <RALT> };
};

// Swap the functions of the left Alt key and the left Ctrl key.
partial modifier_keys
xkb_symbols "swap_lalt_lctl" {
    replace key <LALT> { [ Control_L, Control_L ] };
    replace key <LCTL> { [ Alt_L, Meta_L ] };
    modifier_map Mod1    { <LCTL> };
    modifier_map Control { <LALT> };
};

// Swap the functions of the left Win key and the left Ctrl key.
partial modifier_keys
xkb_symbols "swap_lwin_lctl" {
    replace key <LWIN> { [ Control_L ] };
    replace key <LCTL> { [ Super_L ] };
    modifier_map Mod4    { <LCTL> };
    modifier_map Control { <LWIN> };
};

// Swap the functions of the right Win key and the right Ctrl key.
partial modifier_keys
xkb_symbols "swap_rwin_rctl" {
    replace key <RWIN> { [ Control_R ] };
    replace key <RCTL> { [ Super_R ] };
    modifier_map Mod4    { <RCTL> };
    modifier_map Control { <RWIN> };
};

// Map Ctrl to the left Alt key, Alt to the left Win key,
// and Super to the left Ctrl key.
partial modifier_keys
xkb_symbols "swap_lalt_lctl_lwin" {
    replace key <LALT> { [ Control_L, Control_L ] };
    replace key <LWIN> { [ Alt_L, Meta_L ] };
    replace key <LCTL> { [ Super_L ] };
    modifier_map Mod1    { <LWIN> };
    modifier_map Mod4    { <LCTL> };
    modifier_map Control { <LALT> };
};
// Hellenic keyboard map for X.org
//
// Original version:
//   Kostas Gewrgiou <gewrgiou@imbc.gr>
// Heavily modified and maintained by:
//   Vasilis Vasaitis <vvas@hal.csd.auth.gr>
// Originally converted to single group form by:
//   Ivan Pascal <pascal@info.tsu.ru>

default partial alphanumeric_keys alternate_group
xkb_symbols "basic" {
	include "gr(simple)"

	name[Group1] = "Greek";

	include "eurosign(e)"
	include "eurosign(5)"
	include "kpdl(comma)"
	include "level3(ralt_switch)"

	key <AB01> { [       NoSymbol,       NoSymbol,          U037D,          U03FF ] };
	key <AB02> { [       NoSymbol,       NoSymbol,     rightarrow,      leftarrow ] };
	key <AB03> { [       NoSymbol,       NoSymbol,      copyright                 ] };
	key <AB04> { [       NoSymbol,       NoSymbol,          U03D6                 ] };
	key <AB05> { [       NoSymbol,       NoSymbol,          U03D0                 ] };
	key <AB06> { [       NoSymbol,       NoSymbol,          U0374,          U0375 ] };
	key <AB07> { [       NoSymbol,       NoSymbol,          U03FB,          U03FA ] };
	key <AB08> { [       NoSymbol,       NoSymbol,  guillemotleft                 ] };
	key <AB09> { [       NoSymbol,       NoSymbol, guillemotright, periodcentered ] };
	key <AC03> { [       NoSymbol,       NoSymbol,      downarrow,        uparrow ] };
	key <AC04> { [       NoSymbol,       NoSymbol,          U03D5                 ] };
	key <AC05> { [       NoSymbol,       NoSymbol,          U03DD,          U03DC ] };
	key <AC07> { [       NoSymbol,       NoSymbol,          U037C,          U03FE ] };
	key <AC08> { [       NoSymbol,       NoSymbol,          U03DF,          U03DE ] };
	key <AC09> { [       NoSymbol,       NoSymbol,          U03F2,          U03F9 ] };
	key <AC10> { [       NoSymbol,       NoSymbol,     dead_acute,     dead_psili ] };
	key <AC11> { [       NoSymbol,       NoSymbol,     dead_grave,     dead_dasia ] };
	key <AD01> { [       NoSymbol,       NoSymbol, periodcentered                 ] };
	key <AD02> { [       NoSymbol,       NoSymbol,          U03DB,          U03DA ] };
	key <AD04> { [       NoSymbol,       NoSymbol,     registered,          U03F1 ] };
	key <AD06> { [       NoSymbol,       NoSymbol,          U03D2,          U03D2 ] };
	key <AD07> { [       NoSymbol,       NoSymbol,          U03D1,          U03F4 ] };
	key <AD08> { [       NoSymbol,       NoSymbol,          U037B,          U03FD ] };
	key <AD10> { [       NoSymbol,       NoSymbol,          U03E1,          U03E0 ] };
	key <AD11> { [       NoSymbol,       NoSymbol,     dead_tilde,    dead_macron ] };
	key <AD12> { [       NoSymbol,       NoSymbol,      dead_iota,     dead_breve ] };
	key <AE01> { [       NoSymbol,       NoSymbol,       NoSymbol,    onesuperior ] };
	key <AE02> { [       NoSymbol,       NoSymbol,        onehalf,    twosuperior ] };
	key <AE03> { [       NoSymbol,       NoSymbol,       sterling,  threesuperior ] };
	key <AE04> { [       NoSymbol,       NoSymbol,     onequarter,  threequarters ] };
	key <AE06> { [       NoSymbol,       NoSymbol,          U03F0                 ] };
	key <AE07> { [       NoSymbol,       NoSymbol,          U03D7,          U03CF ] };
	key <AE08> { [       NoSymbol,       NoSymbol,          U20AF                 ] };
	key <AE10> { [       NoSymbol,       NoSymbol,         degree                 ] };
	key <AE11> { [       NoSymbol,       NoSymbol,      plusminus                 ] };
};

partial alphanumeric_keys alternate_group
xkb_symbols "simple" {

    include "gr(bare)"

    name[Group1] = "Greek (simple)";

    key <TLDE> { [        grave,  asciitilde ] }; // ` ~
    key <AE01> { [            1,      exclam ] }; // 1 !
    key <AE02> { [            2,          at ] }; // 2 @
    key <AE03> { [            3,  numbersign ] }; // 3 #
    key <AE04> { [            4,      dollar ] }; // 4 $
    key <AE05> { [            5,     percent ] }; // 5 %
    key <AE06> { [            6, asciicircum ] }; // 6 ^
    key <AE07> { [            7,   ampersand ] }; // 7 &
    key <AE08> { [            8,    asterisk ] }; // 8 *
    key <AE09> { [            9,   parenleft ] }; // 9 (
    key <AE10> { [            0,  parenright ] }; // 0 )
    key <AE11> { [        minus,  underscore ] }; // - _
    key <AE12> { [        equal,        plus ] }; // = +

    key <AD11> { [  bracketleft,   braceleft ] }; // [ {
    key <AD12> { [ bracketright,  braceright ] }; // ] }

    key <AC11> { [   apostrophe,    quotedbl ] }; // ' "

    key <AB08> { [        comma,        less ] }; // , <
    key <AB09> { [       period,     greater ] }; // . >
    key <AB10> { [        slash,    question ] }; // / ?
    key <BKSL> { [    backslash,         bar ] }; // \ |

    include "kpdl(comma)"
};

hidden partial alphanumeric_keys alternate_group
xkb_symbols "bare" {

    key <AD01> { [             semicolon,          colon ] }; // ; :
    key <AD02> { [ Greek_finalsmallsigma,    Greek_SIGMA ] }; // ς Σ
    key <AD03> { [         Greek_epsilon,  Greek_EPSILON ] }; // ε Ε
    key <AD04> { [             Greek_rho,      Greek_RHO ] }; // ρ Ρ
    key <AD05> { [             Greek_tau,      Greek_TAU ] }; // τ Τ
    key <AD06> { [         Greek_upsilon,  Greek_UPSILON ] }; // υ Υ
    key <AD07> { [           Greek_theta,    Greek_THETA ] }; // θ Θ
    key <AD08> { [            Greek_iota,     Greek_IOTA ] }; // ι Ι
    key <AD09> { [         Greek_omicron,  Greek_OMICRON ] }; // ο Ο
    key <AD10> { [              Greek_pi,       Greek_PI ] }; // π Π

    key <AC01> { [           Greek_alpha,    Greek_ALPHA ] }; // α Α
    key <AC02> { [           Greek_sigma,    Greek_SIGMA ] }; // σ Σ
    key <AC03> { [           Greek_delta,    Greek_DELTA ] }; // δ Δ
    key <AC04> { [             Greek_phi,      Greek_PHI ] }; // φ Φ
    key <AC05> { [           Greek_gamma,    Greek_GAMMA ] }; // γ Γ
    key <AC06> { [             Greek_eta,      Greek_ETA ] }; // η Η
    key <AC07> { [              Greek_xi,       Greek_XI ] }; // ξ Ξ
    key <AC08> { [           Greek_kappa,    Greek_KAPPA ] }; // κ Κ
    key <AC09> { [           Greek_lamda,    Greek_LAMDA ] }; // λ Λ
    key <AC10> { [            dead_acute, dead_diaeresis ] }; // ´ ¨

    key <AB01> { [            Greek_zeta,     Greek_ZETA ] }; // ζ Ζ
    key <AB02> { [             Greek_chi,      Greek_CHI ] }; // χ Χ
    key <AB03> { [             Greek_psi,      Greek_PSI ] }; // ψ Ψ
    key <AB04> { [           Greek_omega,    Greek_OMEGA ] }; // ω Ω
    key <AB05> { [            Greek_beta,     Greek_BETA ] }; // β Β
    key <AB06> { [              Greek_nu,       Greek_NU ] }; // ν Ν
    key <AB07> { [              Greek_mu,       Greek_MU ] }; // μ Μ

    key <LSGT> { [         guillemotleft, guillemotright ] }; // « »
};

// ===========================================================================================
// Greek - Extended                                                                          |
// ===========================================================================================
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━━┓
// │ ~   │ !   │ @   │ #   │ $   │ %   │ ^   │ &   │ *   │ (   │ )   │ _   │ +   ┃Backspace  ┃
// │ `   │ 1   │ 2   │ 3 £ │ 4   │ 5 € │ 6   │ 7   │ 8   │ 9   │ 0 ° │ - ± │ =   ┃           ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━━━┫
// ┃       ┃ :   │ Σ   │ Ε   │ Ρ   │ Τ   │ Υ   │ Θ   │ Ι   │ Ο   │ Π   │ {   │ }   ┃Enter    ┃
// ┃Tab    ┃ ; · │ ς   │ ε € │ ρ ® │ τ   │ υ   │ θ   │ ι   │ ο   │ π   │ [   │ ]   ┃         ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓        ┃
// ┃Caps    ┃ Α   │ Σ   │ Δ   │ Φ   │ Γ   │ Η   │ Ξ   │ Κ   │ Λ   │ ¨   │ "   │ |   ┃        ┃
// ┃Lock    ┃ α   │ σ   │ δ   │ φ   │ γ   │ η   │ ξ   │ κ   │ λ   │ ´   │ '   │ \   ┃        ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━━━┫
// ┃       ┃ »   │ Ζ   │ Χ   │ Ψ   │ Ω   │ Β   │ Ν   │ Μ   │ <   │ >   │ ?   ┃               ┃
// ┃Shift  ┃ «   │ ζ   │ χ   │ ψ © │ ω   │ β   │ ν   │ μ   │ , « │ . » │ /   ┃Shift          ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴──┲━━┷━━━━┳┷━━━━━┻┳━━━━━━━┳━━━━━━┫
// ┃       ┃       ┃       ┃                                  ┃       ┃       ┃       ┃      ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃              Space               ┃AltGr  ┃Meta   ┃Menu   ┃Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹──────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━┛

partial alphanumeric_keys alternate_group
xkb_symbols "extended" {

    include "gr(simple)"

    name[Group1] = "Greek (extended)";

    key.type[Group1] = "THREE_LEVEL";

    key <AE03> { [ NoSymbol, NoSymbol,       sterling ] }; // £
    key <AE10> { [ NoSymbol, NoSymbol,         degree ] }; // °
    key <AE11> { [ NoSymbol, NoSymbol,      plusminus ] }; // ±

    key <AD01> { [ NoSymbol, NoSymbol, periodcentered ] }; // ·
    key <AD04> { [ NoSymbol, NoSymbol,     registered ] }; // ®

    key <AB03> { [ NoSymbol, NoSymbol,      copyright ] }; // ©
    key <AB08> { [ NoSymbol, NoSymbol,  guillemotleft ] }; // «
    key <AB09> { [ NoSymbol, NoSymbol, guillemotright ] }; // »

    include "level3(ralt_switch)"
    include "eurosign(5)"
    include "eurosign(e)"
};

partial alphanumeric_keys alternate_group
xkb_symbols "polytonic" {

    include "gr(extended)"

    name[Group1] = "Greek (polytonic)";

    key.type[Group1] = "THREE_LEVEL";

    key <AD11> { [ dead_tilde, dead_diaeresis, dead_macron ] }; // ~ ¨ ¯
    key <AD12> { [  dead_iota,     VoidSymbol,  dead_breve ] }; // ͺ   ˘

    key <AC10> { [ dead_acute, dead_psili  ] }; // ´ ̓ 
    key <AC11> { type[Group1]="FOUR_LEVEL",
                 [ dead_grave, dead_dasia, apostrophe, quotedbl  ] };
                 // ` ̔  ' "
};

partial alphanumeric_keys alternate_group
xkb_symbols "nodeadkeys" {

    include "gr(simple)"

    name[Group1] = "Greek (no dead keys)";

    key <AC10> { [ semicolon, colon ] }; // ; :
};

// Greek layout rearranged as Colemak

partial alphanumeric_keys alternate_group
xkb_symbols "colemak" {

    include "gr(basic)"

    name[Group1] = "Greek (Colemak)";

    key <AD01> { [             semicolon,          colon, periodcentered             ] };
    key <AD02> { [ Greek_finalsmallsigma,    Greek_SIGMA,          U03DB,      U03DA ] };
    key <AD03> { [             Greek_phi,      Greek_PHI,          U03D5             ] };
    key <AD04> { [              Greek_pi,       Greek_PI,          U03E1,      U03E0 ] };
    key <AD05> { [           Greek_gamma,    Greek_GAMMA,          U03DD,      U03DC ] };
    key <AD06> { [              Greek_xi,       Greek_XI,          U037C,      U03FE ] };
    key <AD07> { [           Greek_lamda,    Greek_LAMDA,          U03F2,      U03F9 ] };
    key <AD08> { [           Greek_theta,    Greek_THETA,          U03D1,      U03F4 ] };
    key <AD09> { [         Greek_upsilon,  Greek_UPSILON,          U03D2,      U03D2 ] };
    key <AD10> { [            dead_acute, dead_diaeresis,     dead_acute, dead_psili ] };

    key <AC01> { [           Greek_alpha,    Greek_ALPHA                             ] };
    key <AC02> { [             Greek_rho,      Greek_RHO,     registered,      U03F1 ] };
    key <AC03> { [           Greek_sigma,    Greek_SIGMA                             ] };
    key <AC04> { [             Greek_tau,      Greek_TAU                             ] };
    key <AC05> { [           Greek_delta,    Greek_DELTA,      downarrow,    uparrow ] };
    key <AC06> { [             Greek_eta,      Greek_ETA                             ] };
    key <AC07> { [              Greek_nu,       Greek_NU,          U0374,      U0375 ] };
    key <AC08> { [         Greek_epsilon,  Greek_EPSILON,       EuroSign             ] };
    key <AC09> { [            Greek_iota,     Greek_IOTA,          U037B,      U03FD ] };
    key <AC10> { [         Greek_omicron,  Greek_OMICRON                             ] };

    key <AB01> { [            Greek_zeta,     Greek_ZETA,          U037D,      U03FF ] };
    key <AB02> { [             Greek_chi,      Greek_CHI,     rightarrow,  leftarrow ] };
    key <AB03> { [             Greek_psi,      Greek_PSI,      copyright             ] };
    key <AB04> { [           Greek_omega,    Greek_OMEGA,          U03D6             ] };
    key <AB05> { [            Greek_beta,     Greek_BETA,          U03D0             ] };
    key <AB06> { [           Greek_kappa,    Greek_KAPPA,          U03DF,      U03DE ] };
    key <AB07> { [              Greek_mu,       Greek_MU,          U03FB,      U03FA ] };

    key <CAPS> { [             BackSpace,      BackSpace,      BackSpace,  BackSpace ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/gr(sun_type6)"
};
// based on
// albanian keyboard layout
// done by Pablo Saratxaga <pablo@mandrakesoft.com>
//

default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin(type3)"

    name[Group1]="Albanian";

    key <AE01>	{ [         1,     exclam,   asciitilde,   dead_tilde ]	};
    key <AE02>	{ [         2,   quotedbl,   dead_caron,    oneeighth ]	};
    key <AE03>	{ [         3, numbersign, dead_circumflex,  sterling ]	};
    key <AE04>	{ [         4,     dollar,   dead_breve,       dollar ]	};
    key <AE05>	{ [         5,    percent, dead_abovering, threeeighths] };
    key <AE06>	{ [         6, asciicircum,  dead_ogonek, fiveeighths ]	};
    key <AE07>	{ [         7,  ampersand,        grave,   dead_grave ]	};
    key <AE08>	{ [         8,   asterisk, dead_abovedot,   trademark ]	};
    key <AE09>	{ [         9,  parenleft,   dead_acute,    plusminus ]	};
    key <AE10>	{ [         0, parenright, dead_doubleacute,   degree ]	};
    key <AE11>	{ [     minus, underscore, dead_diaeresis, questiondown] };

    key <AD03>	{ [         e,          E,     EuroSign,     EuroSign ]	};
    key <AD11>	{ [  ccedilla,   Ccedilla,     division, dead_abovering ] };
    key <AD12>	{ [        at, apostrophe,     multiply,  dead_macron ]	};

    key <AC02>	{ [         s,          S,      dstroke,      section ]	};
    key <AC03>	{ [         d,          D,      Dstroke,          ETH ]	};
    key <AC10>	{ [ediaeresis, Ediaeresis,   dollar, dead_doubleacute ]	};
    key <AC11>	{ [bracketleft,  braceleft,      ssharp,   dead_caron ]	};
    key <TLDE>	{ [ backslash,        bar,      notsign,      notsign ]	};

    key <BKSL>	{ [bracketright, braceright,   currency,   dead_breve ]	};
    key <AB08>	{ [     comma,  semicolon,         less,     multiply ]	};
    key <AB09>	{ [    period,      colon,      greater,     division ]	};
    key <AB10>	{ [     slash,   question, dead_belowdot, dead_abovedot ] };

    include "level3(ralt_switch)"
};


// Tastiera Plisi (plisi.org)
// by Getoar Mjeku <gm@getoar.com>
//

partial alphanumeric_keys 
xkb_symbols "plisi" {

 include "us"

 name[Group1]= "Albanian (Plisi)";

 key <TLDE> { [ grave, asciitilde ] };
 key <AE01> { [ 1, exclam, U2019 ] };
 key <AE02> { [ 2, at, twosuperior ] };
 key <AE03> { [ 3, numbersign, threesuperior ] };
 key <AE04> { [ 4, dollar, EuroSign ] };
 key <AE05> { [ 5, percent, exclamdown ] };
 key <AE06> { [ 6, asciicircum, questiondown ] };
 key <AE07> { [ 7, ampersand, braceleft ] };
 key <AE08> { [ 8, asterisk, braceright ] };
 key <AE09> { [ 9, parenleft, bracketleft ] };
 key <AE10> { [ 0, parenright, bracketright ] };
 key <AE11> { [ minus, underscore, U00AD ] };
 key <AE12> { [ equal, plus, registered ] };

 key <AD01> { [ q, Q, dead_grave ] };
 key <AD02> { [ w, W, dead_caron ] };
 key <AD03> { [ e, E, dead_circumflex ] };
 key <AD04> { [ r, R, dead_diaeresis ] };
 key <AD05> { [ t, T, dead_macron ] };
 key <AD06> { [ y, Y, dead_doubleacute ] };
 key <AD07> { [ u, U, dead_breve ] };
 key <AD08> { [ i, I, dead_tilde, U0131 ] };
 key <AD09> { [ o, O, dead_abovering ] };
 key <AD10> { [ p, P, dead_abovedot ] };
 key <AD11> { [ ccedilla, Ccedilla, dead_acute ] };
 key <AD12> { [ greater, less, U031C ] };

 key <AC01> { [ a, A, U2264 ] };
 key <AC02> { [ s, S, U2265 ] };
 key <AC03> { [ d, D, U2300 ] };
 key <AC04> { [ f, F, U2032 ] };
 key <AC05> { [ g, G, U2033 ] };
 key <AC06> { [ h, H, section ] };
 key <AC07> { [ j, J, dead_cedilla ] };
 key <AC08> { [ k, K, dead_belowcomma ] };
 key <AC09> { [ l, L, dead_ogonek ] };
 key <AC10> { [ ediaeresis, Ediaeresis, dead_belowdot ] };
 key <AC11> { [ apostrophe, quotedbl ] };

 key <AB01> { [ z, Z, guillemotleft ] };
 key <AB02> { [ x, X, guillemotright ] };
 key <AB03> { [ c, C, copyright ] };
 key <AB04> { [ v, V, U2039 ] };
 key <AB05> { [ b, B, U203A ] };
 key <AB06> { [ n, N, endash ] };
 key <AB07> { [ m, M, emdash, U00B5 ] };
 key <AB08> { [ comma, semicolon, U02BB ] };
 key <AB09> { [ period, colon, U200C ] };
 key <AB10> { [ slash, question, U2011 ] };

 key <BKSL> { [ backslash, bar, U031B ] };

 include "level3(ralt_switch)"
};

// EXTRAS:

// Veqilharxhi layout (https://arberisht.wordpress.com/2019/09/13/an-xkb-layout-for-the-veqilharxhi-alphabet/)
// by Arbër Boriçi (illyriensis@protonmail.com)
// 2019-09-12


partial alphanumeric_keys
xkb_symbols "veqilharxhi" {

    include "us"

    name[Group1]="Albanian (Veqilharxhi)";

    // QWERTYUIOP
    key <AD01>	{ [ U105B0, U10589 ] }; // 𐖰, 𐖉
    key <AD02>	{ [ U1059F, U10578, w, W ] }; // 𐖟, 𐕸, w, W
    key <AD03>	{ [ U1059E, U10577 ] }; // 𐖞, 𐕷
    key <AD04>	{ [ U105B1, U1058A, U105B2, U1058B ] }; // 𐖱, 𐖊, 𐖲, 𐖋
    key <AD05>	{ [ U105B5, U1058E, U105B6, U1058F ] }; // 𐖵, 𐖎, 𐖶, 𐖏
    key <AD06>	{ [ U105BB, U10594 ] }; // 𐖻, 𐖔
    key <AD07>	{ [ U105B7, U10590 ] }; // 𐖷, 𐖐
    key <AD08>	{ [ U105A5, U1057E ] }; // 𐖥, 𐕾
    key <AD09>	{ [ U105AE, U10587 ] }; // 𐖮, 𐖇
    key <AD10>	{ [ U105AF, U10588 ] }; // 𐖯, 𐖈

    // ASDFGHJKL
    key <AC01>	{ [ U10597, U10570 ] }; // 𐖗, 𐕰
    key <AC02>	{ [ U105B3, U1058C, U105B4, U1058D ] }; // 𐖳, 𐖌, 𐖴, 𐖍
    key <AC03>	{ [ U1059C, U10575, U1059D, U10576 ] }; // 𐖜, 𐕵, 𐖝, 𐕶
    key <AC04>	{ [ U105A0, U10579 ] }; // 𐖠, 𐕹
    key <AC05>	{ [ U105A1, U1057A, U105A2, U1057B ] }; // 𐖡, 𐕺, 𐖢, 𐕻
    key <AC06>	{ [ U105A3, U1057C ] }; // 𐖣, 𐕼
    key <AC07>	{ [ U105A7, U10580 ] }; // 𐖧, 𐖀
    key <AC08>	{ [ U105A8, U10581 ] }; // 𐖨, 𐖁
    key <AC09>	{ [ U105A9, U10582, U105AA, U10583 ] }; // 𐖩, 𐖂, 𐖪, 𐖃

    // ZXCVBNM
    key <AB01>	{ [ U105BC, U10595, U105BD, U10596 ] }; // 𐖼, 𐖕, 𐖽, 𐖖
    key <AB02>	{ [ U105B9, U10592, U105BA, U10593 ] }; // 𐖹, 𐖒, 𐖺, 𐖓
    key <AB03>	{ [ U1059A, U10573, U1059B, U10574 ] }; // 𐖚, 𐕳, 𐖛, 𐕴
    key <AB04>	{ [ U105B8, U10591 ] }; // 𐖸, 𐖑
    key <AB05>	{ [ U10598, U10571 ] }; // 𐖘, 𐕱
    key <AB06>	{ [ U105AC, U10585, U105AD, U10586 ] }; // 𐖬, 𐖅, 𐖭, 𐖆
    key <AB07>	{ [ U105AB, U10584 ] }; // 𐖫, 𐖄

    include "level3(ralt_switch)"
};
//
// XKB symbol :: National Bangla/Bengali Standard Keyboard Layout for Bangladesh
// Ref: http://www.bcc.net.bd/keyboard/bsti_kb_specification.pdf
//
// Author: Jamil Ahmed <jamil at bengalinux.org>
// Created: 18-12-2005
// Last Updated: 08-01-2006
// Version: 6.01.3
//
// Issues:
// <AC08> Khanda-Ta is given U-09CE; But BCC had U-09BA
// <AC07> U-09BB is added though it is not allocated in Original Unicode
// <AE06> U-09B3 is added though it is not allocated in Original Unicode
// 3 Conjunct characters are not included
//

default partial alphanumeric_keys
xkb_symbols "basic" {
   name[Group1]= "Bangla";
   key <ESC>  { [ Escape ] };

// numbers
   key <TLDE> { [ grave,	asciitilde,	voidsymbol,	voidsymbol ] };
   key <AE01> { [ 0x10009E7,	exclam,		0x10009F4,	voidsymbol ] };
   key <AE02> { [ 0x10009E8,	at,		0x10009F5,	voidsymbol ] };
   key <AE03> { [ 0x10009E9,	numbersign,	0x10009F6,	voidsymbol ] };
   key <AE04> { [ 0x10009EA,	dollar,		0x10009F3,	0x10009F2  ] };
   key <AE05> { [ 0x10009EB,	percent,	0x10009F7,	voidsymbol ] };
   key <AE06> { [ 0x10009EC,	asciicircum,	0x10009F8,	0x10009B3  ] };
   key <AE07> { [ 0x10009ED,	ampersand,	0x1000902,	voidsymbol ] };
   key <AE08> { [ 0x10009EE,	asterisk,	voidsymbol,	voidsymbol ] };
   key <AE09> { [ 0x10009EF,	parenleft,	voidsymbol,	voidsymbol ] };
   key <AE10> { [ 0x10009E6,	parenright,	0x10009F9,	voidsymbol ] };
   key <AE11> { [ minus,	underscore,	0x100200C,	voidsymbol ] };
   key <AE12> { [ equal,	plus,		0x100200D,	voidsymbol ] };
   key <BKSP> { [ BackSpace ] };

// tab, q to ] 
   key <TAB>  { [ Tab,  ISO_Left_Tab ] };
   key <AD01> { [ 0x1000999,	0x1000982,	0x10009E2,	0x10009E3  ] };
   key <AD02> { [ 0x10009AF,	0x10009DF,	voidsymbol,	voidsymbol ] };
   key <AD03> { [ 0x10009A1,	0x10009A2,	0x10009C4,	voidsymbol ] };
   key <AD04> { [ 0x10009AA,	0x10009AB,	voidsymbol,	voidsymbol ] };
   key <AD05> { [ 0x100099F,	0x10009A0,	voidsymbol,	voidsymbol ] };
   key <AD06> { [ 0x100099A,	0x100099B,	voidsymbol,	voidsymbol ] };
   key <AD07> { [ 0x100099C,	0x100099D,	voidsymbol,	voidsymbol ] };
   key <AD08> { [ 0x10009B9,	0x100099E,	0x10009BD,	voidsymbol ] };
   key <AD09> { [ 0x1000997,	0x1000998,	voidsymbol,	voidsymbol ] };
   key <AD10> { [ 0x10009DC,	0x10009DD,	voidsymbol,	voidsymbol ] };
   key <AD11> { [ bracketleft,	braceleft,	voidsymbol,	voidsymbol ] };
   key <AD12> { [ bracketright,	braceright,	voidsymbol,	voidsymbol ] };
   key <RTRN> { [ Return ] };

// caps, a to ' 
// key <CAPS> { [ Caps_Lock ] };
   key <AC01> { [ 0x10009C3,	0x10009D7,	0x100098B,	0x10009E0  ] };
   key <AC02> { [ 0x10009C1,	0x10009C2,	0x1000989,	0x100098A  ] };
   key <AC03> { [ 0x10009BF,	0x10009C0,	0x1000987,	0x1000988  ] };
   key <AC04> { [ 0x10009AC,	0x10009AD,	0x10009F0,	0x10009F1  ] };
   key <AC05> { [ 0x10009CD,	0x1000964,	0x1000965,	voidsymbol ] };
   key <AC06> { [ 0x10009BE,	0x1000985,	0x1000986,	voidsymbol ] };
   key <AC07> { [ 0x1000995,	0x1000996,	0x10009BB,	voidsymbol ] };
   key <AC08> { [ 0x10009A4,	0x10009A5,	0x10009CE,	voidsymbol ] };
   key <AC09> { [ 0x10009A6,	0x10009A7,	0x100098C,	0x10009E1  ] };
   key <AC10> { [ semicolon,	colon,		voidsymbol,	voidsymbol ] };
   key <AC11> { [ apostrophe,	quotedbl,	voidsymbol,	voidsymbol ] };

// shift, z to /
// key <LFSH> { [ Shift_L ] };
   key <AB01> { [ 0x1000981,	0x1000983,	0x10009FA,	voidsymbol ] };
   key <AB02> { [ 0x10009CB,	0x10009CC,	0x1000993,	0x1000994  ] };
   key <AB03> { [ 0x10009C7,	0x10009C8,	0x100098F,	0x1000990  ] };
   key <AB04> { [ 0x10009B0,	0x10009B2,	voidsymbol,	voidsymbol ] };
   key <AB05> { [ 0x10009A8,	0x10009A3,	voidsymbol,	voidsymbol ] };
   key <AB06> { [ 0x10009B8,	0x10009B7,	voidsymbol,	voidsymbol ] };
   key <AB07> { [ 0x10009AE,	0x10009B6,	voidsymbol,	voidsymbol ] };
   key <AB08> { [ comma,	less,		voidsymbol,	voidsymbol ] };
   key <AB09> { [ period,	greater,	0x10009BC,	voidsymbol ] };
   key <AB10> { [ slash,	question,	voidsymbol,	voidsymbol ] };
   key <BKSL> { [ backslash,	bar,		voidsymbol,	voidsymbol ] };

// third level with right-Alt
    include "level3(ralt_switch)"
};


//
// XKB symbol :: Probhat Bangla/Bengali Keyboard Layout
// Ref: www.ankurbangla.org/images/probhat_layout.png
//

xkb_symbols "probhat" {
    include "in(ben_probhat)"
    name[Group1]= "Bangla (Probhat)";
};
// Irish keyboard map

// Support for Irish (old and new orthography) and English
// Seamus O Ciardhuain <seoc@cnds.ucd.ie>  (19 December 2002)

// The general idea is to provide the characters in ISO 8859-1,
// ISO 8859-15, ISO 8859-14, CP1252 and "Extended Latin-8".
// However, not all are accessible directly because there aren't
// enough keys; some need deadkeys to access them, others the 
// "Multi_key" compose sequences.

// Designed to be similar to the layouts used on Windows
// and the Macintosh.

// Everything is in Group 1 to be compatible with the
// multi-layout keyboard support in XFree86 4.3.

// The basic layout is a modern keyboard, but dotted consonants are
// accessible using a deadkey (AltGr+H or AltGr+W).
// If a proper Clo Gaelach keyboard is needed, then use the layout
// defined below as ie(CloGaelach), which gives dotted consonants
// without use of a deadkey.


default partial alphanumeric_keys
xkb_symbols "basic" {

    // Modern keyboard for Irish and English
    //  - acute-accented vowels as AltGr+vowel and AltGr+Shift+vowel
    //  - euro currency sign as AltGr+4
    //  - Comhartha Agus (Tironian Sign Et) as AltGr+Shift+7
    //  - non-breaking space as AltGr+Space and AltGr+Shift+Space
    //  - matches hardware (keys and engraved symbols) for Irish keyboards

    name[Group1] = "Irish";

    //
    // Numeric row `1234567890-=
    //
    key <TLDE> { [        grave,     notsign,            brokenbar,             NoSymbol ] };
    key <AE01> { [            1,      exclam,           exclamdown,          onesuperior ] };
    key <AE02> { [            2,    quotedbl,            trademark,          twosuperior ] };
    key <AE03> { [            3,    sterling,            copyright,        threesuperior ] };
    key <AE04> { [            4,      dollar,             EuroSign,                 cent ] };
    key <AE05> { [            5,     percent,              section,               dagger ] };
    key <AE06> { [            6, asciicircum,      dead_circumflex,            0x1002030 ] };
                                                                         // per thousand
    key <AE07> { [            7,   ampersand,            paragraph,            0x100204A ] };
                                                                          // Tironian Et
    key <AE08> { [            8,    asterisk,       dead_diaeresis,   enfilledcircbullet ] };
    key <AE09> { [            9,   parenleft,          ordfeminine,       periodcentered ] };
    key <AE10> { [            0,  parenright,            masculine,               degree ] };
    key <AE11> { [        minus,  underscore,               endash,               emdash ] };
    key <AE12> { [        equal,        plus,             notequal,            plusminus ] };

    //
    // QWERTYUIOP[]
    //
    key <AD01> { [            q,           Q,                   oe,                   OE ] };
    key <AD02> { [            w,           W,        dead_abovedot,        dead_abovedot ] };
    key <AD03> { [            e,           E,               eacute,               Eacute ] };
    key <AD04> { [            r,           R,           registered,            0x1002030 ] };
                                                                         // per thousand
    key <AD05> { [            t,           T,                thorn,                THORN ] };
    key <AD06> { [            y,           Y,                  yen,                   mu ] };
    key <AD07> { [            u,           U,               uacute,               Uacute ] };
    key <AD08> { [            i,           I,               iacute,               Iacute ] };
    key <AD09> { [            o,           O,               oacute,               Oacute ] };
    key <AD10> { [            p,           P,   singlelowquotemark,             NoSymbol ] };
    key <AD11> { [  bracketleft,   braceleft,  leftdoublequotemark, rightdoublequotemark ] };
    key <AD12> { [ bracketright,  braceright,  leftsinglequotemark, rightsinglequotemark ] };

    //
    // ASDFGHJKL;'#
    //
    key <AC01> { [          a,             A,               aacute,               Aacute ] };
    key <AC02> { [          s,             S,               ssharp,            0x1001E9E ] };
    key <AC03> { [          d,             D,                  eth,                  ETH ] };
    key <AC04> { [          f,             F,            0x1000192,             NoSymbol ] };
                                                    // f with hook
    key <AC05> { [          g,             G,            copyright,             NoSymbol ] };
    key <AC06> { [          h,             H,        dead_abovedot,        dead_abovedot ] };
    key <AC07> { [          j,             J,             idotless,           onequarter ] };
    key <AC08> { [          k,             K,       dead_abovering,              onehalf ] };
    key <AC09> { [          l,             L,                acute,        threequarters ] };
    key <AC10> { [  semicolon,         colon,             ellipsis,         doubledagger ] };
    key <AC11> { [ apostrophe,            at,                   ae,                   AE ] };
    key <BKSL> { [ numbersign,    asciitilde,        guillemotleft,       guillemotright ] };


    //
    // \ZXCVBNM,./
    //
    key <LSGT> { [  backslash,           bar,           dead_grave,           dead_acute ] };
    key <AB01> { [          z,             Z,     leftanglebracket,    rightanglebracket ] };
    key <AB02> { [          x,             X,             multiply,          approximate ] };
    key <AB03> { [          c,             C,         dead_cedilla,              cedilla ] };
    key <AB04> { [          v,             V,           dead_caron,             NoSymbol ] };
    key <AB05> { [          b,             B,            diaeresis,             NoSymbol ] };
    key <AB06> { [          n,             N,           dead_tilde,             NoSymbol ] };
    key <AB07> { [          m,             M,               macron,             NoSymbol ] };
    key <AB08> { [      comma,          less,        lessthanequal,   doublelowquotemark ] };
    key <AB09> { [     period,       greater,     greaterthanequal,   singlelowquotemark ] };
    key <AB10> { [      slash,      question,             division,         questiondown ] };


    key <SPCE> { [      space,         space,         nobreakspace,         nobreakspace ] };

    include "level3(ralt_switch)"

    // NB: putting Shift+<RALT> as Multi_key gives odd behaviour since the
    // order of pressing keys affects the result.

    include "compose(rwin)"
};

partial alphanumeric_keys
xkb_symbols "CloGaelach" {

    // Adds support for Clo Gaelach (old orthography for Irish).
    // Changes from "basic":
    //  - dotted consonants as AltGr+consonant or AltGr+Shift+consonant (TPSDFGCBM)
    //  - long lowercase r as AltGr+R
    //  - long lowercase s as AltGr+Z
    //  - long lowercase s dotted as AltGr+Shift+Z
    //  - some symbols moved around to retain them
    //  - several characters unlikely to be used are lost
    // The long letters are needed only where the font provides
    // both the long and short forms as different glyphs.

    include "ie(basic)"

    name[Group1] = "CloGaelach";

    key <TLDE> { [     grave, notsign,  brokenbar,       ssharp ] };
    key <AD04> { [         r,       R,  0x100027C,   registered ] };
                                        // long r
    key <AD05> { [         t,       T,  tabovedot,    Tabovedot ] };
    key <AD10> { [         p,       P,  pabovedot,    Pabovedot ] };

    key <AC02> { [         s,       S,  sabovedot,    Sabovedot ] };
    key <AC03> { [         d,       D,  dabovedot,    Dabovedot ] };
    key <AC04> { [         f,       F,  fabovedot,    Fabovedot ] };
    key <AC05> { [         g,       G,  gabovedot,    Gabovedot ] };

    key <AB01> { [         z,       Z,  0x100017F,    0x1001E9B ] };
                                        // long s,   long s dot
    key <AB03> { [         c,       C,  cabovedot,    Cabovedot ] };
    key <AB05> { [         b,       B,  babovedot,    Babovedot ] };
    key <AB07> { [         m,       M,  mabovedot,    Mabovedot ] };

    key <LSGT> { [ backslash,     bar, dead_grave, dead_cedilla ] };
};

partial alphanumeric_keys
xkb_symbols "UnicodeExpert" {

// This should eventually be a "Unicode Expert" layout like the Mac one.

    name[Group1] = "Irish (UnicodeExpert)";

    //
    // Numeric row `1234567890-=
    //
    key <TLDE> { [        grave,     notsign,        0x10000A6,        0x10000A6 ] };
                                                 // broken bar
    key <AE01> { [            1,      exclam,         NoSymbol,         NoSymbol ] };
    key <AE02> { [            2,    quotedbl, dead_doubleacute, dead_doubleacute ] };
    key <AE03> { [            3,    sterling,         NoSymbol,         NoSymbol ] };
    key <AE04> { [            4,      dollar,         EuroSign,         EuroSign ] };
    key <AE05> { [            5,     percent,         NoSymbol,         NoSymbol ] };
    key <AE06> { [            6, asciicircum,  dead_circumflex,  dead_circumflex ] };
    key <AE07> { [            7,   ampersand,        0x100204A,        0x100204A ] };
                                                // Tironian Et
    key <AE08> { [            8,    asterisk,   dead_abovering,   dead_abovering ] };
    key <AE09> { [            9,   parenleft,       dead_breve,       dead_breve ] };
    key <AE10> { [            0,  parenright,      dead_ogonek,      dead_ogonek ] };
    key <AE11> { [        minus,  underscore,      dead_macron,      dead_macron ] };
    key <AE12> { [        equal,        plus,         NoSymbol,         NoSymbol ] };

    //
    // QWERTYUIOP[]
    //
    key <AD01> { [            q,           Q,        NoSymbol,       NoSymbol ] };
    key <AD02> { [            w,           W,        NoSymbol,       NoSymbol ] };
    key <AD03> { [            e,           E,          eacute,         Eacute ] };
    key <AD04> { [            r,           R,       0x100027C,      0x100027C ] };
                                                    // long r
    key <AD05> { [            t,           T,        NoSymbol,       NoSymbol ] };
    key <AD06> { [            y,           Y,        NoSymbol,       NoSymbol ] };
    key <AD07> { [            u,           U,          uacute,         Uacute ] };
    key <AD08> { [            i,           I,          iacute,         Iacute ] };
    key <AD09> { [            o,           O,          oacute,         Oacute ] };
    key <AD10> { [            p,           P,        NoSymbol,       NoSymbol ] };
    key <AD11> { [  bracketleft,   braceleft,       dead_hook,      dead_hook ] };
    key <AD12> { [ bracketright,  braceright,       dead_horn,      dead_horn ] };

    //
    // ASDFGHJKL;'#
    //
    key <AC01> { [          a,             A,          aacute,         Aacute ] };
    key <AC02> { [          s,             S,        NoSymbol,       NoSymbol ] };
    key <AC03> { [          d,             D,        NoSymbol,       NoSymbol ] };
    key <AC04> { [          f,             F,        NoSymbol,       NoSymbol ] };
    key <AC05> { [          g,             G,        NoSymbol,       NoSymbol ] };
    key <AC06> { [          h,             H,   dead_abovedot,  dead_abovedot ] };
    key <AC07> { [          j,             J,        NoSymbol,       NoSymbol ] };
    key <AC08> { [          k,             K,        NoSymbol,       NoSymbol ] };
    key <AC09> { [          l,             L,        NoSymbol,       NoSymbol ] };
    key <AC10> { [  semicolon,         colon,  dead_diaeresis, dead_diaeresis ] };
    key <AC11> { [ apostrophe,            at,      dead_acute,     dead_acute ] };
    key <BKSL> { [ numbersign,    asciitilde,      dead_tilde,     dead_tilde ] };

    //
    // \ZXCVBNM,./
    //
    key <LSGT> { [  backslash,           bar,      dead_grave,     dead_grave ] };
    key <AB01> { [          z,             Z,       0x100017F,      0x1001E9B ] };
                                                    // long s,     long s dot
    key <AB02> { [          x,             X,        NoSymbol,       NoSymbol ] };
    key <AB03> { [          c,             C,        NoSymbol,       NoSymbol ] };
    key <AB04> { [          v,             V,      dead_caron,     dead_caron ] };
    key <AB05> { [          b,             B,        NoSymbol,       NoSymbol ] };
    key <AB06> { [          n,             N,        NoSymbol,       NoSymbol ] };
    key <AB07> { [          m,             M,        NoSymbol,       NoSymbol ] };
    key <AB08> { [      comma,          less,    dead_cedilla,   dead_cedilla ] };
    key <AB09> { [     period,       greater,   dead_abovedot,  dead_abovedot ] };
    key <AB10> { [      slash,      question,   dead_belowdot,  dead_belowdot ] };

    key <SPCE> { [      space,         space,           space,   nobreakspace ] };

    include "level3(ralt_switch)"

    include "compose(rwin)"
};

//
// Ogham keyboard map for XFree86
//
// Seamus O Ciardhuain <seoc@cnds.ucd.ie> (17 December 2002)
//
// Ogham keyboard layout as recommended in I.S. 434:1999.
// Suitable for multi-layout xkbcomp.
// Character names are given as in the Unicode standard,
// range U+1680 to U+169F.

partial alphanumeric_keys
xkb_symbols "ogam" {

    name[Group1] = "Ogham";

    key.type[Group1] = "ONE_LEVEL";

    key <LSGT> { type[Group1]="TWO_LEVEL",
                 [ 0x100169B, 0x100169C ] };
                 // OGHAM FEATHER MARK, OGHAM REVERSED FEATHER MARK

    key <BKSL> { [ 0x1001680 ] }; // OGHAM SPACE MARK

    key <TLDE> { [ 0x100169C ] }; // OGHAM REVERSED FEATHER MARK

    key <SPCE> { [ space ] };

    //
    // Top Row QWERTYUIOP
    //
    key <AD01> { [ 0x100168A ] };  // OGHAM LETTER CEIRT
    key <AD02> { [ 0x1001695 ] };  // OGHAM LETTER EABHADH
    key <AD03> { [ 0x1001693 ] };  // OGHAM LETTER EADHADH
    key <AD04> { [ 0x100168F ] };  // OGHAM LETTER RUIS
    key <AD05> { [ 0x1001688 ] };  // OGHAM LETTER TINNE
    key <AD06> { [ 0x1001698 ] };  // OGHAM LETTER IFIN
    key <AD07> { [ 0x1001692 ] };  // OGHAM LETTER UR
    key <AD08> { [ 0x1001694 ] };  // OGHAM LETTER IODHADH
    key <AD09> { [ 0x1001691 ] };  // OGHAM LETTER ONN
    key <AD10> { [ 0x100169A ] };  // OGHAM LETTER PEITH

    //
    // Middle Row ASDFGHJKL
    //
    key <AC01> { [ 0x1001690 ] };  // OGHAM LETTER AILM
    key <AC02> { [ 0x1001684 ] };  // OGHAM LETTER SAIL
    key <AC03> { [ 0x1001687 ] };  // OGHAM LETTER DAIR
    key <AC04> { [ 0x1001683 ] };  // OGHAM LETTER FEARN
    key <AC05> { [ 0x100168C ] };  // OGHAM LETTER GORT
    key <AC06> { [ 0x1001686 ] };  // OGHAM LETTER UATH
    key <AC07> { [ 0x1001697 ] };  // OGHAM LETTER UILLEANN
    key <AC08> { [ 0x1001696 ] };  // OGHAM LETTER OR
    key <AC09> { [ 0x1001682 ] };  // OGHAM LETTER LUIS

    //
    // Bottom Row ZXCVBNM
    //
    key <AB01> { [ 0x100168E ] };  // OGHAM LETTER STRAIF
    key <AB02> { [ 0x1001699 ] };  // OGHAM LETTER EAMHANCHOLL
    key <AB03> { [ 0x1001689 ] };  // OGHAM LETTER COLL
    key <AB04> { [ 0x100168D ] };  // OGHAM LETTER NGEADAL
    key <AB05> { [ 0x1001681 ] };  // OGHAM LETTER BEITH
    key <AB06> { [ 0x1001685 ] };  // OGHAM LETTER NION
    key <AB07> { [ 0x100168B ] };  // OGHAM LETTER MUIN

    // As an extension because <BKSL> and <LSGT> may not be
    // available or sensible. These are also a bit more
    // intuitive on a standard Irish keyboard.
    key <AB08> { [ 0x100169C ] }; // OGHAM REVERSED FEATHER MARK
    key <AB09> { [ 0x100169B ] }; // OGHAM FEATHER MARK
    key <AB10> { [ 0x1001680 ] }; // OGHAM SPACE MARK

    include "compose(rwin)"
};

partial alphanumeric_keys
xkb_symbols "ogam_is434" {

    // This has the full layout of IS434 with an Irish QWERTY keyboard,
    // and the Ogham characters accessed when CAPS LOCK is on.

    name[Group1] = "Ogham (IS434)";

    key.type[Group1] = "THREE_LEVEL";

    key <LSGT> { type[Group1] = "FOUR_LEVEL_ALPHABETIC",
                 [ backslash, bar, 0x100169B, 0x100169C ] };
                 // OGHAM FEATHER MARK, OGHAM REVERSED FEATHER MARK

    key <BKSL> { [ numbersign, asciitilde, 0x1001680 ] }; // OGHAM SPACE MARK
    key <TLDE> { [      grave,    notsign, 0x100169C ] }; // OGHAM REVERSED FEATHER MARK
    key <SPCE> { [      space,      space,     space ] };

    //
    // Numeric row
    //
    key <AE01> { type[Group1]="TWO_LEVEL", [     1,      exclam            ] };
    key <AE02> { type[Group1]="TWO_LEVEL", [     2,    quotedbl            ] };
    key <AE03> { type[Group1]="TWO_LEVEL", [     3,    sterling            ] };
    key <AE04> {                           [     4,      dollar,  EuroSign ] };
    key <AE05> { type[Group1]="TWO_LEVEL", [     5,     percent            ] };
    key <AE06> { type[Group1]="TWO_LEVEL", [     6, asciicircum            ] };
    key <AE07> {                           [     7,   ampersand, 0x100204A ] }; // Tironian Et
    key <AE08> { type[Group1]="TWO_LEVEL", [     8,    asterisk            ] };
    key <AE09> { type[Group1]="TWO_LEVEL", [     9,   parenleft            ] };
    key <AE10> { type[Group1]="TWO_LEVEL", [     0,  parenright            ] };
    key <AE11> { type[Group1]="TWO_LEVEL", [ minus,  underscore            ] };
    key <AE12> { type[Group1]="TWO_LEVEL", [ equal,        plus            ] };

    //
    // Top Row QWERTYUIOP
    //
    key <AD01> { [ q, Q, 0x100168A ] };  // OGHAM LETTER CEIRT
    key <AD02> { [ w, W, 0x1001695 ] };  // OGHAM LETTER EABHADH
    key <AD03> { [ e, E, 0x1001693 ] };  // OGHAM LETTER EADHADH
    key <AD04> { [ r, R, 0x100168F ] };  // OGHAM LETTER RUIS
    key <AD05> { [ t, T, 0x1001688 ] };  // OGHAM LETTER TINNE
    key <AD06> { [ y, Y, 0x1001698 ] };  // OGHAM LETTER IFIN
    key <AD07> { [ u, U, 0x1001692 ] };  // OGHAM LETTER UR
    key <AD08> { [ i, I, 0x1001694 ] };  // OGHAM LETTER IODHADH
    key <AD09> { [ o, O, 0x1001691 ] };  // OGHAM LETTER ONN
    key <AD10> { [ p, P, 0x100169A ] };  // OGHAM LETTER PEITH

    //
    // Middle Row ASDFGHJKL
    //
    key <AC01> { [ a, A, 0x1001690 ] };  // OGHAM LETTER AILM
    key <AC02> { [ s, S, 0x1001684 ] };  // OGHAM LETTER SAIL
    key <AC03> { [ d, D, 0x1001687 ] };  // OGHAM LETTER DAIR
    key <AC04> { [ f, F, 0x1001683 ] };  // OGHAM LETTER FEARN
    key <AC05> { [ g, G, 0x100168C ] };  // OGHAM LETTER GORT
    key <AC06> { [ h, H, 0x1001686 ] };  // OGHAM LETTER UATH
    key <AC07> { [ j, J, 0x1001697 ] };  // OGHAM LETTER UILLEANN
    key <AC08> { [ k, K, 0x1001696 ] };  // OGHAM LETTER OR
    key <AC09> { [ l, L, 0x1001682 ] };  // OGHAM LETTER LUIS

    //
    // Bottom Row ZXCVBNM
    //
    key <AB01> { [ z, Z, 0x100168E ] };  // OGHAM LETTER STRAIF
    key <AB02> { [ x, X, 0x1001699 ] };  // OGHAM LETTER EAMHANCHOLL
    key <AB03> { [ c, C, 0x1001689 ] };  // OGHAM LETTER COLL
    key <AB04> { [ v, V, 0x100168D ] };  // OGHAM LETTER NGEADAL
    key <AB05> { [ b, B, 0x1001681 ] };  // OGHAM LETTER BEITH
    key <AB06> { [ n, N, 0x1001685 ] };  // OGHAM LETTER NION
    key <AB07> { [ m, M, 0x100168B ] };  // OGHAM LETTER MUIN

    // As an extension because <BKSL> and <LSGT> may not be
    // available or sensible. These are also a bit more
    // intuitive on a standard Irish keyboard.
    key <AB08> { [  comma,     less, 0x100169C ] }; // OGHAM REVERSED FEATHER MARK
    key <AB09> { [ period,  greater, 0x100169B ] }; // OGHAM FEATHER MARK
    key <AB10> { [  slash, question, 0x1001680 ] }; // OGHAM SPACE MARK

    // The standard says the Ogham characters should be accessed when
    // Caps Lock is down; not clear if this means it should lock but
    // seems logical.

    key <CAPS>  { type[Group1] = "ONE_LEVEL", [ ISO_Level3_Lock ] };

    // Also allow access to Ogham characters using RALT for convenience
    include "level3(ralt_switch)"

    // Redefine Scroll Lock as locking shift in case that's needed.
    // Also overcomes annoying use of Scroll Lock LED inherited from
    // US symbols but not relevant here since we're not changing group.
    key <SCLK> {type[Group1] = "ONE_LEVEL", [ Shift_Lock ] };
    modifier_map Shift { Shift_Lock };

    include "compose(rwin)"
};
//
//   khmer unicode keyboard for XFree86 4.3 or XOrg 
//   (might work with older versions, not tested)
//
//   layout defined by National Information Communications Technology Development Authority (NiDA)
//   http://www.nida.gov.kh
//
//   version:  1.0.1
//
//   date: 14.09.2005
//
//   author:  Jens Herden   (jens at khmeros.info)
//
//
//   understanding the symbols:
//
//         0x100yyyy  = unicode, yyyy is hexcode
//                      codes that are not assigned in unicode (0x10017fb-0x10017ff),
//                      are used to make compositions for special vowels
//
//         voidsymbol = no symbol for this combination
//
//         all other symbol are defined in: /usr/X11/include/X11/keysymdef.h
//         but with a leading 'XK_'
//

default partial alphanumeric_keys
xkb_symbols "basic" {
    name[Group1]= "Khmer (Cambodia)";

// there are four levels defined:
//
//                 normal           shift			right-alt	right-alt + shift
//

//  keys: `1234567890-=\
    key <TLDE> { [ guillemotleft,	guillemotright,	0x100200d,	voidsymbol	] };
    key <AE01> { [ 0x10017e1,		exclam,			0x100200c, 	0x10017f1	] };
    key <AE02> { [ 0x10017e2,		0x10017d7,		at, 		0x10017f2	] };
    key <AE03> { [ 0x10017e3,		quotedbl,		0x10017d1, 	0x10017f3	] };
    key <AE04> { [ 0x10017e4,		0x10017db,		dollar, 	0x10017f4	] };
    key <AE05> { [ 0x10017e5,		percent,		EuroSign, 	0x10017f5	] };
    key <AE06> { [ 0x10017e6,		0x10017cd,		0x10017d9, 	0x10017f6	] };
    key <AE07> { [ 0x10017e7,		0x10017d0,		0x10017da, 	0x10017f7	] };
    key <AE08> { [ 0x10017e8,		0x10017cf,		asterisk, 	0x10017f8	] };
    key <AE09> { [ 0x10017e9,		parenleft,		braceleft, 	0x10017f9	] };
    key <AE10> { [ 0x10017e0,		parenright,		braceright, 0x10017f0	] };
    key <AE11> { [ 0x10017a5,		0x10017cc,		x, 		    voidsymbol	] };
    key <AE12> { [ 0x10017b2,		equal,			0x10017ce, 	voidsymbol	] };
    key <BKSL> { [ 0x10017ae,		0x10017ad,		backslash, 	voidsymbol	] };

//  keys: qwertyuiop[]
    key <AD01> { [ 0x1001786,		0x1001788,		0x10017dc, 	0x10019e0	] };
    key <AD02> { [ 0x10017b9,		0x10017ba,		0x10017dd, 	0x10019e1	] };
    key <AD03> { [ 0x10017c1,		0x10017c2,		0x10017af, 	0x10019e2	] };
    key <AD04> { [ 0x100179a,		0x10017ac,		0x10017ab, 	0x10019e3	] };
    key <AD05> { [ 0x100178f,		0x1001791,		0x10017a8, 	0x10019e4	] };
    key <AD06> { [ 0x1001799,		0x10017bd,		voidsymbol, 0x10019e5	] };
    key <AD07> { [ 0x10017bb,		0x10017bc,		voidsymbol, 0x10019e6	] };
    key <AD08> { [ 0x10017b7,		0x10017b8,		0x10017a6, 	0x10019e7	] };
    key <AD09> { [ 0x10017c4,		0x10017c5,		0x10017b1, 	0x10019e8	] };
    key <AD10> { [ 0x1001795,		0x1001797,		0x10017b0, 	0x10019e9	] };
    key <AD11> { [ 0x10017c0,		0x10017bf,		0x10017a9, 	0x10019ea	] };
    key <AD12> { [ 0x10017aa,		0x10017a7,		0x10017b3, 	0x10019eb	] };

//  keys: asdfghjkl;'
    key <AC01> { [ 0x10017b6,		0x10017ff,		voidsymbol, 0x10019ec	] };
    key <AC02> { [ 0x100179f,		0x10017c3,		voidsymbol, 0x10019ed	] };
    key <AC03> { [ 0x100178a,		0x100178c,		voidsymbol, 0x10019ee	] };
    key <AC04> { [ 0x1001790,		0x1001792,		voidsymbol, 0x10019ef	] };
    key <AC05> { [ 0x1001784,		0x10017a2,		voidsymbol, 0x10019f0	] };
    key <AC06> { [ 0x10017a0,		0x10017c7,		voidsymbol, 0x10019f1	] };
    key <AC07> { [ 0x10017d2,		0x1001789,		voidsymbol, 0x10019f2	] };
    key <AC08> { [ 0x1001780,		0x1001782,		0x100179d, 	0x10019f3	] };
    key <AC09> { [ 0x100179b,		0x10017a1,		voidsymbol, 0x10019f4	] };
    key <AC10> { [ 0x10017be,		0x10017fe,		0x10017d6, 	0x10019f5	] };
    key <AC11> { [ 0x10017cb,		0x10017c9,		0x10017c8, 	0x10019f6	] };

//  keys: zxcvbnm,./
    key <AB01> { [ 0x100178b,		0x100178d,		voidsymbol, 0x10019f7	] };
    key <AB02> { [ 0x1001781,		0x1001783,		voidsymbol, 0x10019f8	] };
    key <AB03> { [ 0x1001785,		0x1001787,		voidsymbol, 0x10019f9	] };
    key <AB04> { [ 0x100179c,		0x10017fd,		voidsymbol, 0x10019fa	] };
    key <AB05> { [ 0x1001794,		0x1001796,		0x100179e, 	0x10019fb	] };
    key <AB06> { [ 0x1001793,		0x100178e,		voidsymbol, 0x10019fc	] };
    key <AB07> { [ 0x1001798,		0x10017c6,		voidsymbol, 0x10019fd	] };
    key <AB08> { [ 0x10017fc,		0x10017fb,		comma, 		0x10019fe	] };
    key <AB09> { [ 0x10017d4,		0x10017d5,		period, 	0x10019ff	] };
    key <AB10> { [ 0x10017ca,		question,		slash,		voidsymbol	] };

    key <SPCE> { [ 0x100200b,		space,			0x10000a0,	voidsymbol	] };
    key <RALT> { [ Alt_R	] };

// third level with right-Alt
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "olpc" {
    include "kh(basic)"

// Contact Walter@laptop.org

    key <AC10> { [ 0x10017be,		0x10017c8,		0x10017d6, 	0x10019f5	] };
    key <AE01> { [ 0x10017e1,		0x100200c,		exclam, 	0x10017f1	] };
    key <AE03> { [ 0x10017e3,		0x10017d1,		quotedbl, 	0x10017f3	] };
    key <AE05> { [ 0x10017e5,		EuroSign,		percent, 	0x10017f5	] };
    key <AE12> { [ 0x10017b2,		0x10017ce,		equal, 	 	voidsymbol	] };

   //language key
   include "group(olpc)"
};
// based on a keyboard map from an 'xkb/symbols/it' file
// 17 May 2003 Modified by Sebastiano Vigna (vigna@dsi.unimi.it)
// 03 December 2017 - Added it(intl) and it(scn), please refer to
//                    Cadèmia Siciliana <l10n@cademiasiciliana.org>
// 18 July 2018 - Fixed inconsistent 'ì' and 'ù' in it(intl)
//                Alessandro Pellegrini <pellegrini@dis.uniroma1.it>

default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin(type4)"

    name[Group1]="Italian";

    key <TLDE>	{ [ backslash,        bar,      notsign,    brokenbar ]	};

    key <AE02>	{ [         2,   quotedbl,  twosuperior, dead_doubleacute ] };
    key <AE03>	{ [         3,   sterling,threesuperior,   dead_tilde ]	};
    key <AE04>	{ [         4,     dollar,   onequarter,    oneeighth ] };

    key <AE10>	{ [         0,      equal,   braceright,  dead_ogonek ] };
    key <AE11>	{ [apostrophe,   question,        grave, questiondown ]	};
    key <AE12>	{ [    igrave, asciicircum,  asciitilde, dead_circumflex ] };

    key <AD11>	{ [    egrave,     eacute,  bracketleft,    braceleft ]	};
    key <AD12>	{ [      plus,   asterisk, bracketright,   braceright ]	};

    key <AC10>	{ [    ograve,   ccedilla,           at, dead_cedilla ] };
    key <AC11>	{ [    agrave,     degree,   numbersign, dead_abovering ] };

    key <AB06>	{ [         n,          N,       ntilde,       Ntilde ]	};
    key <AB08>	{ [     comma,  semicolon,   dead_acute,     multiply ]	};
    key <AB09>	{ [    period,      colon,periodcentered, dead_diaeresis ] };
    key <AB10>	{ [     minus, underscore,  dead_macron,     division ] };

    key <BKSL>	{ [    ugrave,    section,   dead_grave,   dead_breve ]	};

    key <LSGT>	{ [      less,    greater,guillemotleft,guillemotright] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // Modifies the basic italian layout to eliminate all dead keys

    include "it(basic)"

    name[Group1]="Italian (no dead keys)";

    key <AE02>	{ [         2,   quotedbl,  twosuperior,  doubleacute ] };
    key <AE03>	{ [         3,   sterling,threesuperior,   asciitilde ]	};

    key <AE10>	{ [         0,       equal,  braceright,       ogonek ]	};
    key <AE12>	{ [    igrave, asciicircum,  asciitilde,  asciicircum ] };

    key <AC10>	{ [    ograve,   ccedilla,           at,      cedilla ] };
    key <AC11>	{ [    agrave,     degree,   numbersign,       degree ] };

    key <AB08>	{ [     comma,  semicolon,        acute,     multiply ]	};
    key <AB09>	{ [    period,      colon,periodcentered,   diaeresis ] };
    key <AB10>	{ [     minus, underscore,       macron,     division ] };

    key <BKSL>	{ [    ugrave,    section,        grave,        breve ]	};
};

partial alphanumeric_keys
xkb_symbols "winkeys" {

   include "it(basic)"
   name[Group1]="Italian (Windows)";
   include "eurosign(5)"
};

// Copied from macintosh_vndr/it
partial alphanumeric_keys
xkb_symbols "mac" {

    name[Group1]= "Italian (Macintosh)";

    key <LSGT> {	[        less,  greater   	]	};
    key <TLDE> {        [        at,    numbersign,    periodcentered              ]	};
    key <AE01> {	[   ampersand,    1, guillemotleft,guillemotright	]	};
    key <AE02> {	[    quotedbl,    2 		]	};
    key <AE03> {	[  apostrophe,    3         	]	};
    key <AE04> {	[   parenleft,    4,    braceleft,    bracketleft	]	};
    key <AE05> {	[    ccedilla,    5,     Ccedilla,    Iacute	]	};
    key <AE06> {	[      egrave,    6,    paragraph,    periodcentered]	};
    key <AE07> {	[  parenright,    7,   braceright,	  bracketright	]	};
    key <AE08> {	[    sterling,    8,   infinity			]	};
    key <AE09> {	[      agrave,    9,        acute,    Ocircumflex	]	};
    key <AE10> {	[      eacute,    0,        grave,    Oacute	]	};
    key <AE11> {	[       minus,    underscore	]	};
    key <AE12> {	[       equal, 	  plus,     notequal,    plusminus	]	};

    key <AD01> {	[           q,  Q 		]	};
    key <AD02> {	[	    z,  Z		]	};
    key <AD03> {	[	    e,  E,	EuroSign	]	};
    key <AD04> {	[	    r,  R,   registered			] 	};
    key <AD05> {	[	    t,  T		]	};
    key <AD06> {	[	    y,  Y,       Uacute,	ydiaeresis      ] 	};
    key <AD07> {	[	    u,  U		]	};
    key <AD08> {	[	    i,  I,  icircumflex,	idiaeresis      ] 	};
    key <AD09> {	[	    o,  O		]	};
    key <AD10> {	[	    p,  P		]	};
    key <AD11> {	[      igrave,  asciicircum     ]	};
    key <AD12> {	[      dollar,	asterisk        ]	};
    key <BKSL> {	[     section,  degree,           at,  numbersign      ]	};

    key <AC01> {	[	  a,	A,      aring,   Aring		] 	};
    key <AC02> {	[	  s,	S,     ssharp,	 U1E9E		]	};
    key <AC03> {	[	  d,	D		]	};
    key <AC04> {	[	  f,	F		]	};
    key <AC05> {	[	  g,	G		]	};
    key <AC06> {	[	  h,	H,     Igrave,    Icircumflex     ]	};
    key <AC07> {	[	  j,	J,  Idiaeresis,   Iacute          ]	};
    key <AC08> {	[	  k,	K,     Egrave,    Ediaeresis      ]	};
    key <AC09> {	[	  l,	L,     ssharp,    bar		]	};
    key <AC10> {	[         m,	M,         mu,    Oacute		]	};
    key <AC11> {	[    ugrave,	percent,         ae,    AE		]	};

    key <AB01> {	[	  w,	W 		]	};
    key <AB02> {	[	  x,	X		]	};
    key <AB03> {	[	  c,	C,  copyright,    copyright	]	};
    key <AB04> {	[	  v,	V		]	};
    key <AB05> {	[	  b,	B		]	};
    key <AB06> {	[	  n,	N,  dead_tilde                    ]       };
    key <AB07> {	[     comma,	question,          questiondown		]	};
    key <AB08> {	[ semicolon,	period          ]	};
    key <AB09> {	[     colon,	slash,        bar,    backslash	]	};
    key <AB10> {	[    ograve,	exclam,     exclamdown			]	};

    include "kpdl(dot)"
    include "level3(ralt_switch)"
};

// Used by Georgian people in Italy, 
// contributed by Vladimer Sichinava
partial alphanumeric_keys
xkb_symbols "geo" {
    include "it"
    include "ge(basic)"
    name[Group1]= "Georgian (Italy)";

    key <TLDE> { [ backslash, bar, notsign, brokenbar ] };
    key <AE01> { [ 1, exclam, onesuperior ] };
    key <AE02> { [ 2, quotedbl, twosuperior, dead_doubleacute ] };
    key <AE03> { [ 3, sterling, threesuperior, dead_tilde ] };
    key <AE04> { [ 4, dollar, onequarter, oneeighth ] };
    key <AE05> { [ 5, percent, onehalf ] };
    key <AE06> { [ 6, ampersand ] };
    key <AE07> { [ 7, slash, braceleft ] };
    key <AE08> { [ 8, parenleft, bracketleft ] };
    key <AE09> { [ 9, parenright ] };
    key <AE10> { [ 0, equal, braceright, dead_ogonek ] };
    key <AE11> { [ apostrophe, question, grave, questiondown ] };
    key <AE12> { [ igrave, asciicircum, asciitilde, dead_circumflex ] };

    key <AD03> { [ 0x010010d4, E, EuroSign ] };
    key <AD11> { [ egrave, eacute, bracketleft, braceleft ] };
    key <AD12> { [ plus, asterisk, bracketright, braceright ] };

    key <AC10> { [ ograve, ccedilla, at, dead_cedilla ] };
    key <AC11> { [ agrave, degree, numbersign, degree ] };
    key <BKSL> { [ ugrave, section, dead_grave, dead_breve ] };
    key <LSGT> { [ less, greater ] };

    key <AB08> { [ comma, semicolon ] };
    key <AB09> { [ period, colon ] };
    key <AB10> { [ minus, underscore ] };
};

// OLPC Section
xkb_symbols "olpc" {

    include "it(basic)"

    key <AE12> { [ igrave,  asciicircum,    asciitilde,     dead_tilde ] };
    key <BKSL> { [ ugrave,      section,        Egrave,     dead_breve ] };
    key <I219> { [ less,        greater, guillemotleft, guillemotright ] };
};

partial alphanumeric_keys modifier_keys
xkb_symbols "us" {

    include "us(euro)"

    name[Group1]= "Italian (US)";

    key <TLDE> { [     grave, asciitilde,    dead_grave,       dead_tilde ] };
    key <AE01> { [         1,     exclam,   onesuperior                   ] };
    key <AE02> { [         2,         at,   twosuperior                   ] };
    key <AE03> { [         3, numbersign, threesuperior                   ] };
    key <AE06> { [         6,asciicircum,dead_circumflex                  ] };
    key <AE10> { [         0, parenright,        degree                   ] };
    key <AE11> { [     minus, underscore,   dead_macron                   ] };

    key <AD03> { [         e,          E,        egrave,           Egrave ] };
    key <AD04> { [         r,          R,    registered                   ] };
    key <AD07> { [         u,          U,        ugrave,           Ugrave ] };
    key <AD08> { [         i,          I,        igrave,           Igrave ] };
    key <AD09> { [         o,          O,        ograve,           Ograve ] };

    key <AC01> { [         a,          A,        agrave,           Agrave ] };
    key <AC03> { [         d,          D,        eacute,           Eacute ] };
    key <AC07> { [         j,          J,        uacute,           Uacute ] };
    key <AC08> { [         k,          K,        iacute,           Iacute ] };
    key <AC09> { [         l,          L,        oacute,           Oacute ] };
    key <AC10> { [ semicolon,      colon,dead_diaeresis,   dead_diaeresis ] };
    key <AC11> { [apostrophe,   quotedbl,    dead_acute                   ] };

    key <AB01> { [         z,          Z,        aacute,           Aacute ] };
    key <AB03> { [         c,          C,     copyright                   ] };
    key <AB06> { [         n,          N,        ntilde,           Ntilde ] };
    key <AB08> { [     comma,       less,   guillemotleft                 ] };
    key <AB09> { [    period,    greater,  guillemotright                 ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "ibm" {

    // Modifies the basic italian layout to match IBM 142 variant

    include "us"

    name[Group1]="Italian (IBM 142)";

    key <TLDE>	{ [ backslash,        bar                             ] };

    key <AE02>	{ [         2,   quotedbl                             ] };
    key <AE03>	{ [         3,   sterling,   numbersign               ] };
    key <AE06>	{ [         6,  ampersand                             ] };
    key <AE07>	{ [         7,      slash,    braceleft               ] };
    key <AE08>	{ [         8,  parenleft,  bracketleft               ] };
    key <AE09>	{ [         9, parenright, bracketright               ] };
    key <AE10>	{ [         0,      equal,   braceright               ] };
    key <AE11>	{ [apostrophe,   question                             ] };
    key <AE12>	{ [    igrave, asciicircum                            ] };

    key <AD01>	{ [         q,           Q,          at               ] };
    key <AD03>	{ [         e,           E,    EuroSign               ] };
    key <AD11>	{ [    egrave,     eacute                             ] };
    key <AD12>	{ [      plus,   asterisk,   asciitilde               ] };

    key <AC10>	{ [    ograve,   ccedilla                             ] };
    key <AC11>	{ [    agrave,     degree                             ] };

    key <AB08>	{ [     comma,  semicolon                             ] };
    key <AB09>	{ [    period,      colon                             ] };
    key <AB10>	{ [     minus, underscore                             ] };

    key <BKSL>	{ [    ugrave,    section,       grave                ] };

    key <LSGT>	{ [      less,    greater                             ] };

    include "level3(ralt_switch)"
    include "kpdl(comma)"
};


partial alphanumeric_keys
	xkb_symbols "fur" {
	include "it(basic)"
	include "latin(type4)"
	include "level3(ralt_switch)"	
	name[Group1] = "Friulian (Italy)";



    key <TLDE>	{ [ backslash,        bar,      notsign,    brokenbar ]	};

    key <AE02>	{ [         2,   quotedbl,  twosuperior, dead_doubleacute ] };
    key <AE03>	{ [         3,   sterling,threesuperior,        U1D49 ]	};
    key <AE04>	{ [         4,     dollar,   onequarter,    oneeighth ] };
    key <AE05>	{ [         5,    percent,     EuroSign,      onehalf ] };

    key <AE10>	{ [         0,      equal,   braceright,  dead_ogonek ] };
    key <AE11>	{ [apostrophe,   question,        grave, questiondown ]	};
    key <AE12>	{ [    igrave, asciicircum,  asciitilde, dead_circumflex ] };

    key <AD03> { [          e,          E,  ecircumflex,  Ecircumflex ] };
    key <AD05> { [          t,          T,        U1D57,        U1D40 ] };
    key <AD07> { [          u,          U,  ucircumflex,     NoSymbol ] };
    key <AD08> { [          i,          I,  icircumflex,  Icircumflex ] };
    key <AD09> { [          o,          O,  ocircumflex,  Ocircumflex ] };
    key <AD11>	{ [    egrave,     eacute,  bracketleft,    braceleft ]	};
    key <AD12>	{ [      plus,   asterisk, bracketright,   braceright ]	};
    key <AC01>  { [         a,          A,  acircumflex,  Acircumflex ] };
    key <AC04>  { [         f,          F,        U1DA0,        U00AA ] };
    key <AC10>	{ [    ograve,   ccedilla,           at, dead_cedilla ] };
    key <AC11>	{ [    agrave,     degree,   numbersign, dead_abovering ] };

    key <AB03>	{ [         c,          C,       U1D9C,       U00A9  ]	};
    key <AB06>	{ [         n,          N,       U207F,       Ntilde ]	};
    key <AB07>	{ [         m,		M,       U1D50,       U00B5  ]	};
    key <AB08>	{ [     comma,  semicolon,   dead_acute,     multiply ]	};
    key <AB09>	{ [    period,      colon,periodcentered, dead_diaeresis ] };
    key <AB10>	{ [     minus, underscore,  dead_macron,     division ] };

    key <BKSL>	{ [    ugrave,    section,   dead_grave,   dead_breve ]	};

    key <LSGT>	{ [      less,    greater,guillemotleft,guillemotright] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/it(sun_type6)"
};

partial alphanumeric_keys
    xkb_symbols "lld" {
    include "it(basic)"
    name[Group1] = "Italian (Ladin)";

    key <AD08> { [ i, I, idiaeresis, Idiaeresis ] };
    key <AD10> { [ p, P, ediaeresis, Ediaeresis ] };

    key <AC01> { [ a, A, aacute, Aacute ] };
    key <AC02> { [ s, S, sacute, Sacute ] };

    key <AB03> { [ c, C, cacute, Cacute ] };
};

partial alphanumeric_keys
    xkb_symbols "intl" {
    include "it(basic)"
    name[Group1] = "Italian (intl., with dead keys)";

    key <AE12> { [ igrave, asciicircum,  asciitilde, dead_circumflex ] };

    key <AD03> { [      e,           E,    EuroSign,           U0259 ] };

    key <AC11> { [ agrave,      degree,  numbersign,           U1D58 ] };
    key <AC06> { [      h,           H,       U1E25,           U1E24 ] };
    key <AC04> { [      f,           F,       U0111,           U0110 ] };
    key <AC03> { [      d,           D,       U1E0D,           U1E0C ] };

    key <AB02> { [      x,           X,       U03C7,           U03A7 ] };
    key <AB01> { [      z,           Z                               ] };

    key <BKSL> { [ ugrave,     section,  dead_grave,      dead_breve ] };
};

partial alphanumeric_keys
    xkb_symbols "scn" {
    include "it(basic)"
    name[Group1] = "Sicilian";

    key <AE12> { [ iacute, asciicircum,  asciitilde, dead_circumflex ] };

    key <AD09> { [      o,           O, ocircumflex,     Ocircumflex ] };
    key <AD08> { [      i,           I, icircumflex,     Icircumflex ] };
    key <AD07> { [      u,           U, ucircumflex,     Ucircumflex ] };
    key <AD04> { [      r,           R,  ediaeresis,      Ediaeresis ] };
    key <AD03> { [      e,           E,    EuroSign,     ecircumflex ] };

    key <AC11> { [ agrave,      degree,  numbersign,           U1D58 ] };
    key <AC04> { [      f,           F,       U0111,           U0110 ] };
    key <AC03> { [      d,           D,       U1E0D,           U1E0C ] };
    key <AC02> { [      s,           S,      scaron,          Scaron ] };
    key <AC01> { [      a,           A, acircumflex,     Acircumflex ] };

    // In our Windows layout, there is no ©, but Ç. Since this character
    // is available via CapsLock, I decided to keep © in place, as the
    // Italian layout.
    key <AB03> { [      c,           C,    ccedilla,       copyright ] };
    key <AB02> { [      x,           X,       U03C7,           U03A7 ] };

    // Replaced dead_grave by ugrave, since it's common to write mixed
    // Sicilian - Italian (where we replaced ugrave with uacute)
    key <BKSL> { [ uacute,     section,      ugrave,      dead_breve ] };
};
// Arabic AZERTY with modern Latin digits 
default partial alphanumeric_keys
xkb_symbols "arabic" {
    include "ara(azerty)"

    name[Group1]="Arabic (Morocco)";
};

// French AZERTY keyboard used when typing French
partial alphanumeric_keys
xkb_symbols "french" {
    include "fr(basic)"

    name[Group1]="French (Morocco)";
};

// Clavier unicode tifinaghe de base réalisé par l'IRCAM (Institut Royal de la Culture Amazighe du Maroc) http://www.ircam.ma/
// Support des lettres unicode tifinaghe-IRCAM, néotifinaghes & touarègues.
// Les caractères tifinaghes sont accessibles en SHIFT positions pour le niveau 2, en ALTGR positions pour le niveau 3
// Polices tifinaghes Unicode à télécharger depuis :
// http://www.ircam.ma/documents/policesclavierunicode/hapaxber.ttf (licence non libre, libre téléchargement et distribution uniquement)
// Minihowto ici: http://perso.menara.ma/~kebdani/tamazgha/gnu_amazigh.html

partial alphanumeric_keys
xkb_symbols "tifinagh" {

    name[Group1]="Berber (Morocco, Tifinagh)";

    key <TLDE>	{ [ twosuperior, NoSymbol ]	};
    key <AE01>	{ [ ampersand,          1 ]	};
    key <AE02>	{ [ NoSymbol,          2, asciitilde	]	};
    key <AE03>	{ [  quotedbl,          3, numbersign	]	};
    key <AE04>	{ [apostrophe,          4, braceleft	]	};
    key <AE05>	{ [ parenleft,          5, bracketleft	]	};
    key <AE06>	{ [     minus,          6, bar	]	};
    key <AE07>	{ [         NoSymbol ,  7 ]	};
    key <AE08>	{ [underscore,          8, backslash	]	};
    key <AE09>	{ [NoSymbol,         9, asciicircum	]	};
    key <AE10>	{ [       NoSymbol ,          0, at		]	};
    key <AE11>	{ [parenright,     degree, bracketright	]	};
    key <AE12>	{ [     equal,       plus, braceright	]	};

    key <AD01>	{ [ 0x1002d30 ]	};
    key <AD02>	{ [ 0x1002d63, 0x1002d65 ]	};
    key <AD03>	{ [ 0x1002d3b, NoSymbol,0x10020ac ]	};
    key <AD04>	{ [ 0x1002d54, 0x1002d55 ]	};
    key <AD05>	{ [ 0x1002d5c, 0x1002d5f ]	};
    key <AD06>	{ [ 0x1002d62 ]	};
    key <AD07>	{ [ 0x1002d53 ]	};
    key <AD08>	{ [ 0x1002d49 ]	};
    key <AD09>	{ [ 0x1002d44 ]	};
    key <AD10>	{ [ 0x1002d43 ]	};
    key <AD11>	{ [ 0x1002d6f ]   };
    key <AD12>	{ [    dollar,   sterling,   0x10000a4]	};

    key <AC01>	{ [ 0x1002d47 ]	};
    key <AC02>	{ [ 0x1002d59, 0x1002d5a ]	};
    key <AC03>	{ [ 0x1002d37, 0x1002d39 ]	};
    key <AC04>	{ [ 0x1002d3c ]	};
    key <AC05>	{ [ 0x1002d33, 0x1002d33]	};
    key <AC06>	{ [ 0x1002d40 ]	};
    key <AC07>	{ [ 0x1002d4a ]	};
    key <AC08>	{ [ 0x1002d3d,  0x1002d3d  ]	};
    key <AC09>	{ [ 0x1002d4d ]	};
    key <AC10>	{ [ 0x1002d4e ]	};
    key <AC11>	{ [    NoSymbol ,   percent ]	};
    key <BKSL>	{ [  asterisk,         mu ]	};

    key <AB01>	{ [ 0x1002d61 ]	};
    key <AB02>	{ [ 0x1002d45 ]	};
    key <AB03>	{ [ 0x1002d5b ]	};
    key <AB04>	{ [ 0x1002d56 ]	};
    key <AB05>	{ [ 0x1002d31 ]	};
    key <AB06>	{ [ 0x1002d4f ]	};
    key <AB07>	{ [     comma,   question ] };
    key <AB08>	{ [ semicolon,     period ] };
    key <AB09>	{ [     colon,      slash ] };
    key <AB10>	{ [    exclam,    section ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "tifinagh-phonetic" {
    include "ma(tifinagh)"

    name[Group1]="Berber (Morocco, Tifinagh phonetic)";

    key <LatA>	{ [ 0x1002d30 ]	};
    key <LatZ>	{ [ 0x1002d63, 0x1002d65 ]	};
    key <LatE>	{ [ 0x1002d3b, NoSymbol,0x10020ac ]	};
    key <LatR>	{ [ 0x1002d54, 0x1002d55 ]	};
    key <LatT>	{ [ 0x1002d5c, 0x1002d5f ]	};
    key <LatY>	{ [ 0x1002d62 ]	};
    key <LatU>	{ [ 0x1002d53 ]	};
    key <LatI>	{ [ 0x1002d49 ]	};
    key <LatO>	{ [ 0x1002d44 ]	};
    key <LatP>	{ [ 0x1002d43 ]	};

    key <LatQ>	{ [ 0x1002d47 ]	};
    key <LatS>	{ [ 0x1002d59, 0x1002d5a ]	};
    key <LatD>	{ [ 0x1002d37, 0x1002d39 ]	};
    key <LatF>	{ [ 0x1002d3c ]	};
    key <LatG>	{ [ 0x1002d33 ]	};
    key <LatH>	{ [ 0x1002d40 ]	};
    key <LatJ>	{ [ 0x1002d4a ]	};
    key <LatK>	{ [ 0x1002d3d ]	};
    key <LatL>	{ [ 0x1002d4d ]	};
    key <LatM>	{ [ 0x1002d4e ]	};

    key <LatW>	{ [ 0x1002d61,0x1002d6f ]	};
    key <LatX>	{ [ 0x1002d45 ]	};
    key <LatC>	{ [ 0x1002d5b ]	};
    key <LatV>	{ [ 0x1002d56 ]	};
    key <LatB>	{ [ 0x1002d31 ]	};
    key <LatN>	{ [ 0x1002d4f ]	};

    include "level3(ralt_switch)"
};

// Clavier unicode tifinaghe étendu réalisé par l'IRCAM (Institut Royal de la Culture Amazighe du Maroc) http://www.ircam.ma/
// Support des lettres unicode tifinaghe-IRCAM, néotifinaghes & touarègues.
// Les caractères tifinaghes sont accessibles en SHIFT positions pour le niveau 2, en ALTGR positions pour le niveau 3
// Polices tifinaghes Unicode à télécharger depuis :
// http://www.ircam.ma/documents/policesclavierunicode/hapaxber.ttf (licence non libre, libre téléchargement et distribution uniquement)
// Minihowto ici: http://perso.menara.ma/~kebdani/tamazgha/gnu_amazigh.html

partial alphanumeric_keys
xkb_symbols "tifinagh-extended" {

    name[Group1]="Berber (Morocco, Tifinagh extended)";

    key <TLDE>	{ [ twosuperior,0x100200C ]	};
    key <AE01>	{ [ ampersand,          1 ]	};
    key <AE02>	{ [0x1002d52,          2, asciitilde	]	};
    key <AE03>	{ [  quotedbl,          3, numbersign	]	};
    key <AE04>	{ [apostrophe,          4, braceleft	]	};
    key <AE05>	{ [ parenleft,          5, bracketleft	]	};
    key <AE06>	{ [ minus,          6, bar		]	};
    key <AE07>	{ [ 0x1002d64 ,  7 ]	};
    key <AE08>	{ [underscore,          8, backslash	]	};
    key <AE09>	{ [ 0x1002014,         9, asciicircum	]	};
    key <AE10>	{ [ 0x100200d,          0, at	]	};
    key <AE11>	{ [parenright,   degree, bracketright	]	};
    key <AE12>	{ [     equal,       plus, braceright	]	};

    key <AD01>	{ [ 0x1002d30, 0x1002d36 ]	};
    key <AD02>	{ [ 0x1002d63, 0x1002d65 ]	};
    key <AD03>	{ [ 0x1002d3b, 0x1002d57, 0x10020ac ]	};
    key <AD04>	{ [ 0x1002d54, 0x1002d55 ]	};
    key <AD05>	{ [ 0x1002d5c, 0x1002d5f ]	};
    key <AD06>	{ [ 0x1002d62, 0x1002d42 ]	};
    key <AD07>	{ [ 0x1002d53, 0x1002d4c ]	};
    key <AD08>	{ [ 0x1002d49, 0x1002d58 ]	};
    key <AD09>	{ [ 0x1002d44, 0x1002d5d ]	};
    key <AD10>	{ [ 0x1002d43, 0x1002d5e ]	};
    key <AD11>	{ [ 0x1002d6f, 0x1002d60 ]   };
    key <AD12>	{ [    dollar,   sterling,   0x10000a4]	};

    key <AC01>	{ [ 0x1002d47, 0x1002d48 ]	};
    key <AC02>	{ [ 0x1002d59, 0x1002d5a ]	};
    key <AC03>	{ [ 0x1002d37, 0x1002d39 ]	};
    key <AC04>	{ [ 0x1002d3c, 0x1002d35 ]	};
    key <AC05>	{ [ 0x1002d33, 0x1002d33 ]	};
    key <AC06>	{ [ 0x1002d40, 0x1002d41 ]	};
    key <AC07>	{ [ 0x1002d4a, 0x1002d4b ]	};
    key <AC08>	{ [ 0x1002d3d, 0x1002d3d ]	};
    key <AC09>	{ [ 0x1002d4d, 0x1002d38 ]	};
    key <AC10>	{ [ 0x1002d4e, 0x1002d3a ]	};
    key <AC11>	{ [ 0x1002d51,  percent  ]	};
    key <BKSL>	{ [ asterisk,   mu       ]	};

    key <AB01>	{ [ 0x1002d61, 0x1002d3e ]	};
    key <AB02>	{ [ 0x1002d45, 0x1002d46 ]	};
    key <AB03>	{ [ 0x1002d5b, 0x1002d3f ]	};
    key <AB04>	{ [ 0x1002d56, 0x1002d34 ]	};
    key <AB05>	{ [ 0x1002d31, 0x1002d32 ]	};
    key <AB06>	{ [ 0x1002d4f, 0x1002d50 ]	};
    key <AB07>	{ [     comma,  question ]    };
    key <AB08>	{ [ semicolon,    period ]    };
    key <AB09>	{ [     colon,     slash ]    };
    key <AB10>	{ [    exclam,   section ]    };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "tifinagh-extended-phonetic" {
    include "ma(tifinagh-extended)"

    name[Group1]="Berber (Morocco, Tifinagh extended phonetic)";

    key <LatA>	{ [ 0x1002d30 ]	};
    key <LatZ>	{ [ 0x1002d63, 0x1002d65 ]	};
    key <LatE>	{ [ 0x1002d3b, NoSymbol,0x10020ac ]	};
    key <LatR>	{ [ 0x1002d54, 0x1002d55 ]	};
    key <LatT>	{ [ 0x1002d5c, 0x1002d5f ]	};
    key <LatY>	{ [ 0x1002d62 ]	};
    key <LatU>	{ [ 0x1002d53 ]	};
    key <LatI>	{ [ 0x1002d49 ]	};
    key <LatO>	{ [ 0x1002d44 ]	};
    key <LatP>	{ [ 0x1002d43 ]	};

    key <LatQ>	{ [ 0x1002d47 ]	};
    key <LatS>	{ [ 0x1002d59, 0x1002d5a ]	};
    key <LatD>	{ [ 0x1002d37, 0x1002d39 ]	};
    key <LatF>	{ [ 0x1002d3c ]	};
    key <LatG>	{ [ 0x1002d33 ]	};
    key <LatH>	{ [ 0x1002d40 ]	};
    key <LatJ>	{ [ 0x1002d4a ]	};
    key <LatK>	{ [ 0x1002d3d ]	};
    key <LatL>	{ [ 0x1002d4d ]	};
    key <LatM>	{ [ 0x1002d4e ]	};

    key <LatW>	{ [ 0x1002d61 ]	};
    key <LatX>	{ [ 0x1002d45 ]	};
    key <LatC>	{ [ 0x1002d5b ]	};
    key <LatV>	{ [ 0x1002d56 ]	};
    key <LatB>	{ [ 0x1002d31 ]	};
    key <LatN>	{ [ 0x1002d4f ]	};

    include "level3(ralt_switch)"
};

// Tifinagh keyboard; improved from the IRCAM layout to make all
// tifinagh chars in unicode accessible (in shift positions for most
// touareg letters; in altgr position for spirants.

partial alphanumeric_keys
xkb_symbols "tifinagh-alt" {

    name[Group1]="Berber (Morocco, Tifinagh alt.)";

    key <TLDE>	{ [ twosuperior, asciitilde ]	};
    key <AE01>	{ [ ampersand,          1 ]	};
    key <AE02>	{ [asciitilde,          2, asciitilde	]	};
    key <AE03>	{ [  quotedbl,          3, numbersign	]	};
    key <AE04>	{ [apostrophe,          4, braceleft	]	};
    key <AE05>	{ [ parenleft,          5, bracketleft	]	};
    key <AE06>	{ [     minus,          6, bar		]	};
    key <AE07>	{ [     grave,          7, grave	]	};
    key <AE08>	{ [underscore,          8, backslash	]	};
    key <AE09>	{ [asciicircum,         9, asciicircum	]	};
    key <AE10>	{ [        at,          0, at		]	};
    key <AE11>	{ [parenright,     degree, bracketright	]	};
    key <AE12>	{ [     equal,       plus, braceright	]	};

    key <AD01>	{ [ 0x1002d30 ]	};
    key <AD02>	{ [ 0x1002d63, 0x1002d65, 0x1002d64 ]	};
    key <AD03>	{ [ 0x1002d3b ]	};
    key <AD04>	{ [ 0x1002d54, 0x1002d55 ]	};
    key <AD05>	{ [ 0x1002d5c, 0x1002d5f, 0x1002d5d ]	};
    key <AD06>	{ [ 0x1002d62 ]	};
    key <AD07>	{ [ 0x1002d53 ]	};
    key <AD08>	{ [ 0x1002d49 ]	};
    key <AD09>	{ [ 0x1002d44 ]	};
    key <AD10>	{ [ 0x1002d43, 0x1002d52 ]	};
    key <AD11>	{ [ dead_circumflex ] };
    key <AD12>	{ [    dollar,   sterling ]	};

    key <AC01>	{ [ 0x1002d47, 0x1002d48 ]	};
    key <AC02>	{ [ 0x1002d59, 0x1002d5a ]	};
    key <AC03>	{ [ 0x1002d37, 0x1002d39, 0x1002d38, 0x1002d3a ]	};
    key <AC04>	{ [ 0x1002d3c ]	};
    key <AC05>	{ [ 0x1002d33, 0x1002d36, 0x1002d34, 0x1002d35 ]	};
    key <AC06>	{ [ 0x1002d40, 0x1002d42, 0x1002d41 ]	};
    key <AC07>	{ [ 0x1002d4a, 0x1002d4c, 0x1002d4b ]	};
    key <AC08>	{ [ 0x1002d3d, 0x1002d3e, 0x1002d3f ]	};
    key <AC09>	{ [ 0x1002d4d ]	};
    key <AC10>	{ [ 0x1002d4e ]	};
    key <AC11>	{ [ percent ]	};
    key <BKSL>	{ [  asterisk,         mu ]	};

    key <AB01>	{ [ 0x1002d61, 0x1002d6f, 0x1002d60 ]	};
    key <AB02>	{ [ 0x1002d45, 0x1002d46 ]	};
    key <AB03>	{ [ 0x1002d5b, 0x1002d5e ]	};
    key <AB04>	{ [ 0x1002d56, 0x1002d57, 0x1002d58 ]	};
    key <AB05>	{ [ 0x1002d31, 0x1002d31, 0x1002d32 ]	};
    key <AB06>	{ [ 0x1002d4f, 0x1002d50, 0x1002d51 ]	};
    key <AB07>	{ [     comma,   question ] };
    key <AB08>	{ [ semicolon,     period ] };
    key <AB09>	{ [     colon,      slash ] };
    key <AB10>	{ [    exclam,    section ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "tifinagh-alt-phonetic" {
    include "ma(tifinagh-alt)"

    name[Group1]="Berber (Morocco, Tifinagh phonetic, alt.)";

    key <LatA>	{ [ 0x1002d30 ]	};
    key <LatZ>	{ [ 0x1002d63, 0x1002d65, 0x1002d64 ]	};
    key <LatE>	{ [ 0x1002d3b ]	};
    key <LatR>	{ [ 0x1002d54, 0x1002d55 ]	};
    key <LatT>	{ [ 0x1002d5c, 0x1002d5f, 0x1002d5d ]	};
    key <LatY>	{ [ 0x1002d62 ]	};
    key <LatU>	{ [ 0x1002d53 ]	};
    key <LatI>	{ [ 0x1002d49 ]	};
    key <LatO>	{ [ 0x1002d44 ]	};
    key <LatP>	{ [ 0x1002d43, 0x1002d52 ]	};

    key <LatQ>	{ [ 0x1002d47, 0x1002d48 ]	};
    key <LatS>	{ [ 0x1002d59, 0x1002d5a ]	};
    key <LatD>	{ [ 0x1002d37, 0x1002d39, 0x1002d38, 0x1002d3a ]	};
    key <LatF>	{ [ 0x1002d3c ]	};
    key <LatG>	{ [ 0x1002d33, 0x1002d36, 0x1002d34, 0x1002d35 ]	};
    key <LatH>	{ [ 0x1002d40, 0x1002d42, 0x1002d41 ]	};
    key <LatJ>	{ [ 0x1002d4a, 0x1002d4c, 0x1002d4b ]	};
    key <LatK>	{ [ 0x1002d3d, 0x1002d3e, 0x1002d3f ]	};
    key <LatL>	{ [ 0x1002d4d ]	};
    key <LatM>	{ [ 0x1002d4e ]	};

    key <LatW>	{ [ 0x1002d61, 0x1002d6f, 0x1002d60 ]	};
    key <LatX>	{ [ 0x1002d45, 0x1002d46 ]	};
    key <LatC>	{ [ 0x1002d5b, 0x1002d5e ]	};
    key <LatV>	{ [ 0x1002d56, 0x1002d57, 0x1002d58 ]	};
    key <LatB>	{ [ 0x1002d31, 0x1002d31, 0x1002d32 ]	};
    key <LatN>	{ [ 0x1002d4f, 0x1002d50, 0x1002d51 ]	};

    include "level3(ralt_switch)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    // Adds the macrons needed for the Maori language to
    // a simple US keyboard layout.

    include "latin"

    name[Group1]="Maori";

    key <AC01>  { [ a,   A,  amacron, Amacron ] };
    key <AD03>  { [ e,   E,  emacron, Emacron ] };
    key <AD08>  { [ i,   I,  imacron, Imacron ] };

    key <AD09>  { [ o,   O,  omacron, Omacron ] };
    key <AD07>  { [ u,   U,  umacron, Umacron ] };

    key <RALT>  { type[Group1]="TWO_LEVEL",
                  [ ISO_Level3_Shift, Multi_key ] };

    modifier_map Mod5   { <RALT> };
};
//
// Ethiopia
// Designed as a part of OLPC project
//
// 2007 Sergey Udaltsov <svu@gnome.org>
//

default partial alphanumeric_keys
xkb_symbols "basic" {
    include "et(olpc)"
    name[Group1]="Amharic";
};

partial alphanumeric_keys
xkb_symbols "olpc" {

    name[Group1]="Amharic";

    key <AE01>	{ [        0x01001369,  0x01001372 ] }; // 1
    key <AE02>	{ [        0x0100136a,  0x01001373 ] }; // 2
    key <AE03>	{ [        0x0100136b,  0x01001374 ] }; // 3 
    key <AE04>	{ [        0x0100136c,  0x01001375 ] }; // 4
    key <AE05>	{ [        0x0100136d,  0x01001376 ] }; // 5
    key <AE06>	{ [        0x0100136e,  0x01001377 ] }; // 6
    key <AE07>	{ [        0x0100136f,  0x01001378 ] }; // 7
    key <AE08>	{ [        0x01001370,  0x01001379 ] }; // 8
    key <AE09>	{ [        0x01001371,  0x0100137a ] }; // 9
    key <AE10>	{ [        0x0100137b,  0x0100137c ] }; // 0
    key <AE11>	{ [        minus,       underscore ] }; // -_
    key <AE12>	{ [        equal,       plus       ] }; // =+

    key <AD01>	{ [        0x01001240,  0x01001250 ]	}; // q
    key <AD02>	{ [        0x010012C8,  VoidSymbol ]	}; // w
    key <AD03>	{ [        0x0100FE69,  0x0100FE70 ]	}; // dead e
    key <AD04>	{ [        0x01001228,  VoidSymbol ]	}; // r
    key <AD05>	{ [        0x01001270,  0x01001320 ]	}; // t
    key <AD06>	{ [        0x010012E8,  VoidSymbol ]	}; // y
    key <AD07>	{ [        0x0100FE75,  0x0100FE76 ]	}; // dead u
    key <AD08>	{ [        0x0100FE71,  0x0100FE72 ]	}; // dead i
    key <AD09>	{ [        0x0100FE73,  0x0100FE74 ]	}; // dead o
    key <AD10>	{ [        0x01001350,  0x01001330 ]	}; // p
    key <AD11>	{ [        0x01001340,  0x01001338 ]	}; // [
    key <AD12>	{ [        0x01001328,  0x01001280 ]	}; // ]

    key <AC01>	{ [        0x0100FE67,  0x0100FE68 ]	}; // dead a
    key <AC02>	{ [        0x01001230,  0x01001220 ]	}; // s
    key <AC03>	{ [        0x010012F0,  0x010012F8 ]	}; // d
    key <AC04>	{ [        0x01001348,  VoidSymbol ]	}; // f
    key <AC05>	{ [        0x01001308,  0x01001318 ]	}; // g
    key <AC06>	{ [        0x01001200,  0x01001210 ]	}; // h
    key <AC07>	{ [        0x01001300,  VoidSymbol ]	}; // j
    key <AC08>	{ [        0x010012A8,  0x010012B8 ]	}; // k
    key <AC09>	{ [        0x01001208,  VoidSymbol ]	}; // l

    key <AC10>	{ [        0x01001362,  0x01001361 ]	}; // :;
    key <AC11>  { [        0x01001366,  0x01001365 ]    }; // '"

    key <AB01>	{ [        0x010012D8,  0x010012E0 ]	}; // z
    key <AB02>	{ [        0x010012A0,  0x010012D0 ]	}; // x
    key <AB03>  { [        0x01001278,  0x0100FE78 ]    }; // c
    key <AB04>	{ [        0x01001238,  0x01001268 ]	}; // v
    key <AB05>	{ [        0x01001260,  VoidSymbol ]	}; // b
    key <AB06>	{ [        0x01001290,  0x01001298 ]	}; // n
    key <AB07>	{ [        0x01001218,  VoidSymbol ]	}; // m

    key <AB08>	{ [        0x01001363,  VoidSymbol ]	}; // <
    key <AB09>	{ [        0x01001364,  VoidSymbol ]	}; // >
    key <AB10>  { [        0x01001367,  question   ]    }; // ?

    key <BKSL> {  [        VoidSymbol,  0x01002010 ]    }; // bksl

    include "group(olpc)"
};
// Lao keymap, by Anousak Souphavanh <anousak@muanglao.com>

default partial alphanumeric_keys
xkb_symbols "basic" {

    // This keymap describes the Lao keyboard standard,
    // which is [kind of] widely used in Laos.

    name[Group1]= "Lao";

    key <TLDE> { [ 0x100200D			]};
    key <AE01> { [ 0x1000ea2,       0x1000ed1	]};
    key <AE01> { [ 0x1000ea2,       0x1000ed1	]};
    key <AE02> { [ 0x1000e9f,       0x1000ed2	]};
    key <AE03> { [ 0x1000ec2,       0x1000ed3	]};
    key <AE04> { [ 0x1000e96,       0x1000ed4	]};
    key <AE05> { [ 0x1000eb8,       0x1000ecc	]};
    key <AE06> { [ 0x1000eb9,       0x1000ebc	]};
    key <AE07> { [ 0x1000e84,       0x1000ed5	]};
    key <AE08> { [ 0x1000e95,       0x1000ed6	]};
    key <AE09> { [ 0x1000e88,       0x1000ed7	]};
    key <AE10> { [ 0x1000e82,       0x1000ed8	]};
    key <AE11> { [ 0x1000e8a,       0x1000ed9	]};
    key <AE12> { [ 0x1000ecd			]};

    key <AD01> { [ 0x1000ebb			]};
    key <AD02> { [ 0x1000ec4,       0x1000ed0	]};
    key <AD03> { [ 0x1000eb3			]};
    key <AD04> { [ 0x1000e9e,       underscore	]};
    key <AD05> { [ 0x1000eb0,       plus	]};
    key <AD06> { [ 0x1000eb4			]};
    key <AD07> { [ 0x1000eb5			]};
    key <AD08> { [ 0x1000ea3,       0x1000eae	]};
    key <AD09> { [ 0x1000e99			]};
    key <AD10> { [ 0x1000e8d,       0x1000ebd	]};
    key <AD11> { [ 0x1000e9a,       minus	]};
    key <AD12> { [ 0x1000ea5,       braceright	]};
    key <BKSL> { [ 0x1000edc,       0x1000edd	]};

    key <AC01> { [ 0x1000eb1			]};
    key <AC02> { [ 0x1000eab,       semicolon	]};
    key <AC03> { [ 0x1000e81,       period	]};
    key <AC04> { [ 0x1000e94,       comma	]};
    key <AC05> { [ 0x1000ec0,       colon	]};
    key <AC06> { [ 0x1000ec9,       0x1000eca	]};
    key <AC07> { [ 0x1000ec8,       0x1000ecb	]};
    key <AC08> { [ 0x1000eb2,       exclam	]};
    key <AC09> { [ 0x1000eaa,       question	]};
    key <AC10> { [ 0x1000ea7,       percent	]};
    key <AC11> { [ 0x1000e87,       equal	]};

    key <AB01> { [ 0x1000e9c,       0x10020ad	]};
    key <AB02> { [ 0x1000e9b,       parenleft	]};
    key <AB03> { [ 0x1000ec1,       0x1000eaf	]};
    key <AB04> { [ 0x1000ead			]};
    key <AB05> { [ 0x1000eb6			]};
    key <AB06> { [ 0x1000eb7			]};
    key <AB07> { [ 0x1000e97,       0x1000ec6	]};
    key <AB08> { [ 0x1000ea1,       grave	]};
    key <AB09> { [ 0x1000ec3,       dollar	]};
    key <AB10> { [ 0x1000e9d,       parenright	]};
};


partial
xkb_symbols "stea" {

    // This keymap describes the proposed Lao keyboard standard by
    // the PAN Localization Project.
    // Science Technology and Environment Agency of Lao PDR
    // National University Computer and Emergency Science of Pakistan
    // International Development Research Center
    // Caveat: assigning multiple codepoints to a single key does not
    // work in XKB.  Therefore the combining codepoint assignments
    // have been omitted.

    name[Group1]= "Lao (STEA)";

    key <TLDE> { [  quotedbl,      apostrophe			]};
    key <AE01> { [ 0x1000ea2,               1,       0x1000ed1	]};
    key <AE02> { [ 0x1000e9f,               2,       0x1000ed2	]};
    key <AE03> { [ 0x1000ec2,               3,       0x1000ed3	]};
    key <AE04> { [ 0x1000e96,               4,       0x1000ed4	]};
    key <AE05> { [ 0x1000eb8,       0x1000ecc,       0x1000ed5	]};
    key <AE06> { [ 0x1000eb9,       0x1000ebc,       0x1000ed6	]};
    key <AE07> { [ 0x1000e84,               5,       0x1000ed7	]};
    key <AE08> { [ 0x1000e95,               6,       0x1000ed8	]};
    key <AE09> { [ 0x1000e88,               7,       0x1000ed9	]};
    key <AE10> { [ 0x1000e82,               8,       0x1000ed0	]};
    key <AE11> { [ 0x1000e8a,               9			]};
    key <AE12> { [ 0x1000ecd					]};

    key <AD01> { [ 0x1000ebb					]};
    key <AD02> { [ 0x1000ec4,               0			]};
    key <AD03> { [ 0x1000eb3,        asterisk			]};
    key <AD04> { [ 0x1000e9e,      underscore			]};
    key <AD05> { [ 0x1000eb0,            plus			]};
    key <AD06> { [ 0x1000eb4					]};
    key <AD07> { [ 0x1000eb5					]};
    key <AD08> { [ 0x1000eae,       0x1000ea3			]};
    key <AD09> { [ 0x1000e99,       0x1000edc			]};
    key <AD10> { [ 0x1000e8d,       0x1000ebd			]};
    key <AD11> { [ 0x1000e9a,           minus			]};
    key <AD12> { [ 0x1000ea5					]};
    key <BKSL> { [     slash,       backslash			]};

    key <AC01> { [ 0x1000eb1			]};
    key <AC02> { [ 0x1000eab,       semicolon	]};
    key <AC03> { [ 0x1000e81,          period	]};
    key <AC04> { [ 0x1000e94,           comma	]};
    key <AC05> { [ 0x1000ec0,           colon	]};
    key <AC06> { [ 0x1000ec9,       0x1000eca	]};
    key <AC07> { [ 0x1000ec8,       0x1000ecb	]};
    key <AC08> { [ 0x1000eb2,          exclam	]};
    key <AC09> { [ 0x1000eaa,        question	]};
    key <AC10> { [ 0x1000ea7,         percent	]};
    key <AC11> { [ 0x1000e87,           equal	]};

    key <AB01> { [ 0x1000e9c,       0x10020ad	]};
    key <AB02> { [ 0x1000e9b,       parenleft	]};
    key <AB03> { [ 0x1000ec1,       0x1000eaf	]};
    key <AB04> { [ 0x1000ead,               x	]};
    key <AB05> { [ 0x1000eb6			]};
    key <AB06> { [ 0x1000eb7			]};
    key <AB07> { [ 0x1000e97,       0x1000ec6	]};
    key <AB08> { [ 0x1000ea1,       0x1000edd	]};
    key <AB09> { [ 0x1000ec3,          dollar	]};
    key <AB10> { [ 0x1000e9d,      parenright	]};

    key <SPCE> { [     space,    nobreakspace,    nobreakspace	]};

    key <KPDL> { [     comma,          period 			]};

    include "level3(ralt_switch)"
};
// Latvian keymap version 1.1
// Copyright (C) Dmitry Golubev <lastguru@mail.ru>, 2003-2004
//
// Reworked to get rid of dead_keys (use of which in this case
// is a dirty hack). It is now not dependent on locale settings
// and GTK_IM_MODULES in Gnome. The map is also providing some of
// ISO9995-3 alternate characters. Note that this version works
// correctly under Gnome 2.6. This is to be put into symbols/
// directory, or somewhere else.
//
// Permission to use, copy, modify, distribute, and sell this software and its
// documentation for any purpose is hereby granted without fee, provided that
// the above copyright notice appear in all copies and that both that
// copyright notice and this permission notice appear in supporting
// documentation, and that the name of the copyright holder(s) not be used in
// advertising or publicity pertaining to distribution of the software without
// specific, written prior permission.  The copyright holder(s) makes no
// representations about the suitability of this software for any purpose.  It
// is provided "as is" without express or implied warranty.
//
// THE COPYRIGHT HOLDER(S) DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
// INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
// EVENT SHALL THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY SPECIAL, INDIRECT OR
// CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
// TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

// Modified by Aldis Berjoza <aldis@bsdroot.lv>, 12 april 2011
// Changes:
//   * Added Latvian Ergonomic, Latvian Adapted and Latvian Modern variants
//      Author of this work is Valdis Vītoliņš
//      http://odo.lv/LatvianKeyboard
//      http://odo.lv/Recipes/LatvianKeyboard#HErgonomiskC481stastatC5ABrasuzlikC5A1anauzLinuxdatora%22
//   * Added guillemotleft, leftdoublequotemark, guillemotright,
//      rightdoublequotemark to Latvian modern layout for AD11 and AD12
//   * Added US-Dvorac compatible Latvian layouts
//   * Added programmer US-Dvorac compatible Latvian layouts
//   * Added US-Colemak compatible Latvian layouts
//   * Reformatted layouts


//============================================================================
// Latvian QWERTY layout
// http://en.wikipedia.org/wiki/QWERTY
//
default partial alphanumeric_keys modifier_keys
xkb_symbols "basic" {

	name[Group1]= "Latvian";

	key <TLDE> {[ grave,		asciitilde,	acute,			asciitilde		]};
	key <AE01> {[ 1,		exclam,		onesuperior,		exclamdown		]};
	key <AE02> {[ 2,		at,		twosuperior,		oneeighth		]};
	key <AE03> {[ 3,		numbersign,	threesuperior,		sterling		]};
	key <AE04> {[ 4,		dollar,		EuroSign,		cent			]};
	key <AE05> {[ 5,		percent,	onehalf,		threeeighths		]};
	key <AE06> {[ 6,		asciicircum,	threequarters,		fiveeighths		]};
	key <AE07> {[ 7,		ampersand,	braceleft,		seveneighths		]};
	key <AE08> {[ 8,		asterisk,	bracketleft,		trademark		]};
	key <AE09> {[ 9,		parenleft,	bracketright,		plusminus		]};
	key <AE10> {[ 0,		parenright,	braceright,		degree			]};
	key <AE11> {[ minus,		underscore,	backslash,		questiondown		]};
	key <AE12> {[ equal,		plus,		endash,			emdash			]};

	key <AD01> {[ q,		Q,		q,			Q			]};
	key <AD02> {[ w,		W,		w,			W			]};
	key <AD03> {[ e,		E,		emacron,		Emacron			]};
	key <AD04> {[ r,		R,		rcedilla,		Rcedilla		]};
	key <AD05> {[ t,		T,		t,			T			]};
	key <AD06> {[ y,		Y,		y,			Y			]};
	key <AD07> {[ u,		U,		umacron,		Umacron			]};
	key <AD08> {[ i,		I,		imacron,		Imacron			]};
	key <AD09> {[ o,		O,		omacron,		Omacron			]};
	key <AD10> {[ p,		P,		p,			P			]};
	key <AD11> {[ bracketleft,	braceleft,	guillemotleft,		leftdoublequotemark	]};
	key <AD12> {[ bracketright,	braceright,	guillemotright,		rightdoublequotemark	]};

	key <AC01> {[ a,		A,		amacron,		Amacron			]};
	key <AC02> {[ s,		S,		scaron,			Scaron			]};
	key <AC03> {[ d,		D,		d,			D			]};
	key <AC04> {[ f,		F,		f,			F			]};
	key <AC05> {[ g,		G,		gcedilla,		Gcedilla		]};
	key <AC06> {[ h,		H,		h,			H			]};
	key <AC07> {[ j,		J,		j,			J			]};
	key <AC08> {[ k,		K,		kcedilla,		Kcedilla		]};
	key <AC09> {[ l,		L,		lcedilla,		Lcedilla		]};
	key <AC10> {[ semicolon,	colon,		semicolon,		colon			]};
	key <AC11> {[ apostrophe,	quotedbl,	leftdoublequotemark,	doublelowquotemark	]};

	key <AB01> {[ z,		Z,		zcaron,			Zcaron			]};
	key <AB02> {[ x,		X,		x,			X			]};
	key <AB03> {[ c,		C,		ccaron,			Ccaron			]};
	key <AB04> {[ v,		V,		v,			V			]};
	key <AB05> {[ b,		B,		b,			B			]};
	key <AB06> {[ n,		N,		ncedilla,		Ncedilla		]};
	key <AB07> {[ m,		M,		m,			M			]};
	key <AB08> {[ comma,		less,		horizconnector,		multiply		]};
	key <AB09> {[ period,		greater,	periodcentered,		division		]};
	key <AB10> {[ slash,		question,	slash,			abovedot		]};
	key <BKSL> {[ backslash,	bar,		grave,			breve			]};

	key <SPCE> {[ space,		space,		space,			space			]};

	include "level3(ralt_switch)"
};

partial alphanumeric_keys modifier_keys
xkb_symbols "apostrophe" {

	include "lv(basic)"

	name[Group1]= "Latvian (apostrophe)";

	key <AC11> {[ISO_Level3_Latch, quotedbl, apostrophe, quotedbl]};
	key <SPCE> {[space, space, apostrophe]};
	modifier_map Mod5 { <AC11> };
};

partial alphanumeric_keys modifier_keys
xkb_symbols "tilde" {

	include "lv(basic)"

	name[Group1]= "Latvian (tilde)";

	key <TLDE> {[ISO_Level3_Latch, asciitilde, grave, acute]};
	key <SPCE> {[space, space, asciitilde]};
	modifier_map Mod5 { <TLDE> };
};

partial alphanumeric_keys modifier_keys
xkb_symbols "fkey" {

	include "lv(basic)"

	name[Group1]= "Latvian (F)";

	key <AC04> {[ISO_Level3_Latch, ISO_Level3_Latch, f, F]};
	key <SPCE> {[space, space, f, F]};
	modifier_map Mod5 { <AC04> };
};

//============================================================================
// Latvian Adapted keyboard layout
// http://odo.lv/xwiki/bin/download/Main/LatvianKeyboard/Adapted.png
//
// http://odo.lv/LatvianKeyboard
// http://odo.lv/LatvianKeyboard5
//
partial alphanumeric_keys modifier_keys
xkb_symbols "adapted" {

	include "lv(basic)"

	name[Group1]= "Latvian (adapted)";

	key <AE02> {[ 2,		Ccaron,		at,		twosuperior	]};
	key <AE03> {[ 3,		ccaron,		numbersign,	threesuperior	]};
	key <AE04> {[ 4,		Zcaron,		dollar,		EuroSign	]};
	key <AE05> {[ 5,		zcaron,		percent,	onehalf		]};

	key <AD01> {[ scaron,		Scaron,		q,		Q		]};
	key <AD02> {[ emacron,		Emacron,	w,		W		]};
	key <AD03> {[ e,		E,		e,		E		]};

	key <AD06> {[ amacron,		Amacron,	y,		Y		]};
	key <AD07> {[ u,		U,		u,		U		]};
	key <AD08> {[ i,		I,		i,		I		]};
	key <AD11> {[ umacron,		Umacron,	bracketleft,	braceleft	]};
	key <AD12> {[ ncedilla,		Ncedilla,	bracketright,	braceright	]};

	key <AC01> {[ a,		A,		a,		A		]};
	key <AC02> {[ s,		S,		s,		S		]};
	key <AC05> {[ g,		G,		g,		G		]};

	key <AC08> {[ k,		K,		k,		K		]};
	key <AC09> {[ l,		L,		l,		L		]};
	key <AC10> {[ imacron,		Imacron,	semicolon,	colon		]};

	key <AB01> {[ z,		Z,		z,		Z		]};
	key <AB02> {[ kcedilla,		Kcedilla,	x,		X		]};
	key <AB03> {[ c,		C,		c,		C		]};

	key <AB06> {[ n,		N,		n,		N		]};

	key <AB08> {[ comma,		gcedilla,	less,		multiply	]};
	key <AB09> {[ period,		Gcedilla,	greater,	division	]};
	key <AB10> {[ lcedilla,		Lcedilla,	slash,		question	]};
};

//============================================================================
// Latvian Ergonomic (ŪGJRMV) keyboard layout by Valdis Vītoliņš
// http://odo.lv/xwiki/bin/download/Main/LatvianKeyboard/Ergonomic.png
//
// http://odo.lv/LatvianKeyboard
// http://odo.lv/LatvianKeyboard5
//
partial alphanumeric_keys modifier_keys
xkb_symbols "ergonomic" {

	include "lv(apostrophe)"

	name[Group1]= "Latvian (ergonomic, ŪGJRMV)";

	key <AE02> {[ 2,		at,		gcedilla,	Gcedilla	]};

	key <AE11> {[ minus,		underscore,	endash,		emdash		]};
	key <AE12> {[ f,		F,		equal,		plus		]};

	key <AD01> {[ umacron,		Umacron,	q,		Q		]};
	key <AD02> {[ g,		G,		g,		G		]};
	key <AD03> {[ j,		J,		j,		J		]};
	key <AD04> {[ r,		R,		rcedilla,	Rcedilla	]};
	key <AD05> {[ m,		M,		m,		M		]};
	key <AD06> {[ v,		V,		w,		W		]};
	key <AD07> {[ n,		N,		y,		Y		]};
	key <AD08> {[ z,		Z,		z,		Z		]};
	key <AD09> {[ emacron,		Emacron,	emacron,	Emacron		]};
	key <AD10> {[ ccaron,		Ccaron,		ccaron,		Ccaron		]};
	key <AD11> {[ zcaron,		Zcaron,		bracketleft,	braceleft	]};
	key <AD12> {[ h,		H,		bracketright,	braceright	]};

	key <AC01> {[ scaron,		Scaron,		scaron,		Scaron		]};
	key <AC02> {[ u,		U,		u,		U		]};
	key <AC03> {[ s,		S,		s,		S		]};
	key <AC04> {[ i,		I,		i,		I		]};
	key <AC05> {[ l,		L,		l,		L		]};
	key <AC06> {[ d,		D,		d,		D		]};
	key <AC07> {[ a,		A,		a,		A		]};
	key <AC08> {[ t,		T,		t,		T		]};
	key <AC09> {[ e,		E,		e,		E		]};
	key <AC10> {[ c,		C,		c,		C		]};
	key <AC11> {[ ISO_Level3_Latch,	quotedbl,	apostrophe,	quotedbl	]};
	key <AC12> {[ kcedilla,		Kcedilla,	slash,		backslash	]};

	key <LSGT> {[ gcedilla,		Gcedilla,	gcedilla,	Gcedilla	]};
	key <AB01> {[ ncedilla,		Ncedilla,	ncedilla,	Ncedilla	]};
	key <AB02> {[ b,		B,		x,		X		]};
	key <AB03> {[ imacron,		Imacron,	imacron,	Imacron		]};
	key <AB04> {[ k,		K,		k,		K		]};
	key <AB05> {[ p,		P,		p,		P		]};
	key <AB06> {[ o,		O,		omacron,	Omacron		]};
	key <AB07> {[ amacron,		Amacron,	amacron,	Amacron		]};
	key <AB08> {[ comma,		semicolon,	less,		multiply	]};
	key <AB09> {[ period,		colon,		greater,	division	]};
	key <AB10> {[ lcedilla,		Lcedilla,	question,	slash		]};
};

//============================================================================
// Latvian Modern keyboard layout by Valdis Vītoliņš
// http://odo.lv/xwiki/bin/download/Recipes/LatvianKeyboard/Modern.png
//
// http://odo.lv/LatvianKeyboard
// http://odo.lv/LatvianKeyboard5
//
partial alphanumeric_keys modifier_keys
xkb_symbols "modern" {

	name[Group1]= "Latvian (modern)";

	key <TLDE> {[ grave,		asciitilde,	acute,		copyright		]};
	key <AE01> {[ 1,		exclam,		onesuperior,	exclamdown		]};
	key <AE02> {[ 2,		at,		twosuperior,	oneeighth		]};
	key <AE03> {[ 3,		numbersign,	threesuperior,	sterling		]};
	key <AE04> {[ 4,		dollar,		EuroSign,	cent			]};
	key <AE05> {[ 5,		percent,	onehalf,	threeeighths		]};
	key <AE06> {[ 6,		asciicircum,	threequarters,	fiveeighths		]};
	key <AE07> {[ 7,		ampersand,	braceleft,	seveneighths		]};
	key <AE08> {[ 8,		asterisk,	bracketleft,	trademark		]};
	key <AE09> {[ 9,		parenleft,	bracketright,	plusminus		]};
	key <AE10> {[ 0,		parenright,	braceright,	degree			]};
	key <AE11> {[ minus,		underscore,	backslash,	questiondown		]};
	key <AE12> {[ equal,		plus,		endash,		emdash			]};

	key <AD01> {[ emacron,		Emacron,	emacron,	Emacron			]};
	key <AD02> {[ o,		O,		omacron,	Omacron			]};
	key <AD03> {[ amacron,		Amacron,	amacron,	Amacron			]};
	key <AD04> {[ p,		P,		question,	P			]};
	key <AD05> {[ b,		B,		exclam,		B			]};
	key <AD06> {[ j,		J,		emdash,		J			]};
	key <AD07> {[ d,		D,		endash,		D			]};
	key <AD08> {[ imacron,		Imacron,	imacron,	Imacron			]};
	key <AD09> {[ l,		L,		lcedilla,	Lcedilla		]};
	key <AD10> {[ g,		G,		gcedilla,	Gcedilla		]};
	Key <AD11> {[ bracketleft,	braceleft,	guillemotleft,	leftdoublequotemark	]};
	key <AD12> {[ bracketright,	braceright,	guillemotright,	rightdoublequotemark	]};

	key <AC01> {[ e,		E,		e,		E			]};
	key <AC02> {[ u,		U,		umacron,	Umacron			]};
	key <AC03> {[ a,		A,		a,		A			]};
	key <AC04> {[ n,		N,		ncedilla,	Ncedilla		]};
	key <AC05> {[ k,		K,		kcedilla,	Kcedilla		]};
	key <AC06> {[ ISO_Level3_Latch,	quotedbl,	apostrophe,	quotedbl		]};
	key <AC07> {[ s,		S,		scaron,		Scaron			]};
	key <AC08> {[ i,		I,		i,		I			]};
	key <AC09> {[ t,		T,		t,		T			]};
	key <AC10> {[ r,		R,		rcedilla,	Rcedilla		]};
	key <AC11> {[ m,		M,		m,		M			]};
	key <BKSL> {[ slash,		question,	backslash,	bar			]};

	key <LSGT> {[ q,		Q,		q,		Q			]};
	key <AB01> {[ x,		X,		q,		Q			]};
	key <AB02> {[ z,		Z,		zcaron,		Zcaron			]};
	key <AB03> {[ c,		C,		ccaron,		Ccaron			]};
	key <AB04> {[ v,		V,		bar,		V			]};
	key <AB05> {[ w,		W,		backslash,	W			]};
	key <AB06> {[ f,		F,		period,		F			]};
	key <AB07> {[ y,		Y,		U0233,		U0232			]};
	key <AB08> {[ h,		H,		U1E29,		U1E28			]};
	key <AB09> {[ comma,		semicolon,	less,		multiply		]};
	key <AB10> {[ period,		colon,		greater,	division		]};
	key <SPCE> {[ space,		space,		apostrophe				]};

	modifier_map Mod5 { <AC06> };

	include "level3(ralt_switch)"
};

// EXTRAS:

//============================================================================
// US Dvorak compatible Latvian layout
// http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard
//
partial alphanumeric_keys modifier_keys
xkb_symbols "dvorak" {

	name[Group1]= "Latvian (Dvorak)";

	key <TLDE> {[ asciitilde,	grave,		acute,			asciitilde		]};
	key <AE01> {[ 1,		exclam,		onesuperior,		exclamdown		]};
	key <AE02> {[ 2,		at,		twosuperior,		oneeighth		]};
	key <AE03> {[ 3,		numbersign,	threesuperior,		sterling		]};
	key <AE04> {[ 4,		dollar,		EuroSign,		cent			]};
	key <AE05> {[ 5,		percent,	onehalf,		threeeighths		]};
	key <AE06> {[ 6,		asciicircum,	threequarters,		fiveeighths		]};
	key <AE07> {[ 7,		ampersand,	braceleft,		seveneighths		]};
	key <AE08> {[ 8,		asterisk,	bracketleft,		trademark		]};
	key <AE09> {[ 9,		parenleft,	bracketright,		plusminus		]};
	key <AE10> {[ 0,		parenright,	braceright,		degree			]};
	key <AE11> {[ bracketleft,	braceleft,	leftdoublequotemark,	guillemotleft		]};
	key <AE12> {[ bracketright,	braceright,	rightdoublequotemark,	guillemotright		]};

	key <AD01> {[ apostrophe,	quotedbl,	leftdoublequotemark,	doublelowquotemark	]};
	key <AD02> {[ comma,		less,		guillemotleft,		multiply		]};
	key <AD03> {[ period,		greater,	guillemotright,		division		]};
	key <AD04> {[ p,		P,		p,			P			]};
	key <AD05> {[ y,		Y,		y,			Y			]};
	key <AD06> {[ f,		F,		f,			F			]};
	key <AD07> {[ g,		G,		gcedilla,		Gcedilla		]};
	key <AD08> {[ c,		C,		ccaron,			Ccaron			]};
	key <AD09> {[ r,		R,		rcedilla,		Rcedilla		]};
	key <AD10> {[ l,		L,		lcedilla,		Lcedilla		]};
	key <AD11> {[ slash,		question,	slash,			abovedot		]};
	key <AD12> {[ equal,		plus,		endash,			emdash			]};

	key <AC01> {[ a,		A,		amacron,		Amacron			]};
	key <AC02> {[ o,		O,		omacron,		Omacron			]};
	key <AC03> {[ e,		E,		emacron,		Emacron			]};
	key <AC04> {[ u,		U,		umacron,		Umacron			]};
	key <AC05> {[ i,		I,		imacron,		Imacron			]};
	key <AC06> {[ d,		D,		d,			D			]};
	key <AC07> {[ h,		H,		h,			H			]};
	key <AC08> {[ t,		T,		t,			T			]};
	key <AC09> {[ n,		N,		ncedilla,		Ncedilla		]};
	key <AC10> {[ s,		S,		scaron,			Scaron			]};
	key <AC11> {[ minus,		underscore,	backslash,		questiondown		]};

	key <AB01> {[ semicolon,	colon,		semicolon,		colon			]};
	key <AB02> {[ q,		Q,		q,			Q			]};
	key <AB03> {[ j,		J,		j,			J			]};
	key <AB04> {[ k,		K,		kcedilla,		Kcedilla		]};
	key <AB05> {[ x,		X,		x,			X			]};
	key <AB06> {[ b,		B,		b,			B			]};
	key <AB07> {[ m,		M,		m,			M			]};
	key <AB08> {[ w,		W,		w,			W			]};
	key <AB09> {[ v,		V,		v,			V			]};
	key <AB10> {[ z,		Z,		zcaron,			Zcaron			]};

	key <BKSL> {[ backslash,	bar,		grave,			breve			]};

	key <SPCE> {[ space,		space,		space,			space			]};

	include "level3(ralt_switch)"
};

partial alphanumeric_keys modifier_keys
xkb_symbols "ykeydvorak" {

	include "lv(dvorak)"

	name[Group1]= "Latvian (Dvorak, with Y)";

	key <AD05> {[ISO_Level3_Latch, ISO_Level3_Latch, y, Y]};
	key <SPCE> {[space, space, y, Y]};
	modifier_map Mod5 { <AD05> };
};

partial alphanumeric_keys modifier_keys
xkb_symbols "minuskeydvorak" {

	include "lv(dvorak)"

	name[Group1]= "Latvian (Dvorak, with minus)";

	key <AC11> {[ISO_Level3_Latch, ISO_Level3_Latch, minus, underscore]};
	key <SPCE> {[space, space, minus, underscore]};
	modifier_map Mod5 { <AR11> };
};

//============================================================================
// US Dvorak programmers layput compatible Latvian layout
// http://www.kaufmann.no/roland/dvorak/
//
partial alphanumeric_keys modifier_keys
xkb_symbols "dvorakprogr" {

	include "lv(dvorak)"

	name[Group1]= "Latvian (programmer Dvorak)";

	key <TLDE> {[ dollar,		asciitilde,	EuroSign,		cent			]};
	key <AE01> {[ ampersand,	percent,	acute,			asciitilde		]};
	key <AE02> {[ bracketleft,	7,		onesuperior,		twosuperior		]};
	key <AE03> {[ braceleft,	5,		guillemotleft,		leftdoublequotemark	]};
	key <AE04> {[ braceright,	3,		guillemotright,		rightdoublequotemark	]};
	key <AE05> {[ parenleft,	1,		onehalf,		threeeighths		]};
	key <AE06> {[ equal,		9,		threequarters,		fiveeighths		]};
	key <AE07> {[ asterisk,		0,		degree,			copyright		]};
	key <AE08> {[ parenright,	2,		endash,			emdash			]};
	key <AE09> {[ plus,		4,		plusminus,		section			]};
	key <AE10> {[ bracketright,	6,		registered,		trademark		]};
	key <AE11> {[ exclam,		8,		exclam,			exclamdown		]};
	key <AE12> {[ numbersign,	grave,		Greek_alpha,		Greek_beta		]};

	key <AD01> {[ semicolon,	colon,		semicolon,		colon			]};
	key <AD12> {[ at,		asciicircum,	at,			asciicircum		]};

	key <AB01> {[ apostrophe,	quotedbl,	leftdoublequotemark,	doublelowquotemark	]};

	include "level3(ralt_switch)"
};

partial alphanumeric_keys modifier_keys
xkb_symbols "ykeydvorakprogr" {

	include "lv(dvorakprogr)"

	name[Group1]= "Latvian (programmer Dvorak, with Y)";

	key <AD05> {[ISO_Level3_Latch, ISO_Level3_Latch, y, Y]};
	key <SPCE> {[space, space, y, Y]};
	modifier_map Mod5 { <AD05> };
};

partial alphanumeric_keys modifier_keys
xkb_symbols "minuskeydvorakprogr" {

	include "lv(dvorakprogr)"

	name[Group1]= "Latvian (programmer Dvorak, with minus)";

	key <AC11> {[ISO_Level3_Latch, ISO_Level3_Latch, minus, underscore]};
	key <SPCE> {[space, space, minus, underscore]};
	modifier_map Mod5 { <AC11> };
};

//============================================================================
// Colemak compatible Latvian layout
// http://colemak.com/
//
partial alphanumeric_keys modifier_keys
xkb_symbols "colemak" {

	include "lv(basic)"

	name[Group1]= "Latvian (Colemak)";

	key <AD03> {[ f,		F,		f,			F			]};
	key <AD04> {[ p,		P,		p,			P			]};
	key <AD05> {[ g,		G,		gcedilla,		Gcedilla		]};
	key <AD06> {[ j,		J,		j,			J			]};
	key <AD07> {[ l,		L,		lcedilla,		Lcedilla		]};
	key <AD08> {[ u,		U,		umacron,		Umacron			]};
	key <AD09> {[ y,		Y,		y,			Y			]};
	key <AD10> {[ semicolon,	colon,		semicolon,		colon			]};

	key <AC02> {[ r,		R,		rcedilla,		Rcedilla		]};
	key <AC03> {[ s,		S,		scaron,			Scaron			]};
	key <AC04> {[ t,		T,		t,			T			]};
	key <AC05> {[ d,		D,		d,			D			]};
	key <AC07> {[ n,		N,		ncedilla,		Ncedilla		]};
	key <AC08> {[ e,		E,		emacron,		Emacron			]};
	key <AC09> {[ i,		I,		imacron,		Imacron			]};
	key <AC10> {[ o,		O,		omacron,		Omacron			]};

	key <AB06> {[ k,		K,		kcedilla,		Kcedilla		]};

	include "level3(ralt_switch)"
};

partial alphanumeric_keys modifier_keys
xkb_symbols "apostrophecolemak" {

	include "lv(colemak)"

	name[Group1]= "Latvian (Colemak, with apostrophe)";

	key <AC11> {[ISO_Level3_Latch, quotedbl, apostrophe, quotedbl]};
	key <SPCE> {[space, space, apostrophe]};
	modifier_map Mod5 { <AC11> };
};

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/lv(sun_type6)"
};
// Based on <http://eurkey.steffen.bruentjen.eu/>
// Copyright 2012 Steffen Bruentjen (eurkey (at) steffen dot bruentjen dot de)

default partial alphanumeric_keys modifier_keys
xkb_symbols "basic"  {

        name[Group1] = "EurKEY (US)";

        key <TLDE> { [          grave,        asciitilde,           dead_grave,           dead_tilde ] };
        key <AE01> { [              1,            exclam,           exclamdown,          onesuperior ] };
        key <AE02> { [              2,                at,          ordfeminine,          twosuperior ] };
        key <AE03> { [              3,        numbersign,            masculine,        threesuperior ] };
        key <AE04> { [              4,            dollar,             sterling,                  yen ] };
        key <AE05> { [              5,           percent,             EuroSign,                 cent ] };
        key <AE06> { [              6,       asciicircum,      dead_circumflex,           dead_caron ] };
        key <AE07> { [              7,         ampersand,       dead_abovering,          dead_macron ] };
        key <AE08> { [              8,          asterisk,   doublelowquotemark,   singlelowquotemark ] };
        key <AE09> { [              9,         parenleft,  leftdoublequotemark,  leftsinglequotemark ] };
        key <AE10> { [              0,        parenright, rightdoublequotemark, rightsinglequotemark ] };
        key <AE11> { [          minus,        underscore,                U2713,                U2717 ] };
        key <AE12> { [          equal,              plus,             multiply,             division ] };

        key <AD01> { [              q,                 Q,                   ae,                   AE ] };
        key <AD02> { [              w,                 W,                aring,                Aring ] };
        key <AD03> { [              e,                 E,           ediaeresis,           Ediaeresis ] };
        key <AD04> { [              r,                 R,               yacute,               Yacute ] };
        key <AD05> { [              t,                 T,                thorn,                Thorn ] };
        key <AD06> { [              y,                 Y,           ydiaeresis,           Ydiaeresis ] };
        key <AD07> { [              u,                 U,           udiaeresis,           Udiaeresis ] };
        key <AD08> { [              i,                 I,           idiaeresis,           Idiaeresis ] };
        key <AD09> { [              o,                 O,           odiaeresis,           Odiaeresis ] };
        key <AD10> { [              p,                 P,                   oe,                   OE ] };
        key <AD11> { [    bracketleft,         braceleft,        guillemotleft,                U2039 ] };
        key <AD12> { [   bracketright,        braceright,       guillemotright,                U203A ] };
        key <BKSL> { [      backslash,               bar,              notsign,            brokenbar ] };

        key <AC01> { [              a,                 A,           adiaeresis,           Adiaeresis ] };
        key <AC02> { [              s,                 S,               ssharp,                U1E9E ] };
        key <AC03> { [              d,                 D,                  eth,                  Eth ] };
        key <AC04> { [              f,                 F,               egrave,               Egrave ] };
        key <AC05> { [              g,                 G,               eacute,               Eacute ] };
        key <AC06> { [              h,                 H,               ugrave,               Ugrave ] };
        key <AC07> { [              j,                 J,               uacute,               Uacute ] };
        key <AC08> { [              k,                 K,                U0133,                U0132 ] };
        key <AC09> { [              l,                 L,               oslash,               Oslash ] };
        key <AC10> { [      semicolon,             colon,               degree,       periodcentered ] };
        key <AC11> { [     apostrophe,          quotedbl,           dead_acute,       dead_diaeresis ] };

        key <AB01> { [              z,                 Z,               agrave,               Agrave ] };
        key <AB02> { [              x,                 X,               aacute,               Aacute ] };
        key <AB03> { [              c,                 C,             ccedilla,             Ccedilla ] };
        key <AB04> { [              v,                 V,               igrave,               Igrave ] };
        key <AB05> { [              b,                 B,               iacute,               Iacute ] };
        key <AB06> { [              n,                 N,               ntilde,               Ntilde ] };
        key <AB07> { [              m,                 M,           dead_greek,           squareroot ] };
        key <AB08> { [          comma,              less,               ograve,               Ograve ] };
        key <AB09> { [         period,           greater,               oacute,               Oacute ] };
        key <AB10> { [          slash,          question,         questiondown,            0x1002026 ] };

        include "level3(ralt_switch)"
};
// Cancel CapsLock when a Shift key is pressed.
partial modifier_keys
xkb_symbols "breaks_caps" {
    key <LFSH> {
	type = "ALPHABETIC",
    	actions [Group1] = [
	    SetMods(modifiers=Shift),
	    SetMods(modifiers=Shift+Lock,clearLocks)
	]
    };
    key <RTSH> {
	type = "ALPHABETIC",
	actions [Group1] = [
	    SetMods(modifiers=Shift),
	    SetMods(modifiers=Shift+Lock,clearLocks)
	]
    };
};


// Toggle CapsLock when pressed together with the other Shift key.
partial modifier_keys
xkb_symbols "lshift_both_capslock" {
  key <LFSH> {
    type[Group1]="TWO_LEVEL",
    symbols[Group1] = [ Shift_L, Caps_Lock ]
  };
};
// Toggle CapsLock when pressed together with the other Shift key.
partial modifier_keys
xkb_symbols "rshift_both_capslock" {
  key <RTSH> {
    type[Group1]="TWO_LEVEL",
    symbols[Group1] = [ Shift_R, Caps_Lock ]
  };
};
partial modifier_keys
xkb_symbols "both_capslock" {
  include "shift(lshift_both_capslock)"
  include "shift(rshift_both_capslock)"
};


// Set CapsLock when pressed with the other Shift key, release it when pressed alone.
partial modifier_keys
xkb_symbols "lshift_both_capslock_cancel" {
  key <LFSH> {
    type[Group1]="ALPHABETIC",
    symbols[Group1] = [ Shift_L, Caps_Lock ]
  };
};
// Set CapsLock when pressed with the other Shift key, release it when pressed alone.
partial modifier_keys
xkb_symbols "rshift_both_capslock_cancel" {
  key <RTSH> {
    type[Group1]="ALPHABETIC",
    symbols[Group1] = [ Shift_R, Caps_Lock ]
  };
};
partial modifier_keys
xkb_symbols "both_capslock_cancel" {
  include "shift(lshift_both_capslock_cancel)"
  include "shift(rshift_both_capslock_cancel)"
};


// Toggle ShiftLock when pressed together with the other Shift key.
partial modifier_keys
xkb_symbols "lshift_both_shiftlock" {
  key <LFSH> {
    type[Group1]="TWO_LEVEL",
    symbols[Group1] = [ Shift_L, Shift_Lock ]
  };
};
// Toggle ShiftLock when pressed together with the other Shift key.
partial modifier_keys
xkb_symbols "rshift_both_shiftlock" {
  key <RTSH> {
    type[Group1]="TWO_LEVEL",
    symbols[Group1] = [ Shift_R, Shift_Lock ]
  };
};
partial modifier_keys
xkb_symbols "both_shiftlock" {
  include "shift(lshift_both_shiftlock)"
  include "shift(rshift_both_shiftlock)"
};
//
// Default Australian is the same as American
//
default partial alphanumeric_keys
xkb_symbols "basic" {
    include "us(basic)"

    name[Group1]= "English (Australian)";
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin"

    name[Group1]="Wolof";

    key <AE01>	{ [ ampersand,          1,          bar,     NoSymbol ]	};
    key <AE02>	{ [    eacute,          2,   asciitilde,       Eacute ]	};
    key <AE03>	{ [  quotedbl,          3,   numbersign,      cedilla ]	};
    key <AE04>	{ [apostrophe,          4,    braceleft,        acute ]	};
    key <AE05>	{ [ parenleft,          5,  bracketleft,    diaeresis ]	};
    key <AE06>	{ [     minus,          6,          bar,    brokenbar ]	};
    key <AE07>	{ [    egrave,          7,   dead_grave,       Egrave ]	};
    key <AE08>	{ [underscore,          8,    backslash,       macron ]	};
    key <AE09>	{ [  ccedilla,          9,  asciicircum,     Ccedilla ]	};
    key <AE10>	{ [    agrave,          0,           at,       Agrave ]	};
    key <AE11>	{ [parenright,     degree, bracketright,   ydiaeresis ]	};
    key <AE12>	{ [     equal,       plus,   braceright,threequarters ]	};

    key <AD01>	{ [         a,          A,           ae,           AE ]	};
    key <AD02>	{ [         z,          Z, guillemotleft,        less ]	};
    key <AD03>	{ [         e,          E,     EuroSign,         cent ]	};
    key <AD11>	{ [       eng,        ENG,  bracketleft, bracketright ] };
    key <AD12>	{ [    dollar,   sterling,     currency,  ecircumflex ]	};

    key <AC01>	{ [         q,          Q,           at,  Greek_OMEGA ]	};
    key <AC10>	{ [         m,          M,           mu,    masculine ]	};
    key <AC11>	{ [    ntilde,     Ntilde,        acute,   dead_acute ]	};
    key <TLDE>	{ [twosuperior,   percent,      notsign,      notsign ]	};

    key <BKSL>	{ [        mu,   sterling,        grave,   dead_grave ]	};
    key <AB01>	{ [         w,          W,      lstroke,      Lstroke ]	};
    key <AB07>	{ [     comma,   question, questiondown,     NoSymbol ] };
    key <AB08>	{ [ semicolon,     period, horizconnector,   multiply ]	};
    key <AB09>	{ [     colon,      slash, periodcentered,   division ]	};
    key <AB10>	{ [    exclam,    section,   exclamdown,     NoSymbol ] };

    key <LSGT>	{ [      less,    greater,          bar,     NoSymbol ] };

    include "level3(ralt_switch)"
};
// based on a keyboard map from an 'xkb/symbols/no' file

default partial alphanumeric_keys
xkb_symbols "basic" {

    // Describes the differences between a very simple en_US
    // keyboard and a Norwegian keyboard with dead key support
    // and all of ISO-8859-1 characters available.

    include "latin(type2)"

    name[Group1]="Norwegian";

    key <AB09>	{ [    period,      colon,   ellipsis, periodcentered ]	};
    key <AB10>	{ [     minus, underscore,       endash,       emdash ]	};
    key <AD04>	{ [         r,          R,   registered,    trademark ]	};
    key <AD10>	{ [         p,          P,     Greek_pi,     Greek_PI ]	};
    key <AE05>	{ [         5,    percent,      onehalf,    0x1002030 ]	};

    key <AE11>	{ [      plus,   question,    plusminus, questiondown ]	};
    key <AE12>	{ [ backslash, dead_grave,   dead_acute,      notsign ]	};


    key <AC10>	{ [    oslash,   Ooblique,   dead_acute, dead_doubleacute ] };
    key <AC11>	{ [        ae,         AE, dead_circumflex, dead_caron]	};
    key <TLDE>	{ [       bar,    section,    brokenbar,    paragraph ]	};

    key <BKSL>	{ [apostrophe,   asterisk, dead_doubleacute, multiply ]	};
    key <LSGT>	{ [      less,    greater,      onehalf, threequarters]	};

    include "nbsp(level3n)"
    include "keypad(ossmath)"
    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // Modifies the basic Norwegian layout to no dead keys

    include "no(basic)"

    name[Group1]="Norwegian (no dead keys)";

    key <AE12>	{ [ backslash,      grave,        acute,       ogonek ]	};
    key <AD12>	{ [ diaeresis, asciicircum,  asciitilde,       macron ]	};
    key <AC10>	{ [    oslash,   Ooblique,        acute,  doubleacute ]	};
    key <AC11>	{ [        ae,         AE,  asciicircum,        caron ]	};
    key <AB08>	{ [     comma,  semicolon,      cedilla,       ogonek ]	};
    key <AB09>	{ [    period,      colon, periodcentered,   abovedot ]	};
};

partial alphanumeric_keys
xkb_symbols "winkeys" {

     include "no(basic)"
     name[Group1]="Norwegian (Windows)";
     include "eurosign(5)"
};

// Norwegian Dvorak
partial alphanumeric_keys
xkb_symbols "dvorak" {
    include "us(dvorak)"

    name[Group1]="Norwegian (Dvorak)";

    key <TLDE> { [	  bar,	section, brokenbar, paragraph	] };

    key <AE01> { [	    1,	exclam, exclamdown, onesuperior	] };
    key <AE02> { [	    2,	quotedbl,   at,     twosuperior	] };
    key <AE03> { [	    3,	numbersign, sterling, threesuperior ] };
    key <AE04> { [	    4,	currency,   dollar,  onequarter	] };
    key <AE05> { [	    5,	percent,    onehalf,	onehalf	] };
    key <AE06> { [	    6,	ampersand,  threequarters, threequarters ] };
    key <AE07> { [	    7,	slash,      braceleft, division	] };
    key <AE08> { [	    8,	parenleft,  bracketleft		] };
    key <AE09> { [	    9,	parenright, bracketright	] };
    key <AE10> { [	    0,	equal,	    braceright		] };
    key <AE11> { [	 plus,	question,   plusminus, questiondown ] };
    key <AE12> { [  backslash,	grave,	    dead_acute,	dead_grave ] };

    key <AD01> { [       aring,	Aring,  braceright, bracketright ] };
    key <AD02> { [	comma,	semicolon, dead_cedilla, cedilla ] };
    key <AD03> { [      period,	colon,  periodcentered		 ] };
    key <AD04> { [	    p,	P,      thorn,	THORN		 ] };
    key <AD05> { [	    y,	Y,      yen			 ] };
    key <AD06> { [	    f,	F,      ordfeminine		 ] };
    key <AD08> { [	    c,	C,      ccedilla, copyright	 ] };
    key <AD09> { [	    r,	R,      registered		 ] };
    key <AD11> { [  apostrophe,	asterisk, dead_circumflex, acute ] };
    key <AD12> { [dead_diaeresis, dead_circumflex, dead_tilde, dead_caron ] };

    key <AC03> { [	    e,	E,      EuroSign,	cent	 ] };
    key <AC05> { [	    i,	I,      idotless,       Iabovedot] };
    key <AC06> { [	    d,	D,      eth,		ETH	 ] };
    key <AC10> { [	    s,	S,      ssharp,		U1E9E	 ] };
    key <AC11> { [	minus,	underscore, hyphen,	diaeresis] };

    key <AB01> { [	   ae,	AE,     braceleft,	bracketleft] };
    key <AB05> { [	    x,	X,      multiply		 ] };
    key <AB07> { [	    m,	M,	mu			 ] };
    key <BKSL> { [	 less,	greater, guillemotleft, guillemotright	] };

    key <SPCE> { [	 space,	space, nobreakspace, nobreakspace] };

    key <LSGT> { [	oslash,	Ooblique,  bar,	backslash	 ] };

    // fixed https://bugs.freedesktop.org/show_bug.cgi?id=4397
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "smi" {

    // Northern Sami keyboards for Finland, Norway and Sweden
    //
    // Describes the differences between a very simple en_US
    // keyboard and a Norwegian Northern Sami keyboard (with
    // dead-key support) according to the spec on
    // http://www.hum.uit.no/a/trond/se-lat9-no-keys.html
    // Written by Børre Gaup <boerre.gaup@pc.nu>.

    include "latin"

    name[Group1]= "Northern Saami (Norway)";

    key <AE01>	{ [         1,     exclam,    copyright,   exclamdown ]	};
    key <AE02>	{ [         2,   quotedbl,           at,   registered ]	};
    key <AE03>	{ [         3, numbersign,     sterling,         less ]	};
    key <AE04>	{ [         4,     dollar,       dollar,      greater ]	};
    key <AE05>	{ [         5,    percent,        U2022,        U2030 ]	};
    key <AE06>	{ [         6,  ampersand,      section,    paragraph ]	};
    key <AE07>	{ [         7,      slash,    braceleft,          bar ]	};
    key <AE08>	{ [         8,  parenleft,  bracketleft,    braceleft ]	};
    key <AE09>	{ [         9, parenright, bracketright,   braceright ]	};
    key <AE10>	{ [         0,      equal,   braceright,     notequal ]	};
    key <AE11>	{ [      plus,   question,     division, questiondown ]	};
    key <AE12>	{ [ backslash,      grave,        acute,   asciitilde ]	};

    key <AD01>	{ [    aacute,     Aacute,            q,            Q ]	};
    key <AD02>	{ [    scaron,     Scaron,            w,            W ]	};
    key <AD03>	{ [         e,          E,       eacute,       Eacute ]	};
    key <AD04>	{ [         r,          R,   registered,    trademark ]	};
    key <AD06>	{ [         y,          Y,       yacute,       Yacute ]	};
    key <AD07>	{ [         u,          U,   udiaeresis,   Udiaeresis ]	};
    key <AD08>	{ [         i,          I,   idiaeresis,   Idiaeresis ]	};
    key <AD09>	{ [         o,          O,           oe,           OE ]	};
    key <AD11>	{ [     aring,      Aring,  acircumflex,  Acircumflex ]	};
    key <AD12>	{ [       eng,        ENG,     quotedbl,  asciicircum ]	};

    key <AC01>	{ [         a,          A,       agrave,       Agrave ]	};
    key <AC02>	{ [         s,          S,       ssharp,   apostrophe ]	};
    key <AC04>	{ [         f,          F,  ordfeminine,  ordfeminine ]	};
    key <AC05>	{ [         g,          G,       gcaron,       Gcaron ]	};
    key <AC06>	{ [         h,          H,        U01E5,        U01E4 ]	};
    key <AC07>	{ [         j,          J,      notsign,     multiply ]	};
    key <AC08>	{ [         k,          K,        U01E9,        U01E8 ]	};
    key <AC09>	{ [         l,          L,       degree,       hyphen ]	};
    key <AC10>	{ [    oslash,   Ooblique,   odiaeresis,   Odiaeresis ]	};
    key <AC11>	{ [        ae,         AE,   adiaeresis,   Adiaeresis ]	};
    key <TLDE>	{ [       bar,    section,    brokenbar,    paragraph ]	};

    key <BKSL>	{ [   dstroke,    Dstroke,   apostrophe,     asterisk ]	};
    key <AB01>	{ [         z,          Z,        U0292,        U01B7 ]	};
    key <AB02>	{ [    ccaron,     Ccaron,            x,            X ]	};
    key <AB03>	{ [         c,          C,     ccedilla,     Ccedilla ]	};
    key <AB04>	{ [         v,          V, lessthanequal, guillemotleft ] };
    key <AB05>	{ [         b,          B, greaterthanequal, guillemotright ] };
    key <AB06>	{ [         n,          N, leftsinglequotemark, leftdoublequotemark ] };
    key <AB07>	{ [         m,          M, rightsinglequotemark, rightdoublequotemark ]	};
    key <AB08>	{ [     comma,  semicolon, singlelowquotemark, doublelowquotemark ] };
    key <AB09>	{ [    period,      colon,     ellipsis, periodcentered ] };
    key <AB10>	{ [     minus, underscore,       endash,       emdash ]	};

    key <LSGT>	{ type[Group1] = "FOUR_LEVEL",
                  [    zcaron,     Zcaron,        U01EF,        U01EE ]	};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "smi_nodeadkeys" {

    // Modifies the basic Norwegian layout to no dead keys

    include "no(smi)"

    name[Group1]= "Northern Saami (Norway, no dead keys)";

    key <AE12>	{ [ backslash,      grave,        acute,       ogonek ]	};
};

// Copied from macintosh_vndr/no
partial alphanumeric_keys
xkb_symbols "mac" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple Norwegian keyboard.

    include "latin(type4)"
    name[Group1]= "Norwegian (Macintosh)";

    key <TLDE>	{ [       bar,    section     ]	};
    key <AE03>	{ [         3, numbersign,     sterling,     sterling ]	};
    key <AE04>	{ [         4,   currency,       dollar,       dollar ]	};
    key <AE06>	{ [         6,  ampersand, threequarters, fiveeighths ]	};
    key <AE07>	{ [         7,      slash,          bar,    backslash ]	};
    key <AE08>	{ [         8,  parenleft,  bracketleft,    braceleft ]	};
    key <AE09>	{ [         9, parenright, bracketright,   braceright ]	};
    key <AC10>	{ [    oslash,   Ooblique,   odiaeresis,   Odiaeresis ]	};
    key <AE11>	{ [      plus,   question     ]	};
    key <AC11>	{ [        ae,         AE     ]	};
    key <AD11>	{ [     aring,      Aring     ]	};
    key <AE12>	{ [ dead_grave, dead_acute,       acute,  dead_ogonek ]	};
    key <AD12>	{ [ diaeresis, asciicircum,  asciitilde,  dead_macron ]	};
    key <BKSL>	{ [        at,   asterisk     ]	};
};

partial alphanumeric_keys
xkb_symbols "mac_nodeadkeys" {

    // Modifies the basic Norwegian layout to no dead keys
    include "no(mac)"
    name[Group1]= "Norwegian (Macintosh, no dead keys)";

    key <AE12>	{ [      grave,     acute,        acute,       ogonek ]	};
    key <AD12>	{ [  diaeresis, asciicircum, asciitilde,       macron ]	};
};

partial alphanumeric_keys
xkb_symbols "colemak" {

    // Colemak layout - http://colemak.com/
    // Q W F P G   J L U Y Ø Å ¨
    // A R S T D   H N E I O Æ '
    // < Z X C V   B K M , . -
    include "no(basic)"
    name[Group1]= "Norwegian (Colemak)";

    key <AB06>	{ [         k,          K,          kra,    ampersand ] };
    key <AC02>	{ [         r,          R,   registered,    trademark ] };
    key <AC03>	{ [         s,          S,       ssharp,      section ] };
    key <AC04>	{ [         t,          T,        thorn,        THORN ] };
    key <AC05>	{ [         d,          D,          eth,          ETH ] };
    key <AC07>	{ [         n,          N ] };
    key <AC08>	{ [         e,          E,     EuroSign,         cent ] };
    key <AC09>	{ [         i,          I,   rightarrow,     idotless ] };
    key <AC10>	{ [         o,          O,           oe,           OE ] };
    key <AD03>	{ [         f,          F,      dstroke,  ordfeminine ] };
    key <AD04>	{ [         p,          P,     Greek_pi,     Greek_PI ] };
    key <AD05>	{ [         g,          G,          eng,          ENG ] };
    key <AD06>	{ [         j,          J ] };
    key <AD07>	{ [         l,          L,      lstroke,      Lstroke ] };
    key <AD08>	{ [         u,          U,    downarrow,      uparrow ] };
    key <AD09>	{ [         y,          Y,    leftarrow,          yen ] };
    key <AD10>	{ [    oslash,   Ooblique,   dead_acute, dead_doubleacute ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/no(sun_type6)"
};
default  alphanumeric_keys
xkb_symbols "kr106" {
    include "us"
    name[Group1]= "Korean";
    include "kr(hw_keys)"
};

alphanumeric_keys
xkb_symbols "kr104" {
    include "us"
    name[Group1]= "Korean (101/104-key compatible)";
    include "kr(ralt_hangul)"
    include "kr(rctrl_hanja)"
};

partial function_keys
xkb_symbols "hw_keys" {
    key <HNGL> { [ Hangul       ] };
    key <HJCV> { [ Hangul_Hanja ] };
};

partial function_keys
xkb_symbols "ralt_hangul" {
    replace key <RALT> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1]= [ Hangul ]
    };
};

partial function_keys
xkb_symbols "rctrl_hangul" {
    replace key <RCTL> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1]= [ Hangul ]
    };
};

partial function_keys
xkb_symbols "ralt_hanja" {
    replace key <RALT> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1]= [ Hangul_Hanja ]
    };
};

partial function_keys
xkb_symbols "rctrl_hanja" {
    replace key <RCTL> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1]= [ Hangul_Hanja ]
    };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/kr(sun_type6)"
};
// based on:
// vn,  TCVN 5712:1993
// Le Hong Boi <le.hong.boi@bigfoot.com>
// August 1999
// Further modified by Ashley Clark <aclark@debian.org>
// July 2000 for X 4.0
// Fix accents into combining marks by Samuel Thibault <samuel.thibault@ens-lyon.org>
// July 2009


default partial alphanumeric_keys
xkb_symbols "basic" {

    include "us"

    name[Group1]= "Vietnamese";

    key <TLDE> { [	   grave, 	asciitilde	] };
    key <AE01> { [	   abreve,	Abreve		] };
    key <AE02> { [	   acircumflex,  Acircumflex	] };
    key <AE03> { [	   ecircumflex,	Ecircumflex	] };
    key <AE04> { [	   ocircumflex,	Ocircumflex	] };
    key <AE05> { [	   0x1000300,	percent,	dead_grave,	percent		] };
    key <AE06> { [	   0x1000309,	asciicircum,	dead_hook,	asciicircum	] };
    key <AE07> { [	   0x1000303,	ampersand,	dead_tilde,	ampersand	] };
    key <AE08> { [	   0x1000301,	asterisk,	dead_acute,	asterisk	] };
    key <AE09> { [	   0x1000323,	parenleft,	dead_belowdot,	parenleft	] };
    key <AE10> { [	   dstroke,	Dstroke		] };
    key <AE11> { [     minus, underscore  ]	};
    key <AE12> { [     DongSign, plus ]	};

    key <AD11> { [ uhorn,	Uhorn	] };
    key <AD12> { [ ohorn,	Ohorn	] };

    include "level3(ralt_switch)"
};


// US keyboard made Vietnamese
//
// Copyright (C) 2018, Florent Gallaire Phong <f@gallai.re>

partial alphanumeric_keys
xkb_symbols "us" {

    include "us(euro)"
    name[Group1]= "Vietnamese (US)";

    key <TLDE> { [dead_grave, dead_tilde,              grave,          asciitilde ] };
    key <AE04> { [         4,     dollar,           DongSign,            currency ] }; // ₫ ¤

    key <AD03> { [         e,          E,        ecircumflex,         Ecircumflex ] }; // ê Ê
    key <AD07> { [         u,          U,              uhorn,               Uhorn ] }; // ư Ư
    key <AD09> { [         o,          O,        ocircumflex,         Ocircumflex ] }; // ô Ô
    key <AD10> { [         p,          P,              ohorn,               Ohorn ] }; // ơ Ơ

    key <AC01> { [         a,          A,        acircumflex,         Acircumflex ] }; // â Â
    key <AC02> { [         s,          S,             abreve,              Abreve ] }; // ă Ă
    key <AC03> { [         d,          D,            dstroke,             Dstroke ] }; // đ Đ
    key <AC11> { [dead_acute,   quotedbl,         apostrophe ] };

    key <AB09> { [dead_belowdot, greater,             period ] };
    key <AB10> { [ dead_hook,   question,              slash ] };
};

// French keyboard made Vietnamese
//
// Copyright (C) 2018, Florent Gallaire Phong <f@gallai.re>

partial alphanumeric_keys
xkb_symbols "fr" {

    include "fr(basic)"

    name[Group1]="Vietnamese (French)";

    key <AE02> { [dead_tilde,          2,             eacute,          asciitilde ] };
    key <AE04> { [dead_acute,          4,         apostrophe,           braceleft ] };
    key <AE07> { [dead_grave,          7,             egrave,               grave ] };

    key <AD01> { [         a,          A,             abreve,              Abreve ] }; // ă Ă
    key <AD07> { [         u,          U,              uhorn,               Uhorn ] }; // ư Ư
    key <AD09> { [         o,          O,              ohorn,               Ohorn ] }; // ơ Ơ
    key <AD12> { [    dollar,   sterling,           DongSign,            currency ] }; // ₫ ¤

    key <AC03> { [         d,          D,            dstroke,             Dstroke ] }; // đ Đ

    key <AB07> { [ dead_hook,   question,          comma ] };
    key <AB08> { [dead_belowdot,  period,      semicolon ] };
};


// EXTRAS:

// Vietnamese AÐERTY (60s typewriters adaptation)
//
// Copyright (C) 2018, Florent Gallaire Phong <f@gallai.re>

partial alphanumeric_keys
xkb_symbols "aderty" {

    include "fr(basic)"

    name[Group1]="Vietnamese (AÐERTY)";

    key <AE02> { [dead_tilde,          2,             eacute,          asciitilde ] };
    key <AE04> { [dead_acute,          4,         apostrophe,           braceleft ] };
    key <AE07> { [dead_grave,          7,             egrave,               grave ] };

    key <AD02> { [   dstroke,    Dstroke,                  z,                   Z ] }; // đ Đ
    key <AD12> { [    dollar,   sterling,           DongSign,            currency ] }; // ₫ ¤

    key <AC04> { [     uhorn,      Uhorn,                  f,                   F ] }; // ư Ư
    key <AC07> { [     ohorn,      Ohorn,                  j,                   J ] }; // ơ Ơ

    key <AB01> { [    abreve,     Abreve,                  w,                   W ] }; // ă Ă
    key <AB07> { [ dead_hook,   question,          comma ] };
    key <AB08> { [dead_belowdot,  period,      semicolon ] };
};

// Vietnamese QĐERTY (AĐERTY qwertification)
//
// Copyright (C) 2018, Florent Gallaire Phong <f@gallai.re>

partial alphanumeric_keys
xkb_symbols "qderty" {

    include "us(euro)"
    name[Group1]= "Vietnamese (QĐERTY)";

    key <TLDE> { [dead_grave, dead_tilde,              grave,          asciitilde ] };
    key <AE04> { [         4,     dollar,           DongSign,            currency ] }; // ₫ ¤

    key <AD02> { [   dstroke,    Dstroke,                  w,                   W ] }; // đ Đ
    key <AD03> { [         e,          E,        ecircumflex,         Ecircumflex ] }; // ê Ê
    key <AD09> { [         o,          O,        ocircumflex,         Ocircumflex ] }; // ô Ô

    key <AC01> { [         a,          A,        acircumflex,         Acircumflex ] }; // â Â
    key <AC04> { [     uhorn,      Uhorn,                  f,                   F ] }; // ư Ư
    key <AC07> { [     ohorn,      Ohorn,                  j,                   J ] }; // ơ Ơ
    key <AC11> { [dead_acute,   quotedbl,         apostrophe ] };

    key <AB01> { [    abreve,     Abreve,                  z,                   Z ] }; // ă Ă
    key <AB09> { [dead_belowdot, greater,             period ] };
    key <AB10> { [ dead_hook,   question,              slash ] };
};
// based on a keyboard
// Modified for a real Latin American Keyboard by Fabian Mandelbaum

default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin(type4)"

    name[Group1]="Spanish (Latin American)";

    key <AE01>	{ [         1,     exclam,          bar,   exclamdown ]	};
    key <AE03>	{ [         3, numbersign, periodcentered,   sterling ]	};
    key <AE04>	{ [         4,     dollar,   asciitilde,       dollar ]	};
    key <AE06>	{ [         6,  ampersand,      notsign,  fiveeighths ]	};
    key <AE11>	{ [apostrophe,   question,    backslash, questiondown ]	};
    key <AE12>	{ [questiondown, exclamdown, dead_cedilla, dead_ogonek]	};

    key <AD11>	{ [dead_acute, dead_diaeresis, dead_diaeresis, dead_abovering ]	};
    key <AD12>	{ [      plus,   asterisk,   asciitilde,  dead_macron ]	};

    key <AC10>	{ [    ntilde,     Ntilde,   asciitilde, dead_doubleacute ] };
    key <AC11>	{ [ braceleft, bracketleft, dead_circumflex, braceleft]	};
    key <TLDE>	{ [       bar,     degree,      notsign,      notsign ]	};

    key <BKSL>	{ [braceright, bracketright, dead_grave,   braceright ]	};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "sundeadkeys" {
    include "latam(basic)"
    name[Group1]="Spanish (Latin American, Sun dead keys)";

    key <AC11>	{ [dead_acute, dead_diaeresis, braceleft, braceleft ]	};
    key <AD11>	{ [dead_grave, dead_circumflex, bracketleft, dead_abovering ] };
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    include "latam(basic)"

    name[Group1]="Spanish (Latin American, no dead keys)";

    key <AE12>	{ [questiondown, exclamdown,    cedilla,       ogonek ]	};
    key <AD11>	{ [     grave, asciicircum, bracketleft,       degree ]	};
    key <AD12>	{ [      plus,   asterisk, bracketright,       macron ]	};
    key <AC10>	{ [    ntilde,     Ntilde,   asciitilde,  doubleacute ]	};
    key <AC11>	{ [     acute,  diaeresis,    braceleft,    braceleft ]	};
    key <BKSL>	{ [  ccedilla,   Ccedilla,   braceright,        breve ]	};
    key <AB10>	{ [     minus, underscore, dead_belowdot,    abovedot ]	};
};

partial alphanumeric_keys
xkb_symbols "deadtilde" {

    include "latam(basic)"

    name[Group1]="Spanish (Latin American, dead tilde)";

    key <AD12>	{ [      plus,   asterisk,   dead_tilde,  dead_macron ]	};
};

// Latin American Spanish Dvorak mapping (note R-H exchange)
partial alphanumeric_keys
xkb_symbols "dvorak" {

    name[Group1]="Spanish (Latin American, Dvorak)";

    key <TLDE> {[          bar,     degree,        notsign,      notsign ]};
    key <AE01> {[            1,     exclam,            bar,   exclamdown ]};
    key <AE02> {[            2,   quotedbl,             at,    oneeighth ]};
    key <AE03> {[            3, numbersign, periodcentered,     sterling ]};
    key <AE04> {[            4,     dollar,     asciitilde,       dollar ]};
    key <AE05> {[            5,    percent,        onehalf, threeeighths ]};
    key <AE06> {[            6,  ampersand,        notsign,  fiveeighths ]};
    key <AE07> {[            7,      slash,      braceleft, seveneighths ]};
    key <AE08> {[            8,  parenleft,    bracketleft,    trademark ]};
    key <AE09> {[            9, parenright,   bracketright,    plusminus ]};
    key <AE10> {[            0,      equal,     braceright,       degree ]};
    key <AE11> {[   apostrophe,   question,      backslash, questiondown ]};
    key <AE12> {[ questiondown, exclamdown,   dead_cedilla,  dead_ogonek ]};

    key <AD01> {[     period,          colon,             at                 ]};
    key <AD02> {[      comma,      semicolon                                 ]};
    key <AD03> {[     ntilde,         Ntilde,        lstroke,        Lstroke ]};
    key <AD04> {[          p,              P,      paragraph                 ]};
    key <AD05> {[          y,              Y,            yen                 ]};
    key <AD06> {[          f,              F,         tslash,         Tslash ]};
    key <AD07> {[          g,              G,        dstroke,        Dstroke ]};
    key <AD08> {[          c,              C,           cent,      copyright ]};
    key <AD09> {[          h,              H,        hstroke,        Hstroke ]};
    key <AD10> {[          l,              L,       sterling                 ]};
    key <AD11> {[ dead_acute, dead_diaeresis, dead_diaeresis, dead_abovering ]};
    key <AD12> {[       plus,       asterisk,     asciitilde,    dead_macron ]};

    key <AC01> {[          a,            A,              ae,         AE ]};
    key <AC02> {[          o,            O,          oslash,     Oslash ]};
    key <AC03> {[          e,            E,        EuroSign             ]};
    key <AC04> {[          u,            U,           aring,      Aring ]};
    key <AC05> {[          i,            I,              oe,         OE ]};
    key <AC06> {[          d,            D,             eth,        ETH ]};
    key <AC07> {[          r,            R,      registered,  trademark ]};
    key <AC08> {[          t,            T,           thorn,      THORN ]};
    key <AC09> {[          n,            N,             eng,        ENG ]};
    key <AC10> {[          s,            S,          ssharp,    section ]};
    key <AC11> {[  braceleft,  bracketleft, dead_circumflex,  braceleft ]};
    key <BKSL> {[ braceright, bracketright,      dead_grave, braceright ]};

    key <LSGT> {[       less,    greater, guillemotleft, guillemotright ]};
    key <AB01> {[      minus, underscore,        hyphen, macron         ]};
    key <AB02> {[          q,          Q,      currency                 ]};
    key <AB03> {[          j,          J                                ]};
    key <AB04> {[          k,          K,           kra                 ]};
    key <AB05> {[          x,          X,       multiply, division      ]};
    key <AB06> {[          b,          B                                ]};
    key <AB07> {[          m,          M,            mu                 ]};
    key <AB08> {[          w,          W                                ]};
    key <AB09> {[          v,          V                                ]};
    key <AB10> {[          z,          Z                                ]};

    include "level3(ralt_switch)"
};

// Latin American Spanish Colemak mapping (by eDreymaR)
partial alphanumeric_keys
xkb_symbols "colemak" {

    name[Group1]="Spanish (Latin American, Colemak)";

    key <TLDE> {[          bar,     degree,        notsign,      notsign ]};
    key <AE01> {[            1,     exclam,            bar,   exclamdown ]};
    key <AE02> {[            2,   quotedbl,             at,    oneeighth ]};
    key <AE03> {[            3, numbersign, periodcentered,     sterling ]};
    key <AE04> {[            4,     dollar,     asciitilde,       dollar ]};
    key <AE05> {[            5,    percent,        onehalf, threeeighths ]};
    key <AE06> {[            6,  ampersand,        notsign,  fiveeighths ]};
    key <AE07> {[            7,      slash,      braceleft, seveneighths ]};
    key <AE08> {[            8,  parenleft,    bracketleft,    trademark ]};
    key <AE09> {[            9, parenright,   bracketright,    plusminus ]};
    key <AE10> {[            0,      equal,     braceright,       degree ]};
    key <AE11> {[   apostrophe,   question,      backslash, questiondown ]};
    key <AE12> {[ questiondown, exclamdown,   dead_cedilla,  dead_ogonek ]};

    key <AD01> {[          q,              Q,         U201A,         U201E ]};
    key <AD02> {[          w,              W,         U2018,         U201C ]};
    key <AD03> {[          f,              F,         U2019,         U201D ]};
    key <AD04> {[          p,              P,         U2293,      paragraph ]};
    key <AD05> {[          g,              G,            eng,            ENG ]};
    key <AD06> {[          j,              J,         U222B,         U03A3 ]};
    key <AD07> {[          l,              L,        lstroke,        Lstroke ]};
    key <AD08> {[          u,              U,         U2039,  guillemotleft ]};
    key <AD09> {[          y,              Y,         U203A, guillemotright ]};
    key <AD10> {[     ntilde,         Ntilde,     asciitilde,         U02EE ]};
    key <AD11> {[ dead_acute, dead_diaeresis, dead_diaeresis, dead_abovering ]};
    key <AD12> {[       plus,       asterisk,     asciitilde,    dead_macron ]};

    key <AC01> {[          a,            A,              ae,         AE ]};
    key <AC02> {[          r,            R,      registered,  trademark ]};
    key <AC03> {[          s,            S,          ssharp,    section ]};
    key <AC04> {[          t,            T,           thorn,      THORN ]};
    key <AC05> {[          d,            D,             eth,        ETH ]};
    key <AC06> {[          h,            H,         hstroke,    Hstroke ]};
    key <AC07> {[          n,            N,          hyphen,     U2190 ]};
    key <AC08> {[          e,            E,        EuroSign,     U2191 ]};
    key <AC09> {[          i,            I,          U2015,     U2192 ]};
    key <AC10> {[          o,            O,          U00BA,     U00AA ]};
    key <AC11> {[  braceleft,  bracketleft, dead_circumflex,  braceleft ]};
    key <BKSL> {[ braceright, bracketright,      dead_grave, braceright ]};

    key <LSGT> {[       less,      greater,             bar,     U00A6 ]};
    key <AB01> {[          z,            Z,          U0292,     U01B7 ]};
    key <AB02> {[          x,            X,          U2020,     U2021 ]};
    key <AB03> {[          c,            C,            cent,  copyright ]};
    key <AB04> {[          v,            V,        division,     U03B3 ]};
    key <AB05> {[          b,            B,          U2022,     U03B2 ]};
    key <AB06> {[          k,            K,          U00E7,     U00C7 ]};
    key <AB07> {[          m,            M,        multiply,     U2193 ]};
    key <AB08> {[      comma,    semicolon,          hyphen,   multiply ]};
    key <AB09> {[     period,        colon,          U0323,   division ]};
    key <AB10> {[      minus,   underscore                              ]};

    include "level3(ralt_switch)"
};


// Latin American Spanish Colemak mapping (by eDreymaR), customized to
// keep WASD in a qwerty-like layout
partial alphanumeric_keys
xkb_symbols "colemak-gaming" {

    name[Group1]="Spanish (Latin American, Colemak for gaming)";

    key <TLDE> {[          bar,     degree,        notsign,      notsign ]};
    key <AE01> {[            1,     exclam,            bar,   exclamdown ]};
    key <AE02> {[            2,   quotedbl,             at,    oneeighth ]};
    key <AE03> {[            3, numbersign, periodcentered,     sterling ]};
    key <AE04> {[            4,     dollar,     asciitilde,       dollar ]};
    key <AE05> {[            5,    percent,        onehalf, threeeighths ]};
    key <AE06> {[            6,  ampersand,        notsign,  fiveeighths ]};
    key <AE07> {[            7,      slash,      braceleft, seveneighths ]};
    key <AE08> {[            8,  parenleft,    bracketleft,    trademark ]};
    key <AE09> {[            9, parenright,   bracketright,    plusminus ]};
    key <AE10> {[            0,      equal,     braceright,       degree ]};
    key <AE11> {[   apostrophe,   question,      backslash, questiondown ]};
    key <AE12> {[ questiondown, exclamdown,   dead_cedilla,  dead_ogonek ]};

    key <AD01> {[          q,              Q,         U201A,         U201E ]};
    key <AD02> {[          w,              W,         U2018,         U201C ]};
    key <AD03> {[          f,              F,         U2019,         U201D ]};
    key <AD04> {[          p,              P,         U2293,      paragraph ]};
    key <AD05> {[          g,              G,            eng,            ENG ]};
    key <AD06> {[          j,              J,         U222B,         U03A3 ]};
    key <AD07> {[          l,              L,        lstroke,        Lstroke ]};
    key <AD08> {[          u,              U,         U2039,  guillemotleft ]};
    key <AD09> {[          y,              Y,         U203A, guillemotright ]};
    key <AD10> {[     ntilde,         Ntilde,     asciitilde,         U02EE ]};
    key <AD11> {[ dead_acute, dead_diaeresis, dead_diaeresis, dead_abovering ]};
    key <AD12> {[       plus,       asterisk,     asciitilde,    dead_macron ]};

    key <AC01> {[          a,            A,              ae,         AE ]};
    key <AC02> {[          s,            S,          ssharp,    section ]};
    key <AC03> {[          d,            D,             eth,        ETH ]};
    key <AC04> {[          t,            T,           thorn,      THORN ]};
    key <AC05> {[          r,            R,      registered,  trademark ]};
    key <AC06> {[          h,            H,         hstroke,    Hstroke ]};
    key <AC07> {[          n,            N,          hyphen,     U2190 ]};
    key <AC08> {[          e,            E,        EuroSign,     U2191 ]};
    key <AC09> {[          i,            I,          U2015,     U2192 ]};
    key <AC10> {[          o,            O,          U00BA,     U00AA ]};
    key <AC11> {[  braceleft,  bracketleft, dead_circumflex,  braceleft ]};
    key <BKSL> {[ braceright, bracketright,      dead_grave, braceright ]};

    key <LSGT> {[       less,      greater,             bar,     U00A6 ]};
    key <AB01> {[          z,            Z,          U0292,     U01B7 ]};
    key <AB02> {[          x,            X,          U2020,     U2021 ]};
    key <AB03> {[          c,            C,            cent,  copyright ]};
    key <AB04> {[          v,            V,        division,     U03B3 ]};
    key <AB05> {[          b,            B,          U2022,     U03B2 ]};
    key <AB06> {[          k,            K,          U00E7,     U00C7 ]};
    key <AB07> {[          m,            M,        multiply,     U2193 ]};
    key <AB08> {[      comma,    semicolon,          hyphen,   multiply ]};
    key <AB09> {[     period,        colon,          U0323,   division ]};
    key <AB10> {[      minus,   underscore                              ]};

    include "level3(ralt_switch)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    // This layout conforms to a new Czech compromise standard
    // designed to satisfy most Unix, Windows and Mac users.
    // 2001 by Kamil Toman <ktoman@email.cz>

    include "latin"
    name[Group1]= "Czech";

    key <TLDE>  { [ semicolon, dead_abovering,    grave,   asciitilde ] };
    key <AE01>  { [      plus,          1,       exclam,   dead_tilde ] };
    key <AE02>  { [    ecaron,          2,           at,   dead_caron ] };
    key <AE03>  { [    scaron,          3,   numbersign, dead_circumflex ] };
    key <AE04>  { [    ccaron,          4,       dollar,   dead_breve ] };
    key <AE05>  { [    rcaron,          5,      percent, dead_abovering]};
    key <AE06>  { [    zcaron,          6,  asciicircum,  dead_ogonek ] };
    key <AE07>  { [    yacute,          7,    ampersand,   dead_grave ] };
    key <AE08>  { [    aacute,          8,     asterisk, dead_abovedot] };
    key <AE09>  { [    iacute,          9,    braceleft,   dead_acute ] };
    key <AE10>  { [    eacute,          0,   braceright, dead_doubleacute ] };
    key <AE11>  { [     equal,    percent,     NoSymbol, dead_diaeresis]};
    key <AE12>  { [dead_acute, dead_caron,  dead_macron, dead_cedilla ] };

    key <AD01>  { [         q,          Q,    backslash,     NoSymbol ] };
    key <AD02>  { [         w,          W,          bar,     Nosymbol ] };
    key <AD03>  { [         e,          E,     EuroSign,     NoSymbol ] };
    key <AD04>  { [         r,          R,     NoSymbol,     NoSymbol ] };
    key <AD05>  { [         t,          T,     NoSymbol,     NoSymbol ] };
    key <AD06>  { [         z,          Z,     NoSymbol,     NoSymbol ] };
    key <AD07>  { [         u,          U,     NoSymbol,     NoSymbol ] };
    key <AD08>  { [         i,          I,     NoSymbol,     NoSymbol ] };
    key <AD09>  { [         o,          O,     NoSymbol,     NoSymbol ] };
    key <AD10>  { [         p,          P,     NoSymbol,     NoSymbol ] };

    key <AD11>  { [    uacute,      slash,  bracketleft,     division ] };
    key <AD12>  { [parenright,  parenleft, bracketright,     multiply ] };

    key <AC01>  { [         a,          A,   asciitilde,     NoSymbol ] };
    key <AC02>  { [         s,          S,      dstroke,     NoSymbol ] };
    key <AC03>  { [         d,          D,      Dstroke,     NoSymbol ] };
    key <AC04>  { [         f,          F,  bracketleft,     NoSymbol ] };
    key <AC05>  { [         g,          G, bracketright,     NoSymbol ] };
    key <AC06>  { [         h,          H,        grave,     NoSymbol ] };
    key <AC07>  { [         j,          J,   apostrophe,     NoSymbol ] };
    key <AC08>  { [         k,          K,      lstroke,     NoSymbol ] };
    key <AC09>  { [         l,          L,      Lstroke,     NoSymbol ] };

    key <AC10>  { [     uring,   quotedbl,       dollar,     NoSymbol ] };
    key <AC11>  { [   section,     exclam,   apostrophe,       ssharp ] };
    key <AC12>  { [  EuroSign, dead_diaeresis, NoSymbol,     NoSymbol ] };
    key <BKSL>  { [dead_diaeresis, apostrophe, backslash,         bar ] };

    key <LSGT>  { [ backslash,        bar,        slash,     NoSymbol ] };
    key <AB01>  { [         y,          Y,       degree,     NoSymbol ] };
    key <AB02>  { [         x,          X,   numbersign,     Nosymbol ] };
    key <AB03>  { [         c,          C,    ampersand,     NoSymbol ] };
    key <AB04>  { [         v,          V,           at,     NoSymbol ] };
    key <AB05>  { [         b,          B,    braceleft,     NoSymbol ] };
    key <AB06>  { [         n,          N,   braceright,     NoSymbol ] };
    key <AB07>  { [         m,          M,  asciicircum,     NoSymbol ] };
    key <AB08>  { [     comma,   question,         less,     NoSymbol ] };
    key <AB09>  { [    period,      colon,      greater,     NoSymbol ] };
    key <AB10>  { [     minus, underscore,     asterisk,     NoSymbol ] };

    key <SPCE>  { [     space,      space,        space,       space  ] };

    include "level3(ralt_switch)"
};

xkb_symbols "bksl" {

    // Use <BKSL> instead of <LSGT> (useful for keyboards without <LSGT> key).

    include "cz(basic)"
    name[Group1]= "Czech (with <\|> key)";

    key <BKSL>  { [ backslash,        bar,        slash,     NoSymbol ] };
};

partial alphanumeric_keys
xkb_symbols "qwerty" {

    // This layout represents the actual Czech keyboards;
    // it complies with the symbols printed on the keys.
    // 2011 by Lukáš Mojžíš <lmojzis@grenames.cz>

    include "cz(basic)"
    name[Group1]= "Czech (QWERTY)";

    key <AB01>  { [         z,          Z,       degree,         NoSymbol ] };
    key <AC10>  { [     uring,   quotedbl,    semicolon,            colon ] };
    key <AC11>  { [   section,     exclam,   apostrophe,           ssharp ] };
    key <AD06>  { [         y,          Y,     NoSymbol,         NoSymbol ] };
    key <AD11>  { [    uacute,      slash,  bracketleft,        braceleft ] };
    key <AD12>  { [parenright,  parenleft, bracketright,       braceright ] };
    key <AE09>  { [    iacute,          9,    parenleft,       dead_acute ] };
    key <AE10>  { [    eacute,          0,   parenright, dead_doubleacute ] };
};

xkb_symbols "qwerty_bksl" {

    // Use <BKSL> instead of <LSGT> (useful for keyboards without <LSGT> key).

    include "cz(qwerty)"
    name[Group1]= "Czech (QWERTY, extended backslash)";

    key <BKSL>  { [ backslash,        bar,        slash,     NoSymbol ] };
};

partial alphanumeric_keys
xkb_symbols "qwerty-mac" {

    // This layout corresponds to the Apple's Czech - QWERTY.
    // 2018 by Jakub Jirutka <jakub@jirutka.cz>

    include "latin"
    name[Group1]= "Czech (QWERTY, Macintosh)";

    key <TLDE>  { [      less,    greater, lessthanequal, greaterthanequal]};
    key <AE01>  { [      plus,          1,        grave,      notsign ] };
    key <AE02>  { [    ecaron,          2,           at, enfilledcircbullet]};
    key <AE03>  { [    scaron,          3,   numbersign,     notequal ] };
    key <AE04>  { [    ccaron,          4,       dollar,     sterling ] };
    key <AE05>  { [    rcaron,          5,   asciitilde,        U25CA ] };
    key <AE06>  { [    zcaron,          6,  asciicircum,       dagger ] };
    key <AE07>  { [    yacute,          7,    ampersand,    paragraph ] };
    key <AE08>  { [    aacute,          8,     asterisk,     division ] };
    key <AE09>  { [    iacute,          9,    braceleft, guillemotleft] };
    key <AE10>  { [    eacute,          0,   braceright, guillemotright]};
    key <AE11>  { [     equal,    percent, dead_abovering, dead_cedilla]};
    key <AE12>  { [dead_acute, dead_caron, dead_circumflex, dead_macron]};

    key <AD01>  { [         q,          Q,     NoSymbol,     NoSymbol ] };
    key <AD02>  { [         w,          W,    eabovedot,    Eabovedot ] };
    key <AD03>  { [         e,          E,      eogonek,      Eogonek ] };
    key <AD04>  { [         r,          R,     EuroSign,   registered ] };
    key <AD05>  { [         t,          T,     NoSymbol,    trademark ] };
    key <AD06>  { [         y,          Y,     NoSymbol,     NoSymbol ] };
    key <AD07>  { [         u,          U,     NoSymbol,     NoSymbol ] };
    key <AD08>  { [         i,          I,     NoSymbol,     NoSymbol ] };
    key <AD09>  { [         o,          O,     NoSymbol,     NoSymbol ] };
    key <AD10>  { [         p,          P,     NoSymbol,     NoSymbol ] };

    key <AD11>  { [    uacute,      slash,  bracketleft,         less ] };
    key <AD12>  { [parenright,  parenleft, bracketright,      greater ] };

    key <AC01>  { [         a,          A,      aogonek,      Aogonek ] };
    key <AC02>  { [         s,          S,       ssharp,        U2211 ] };
    key <AC03>  { [         d,          D, partialderivative,   U2206 ] };
    key <AC04>  { [         f,          F,     NoSymbol,     NoSymbol ] };
    key <AC05>  { [         g,          G,     NoSymbol,     NoSymbol ] };
    key <AC06>  { [         h,          H, leftsinglequotemark, leftdoublequotemark]};
    key <AC07>  { [         j,          J, rightsinglequotemark, rightdoublequotemark]};
    key <AC08>  { [         k,          K,     NoSymbol,     NoSymbol ] };
    key <AC09>  { [         l,          L,      lstroke,      Lstroke ] };

    key <AC10>  { [     uring,   quotedbl,    semicolon,     ellipsis ] };
    key <AC11>  { [   section,     exclam,   apostrophe,   dead_tilde ] };
    key <BKSL>  { [dead_diaeresis, grave, dead_diaeresis, dead_doubleacute]};

    key <LSGT>  { [ backslash,        bar,     NoSymbol,     NoSymbol ] };
    key <AB01>  { [         z,          Z,    zabovedot,    Zabovedot ] };
    key <AB02>  { [         x,          X,     NoSymbol,     NoSymbol ] };
    key <AB03>  { [         c,          C,     NoSymbol,    copyright ] };
    key <AB04>  { [         v,          V,     NoSymbol,   squareroot ] };
    key <AB05>  { [         b,          B,     NoSymbol,     NoSymbol ] };
    key <AB06>  { [         n,          N, singlelowquotemark, doublelowquotemark]};
    key <AB07>  { [         m,          M,     NoSymbol,     NoSymbol ] };
    key <AB08>  { [     comma,   question,         less, lessthanequal] };
    key <AB09>  { [    period,      colon,      greater, greaterthanequal]};
    key <AB10>  { [     minus, underscore,       endash,       emdash ] };

    key <SPCE>  { [     space,      space, nobreakspace, nobreakspace ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys alternate_group
xkb_symbols "ucw" {

    // This layout is usually used as the second group,
    // it contains accented characters only, no 'latin' set.
    // 2008 by Milan Vancura <mvancura@suse.cz>

    name[Group1]= "Czech (UCW, only accented letters)";

    key <AB01> { [zcaron,      Zcaron      ] };
    key <AB02> { [ssharp,      U1E9E       ] };
    key <AB03> { [ccaron,      Ccaron      ] };
    key <AB04> { [ccedilla,    Ccedilla    ] };
    key <AB05> { [ntilde,      Ntilde      ] };
    key <AB06> { [ncaron,      Ncaron      ] };
    key <AB07> { [lacute,      Lacute      ] };

    key <AC01> { [aacute,      Aacute      ] };
    key <AC02> { [scaron,      Scaron      ] };
    key <AC03> { [dcaron,      Dcaron      ] };
    key <AC04> { [ediaeresis,  Ediaeresis  ] };
    key <AC05> { [racute,      Racute      ] };
    key <AC06> { [uacute,      Uacute      ] };
    key <AC07> { [udiaeresis,  Udiaeresis  ] };
    key <AC08> { [ocircumflex, Ocircumflex ] };
    key <AC09> { [lcaron,      Lcaron      ] };

    key <AD01> { [adiaeresis,  Adiaeresis  ] };
    key <AD02> { [ecaron,      Ecaron      ] };
    key <AD03> { [eacute,      Eacute      ] };
    key <AD04> { [rcaron,      Rcaron      ] };
    key <AD05> { [tcaron,      Tcaron      ] };
    key <AD06> { [yacute,      Yacute      ] };
    key <AD07> { [uring,       Uring       ] };
    key <AD08> { [iacute,      Iacute      ] };
    key <AD09> { [oacute,      Oacute      ] };
    key <AD10> { [odiaeresis,  Odiaeresis  ] };
};

partial alphanumeric_keys
xkb_symbols "dvorak-ucw" {

    // US Dvorak layout extended with UCW,
    // AltGr produces accented characters.

    include "us(dvorak)"
    name[Group1]= "Czech (US, Dvorak, UCW support)";

    key <AB03> { [ j, J, eacute, Eacute ] };
    key <AB04> { [ k, K, uacute, Uacute ] };
    key <AB10> { [ z, Z, zcaron, Zcaron ] };

    key <AC01> { [ a, A, aacute, Aacute ] };
    key <AC02> { [ o, O, oacute, Oacute ] };
    key <AC03> { [ e, E, ecaron, Ecaron ] };
    key <AC04> { [ u, U, uring,  Uring  ] };
    key <AC05> { [ i, I, iacute, Iacute ] };
    key <AC06> { [ d, D, dcaron, Dcaron ] };
    key <AC08> { [ t, T, tcaron, Tcaron ] };
    key <AC09> { [ n, N, ncaron, Ncaron ] };
    key <AC10> { [ s, S, scaron, Scaron ] };

    key <AD05> { [ y, Y, yacute, Yacute ] };
    key <AD08> { [ c, C, ccaron, Ccaron ] };
    key <AD09> { [ r, R, rcaron, Rcaron ] };

    include "level3(ralt_switch)"
};

// phonetic layout for Russian letters on an CZ (QWERTY) keyboard
// originaly created by Pavel Sorejs <sorejs@gmail.com>

partial alphanumeric_keys
xkb_symbols "rus" {

    include "cz(qwerty)"
    name[Group1]= "Russian (Czech, phonetic)";

    key <AE01> { [              plus,         ampersand,            1 ,       1 ] };
    key <AE02> { [ Cyrillic_hardsign,                 2,            2 ,       2 ] };
    key <AE03> { [      Cyrillic_sha,      Cyrillic_SHA,            3 ,       3 ] };
    key <AE04> { [      Cyrillic_che,      Cyrillic_CHE,            4 ,       4 ] };
    key <AE05> { [    Cyrillic_shcha,    Cyrillic_SHCHA,            5 ,       5 ] };
    key <AE06> { [      Cyrillic_zhe,      Cyrillic_ZHE,            6 ,       6 ] };
    key <AE07> { [          quotedbl,                 4,            7 ,       7 ] };
    key <AE08> { [           section,                 5,            8 ,       8 ] };
    key <AE09> { [            dollar,                 6,            9 ,       9 ] };
    key <AE10> { [             equal,                 7,            0 ,       0 ] };
    key <AE11> { [           percent,                 8                         ] };
    key <AE12> { [        apostrophe,                 9                         ] };

    key <AB08> { [             comma,          question                         ] };
    key <AB09> { [            period,            exclam                         ] };
    key <AB10> { [             minus,             slash                         ] };

    key <AC11> { [         semicolon,             colon                         ] };

    key <LSGT> { [               bar,         brokenbar                         ] };

    key <TLDE> { [       Cyrillic_io,       Cyrillic_IO                         ] };


    key <AD01> { [        numerosign,                 1,            q,        Q ] };
    key <AD02> { [       Cyrillic_yu,       Cyrillic_YU,            w,        W ] };
    key <AD03> { [       Cyrillic_ie,       Cyrillic_IE,            e,        E ] };
    key <AD04> { [       Cyrillic_er,       Cyrillic_ER,            r,        R ] };
    key <AD05> { [       Cyrillic_te,       Cyrillic_TE,            t,        T ] };
    key <AD06> { [     Cyrillic_yeru,     Cyrillic_YERU,            y,        Y ] };
    key <AD07> { [        Cyrillic_u,        Cyrillic_U,            u,        U ] };
    key <AD08> { [        Cyrillic_i,        Cyrillic_I,            i,        I ] };
    key <AD09> { [        Cyrillic_o,        Cyrillic_O,            o,        O ] };
    key <AD10> { [       Cyrillic_pe,       Cyrillic_PE,            p,        P ] };
    key <AD11> { [        Cyrillic_e,        Cyrillic_E,  bracketleft, division ] };
    key <AD12> { [        parenright,         parenleft, bracketright, multiply ] };

    key <AC01> { [        Cyrillic_a,        Cyrillic_A,            a,        A ] };
    key <AC02> { [       Cyrillic_es,       Cyrillic_ES,            s,        S ] };
    key <AC03> { [       Cyrillic_de,       Cyrillic_DE,            d,        D ] };
    key <AC04> { [       Cyrillic_ef,       Cyrillic_EF,            f,        F ] };
    key <AC05> { [      Cyrillic_ghe,      Cyrillic_GHE,            g,        G ] };
    key <AC06> { [       Cyrillic_ha,       Cyrillic_HA,            h,        H ] };
    key <AC07> { [   Cyrillic_shorti,   Cyrillic_SHORTI,            j,        J ] };
    key <AC08> { [       Cyrillic_ka,       Cyrillic_KA,            k,        K ] };
    key <AC09> { [       Cyrillic_el,       Cyrillic_EL,            l,        L ] };
    key <AC10> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN,         less,  greater ] };

    key <AB01> { [       Cyrillic_ze,       Cyrillic_ZE,            z,        Z ] };
    key <AB02> { [       Cyrillic_ya,       Cyrillic_YA,            x,        X ] };
    key <AB03> { [      Cyrillic_tse,      Cyrillic_TSE,            c,        C ] };
    key <AB04> { [       Cyrillic_ve,       Cyrillic_VE,            v,        V ] };
    key <AB05> { [       Cyrillic_be,       Cyrillic_BE,            b,        B ] };
    key <AB06> { [       Cyrillic_en,       Cyrillic_EN,            n,        N ] };
    key <AB07> { [       Cyrillic_em,       Cyrillic_EM,            m,        M ] };

    key <BKSL> { [         backslash,         brokenbar                         ] };

   include "level3(ralt_switch)"
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/cz(sun_type6)"
};

xkb_symbols "prog" {
    // cz-prog 1.0 2019-05-15 by Viktor Grešák <vgresak@gmail.com> and Tomáš Hudec <Tommy.Hudec@gmail.com>
    //
    // Programmer keyboard. Based on the US layout with accented Czech letters and dead keys.
    // Using AltGr and a key from the 1st row generates original level 2 US key as level 3 except TLDE and AE12.
    // Using AltGr+Shift on accented letters generates its uppercase variant.
    // Using AltGr or AltGr+Shift on letters which have accent in Czech but are not on the 1st row directly accessible generate accented letters, 
    // i.e. [d, D], [t, T], [n, N], [o, O] generate with AltGr and AltGr+Shift: [dcaron, Dcaron], [tcaron, Tcaron], [ncaron, Ncaron], [oacute, Oacute].
    // Other Czech letters besides alphanumeric keys (like uacute, uring) are generated using AltGr.

    name[Group1]="Czech (programming)";

    key <AB01> { [ z,	Z ] };
    key <AB02> { [ x,	X ] };
    key <AB03> { [ c,	C ] };
    key <AB04> { [ v,	V ] };
    key <AB05> { [ b,	B ] };
    key <AB06> { [ n,	N,	ncaron,	Ncaron ] };
    key <AB07> { [ m,	M ] };
    key <AB08> { [ comma,	less,	multiply ] };
    key <AB09> { [ period,	greater,	division ] };
    key <AB10> { [ slash,	question,	dead_abovedot ] };
    key <AC01> { [ a,	A ] };
    key <AC02> { [ s,	S ] };
    key <AC03> { [ d,	D,	dcaron,	Dcaron ] };
    key <AC04> { [ f,	F ] };
    key <AC05> { [ g,	G ] };
    key <AC06> { [ h,	H ] };
    key <AC07> { [ j,	J ] };
    key <AC08> { [ k,	K ] };
    key <AC09> { [ l,	L ] };
    key <AC10> { [ semicolon,	colon,	uring,	Uring ] };
    key <AC11> { [ apostrophe,	quotedbl,	section ] };
    key <AD01> { [ q,	Q ] };
    key <AD02> { [ w,	W ] };
    key <AD03> { [ e,	E ] };
    key <AD04> { [ r,	R ] };
    key <AD05> { [ t,	T,	tcaron,	Tcaron ] };
    key <AD06> { [ y,	Y ] };
    key <AD07> { [ u,	U ] };
    key <AD08> { [ i,	I ] };
    key <AD09> { [ o,	O,	oacute,	Oacute ] };
    key <AD10> { [ p,	P ] };
    key <AD11> { [ bracketleft,	braceleft,	uacute,	Uacute ] };
    key <AD12> { [ bracketright,	braceright ] };
    key <AE01> { [ plus,	1,	exclam,	NoSymbol ] };
    key <AE02> { [ ecaron,	2,	at,	Ecaron ] };
    key <AE03> { [ scaron,	3,	numbersign,	Scaron ] };
    key <AE04> { [ ccaron,	4,	dollar,	Ccaron ] };
    key <AE05> { [ rcaron,	5,	percent,	Rcaron ] };
    key <AE06> { [ zcaron,	6,	asciicircum,	Zcaron ] };
    key <AE07> { [ yacute,	7,	ampersand,	Yacute ] };
    key <AE08> { [ aacute,	8,	asterisk,	Aacute ] };
    key <AE09> { [ iacute,	9,	parenleft,	Iacute ] };
    key <AE10> { [ eacute,	0,	parenright,	Eacute ] };
    key <AE11> { [ equal,	minus,	underscore,	U2212 ] };
    key <AE12> { [ dead_acute,	dead_caron,	plusminus,	notequal ] };
    key <BKSL> { [ backslash,	bar,	dead_diaeresis ] };
    key <BKSP> { [ BackSpace,	BackSpace ] };
    key <CAPS> { [ Caps_Lock ] };
    key <COMP> { [ Menu,	Multi_key ] };
    key <LALT> { [ Alt_L,	Meta_L ] };
    key <LCTL> { [ Control_L ] };
    key <LFSH> { [ Shift_L ] };
    key <LWIN> { [ Super_L ] };
    key <RALT> { [ ISO_Level3_Shift ] };
    key <RCTL> { [ Control_R ] };
    key <RTRN> { [ Return ] };
    key <RTSH> { [ Shift_R ] };
    key <RWIN> { [ Super_R ] };
    key <SPCE> { [ space ] };
    key <TAB> { [ Tab,	ISO_Left_Tab ] };
    key <TLDE> { [ grave,	asciitilde ] };
    
    include "level3(ralt_switch)"
};

xkb_symbols "typo" {
    // cz-typo 1.0 2019-05-15 by Viktor Grešák <vgresak@gmail.com> and Tomáš Hudec <Tommy.Hudec@gmail.com>
    //
    // Contains typographic symbols in third and fourth level. 
    // It is intended to be used in conjuction with other existing layout, e.g. setxkbmap -symbols "pc+cz(basic)+cz(typo)+inet(evdev)"

    name[Group1]="Czech (typographic)";

    key <AB01> { [ NoSymbol,	NoSymbol,	degree,	U2300 ] };
    key <AB02> { [ NoSymbol,	NoSymbol,	multiply,	U22C5 ] };
    key <AB03> { [ NoSymbol,	NoSymbol,	ampersand,	copyright ] };
    key <AB04> { [ NoSymbol,	NoSymbol,	at,	ordfeminine ] };
    key <AB05> { [ NoSymbol,	NoSymbol,	enfilledcircbullet,	enopencircbullet ] };
    key <AB07> { [ NoSymbol,	NoSymbol,	U203A,	U2039 ] };
    key <AB08> { [ NoSymbol,	NoSymbol,	doublelowquotemark,	leftdoublequotemark ] };
    key <AB09> { [ NoSymbol,	NoSymbol,	ellipsis,	rightdoublequotemark ] };
    key <AB10> { [ NoSymbol,	NoSymbol,	endash,	emdash ] };
    key <AC04> { [ NoSymbol,	NoSymbol,	UFB00,	UFB05 ] };
    key <AC06> { [ NoSymbol,	NoSymbol,	U2010,	U2011 ] };
    key <AC07> { [ NoSymbol,	NoSymbol,	guillemotright,	guillemotleft ] };
    key <AC08> { [ NoSymbol,	NoSymbol,	dagger,	doubledagger ] };
    key <AC09> { [ NoSymbol,	NoSymbol,	UFB02,	UFB04 ] };
    key <AC11> { [ NoSymbol,	NoSymbol,	NoSymbol,	UFB03 ] };
    key <AD04> { [ NoSymbol,	NoSymbol,	U2030,	registered ] };
    key <AD06> { [ NoSymbol,	NoSymbol,	leftarrow ] };
    key <AD07> { [ NoSymbol,	NoSymbol,	downarrow,	uparrow ] };
    key <AD08> { [ NoSymbol,	NoSymbol,	rightarrow,	UFB01 ] };
    key <AD10> { [ NoSymbol,	NoSymbol,	minutes,	seconds ] };
    key <AE01> { [ NoSymbol,	NoSymbol,	NoSymbol,	rightsinglequotemark ] };
    key <AE11> { [ NoSymbol,	NoSymbol,	underscore,	U2212 ] };
    key <SPCE> { [ space,	space,	space,	nobreakspace ] };
    key <TLDE> { [ NoSymbol,	NoSymbol,	singlelowquotemark,	leftsinglequotemark ] };
};

xkb_symbols "coder" {

    // US layout with Czech chars under AltGr
    // for touch-typing programmers who need to write Czech occasionally
    // https://github.com/michalkahle/czech-coder-xkb

    include "us"
    name[Group1]= "Czech (coder)";

    key <TLDE>{[     grave,  asciitilde,     semicolon, dead_abovering ]};
    key <AE02>{[         2,          at,        ecaron,     Ecaron ]};
    key <AE03>{[         3,  numbersign,        scaron,     Scaron ]};
    key <AE04>{[         4,      dollar,        ccaron,     Ccaron ]};
    key <AE05>{[         5,     percent,        rcaron,     Rcaron ]};
    key <AE06>{[         6, asciicircum,        zcaron,     Zcaron ]};
    key <AE07>{[         7,   ampersand,        yacute,     Yacute ]};
    key <AE08>{[         8,    asterisk,        aacute,     Aacute ]};
    key <AE09>{[         9,   parenleft,        iacute,     Iacute ]};
    key <AE10>{[         0,  parenright,        eacute,     Eacute ]};
    key <AE12>{[     equal,        plus,    dead_acute, dead_caron ]};

    key <AD03>{[         e,           E,             e,   EuroSign ]};
    key <AD11>{[ bracketleft, braceleft,        uacute,     Uacute ]};

    key <AC10>{[ semicolon,      colon,          uring,      Uring ]};
    key <AC11>{[ apostrophe,  quotedbl,        section,   quotedbl ]};
    key <BKSL>{[ backslash,        bar, dead_diaeresis, apostrophe ]};

    include "level3(ralt_switch)"
};

xkb_symbols "prog_typo" {
    // cz-prog-typo 1.0 2019-06-17 by Viktor Grešák <vgresak@gmail.com> and Tomáš Hudec <Tommy.Hudec@gmail.com>
    //
    // Programmer + Typographic keyboard. Based on the US layout with accented Czech letters and dead keys.
    // Using AltGr and a key from the 1st row generates original level 2 US key as level 3 except TLDE and AE12.
    // Using AltGr+Shift on accented letters generates its uppercase variant.
    // Using AltGr or AltGr+Shift on letters which have accent in Czech but are not on the 1st row directly accessible generate accented letters, 
    // i.e. [d, D], [t, T], [n, N], [o, O] generate with AltGr and AltGr+Shift: [dcaron, Dcaron], [tcaron, Tcaron], [ncaron, Ncaron], [oacute, Oacute].
    // Other Czech letters besides alphanumeric keys (like uacute, uring) are generated using AltGr.
    //
    // Contains typographic symbols in third and fourth level. 

    include "cz(prog)"
    include "cz(typo)"

    name[Group1]="Czech (programming, typographic)";
};
// swap parentheses and square brackets
default partial
xkb_symbols "swap_brackets" {
    replace key <AE09> {        [         9,    bracketleft     ]       };
    replace key <AE10> {        [         0,    bracketright    ]       };
    replace key <AD11> {        [ parenleft,    braceleft       ]       };
    replace key <AD12> {        [ parenright,   braceright      ]       };
};
// Separate keymaps merged into one file by Nerijus Baliūnas, 2002

// Lithuanian Numeric layout - Lithuanian letters on the numeric row
// based on Lithuanian keyboard map by Ričardas Čepas <rch@richard.eu.org>
// 3rd and 4th levels added by Mantas Kriaučiūnas <mantas@akl.lt>, 2004
// Minor modifications and cleanup by Rimas Kudelis <rq@akl.lt>, 2010
//
// If you want two layouts, use:
// Option "XkbLayout" "lt,lt(us)"
default partial alphanumeric_keys modifier_keys
xkb_symbols "basic" {

    include "latin"
    include "eurosign(e)"
    include "level3(ralt_switch)"

    name[Group1]="Lithuanian";

    key <TLDE> {[               grave,   asciitilde,    acute                ]};
    key <AE01> {[             aogonek,      Aogonek,        1,        exclam ]};
    key <AE02> {[              ccaron,       Ccaron,        2,            at ]};
    key <AE03> {[             eogonek,      Eogonek,        3,    numbersign ]};
    key <AE04> {[           eabovedot,    Eabovedot,        4,        dollar ]};
    key <AE05> {[             iogonek,      Iogonek,        5,       percent ]};
    key <AE06> {[              scaron,       Scaron,        6,   asciicircum ]};
    key <AE07> {[             uogonek,      Uogonek,        7,     ampersand ]};
    key <AE08> {[             umacron,      Umacron,        8,      asterisk ]};
    key <AE09> {[  doublelowquotemark,    parenleft,        9,     parenleft ]};
    key <AE10> {[ leftdoublequotemark,   parenright,        0,    parenright ]};
    key <AE11> {[               minus,   underscore,   endash                ]};
    key <AE12> {[              zcaron,       Zcaron,    equal,          plus ]};

    key <LSGT> {[              endash,     EuroSign                          ]};
};

// Similar to the above, but uses 3rd and 4th levels in the numeric row
// for Lithuanian letters
partial alphanumeric_keys modifier_keys
xkb_symbols "us" {

    include "latin"
    include "eurosign(e)"
    include "level3(ralt_switch)"

    name[Group1]="Lithuanian (US)";

    key <TLDE> {[    grave,    asciitilde,               acute               ]};
    key <AE01> {[        1,        exclam,             aogonek,      Aogonek ]};
    key <AE02> {[        2,            at,              ccaron,       Ccaron ]};
    key <AE03> {[        3,    numbersign,             eogonek,      Eogonek ]};
    key <AE04> {[        4,        dollar,           eabovedot,    Eabovedot ]};
    key <AE05> {[        5,       percent,             iogonek,      Iogonek ]};
    key <AE06> {[        6,   asciicircum,              scaron,       Scaron ]};
    key <AE07> {[        7,     ampersand,             uogonek,      Uogonek ]};
    key <AE08> {[        8,      asterisk,             umacron,      Umacron ]};
    key <AE09> {[        9,     parenleft,  doublelowquotemark,    parenleft ]};
    key <AE10> {[        0,    parenright, leftdoublequotemark,   parenright ]};
    key <AE11> {[    minus,    underscore,              endash               ]};
    key <AE12> {[    equal,          plus,              zcaron,       Zcaron ]};

    key <LSGT> {[   endash,      EuroSign                                    ]};
};

// Lithuanian keymap LST 1582:2000
// The standard is described at http://ims.mii.lt/klav/
// Extensions:  B01 L3 is "<" , B02 L3 is ">" and B03 L3 is endash to make this
// layout usable with pc101 and pc104 keyboards.
//
// Made by Gediminas Paulauskas <menesis@delfi.lt>
// Minor modifications by Ričardas Čepas and Rimas Kudelis

partial alphanumeric_keys modifier_keys
xkb_symbols "std" {

    include "latin"
    include "eurosign(e)"
    include "nbsp(level3)"
    include "kpdl(comma)"
    include "level3(ralt_switch)"

    name[Group1]="Lithuanian (standard)";

    key <TLDE> {[        grave,  asciitilde,               acute ]};
    key <AE01> {[       exclam,           1,                  at ]};
    key <AE02> {[        minus,           2,          underscore ]};
    key <AE03> {[        slash,           3,          numbersign ]};
    key <AE04> {[    semicolon,           4,              dollar ]};
    key <AE05> {[        colon,           5,             section ]};
    key <AE06> {[        comma,           6,         asciicircum ]};
    key <AE07> {[       period,           7,           ampersand ]};
    key <AE08> {[        equal,           8,            asterisk ]};
    key <AE09> {[    parenleft,           9,         bracketleft ]};
    key <AE10> {[   parenright,           0,        bracketright ]};
    key <AE11> {[     question,        plus,          apostrophe ]};
    key <AE12> {[            x,           X,             percent ]};

    key <AD01> {[      aogonek,     Aogonek                      ]};
    key <AD02> {[       zcaron,      Zcaron                      ]};
    key <AD11> {[      iogonek,     Iogonek,           braceleft ]};
    key <AD12> {[            w,           W,          braceright ]};

    key <AC04> {[       scaron,      Scaron                      ]};
    key <AC10> {[      uogonek,     Uogonek                      ]};
    key <AC11> {[    eabovedot,   Eabovedot,            quotedbl ]};
    key <BKSL> {[            q,           Q,                 bar ]};

    key <LSGT> {[         less,     greater,              endash ]};
    key <AB01> {[            z,           Z,                less ]};
    key <AB02> {[      umacron,     Umacron,             greater ]};
    key <AB03> {[            c,           C,              endash ]};
    key <AB08> {[       ccaron,      Ccaron,  doublelowquotemark ]};
    key <AB09> {[            f,           F, leftdoublequotemark ]};
    key <AB10> {[      eogonek,     Eogonek,           backslash ]};
};

// Lithuanian keymap LST 1205-92
// This standard was made deprecated by LST 1582:2000 above.
// This keyboard is also know as IBM layout.
// We follow the map shown at: http://www.registrucentras.lt/litwin/kbdlta.gif
// and info from Edis Tamošauskas <linas_lietus@yahoo.com>
//
// Made by Piter PUNK <piterpk@terra.com.br>
// Minor modifications and cleanup by Rimas Kudelis, 2010

partial alphanumeric_keys modifier_keys
xkb_symbols "ibm" {

    include "latin"
    include "eurosign(e)"
    include "nbsp(level3)"
    include "level3(ralt_switch)"

    name[Group1]="Lithuanian (IBM LST 1205-92)";

    key <TLDE> {[              grave,          asciitilde,          acute               ]};
    key <AE01> {[             exclam,                   1                               ]};
    key <AE02> {[           quotedbl,                   2,             at               ]};
    key <AE03> {[              slash,                   3,     numbersign               ]};
    key <AE04> {[          semicolon,                   4,         dollar               ]};
    key <AE05> {[              colon,                   5,        percent               ]};
    key <AE06> {[              comma,                   6,    asciicircum               ]};
    key <AE07> {[             period,                   7,      ampersand               ]};
    key <AE08> {[           question,                   8,       asterisk               ]};
    key <AE09> {[          parenleft,                   9                               ]};
    key <AE10> {[         parenright,                   0                               ]};
    key <AE11> {[         underscore,               minus,         endash               ]};
    key <AE12> {[               plus,               equal                               ]};

    key <AD01> {[            aogonek,             Aogonek,              q,            Q ]};
    key <AD02> {[             zcaron,              Zcaron,              w,            W ]};
    key <AD11> {[            iogonek,             Iogonek,    bracketleft,    braceleft ]};
    key <AD12> {[ doublelowquotemark, leftdoublequotemark,   bracketright,   braceright ]};

    key <AC10> {[            uogonek,             Uogonek,      semicolon,        colon ]};
    key <AC11> {[          eabovedot,           Eabovedot,     apostrophe,     quotedbl ]};

    key <LSGT> {[               less,             greater,         endash               ]};
    key <AB02> {[            umacron,             Umacron,              x,            X ]};
    key <AB08> {[             ccaron,              Ccaron,          comma,         less ]};
    key <AB09> {[             scaron,              Scaron,         period,      greater ]};
    key <AB10> {[            eogonek,             Eogonek,          slash,     question ]};
};

// LEKP and LEKPa layouts 1.0
// For more info visit http://lekp.info
// Created by Tautrimas Pajarskas, 2007
// Made by Ernestas Lukoševičius, 2007
// Minor cleanup by Rimas Kudelis, 2010

partial alphanumeric_keys modifier_keys
xkb_symbols "lekp" {

    include "capslock(backspace)"
    include "level3(ralt_switch)"

    name[Group1]="Lithuanian (LEKP)";

    key <TLDE> {[        grave,          asciitilde,         acute ]};
    key <AE01> {[        slash,          numbersign,           bar ]};
    key <AE02> {[    backslash,                  at,       section ]};
    key <AE03> {[       period,           braceleft                ]};
    key <AE04> {[        comma,          braceright                ]};
    key <AE05> {[            f,                   F                ]};
    key <AE06> {[       exclam,              endash                ]};
    key <AE07> {[            w,                   W                ]};
    key <AE08> {[      uogonek,             Uogonek                ]};
    key <AE09> {[      iogonek,             Iogonek                ]};
    key <AE10> {[    parenleft,  doublelowquotemark,    registered ]};
    key <AE11> {[   parenright, leftdoublequotemark,     copyright ]};
    key <AE12> {[        colon,           ampersand,     trademark ]};

    key <AD01> {[            q,                   Q,      EuroSign ]};
    key <AD02> {[            g,                   G,             7 ]};
    key <AD03> {[            r,                   R,             8 ]};
    key <AD04> {[            l,                   L,             9 ]};
    key <AD05> {[            d,                   D,       percent ]};
    key <AD06> {[       ccaron,              Ccaron                ]};
    key <AD07> {[            j,                   J                ]};
    key <AD08> {[            u,                   U,        period ]};
    key <AD09> {[    eabovedot,           Eabovedot,         minus ]};
    key <AD10> {[      eogonek,             Eogonek,         slash ]};
    key <AD11> {[     question,         bracketleft,      division ]};
    key <AD12> {[        equal,        bracketright                ]};

    key <AC01> {[            a,                   A,             0 ]};
    key <AC02> {[            k,                   K,             4 ]};
    key <AC03> {[            s,                   S,             5 ]};
    key <AC04> {[            t,                   T,             6 ]};
    key <AC05> {[            m,                   M,        dollar ]};
    key <AC06> {[            p,                   P                ]};
    key <AC07> {[            n,                   N                ]};
    key <AC08> {[            e,                   E,         comma ]};
    key <AC09> {[            i,                   I,          plus ]};
    key <AC10> {[            o,                   O,      asterisk ]};
    key <AC11> {[            y,                   Y,      multiply ]};
    key <BKSL> {[   apostrophe,          underscore                ]};

    key <LSGT> {[    semicolon,            quotedbl,      sterling ]};
    key <AB01> {[            z,                   Z,   asciicircum ]};
    key <AB02> {[            x,                   X,             1 ]};
    key <AB03> {[            c,                   C,             2 ]};
    key <AB04> {[            v,                   V,             3 ]};
    key <AB05> {[       zcaron,              Zcaron                ]};
    key <AB06> {[       scaron,              Scaron                ]};
    key <AB07> {[            b,                   B,        degree ]};
    key <AB08> {[      umacron,             Umacron,          less ]};
    key <AB09> {[      aogonek,             Aogonek,       greater ]};
    key <AB10> {[            h,                   H                ]};
};

partial alphanumeric_keys modifier_keys
xkb_symbols "lekpa" {

    include "capslock(backspace)"
    include "level3(ralt_switch)"

    name[Group1]="Lithuanian (LEKPa)";

    key <TLDE> {[        grave,          asciitilde,         acute ]};
    key <AE01> {[        slash,            quotedbl,           bar ]};
    key <AE02> {[    backslash,                  at,       section ]};
    key <AE03> {[       period,           braceleft,    numbersign ]};
    key <AE04> {[        comma,          braceright,      sterling ]};
    key <AE05> {[            f,                   F,     ampersand ]};
    key <AE06> {[       exclam,              endash                ]};
    key <AE07> {[            w,                   W                ]};
    key <AE08> {[      uogonek,             Uogonek                ]};
    key <AE09> {[      iogonek,             Iogonek                ]};
    key <AE10> {[    parenleft,  doublelowquotemark,    registered ]};
    key <AE11> {[   parenright, leftdoublequotemark,     copyright ]};
    key <AE12> {[        colon,           semicolon,     trademark ]};

    key <AD01> {[            q,                   Q,      EuroSign ]};
    key <AD02> {[            g,                   G,             7 ]};
    key <AD03> {[            r,                   R,             8 ]};
    key <AD04> {[            l,                   L,             9 ]};
    key <AD05> {[            d,                   D,       percent ]};
    key <AD06> {[       ccaron,              Ccaron                ]};
    key <AD07> {[            j,                   J                ]};
    key <AD08> {[            u,                   U,        period ]};
    key <AD09> {[    eabovedot,           Eabovedot,         minus ]};
    key <AD10> {[      eogonek,             Eogonek,         slash ]};
    key <AD11> {[     question,         bracketleft,      division ]};
    key <AD12> {[        equal,        bracketright                ]};

    key <AC01> {[            a,                   A,             0 ]};
    key <AC02> {[            k,                   K,             4 ]};
    key <AC03> {[            s,                   S,             5 ]};
    key <AC04> {[            t,                   T,             6 ]};
    key <AC05> {[            m,                   M,        dollar ]};
    key <AC06> {[            p,                   P                ]};
    key <AC07> {[            n,                   N                ]};
    key <AC08> {[            e,                   E,         comma ]};
    key <AC09> {[            i,                   I,          plus ]};
    key <AC10> {[            o,                   O,      asterisk ]};
    key <AC11> {[            y,                   Y,      multiply ]};
    key <BKSL> {[   apostrophe,          underscore                ]};

    key <AB01> {[            z,                   Z,   asciicircum ]};
    key <AB02> {[            x,                   X,             1 ]};
    key <AB03> {[            c,                   C,             2 ]};
    key <AB04> {[            v,                   V,             3 ]};
    key <AB05> {[       zcaron,              Zcaron                ]};
    key <AB06> {[       scaron,              Scaron                ]};
    key <AB07> {[            b,                   B,        degree ]};
    key <AB08> {[      umacron,             Umacron,          less ]};
    key <AB09> {[      aogonek,             Aogonek,       greater ]};
    key <AB10> {[            h,                   H                ]};
};

// EXTRAS:

partial alphanumeric_keys modifier_keys
xkb_symbols "us_dvorak" {

    include "us(dvorak)"

    name[Group1]="Lithuanian (Dvorak)";

    key <AE01>	{ [        1,      exclam,    aogonek,      Aogonek ] };
    key <AE02>	{ [        2,          at,     ccaron,       Ccaron ] };
    key <AE03>	{ [        3,  numbersign,    eogonek,      Eogonek ] };
    key <AE04>	{ [        4,      dollar,  eabovedot,    Eabovedot ] };
    key <AE05>	{ [        5,     percent,    iogonek,      Iogonek ] };
    key <AE06>	{ [        6, asciicircum,     scaron,       Scaron ] };
    key <AE07>	{ [        7,   ampersand,    uogonek,      Uogonek ] };
    key <AE08>	{ [        8,    asterisk,    umacron,      Umacron ] };
    key <AE09>	{ [        9,   parenleft, doublelowquotemark,  parenleft ] };
    key <AE10>	{ [        0,  parenright, leftdoublequotemark,parenright ] };
    key <AD12>	{ [    equal,        plus,     zcaron,       Zcaron ] };

    include "level3(ralt_switch)"
};


partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/lt(sun_type6)"
};

// Samogitian (žemaiťiu/žemaičių) layout based on Lithuanian standard layout.
// Long vowels are made by composition. It means after pressing vowel press grave accent (`).
// This layout also supports special letters like ëůȧťď or Latvian ģŗļķ. These can be accessed by similar letter with holding AltGr.
// Euro sign € is added on top e. Accessed by holding AltGr.
// To enable layout use:
//      Option "XkbLayout" "lt(sgs)"
//
// Added by Arnas Udovičius <zordsdavini@gmail.com>, 2020

partial alphanumeric_keys modifier_keys
xkb_symbols "sgs" {

    include "lt(basic)"
    name[Group1]="Samogitian";

    key <TLDE>  {[ U0304,   asciitilde, grave,      acute ]};
    key	<AD01>  {[ q,       Q, 	        U00EB, 	    U00CB ]};
    key	<AD02>  {[ w,    	W, 	        U016F, 	    U016E ]};
    key <AD04>	{[ r,     	R, 	        rcedilla,   Rcedilla]};
    key <AD05>  {[ t,     	T, 	        tcaron,     Tcaron ]};
    key <AC01>	{[ a,     	A, 	        U0227, 	    U0226 ]};
    key <AC03>  {[ d,      	D, 	        dcaron,     Dcaron ]};
    key <AC05>	{[ g,     	G, 	        gcedilla,   Gcedilla]};
    key <AC08>	{[ k,     	K, 	        kcedilla,   Kcedilla]};
    key <AC09>	{[ l,     	L, 	        lcedilla,   Lcedilla]};
};
// Common Latin alphabet layout

default partial
xkb_symbols "basic" {

    key <AE01>	{ [         1,     exclam,  onesuperior,   exclamdown ]	};
    key <AE02>	{ [         2,         at,  twosuperior,    oneeighth ]	};
    key <AE03>	{ [         3, numbersign, threesuperior,    sterling ]	};
    key <AE04>	{ [         4,     dollar,   onequarter,       dollar ]	};
    key <AE05>	{ [         5,    percent,      onehalf, threeeighths ]	};
    key <AE06>	{ [         6, asciicircum, threequarters, fiveeighths ] };
    key <AE07>	{ [         7,  ampersand,    braceleft, seveneighths ]	};
    key <AE08>	{ [         8,   asterisk,  bracketleft,    trademark ]	};
    key <AE09>	{ [         9,  parenleft, bracketright,    plusminus ]	};
    key <AE10>	{ [         0, parenright,   braceright,       degree ]	};
    key <AE11>	{ [     minus, underscore,    backslash, questiondown ]	};
    key <AE12>	{ [     equal,       plus, dead_cedilla,  dead_ogonek ]	};

    key <AD01>	{ [         q,          Q,           at,  Greek_OMEGA ]	};
    key <AD02>	{ [         w,          W,      lstroke,      Lstroke ]	};
    key <AD03>	{ [         e,          E,            e,            E ]	};
    key <AD04>	{ [         r,          R,    paragraph,   registered ]	};
    key <AD05>	{ [         t,          T,       tslash,       Tslash ]	};
    key <AD06>	{ [         y,          Y,    leftarrow,          yen ]	};
    key <AD07>	{ [         u,          U,    downarrow,      uparrow ]	};
    key <AD08>	{ [         i,          I,   rightarrow,     idotless ]	};
    key <AD09>	{ [         o,          O,       oslash,     Ooblique ]	};
    key <AD10>	{ [         p,          P,        thorn,        THORN ]	};
    key <AD11>	{ [bracketleft,  braceleft, dead_diaeresis, dead_abovering ] };
    key <AD12>	{ [bracketright, braceright, dead_tilde,  dead_macron ]	};

    key <AC01>	{ [         a,          A,           ae,           AE ]	};
    key <AC02>	{ [         s,          S,       ssharp,      section ]	};
    key <AC03>	{ [         d,          D,          eth,          ETH ]	};
    key <AC04>	{ [         f,          F,      dstroke,  ordfeminine ]	};
    key <AC05>	{ [         g,          G,          eng,          ENG ]	};
    key <AC06>	{ [         h,          H,      hstroke,      Hstroke ]	};
    key <AC07>	{ [         j,          J,    dead_hook,    dead_horn ] };
    key <AC08>	{ [         k,          K,          kra,    ampersand ]	};
    key <AC09>	{ [         l,          L,      lstroke,      Lstroke ]	};
    key <AC10>	{ [ semicolon,    colon, dead_acute, dead_doubleacute ]	};
    key <AC11>	{ [apostrophe, quotedbl, dead_circumflex,  dead_caron ]	};
    key <TLDE>	{ [     grave, asciitilde,      notsign,      notsign ]	};

    key <BKSL>	{ [ backslash,        bar,   dead_grave,   dead_breve ]	};
    key <AB01>	{ [         z,          Z, guillemotleft,        less ]	};
    key <AB02>	{ [         x,          X, guillemotright,    greater ]	};
    key <AB03>	{ [         c,          C,         cent,    copyright ]	};
    key <AB04>	{ [         v,          V, leftdoublequotemark, leftsinglequotemark ]	};
    key <AB05>	{ [         b,          B, rightdoublequotemark, rightsinglequotemark ] };
    key <AB06>	{ [         n,          N,            n,            N ]	};
    key <AB07>	{ [         m,          M,           mu,    masculine ]	};
    key <AB08>	{ [     comma,       less, horizconnector,   multiply ]	};
    key <AB09>	{ [    period,    greater, periodcentered,   division ]	};
    key <AB10>	{ [     slash,   question, dead_belowdot, dead_abovedot ] };
};

// Northern Europe ( Danish, Finnish, Norwegian, Swedish) common layout

partial
xkb_symbols "type2" {

    include "latin"

    key <AE01>	{ [         1,     exclam,   exclamdown,  onesuperior ]	};
    key <AE02>	{ [         2,   quotedbl,           at,  twosuperior ]	};
    key <AE03>	{ [         3, numbersign,     sterling, threesuperior]	};
    key <AE04>	{ [         4,   currency,       dollar,   onequarter ]	};
    key <AE05>	{ [         5,    percent,      onehalf,         cent ]	};
    key <AE06>	{ [         6,  ampersand,          yen,  fiveeighths ]	};
    key <AE07>	{ [         7,      slash,    braceleft,     division ]	};
    key <AE08>	{ [         8,  parenleft,  bracketleft, guillemotleft]	};
    key <AE09>	{ [         9, parenright, bracketright, guillemotright] };
    key <AE10>	{ [         0,      equal,   braceright,       degree ]	};

    key <AD03>	{ [         e,          E,     EuroSign,         cent ]	};
    key <AD04>	{ [         r,          R,   registered,   registered ]	};
    key <AD05>	{ [         t,          T,        thorn,        THORN ]	};
    key <AD09>	{ [         o,          O,           oe,           OE ]	};
    key <AD11>	{ [     aring,  Aring, dead_diaeresis, dead_abovering ]	};
    key <AD12>	{ [dead_diaeresis, dead_circumflex, dead_tilde, dead_caron ] };

    key <AC01>	{ [         a,          A,  ordfeminine,    masculine ]	};

    key <AB03>	{ [         c,          C,    copyright,    copyright ]	};
    key <AB08>	{ [     comma,  semicolon, dead_cedilla,  dead_ogonek ]	};
    key <AB09>	{ [    period,   colon, periodcentered, dead_abovedot ]	};
    key <AB10>	{ [     minus, underscore, dead_belowdot, dead_abovedot ] };
};

// Slavic Latin ( Albanian, Croatian, Polish, Slovene, Yugoslav)
// common layout

partial
xkb_symbols "type3" {

    include "latin"

    key <AD01>	{ [         q,          Q,    backslash,  Greek_OMEGA ]	};
    key <AD02>	{ [         w,          W,          bar,      Lstroke ]	};
    key <AD06>	{ [         z,          Z,    leftarrow,          yen ]	};

    key <AC04>	{ [         f,          F,  bracketleft,  ordfeminine ]	};
    key <AC05>	{ [         g,          G, bracketright,          ENG ]	};
    key <AC08>	{ [         k,          K,      lstroke,    ampersand ]	};

    key <AB01>	{ [         y,          Y, guillemotleft,        less ]	};
    key <AB04>	{ [         v,          V,           at,        grave ]	};
    key <AB05>	{ [         b,          B,    braceleft,   apostrophe ]	};
    key <AB06>	{ [         n,          N,   braceright,   braceright ]	};
    key <AB07>	{ [         m,          M,      section,    masculine ]	};
    key <AB08>	{ [     comma,  semicolon,         less,     multiply ]	};
    key <AB09>	{ [    period,      colon,      greater,     division ]	};
};

// Another common Latin layout
// (German, Estonian, Spanish, Icelandic, Italian, Latin American, Portuguese)

partial
xkb_symbols "type4" {

    include "latin"

    key <AE02>	{ [         2,   quotedbl,           at,    oneeighth ]	};
    key <AE06>	{ [         6,  ampersand,      notsign,  fiveeighths ]	};
    key <AE07>	{ [         7,      slash,    braceleft, seveneighths ]	};
    key <AE08>	{ [         8,  parenleft,  bracketleft,    trademark ]	};
    key <AE09>	{ [         9, parenright, bracketright,    plusminus ]	};
    key <AE10>	{ [         0,      equal,   braceright,       degree ]	};

    key <AD03>	{ [         e,          E,     EuroSign,         cent ]	};

    key <AB08>	{ [   comma,  semicolon, horizconnector,     multiply ]	};
    key <AB09>	{ [  period,      colon, periodcentered,     division ]	};
    key <AB10>	{ [   minus, underscore, dead_belowdot, dead_abovedot ]	};
};

partial
xkb_symbols "nodeadkeys" {

    key <AE12>	{ [     equal,       plus,     cedilla,        ogonek ]	};
    key <AD11>	{ [bracketleft,  braceleft,  diaeresis,        degree ]	};
    key <AD12>	{ [bracketright, braceright, asciitilde,       macron ]	};
    key <AC10>	{ [ semicolon,      colon,       acute,   doubleacute ]	};
    key <AC11>	{ [apostrophe,   quotedbl, asciicircum,         caron ]	};
    key <BKSL>	{ [ backslash,        bar,       grave,         breve ]	};
    key <AB10>	{ [     slash,   question, dead_belowdot,    abovedot ]	};
};

partial
xkb_symbols "type2_nodeadkeys" {

    include "latin(nodeadkeys)"

    key <AD11>	{ [     aring,      Aring,   diaeresis,        degree ]	};
    key <AD12>	{ [ diaeresis, asciicircum, asciitilde,         caron ]	};
    key <AB08>	{ [     comma,  semicolon,     cedilla,        ogonek ]	};
    key <AB09>	{ [    period,   colon, periodcentered,      abovedot ]	};
    key <AB10>	{ [   minus, underscore, dead_belowdot,      abovedot ]	};
};

partial
xkb_symbols "type3_nodeadkeys" {

    include "latin(nodeadkeys)"
};

partial
xkb_symbols "type4_nodeadkeys" {

    include "latin(nodeadkeys)"

    key <AB10>	{ [   minus, underscore, dead_belowdot,      abovedot ]	};
};

// Added 2008.03.05 by Marcin Woliński
// See http://marcinwolinski.pl/keyboard/ for a description.
// Used by pl(intl)
//
// ┌─────┐
// │ 2 4 │   2 = Shift,  4 = Level3 + Shift
// │ 1 3 │   1 = Normal, 3 = Level3
// └─────┘
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ~ ~ │ ! ' │ @ " │ # ˝ │ $ ¸ │ % ˇ │ ^ ^ │ & ˘ │ * ̇  │ ( ̣  │ ) ° │ _ ¯ │ + ˛ ┃ ⌫ Back- ┃
// │ ` ` │ 1 ¡ │ 2 © │ 3 • │ 4 § │ 5 € │ 6 ¢ │ 7 − │ 8 × │ 9 ÷ │ 0 ° │ - – │ = — ┃  space  ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ Q   │ W   │ E   │ R   │ T   │ Y   │ U   │ I   │ O   │ P   │ { « │ } » ┃ Enter ┃
// ┃Tab ↹  ┃ q   │ w   │ e   │ r   │ t   │ y   │ u   │ i   │ o   │ p   │ [ ‹ │ ] › ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ A   │ S   │ D   │ F   │ G   │ H   │ J   │ K   │ L   │ : “ │ " ” │ | ¶ ┃      ┃
// ┃Caps ⇬  ┃ a   │ s   │ d   │ f   │ g   │ h   │ j   │ k   │ l   │ ; ‘ │ ' ’ │ \   ┃      ┃
// ┣━━━━━━━━┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃             │ Z   │ X   │ C   │ V   │ B   │ N   │ M   │ < „ │ > · │ ? ¿ ┃             ┃
// ┃Shift ⇧      │ z   │ x   │ c   │ v   │ b   │ n   │ m   │ , ‚ │ . … │ / ⁄ ┃Shift ⇧      ┃
// ┣━━━━━━━┳━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣                               ⍽ ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣           Space               ⍽ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial
xkb_symbols "intl" {

    key <TLDE>	{ [     grave,  asciitilde, dead_grave,       dead_tilde ]	};
    key <AE01>	{ [         1,      exclam, exclamdown,       dead_acute ]	};
    key <AE02>	{ [         2,          at,  copyright,   dead_diaeresis ]	};
    key <AE03>	{ [         3,  numbersign,      U2022, dead_doubleacute ]	}; // U+2022 is bullet (the name bullet does not work)
    key <AE04>	{ [         4,      dollar,    section,     dead_cedilla ]	};
    key <AE05>	{ [         5,     percent,   EuroSign,       dead_caron ]	};
    key <AE06>	{ [         6, asciicircum,       cent,  dead_circumflex ]	};
    key <AE07>	{ [         7,   ampersand,      U2212,       dead_breve ]	}; // U+2212 is MINUS SIGN
    key <AE08>	{ [         8,    asterisk,   multiply,    dead_abovedot ]	};
    key <AE09>	{ [         9,   parenleft,   division,    dead_belowdot ]	};
    key <AE10>	{ [         0,  parenright,     degree,   dead_abovering ]	};
    key <AE11>	{ [     minus,  underscore,     endash,      dead_macron ]	};
    key <AE12>	{ [     equal,        plus,     emdash,      dead_ogonek ]	};

    key <AD01>	{ [         q,          Q ]	};
    key <AD02>	{ [         w,          W ]	};
    key <AD03>	{ [         e,          E ]	};
    key <AD04>	{ [         r,          R ]	};
    key <AD05>	{ [         t,          T ]	};
    key <AD06>	{ [         y,          Y ]	};
    key <AD07>	{ [         u,          U ]	};
    key <AD08>	{ [         i,          I ]	};
    key <AD09>	{ [         o,          O ]	};
    key <AD10>	{ [         p,          P ]	};
    key <AD11>	{ [bracketleft,   braceleft,  U2039, guillemotleft ]    };
    key <AD12>	{ [bracketright, braceright, U203A, guillemotright ]	};

    key <AC01>	{ [         a,          A ]	};
    key <AC02>	{ [         s,          S ]	};
    key <AC03>	{ [         d,          D ]	};
    key <AC04>	{ [         f,          F ]	};
    key <AC05>	{ [         g,          G ]	};
    key <AC06>	{ [         h,          H ]	};
    key <AC07>	{ [         j,          J ]	};
    key <AC08>	{ [         k,          K ]	};
    key <AC09>	{ [         l,          L ]	};
    key <AC10>	{ [ semicolon,      colon,  leftsinglequotemark,  leftdoublequotemark  ]  };
    key <AC11>	{ [apostrophe,   quotedbl, rightsinglequotemark, rightdoublequotemark  ]  };

    key <BKSL>	{ [ backslash,        bar, 	NoSymbol, paragraph ] };
    key <AB01>	{ [         z,          Z ]	};
    key <AB02>	{ [         x,          X ]	};
    key <AB03>	{ [         c,          C ]	};
    key <AB04>	{ [         v,          V ]	};
    key <AB05>	{ [         b,          B ]     };
    key <AB06>	{ [         n,          N ]	};
    key <AB07>	{ [         m,          M ]	};
    key <AB08>	{ [     comma,       less, singlelowquotemark, doublelowquotemark ]	};
    key <AB09>	{ [    period,    greater, ellipsis, periodcentered ]	};
    key <AB10>	{ [     slash,   question, U2044,  questiondown ]     };  // U+2044 is FRACTION SLASH
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "fr(basic)"

    name[Group1]="Bambara";

    key <AB06>	{ [         n,          N,         U0272,       U019D ]	}; // n N ɲ Ɲ
    key <AC02>	{ [         s,          S,         U0161,       U0160 ]	}; // s S š Š
    key <AC05>	{ [         g,          G,         U0254,       U0186 ]	}; // g G ɔ Ɔ
    key <AC10>	{ [         m,          M,         U014B,       U014A ]	}; // m M ŋ Ŋ
    key <AD02>	{ [         z,          Z,         U017E,       U017d ]	}; // z Z ž Ž
    key <AD03>	{ [         e,          E,         U025B,       U0190 ]	}; // e E ɛ Ɛ
};

partial alphanumeric_keys
xkb_symbols "fr-oss" {

    include "fr(oss)"

    name[Group1]="French (Mali, alt.)";

    // š Š on d replaces ë Ë
    // ɲ Ɲ on j replaces ü Ü
    // ŋ Ŋ on m replaces ö Ö
    // ž Ž on z replaces â Â
    // ɛ Ɛ on r replaces ê Ê
    // ɔ Ɔ on p replaces ô Ô

    key <AC03>	{ [                d,                D,                U0161,                 U0160 ] }; // d D š Š
    key <AC07>	{ [                j,                J,                U0272,                 U019D ] }; // j J ɲ Ɲ
    key <AC10>	{ [                m,                M,                U014B,                 U014A ] }; // m M ŋ Ŋ
    key <AD02>	{ [                z,                Z,                U017E,                 U017d ] }; // z Z ž Ž
    key <AD04>	{ [                r,                R,                U025B,                 U0190 ] }; // r R ɛ Ɛ
    key <AD10>	{ [                p,                P,                U0254,                 U0186 ] }; // p P ɔ Ɔ
};

partial alphanumeric_keys
xkb_symbols "us-mac" {

    include "us(mac)"

    name[Group1]="English (Mali, US, Macintosh)";

    // ž Ž on z replaces Ω ¸
    // ɛ Ɛ on a replaces å Å
    // š Š on s replaces ß  
    // ɲ Ɲ on j replaces ∆ ½
    // ŋ Ŋ on k replaces ° 
    // ɔ Ɔ on o replaces ø Ø

    key <AB01> { [	   z,          Z,         U017E,            U017d ] }; // z Z ž Ž
    key <AC01> { [	   a,          A,         U025B,            U0190 ]	}; // a A ɛ Ɛ
    key <AC02> { [	   s,          S,         U0161,            U0160 ] }; // s S š Š
    key <AC07> { [	   j,          J,         U0272,            U019D ] }; // j J ɲ Ɲ
    key <AC08> { [	   k,          K,         U014B,            U014A ] }; // k K ŋ Ŋ
    key <AD09> { [	   o,          O,         U0254,            U0186 ] }; // o O ɔ Ɔ
};

partial alphanumeric_keys
xkb_symbols "us-intl" {

    include "us(intl)"

    name[Group1]="English (Mali, US, intl.)";

    // ž Ž on x replaces
    // š Š on s replaces ß §
    // ɲ Ɲ on h replaces
    // ŋ Ŋ on j replaces
    // ɛ Ɛ on w replaces å Å
    // ɔ Ɔ on o replaces ó Ó

    key <AB02> { [	   x,          X,         U017E,            U017d ] }; // x X ž Ž
    key <AC02> { [	   s,          S,         U0161,            U0160 ] }; // s S š Š
    key <AC06> { [	   h,	       H,         U0272,            U019D ]	}; // h H ɲ Ɲ
    key <AC07> { [	   j,	       J,		  U014B,            U014A ]	}; // j J ŋ Ŋ
    key <AD02> { [	   w,          W,         U025B,            U0190 ] }; // w W ɛ Ɛ
    key <AD09> { [	   o,          O,         U0254,            U0186 ] }; // o O ɔ Ɔ
};
//////////////////////////////////////////////////////////////////////////
// Copyright (C) 1999, 2000, 2007, 2009 by Anton Zinoviev <anton@lml.bas.bg>
//
// This software may be used, modified, copied, distributed, and sold,
// both in source and binary form provided that the above copyright
// notice and these terms are retained. The name of the author may not
// be used to endorse or promote products derived from this software
// without prior permission.  THIS SOFTWARE IS PROVIDED "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES ARE DISCLAIMED.  IN NO EVENT
// SHALL THE AUTHOR BE LIABLE FOR ANY DAMAGES ARISING IN ANY WAY OUT
// OF THE USE OF THIS SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
// Version 2.0

// The following variants are defined in this file:

// "bds" - the BDS keyboard layout compliant with the proposed
//         Bulgarian state standard BDS 5237:2006

// "phonetic" - the phonetic Bulgarian layout with the traditional position
//              of the letters

// "bas_phonetic" - the phonetic keyboard layout compliant with the
//                  proposed Bulgarian state standard BDS 5237:2006

// "bekl" - the enhanced variant of the Bulgarian BDS keyboard, proposed
//                  in May 2020.

// "latin" - an extended variant of the QWERTY layout with symbols that
//           Bulgarian users will type while the keyboard is in Latin mode

// The reasons behind the layout of the symbols in levels 3 and 4 are
// explained in http://arxiv.org/abs/0905.0484  (in Bulgarian).

// Two notes for the maintainers of xkeyboard-config:

// 1. Please do not use key names such as <LatQ> for the Bulgarian
// phonetic layouts.  The placement of the symbols must stay always
// the same regardless of which one of the alias sets in
// xkb/keycodes/aliases is used.

// 2. The layouts should not include level3(ralt_switch).

//////////////////////////////////////////////////////////////////////////

// Describes Bulgarian keyboard "BDS" modified according to the
// the new state standard BDS 5237:2006 and extended with symbols in
// levels 3 and 4.
default partial alphanumeric_keys
xkb_symbols "bds" {

  name[Group1]= "Bulgarian";

  key <TLDE> {[ parenleft,         parenright,        bracketleft,       bracketright        ]};
  key <AE01> {[ 1,                 exclam                                                    ]};
  key <AE02> {[ 2,                 question                                                  ]};
  key <AE03> {[ 3,                 plus,              dagger,            dagger              ]};
  key <AE04> {[ 4,                 quotedbl                                                  ]};
  key <AE05> {[ 5,                 percent,           U2329,             U232A               ]};
  key <AE06> {[ 6,                 equal,             emdash,            emdash              ]};
  key <AE07> {[ 7,                 colon,             ellipsis,          ellipsis            ]};
  key <AE08> {[ 8,                 slash,             U0300,             U0301               ]};
  key <AE09> {[ 9,                 endash                                                    ]};
  key <AE10> {[ 0,                 numerosign                                                ]};
  key <AE11> {[ minus,             dollar,            U2011,             EuroSign            ]};
  key <AE12> {[ period,            EuroSign                                                  ]};

  key <AD01> {[ comma,             Cyrillic_yeru,  rightsinglequotemark, leftsinglequotemark ]};
  key <AD02> {[ Cyrillic_u,        Cyrillic_U                                                ]};
  key <AD03> {[ Cyrillic_ie,       Cyrillic_IE,       Cyrillic_e,        Cyrillic_E          ]};
  key <AD04> {[ Cyrillic_i,        Cyrillic_I,        U045D,             U040D               ]};
  key <AD05> {[ Cyrillic_sha,      Cyrillic_SHA                                              ]};
  key <AD06> {[ Cyrillic_shcha,    Cyrillic_SHCHA                                            ]};
  key <AD07> {[ Cyrillic_ka,       Cyrillic_KA,       copyright,         copyright           ]};
  key <AD08> {[ Cyrillic_es,       Cyrillic_ES,       copyright,         copyright           ]};
  key <AD09> {[ Cyrillic_de,       Cyrillic_DE                                               ]};
  key <AD10> {[ Cyrillic_ze,       Cyrillic_ZE                                               ]};
  key <AD11> {[ Cyrillic_tse,      Cyrillic_TSE                                              ]};
  key <AD12> {[ semicolon,         section                                                   ]};

  key <AC01> {[ Cyrillic_softsign, U045D,             Cyrillic_yeru,     Cyrillic_YERU       ]};
  key <AC02> {[ Cyrillic_ya,       Cyrillic_YA,       U0463,             U0462               ]};
  key <AC03> {[ Cyrillic_a,        Cyrillic_A                                                ]};
  key <AC04> {[ Cyrillic_o,        Cyrillic_O                                                ]};
  key <AC05> {[ Cyrillic_zhe,      Cyrillic_ZHE                                              ]};
  key <AC06> {[ Cyrillic_ghe,      Cyrillic_GHE                                              ]};
  key <AC07> {[ Cyrillic_te,       Cyrillic_TE,       trademark,         trademark           ]};
  key <AC08> {[ Cyrillic_en,       Cyrillic_EN                                               ]};
  key <AC09> {[ Cyrillic_ve,       Cyrillic_VE                                               ]};
  key <AC10> {[ Cyrillic_em,       Cyrillic_EM                                               ]};
  key <AC11> {[ Cyrillic_che,      Cyrillic_CHE                                              ]};
  key <BKSL> {[ doublelowquotemark, leftdoublequotemark, guillemotleft,  guillemotright      ]};

  key <LSGT> {[ U045D,             U040D                                                     ]};
  key <AB01> {[ Cyrillic_yu,       Cyrillic_YU                                               ]};
  key <AB02> {[ Cyrillic_shorti,   Cyrillic_SHORTI,   U046D,             U046C               ]};
  key <AB03> {[ Cyrillic_hardsign, Cyrillic_HARDSIGN, U046B,             U046A               ]};
  key <AB04> {[ Cyrillic_e,        Cyrillic_E                                                ]};
  key <AB05> {[ Cyrillic_ef,       Cyrillic_EF                                               ]};
  key <AB06> {[ Cyrillic_ha,       Cyrillic_HA                                               ]};
  key <AB07> {[ Cyrillic_pe,       Cyrillic_PE                                               ]};
  key <AB08> {[ Cyrillic_er,       Cyrillic_ER,       registered,        registered          ]};
  key <AB09> {[ Cyrillic_el,       Cyrillic_EL                                               ]};
  key <AB10> {[ Cyrillic_be,       Cyrillic_BE                                               ]};

  key <SPCE> {[ space,             space,             nobreakspace,      nobreakspace        ]};

  key <KPDL> { type[Group1] = "KEYPAD",             [ KP_Delete,         KP_Separator        ]};
};

// This is an improved variant of the traditional Bulgarian phonetic
// keyboard.  Some unnecessary symbols in levels 1 and 2 are replaced
// by more useful ones (similar as in "bas_phonetic") and additional
// symbols are added in levels 3 and 4.
partial alphanumeric_keys
xkb_symbols "phonetic" {
  name[Group1]= "Bulgarian (traditional phonetic)";

  key <TLDE> {[ Cyrillic_che,      Cyrillic_CHE                                              ]};
  key <AE01> {[ 1,                 exclam                                                    ]};
  key <AE02> {[ 2,                 at                                                        ]};
  key <AE03> {[ 3,                 numerosign                                                ]};
  key <AE04> {[ 4,                 dollar,            EuroSign,          EuroSign            ]};
  key <AE05> {[ 5,                 percent                                                   ]};
  key <AE06> {[ 6,                 EuroSign                                                  ]};
  key <AE07> {[ 7,                 section                                                   ]};
  key <AE08> {[ 8,                 asterisk                                                  ]};
  key <AE09> {[ 9,                 parenleft,         bracketleft,       U2329               ]};
  key <AE10> {[ 0,                 parenright,        bracketright,      U232A               ]};
  key <AE11> {[ minus,             endash,            U2011,             U2011               ]};
  key <AE12> {[ equal,             plus,              emdash,            dagger              ]};

  key <AD01> {[ Cyrillic_ya,       Cyrillic_YA,       U0463,             U0462               ]};
  key <AD02> {[ Cyrillic_ve,       Cyrillic_VE                                               ]};
  key <AD03> {[ Cyrillic_ie,       Cyrillic_IE,       Cyrillic_e,        Cyrillic_E          ]};
  key <AD04> {[ Cyrillic_er,       Cyrillic_ER,       registered,        registered          ]};
  key <AD05> {[ Cyrillic_te,       Cyrillic_TE,       trademark,         trademark           ]};
  key <AD06> {[ Cyrillic_hardsign, Cyrillic_HARDSIGN, U046B,             U046A               ]};
  key <AD07> {[ Cyrillic_u,        Cyrillic_U                                                ]};
  key <AD08> {[ Cyrillic_i,        Cyrillic_I,        U045D,             U040D               ]};
  key <AD09> {[ Cyrillic_o,        Cyrillic_O                                                ]};
  key <AD10> {[ Cyrillic_pe,       Cyrillic_PE                                               ]};
  key <AD11> {[ Cyrillic_sha,      Cyrillic_SHA                                              ]};
  key <AD12> {[ Cyrillic_shcha,    Cyrillic_SHCHA                                            ]};

  key <AC01> {[ Cyrillic_a,        Cyrillic_A                                                ]};
  key <AC02> {[ Cyrillic_es,       Cyrillic_ES,       copyright,         copyright           ]};
  key <AC03> {[ Cyrillic_de,       Cyrillic_DE                                               ]};
  key <AC04> {[ Cyrillic_ef,       Cyrillic_EF                                               ]};
  key <AC05> {[ Cyrillic_ghe,      Cyrillic_GHE                                              ]};
  key <AC06> {[ Cyrillic_ha,       Cyrillic_HA                                               ]};
  key <AC07> {[ Cyrillic_shorti,   Cyrillic_SHORTI,   U046D,             U046C               ]};
  key <AC08> {[ Cyrillic_ka,       Cyrillic_KA                                               ]};
  key <AC09> {[ Cyrillic_el,       Cyrillic_EL                                               ]};
  key <AC10> {[ semicolon,         colon,             ellipsis,          ellipsis            ]};
  key <AC11> {[ apostrophe,        quotedbl,       rightsinglequotemark, leftsinglequotemark ]};
  key <BKSL> {[ Cyrillic_yu,       Cyrillic_YU                                               ]};

  key <LSGT> {[ U045D,             U040D                                                     ]};
  key <AB01> {[ Cyrillic_ze,       Cyrillic_ZE                                               ]};
  key <AB02> {[ Cyrillic_softsign, U045D,             Cyrillic_yeru,     Cyrillic_YERU       ]};
  key <AB03> {[ Cyrillic_tse,      Cyrillic_TSE,      copyright,         copyright           ]};
  key <AB04> {[ Cyrillic_zhe,      Cyrillic_ZHE                                              ]};
  key <AB05> {[ Cyrillic_be,       Cyrillic_BE                                               ]};
  key <AB06> {[ Cyrillic_en,       Cyrillic_EN                                               ]};
  key <AB07> {[ Cyrillic_em,       Cyrillic_EM                                               ]};
  key <AB08> {[ comma,             less,             doublelowquotemark, guillemotleft       ]};
  key <AB09> {[ period,            greater,         leftdoublequotemark, guillemotright      ]};
  key <AB10> {[ slash,             question,          U0300,             U0301               ]};

  key <SPCE> {[ space,             space,             nobreakspace,      nobreakspace        ]};

  key <KPDL> { type[Group1] = "KEYPAD",             [ KP_Delete,         KP_Separator        ]};
};

// This is the Bulgarian phonetic keyboard according to the proposed
// state standard BDS 5237:2006 with additional symbols in levels 3 and 4.
partial alphanumeric_keys
xkb_symbols "bas_phonetic" {
  include "bg(phonetic)"
  name[Group1]= "Bulgarian (new phonetic)";

  key <TLDE> {[ Cyrillic_yu,       Cyrillic_YU                                               ]};
  key <AD01> {[ Cyrillic_che,      Cyrillic_CHE                                              ]};
  key <AD02> {[ Cyrillic_sha,      Cyrillic_SHA                                              ]};
  key <AD11> {[ Cyrillic_ya,       Cyrillic_YA,       U0463,             U0462               ]};
  key <BKSL> {[ Cyrillic_softsign, U045D,             Cyrillic_yeru,     Cyrillic_YERU       ]};
  key <AB02> {[ Cyrillic_zhe,      Cyrillic_ZHE                                              ]};
  key <AB04> {[ Cyrillic_ve,       Cyrillic_VE                                               ]};
};

// This is an enhanced variant of the Bulgarian BDS keyboard, proposed
// in May 2020 by a group of more than 500 linguists, teachers, writers,
// translators, IT specialists, professors and many more.
partial alphanumeric_keys
xkb_symbols "bekl" {

  name[Group1]= "Bulgarian (enhanced)";

  key <TLDE> {[ parenleft,         parenright,        bracketleft,       bracketright        ]};
  key <AE01> {[ 1,                 exclam                                                    ]};
  key <AE02> {[ 2,                 question,          U0040,             U0040               ]};
  key <AE03> {[ 3,                 plus,              dagger,            dagger              ]};
  key <AE04> {[ 4,                 quotedbl                                                  ]};
  key <AE05> {[ 5,                 percent,           U2329,             U232A               ]};
  key <AE06> {[ 6,                 equal,             emdash,            emdash              ]};
  key <AE07> {[ 7,                 colon,             ellipsis,          ellipsis            ]};
  key <AE08> {[ 8,                 slash,             U0300,             U0301               ]};
  key <AE09> {[ 9,                 endash                                                    ]};
  key <AE10> {[ 0,                 numerosign                                                ]};
  key <AE11> {[ minus,             dollar,            U2011,             EuroSign            ]};
  key <AE12> {[ period,            EuroSign                                                  ]};

  key <AD01> {[ comma,             U02BC                                                     ]};
  key <AD02> {[ Cyrillic_u,        Cyrillic_U                                                ]};
  key <AD03> {[ Cyrillic_ie,       Cyrillic_IE,       Cyrillic_e,        Cyrillic_E          ]};
  key <AD04> {[ Cyrillic_i,        Cyrillic_I,        U045D,             U040D               ]};
  key <AD05> {[ Cyrillic_sha,      Cyrillic_SHA                                              ]};
  key <AD06> {[ Cyrillic_shcha,    Cyrillic_SHCHA                                            ]};
  key <AD07> {[ Cyrillic_ka,       Cyrillic_KA,       copyright,         copyright           ]};
  key <AD08> {[ Cyrillic_es,       Cyrillic_ES                                               ]};
  key <AD09> {[ Cyrillic_de,       Cyrillic_DE                                               ]};
  key <AD10> {[ Cyrillic_ze,       Cyrillic_ZE                                               ]};
  key <AD11> {[ Cyrillic_tse,      Cyrillic_TSE                                              ]};
  key <AD12> {[ semicolon,         section                                                   ]};

  key <AC01> {[ Cyrillic_softsign, U045D,             Cyrillic_yeru,     Cyrillic_YERU       ]};
  key <AC02> {[ Cyrillic_ya,       Cyrillic_YA                                               ]};
  key <AC03> {[ Cyrillic_a,        Cyrillic_A                                                ]};
  key <AC04> {[ Cyrillic_o,        Cyrillic_O                                                ]};
  key <AC05> {[ Cyrillic_zhe,      Cyrillic_ZHE                                              ]};
  key <AC06> {[ Cyrillic_ghe,      Cyrillic_GHE                                              ]};
  key <AC07> {[ Cyrillic_te,       Cyrillic_TE,       trademark,         trademark           ]};
  key <AC08> {[ Cyrillic_en,       Cyrillic_EN                                               ]};
  key <AC09> {[ Cyrillic_ve,       Cyrillic_VE                                               ]};
  key <AC10> {[ Cyrillic_em,       Cyrillic_EM                                               ]};
  key <AC11> {[ Cyrillic_che,      Cyrillic_CHE                                              ]};
  key <BKSL> {[ doublelowquotemark, leftdoublequotemark, guillemotleft,  guillemotright      ]};

  key <LSGT> {[ U045D,             U040D                                                     ]};
  key <AB01> {[ Cyrillic_yu,       Cyrillic_YU                                               ]};
  key <AB02> {[ Cyrillic_shorti,   Cyrillic_SHORTI,   U046D,             U046C               ]};
  key <AB03> {[ Cyrillic_hardsign, Cyrillic_HARDSIGN, U046B,             U046A	             ]};
  key <AB04> {[ U0463,             U0462	                                                 ]};
  key <AB05> {[ Cyrillic_ef,       Cyrillic_EF                                               ]};
  key <AB06> {[ Cyrillic_ha,       Cyrillic_HA                                               ]};
  key <AB07> {[ Cyrillic_pe,       Cyrillic_PE                                               ]};
  key <AB08> {[ Cyrillic_er,       Cyrillic_ER,       registered,        registered          ]};
  key <AB09> {[ Cyrillic_el,       Cyrillic_EL                                               ]};
  key <AB10> {[ Cyrillic_be,       Cyrillic_BE                                               ]};

  key <SPCE> {[ space,             space,             nobreakspace,      nobreakspace        ]};

  key <KPDL> { type[Group1] = "KEYPAD",             [ KP_Delete,         KP_Separator        ]};
};


// This is an extended variant of the standard Latin QWERTY layout with
// additional symbols in levels 3 and 4.
hidden partial alphanumeric_keys
xkb_symbols "latin" {

  key <TLDE> {[ grave,             asciitilde,        U2248,             U2245               ]};
  key <AE01> {[ 1,                 exclam,            notsign,           notsign             ]};
  key <AE02> {[ 2,                 at,                twosuperior,       enfilledcircbullet  ]};
  key <AE03> {[ 3,                 numbersign,        threesuperior,     notequal            ]};
  key <AE04> {[ 4,                 dollar,            EuroSign,          sterling            ]};
  key <AE05> {[ 5,                 percent,           U2030,             U2030               ]};
  key <AE06> {[ 6,                 asciicircum,       logicaland,        logicalor           ]};
  key <AE07> {[ 7,                 ampersand,         section,           section             ]};
  key <AE08> {[ 8,                 asterisk,          infinity,          multiply            ]};
  key <AE09> {[ 9,                 parenleft,         U2202,             nabla               ]};
  key <AE10> {[ 0,                 parenright,        U2300,             U2300               ]};
  key <AE11> {[ minus,             underscore,        U2011,             endash              ]};
  key <AE12> {[ equal,             plus,              emdash,            plusminus           ]};

  key <AD01> {[ q,                 Q,                 Greek_THETA,       Greek_theta         ]};
  key <AD02> {[ w,                 W,                 Greek_OMEGA,       Greek_omega         ]};
  key <AD03> {[ e,                 E,                 U2203,             Greek_epsilon       ]};
  key <AD04> {[ r,                 R,                 registered,        Greek_rho           ]};
  key <AD05> {[ t,                 T,                 trademark,         Greek_tau           ]};
  key <AD06> {[ y,                 Y,                 yen,               Greek_upsilon       ]};
  key <AD07> {[ u,                 U,                 intersection,      union               ]};
  key <AD08> {[ i,                 I,                 integral,          Greek_iota          ]};
  key <AD09> {[ o,                 O,                 degree,            U222E               ]};
  key <AD10> {[ p,                 P,                 Greek_PI,          Greek_pi            ]};
  key <AD11> {[ bracketleft,       braceleft,         U2286,             includedin          ]};
  key <AD12> {[ bracketright,      braceright,        U2208,             U2209               ]};

  key <AC01> {[ a,                 A,                 U2200,             Greek_alpha         ]};
  key <AC02> {[ s,                 S,                 Greek_SIGMA,       Greek_sigma         ]};
  key <AC03> {[ d,                 D,                 Greek_DELTA,       Greek_delta         ]};
  key <AC04> {[ f,                 F,                 Greek_PHI,         Greek_phi           ]};
  key <AC05> {[ g,                 G,                 Greek_GAMMA,       Greek_gamma         ]};
  key <AC06> {[ h,                 H,                 U2225,             Greek_eta           ]};
  key <AC07> {[ j,                 J                                                         ]};
  key <AC08> {[ k,                 K,                 U03F0,             Greek_kappa         ]};
  key <AC09> {[ l,                 L,                 Greek_LAMBDA,      Greek_lambda        ]};
  key <AC10> {[ semicolon,         colon,             division,          division            ]};
  key <AC11> {[ apostrophe,        quotedbl,        leftdoublequotemark, rightdoublequotemark]};
  key <BKSL> {[ backslash,         bar,               identical,         downtack            ]};

  key <LSGT> {[ less,              greater,           U2266,             U2267               ]};
  key <AB01> {[ z,                 Z,                 U2220,             Greek_zeta          ]};
  key <AB02> {[ x,                 X,                 Greek_XI,          Greek_xi            ]};
  key <AB03> {[ c,                 C,                 copyright,         Greek_chi           ]};
  key <AB04> {[ v,                 V,                 Greek_PSI,         Greek_psi           ]};
  key <AB05> {[ b,                 B,                 U03D1,             Greek_beta          ]};
  key <AB06> {[ n,                 N,                 U207F,             Greek_nu            ]};
  key <AB07> {[ m,                 M,                 Greek_mu,          Greek_mu            ]};
  key <AB08> {[ comma,             less,              U2266,             U21D4               ]};
  key <AB09> {[ period,            greater,           U2267,             U21D2               ]};
  key <AB10> {[ slash,             question,        leftsinglequotemark, rightsinglequotemark]};

  key <SPCE> {[ space,             space,             nobreakspace,      nobreakspace        ]};

  key <KPDL> { type[Group1] = "KEYPAD",             [ KP_Delete,         KP_Decimal          ]};
};
// based on a keyboard map from an 'xkb/symbols/il' file

// This is an implemetation of the Israeli standard SI-1452 (2013)
// It does not implement changes to the English layout, as that part
// of the standard is not normative nor really useful in the context
// of xkb.
// This implementation extends the standard with Yiddish digraphs
// (a common extension) and Nun Hafukha (a fun character).

default partial alphanumeric_keys
xkb_symbols "basic" {
    // uses the kbd layout in use in Israel.

    name[Group1]= "Hebrew";
    key.type[Group1] = "FOUR_LEVEL_SEMIALPHABETIC";

    key <AB01> { [ hebrew_zain,	Z		]       };
    key <AB02> { [ hebrew_samech, X,	U05B6	]       };  // Segol
    key <AB03> { [ hebrew_bet,	C,	U05B1	]       };  // Hataf Segol
    key <AB04> { [ hebrew_he,	V		]       };
    key <AB05> { [ hebrew_nun,	B,	NoSymbol,	U05C6	]}; // Nun Hafukha
    key <AB06> { [ hebrew_mem,	N		]	};
    key <AB07> { [ hebrew_zade,	M,	U05B5	]	};  // Tsere
    key <AB08> { [ hebrew_taw,	greater,	rightsinglequotemark	]}; // greater Mirrored
    key <AB09> { [ hebrew_finalzade,	less,	singlelowquotemark	]}; // less Mirrored

    key <AC01> { [ hebrew_shin,	A,	U05B0	]	};  // Shva
    key <AC02> { [ hebrew_dalet,S,	U05BC	]       };  // Dagesh
    key <AC03> { [ hebrew_gimel,D		]       };
    key <AC04> { [ hebrew_kaph,	F		]	};
    key <AC05> { [ hebrew_ayin,	G,	U05F1	]       };  // Yiddish Vav Yod
    key <AC06> { [ hebrew_yod,	H,	U05F2	]       };  // Yiddish Double Yod
    key <AC07> { [ hebrew_chet,	J,	U05B4	]	};  // Hiriq
    key <AC08> { [ hebrew_lamed, K		]	};
    key <AC09> { [ hebrew_finalkaph,	L,	rightdoublequotemark	]};
    key <AC10> { [ hebrew_finalpe,	colon,	doublelowquotemark	]};

    key <AD01> { [ slash,	Q,	U05C2	]	};  // Sin Dot
    key <AD02> { [ apostrophe,	W,	U05C1	]	};  // Shin Dot
    key <AD03> { [ hebrew_qoph,	E,	U05B8	]	};  // Qamats
    key <AD04> { [ hebrew_resh,	R,	U05B3	]	};  // Hataf Qamats
    key <AD05> { [ hebrew_aleph,T		]       };
    key <AD06> { [ hebrew_tet,	Y,	U05F0	]       };  // Yiddish Double Vav
    key <AD07> { [ hebrew_waw,	U,	U05B9	]       };  // Holam
    key <AD08> { [ hebrew_finalnun,	I	]       };
    key <AD09> { [ hebrew_finalmem,	O	]       };
    key <AD10> { [ hebrew_pe,	P,	U05B7	]	};  // Patah

    key.type[Group1] = "FOUR_LEVEL";

    // Non-alphanumeric keys
    key <AB10> { [ period,	question,  division	]};
    key <AC11> { [ comma,	quotedbl,	U05F4]	};  // Gershayim
    key <AD11> { [ bracketright, braceright, U05B2	]}; // Mirrored; Hataf Patah
    key <AD12> { [ bracketleft,  braceleft,  U05BF	]}; // Mirrored; Rafe
    key <BKSL> { [ backslash,    bar,  U05BB	]	};  // Qubuts

    // Top (digits) row
    key <TLDE> { [ semicolon,	asciitilde,	U05F3	]}; // Geresh
    key <AE01> { [     1,	exclam	]		};
    key <AE02> { [     2,	at	]		};
    key <AE03> { [     3, 	numbersign,	EuroSign	]};
    key <AE04> { [     4, 	dollar,		NewSheqelSign	]};
    key <AE05> { [     5,	percent,	degree	]};
    key <AE06> { [     6, 	asciicircum,	U05AB	]}; // Hebrew Accent Ole
    key <AE07> { [     7,	ampersand,	U05BD	]}; // Meteg
    key <AE08> { [     8,	asterisk,	multiply]};
    key <AE09> { [     9,	parenright,	U200E	]}; // LRM; Paren Mirrored
    key <AE10> { [     0,	parenleft,	U200F	]}; // RLM; Paren Mirrored
    key <AE11> { [ minus,	underscore,	U05BE	]}; // Maqaf
    key <AE12> { [ equal, 	plus,		endash	]};

    include "level3(ralt_switch)"
};


// nikud patter based on Dekel Tsur's Hebrew mapping for LyX
partial alphanumeric_keys
xkb_symbols "lyx" {
    name[Group1]= "Hebrew (lyx)";

    key <TLDE> { [ semicolon,	asciitilde	]	};
    // On some key (e.g. AD01, right below) there is not yet mapping for the
    // second shift level. Since I could not figure a simple way to map this
    // to "emit nothing", it is currently mapped to the same letter of the
    // first shift level (avoiding mapping may risk it be used by a character
    // from a different group).
    key <AD01> { [ slash,	slash		]       };
    key <AD02> { [ apostrophe,	apostrophe	]       };
    key <AD03> { [ hebrew_qoph,	0x10005b8	]	}; // Qamats
    key <AD04> { [ hebrew_resh,	0x10005bc	]       }; // Dagesh/Shuruq
    key <AD05> { [ hebrew_aleph,	0x100200e	]       }; // LRM
    key <AD06> { [ hebrew_tet,	0x100200f	]       }; // RLM
    key <AD07> { [ hebrew_waw,	0x10005b9	]       }; // Holam
    key <AD08> { [ hebrew_finalnun,hebrew_finalnun]      };
    key <AD09> { [ hebrew_finalmem,hebrew_finalmem]      };
    key <AD10> { [ hebrew_pe,	0x10005b7	]	}; // Patah

    key <AC01> { [ hebrew_shin,	0x10005b0	]	}; // Sheva
    key <AC02> { [ hebrew_dalet,	0x10005bc	]       }; // Dagesh/Shuruq
    key <AC03> { [ hebrew_gimel,	hebrew_gimel	]       };
    key <AC04> { [ hebrew_kaph,	hebrew_kaph	]	};
    key <AC05> { [ hebrew_ayin,	0x10005c2	]       }; // Sin dot
    key <AC06> { [ hebrew_yod,	0x10005c1	]       }; // Shin dot
    key <AC07> { [ hebrew_chet,	0x10005b4	]	}; // Hiriq
    key <AC08> { [ hebrew_lamed, 0x10020aa	]	}; // NIS
    key <AC09> { [ hebrew_finalkaph,hebrew_finalkaph]    };
    key <AC10> { [ hebrew_finalpe,	colon	]       };
    key <AC11> { [ comma,	quotedbl	]	};

    key <AB01> { [ hebrew_zain,	hebrew_zain	]       };
    key <AB02> { [ hebrew_samech,0x10005b6	]       }; // Segol
    key <AB03> { [ hebrew_bet,	0x10005bb	]       }; // Qubuts
    key <AB04> { [ hebrew_he,	0x10005b1	]       }; // H. Segol
    key <AB05> { [ hebrew_nun,	0x10005b2	]	}; // H. Patah
    key <AB06> { [ hebrew_mem,	0x10005b3	]       }; // H.  Qamats
    key <AB07> { [ hebrew_zade,	0x10005b5	]	}; // Tsere
    key <AB08> { [ hebrew_taw,	greater		]	};
    key <AB09> { [ hebrew_finalzade,	less	]	};
    key <AB10> { [ period,	question	]	};

    // Note the parens mirroring below:
    key <AD11> { [ bracketright,	braceright	]       };
    key <AD12> { [ bracketleft,	braceleft	]       };
    key <AE01> { [ 1, exclam      ]};
    key <AE02> { [ 2, at          ]};
    key <AE03> { [ 3, numbersign  ]};
    key <AE04> { [ 4, dollar      ]};
    key <AE05> { [ 5, percent     ]};
    key <AE06> { [ 6, asciicircum ]};
    key <AE07> { [ 7, ampersand   ]};
    key <AE08> { [ 8, asterisk    ]};
    key <AE09> { [ 9, parenright  ]};
    key <AE10> { [ 0, parenleft	  ]};

    key <AE11> { [ minus     ,	0x10005be	]	}; // H. Hiphen
    key <AE12> { [ equal     ,	plus		]	};
};


partial alphanumeric_keys
xkb_symbols "phonetic" {

    include "il(basic)"

    name[Group1]= "Hebrew (phonetic)";

    // Implements the phonetic layout from the old Slackware 'il.map' file.

    key <AE09> {	[	  9,	parenleft	]	};
    key <AE10> {	[	  0,	parenright	]	};
    key <TLDE> {	[     grave,	asciitilde	]	};

    key <AD11> {	[ bracketleft,	braceleft	]	};
    key <AD12> {	[ bracketright,	braceright	]	};
    key <AC10> {	[ semicolon,	colon		]	};
    key <AC11> {	[ apostrophe,	quotedbl	]	};
    key <AB08> {	[     comma,	less		]	};
    key <AB09> {	[    period,	greater		]	};
    key <AB10> {	[     slash,	question	]	};
    key <BKSL> {	[ backslash,         bar	]	};

    key <LatQ> {	[ hebrew_qoph, hebrew_qoph	]	};
    key <LatW> {	[ hebrew_waw, hebrew_waw	]	};
    key <LatE> {	[ hebrew_aleph, hebrew_aleph	]       };
    key <LatR> {	[ hebrew_resh, hebrew_resh	]	};
    key <LatT> {	[ hebrew_taw, hebrew_tet	]       };
    key <LatY> {	[ hebrew_ayin, hebrew_ayin	]       };
    key <LatU> {	[ hebrew_waw, hebrew_waw	]       };
    key <LatI> {	[ hebrew_yod, hebrew_yod	]       };
    key <LatO> {	[ hebrew_samech, hebrew_samech	]       };
    key <LatP> {	[ hebrew_pe, hebrew_finalpe	]	};

    key <LatA> {	[ hebrew_aleph, hebrew_aleph	]	};
    key <LatS> {	[ hebrew_shin, hebrew_shin	]       };
    key <LatD> {	[ hebrew_dalet, hebrew_dalet	]       };
    key <LatF> {	[ hebrew_pe, hebrew_finalpe	]	};
    key <LatG> {	[ hebrew_gimel, hebrew_gimel	]       };
    key <LatH> {	[ hebrew_he, hebrew_he		]       };
    key <LatJ> {	[ hebrew_yod, hebrew_yod	]	};
    key <LatK> {	[ hebrew_kaph, hebrew_finalkaph	]	};
    key <LatL> {	[ hebrew_lamed, hebrew_lamed	]       };

    key <LatZ> {	[ hebrew_zain, hebrew_zain	]       };
    key <LatX> {	[ hebrew_chet, hebrew_chet	]       };
    key <LatC> {	[ hebrew_zade, hebrew_finalzade	]       };
    key <LatV> {	[ hebrew_waw, hebrew_waw	]       };
    key <LatB> {	[ hebrew_bet, hebrew_bet	]       };
    key <LatN> {	[ hebrew_nun, hebrew_finalnun	]	};
    key <LatM> {	[ hebrew_mem, hebrew_finalmem	]	};
};

// The 'Biblical Hebrew' keyboard layout as defined by Tiro for use with the
// 'SBL Hebrew' font was added 2006.11.13 by Sebastian J. Bronner
// <waschtl@sbronner.com>.  Its primary features (as compared to the lyx layout)
// are that the consonants are in the Israeli standard positions, that a great
// multitude of glyphs can be input directly from the keyboard, and that it is
// the closest thing to a standard layout a theologian can hope for.
// Documentation (including printable keyboard tables), SBL Hebrew font, and
// keyboard layout for Windows are available at
// http://www.sbl-site.org/Resources/Resources_BiblicalFonts.aspx.
//
// It is of interest that the 'basic' layout defined first in this file (as
// ships with x.org disagrees in the non-consonant characters that the Tiro-
// layout claims to be the Israeli standard.  Tiros apparent diligence in the
// PDF-documentation accompanying the keyboard-layout-files lead me to put
// greater stock in their claim than in this file.  Therefore, the 'biblical'
// layout below does not include 'il(basic)' but redoes the _whole_ thing from
// scratch.

partial alphanumeric_keys
xkb_symbols "biblical" {
	name[Group1]= "Hebrew (Biblical, Tiro)";
	key.type = "FOUR_LEVEL_SEMIALPHABETIC";

	key <TLDE> { [ U05C3, U05AE, semicolon, asciitilde ] };
	key <AE01> { [ 1,     U05A9, VoidSymbol, exclam ] };
	key <AE02> { [ 2,     U0599, VoidSymbol, at ] };
	key <AE03> { [ 3,     U0592, VoidSymbol, numbersign ] };
	key <AE04> { [ 4,     U05AF, NewSheqelSign, dollar ] };
	key <AE05> { [ 5,     U05BA, U200D, percent ] };
	key <AE06> { [ 6,     U05B9, U200C, asciicircum ] };
	key <AE07> { [ 7,     U05BF, U034F, ampersand ] };
	key <AE08> { [ 8,     U05C2, U200E, asterisk ] };
	key <AE09> { [ 9,     U05C1, U200F, parenright ] };
	key <AE10> { [ 0,     U059D, U25CC, parenleft ] };
	key <AE11> { [ U05BE, U05A0, minus, underscore ] };
	key <AE12> { [ equal, U05BC, VoidSymbol, plus ] };

	key <AD01> { [ U0307, U05C4, U0308, slash ] };
	key <AD02> { [ U05F3, U05AC, U05F4, apostrophe ] };
	key <AD03> { [ hebrew_qoph, U05AB, U20AC ] };
	key <AD04> { [ hebrew_resh, U059F ] };
	key <AD05> { [ hebrew_aleph, U0593 ] };
	key <AD06> { [ hebrew_tet, U059E ] };
	key <AD07> { [ hebrew_waw, U059C, U05F0 ] };
	key <AD08> { [ hebrew_finalnun, U05A1 ] };
	key <AD09> { [ hebrew_finalmem, U0595 ] };
	key <AD10> { [ hebrew_pe, U0594 ] };
	key <AD11> { [ bracketright, U0597, VoidSymbol, braceright ] };
	key <AD12> { [ bracketleft, U0598, VoidSymbol, braceleft ] };
	key <BKSL> { [ U05C0, U05A8, backslash, bar ] };

	key <AC01> { [ hebrew_shin, U05BD ] };
	key <AC02> { [ hebrew_dalet, U05B0 ] };
	key <AC03> { [ hebrew_gimel, U05BB ] };
	key <AC04> { [ hebrew_kaph, U05B4 ] };
	key <AC05> { [ hebrew_ayin, U05B1 ] };
	key <AC06> { [ hebrew_yod, U05B6, U05F2 ] };
	key <AC07> { [ hebrew_chet, U05B5, U05F1 ] };
	key <AC08> { [ hebrew_lamed, U05B3 ] };
	key <AC09> { [ hebrew_finalkaph, U05B8, U05C7 ] };
	key <AC10> { [ hebrew_finalpe, U05B2, VoidSymbol, colon ] };
	key <AC11> { [ U059a, U05B7, comma, quotedbl ] };

	key <AB01> { [ hebrew_zain, U05C5 ] };
	key <AB02> { [ hebrew_samech, U05A4 ] };
	key <AB03> { [ hebrew_bet, U05AA, U05A2 ] };
	key <AB04> { [ hebrew_he, U05A6 ] };
	key <AB05> { [ hebrew_nun, U05A5, U05C6 ] };
	key <AB06> { [ hebrew_mem, U05A7 ] };
	key <AB07> { [ hebrew_zade, U059B ] };
	key <AB08> { [ hebrew_taw, U0591, VoidSymbol, greater ] };
	key <AB09> { [ hebrew_finalzade, U0596, VoidSymbol, less ] };
	key <AB10> { [ U05AD, U05A3, period, question ] };

	key <SPCE> { [ space, space, thinspace, nobreakspace ] };
};

// EXTRAS

// Biblical hebrew (SIL) US Standard layout version 1.5
// This map is based closely on v 1.5 of the standard. The only deviation being the replacement of the composite characters sin and shin 
// by their more recent Unicodev6 counterparts
// this map contains all the characters found in Biblical annotation, masoretic and Dead Sea Scroll related work.
// The layout corresponds phonetically to a US standard layout or similar (Qwerty).
// If you are using an actual Hebrew keyboard, you are probably better off using a Tiro compliant scholarly layout
// This linux port created and maintained by Dennis Meulensteen, dennis@meulensteen.nl
partial alphanumeric_keys
xkb_symbols "biblicalSIL" {
	name[Group1]= "Hebrew (Biblical, SIL phonetic)";
	key.type = "FOUR_LEVEL_SEMIALPHABETIC";

	key <TLDE> { [ U20AC,		U20AA,		U0024 ] }; 			//Euro, 		Shekel, 		Dollar		-
	key <AE01> { [ 1,		U0021,		U05BD,		U0597 ] };		//1,			exclamation	meteg		revia
	key <AE02> { [ 2,		U0598,		U05A2,		U05AE ] };	//2,			zarqa		atn. hafukh	zinor
	key <AE03> { [ 3,		U05A8,		U0596,		U0599 ] };		//3,			qadma		tipeha		pashta
	key <AE04> { [ 4,		U059C,		U05A5,		U05A0 ] };		//4,			geresh		merkha		tel. gedola
	key <AE05> { [ 5,		U059E,		U05A6,		U05A9 ] };		//5,			gershayim		mer. kefula	tel qetana
	key <AE06> { [ 6,		VoidSymbol,	U05AD,		U059F ] };		//6,			-			dehi			qar. para
	key <AE07> { [ 7,		U05AC,		U05A3,		U05A1 ] };		//7,			iluy			munah		pazer
	key <AE08> { [ 8,		U059D,		U059B,		U0595 ] };		//8,			g. muqdam	tevir			zaq. gadol
	key <AE09> { [ 9,		U0029,		U05A7,		U0593 ] };		//9,			parenth.R		darqa		shalshelet
	key <AE10> { [ 0,		U0028,		U05AA,		U05AF ] };		//0,			paren.L		yer. ben yomo	masora c.
	key <AE11> { [ U05BE,		U2013,		U2014,		U05BF ] };	//Maqaf, 		en dash		em dash		rafe
	key <AE12> { [ U05BC,		VoidSymbol,	U0591,		U25CC ] };	//Dagesh		-			etnahta		mark base

	key <AD01> { [ hebrew_qoph,	U0597 ] };							//Qof		revia			-			-
	key <AD02> { [ hebrew_waw] }; 								//waw		-			-			-
	key <AD03> { [ U05B6,		U05B5,		VoidSymbol,	U05B1 ] };	//segol		tsere			-			hat. segol
	key <AD04> { [ hebrew_resh ] };								//resh		-			-			-
	key <AD05> { [ hebrew_taw ] }; 								//taw		-			-			-
	key <AD06> { [ hebrew_yod,	U059F ] };							//jod		qar. para		-			-
	key <AD07> { [ U05BB] }; 									//quibuts		-			-			-
	key <AD08> { [ U05B4 ] };									//hiriq, 		-			-			-
	key <AD09> { [ U05B9,		U05BA,		U05C7, 		U05B3 ] };	//holam, 		holam(wav)	qam. qatan	hat. Qamats
	key <AD10> { [ hebrew_pe,	hebrew_finalpe,	VoidSymbol,	U034F ] };	//pe			final pe		-			c. grapheme joiner
	key <AD11> { [ bracketright,	braceright,	VoidSymbol,	U0594 ] };		//Bracket R	brace R		-			zaq. qatan
	key <AD12> { [ bracketleft,	braceleft, 	U059A,		U0592 ] };		//Brachket L	brace L		yetiv			segolta
	key <BKSL> { [ U05C0, 		U05C0, 		U05A4,		U05AB ] };//Paseq		Paseq		mahapakh		ole

	key <AC01> { [ U05B7,		U05B8,		U05C7,		U05B2 ] };  //patah		Qamats		Qam. Qatan	hat. patah
	key <AC02> { [ hebrew_samech,	U05E9 ] }; 					//Samech, 	shin no dot	-			-
	key <AC03> { [ hebrew_dalet ] }; 								//dalet		-			-			-
	key <AC04> { [ UFB2B,		hebrew_shin,	U05C2 ] }; 			//UCSv6 Sin	shin (nodot)	sindot		-
	key <AC05> { [ hebrew_gimel,	VoidSymbol,	U25E6,		U2022 ] };	//gimel		-			bullet(DSS)	bulletfill (DSS)
	key <AC06> { [ hebrew_he,	VoidSymbol,	U0336,		U030A ] };//he			-			strikeout(DSS)	Ring Above(DSS)
	key <AC07> { [ UFB2A,		hebrew_shin,	U05C1] };				//UCSv6 Shin	shin (nodot)	shindot		-
	key <AC08> { [ hebrew_kaph,	hebrew_finalkaph ] };					//kaph		Final kaph		-
	key <AC09> { [ hebrew_lamed,	VoidSymbol ] };						//lamed		-			-
	key <AC10> { [ U05B0,		U05F4,		semicolon,	U05C3 ] };		//sva		gers. p		semicolon		sof pasuq
	key <AC11> { [ U2019,		U201D, 		U0323,		U05C4 ] };//QuoteRight	double R Quote	punctum		punctum Above

	key <AB01> { [ hebrew_zain ] };								//Zayin		-			-			
	key <AB02> { [ hebrew_chet ] };								//chet		-			-
	key <AB03> { [ hebrew_zade, 	U05E5 ] };							// tzade, 		final tzade		-
	key <AB04> { [ hebrew_tet ] };									//tet			-			-
	key <AB05> { [ hebrew_bet ] };									//bet			-			-
	key <AB06> { [ hebrew_nun,	hebrew_finalnun ] }; 					//nun, 		final nun
	key <AB07> { [ hebrew_mem,	hebrew_finalmem, U200C,		U200D ] };	//mem, 		final mem		0.wid.non.join.	0.wid.joiner
	key <AB08> { [ U002C,		U05E2, 		U00AB,		U0307 ] }; //comma, 	ayin			guillemetsR	masora dot
	key <AB09> { [ U0002E,		U05D0, 		U00BB,		U0308 ] }; //period, 		alef			guillemetsL	thousands
	key <AB10> { [ slash,		question,	U05F3 ] };					//slash		question		geresh P

	key <SPCE> { [ space, 		space,		thinspace,	nobreakspace ] };//space		space			thin space,		nbsp
};
// Symbols for Japanese 106-keys keyboards (by tsuka@kawalab.dnj.ynu.ac.jp).

default partial alphanumeric_keys
xkb_symbols "106" {

    include "jp(common)"
    name[Group1]= "Japanese";

    key <AE10> { [ 0, asciitilde	] };
    key <AE13> { [ backslash, bar	] };
};

hidden partial alphanumeric_keys
xkb_symbols "common" {
    // "Common" keys for jp 106/109A layouts.

    key <HZTG> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Zenkaku_Hankaku, Kanji ]
    };

    key <AE01> { [ 1, exclam		] };
    key <AE02> { [ 2, quotedbl		] };
    key <AE03> { [ 3, numbersign	] };
    key <AE04> { [ 4, dollar		] };
    key <AE05> { [ 5, percent		] };
    key <AE06> { [ 6, ampersand		] };
    key <AE07> { [ 7, apostrophe	] };
    key <AE08> { [ 8, parenleft		] };
    key <AE09> { [ 9, parenright	] };
    key <AE11> { [ minus, equal		] };
    key <AE12> { [ asciicircum,	asciitilde] };

    key <AD01> { [ q, Q			] };
    key <AD02> { [ w, W			] };
    key <AD03> { [ e, E			] };
    key <AD04> { [ r, R			] };
    key <AD05> { [ t, T			] };
    key <AD06> { [ y, Y			] };
    key <AD07> { [ u, U			] };
    key <AD08> { [ i, I			] };
    key <AD09> { [ o, O			] };
    key <AD10> { [ p, P			] };
    key <AD11> { [ at, grave		] };
    key <AD12> { [ bracketleft,	braceleft ] };

    key <CAPS> { [ Eisu_toggle, Caps_Lock ] };

    key <AC01> { [ a, A			] };
    key <AC02> { [ s, S			] };
    key <AC03> { [ d, D			] };
    key <AC04> { [ f, F			] };
    key <AC05> { [ g, G			] };
    key <AC06> { [ h, H			] };
    key <AC07> { [ j, J			] };
    key <AC08> { [ k, K			] };
    key <AC09> { [ l, L			] };
    key <AC10> { [ semicolon, plus	] };
    key <AC11> { [ colon, asterisk	] };
    key <AC12> { [ bracketright, braceright ] };

    key <AB01> { [ z, Z			] };
    key <AB02> { [ x, X			] };
    key <AB03> { [ c, C			] };
    key <AB04> { [ v, V			] };
    key <AB05> { [ b, B			] };
    key <AB06> { [ n, N			] };
    key <AB07> { [ m, M			] };
    key <AB08> { [ comma,  less		] };
    key <AB09> { [ period, greater	] };
    key <AB10> { [ slash, question	] };
    key <AB11> { [ backslash, underscore] };
    key <LCTL> { [ Control_L		] };

    key <NFER> { [ Muhenkan		] };

    key <XFER> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Henkan, Mode_switch ]
    };

    key <HKTG> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Hiragana_Katakana, Romaji ]
    };

    key <EISU> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Eisu_toggle ]
    };

    key <KANA> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Hiragana_Katakana ]
    };

    key <PRSC> {
	type[Group1]= "PC_ALT_LEVEL2",
	symbols[Group1]= [ Print, Execute ]
    };
};

partial alphanumeric_keys
xkb_symbols "henkan" {
    key <XFER> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Henkan, Mode_switch ]
    };
};

partial alphanumeric_keys
xkb_symbols "OADG109A" {

    include "jp(common)"
    name[Group1]= "Japanese (OADG 109A)";

    key <AE10> { [ 0		] };
    key <AE13> { [ yen, bar	] };
};

// 86 keys with kana map
partial alphanumeric_keys
xkb_symbols "kana86" {

    include "srvr_ctrl(fkey2vt)"
    include "pc(editing)"
    include "keypad(numoperdecsep)"
    include "altwin(menu)"
    include "jp(kana)"
    include "jp(OADG109A)"
    name[Group1]= "Japanese (Kana 86)";

    key  <ESC> {	[ Escape	]	};
    key <NMLK> {	[ Num_Lock	]	};
    key <BKSP> {	[ BackSpace	]	};
    key  <TAB> {	[ Tab, ISO_Left_Tab ]	};
    key <RTRN> {	[ Return	]	};
    key <LFSH> {	[ Shift_L	]	};
    key <RTSH> {	[ Shift_R	]	};
    key <LWIN> {	[ Super_L	]	};
    key <LALT> {	[ Alt_L		]	};
    key <SPCE> {	[ space		]	};
    key <RALT> {	[ Alt_R		]	};
    // For compatibility with other keyboards connected at the same time:
    key <RWIN> {	[ Super_R	]	};
    key <RCTL> {	[ Control_R	]	};
};

partial alphanumeric_keys
xkb_symbols "kana" {

    name[Group1]= "Japanese (Kana)";

    key <HZTG> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Zenkaku_Hankaku, Kanji ]
    };

    key <AE01> { [ kana_NU		]	};
    key <AE02> { [ kana_FU		]	};
    key <AE03> { [ kana_A, kana_a	]	};
    key <AE04> { [ kana_U, kana_u	]	};
    key <AE05> { [ kana_E, kana_e	]	};
    key <AE06> { [ kana_O, kana_o	]	};
    key <AE07> { [ kana_YA, kana_ya	]	};
    key <AE08> { [ kana_YU, kana_yu	]	};
    key <AE09> { [ kana_YO, kana_yo	]	};
    key <AE10> { [ kana_WA, kana_WO	]	};
    key <AE11> { [ kana_HO		]	};
    key <AE12> { [ kana_HE		]	};
    key <AE13> { [ prolongedsound	]	};

    key <AD01> { [ kana_TA		]	};
    key <AD02> { [ kana_TE		]	};
    key <AD03> { [ kana_I, kana_i	]	};
    key <AD04> { [ kana_SU		]	};
    key <AD05> { [ kana_KA		]	};
    key <AD06> { [ kana_N		]	};
    key <AD07> { [ kana_NA		]	};
    key <AD08> { [ kana_NI		]	};
    key <AD09> { [ kana_RA		]	};
    key <AD10> { [ kana_SE		]	};
    key <AD11> { [ voicedsound		]	};
    key <AD12> { [ semivoicedsound, kana_openingbracket ] };

    key <CAPS> { [ Eisu_toggle, Caps_Lock ]	};
    key <AC01> { [ kana_CHI		]	};
    key <AC02> { [ kana_TO		]	};
    key <AC03> { [ kana_SHI		]	};
    key <AC04> { [ kana_HA		]	};
    key <AC05> { [ kana_KI		]	};
    key <AC06> { [ kana_KU		]	};
    key <AC07> { [ kana_MA		]	};
    key <AC08> { [ kana_NO		]	};
    key <AC09> { [ kana_RI		]	};
    key <AC10> { [ kana_RE		]	};
    key <AC11> { [ kana_KE		]	};
    key <AC12> { [ kana_MU, kana_closingbracket ] };

    key <AB01> { [ kana_TSU, kana_tsu	]	};
    key <AB02> { [ kana_SA		]	};
    key <AB03> { [ kana_SO		]	};
    key <AB04> { [ kana_HI		]	};
    key <AB05> { [ kana_KO		]	};
    key <AB06> { [ kana_MI		]	};
    key <AB07> { [ kana_MO		]	};
    key <AB08> { [ kana_NE, kana_comma ]	};
    key <AB09> { [ kana_RU, kana_fullstop ]	};
    key <AB10> { [ kana_ME, kana_middledot ]	};
    key <AB11> { [ kana_RO		]	};
    key <LCTL> { [ Control_L		]	};

    key <NFER> { [ Muhenkan		]	};

    key <XFER> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Henkan, Mode_switch ]
    };
    key <HKTG> {
	type[Group1]="PC_ALT_LEVEL2",
	symbols[Group1]= [ Hiragana_Katakana, Romaji ]
    };

    key <PRSC> {
	type[Group1]= "PC_ALT_LEVEL2",
	symbols[Group1]= [ Print, Execute ]
    };
};

partial alphanumeric_keys
xkb_symbols "nicola_f_bs" {
    key <BKSP> {
	type="",
	symbols[Group1]= [ bracketright, braceright ]
    };
    key <AE10> { [ 0, underscore        ] };
    key <AD11> { [ colon, asterisk      ] };
    key <AC11> { [ BackSpace, BackSpace ] };
    key <AC12> { [ Escape               ] };
    key <AB11> { [ at, grave            ] };
};

// Copied from macintosh_vndr/jp
partial alphanumeric_keys
xkb_symbols "mac" {
    include "jp(kana)"
    name[Group1]= "Japanese (Macintosh)";

    replace key <CAPS> { [ Caps_Lock ] };
};

partial alphanumeric_keys
xkb_symbols "hztg_escape" {
    replace key <HZTG> { [ Escape ] };
};

partial alphanumeric_keys
xkb_symbols "dvorak" {
    include "jp(OADG109A)"
    name[Group1]= "Japanese (Dvorak)";

    key <AE11> { [ at, grave		] };

    key <AD01> { [ colon, asterisk	] };
    key <AD02> { [ comma, less		] };
    key <AD03> { [ period, greater	] };
    key <AD04> { [ p, P			] };
    key <AD05> { [ y, Y			] };
    key <AD06> { [ f, F			] };
    key <AD07> { [ g, G			] };
    key <AD08> { [ c, C			] };
    key <AD09> { [ r, R			] };
    key <AD10> { [ l, L			] };
    key <AD11> { [ slash, question	] };

    key <AC02> { [ o, O			] };
    key <AC03> { [ e, E			] };
    key <AC04> { [ u, U			] };
    key <AC05> { [ i, I			] };
    key <AC06> { [ d, D			] };
    key <AC07> { [ h, H			] };
    key <AC08> { [ t, T			] };
    key <AC09> { [ n, N			] };
    key <AC10> { [ s, S			] };
    key <AC11> { [ minus, equal		] };

    key <AB01> { [ semicolon, plus	] };
    key <AB02> { [ q, Q			] };
    key <AB03> { [ j, J			] };
    key <AB04> { [ k, K			] };
    key <AB05> { [ x, X			] };
    key <AB06> { [ b, B			] };
    key <AB08> { [ w, W			] };
    key <AB09> { [ v, V			] };
    key <AB10> { [ z, Z			] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6_suncompat" {
	include "sun_vndr/jp(sun_type6_suncompat)"
};

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/jp(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "sun_type7_suncompat" {
	include "sun_vndr/jp(sun_type7_suncompat)"
};

partial alphanumeric_keys
	xkb_symbols "suncompat" {
	include "sun_vndr/jp(suncompat)"
};

partial alphanumeric_keys
	xkb_symbols "sun_type7" {
	include "sun_vndr/jp(sun_type7)"
};
// Based on http://www.sci.kz/~sairan/keyboard/kzkbd.html
// Baurzhan Ismagulov <ibr@radix50.net>
//

// TODO:
// 1. AltGr with TLDE and LSGT.
// 2. Dead key for ruskaz and kazrus.
// 3. Ctrl + <key>.
// 4. Alt-Tab.

// RST KazSSR 903-90
// levels 3 and 4 are non-standard extensions
default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1] = "Kazakh";

key.type[group1] = "FOUR_LEVEL";

    key <TLDE> { [ parenleft,               parenright,              Cyrillic_io, Cyrillic_IO ] };
    key <AE01> { [ quotedbl,      exclam ] };
    key <AE06> { [ comma,                   semicolon ] };
    key <AE07> { [ period,                  colon ] };
    key <BKSL> { [ backslash,               slash ] };
    key <AB10> { [ numerosign,              question ] };
    key <LSGT> { [ less,                    greater,                 bar,         brokenbar ] };

key.type[group1] = "ALPHABETIC";

    key <AE02> { [ Cyrillic_schwa,          Cyrillic_SCHWA ] };
    key <AE03> { [ Ukrainian_i,             Ukrainian_I ] };
    key <AE04> { [ Cyrillic_en_descender,   Cyrillic_EN_descender ] };
    key <AE05> { [ Cyrillic_ghe_bar,        Cyrillic_GHE_bar ] };
    key <AE08> { [ Cyrillic_u_straight,     Cyrillic_U_straight ] };
    key <AE09> { [ Cyrillic_u_straight_bar, Cyrillic_U_straight_bar ] };
    key <AE10> { [ Cyrillic_ka_descender,   Cyrillic_KA_descender ] };
    key <AE11> { [ Cyrillic_o_bar,          Cyrillic_O_bar ] };
    key <AE12> { [ Cyrillic_shha,           Cyrillic_SHHA ] };

    key <AD01> { [ Cyrillic_shorti,         Cyrillic_SHORTI ] };
    key <AD02> { [ Cyrillic_tse,            Cyrillic_TSE ] };
    key <AD03> { [ Cyrillic_u,              Cyrillic_U ] };
    key <AD04> { [ Cyrillic_ka,             Cyrillic_KA ] };
    key <AD05> { [ Cyrillic_ie,             Cyrillic_IE ] };
    key <AD06> { [ Cyrillic_en,             Cyrillic_EN ] };
    key <AD07> { [ Cyrillic_ghe,            Cyrillic_GHE ] };
    key <AD08> { [ Cyrillic_sha,            Cyrillic_SHA ] };
    key <AD09> { [ Cyrillic_shcha,          Cyrillic_SHCHA ] };
    key <AD10> { [ Cyrillic_ze,             Cyrillic_ZE ] };
    key <AD11> { [ Cyrillic_ha,             Cyrillic_HA ] };
    key <AD12> { [ Cyrillic_hardsign,       Cyrillic_HARDSIGN ] };
    key <AC01> { [ Cyrillic_ef,             Cyrillic_EF ] };
    key <AC02> { [ Cyrillic_yeru,           Cyrillic_YERU ] };
    key <AC03> { [ Cyrillic_ve,             Cyrillic_VE ] };
    key <AC04> { [ Cyrillic_a,              Cyrillic_A ] };
    key <AC05> { [ Cyrillic_pe,             Cyrillic_PE ] };
    key <AC06> { [ Cyrillic_er,             Cyrillic_ER ] };
    key <AC07> { [ Cyrillic_o,              Cyrillic_O ] };
    key <AC08> { [ Cyrillic_el,             Cyrillic_EL ] };
    key <AC09> { [ Cyrillic_de,             Cyrillic_DE ] };
    key <AC10> { [ Cyrillic_zhe,            Cyrillic_ZHE ] };
    key <AC11> { [ Cyrillic_e,              Cyrillic_E ] };
    key <AB01> { [ Cyrillic_ya,             Cyrillic_YA ] };
    key <AB02> { [ Cyrillic_che,            Cyrillic_CHE ] };
    key <AB03> { [ Cyrillic_es,             Cyrillic_ES ] };
    key <AB04> { [ Cyrillic_em,             Cyrillic_EM ] };
    key <AB06> { [ Cyrillic_te,             Cyrillic_TE ] };
    key <AB05> { [ Cyrillic_i,              Cyrillic_I ] };
    key <AB07> { [ Cyrillic_softsign,       Cyrillic_SOFTSIGN ] };
    key <AB08> { [ Cyrillic_be,             Cyrillic_BE ] };
    key <AB09> { [ Cyrillic_yu,             Cyrillic_YU ] };
};

// Kikkarin KZ1
partial alphanumeric_keys
xkb_symbols "ruskaz" {

    name[Group1] = "Russian (Kazakhstan, with Kazakh)";

key.type[group1] = "FOUR_LEVEL";

    key	<AE01> { [ 1,                       exclam ] };
    key	<AE02> { [ 2,                       quotedbl,                at ] };
    key	<AE03> { [ 3,                       numerosign,              numbersign ] };
    key	<AE04> { [ 4,                       semicolon,               dollar ] };
    key	<AE05> { [ 5,                       percent ] };
    key	<AE06> { [ 6,                       colon,                   asciicircum ] };
    key	<AE07> { [ 7,                       question,                ampersand ] };
    key	<AE08> { [ 8,                       asterisk ] };
    key	<AE09> { [ 9,                       parenleft ] };
    key	<AE10> { [ 0,                       parenright ] };
    key	<AE11> { [ minus,                   underscore ] };
    key	<AE12> { [ equal,                   plus ] };
    key	<BKSL> { [ backslash,               slash,                   bar ] };
    key	<AB10> { [ period,                  comma,                   slash,                   question ] };
    key <LSGT> { [ less,                    greater,                 bar,                     brokenbar ] };

key.type[group1] = "FOUR_LEVEL_ALPHABETIC";

    key	<TLDE> { [ Cyrillic_io,             Cyrillic_IO ] };
    key	<AD01> { [ Cyrillic_shorti,         Cyrillic_SHORTI,         Cyrillic_u_straight_bar, Cyrillic_U_straight_bar ] };
    key	<AD02> { [ Cyrillic_tse,            Cyrillic_TSE ] };
    key	<AD03> { [ Cyrillic_u,              Cyrillic_U,              Cyrillic_u_straight,     Cyrillic_U_straight ] };
    key	<AD04> { [ Cyrillic_ka,             Cyrillic_KA,             Cyrillic_ka_descender,   Cyrillic_KA_descender ] };
    key	<AD05> { [ Cyrillic_ie,             Cyrillic_IE,             Cyrillic_io,             Cyrillic_IO ] };
    key	<AD06> { [ Cyrillic_en,             Cyrillic_EN,             Cyrillic_en_descender,   Cyrillic_EN_descender ] };
    key	<AD07> { [ Cyrillic_ghe,            Cyrillic_GHE,            Cyrillic_ghe_bar,        Cyrillic_GHE_bar ] };
    key	<AD08> { [ Cyrillic_sha,            Cyrillic_SHA ] };
    key	<AD09> { [ Cyrillic_shcha,          Cyrillic_SHCHA ] };
    key	<AD10> { [ Cyrillic_ze,             Cyrillic_ZE ] };
    key	<AD11> { [ Cyrillic_ha,             Cyrillic_HA,             Cyrillic_shha,           Cyrillic_SHHA ] };
    key	<AD12> { [ Cyrillic_hardsign,       Cyrillic_HARDSIGN ] };
    key	<AC01> { [ Cyrillic_ef,             Cyrillic_EF ] };
    key	<AC02> { [ Cyrillic_yeru,           Cyrillic_YERU ] };
    key	<AC03> { [ Cyrillic_ve,             Cyrillic_VE ] };
    key	<AC04> { [ Cyrillic_a,              Cyrillic_A,              Cyrillic_schwa,          Cyrillic_SCHWA ] };
    key	<AC05> { [ Cyrillic_pe,             Cyrillic_PE ] };
    key	<AC06> { [ Cyrillic_er,             Cyrillic_ER ] };
    key	<AC07> { [ Cyrillic_o,              Cyrillic_O,              Cyrillic_o_bar,          Cyrillic_O_bar ] };
    key	<AC08> { [ Cyrillic_el,             Cyrillic_EL ] };
    key	<AC09> { [ Cyrillic_de,             Cyrillic_DE ] };
    key	<AC10> { [ Cyrillic_zhe,            Cyrillic_ZHE ] };
    key	<AC11> { [ Cyrillic_e,              Cyrillic_E ] };
    key	<AB01> { [ Cyrillic_ya,             Cyrillic_YA ] };
    key	<AB02> { [ Cyrillic_che,            Cyrillic_CHE ] };
    key	<AB03> { [ Cyrillic_es,             Cyrillic_ES ] };
    key	<AB04> { [ Cyrillic_em,             Cyrillic_EM ] };
    key	<AB06> { [ Cyrillic_te,             Cyrillic_TE ] };
    key	<AB05> { [ Cyrillic_i,              Cyrillic_I,              Ukrainian_i,             Ukrainian_I ] };
    key	<AB07> { [ Cyrillic_softsign,       Cyrillic_SOFTSIGN ] };
    key	<AB08> { [ Cyrillic_be,             Cyrillic_BE ] };
    key	<AB09> { [ Cyrillic_yu,             Cyrillic_YU ] };
};

// Kikkarin KZ2
partial alphanumeric_keys
xkb_symbols "kazrus" {

    name[Group1] = "Kazakh (with Russian)";

key.type[group1] = "FOUR_LEVEL";

    key	<AE01> { [ 1,                       exclam ] };
    key	<AE02> { [ 2,                       quotedbl,                at ] };
    key	<AE03> { [ 3,                       numerosign,              numbersign ] };
    key	<AE04> { [ 4,                       semicolon,               dollar ] };
    key	<AE05> { [ 5,                       percent ] };
    key	<AE06> { [ 6,                       colon,                   asciicircum ] };
    key	<AE07> { [ 7,                       question,                ampersand ] };
    key	<AE08> { [ 8,                       asterisk ] };
    key	<AE09> { [ 9,                       parenleft ] };
    key	<AE10> { [ 0,                       parenright ] };
    key	<AE11> { [ minus,                   underscore ] };
    key	<AE12> { [ equal,                   plus ] };
    key	<BKSL> { [ backslash,               slash,                   bar ] };
    key	<AB10> { [ period,                  comma,                   slash,                   question ] };
    key <LSGT> { [ less,                    greater,                 bar,                     brokenbar ] };

key.type[group1] = "FOUR_LEVEL_ALPHABETIC";

    key	<TLDE> { [ Cyrillic_io,             Cyrillic_IO ] };
    key	<AD01> { [ Cyrillic_shorti,         Cyrillic_SHORTI ] };
    key	<AD02> { [ Cyrillic_en_descender,   Cyrillic_EN_descender,   Cyrillic_tse,            Cyrillic_TSE ] };
    key	<AD03> { [ Cyrillic_u,              Cyrillic_U ] };
    key	<AD04> { [ Cyrillic_ka,             Cyrillic_KA,             Cyrillic_ka_descender,    Cyrillic_KA_descender ] };
    key	<AD05> { [ Cyrillic_ie,             Cyrillic_IE,             Cyrillic_io,             Cyrillic_IO ] };
    key	<AD06> { [ Cyrillic_en,             Cyrillic_EN ] };
    key	<AD07> { [ Cyrillic_ghe,            Cyrillic_GHE ] };
    key	<AD08> { [ Cyrillic_sha,            Cyrillic_SHA ] };
    key	<AD09> { [ Cyrillic_ghe_bar,        Cyrillic_GHE_bar,        Cyrillic_shcha,          Cyrillic_SHCHA ] };
    key	<AD10> { [ Cyrillic_ze,             Cyrillic_ZE ] };
    key	<AD11> { [ Cyrillic_ha,             Cyrillic_HA,             Cyrillic_shha,           Cyrillic_SHHA ] };
    key	<AD12> { [ Cyrillic_u_straight_bar, Cyrillic_U_straight_bar, Cyrillic_hardsign,       Cyrillic_HARDSIGN ] };
    key	<AC01> { [ Cyrillic_o_bar,          Cyrillic_O_bar,          Cyrillic_ef,             Cyrillic_EF ] };
    key	<AC02> { [ Cyrillic_yeru,           Cyrillic_YERU ] };
    key	<AC03> { [ Cyrillic_ka_descender,   Cyrillic_KA_descender,   Cyrillic_ve,             Cyrillic_VE ] };
    key	<AC04> { [ Cyrillic_a,              Cyrillic_A ] };
    key	<AC05> { [ Cyrillic_pe,             Cyrillic_PE ] };
    key	<AC06> { [ Cyrillic_er,             Cyrillic_ER ] };
    key	<AC07> { [ Cyrillic_o,              Cyrillic_O ] };
    key	<AC08> { [ Cyrillic_el,             Cyrillic_EL ] };
    key	<AC09> { [ Cyrillic_de,             Cyrillic_DE ] };
    key	<AC10> { [ Cyrillic_zhe,            Cyrillic_ZHE ] };
    key	<AC11> { [ Cyrillic_schwa,          Cyrillic_SCHWA,          Cyrillic_e,              Cyrillic_E ] };
    key	<AB01> { [ Cyrillic_ya,             Cyrillic_YA ] };
    key	<AB02> { [ Ukrainian_i,             Ukrainian_I,             Cyrillic_che,            Cyrillic_CHE ] };
    key	<AB03> { [ Cyrillic_es,             Cyrillic_ES ] };
    key	<AB04> { [ Cyrillic_em,             Cyrillic_EM ] };
    key	<AB06> { [ Cyrillic_te,             Cyrillic_TE ] };
    key	<AB05> { [ Cyrillic_i,              Cyrillic_I ] };
    key	<AB07> { [ Cyrillic_u_straight,     Cyrillic_U_straight,     Cyrillic_softsign,       Cyrillic_SOFTSIGN ] };
    key	<AB08> { [ Cyrillic_be,             Cyrillic_BE ] };
    key	<AB09> { [ Cyrillic_yu,             Cyrillic_YU ] };
};

partial alphanumeric_keys
xkb_symbols "olpc" {

// Contact: Walter Bender <walter@laptop.org>

// We moved the Cyrillic IO off of the Tilde Key as an Alt-GR character
// and moved it onto the Backslash key, making Backslash and Bar available
// through the Latin side of the keyboard.

   include "kz(basic)"

   key <TLDE> { [ parenleft,               parenright ] };
   key <BKSL> { [ Cyrillic_io,             Cyrillic_IO ] };

   include "group(olpc)"
};

partial alphanumeric_keys
xkb_symbols "ext" {

// Levels 3 and 4 represent main keyboard's numeric part of US layout,
// parens are duplicated for consistency.

    include "kz(basic)"
    name[Group1] = "Kazakh (extended)";

key.type[group1] = "FOUR_LEVEL_ALPHABETIC";

    key <TLDE> { [ Cyrillic_io,             Cyrillic_IO,             grave,  asciitilde ] };
    key <AE01> { [ quotedbl,                exclam,                  1,      exclam ] };
    key <AE02> { [ Cyrillic_schwa,          Cyrillic_SCHWA,          2,      at ] };
    key <AE03> { [ Ukrainian_i,             Ukrainian_I,             3,      numbersign ] };
    key <AE04> { [ Cyrillic_en_descender,   Cyrillic_EN_descender,   4,      dollar ] };
    key <AE05> { [ Cyrillic_ghe_bar,        Cyrillic_GHE_bar,        5,      percent ] };
    key <AE06> { [ comma,                   semicolon,               6,      asciicircum ] };
    key <AE07> { [ period,                  colon,                   7,      ampersand ] };
    key <AE08> { [ Cyrillic_u_straight,     Cyrillic_U_straight,     8,      asterisk ] };
    key <AE09> { [ Cyrillic_u_straight_bar, Cyrillic_U_straight_bar, 9,      parenleft ] };
    key <AE10> { [ Cyrillic_ka_descender,   Cyrillic_KA_descender,   0,      parenright ] };
    key <AE11> { [ Cyrillic_o_bar,          Cyrillic_O_bar,          minus,  underscore  ] };
    key <AE12> { [ Cyrillic_shha,           Cyrillic_SHHA,           equal,  plus ] };
    key <BKSL> { [ backslash,               slash,                   bar,    brokenbar ] };
    key <AD11> { [ Cyrillic_ha,             Cyrillic_HA,             bracketleft,  braceleft ] };
    key <AD12> { [ Cyrillic_hardsign,       Cyrillic_HARDSIGN,       bracketright, braceright ] };
    key <AC11> { [ Cyrillic_e,              Cyrillic_E,              apostrophe ] };
    key <AB08> { [ Cyrillic_be,             Cyrillic_BE,             less    ] };
    key <AB09> { [ Cyrillic_yu,             Cyrillic_YU,             greater ] };

   include "level3(ralt_switch)"
};

// Kazakh Latin (based on Kazakh alphabet version of 2018)
// levels 3 and 4 are non-standard extensions
partial alphanumeric_keys
xkb_symbols "latin" {

// Contact: Galym Kerimbekov <housegregory299@gmail.com>

    name[Group1] = "Kazakh (Latin)";

key.type[group1] = "FOUR_LEVEL";

    key <TLDE> { [ parenleft,               parenright ] };
    key <AE01> { [ quotedbl,                exclam ] };
    key <AE06> { [ comma,                   semicolon ] };
    key <AE07> { [ period,                  colon ] };
    key <BKSL> { [ backslash,               slash ] };
    key <AB10> { [ numerosign,              question ] };
    key <LSGT> { [ less,                    greater,                 bar,         brokenbar ] };

key.type[group1] = "ALPHABETIC";

    key <AE02> { [ aacute,                  Aacute ] };
    key <AE03> { [ iacute,                  Iacute ] };
    key <AE04> { [ nacute,                  Nacute ] };
    key <AE05> { [ U01F5,                   U01F4 ] }; // gG with acute
    key <AE08> { [ uacute,                  Uacute ] };
    key <AE09> { [ yacute,                  Yacute ] };
    key <AE10> { [ oacute,                  Oacute ] }; 
    key <AE11> { [ sacute,                  Sacute ] }; 
    key <AE12> { [ cacute,                  Cacute ] }; 

    key <AD01> { [ q,                       Q ] };
    key <AD02> { [ w,                       W ] };
    key <AD03> { [ e,                       E ] };
    key <AD04> { [ r,                       R ] };
    key <AD05> { [ t,                       T ] };
    key <AD06> { [ y,                       Y ] };
    key <AD07> { [ u,                       U ] };
    key <AD08> { [ i,                       I ] };
    key <AD09> { [ o,                       O ] };
    key <AD10> { [ p,                       P ] };
    key <AC01> { [ a,                       A ] };
    key <AC02> { [ s,                       S ] };
    key <AC03> { [ d,                       D ] };
    key <AC04> { [ f,                       F ] };
    key <AC05> { [ g,                       G ] };
    key <AC06> { [ h,                       H ] };
    key <AC07> { [ j,                       J ] };
    key <AC08> { [ k,                       K ] };
    key <AC09> { [ l,                       L ] };
    key <AB01> { [ z,                       Z ] };
    key <AB02> { [ x,                       X ] };
    key <AB03> { [ c,                       C ] };
    key <AB04> { [ v,                       M ] };
    key <AB05> { [ b,                       B ] };
    key <AB06> { [ n,                       N ] };
    key <AB07> { [ m,                       M ] };
};
// Symbols definition for a Azerbaijani keyboard layout.
// Based on AZS 495-2010 standard.
// 2001 - Pablo Saratxaga <pablo@mandrakesoft.com>
// 2015 - Adil Aliyev <adilaliev@gmail.com>

default partial alphanumeric_keys
xkb_symbols "latin" {

  include "us"

  name[Group1]= "Azerbaijani";

  key <TLDE> { [ grave,      asciitilde  ] };
  key <AE02> { [ 2,          quotedbl    ] };
  key <AE03> { [ 3,          U2166       ] };
  key <AE04> { [ 4,          semicolon   ] };
  key <AE05> { [ 5,          percent     ] };
  key <AE06> { [ 6,          colon       ] };
  key <AE07> { [ 7,          question    ] };
  key <AE08> { [ 8,          asterisk    ] };

  key <BKSL> { [ backslash,  slash      ] };

  key <AD02> { [ udiaeresis, Udiaeresis  ] };
  key <AD08> { [ i,          Iabovedot   ] };
  key <AD11> { [ odiaeresis, Odiaeresis  ] };
  key <AD12> { [ gbreve,     Gbreve      ] };
  key <AC10> { [ idotless,   I           ] };
  key <AC11> { [ schwa,      SCHWA       ] };
  key <AB08> { [ ccedilla,   Ccedilla    ] };
  key <AB09> { [ scedilla,   Scedilla    ] };
  key <AB10> { [ period,     comma       ] };

  include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "cyrillic" {

  name[Group1]= "Azerbaijani (Cyrillic)";

  key <AE02> {[ 2,                 quotedbl           ] };
  key <AE03> {[ 3,                 numbersign         ] };
  key <AE04> {[ 4,                 semicolon          ] };
  key <AE06> {[ 6,                 colon              ] };
  key <AE07> {[ 7,                 question           ] };
  key <AE08> {[ 8,                 asterisk,   braceleft    ] };
  key <AE09> {[ 9,                 parenleft,  bracketleft  ] };
  key <AE10> {[ 0,                 parenright, bracketright ] };
  key <AE11> {[ minus,             underscore, braceright   ] };

  key <AD01> {[ Cyrillic_je,       Cyrillic_JE        ] };
  key <AD02> {[ Cyrillic_u_straight, Cyrillic_U_straight ] };
  key <AD03> {[ Cyrillic_u,        Cyrillic_U         ] };
  key <AD04> {[ Cyrillic_ka,       Cyrillic_KA        ] };
  key <AD05> {[ Cyrillic_ie,       Cyrillic_IE        ] };
  key <AD06> {[ Cyrillic_en,       Cyrillic_EN        ] };
  key <AD07> {[ Cyrillic_ghe,      Cyrillic_GHE       ] };
  key <AD08> {[ Cyrillic_sha,      Cyrillic_SHA       ] };
  key <AD09> {[ Cyrillic_shha,     Cyrillic_SHHA      ] };
  key <AD10> {[ Cyrillic_ze,       Cyrillic_ZE        ] };
  key <AD11> {[ Cyrillic_ha,       Cyrillic_HA        ] };
  key <AD12> {[ Cyrillic_che_vertstroke, Cyrillic_CHE_vertstroke ] };

  key <AC01> {[ Cyrillic_ef,       Cyrillic_EF        ] };
  key <AC02> {[ Cyrillic_yeru,     Cyrillic_YERU      ] };
  key <AC03> {[ Cyrillic_ve,       Cyrillic_VE        ] };
  key <AC04> {[ Cyrillic_a,        Cyrillic_A         ] };
  key <AC05> {[ Cyrillic_pe,       Cyrillic_PE        ] };
  key <AC06> {[ Cyrillic_er,       Cyrillic_ER        ] };
  key <AC07> {[ Cyrillic_o,        Cyrillic_O         ] };
  key <AC08> {[ Cyrillic_el,       Cyrillic_EL        ] };
  key <AC09> {[ Cyrillic_de,       Cyrillic_DE        ] };
  key <AC10> {[ Cyrillic_zhe,      Cyrillic_ZHE       ] };
  key <AC11> {[ Cyrillic_ka_vertstroke,Cyrillic_KA_vertstroke ] };

  key <AB01> {[ Cyrillic_schwa,    Cyrillic_SCHWA     ] };
  key <AB02> {[ Cyrillic_che,      Cyrillic_CHE       ] };
  key <AB03> {[ Cyrillic_es,       Cyrillic_ES        ] };
  key <AB04> {[ Cyrillic_em,       Cyrillic_EM        ] };
  key <AB05> {[ Cyrillic_i,        Cyrillic_I         ] };
  key <AB06> {[ Cyrillic_te,       Cyrillic_TE        ] };
  key <AB07> {[ Cyrillic_ghe_bar,  Cyrillic_GHE_bar   ] };
  key <AB08> {[ Cyrillic_be,       Cyrillic_BE        ] };
  key <AB09> {[ Cyrillic_o_bar,    Cyrillic_O_bar     ] };
  key <AB10> {[ period,            comma              ] };
};
// based on us_intl keyboard map file and a Sinhala keyboard map
// version 0.3

default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]="French (Guinea)";

    key <AE01>	{ [0x010007F1, 0x010007C1 ]	};
    key <AE02>	{ [0x010007EB, 0x010007C2 ]	};
    key <AE03>	{ [0x010007F5, 0x010007C3,  numbersign,     sterling ]	};
    key <AE04>	{ [0x010007F4, 0x010007C4,  0x01002E1C,       dollar ]	};
    key <AE05>	{ [ parenleft, 0x010007C5,  0x01002E1D				 ]	};
    key <AE06>	{ [     minus, 0x010007C6,         bar				 ]	};
    key <AE07>	{ [0x010007EC, 0x010007C7,       grave				 ]	};
    key <AE08>	{ [0x010007FA, 0x010007C8,   backslash				 ]	};
    key <AE09>	{ [0x010007ED, 0x010007C9, asciicircum,    plusminus ]	};
    key <AE10>	{ [0x010007EE, 0x010007C0,          at,       degree ]	};
    key <AE11>	{ [parenright ]	};
    key <AE12>	{ [     equal,       plus,   braceright ]	};

    key <AD01>	{ [0x010007CA ]	};
    key <AD02>	{ [0x010007E0, less ]	};
    key <AD03>	{ [0x010007CD,0x010007CB ]	};
    key <AD04>	{ [0x010007D9,0x010007DA ]	};
    key <AD05>	{ [0x010007D5 ]	};
    key <AD06>	{ [0x010007E6,0x010007E7 ]	};
    key <AD07>	{ [0x010007CE,0x010007F6 ]	};
    key <AD08>	{ [0x010007CC ]	};
    key <AD09>	{ [0x010007D0,0x010007CF ]	};
    key <AD10>	{ [0x010007D4 ]	};
    key <AD11>	{ [0x010007F3 ] };
    key <AD12>	{ [    dollar,   sterling,     currency ]	};

    key <AC01>	{ [0x010007EB ]	};
    key <AC02>	{ [0x010007DB ]	};
    key <AC03>	{ [0x010007D8 ]	};
    key <AC04>	{ [0x010007DD ]	};
    key <AC05>	{ [0x010007DC,0x010007F7 ]	};
    key <AC06>	{ [0x010007E4 ]	};
    key <AC07>	{ [0x010007D6,0x010007E8 ]	};
    key <AC08>	{ [0x010007DE ]	};
    key <AC09>	{ [0x010007DF,0x010007EA ]	};
    key <AC10>	{ [0x010007E1 ]	};
    key <AC11>	{ [0x010007EF, 0x010007F8, percent ]	};
    key <TLDE>	{ [0x010007EC, asciitilde,     notsign ]	};

    key <BKSL>	{ [0x010007D1, asterisk ]	};
    key <AB01>	{ [0x010007E5 ]	};
    key <AB02>	{ [0x0100060C ]	};
    key <AB03>	{ [0x010007D7,0x010007E9 ]	};
    key <AB04>	{ [0x010007E2 ]	};
    key <AB05>	{ [0x010007D3 ] };
    key <AB06>	{ [0x010007E3,0x010007D2 ]	};
    key <AB07>	{ [0x010007F8,0x0100061F ] };
    key <AB08>	{ [0x0100061B ]	};
    key <AB09>	{ [0x0100060C,      slash ]	};
    key <AB10>	{ [0x010007F9] };

    include "level3(ralt_switch)"
};
// Keyboard layouts for the Ukraine.
// AEN <aen@logic.ru> & Leon Kanter <leon@geon.donetsk.ua>
// last changes 2007/10/03 by Andriy Rysin <arysin@yahoo.com>

// Oleksiy Protas <elfy.ua@gmail.com>:
// - Added Serbian Cyrillics support

// The legacy WinKeys layout extended on the third and fourth level with
// some Unicode symbols (typographic quotes, m-dash, n-dash, ...), some
// often-used Cyrillics from other Slavic languages, and some often-used
// ASCII symbols (slash, brackets, ...).
default partial alphanumeric_keys
xkb_symbols "unicode" {

    include "ua(winkeys)"
    name[Group1]= "Ukrainian";

    key <TLDE> { [      apostrophe,           U02BC,          U0301,          asciitilde  ] };  // Apostrophe and Stress symbol
    key <AE01> { [               1,          exclam,    onesuperior                       ] };
    key <AE02> { [               2,        quotedbl,    twosuperior,               U2019  ] };  // single quote used often as an apostrophe (deprecated)
    key <AE03> { [               3,      numerosign,          U00A7,               U20B4  ] };  // Paragraph and Hryvnia sign
    key <AE04> { [               4,       semicolon,         dollar,            EuroSign  ] };
    key <AE05> { [               5,         percent,         degree                       ] };
    key <AE06> { [               6,           colon,           less                       ] };
    key <AE07> { [               7,        question,        greater                       ] };
    key <AE08> { [               8,        asterisk, enfilledcircbullet                   ] };
    key <AE09> { [               9,       parenleft,    bracketleft,           braceleft  ] };
    key <AE10> { [               0,      parenright,   bracketright,          braceright  ] };
    key <AE11> { [           minus,      underscore,         emdash,              endash  ] };
    key <AE12> { [           equal,            plus,       notequal,           plusminus  ] };

    key <AD03> { [      Cyrillic_u,      Cyrillic_U, Byelorussian_shortu, Byelorussian_SHORTU  ] };
    key <AD04> { [     Cyrillic_ka,     Cyrillic_KA,     registered                       ] };  // Registered tm
    key <AD05> { [     Cyrillic_ie,     Cyrillic_IE,    Cyrillic_io,         Cyrillic_IO  ] };
    key <AD12> { [    Ukrainian_yi,    Ukrainian_YI, Cyrillic_hardsign,Cyrillic_HARDSIGN  ] };
    key <AC02> { [     Ukrainian_i,     Ukrainian_I,  Cyrillic_yeru,       Cyrillic_YERU  ] };
    key <AC11> { [    Ukrainian_ie,    Ukrainian_IE,     Cyrillic_e,          Cyrillic_E  ] };

    key <BKSL> { [ Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN, backslash,  bar  ] };

    key <AB03> { [     Cyrillic_es,     Cyrillic_ES,      copyright                       ] };
    key <AB06> { [     Cyrillic_te,     Cyrillic_TE,      trademark                       ] };
    key <AB08> { [     Cyrillic_be,     Cyrillic_BE,  guillemotleft,  doublelowquotemark  ] };
    key <AB09> { [     Cyrillic_yu,     Cyrillic_YU, guillemotright, leftdoublequotemark  ] };
    key <AB10> { [          period,           comma,          slash,            ellipsis  ] };

    // Serbian Vukovica
    key <AD01> { [ Cyrillic_shorti, Cyrillic_SHORTI,    Cyrillic_je,         Cyrillic_JE  ] };
    key <AD02> { [    Cyrillic_tse,    Cyrillic_TSE,  Cyrillic_dzhe,       Cyrillic_DZHE  ] };
    key <AC09> { [     Cyrillic_de,     Cyrillic_DE,    Serbian_dje,         Serbian_DJE  ] };
    key <AB02> { [    Cyrillic_che,    Cyrillic_CHE,   Serbian_tshe,        Serbian_TSHE  ] };
    key <AC08> { [     Cyrillic_el,     Cyrillic_EL,   Cyrillic_lje,        Cyrillic_LJE  ] };
    key <AD06> { [     Cyrillic_en,     Cyrillic_EN,   Cyrillic_nje,        Cyrillic_NJE  ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "legacy" {

    name[Group1]= "Ukrainian (legacy)";

    key <TLDE> { [      apostrophe,      asciitilde  ] };
    key <AE01> { [               1,         exclam   ] };
    key <AE02> { [               2,        quotedbl  ] };
    key <AE03> { [               3,      numbersign  ] };
    key <AE04> { [               4,        asterisk  ] };
    key <AE05> { [               5,           colon  ] };
    key <AE06> { [               6,           comma  ] };
    key <AE07> { [               7,          period  ] };
    key <AE08> { [               8,       semicolon  ] };
    key <AE09> { [               9,       parenleft  ] };
    key <AE10> { [               0,      parenright  ] };
    key <AE11> { [           minus,      underscore  ] };
    key <AE12> { [           equal,            plus  ] };

    key <AD01> { [ Cyrillic_shorti, Cyrillic_SHORTI  ] };
    key <AD02> { [    Cyrillic_tse,    Cyrillic_TSE  ] };
    key <AD03> { [      Cyrillic_u,      Cyrillic_U  ] };
    key <AD04> { [     Cyrillic_ka,     Cyrillic_KA  ] };
    key <AD05> { [     Cyrillic_ie,     Cyrillic_IE  ] };
    key <AD06> { [     Cyrillic_en,     Cyrillic_EN  ] };
    key <AD07> { [    Cyrillic_ghe,    Cyrillic_GHE  ] };
    key <AD08> { [    Cyrillic_sha,    Cyrillic_SHA  ] };
    key <AD09> { [  Cyrillic_shcha,  Cyrillic_SHCHA  ] };
    key <AD10> { [     Cyrillic_ze,     Cyrillic_ZE  ] };
    key <AD11> { [     Cyrillic_ha,     Cyrillic_HA  ] };
    key <AD12> { [    Ukrainian_yi,    Ukrainian_YI  ] };
    key <BKSL> { [ Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };

    key <AC01> { [     Cyrillic_ef,     Cyrillic_EF  ] };
    key <AC02> { [     Ukrainian_i,     Ukrainian_I  ] };
    key <AC03> { [     Cyrillic_ve,     Cyrillic_VE  ] };
    key <AC04> { [      Cyrillic_a,     Cyrillic_A   ] };
    key <AC05> { [     Cyrillic_pe,     Cyrillic_PE  ] };
    key <AC06> { [     Cyrillic_er,     Cyrillic_ER  ] };
    key <AC07> { [      Cyrillic_o,     Cyrillic_O   ] };
    key <AC08> { [     Cyrillic_el,     Cyrillic_EL  ] };
    key <AC09> { [     Cyrillic_de,     Cyrillic_DE  ] };
    key <AC10> { [    Cyrillic_zhe,    Cyrillic_ZHE  ] };
    key <AC11> { [    Ukrainian_ie,    Ukrainian_IE  ] };

    key <AB01> { [     Cyrillic_ya,     Cyrillic_YA  ] };
    key <AB02> { [    Cyrillic_che,    Cyrillic_CHE  ] };
    key <AB03> { [     Cyrillic_es,     Cyrillic_ES  ] };
    key <AB04> { [     Cyrillic_em,     Cyrillic_EM  ] };
    key <AB06> { [     Cyrillic_te,     Cyrillic_TE  ] };
    key <AB05> { [      Cyrillic_i,      Cyrillic_I  ] };
    key <AB07> {[Cyrillic_softsign,Cyrillic_SOFTSIGN ] };
    key <AB08> { [     Cyrillic_be,     Cyrillic_BE  ] };
    key <AB09> { [     Cyrillic_yu,     Cyrillic_YU  ] };
    key <AB10> { [           slash,        question  ] };

    key <LSGT> { [           slash,             bar  ] };
};

partial alphanumeric_keys
xkb_symbols "winkeys" {

    include "ua(legacy)"
    name[Group1]= "Ukrainian (Windows)";

    key <AE03> { [               3,      numerosign  ] };
    key <AE04> { [               4,       semicolon  ] };
    key <AE05> { [               5,         percent  ] };
    key <AE06> { [               6,           colon  ] };
    key <AE07> { [               7,        question  ] };
    key <AE08> { [               8,        asterisk  ] };
    key <AB10> { [          period,           comma  ] };
};

partial alphanumeric_keys
xkb_symbols "typewriter" {

    include "ua(legacy)"
    name[Group1]= "Ukrainian (typewriter)";

    key <TLDE> { [      apostrophe,        quotedbl  ] };
    key <AE01> { [          exclam,               1  ] };
    key <AE02> { [      numerosign,               2  ] };
    key <AE03> { [           slash,               3  ] };
    key <AE04> { [       semicolon,               4  ] };
    key <AE05> { [           colon,               5  ] };
    key <AE06> { [           comma,               6  ] };
    key <AE07> { [          period,               7  ] };
    key <AE08> { [      underscore,               8  ] };
    key <AE09> { [        question,               9  ] };
    key <AE10> { [         percent,               0  ] };

    key <AD12> { [ Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };

    key <AC02> { [      Cyrillic_i,      Cyrillic_I  ] };

    key <AB05> { [     Ukrainian_i,     Ukrainian_I  ] };
    key <AB10> { [    Ukrainian_yi,    Ukrainian_YI  ] };

    key <BKSL> { [       parenleft,      parenright  ] };
};

partial alphanumeric_keys
xkb_symbols "phonetic" {

  include "ua(legacy)"
  name[Group1]= "Ukrainian (phonetic)";

    key <LatQ> { [ Cyrillic_ya,       Cyrillic_YA        ] };
    key <LatW> { [ Cyrillic_ve,       Cyrillic_VE        ] };
    key <LatE> { [ Cyrillic_ie,       Cyrillic_IE        ] };
    key <LatR> { [ Cyrillic_er,       Cyrillic_ER        ] };
    key <LatT> { [ Cyrillic_te,       Cyrillic_TE        ] };
    key <LatY> { [ Cyrillic_i,        Cyrillic_I         ] };
    key <LatU> { [ Cyrillic_u,        Cyrillic_U         ] };
    key <LatI> { [ Ukrainian_i,       Ukrainian_I        ] };
    key <LatO> { [ Cyrillic_o,        Cyrillic_O         ] };
    key <LatP> { [ Cyrillic_pe,       Cyrillic_PE        ] };
    key <AD11> { [ Cyrillic_sha,      Cyrillic_SHA       ] };
    key <AD12> { [ Cyrillic_shcha,    Cyrillic_SHCHA     ] };

    key <LatA> { [ Cyrillic_a,        Cyrillic_A         ] };
    key <LatS> { [ Cyrillic_es,       Cyrillic_ES        ] };
    key <LatD> { [ Cyrillic_de,       Cyrillic_DE        ] };
    key <LatF> { [ Cyrillic_ef,       Cyrillic_EF        ] };
    key <LatG> { [ Cyrillic_ghe,      Cyrillic_GHE       ] };
    key <LatH> { [ Cyrillic_ha,       Cyrillic_HA        ] };
    key <LatJ> { [ Cyrillic_shorti,   Cyrillic_SHORTI    ] };
    key <LatK> { [ Cyrillic_ka,       Cyrillic_KA        ] };
    key <LatL> { [ Cyrillic_el,       Cyrillic_EL        ] };
    key <AC10> { [ Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };
    key <AC11> { [ Cyrillic_che,      Cyrillic_CHE       ] };
    key <BKSL> { [ Cyrillic_yu,       Cyrillic_YU        ] };

    key <LatZ> { [ Cyrillic_ze,       Cyrillic_ZE        ] };
    key <LatX> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN  ] };
    key <LatC> { [ Cyrillic_tse,      Cyrillic_TSE       ] };
    key <LatV> { [ Cyrillic_zhe,      Cyrillic_ZHE       ] };
    key <LatB> { [ Cyrillic_be,       Cyrillic_BE        ] };
    key <LatN> { [ Cyrillic_en,       Cyrillic_EN        ] };
    key <LatM> { [ Cyrillic_em,       Cyrillic_EM        ] };
    key <AB08> { [ Ukrainian_yi,      Ukrainian_YI       ] };
    key <AB09> { [ Ukrainian_ie,      Ukrainian_IE       ] };
    key <AB10> { [ slash,             question           ] };
};

// Ukrainian RSTU 2019-91 keyboard layout (Respublikanskij STandart Ukrajiny).
// Andrew Porokhnyak <aop@porokhnyak.org>
partial alphanumeric_keys
xkb_symbols "rstu" {

    include "ua(legacy)"
    name[Group1]= "Ukrainian (standard RSTU)";

    key <TLDE> { [      apostrophe,        question  ] };
    key <AE01> { [          exclam,               1  ] };
    key <AE02> { [        quotedbl,               2  ] };
    key <AE03> { [      numbersign,               3  ] };
    key <AE04> { [       semicolon,               4  ] };
    key <AE05> { [           colon,               5  ] };
    key <AE06> { [           comma,               6  ] };
    key <AE07> { [          period,               7  ] };
    key <AE08> { [        asterisk,               8  ] };
    key <AE09> { [       parenleft,               9  ] };
    key <AE10> { [      parenright,               0  ] };

    key <AD12> { [ Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };

    key <AC02> { [      Cyrillic_i,      Cyrillic_I  ] };

    key <AB05> { [     Ukrainian_i,     Ukrainian_I  ] };
    key <AB10> { [    Ukrainian_yi,    Ukrainian_YI  ] };

    key <BKSL> { [           slash,         percent  ] };
};

// Russian RSTU 2019-91 keyboard layout (Respublikanskij STandart Ukrajiny).
// Andrew Porokhnyak <aop@porokhnyak.org>
partial alphanumeric_keys
xkb_symbols "rstu_ru" {

    include "ru(common)"
    name[Group1]= "Russian (Ukraine, standard RSTU)";

    key <TLDE> { [      apostrophe,        question  ] };
    key <AE01> { [          exclam,               1  ] };
    key <AE02> { [        quotedbl,               2  ] };
    key <AE03> { [      numbersign,               3  ] };
    key <AE04> { [       semicolon,               4  ] };
    key <AE05> { [           colon,               5  ] };
    key <AE06> { [           comma,               6  ] };
    key <AE07> { [          period,               7  ] };
    key <AE08> { [        asterisk,               8  ] };
    key <AE09> { [       parenleft,               9  ] };
    key <AE10> { [      parenright,               0  ] };
    key <BKSL> { [           slash,         percent  ] };

    key.type[group1]="ALPHABETIC";

    key <AB10> { [     Cyrillic_io,     Cyrillic_IO  ] };
};

// Homophonic keyboard layout (by Tomas Marko Miljenović),
// based on the Ukrainian National Transliteration,
// commonly used phonetic layouts for Mac and Win.
partial alphanumeric_keys
xkb_symbols "homophonic" {

  include "ua(legacy)"
  name[Group1]= "Ukrainian (homophonic)";

    key <TLDE> { [        grave,        underscore       ] };
    key <AE01> { [            1,            exclam       ] };
    key <AE02> { [            2,                at       ] };
    key <AE03> { [            3,         semicolon       ] };
    key <AE04> { [            4,             colon       ] };
    key <AE05> { [            5,           percent       ] };
    key <AE06> { [            6,        apostrophe       ] };
    key <AE07> { [            7,          quotedbl       ] };
    key <AE08> { [            8,          asterisk       ] };
    key <AE09> { [            9,         parenleft       ] };
    key <AE10> { [            0,        parenright       ] };
    key <AE11> { [ Ukrainian_ie,      Ukrainian_IE       ] };
    key <AE12> { [ Ukrainian_yi,      Ukrainian_YI       ] };

    key <LatQ> { [ Cyrillic_ya,       Cyrillic_YA        ] };
    key <LatW> { [ Cyrillic_sha,      Cyrillic_SHA       ] };
    key <LatE> { [ Cyrillic_ie,       Cyrillic_IE        ] };
    key <LatR> { [ Cyrillic_er,       Cyrillic_ER        ] };
    key <LatT> { [ Cyrillic_te,       Cyrillic_TE        ] };
    key <LatY> { [ Cyrillic_i,        Cyrillic_I         ] };
    key <LatU> { [ Cyrillic_u,        Cyrillic_U         ] };
    key <LatI> { [ Ukrainian_i,       Ukrainian_I        ] };
    key <LatO> { [ Cyrillic_o,        Cyrillic_O         ] };
    key <LatP> { [ Cyrillic_pe,       Cyrillic_PE        ] };
    key <AD11> { [ Cyrillic_yu,       Cyrillic_YU        ] };
    key <AD12> { [ Cyrillic_shcha,    Cyrillic_SHCHA     ] };

    key <LatA> { [ Cyrillic_a,        Cyrillic_A         ] };
    key <LatS> { [ Cyrillic_es,       Cyrillic_ES        ] };
    key <LatD> { [ Cyrillic_de,       Cyrillic_DE        ] };
    key <LatF> { [ Cyrillic_ef,       Cyrillic_EF        ] };
    key <LatG> { [ Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };
    key <LatH> { [ Cyrillic_ghe,      Cyrillic_GHE       ] };
    key <LatJ> { [ Cyrillic_shorti,   Cyrillic_SHORTI    ] };
    key <LatK> { [ Cyrillic_ka,       Cyrillic_KA        ] };
    key <LatL> { [ Cyrillic_el,       Cyrillic_EL        ] };
    key <AC10> { [ Cyrillic_che,      Cyrillic_CHE       ] };
    key <AC11> { [ Cyrillic_zhe,      Cyrillic_ZHE       ] };
    key <BKSL> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN  ] };

    key <LatZ> { [ Cyrillic_ze,       Cyrillic_ZE        ] };
    key <LatX> { [ Cyrillic_ha,       Cyrillic_HA        ] };
    key <LatC> { [ Cyrillic_tse,      Cyrillic_TSE       ] };
    key <LatV> { [ Cyrillic_ve,       Cyrillic_VE        ] };
    key <LatB> { [ Cyrillic_be,       Cyrillic_BE        ] };
    key <LatN> { [ Cyrillic_en,       Cyrillic_EN        ] };
    key <LatM> { [ Cyrillic_em,       Cyrillic_EM        ] };
    key <AB08> { [ comma,             less               ] };
    key <AB09> { [ period,            greater            ] };
    key <AB10> { [ slash,             question           ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/ua(sun_type6)"
};
default
xkb_symbols "abnt2" {

    // Based on a very simple Brazilian ABNT2 keyboard,
    // by Ricardo Y. Igarashi (iga@that.com.br).
    // With added support for dead keys in I18N applications,
    // by Conectiva  (http://www.conectiva.com.br).

    include "latin"
    name[Group1]="Portuguese (Brazil)";

    key <TLDE> { [   apostrophe,       quotedbl,       notsign,         notsign ] };
    key <AE02> { [            2,             at,   twosuperior,         onehalf ] };
    key <AE03> { [            3,     numbersign, threesuperior,   threequarters ] };
    key <AE04> { [            4,         dollar,      sterling,      onequarter ] };
    key <AE05> { [            5,        percent,          cent,    threeeighths ] };
    key <AE06> { [            6, dead_diaeresis,       notsign,       diaeresis ] };
    key <AE12> { [        equal,           plus,       section,     dead_ogonek ] };

    key <AD01> { [            q,              Q,         slash,           slash ] };
    key <AD02> { [            w,              W,      question,        question ] };
    key <AD03> { [            e,              E,        degree,          degree ] };
    key <AD04> { [            r,              R,    registered,      registered ] };
    key <AD11> { [   dead_acute,     dead_grave,         acute,           grave ] };
    key <AD12> { [  bracketleft,      braceleft,   ordfeminine,     dead_macron ] };
    key <BKSL> { [ bracketright,     braceright,     masculine,       masculine ] };

    key <AC10> { [     ccedilla,       Ccedilla,    dead_acute,dead_doubleacute ] };
    key <AC11> { [   dead_tilde,dead_circumflex,    asciitilde,     asciicircum ] };

    key <LSGT> { [    backslash,            bar,    dead_caron,      dead_breve ] };
    key <AB03> { [            c,              C,     copyright,       copyright ] };
    key <AB07> { [            m,              M,            mu,              mu ] };
    key <AB10> { [    semicolon,          colon, dead_belowdot,   dead_abovedot ] };

    // The ABNT-2 keyboard has this special key:
    key <AB11> { [        slash,       question,        degree,    questiondown ] };

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    include "br(abnt2)"
    name[Group1]="Portuguese (Brazil, no dead keys)";

    key <AE06> { [            6,      diaeresis,       notsign,         notsign ] };
    key <AD11> { [   apostrophe,          grave                                 ] };
    key <AC10> { [     ccedilla,       Ccedilla,         acute,     doubleacute ] };
    key <AC11> { [   asciitilde,    asciicircum                                 ] };
    key <AB10> { [    semicolon,          colon, dead_belowdot,        abovedot ] };
};


// The ABNT2 keyboard on IBM/Lenovo Thinkpads,
// by Piter PUNK <piterpk@terra.com.br>.
//
partial alphanumeric_keys
xkb_symbols "thinkpad" {

    include "br(abnt2)"
    name[Group1]="Portuguese (Brazil, IBM/Lenovo ThinkPad)";

    key <RCTL> { [        slash,       question,        degree,    questiondown ] };
};


partial alphanumeric_keys
xkb_symbols "olpc" {

    include "us(basic)"
    name[Group1]="Portuguese (Brazil)";

    key <TLDE> { [   apostrophe,        quotedbl                                ] };
    key <AE01> { [            1,          exclam,   onesuperior                 ] };
    key <AE02> { [            2,              at,   twosuperior                 ] };
    key <AE03> { [            3,      numbersign, threesuperior                 ] };
    key <AE04> { [            4,          dollar,      sterling                 ] };
    key <AE05> { [            5,         percent,          cent                 ] };
    key <AE06> { [            6,  dead_diaeresis,       notsign                 ] };
    key <AE12> { [        equal,            plus,       section                 ] };

    key <AD03> { [            e,               E,      EuroSign                 ] };
    key <AD11> { [   dead_acute,      dead_grave,         acute,          grave ] };
    key <AD12> { [  bracketleft,       braceleft,     0x10000AA                 ] };
    key <BKSL> { [ bracketright,      braceright,     0x10000BA                 ] };

    key <AC10> { [     ccedilla,        Ccedilla                                ] };
    key <AC11> { [   dead_tilde, dead_circumflex                                ] };

    key <AB01> { [            z,               Z,           bar                 ] };
    key <AB03> { [            c,               C,     0x10020A2                 ] };
    key <AB09> { [       period,         greater,     backslash                 ] };
    key <AB10> { [    semicolon,           colon                                ] };

    key <I219> { [        slash,        question,        degree, ISO_Next_Group ] };

    include "level3(ralt_switch)"
};


//
// Brazilian Dvorak layout                                 2005-04-18
// "Teclado Simplificado Brasileiro" ou "Dvorak Brasileiro"
//
// Heitor Moraes    heitor.moraes@gmail.com
// Luiz Portella    lfpor@lujz.org
// Nando Florestan  nando2003@mandic.com.br
// Ari Caldeira     ari@tecladobrasileiro.com.br
//
partial alphanumeric_keys
xkb_symbols "dvorak" {

    name[Group1]="Portuguese (Brazil, Dvorak)";

// Numeric row
    key <TLDE> { [   apostrophe,        quotedbl,           dead_caron, dead_doubleacute ] };
    key <AE01> { [            1,          exclam,          onesuperior,       exclamdown ] };
    key <AE02> { [            2,              at,          twosuperior,          onehalf ] };
    key <AE03> { [            3,      numbersign,        threesuperior,    threequarters ] };
    key <AE04> { [            4,          dollar,             sterling,       onequarter ] };
    key <AE05> { [            5,         percent,                 cent,       0x01002030 ] };
    key <AE06> { [            6,  dead_diaeresis,              notsign,        diaeresis ] };
    key <AE07> { [            7,       ampersand,        dead_belowdot,    dead_abovedot ] };
    key <AE08> { [            8,        asterisk,          dead_ogonek,        dead_horn ] };
    key <AE09> { [            9,       parenleft,         dead_cedilla,        dead_hook ] };
    key <AE10> { [            0,      parenright,          dead_macron,       dead_breve ] };
    key <AE11> { [  bracketleft,       braceleft,          ordfeminine,       0x01000326 ] };
    key <AE12> { [ bracketright,      braceright,            masculine,   dead_abovering ] };


// Upper row
    key <AD01> { [        slash,        question,               degree,     questiondown ] };
    key <AD02> { [        comma,            less,           0x01000329,       0x01000313 ] };
    key <AD03> { [       period,         greater,           0x01002022,   periodcentered ] };
    key <AD04> { [            p,               P,                thorn,            THORN ] };
    key <AD05> { [            y,               Y,                  yen,              yen ] };
    key <AD06> { [            f,               F,  leftdoublequotemark,  leftsinglequotemark ] };
    key <AD07> { [            g,               G, rightdoublequotemark, rightsinglequotemark ] };
    key <AD08> { [            c,               C,              uparrow,        copyright ] };
    key <AD09> { [            r,               R,           registered,       registered ] };
    key <AD10> { [            l,               L,              lstroke,          Lstroke ] };
    key <AD11> { [   dead_acute,      dead_grave,                acute,            grave ] };
    key <AD12> { [        equal,            plus,              section,        plusminus ] };

// Central row
    key <AC01> { [            a,               A,                   ae,               AE ] };
    key <AC02> { [            o,               O,                   oe,               OE ] };
    key <AC03> { [            e,               E,             EuroSign,         EuroSign ] };
    key <AC04> { [            u,               U,               oslash,         Ooblique ] };
    key <AC05> { [            i,               I,             idotless,        Iabovedot ] };
    key <AC06> { [            d,               D,                  eth,              ETH ] };
    key <AC07> { [            h,               H,            leftarrow,        paragraph ] };
    key <AC08> { [            t,               T,           rightarrow,        trademark ] };
    key <AC09> { [            n,               N,                  eng,              ENG ] };
    key <AC10> { [            s,               S,               ssharp,            U1E9E ] };
    key <AC11> { [   dead_tilde, dead_circumflex,           asciitilde,      asciicircum ] };
    key <BKSL> { [        minus,      underscore,           0x01002015,       0x01000336 ] };

// Lower row
    key <LSGT> { [     ccedilla,        Ccedilla,            backslash,              bar ] };
    key <AB01> { [    semicolon,           colon,           0x01000331,       0x0100032D ] };
    key <AB02> { [            q,               Q,           0x01000259,       0x0100018F ] };
    key <AB03> { [            j,               J,           0x01000292,       0x010001B7 ] };
    key <AB04> { [            k,               K,        guillemotleft,       0x01002039 ] };
    key <AB05> { [            x,               X,             multiply,         division ] };
    key <AB06> { [            b,               B,       guillemotright,       0x0100203A ] };
    key <AB07> { [            m,               M,            downarrow,               mu ] };
    key <AB08> { [            w,               W,               ubreve,           Ubreve ] };
    key <AB09> { [            v,               V,   doublelowquotemark, singlelowquotemark ] };
    key <AB10> { [            z,               Z,           0x0100201F,       0x0100201B ] };
    key <AB11> { [    backslash,             bar,             currency,        brokenbar ] };

    key <SPCE> { [        space,           space,         nobreakspace,     nobreakspace ] };

// Configures the "," for the numeric keypad
    include "kpdl(comma)"

// Configures the use of the AltGr key
    include "level3(ralt_switch)"
};


//
// Brazilian Nativo layout.
//     This is a Dvorak-based layout, designed for the Portuguese language.
//
// Ari Caldeira    <ari@tecladobrasileiro.com.br>    2005-07-19
//
partial alphanumeric_keys
xkb_symbols "nativo" {

    name[Group1]="Portuguese (Brazil, Nativo)";

// Numeric row
    key <TLDE> { [        equal,            plus,              section,        plusminus ] };
    key <AE01> { [            1,          exclam,          onesuperior,       exclamdown ] };
    key <AE02> { [            2,              at,          twosuperior,          onehalf ] };
    key <AE03> { [            3,      numbersign,        threesuperior,    threequarters ] };
    key <AE04> { [            4,          dollar,             sterling,       onequarter ] };
    key <AE05> { [            5,         percent,                 cent,       0x01002030 ] };
    key <AE06> { [            6,  dead_diaeresis,              notsign,        diaeresis ] };
    key <AE07> { [            7,       ampersand,        dead_belowdot,    dead_abovedot ] };
    key <AE08> { [            8,        asterisk,          dead_ogonek,        dead_horn ] };
    key <AE09> { [            9,       parenleft,         dead_cedilla,        dead_hook ] };
    key <AE10> { [            0,      parenright,          dead_macron,       dead_breve ] };
    key <AE11> { [  bracketleft,       braceleft,          ordfeminine,       0x01000326 ] };
    key <AE12> { [ bracketright,      braceright,            masculine,   dead_abovering ] };

// Upper row
    key <AD01> { [        slash,        question,               degree,     questiondown ] };
    key <AD02> { [        comma,            less,           0x01000329,       0x01000313 ] };
    key <AD03> { [       period,         greater,           0x01002022,   periodcentered ] };
    key <AD04> { [            h,               H,            paragraph,        paragraph ] };
    key <AD05> { [            x,               X,             multiply,         division ] };
    key <AD06> { [            w,               W,               ubreve,           Ubreve ] };
    key <AD07> { [            l,               L,              lstroke,          Lstroke ] };
    key <AD08> { [            t,               T,            trademark,        trademark ] };
    key <AD09> { [            c,               C,            copyright,        copyright ] };
    key <AD10> { [            p,               P,                thorn,            THORN ] };
    key <AD11> { [   dead_tilde, dead_circumflex,           asciitilde,      asciicircum ] };
    key <AD12> { [        minus,      underscore,           0x01002015,       0x01000336 ] };

// Central row
    key <AC01> { [            i,               I,             idotless,        Iabovedot ] };
    key <AC02> { [            e,               E,             EuroSign,         EuroSign ] };
    key <AC03> { [            a,               A,                   ae,               AE ] };
    key <AC04> { [            o,               O,                   oe,               OE ] };
    key <AC05> { [            u,               U,               oslash,         Ooblique ] };
    key <AC06> { [            m,               M,                   mu,               mu ] };
    key <AC07> { [            d,               D,                  eth,              ETH ] };
    key <AC08> { [            s,               S,               ssharp,            U1E9E ] };
    key <AC09> { [            r,               R,           registered,       registered ] };
    key <AC10> { [            n,               N,                  eng,              ENG ] };
    key <AC11> { [   dead_acute,      dead_grave,                acute,            grave ] };
    key <BKSL> { [   apostrophe,        quotedbl,           dead_caron, dead_doubleacute ] };

// Lower row
    key <LSGT> { [    semicolon,           colon,           0x01000331,       0x0100032D ] };
    key <AB01> { [            y,               Y,                  yen,              yen ] };
    key <AB02> { [     ccedilla,        Ccedilla,            backslash,              bar ] };
    key <AB03> { [            j,               J,           0x01000292,       0x010001B7 ] };
    key <AB04> { [            b,               B,        guillemotleft,       0x01002039 ] };
    key <AB05> { [            k,               K,       guillemotright,       0x0100203A ] };
    key <AB06> { [            q,               Q,           0x01000259,       0x0100018F ] };
    key <AB07> { [            v,               V,   doublelowquotemark,   singlelowquotemark ] };
    key <AB08> { [            g,               G,  leftdoublequotemark,  leftsinglequotemark ] };
    key <AB09> { [            f,               F, rightdoublequotemark, rightsinglequotemark ] };
    key <AB10> { [            z,               Z,           0x0100201F,       0x0100201B ] };
    key <AB11> { [    backslash,             bar,             currency,        brokenbar ] };

    key <SPCE> { [        space,           space,         nobreakspace,     nobreakspace ] };

// Configures the "," for the numeric keypad
    include "kpdl(comma)"

// Configures the use of the AltGr key
    include "level3(ralt_switch)"
};


//
// Brazilian Nativo layout for US keyboards.
//
// Ari Caldeira    <ari@tecladobrasileiro.com.br>    2005-07-19
//
partial alphanumeric_keys
xkb_symbols "nativo-us" {

    include "br(nativo)"

    name[Group1]="Portuguese (Brazil, Nativo for US keyboards)";

    key <AB01> { [            y,               Y,              ccedilla,        Ccedilla ] };
    key <AB02> { [    semicolon,           colon,             backslash,             bar ] };
};


//
// Brazilian Nativo layout for typing Esperanto.
//
// Ari Caldeira    <ari@tecladobrasileiro.com.br>    2005-07-19
//
partial alphanumeric_keys
xkb_symbols "nativo-epo" {

    include "br(nativo)"

    name[Group1]="Esperanto (Brazil, Nativo)";

    key <AD04> { [            h,               H,          hcircumflex,      Hcircumflex ] };
    key <AD05> { [  ccircumflex,     Ccircumflex,                    x,                X ] };
    key <AD06> { [       ubreve,          Ubreve,                    w,                W ] };

    key <AB01> { [  jcircumflex,     Jcircumflex,                    y,                Y ] };
    key <AB02> { [  scircumflex,     Scircumflex,             ccedilla,         Ccedilla ] };
    key <AB06> { [  gcircumflex,     Gcircumflex,                    q,                Q ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/br(sun_type6)"
};
// based on a keyboard map from an 'xkb/symbols/be' file

default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin"

    name[Group1]="Belgian";

    key <AE01>	{ [ ampersand,          1,          bar,   exclamdown ]	};
    key <AE02>	{ [    eacute,          2,           at,    oneeighth ]	};
    key <AE03>	{ [  quotedbl,          3,   numbersign,     sterling ]	};
    key <AE04>	{ [apostrophe,          4,   onequarter,       dollar ]	};
    key <AE05>	{ [ parenleft,          5,      onehalf, threeeighths ]	};
    key <AE06>	{ [   section,          6,  asciicircum,  fiveeighths ]	};
    key <AE07>	{ [    egrave,          7,    braceleft, seveneighths ]	};
    key <AE08>	{ [    exclam,          8,  bracketleft,    trademark ]	};
    key <AE09>	{ [  ccedilla,          9,    braceleft,    plusminus ]	};
    key <AE10>	{ [    agrave,          0,   braceright,       degree ]	};
    key <AE11>	{ [parenright,     degree,    backslash, questiondown ]	};
    key <AE12>	{ [     minus, underscore, dead_cedilla,  dead_ogonek ]	};

    key <AD01>	{ [         a,          A,           at,  Greek_OMEGA ]	};
    key <AD02>	{ [         z,          Z,      lstroke,      Lstroke ]	};
    key <AD03>	{ [         e,          E,     EuroSign,         cent ]	};
    key <AD09>  { [         o,          O,           oe,           OE ] }; // o O œ Œ
    key <AD11>	{ [dead_circumflex, dead_diaeresis,  bracketleft, dead_abovering ] };
    key <AD12>	{ [    dollar,   asterisk, bracketright,  dead_macron ]	};

    key <AC01>	{ [         q,          Q,           ae,           AE ]	};
    key <AC10>	{ [         m,          M,   dead_acute, dead_doubleacute ] };
    key <AC11>	{ [    ugrave,    percent,   dead_acute,   dead_caron ]	};
    key <TLDE>	{ [twosuperior, threesuperior,  notsign,      notsign ]	};

    key <BKSL>	{ [        mu,   sterling,   dead_grave,   dead_breve ]	};
    key <AB01>	{ [         w,          W, guillemotleft,        less ]	};
    key <AB07>	{ [     comma,   question, dead_cedilla,    masculine ]	};
    key <AB08>	{ [ semicolon,     period, horizconnector,   multiply ]	};
    key <AB09>	{ [     colon,      slash, periodcentered,   division ]	};
    key <AB10>	{ [     equal,       plus,   dead_tilde, dead_abovedot]	};
    key <LSGT>  { [      less,    greater,    backslash,    backslash ]	};

    include "level3(ralt_switch)"
};


// Variant of the fr(oss) layout for Belgium
// Copyright © 2006 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ³ ≤ │ 1 ≥ │ 2 É │ 3 ˘ │ 4 — │ 5 – │ 6 ™ │ 7 È │ 8 ¡ │ 9 Ç │ 0 À │ ° Ø │ _ ± ┃ ⌫ Retour┃
// │ ² ¹ │ & | │ é @ │ " # │ ' ¸ │ ( ˇ │ § ^ │ è ` │ ! ~ │ ç { │ à } │ ) ø │ - ‑ ┃  arrière┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ A Æ │ Z Â │ E ¢ │ R Ê │ T Þ │ Y Ÿ │ U Û │ I Î │ O Œ │ P Ô │ ¨ ˚ │ * ̨  ┃Entrée ┃
// ┃Tab ↹  ┃ a æ │ z â │ e € │ r ê │ t þ │ y ÿ │ u û │ i î │ o œ │ p ô │ ^ [ │ $ ] ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ Q Ä │ S „ │ D Ë │ F ‚ │ G ¥ │ H Ð │ J Ü │ K Ï │ L   │ M Ö │ % Ù │ £ ̄  ┃      ┃
// ┃Maj ⇬   ┃ q ä │ s ß │ d ë │ f ‘ │ g ’ │ h ð │ j ü │ k ï │ l / │ m ö │ ù ' │ µ ` ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ > ≠ │ W “ │ X ” │ C ® │ V ← │ B ↑ │ N → │ ? … │ . . │ / ∕ │ + − ┃             ┃
// ┃Shift ⇧┃ < \ │ w « │ x » │ c © │ v ⍽ │ b ↓ │ n ¬ │ , ¿ │ ; × │ : ÷ │ = ~ ┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣              Espace insécable ⍽ ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣ Espace                        ␣ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛
partial alphanumeric_keys
xkb_symbols "oss" {

    include "fr(oss)"
    include "be(oss_frbe)"

    name[Group1]="Belgian (alt.)";
};

partial alphanumeric_keys
xkb_symbols "oss_frbe" {
    // First row
    key <TLDE>	{ [      twosuperior,    threesuperior,          onesuperior,         lessthanequal ] }; // ² ³ ¹ ≤ 
    key <AE01>	{ [        ampersand,                1,                  bar,      greaterthanequal ] }; // & 1 | ≥
    key <AE02>	{ [           eacute,                2,                   at,                Eacute ] }; // é 2 @ É
    key <AE04>	{ [       apostrophe,                4,         dead_cedilla,             0x1002014 ] }; // ' 4 ¸ — (tiret cadratin)
    key <AE05>	{ [        parenleft,                5,           dead_caron,             0x1002013 ] }; // ( 5 ˇ – (tiret demi-cadratin)
    key <AE06>	{ [          section,                6,          asciicircum,             trademark ] }; // § 6 ^ ™
    key <AE08>	{ [           exclam,                8,           asciitilde,            exclamdown ] }; // ! 8 ~ ¡
    key <AE09>	{ [         ccedilla,                9,            braceleft,              Ccedilla ] }; // ç 9 { Ç
    key <AE10>	{ [           agrave,                0,           braceright,                Agrave ] }; // à 0 } À
    key <AE11>	{ [       parenright,           degree,               oslash,              Ooblique ] }; // ) ° ø Ø 
    key <AE12>	{ [            minus,       underscore,            0x1002011,             plusminus ] }; // - _ - (tiret insécable) ±

    // Second row
    key <AD11>	{ [  dead_circumflex,   dead_diaeresis,          bracketleft,        dead_abovering ] }; // ^ ̈  [ ˚
    key <AD12>	{ [           dollar,         asterisk,         bracketright,           dead_ogonek ] }; // $ * ] ̨

    // Third row
    key <AC09>  { [                l,                L,          dead_stroke ] };
    key <BKSL>	{ [              mu,          sterling,           dead_grave,           dead_macron ] }; // µ £ ` ̄

    // Fourth row
    key <LSGT>  { [             less,          greater,            backslash,              notequal ] }; // < > \ ≠
    key <AB10>  { [            equal,             plus,           dead_tilde,             0x1002212 ] }; // = + ~ −
};


partial alphanumeric_keys
xkb_symbols "oss_latin9" {

    // Restricts the be(oss) layout to latin9 symbols

    include "fr(oss_latin9)"
    include "be(oss_frbe)"
    include "keypad(oss_latin9)"

    name[Group1]="Belgian (Latin-9 only, alt.)";

    // First row
    key <TLDE>	{ [      twosuperior,    threesuperior,          onesuperior,                  less ] }; // ² ³ ¹ < 
    key <AE01>	{ [        ampersand,                1,                  bar,               greater ] }; // & 1 | >
    key <AE04>	{ [       apostrophe,                4,         dead_cedilla,                 minus ] }; // ' 4 ¸ -
    key <AE05>	{ [        parenleft,                5,           dead_caron,                 minus ] }; // ( 5 ˇ -
    key <AE06>	{ [          section,                6,          asciicircum,           asciicircum ] }; // § 6 ^ ^
    key <AE12>	{ [            minus,       underscore,                minus,             plusminus ] }; // - _ - ±

    // Second row
    key <AD12>	{ [           dollar,         asterisk,         bracketright,          dead_cedilla ] }; // $ * ] ¸

    // Third row
    key <AC09>  { [                l,                L,                    l,                     L ] }; // l L l L
    key <BKSL>	{ [              mu,          sterling,           dead_grave,       dead_circumflex ] }; // µ £ ` ^

    // Fourth row
    key <LSGT>  { [             less,          greater,            backslash,                 equal ] }; // < > \ =
    key <AB10>  { [            equal,             plus,           dead_tilde,                 minus ] }; // = + ~ -
};

partial alphanumeric_keys
xkb_symbols "oss_sundeadkeys" {

    // Modifies the basic be(oss) layout to use the Sun dead keys.

    include "be(oss)"
    name[Group1]="Belgian (Sun dead keys, alt.)";

    key <AE04> { [        apostrophe,                4,         dead_cedilla,             0x1002014 ] }; // ' 4 ¸ — (tiret cadratin)
    key <AD11> { [   dead_circumflex,   dead_diaeresis,          bracketleft,        dead_abovering ] }; // ^ ¨ [ ˚
    key <AC11> { [            ugrave,          percent,           dead_acute,                Ugrave ] }; // ù % ' Ù
    key <BKSL> { [                mu,         sterling,           dead_grave,           dead_macron ] }; // µ £ ` ¯
    key <AB10> { [             equal,             plus,           dead_tilde,             0x1002212 ] }; // = + ~ −
};


partial alphanumeric_keys
xkb_symbols "iso-alternate" {
    include "be(basic)"
    name[Group1]="Belgian (ISO, alt.)";

    key <AD01>	{ [         a,          A,           ae,           AE ]	};
    key <AD02>	{ [         z,          Z, guillemotleft,        less ]	};
    key <AC01>	{ [         q,          Q,           at,  Greek_OMEGA ]	};
    key <AC10>	{ [         m,          M,           mu,    masculine ]	};
    key <AB01>	{ [         w,          W,      lstroke,      Lstroke ]	};
    key <AB07>	{ [ comma,   question, dead_cedilla, dead_doubleacute ]	};
};

partial alphanumeric_keys
xkb_symbols "sundeadkeys" {
    include "be(basic)"
    name[Group1]="Belgian (Sun dead keys)";

    key <AD11>	{ [ dead_circumflex, dead_diaeresis,  bracketleft,  bracketleft ] };
    key <AC11>	{ [          ugrave,        percent,   dead_acute,   dead_acute ] };
    key <BKSL>	{ [              mu,       sterling,   dead_grave,   dead_grave ] };
    key <AB07>	{ [           comma,       question, dead_cedilla, dead_cedilla ] };
    key <AB10>	{ [           equal,           plus,   dead_tilde,   dead_tilde ] };
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // Eliminates dead keys from the basic Belgian layout

    include "be(basic)"
    name[Group1]="Belgian (no dead keys)";

    key <AE12>	{ [     minus, underscore,      cedilla,       ogonek ]	};
    key <AD11>	{ [asciicircum,  diaeresis,  bracketleft,  bracketleft]	};
    key <AD12>	{ [    dollar,   asterisk, bracketright,       macron ]	};
    key <AC10>	{ [         m,          M,        acute,  doubleacute ]	};
    key <AC11>	{ [    ugrave,    percent,   apostrophe,   apostrophe ]	};
    key <BKSL>	{ [        mu,   sterling,        grave,        grave ]	};
    key <AB07>	{ [     comma,   question,      cedilla,    masculine ]	};
    key <AB10>	{ [     equal,       plus,   asciitilde,   asciitilde ]	};
};

// Wang model 724 azerty Belgium keyboard
partial alphanumeric_keys
xkb_symbols "wang" {

    include "be(basic)"
    include "keypad(legacy_wang)"
    name[Group1]="Belgian (Wang 724 AZERTY)";

    // Engravings on Wang 725-3771-ae
    key <TLDE> { [ twosuperior, threesuperior,   notsign, asciitilde ] };
    key <LSGT> { [        less,       greater, backslash,  brokenbar ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/be(sun_type6)"
};
// Keyboard layouts for Russia.
// AEN <aen@logic.ru>
// 2001/12/23 by Leon Kanter <leon@blackcatlinux.com>
// 2005/12/09 Valery Inozemtsev <shrek@altlinux.ru>
// 2018/07/15 @a13 (a.k.a. @dbvvmpg) and Stepanenko Andrey <ftvkyo2011@yandex.ru>

// Windows layout
default partial alphanumeric_keys
xkb_symbols "winkeys" {

    include "ru(common)"
    name[Group1]= "Russian";

    key <AE03> { [           3,  numerosign  ] };
    key <AE04> { [           4,   semicolon  ] };
    key <AE05> { [           5,     percent  ] };
    key <AE06> { [           6,       colon  ] };
    key <AE07> { [           7,    question  ] };
    key <AE08> { [           8,    asterisk, U20BD  ] };

    key <AB10> { [      period,       comma  ] };
    key <BKSL> { [   backslash,       slash  ] };
};

hidden partial alphanumeric_keys
xkb_symbols "common" {

    key <AE01> { [           1,      exclam  ] };
    key <AE02> { [           2,    quotedbl  ] };
    key <AE03> { [           3,  numbersign  ] };
    key <AE04> { [           4,    asterisk  ] };
    key <AE05> { [           5,       colon  ] };
    key <AE06> { [           6,       comma  ] };
    key <AE07> { [           7,      period  ] };
    key <AE08> { [           8,   semicolon  ] };
    key <AE09> { [           9,   parenleft  ] };
    key <AE10> { [           0,  parenright  ] };
    key <AE11> { [       minus,  underscore  ] };
    key <AE12> { [       equal,        plus  ] };
    key <BKSL> { [   backslash,         bar  ] };

    key <AB10> { [       slash,    question  ] };
    key <LSGT> { [       slash,         bar  ] };

    key <TLDE> { [       Cyrillic_io,       Cyrillic_IO  ] };
    key <AD01> { [   Cyrillic_shorti,   Cyrillic_SHORTI  ] };
    key <AD02> { [      Cyrillic_tse,      Cyrillic_TSE  ] };
    key <AD03> { [        Cyrillic_u,        Cyrillic_U  ] };
    key <AD04> { [       Cyrillic_ka,       Cyrillic_KA  ] };
    key <AD05> { [       Cyrillic_ie,       Cyrillic_IE  ] };
    key <AD06> { [       Cyrillic_en,       Cyrillic_EN  ] };
    key <AD07> { [      Cyrillic_ghe,      Cyrillic_GHE  ] };
    key <AD08> { [      Cyrillic_sha,      Cyrillic_SHA  ] };
    key <AD09> { [    Cyrillic_shcha,    Cyrillic_SHCHA  ] };
    key <AD10> { [       Cyrillic_ze,       Cyrillic_ZE  ] };
    key <AD11> { [       Cyrillic_ha,       Cyrillic_HA  ] };
    key <AD12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN  ] };

    key <AC01> { [       Cyrillic_ef,       Cyrillic_EF  ] };
    key <AC02> { [     Cyrillic_yeru,     Cyrillic_YERU  ] };
    key <AC03> { [       Cyrillic_ve,       Cyrillic_VE  ] };
    key <AC04> { [        Cyrillic_a,        Cyrillic_A  ] };
    key <AC05> { [       Cyrillic_pe,       Cyrillic_PE  ] };
    key <AC06> { [       Cyrillic_er,       Cyrillic_ER  ] };
    key <AC07> { [        Cyrillic_o,        Cyrillic_O  ] };
    key <AC08> { [       Cyrillic_el,       Cyrillic_EL  ] };
    key <AC09> { [       Cyrillic_de,       Cyrillic_DE  ] };
    key <AC10> { [      Cyrillic_zhe,      Cyrillic_ZHE  ] };
    key <AC11> { [        Cyrillic_e,        Cyrillic_E  ] };

    key <AB01> { [       Cyrillic_ya,       Cyrillic_YA  ] };
    key <AB02> { [      Cyrillic_che,      Cyrillic_CHE  ] };
    key <AB03> { [       Cyrillic_es,       Cyrillic_ES  ] };
    key <AB04> { [       Cyrillic_em,       Cyrillic_EM  ] };
    key <AB05> { [        Cyrillic_i,        Cyrillic_I  ] };
    key <AB06> { [       Cyrillic_te,       Cyrillic_TE  ] };
    key <AB07> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN  ] };
    key <AB08> { [       Cyrillic_be,       Cyrillic_BE  ] };
    key <AB09> { [       Cyrillic_yu,       Cyrillic_YU  ] };

    include "kpdl(comma)"
};

partial alphanumeric_keys
xkb_symbols "legacy" {

    include "ru(common)"
    name[Group1]= "Russian (legacy)";
};

partial alphanumeric_keys
xkb_symbols "olpc" {

    include "ru(common)"

    key <TLDE> { [  0x01000451,   0x01000401,       grave  ] };  // Ñ‘, Ð
    key <AE03> { [           3,   numbersign,  0x01002116  ] };  // â„–
    key <AE04> { [           4,       dollar,   semicolon  ] };
    key <AE06> { [           6,  asciicircum,       colon  ] };
    key <AE07> { [           7,    ampersand               ] };
    key <AE09> { [           9,    parenleft,       acute  ] };
    key <AC12> { [   backslash,          bar,       slash  ] };

    include "group(olpc)"
};

partial alphanumeric_keys
xkb_symbols "typewriter" {

    include "ru(common)"
    name[Group1]= "Russian (typewriter)";

    key <TLDE> { [         bar,        plus  ] };
    key <AE01> { [  numerosign,           1  ] };
    key <AE02> { [       minus,           2  ] };
    key <AE03> { [       slash,           3  ] };
    key <AE04> { [    quotedbl,           4  ] };
    key <AE05> { [       colon,           5  ] };
    key <AE06> { [       comma,           6  ] };
    key <AE07> { [      period,           7  ] };
    key <AE08> { [  underscore,           8  ] };
    key <AE09> { [    question,           9  ] };
    key <AE10> { [     percent,           0  ] };
    key <AE11> { [      exclam,       equal  ] };
    key <AE12> { [   semicolon,   backslash  ] };

    key <BKSL> { [  parenright,   parenleft  ] };

    key <AD12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN  ] };
    key <AB10> { [       Cyrillic_io,       Cyrillic_IO  ] };
};

partial alphanumeric_keys
xkb_symbols "typewriter-legacy" {

    include "ru(common)"
    name[Group1]= "Russian (typewriter, legacy)";

    key <TLDE> { [  apostrophe,    quotedbl  ] };
    key <AE01> { [      exclam,           1  ] };
    key <AE02> { [  numerosign,           2  ] };
    key <AE03> { [       slash,           3  ] };
    key <AE04> { [   semicolon,           4  ] };
    key <AE05> { [       colon,           5  ] };
    key <AE06> { [       comma,           6  ] };
    key <AE07> { [      period,           7  ] };
    key <AE08> { [  underscore,           8  ] };
    key <AE09> { [    question,           9  ] };
    key <AE10> { [     percent,           0  ] };

    key <BKSL> { [   parenleft,  parenright  ] };

    key <AD12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN  ] };
    key <AB10> { [       Cyrillic_io,       Cyrillic_IO  ] };
};

partial alphanumeric_keys
xkb_symbols "phonetic" {

    name[Group1]= "Russian (phonetic)";

    key <AE01> { [           1,      exclam  ] };
    key <AE02> { [           2,          at  ] };
    key <AE03> { [           3, Cyrillic_io  ] };
    key <AE04> { [           4, Cyrillic_IO  ] };
    key <AE05> { [           5, Cyrillic_hardsign  ] };
    key <AE06> { [           6, Cyrillic_HARDSIGN  ] };
    key <AE07> { [           7,   ampersand  ] };
    key <AE08> { [           8,    asterisk  ] };
    key <AE09> { [           9,   parenleft  ] };
    key <AE10> { [           0,  parenright  ] };
    key <AE11> { [       minus,  underscore  ] };

    key <AB09> { [      period,     greater  ] };
    key <AB10> { [       slash,    question  ] };
    key <AB08> { [       comma,        less  ] };
    key <AC10> { [   semicolon,       colon  ] };
    key <AC11> { [  apostrophe,    quotedbl  ] };
    key <LSGT> { [         bar,   brokenbar  ] };

    key <TLDE> { [       Cyrillic_yu,       Cyrillic_YU  ] };
    key <LatQ> { [       Cyrillic_ya,       Cyrillic_YA  ] };
    key <LatZ> { [       Cyrillic_ze,       Cyrillic_ZE  ] };
    key <LatS> { [       Cyrillic_es,       Cyrillic_ES  ] };
    key <LatA> { [        Cyrillic_a,        Cyrillic_A  ] };
    key <LatW> { [       Cyrillic_ve,       Cyrillic_VE  ] };
    key <LatC> { [      Cyrillic_tse,      Cyrillic_TSE  ] };
    key <LatX> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN  ] };
    key <LatD> { [       Cyrillic_de,       Cyrillic_DE  ] };
    key <LatE> { [       Cyrillic_ie,       Cyrillic_IE  ] };
    key <LatV> { [      Cyrillic_zhe,      Cyrillic_ZHE  ] };
    key <LatF> { [       Cyrillic_ef,       Cyrillic_EF  ] };
    key <LatT> { [       Cyrillic_te,       Cyrillic_TE  ] };
    key <LatR> { [       Cyrillic_er,       Cyrillic_ER  ] };
    key <LatN> { [       Cyrillic_en,       Cyrillic_EN  ] };
    key <LatB> { [       Cyrillic_be,       Cyrillic_BE  ] };
    key <LatH> { [       Cyrillic_ha,       Cyrillic_HA  ] };
    key <LatG> { [      Cyrillic_ghe,      Cyrillic_GHE  ] };
    key <LatY> { [     Cyrillic_yeru,     Cyrillic_YERU  ] };
    key <LatM> { [       Cyrillic_em,       Cyrillic_EM  ] };
    key <LatJ> { [   Cyrillic_shorti,   Cyrillic_SHORTI  ] };
    key <LatU> { [        Cyrillic_u,        Cyrillic_U  ] };
    key <LatK> { [       Cyrillic_ka,       Cyrillic_KA  ] };
    key <LatI> { [        Cyrillic_i,        Cyrillic_I  ] };
    key <LatO> { [        Cyrillic_o,        Cyrillic_O  ] };
    key <LatL> { [       Cyrillic_el,       Cyrillic_EL  ] };
    key <LatP> { [       Cyrillic_pe,       Cyrillic_PE  ] };

    key <AD11> { [      Cyrillic_sha,      Cyrillic_SHA  ] };
    key <AE12> { [      Cyrillic_che,      Cyrillic_CHE  ] };
    key <AD12> { [    Cyrillic_shcha,    Cyrillic_SHCHA  ] };
    key <BKSL> { [        Cyrillic_e,        Cyrillic_E  ] };
};

partial alphanumeric_keys
xkb_symbols "phonetic_winkeys" {

    include "ru(phonetic)"
    name[Group1]= "Russian (phonetic, Windows)";

    key <LatX> { [       Cyrillic_ha,       Cyrillic_HA  ] };
    key <LatH> { [      Cyrillic_che,      Cyrillic_CHE  ] };
    key <AE12> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN  ] };
};

partial alphanumeric_keys
xkb_symbols "phonetic_YAZHERTY" {
    include "ru(phonetic_winkeys)"
    name[Group1]= "Russian (phonetic, YAZHERTY)";
    key	<LatW> {	[     Cyrillic_zhe,     Cyrillic_ZHE	]	};
    key	<LatV> {	[    Cyrillic_ve,    Cyrillic_VE	]	}; 
};


partial alphanumeric_keys
xkb_symbols "tt" {

    include "ru(winkeys)"
    name[Group1]= "Tatar";

    key.type[group1]="FOUR_LEVEL";

    key <TLDE> { [           Cyrillic_shha,           Cyrillic_SHHA,        Cyrillic_io,        Cyrillic_IO  ] };
    key <AD02> { [          Cyrillic_o_bar,          Cyrillic_O_bar,       Cyrillic_tse,       Cyrillic_TSE  ] };
    key <AD09> { [          Cyrillic_schwa,          Cyrillic_SCHWA,     Cyrillic_shcha,     Cyrillic_SHCHA  ] };
    key <AD12> { [     Cyrillic_u_straight,     Cyrillic_U_straight,  Cyrillic_hardsign,  Cyrillic_HARDSIGN  ] };
    key <AC10> { [   Cyrillic_en_descender,   Cyrillic_EN_descender,       Cyrillic_zhe,       Cyrillic_ZHE  ] };
    key <AB07> { [  Cyrillic_zhe_descender,  Cyrillic_ZHE_descender,  Cyrillic_softsign,  Cyrillic_SOFTSIGN  ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "os_legacy" {

    include "ru(common)"
    name[Group1]= "Ossetian (legacy)";

    key <TLDE> { [  Cyrillic_e,  Cyrillic_E                              ] };
    key <AC07> { [  Cyrillic_o,  Cyrillic_O,  Cyrillic_io,  Cyrillic_IO  ] };
    key <AC11> { [  0x010004D5,  0x010004D4                              ] };
};

partial alphanumeric_keys
xkb_symbols "os_winkeys" {

    include "ru(winkeys)"
    name[Group1]= "Ossetian (Windows)";

    key <TLDE> { [  Cyrillic_e,  Cyrillic_E                              ] };
    key <AC07> { [  Cyrillic_o,  Cyrillic_O,  Cyrillic_io,  Cyrillic_IO  ] };
    key <AC11> { [  0x010004D5,  0x010004D4                              ] };
};

partial alphanumeric_keys
xkb_symbols "cv" {

    include "ru(winkeys)"
    name[Group1]= "Chuvash";

    key.type[group1]="FOUR_LEVEL";

    key <AD03> { [   Cyrillic_u,   Cyrillic_U,  0x010004f3,  0x010004f2 ] };
    key <AD05> { [  Cyrillic_ie,  Cyrillic_IE,  0x010004d7,  0x010004d6 ] };
    key <AC04> { [   Cyrillic_a,   Cyrillic_A,  0x010004d1,  0x010004d0 ] };
    key <AB03> { [  Cyrillic_es,  Cyrillic_ES,  0x010004ab,  0x010004aa ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "udm" {

    include "ru(winkeys)"
    name[Group1]= "Udmurt";

    key.type[group1]="FOUR_LEVEL";

    key <AE01> { [    question,      exclam,   1,   1  ] };
    key <AE02> { [   parenleft,    quotedbl,   2,   2  ] };
    key <AE03> { [  parenright,  numerosign,   3,   3  ] };
    key <AE04> { [       colon,   semicolon,   4,   4  ] };
    key <AE05> { [    asterisk,     percent,   5,   5  ] };
    key <AE06> { [  0x010004dd,  0x010004dc,   6,   6  ] };
    key <AE07> { [  0x010004e7,  0x010004e6,   7,   7  ] };
    key <AE08> { [  0x010004f5,  0x010004f4,   8,   8  ] };
    key <AE09> { [  0x010004e5,  0x010004e4,   9,   9  ] };
    key <AE10> { [  0x010004df,  0x010004de,   0,   0  ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "cv_latin" {

    include "us(alt-intl)"
    name[Group1]= "Chuvash (Latin)";

    key.type[group1]="FOUR_LEVEL";

    key <AD01> { [   q,   Q,   0x01000161,   0x01000160  ] };
    key <AD02> { [   w,   W,   udiaeresis,   Udiaeresis  ] };
    key <AD03> { [   e,   E,   0x01000115,   0x01000114  ] };
    key <AD07> { [   u,   U,   udiaeresis,   Udiaeresis  ] };
    key <AD08> { [   i,   I,   0x0100012d,   0x0100012c  ] };
    key <AD09> { [   o,   O,   odiaeresis,   Odiaeresis  ] };
    key <AC01> { [   a,   A,       abreve,       Abreve  ] };
    key <AC02> { [   s,   S,     scedilla,     Scedilla  ] };
    key <AC05> { [   g,   G,       gbreve,       Gbreve  ] };
    key <AC07> { [   j,   J,   0x01000131,   0x01000130  ] };
    key <AB03> { [   c,   C,     ccedilla,     Ccedilla  ] };

    include "level3(ralt_switch)"
};

// Komi language layout
// Vlad Shakhov <lumpen.intellectual@gmail.com>
// last changes 2007/10/23
partial alphanumeric_keys
xkb_symbols "kom" {

    include "ru(winkeys)"
    name[Group1]= "Komi";

    key.type[group1]="FOUR_LEVEL_ALPHABETIC";

    // cyrilllic o with diaeresis
    key <AC07> { [  Cyrillic_o,  Cyrillic_O,        U04E7,        U04E6  ] };

    // hard I as additional key for soft Cyrillic_I
    key <AB05> { [  Cyrillic_i,  Cyrillic_I,  Ukrainian_i,  Ukrainian_I  ] };

    include "level3(ralt_switch)"
};

// Yakut language layout
// 2008/04/23 Yakov Aleksandrov <bertjickty@yandex.ru>
// 2008/04/23 Anatoliy Zhozhikov <jav@sitc.ru>
// 2008/04/23 Aleksandr Varlamov
partial alphanumeric_keys
xkb_symbols "sah" {

    include "ru(winkeys)"
    name[Group1]= "Yakut";

    key.type[group1]="FOUR_LEVEL_ALPHABETIC";

    key <TLDE> { [  Cyrillic_io,      Cyrillic_IO,      U04EB,                U04EA                ] };
    key <AD01> { [  Cyrillic_shorti,  Cyrillic_SHORTI,  U048B,                U048A                ] };
    key <AD03> { [  Cyrillic_u,       Cyrillic_U,       Cyrillic_u_straight,  Cyrillic_U_straight  ] };
    key <AD04> { [  Cyrillic_ka,      Cyrillic_KA,      U04C4,                U04C3                ] };
    key <AD06> { [  Cyrillic_en,      Cyrillic_EN,      U04A5,                U04A4                ] };
    key <AD07> { [  Cyrillic_ghe,     Cyrillic_GHE,     U0495,                U0494                ] };
    key <AD10> { [  Cyrillic_ze,      Cyrillic_ZE,      U04E1,                U04E0                ] };
    key <AD11> { [  Cyrillic_ha,      Cyrillic_HA,      Cyrillic_shha,        Cyrillic_SHHA        ] };
    key <AC07> { [  Cyrillic_o,       Cyrillic_O,       Cyrillic_o_bar,       Cyrillic_O_bar       ] };
    key <AC10> { [  Cyrillic_zhe,     Cyrillic_ZHE,     U0461,                U0460                ] };
    key <AB02> { [  Cyrillic_che,     Cyrillic_CHE,     Cyrillic_u_macron,    Cyrillic_U_macron    ] };
    key <AB04> { [  Cyrillic_em,      Cyrillic_EM,      U04C8,                U04C7                ] };
    key <AB05> { [  Cyrillic_i,       Cyrillic_I,       Cyrillic_i_macron,    Cyrillic_I_macron    ] };

    include "level3(ralt_switch)"
};


//Kalmyk language layout
//based on the Kalmyk language layout: http://soft.oyrat.org/
//Nikolay Korneev <halmg@oyrat.org>
//Toli Miron <mirontoli@gmail.com>
partial alphanumeric_keys
xkb_symbols "xal" {

    include "ru(winkeys)"
    name[Group1]= "Kalmyk";

    key.type[group1]="FOUR_LEVEL";

    key <AE01> { [               question,                 exclam,             1  ] };
    key <AE02> { [             numerosign,               quotedbl,             2  ] };
    key <AE03> { [    Cyrillic_u_straight,    Cyrillic_U_straight,             3  ] };
    key <AE04> { [         Cyrillic_schwa,         Cyrillic_SCHWA,             4  ] };
    key <AE05> { [               asterisk,                percent,             5  ] };
    key <AE06> { [  Cyrillic_en_descender,  Cyrillic_EN_descender,             6  ] };
    key <AE07> { [         Cyrillic_o_bar,         Cyrillic_O_bar,             7  ] };
    key <AE08> { [          Cyrillic_shha,          Cyrillic_SHHA,             8  ] };
    key <AE09> { [ Cyrillic_zhe_descender, Cyrillic_ZHE_descender,             9  ] };
    key <AE10> { [              semicolon,                  colon,             0  ] };

    key <TLDE> { [              parenleft,             parenright,   Cyrillic_io,  Cyrillic_IO    ] };

    key <AD02> { [           Cyrillic_tse,           Cyrillic_TSE,        dollar  ] };
    key <AD03> { [             Cyrillic_u,             Cyrillic_U,      EuroSign  ] };
    key <AD04> { [            Cyrillic_ka,            Cyrillic_KA,    registered  ] };
    key <AD05> { [            Cyrillic_ie,            Cyrillic_IE,     trademark  ] };
    key <AD11> { [            Cyrillic_ha,            Cyrillic_HA,   bracketleft  ] };
    key <AD12> { [      Cyrillic_hardsign,      Cyrillic_HARDSIGN,  bracketright  ] };
    key <AC11> { [             Cyrillic_e,             Cyrillic_E,    apostrophe  ] };
    key <AB03> { [            Cyrillic_es,            Cyrillic_ES,     copyright  ] };
    key <AB08> { [            Cyrillic_be,            Cyrillic_BE,          less  ] };
    key <AB09> { [            Cyrillic_yu,            Cyrillic_YU,       greater  ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "dos" {

    include "ru(common)"
    name[Group1]= "Russian (DOS)";

    key <TLDE> { [   parenright,  parenleft   ] };
    key <AE04> { [   4,           currency    ] };
    key <AE09> { [   9,           question    ] };
    key <AE10> { [   0,           percent     ] };

    key <AB10> { [   Cyrillic_io, Cyrillic_IO ] };
};

partial alphanumeric_keys
xkb_symbols "bak" {

    include "ru(winkeys)"
    name[Group1]= "Bashkirian";

    key.type[group1]="FOUR_LEVEL";

    key <TLDE> { [         Cyrillic_schwa,         Cyrillic_SCHWA,  Cyrillic_io,   Cyrillic_IO  ] };
    key <AE01> { [                 exclam,               quotedbl,            1,             1  ] };
    key <AE02> { [         Cyrillic_o_bar,         Cyrillic_O_bar,            2,             2  ] };
    key <AE03> { [             0x010004a1,             0x010004a0,            3,             3  ] };
    key <AE04> { [       Cyrillic_ghe_bar,       Cyrillic_GHE_bar,            4,             4  ] };
    key <AE05> { [             0x010004ab,             0x010004aa,            5,             5  ] };
    key <AE06> { [                  colon,              semicolon,            6,             6  ] };
    key <AE07> { [             0x01000499,             0x01000498,            7,             7  ] };
    key <AE08> { [          Cyrillic_shha,          Cyrillic_SHHA,            8,             8  ] };
    key <AE09> { [               question,              parenleft,            9,             9  ] };
    key <AE10> { [             numerosign,             parenright,            0,             0  ] };
    key <AE11> { [                  minus,                percent,        minus,    underscore  ] };
    key <AE12> { [    Cyrillic_u_straight,    Cyrillic_U_straight,        equal,          plus  ] };
    key <BKSL> { [  Cyrillic_en_descender,  Cyrillic_EN_descender,    backslash,         slash  ] };

    include "level3(ralt_switch)"
};

// Serbian characters are added as third-level symbols to Russian keyboard layout.
partial alphanumeric_keys
xkb_symbols "srp" {

    include "ru(common)"
    name[Group1]= "Serbian (Russia)";

    key <AE03> { [               3,      numerosign                ] };
    key <AE04> { [               4,       semicolon                ] };
    key <AE05> { [               5,         percent                ] };
    key <AE06> { [               6,           colon                ] };
    key <AE07> { [               7,        question                ] };
    key <AE08> { [               8,        asterisk                ] };
    key <AB10> { [          period,           comma                ] };
    key <BKSL> { [       backslash,           slash                ] };
    key <AD01> { [ Cyrillic_shorti, Cyrillic_SHORTI,  U458,  U408  ] };
    key <AD06> { [     Cyrillic_en,     Cyrillic_EN,  U45A,  U40A  ] };
    key <AC08> { [     Cyrillic_el,     Cyrillic_EL,  U459,  U409  ] };
    key <AC09> { [     Cyrillic_de,     Cyrillic_DE,  U45F,  U40F  ] };
    key <AC10> { [    Cyrillic_zhe,    Cyrillic_ZHE,  U452,  U402  ] };
    key <AB02> { [    Cyrillic_che,    Cyrillic_CHE,  U45B,  U40B  ] };

    include "level3(ralt_switch)"
};

// Mari language layout
// http://www.marlamuter.com/
// Last edit by Viatcheslav Kileev (slavakileev@yandex.ru)
partial alphanumeric_keys
xkb_symbols "chm" {

    include "ru(winkeys)"
    name[Group1]= "Mari";

    key.type[group1]="FOUR_LEVEL_ALPHABETIC";

    key <AC04> { [   Cyrillic_a,   Cyrillic_A,   U04D3,   U04D2  ] };
    key <AD03> { [   Cyrillic_u,   Cyrillic_U,   U04F1,   U04F0  ] };
    key <AC02> { [ Cyrillic_yeru, Cyrillic_YERU, U04F9,   U04F8  ] };
    key <AD06> { [   Cyrillic_en,  Cyrillic_EN,  U04A5,   U04A4  ] };
    key <AC07> { [   Cyrillic_o,   Cyrillic_O,   U04E7,   U04E6  ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "phonetic_azerty" {

    include "level3(ralt_switch)"

    name[Group1]= "Russian (phonetic, AZERTY)";

     key <AE01>	{ [ ampersand,          1,  onesuperior,   exclamdown ]	};
     key <AE02>	{ [    eacute,          2,   asciitilde,    oneeighth ]	};
     key <AE03>	{ [  quotedbl,          3,   numbersign,     sterling ]	};
     key <AE04>	{ [apostrophe,          4,    braceleft,       dollar ]	};
     key <AE05>	{ [ parenleft,          5,  bracketleft, threeeighths ]	};
     key <AE06>	{ [     minus,          6,          bar,  fiveeighths ]	};
     key <AE07>	{ [    egrave,          7,        grave, seveneighths ]	};
     key <AE08>	{ [underscore,          8,    backslash,    trademark ]	};
     key <AE09>	{ [  ccedilla,          9,  asciicircum,    plusminus ]	};
     key <AE10>	{ [    agrave,          0,           at,       degree ]	};
     key <AE11>	{ [parenright,     degree, bracketright, questiondown ]	};
     key <AE12>	{ [     equal,       plus,   braceright,  dead_ogonek ]	};

     key <AB07> { [     comma,   question,        acute,  doubleacute ] };
     key <AB08>	{ [ semicolon,     period, horizconnector,   multiply ]	};
     key <AB09>	{ [     colon,      slash, periodcentered,   division ]	};
     key <AB10>	{ [    exclam,    section, dead_belowdot, dead_abovedot ] };

     key <AC11>  { [    ugrave,    percent,  asciicircum,        caron ] };
     key	<LSGT> {	[	      bar,	 brokenbar	]	};

     key	<TLDE> {	[     Cyrillic_yu,     Cyrillic_YU	]	};
     key	<AC01> {	[     Cyrillic_ya,     Cyrillic_YA	]	}; // Q
     key	<AD02> {	[     Cyrillic_ze,     Cyrillic_ZE	]	}; // Z
     key	<LatS> {	[     Cyrillic_es,     Cyrillic_ES	]	};
     key	<AD01> {	[      Cyrillic_a,	Cyrillic_A	]	};
     key	<AB01> {	[     Cyrillic_ve,     Cyrillic_VE	]	}; // W
     key	<LatC> {	[    Cyrillic_tse,    Cyrillic_TSE	]	};
     key	<LatX> {	[Cyrillic_softsign,Cyrillic_SOFTSIGN	]	};
     key	<LatD> {	[     Cyrillic_de,     Cyrillic_DE	]	};
     key	<LatE> {	[     Cyrillic_ie,     Cyrillic_IE	]	};
     key	<LatV> {	[    Cyrillic_zhe,    Cyrillic_ZHE	]	};
     key	<LatF> {	[     Cyrillic_ef,     Cyrillic_EF	]	};
     key	<LatT> {	[     Cyrillic_te,     Cyrillic_TE	]	};
     key	<LatR> {	[     Cyrillic_er,     Cyrillic_ER	]	};
     key	<LatN> {	[     Cyrillic_en,     Cyrillic_EN	]	};
     key	<LatB> {	[     Cyrillic_be,     Cyrillic_BE	]	};
     key	<LatH> {	[     Cyrillic_ha,     Cyrillic_HA	]	};
     key	<LatG> {	[    Cyrillic_ghe,    Cyrillic_GHE	]	};
     key	<LatY> {	[   Cyrillic_yeru,   Cyrillic_YERU	]	};
     key	<AC10> {	[     Cyrillic_em,     Cyrillic_EM	]	}; // M
     key	<LatJ> {	[ Cyrillic_shorti, Cyrillic_SHORTI	]	};
     key	<LatU> {	[      Cyrillic_u,	Cyrillic_U	]	};
     key	<LatK> {	[     Cyrillic_ka,     Cyrillic_KA	]	};
     key	<LatI> {	[      Cyrillic_i,	Cyrillic_I	]	};
     key	<LatO> {	[      Cyrillic_o,	Cyrillic_O	]	};
     key	<LatL> {	[     Cyrillic_el,     Cyrillic_EL	]	};
     key	<LatP> {	[     Cyrillic_pe,     Cyrillic_PE	]	};

    key	<AD11> {	[    Cyrillic_sha,    Cyrillic_SHA	]	};
    key	<AE12> {	[    Cyrillic_che,    Cyrillic_CHE	]	};
    key	<AD12> {	[  Cyrillic_shcha,  Cyrillic_SHCHA	]	};
    key	<BKSL> {	[      Cyrillic_e,	Cyrillic_E	]	};
};

// Russian dvorak phonetic layout
// Oleg Zalizniak <ramaloke at gmail.com>
partial alphanumeric_keys
xkb_symbols "phonetic_dvorak" {
    include "level3(ralt_switch)"

    name[Group1]= "Russian (phonetic, Dvorak)";

    key <TLDE> { [ Cyrillic_yu, Cyrillic_YU ] };

    key <AE01> { [ 1, exclam ] };
    key <AE02> { [ 2, at ] };
    key <AE03> { [ 3, Cyrillic_io ] };
    key <AE04> { [ 4, Cyrillic_IO ] };
    key <AE05> { [ 5, Cyrillic_hardsign ] };
    key <AE06> { [ 6, Cyrillic_HARDSIGN ] };
    key <AE07> { [ 7, ampersand ] };
    key <AE08> { [ 8, asterisk ] };
    key <AE09> { [ 9, parenleft ] };
    key <AE10> { [ 0, parenright ] };
    key <AE11> { [ Cyrillic_sha, Cyrillic_SHA ] };
    key <AE12> { [ Cyrillic_shcha, Cyrillic_SHCHA ] };
    key <BKSL> { [ Cyrillic_e, Cyrillic_E ] };

    key <AD01> { [ apostrophe, quotedbl, dead_acute, dead_diaeresis ] };
    key <AD02> { [ comma, less, dead_cedilla, dead_caron ] };
    key <AD03> { [ period, greater, dead_abovedot, periodcentered ] };
    key <AD04> { [ Cyrillic_pe, Cyrillic_PE ] };
    key <AD05> { [ Cyrillic_yeru, Cyrillic_YERU ] };
    key <AD06> { [ Cyrillic_ef, Cyrillic_EF ] };
    key <AD07> { [ Cyrillic_ghe, Cyrillic_GHE ] };
    key <AD08> { [ Cyrillic_tse, Cyrillic_TSE ] };
    key <AD09> { [ Cyrillic_er, Cyrillic_ER ] };
    key <AD10> { [ Cyrillic_el, Cyrillic_EL ] };
    key <AD11> { [ slash, question ] };
    key <AD12> { [ Cyrillic_che, Cyrillic_CHE ] };

    key <AC01> { [ Cyrillic_a, Cyrillic_A ] };
    key <AC02> { [ Cyrillic_o, Cyrillic_O ] };
    key <AC03> { [ Cyrillic_ie, Cyrillic_IE ] };
    key <AC04> { [ Cyrillic_u, Cyrillic_U ] };
    key <AC05> { [ Cyrillic_i, Cyrillic_I ] };
    key <AC06> { [ Cyrillic_de, Cyrillic_DE ] };
    key <AC07> { [ Cyrillic_ha, Cyrillic_HA ] };
    key <AC08> { [ Cyrillic_te, Cyrillic_TE ] };
    key <AC09> { [ Cyrillic_en, Cyrillic_EN ] };
    key <AC10> { [ Cyrillic_es, Cyrillic_ES ] };
    key <AC11> { [ minus, underscore ] };

    key <AB01> { [ semicolon, colon, dead_ogonek, dead_doubleacute ] };
    key <AB02> { [ Cyrillic_ya, Cyrillic_YA ] };
    key <AB03> { [ Cyrillic_shorti, Cyrillic_SHORTI ] };
    key <AB04> { [ Cyrillic_ka, Cyrillic_KA ] };
    key <AB05> { [Cyrillic_softsign,Cyrillic_SOFTSIGN ] };
    key <AB06> { [ Cyrillic_be, Cyrillic_BE ] };
    key <AB07> { [ Cyrillic_em, Cyrillic_EM ] };
    key <AB08> { [ Cyrillic_ve, Cyrillic_VE ] };
    key <AB09> { [ Cyrillic_zhe, Cyrillic_ZHE ] };
    key <AB10> { [ Cyrillic_ze, Cyrillic_ZE ] };
};

partial alphanumeric_keys
xkb_symbols "phonetic_fr" {

    include "fr"
    include "ru(phonetic_azerty)"

    name[Group1]= "Russian (phonetic, French)";
};

// EXTRAS:

// Rulemak, Colemak based Russian phonetic layout
// contact: Geert Hendrickx <geert@hendrickx.be>
// http://forum.colemak.com/viewtopic.php?id=519
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ Ё ``│ ! ˝ │ @   │ №   │ $   │ %   │ ^ ¯ │ &   │ * ₴ │ (   │ )   │ _ — │ Ъ + ┃ ⌫       ┃
// │ ё ` │ 1 ´ │ 2 ¨ │ 3 # │ 4 ¢ │ 5 € │ 6 ˘ │ 7   │ 8 ₽ │ 9 [ │ 0 ] │ - – │ ъ = ┃Backspace┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ Я Ѣ │ Ж Ѵ │ Ф Ѳ │ П   │ Г Ґ │ й Ј │ Л Љ │ У Ў │ Ы Ї │ Ю : │ Ш { │ Щ } ┃ Enter ┃
// ┃ Tab ↹ ┃ я ѣ │ ж ѵ │ ф ѳ │ п   │ г ґ │ й ј │ л љ │ у ў │ ы ї │ ю ; │ ш « │ щ » ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃ ⌫ Back ┃ А   │ Р   │ С   │ Т Ћ │ Д Ђ │ Ч Џ │ Н Њ │ Е Є │ И І │ О   │ Ь " │ Э | ┃      ┃
// ┃  space ┃ а   │ р   │ с   │ т ћ │ д ђ │ ч џ │ н њ │ е є │ и і │ о   │ ь ' │ э \ ┃      ┃
// ┣━━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┲━━━┷━━━━━┻━━━━━━┫
// ┃          ┃ З Ѕ │ Х   │ Ц   │ В   │ Б Ѓ │ К Ќ │ М   │ ;   │ :   │ ? Ӏ ┃                ┃
// ┃  Shift ⇧ ┃ з ѕ │ х   │ ц   │ в   │ б ѓ │ к ќ │ м   │ , < │ . > │ / ӏ ┃     Shift ⇧    ┃
// ┣━━━━━━━┳━━┻━━━━┳┷━━━━━┷┱────┴─────┴─────┴─────┴─────┴─────┴┲━━━━┷━━┳━━┻━━━━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ Meta  ┃  Alt  ┃                Space              ┃AltGr ⇮┃ Menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "rulemak" {

    name[Group1]= "Russian (Rulemak, phonetic Colemak)";

    key <TLDE> { [     Cyrillic_io,     Cyrillic_IO,           U0300,           U030F ] }; // Combining grave, double grave
    key <AE01> { [               1,          exclam,           U0301,           U030B ] }; // Combining acute, double acute
    key <AE02> { [               2,              at,           U0308                  ] }; // Combining diaeresis
    key <AE03> { [               3,      numerosign,      numbersign                  ] };
    key <AE04> { [               4,          dollar,            cent                  ] };
    key <AE05> { [               5,         percent,        EuroSign                  ] };
    key <AE06> { [               6,     asciicircum,           U0306,           U0304 ] }; // Combining breve, macron
    key <AE07> { [               7,       ampersand                                   ] };
    key <AE08> { [               8,        asterisk,           U20BD,           U20B4 ] }; // ruble, hryvnia
    key <AE09> { [               9,       parenleft,     bracketleft                  ] };
    key <AE10> { [               0,      parenright,    bracketright                  ] };
    key <AE11> { [           minus,      underscore,          endash,          emdash ] };
    key <AE12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN,       equal,            plus ] };

    key <AD01> { [     Cyrillic_ya,     Cyrillic_YA,           U0463,           U0462 ] }; // yat
    key <AD02> { [    Cyrillic_zhe,    Cyrillic_ZHE,           U0475,           U0474 ] }; // izhitsa
    key <AD03> { [     Cyrillic_ef,     Cyrillic_EF,           U0473,           U0472 ] }; // fita
    key <AD04> { [     Cyrillic_pe,     Cyrillic_PE                                   ] };
    key <AD05> { [    Cyrillic_ghe,    Cyrillic_GHE, Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };
    key <AD06> { [ Cyrillic_shorti, Cyrillic_SHORTI,     Cyrillic_je,     Cyrillic_JE ] };
    key <AD07> { [     Cyrillic_el,     Cyrillic_EL,    Cyrillic_lje,    Cyrillic_LJE ] };
    key <AD08> { [      Cyrillic_u,      Cyrillic_U, Byelorussian_shortu, Byelorussian_SHORTU ] };
    key <AD09> { [   Cyrillic_yeru,   Cyrillic_YERU,    Ukrainian_yi,    Ukrainian_YI ] };
    key <AD10> { [     Cyrillic_yu,     Cyrillic_YU,       semicolon,           colon ] };
    key <AD11> { [    Cyrillic_sha,    Cyrillic_SHA,   guillemotleft,       braceleft ] };
    key <AD12> { [  Cyrillic_shcha,  Cyrillic_SHCHA,  guillemotright,      braceright ] };
    key <BKSL> { [      Cyrillic_e,      Cyrillic_E,       backslash,             bar ] };

    key <AC01> { [      Cyrillic_a,      Cyrillic_A                                   ] };
    key <AC02> { [     Cyrillic_er,     Cyrillic_ER                                   ] };
    key <AC03> { [     Cyrillic_es,     Cyrillic_ES                                   ] };
    key <AC04> { [     Cyrillic_te,     Cyrillic_TE,    Serbian_tshe,    Serbian_TSHE ] };
    key <AC05> { [     Cyrillic_de,     Cyrillic_DE,     Serbian_dje,     Serbian_DJE ] };
    key <AC06> { [     Cyrillic_che,   Cyrillic_CHE,   Cyrillic_dzhe,   Cyrillic_DZHE ] };
    key <AC07> { [     Cyrillic_en,     Cyrillic_EN,    Cyrillic_nje,    Cyrillic_NJE ] };
    key <AC08> { [     Cyrillic_ie,     Cyrillic_IE,    Ukrainian_ie,    Ukrainian_IE ] };
    key <AC09> { [      Cyrillic_i,      Cyrillic_I,     Ukrainian_i,     Ukrainian_I ] };
    key <AC10> { [      Cyrillic_o,      Cyrillic_O                                   ] };
    key <AC11> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN,  apostrophe,        quotedbl ] };

    key <AB01> { [     Cyrillic_ze,     Cyrillic_ZE,   Macedonia_dse,   Macedonia_DSE ] };
    key <AB02> { [     Cyrillic_ha,     Cyrillic_HA                                   ] };
    key <AB03> { [    Cyrillic_tse,    Cyrillic_TSE                                   ] };
    key <AB04> { [     Cyrillic_ve,     Cyrillic_VE                                   ] };
    key <AB05> { [     Cyrillic_be,     Cyrillic_BE,   Macedonia_gje,   Macedonia_GJE ] };
    key <AB06> { [     Cyrillic_ka,     Cyrillic_KA,   Macedonia_kje,   Macedonia_KJE ] };
    key <AB07> { [     Cyrillic_em,     Cyrillic_EM                                   ] };
    key <AB08> { [           comma,       semicolon,            less                  ] };
    key <AB09> { [          period,           colon,         greater                  ] };
    key <AB10> { [           slash,        question,           U04CF,           U04C0 ] }; // palochka

    key <LSGT> { [           equal,            plus,        multiply,        division ] };

    include "level3(ralt_switch)"
    include "capslock(backspace)"
    include "nbsp(level4)"
};

// Church Slavonic language layout
// based on the Russian standard keyboard
// by Aleksandr Andreev and Yuri Shardt
// last changes 2010/08/01; contact <aleksandr.andreev@gmail.com>
partial alphanumeric_keys
xkb_symbols "chu" {

    name[Group1]= "Church Slavonic";

    key <TLDE> { [  Ukrainian_yi,  Ukrainian_YI,  U0482,  U20DD  ] };  // ї Ї ҂ e.g: а⃝ where the last is a combining ten thousands sign
    key <AE01> { [  U0461,  U0460,  U047D,  U047C  ] };  // ѡ Ѡ ѽ Ѽ
    key <AE02> { [  Ukrainian_ie,  Ukrainian_IE,  U0465,  U0464  ] };  // є Є ѥ Ѥ
    key <AE03> { [  U046F,  U046E,  U0469,  U0468  ] };  // ѯ Ѯ ѩ Ѩ
    key <AE04> { [  U0471,  U0470,  U046D,  U046C  ] };  // ѱ Ѱ ѭ Ѭ
    key <AE05> { [  U0473,  U0472,  UA657,  UA656  ] };  // ѳ Ѳ iotified A
    key <AE06> { [  U0475,  U0474,  U0477,  U0476  ] };  // ѵ Ѵ ѷ Ѷ
    key <AE07> { [  U047B,  U047A,  UA64D,  UA64C  ] };  // ѻ Ѻ ꙍ Ꙍ
    key <AE08> { [  U047F,  U047E,  U046B,  U046A  ] };  // ѿ Ѿ ѫ Ѫ
    key <AE09> { [  Macedonia_dse,  Macedonia_DSE,  parenleft, asterisk  ] };  // ѕ Ѕ ( *
    key <AE10> { [  Cyrillic_u,     Cyrillic_U,  parenright,  U0488]};  // у У ) NB: for digraph Ouk, use Cyrillic_o + Cyrillic_u
    key <AE11> { [  U0483,  U0486,  U0487,  U005F  ] };  // а҃ а҆ а҇, _ (titlo, psili, pokrytie, underscore)
    key <AE12> { [  U0301,  U0300,  U0484,  UA67E  ] };  // а̀ а́ а҄ ꙾ (oxia, varia, kamora, kavyka)

    key <AD01> { [  Cyrillic_shorti,  Cyrillic_SHORTI,  Ukrainian_i  ] };
    key <AD02> { [     Cyrillic_tse,     Cyrillic_TSE,  U2DF0  ] };
    key <AD03> { [            UA64B,            UA64A,  U2DF9  ] };  // Cyrillic monograph Uk (not U)!
    key <AD04> { [      Cyrillic_ka,      Cyrillic_KA,  U2DE6  ] };
    key <AD05> { [      Cyrillic_ie,      Cyrillic_IE,  U2DF7  ] };
    key <AD06> { [      Cyrillic_en,      Cyrillic_EN,  U2DE9  ] };
    key <AD07> { [     Cyrillic_ghe,     Cyrillic_GHE,  U2DE2  ] };
    key <AD08> { [     Cyrillic_sha,     Cyrillic_SHA,  U2DF2  ] };
    key <AD09> { [   Cyrillic_shcha,   Cyrillic_SHCHA,  U2DF3  ] };
    key <AD10> { [      Cyrillic_ze,      Cyrillic_ZE,  U2DE5  ] };
    key <AD11> { [      Cyrillic_ha,      Cyrillic_HA,  U2DEF  ] };
    key <AD12> { [Cyrillic_hardsign,Cyrillic_HARDSIGN,  UA67D  ] };  // Payerok
    key <BKSL> { [        backslash,            slash,  colon,  question ] };  // \ / : ? NB: for Slavonic question, use semicolon

    key <AC01> { [      Cyrillic_ef,      Cyrillic_EF          ] };
    key <AC02> { [    Cyrillic_yeru,    Cyrillic_YERU          ] };
    key <AC03> { [      Cyrillic_ve,      Cyrillic_VE,  U2DE1  ] };
    key <AC04> { [       Cyrillic_a,       Cyrillic_A,  U2DF6  ] };
    key <AC05> { [      Cyrillic_pe,      Cyrillic_PE,  U2DEB  ] };
    key <AC06> { [      Cyrillic_er,      Cyrillic_ER,  U2DEC  ] };
    key <AC07> { [       Cyrillic_o,       Cyrillic_O,  U2DEA  ] };
    key <AC08> { [      Cyrillic_el,      Cyrillic_EL,  U2DE7  ] };
    key <AC09> { [      Cyrillic_de,      Cyrillic_DE,  U2DE3  ] };
    key <AC10> { [     Cyrillic_zhe,     Cyrillic_ZHE,  U2DE4  ] };
    key <AC11> { [            U0463,            U0462,  U2DFA  ] };  // Yat

    key <AB01> { [            U0467,            U0466,  U2DFD  ] };  // Small Yus
    key <AB02> { [     Cyrillic_che,     Cyrillic_CHE,  U2DF1  ] };
    key <AB03> { [      Cyrillic_es,      Cyrillic_ES,  U2DED  ] };
    key <AB04> { [      Cyrillic_em,      Cyrillic_EM,  U2DE8  ] };
    key <AB05> { [       Cyrillic_i,       Cyrillic_I          ] };
    key <AB06> { [      Cyrillic_te,      Cyrillic_TE,  U2DEE  ] };
    key <AB07> { [Cyrillic_softsign,Cyrillic_SOFTSIGN          ] };
    key <AB08> { [      Cyrillic_be,      Cyrillic_BE,  U2DE0  ] };
    key <AB09> { [      Cyrillic_yu,      Cyrillic_YU,  U2DFB  ] };
    key <AB10> { [           period,            comma, semicolon, exclam  ] };
};


// RUU (Russian-Ukrainian United keyboard layout).
// This is a modified Russian standard keyboard, with the third level containing
// Ukrainian and Belorusian alphabetic letters and commonly used Unicode symbols.
// For a description see http://wiki.opennet.ru/RUU [in Russian].
// Vasyĺ V. Vercynśkyj <fuckel@ukr.net>
// last changes 2011/05/11
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ' ~ │ ! ≈ │ " ∞ │ № ₴ │ ; € │ % ‰ │ : ≤ │ ? ≥ │ * × │ ( { │ ) } │ _ – │ + ± ┃ ⌫       ┃
// │ ’  ́ │ 1 ÷ │ 2 ¤ │ 3 § │ 4 $ │ 5 ° │ 6 < │ 7 > │ 8 • │ 9 [ │ 0 ] │ - — │ = ≠ ┃Backspace┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ Й   │ Ц   │ У Ў │ К   │ Е Ё │ Н   │ Г Ґ │ Ш   │ Щ   │ З   │ Х   │ Ъ Ї ┃ Enter ┃
// ┃ Tab ↹ ┃ й   │ ц   │ у ў │ к ® │ е ё │ н   │ г ґ │ ш   │ щ   │ з   │ х   │ ъ ї ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃ Caps   ┃ Ф   │ Ы І │ В   │ А   │ П   │ Р   │ О   │ Л   │ Д   │ Ж   │ Э Є │ | ¦ ┃      ┃
// ┃ Lock ⇬ ┃ ф   │ ы і │ в   │ а   │ п   │ р   │ о   │ л   │ д   │ ж   │ э є │ / \ ┃      ┃
// ┣━━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┲━━━┷━━━━━┻━━━━━━┫
// ┃          ┃ Я   │ Ч   │ С   │ М   │ И   │ Т   │ Ь   │ Б „ │ Ю “ │ , … ┃                ┃
// ┃  Shift ⇧ ┃ я   │ ч   │ с © │ м   │ и   │ т ™ │ ь µ │ б « │ ю » │ . / ┃     Shift ⇧    ┃
// ┣━━━━━━━┳━━┻━━━━┳┷━━━━━┷┱────┴─────┴─────┴─────┴─────┴─────┴┲━━━━┷━━┳━━┻━━━━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ Meta  ┃  Alt  ┃                Space              ┃AltGr ⇮┃ Menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛
partial alphanumeric_keys
xkb_symbols "ruu" {

    include "ru(common)"
    name[Group1]= "Russian (with Ukrainian-Belorussian layout)";

    key <TLDE> { [  U2019,  apostrophe,         U0301,  asciitilde  ] };  // Apostrophe and Stress symbol
    key <AE01> { [      1,      exclam,      division,       U2248  ] };  // Division Sign and Almost Equal To
    key <AE02> { [      2,    quotedbl,      currency,    infinity  ] };
    key <AE03> { [      3,  numerosign,       section,       U20B4  ] };  // Paragraph and Hryvnia sign
    key <AE04> { [      4,   semicolon,        dollar,    EuroSign  ] };
    key <AE05> { [      5,     percent,        degree,    permille  ] };
    key <AE06> { [      6,       colon,        less, lessthanequal  ] };
    key <AE07> { [      7,    question,  greater, greaterthanequal  ] };
    key <AE08> { [      8,    asterisk,enfilledcircbullet,multiply  ] };
    key <AE09> { [      9,   parenleft,   bracketleft,   braceleft  ] };
    key <AE10> { [      0,  parenright,  bracketright,  braceright  ] };
    key <AE11> { [  minus,  underscore,        emdash,      endash  ] };
    key <AE12> { [  equal,        plus,      notequal,   plusminus  ] };

    key <AD03> { [        Cyrillic_u,        Cyrillic_U, Byelorussian_shortu, Byelorussian_SHORTU ] };
    key <AD04> { [       Cyrillic_ka,       Cyrillic_KA,    registered                        ] };
    key <AD05> { [       Cyrillic_ie,       Cyrillic_IE,   Cyrillic_io,          Cyrillic_IO  ] };
    key <AD07> { [      Cyrillic_ghe,      Cyrillic_GHE, Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };
    key <AD10> { [       Cyrillic_ze,       Cyrillic_ZE,     paragraph                        ] };
    key <AD12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN,  Ukrainian_yi,         Ukrainian_YI  ] };

    key <AC02> { [     Cyrillic_yeru,     Cyrillic_YERU,   Ukrainian_i,          Ukrainian_I  ] };
    key <AC11> { [        Cyrillic_e,        Cyrillic_E,  Ukrainian_ie,         Ukrainian_IE  ] };
    key <BKSL> { [             slash,               bar,     backslash,            brokenbar  ] };

    key <AB03> { [       Cyrillic_es,       Cyrillic_ES,      copyright                       ] };
    key <AB06> { [       Cyrillic_te,       Cyrillic_TE,      trademark                       ] };
    key <AB07> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN,             mu                       ] };
    key <AB08> { [       Cyrillic_be,       Cyrillic_BE,  guillemotleft,  doublelowquotemark  ] };
    key <AB09> { [       Cyrillic_yu,       Cyrillic_YU, guillemotright, leftdoublequotemark  ] };
    key <AB10> { [            period,             comma,          slash,            ellipsis  ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/ru(sun_type6)"
};

// Apple layout
partial alphanumeric_keys
xkb_symbols "mac" {

    include "ru(common)"
    name[Group1]= "Russian (Macintosh)";

    key <LSGT> { [          less,      greater  ] };
    key <AE02> { [             2,     quotedbl  ] };
    key <AE03> { [             3,   numerosign  ] };
    key <AE04> { [             4,      percent  ] };
    key <AE05> { [             5,        colon  ] };
    key <AE06> { [             6,        comma  ] };
    key <AE07> { [             7,       period  ] };
    key <AE08> { [             8,    semicolon  ] };
    key <TLDE> { [  bracketright,  bracketleft  ] };
    key <BKSL> { [   Cyrillic_io,  Cyrillic_IO  ] };

    key <AC06> { [   Cyrillic_er,  Cyrillic_ER, U20BD ] };

    include "level3(ralt_switch)"
};

// eng: Russian-based polyglot and reactionary keyboard layout
// This keyboard layout covers Russian in Petrine 1708 and Bolshevik 1918 variant spelling, Ukrainian, Belorussian, Serbian in its modern and Slavenoserbian variants, and Bulgarian and Slavomacedonian in pre-1945 and post-1945 spelling,
// in short all in any dominion prevailing Cyrillic orthographies of modern secular Slavic literary languages, even with dictionary accentuation marks,
// but also the most-widespread Church Slavonic spellings, that is all Church-Slavonic in so far as variants can be replaced without loss of meaning  – not to speak of Interslavic.
// Furthermore, it suffices Romanian Cyrillic, Moldovan Cyrillic, Abkhazian excluding the more clumsy obsoleted forms unlikely to find devotees, Tajik, all Turkic and Mongolic Cyrillic alphabets
// and virtually all overlooked languages in Cyrillic reigns at least by combining characters, taking advantage of eight key levels.
// This is withal a pan-Cyrillic keyboard layout, or a comprehensive Cyrillic keyboard layout, an universal Cyrillic keyboard layout, a generic Cyrillic keyboard layout.
//
// rus: Многоязыковая и реакціонная клавіатурная разкладка основана на русскихъ
// Сія разкладка покрываетъ русскій въ петровскомъ правописаніи 1708-го года и большевицкомъ 1918-го, украинскій, бѣлорусскій въ современномъ и славяносербскомъ видѣ, и булгарскій и славомацедонскій въ писаніи до и послѣ 1945-го года,
// короче всѣ въ какомъ-либо державствѣ преобладающія правописанія, то есть весь церкославянскій, поскольку какъ разные виды буквъ можно возмѣщать безъ потери значенія — не говоря о междуславянскомъ.
// Свѣрхъ этого, она подходитъ къ румынской кириллицѣ, къ молдавской кириллицѣ, къ абхазскому за изключеніемъ неуклюжихъ устарѣлыхъ образовъ, у которыхъ невѣроятно что они вообще найдутъ поклонниковъ, къ таджикскому, къ всѣмъ тюрксимъ и монголскимъ кириллицамъ,
// и по сути дѣла всѣмъ упущеннымъ языкамъ въ кириллическихъ правленіяхъ хотя бы соединящими сѵмволами, извлѣкая выгоду изъ восьми уровней клавишъ.
// Тѣмъ всѣмъ сё всекириллическая клавіатурная разкладка, или всеобъемлющая кириллическая разкладка, или универсальная кириллическая разкладка клавіатуры.
//
// srp: Многојезиков и реакционаран распоред тастера основан на рускима
// Овај распоред покрива руски у петровском правопису 1708-е године и бољшевичком 1918-е године, украјински, белоруски, српски у сувременом и славеносрпском виду, те бугарски и славомакедонски у писању до и после 1945-е године,
// укратко све у некој држави преовлађујуће правописе, то је читав црквенословенски, пошто је могуће разне видове слова замењивати без губитка значења — не говорећи о меџусловенском.
// Поврх овог, он одговара к румунској ћирилици, к молдавској ћирилици, к абхаскоме с изузетком гломазних застарелих ликова, уз које није вероватно да они најђу поклонике, к таџичкоме, к свим туркијским и монголским ћирилицима,
// те у спровођењу свим испуштеним језицима у ћириличким господарствима бар са спајајућим симболима, искориштавајући осам ступњева тастера.
// Тиме свим ово је свећирилички тастатуран распоред, или свеобухватан ћирилички распоред тастера, или свеопшти ћирилички тастатуран распоред.
partial alphanumeric_keys
xkb_symbols "prxn" {

	name[Group1]= "Russian (Polyglot and Reactionary)";

	key.type[Group1]="EIGHT_LEVEL";
    key <TLDE> { [ U2019, apostrophe,  U0301,      U0300, U2053, U2015, U02BC, asciitilde ] }; // Typographic Apostrophe, Apostrophe, Combining Acute, Combining Grave, Swung Dash, Quotation Dash, Modifier Letter Apostrophe, Tilde
    key <AE01> { [      1,    exclam,  U0304,      U0306, U0308, U0311, U0307, U0313 ] };      // 1, !, Combining Macron, Combining Breve, Combining Diaresis, Combining Inverted Breve, Combining Dot Above, Combining Comma Above
    key <AE02> { [     2,quotedbl,numerosign,      U20BF, U20B8, U20AE, U00A3, U20B9 ] };      // 2 " № ₿ ₸ ₮ £ ₹
    key <AE03> { [     3,    section,  U20B4,   currency, U20BD, U20AA, U20BC, U20BE ] };      // 3 § ₴ ¤ ₽ ₪ ₼ ₾
    key <AE04> { [     4,  semicolon, dollar,   EuroSign, U0482, U20DD, U0488, U0489 ] };      // 4 ; $ € Thousands Sign, Combining Enclosing Circle, Combining Hundred Thousands, Combining Millions
    key <AE05> { [      5,   percent, degree,   permille, UA670, UA671, UA672, UA66F ] };      // 5, %, °, ‰, Combinining Ten Millions, Combining Hundred Millions, Combining Thousand Millions, Combining Vzmet
    key <AE06> { [      6,     colon,  U0335,      U0336, U0483, U0487, UFE2E, UFE2F ] };      // 6, :, Combining Short Stroke Overlay, Combining Long Stroke Overlay, Combining Titlo, Combining Pokrytie, Combining Titlo Left Half, Combining Titlo Right Half
    key <AE07> { [    7,    question,  U030B,      U030F, U030C, U0303, U032C, U0360 ] };      // 7, ?, Combining Double Acute, Combining Double Grave, Combining Caron/Háček, Combining Tilde, Combining Caron/Háček Below, Combining Double Tilde
    key <AE08> { [    8,    asterisk,  U0331,      U0332, U0333, U032F, U032D, U032E ] };      // 8, *, Combining Macron Below, Combining Low Line, Combining Double Low Line, Combining Inverted Breve Below, Combining Circumflex Accent, Combining Breve Below
    key <AE09> { [ 9,parenleft,  bracketleft,  braceleft, U035F, U035D, U035E, U035C ] };      // 9 ( [ { Combining Double Macron Below, Combining Double Breve, Combining Double Macron, Combining Double Breve Below
    key <AE10> { [ 0,parenright,bracketright, braceright, U27E8, U27E9, U04A7, U04A6 ] };      // 0 ) ] } ⟨⟩ ҧ Ҧ
    key <AE11> { [ minus, underscore, emdash,     endash, U2011,hyphen, U2010, U2212 ] };      // Hyphen-Minus, Underscore, Em Dash, En Dash,  Non-Breaking-Hyphen, Soft Hyphen, Hyphen, Minus Sign
    key <AE12> { [  equal,     plus,notequal,      U2248, U04FF, U04FE, U050D, U050C ] };      // = + ≠ ≈ ӿ Ӿ ԍ Ԍ

    key <AD01> { [ Cyrillic_shorti,   Cyrillic_SHORTI,                 Cyrillic_je,            Cyrillic_JE,     U04CF,    U04C0,                                  U030A,    U0325 ] };	                             // й Й ј Ј ӏ Ӏ, Combining Ring Above and Below
    key <AD02> { [      Cyrillic_tse,    Cyrillic_TSE,                       U04B5,                  U04B4,     Cyrillic_u_straight, Cyrillic_U_straight,         U051B,    U051A ] };                               // ц Ц ҵ Ҵ ү Ү ԛ Ԛ
    key <AD03> { [        Cyrillic_u,      Cyrillic_U,         Byelorussian_shortu,    Byelorussian_SHORTU,     Cyrillic_u_straight_bar,Cyrillic_U_straight_bar,  Byelorussian_shortu, Byelorussian_SHORTU ] };      // у У ў Ў ұ Ұ ў Ў
    key <AD04> { [       Cyrillic_ka,     Cyrillic_KA,       Cyrillic_ka_descender,  Cyrillic_KA_descender,     U049F,    U049E,                                  U046F,    U046E ] };                               // к К Қ қ ҟ Ҟ ѯ Ѯ 
    key <AD05> { [     Cyrillic_ie,       Cyrillic_IE,                 Cyrillic_io,            Cyrillic_IO,     U0463,    U0462,                                  UA653,    UA652 ] };	                             // е Е ё Ё ѣ Ѣ ꙓ Ꙓ
    key <AD06> { [     Cyrillic_en,       Cyrillic_EN,                Cyrillic_nje,           Cyrillic_NJE,     Cyrillic_en_descender, Cyrillic_EN_descender,     U04C8,    U04C7 ] };	                             // н Н њ Њ ң Ң ӈ Ӈ
    key <AD07> { [      Cyrillic_ghe,    Cyrillic_GHE, Ukrainian_ghe_with_upturn,Ukrainian_GHE_WITH_UPTURN,     Cyrillic_ghe_bar, Cyrillic_GHE_bar,               U04F7,    U04F6 ] };                               // г Г Ґ ґ ғ Ғ ӷ Ӷ
    key <AD08> { [      Cyrillic_sha,    Cyrillic_SHA,                       U04A1,                  U04A0,     U04AB,    U04AA,                                  UA67D,    UA67F ] };                               // ш Ш ҡ Ҡ ҫ Ҫ Combining Payerok Payerok
    key <AD09> { [    Cyrillic_shcha,  Cyrillic_SHCHA,                       U0505,                  U0504,     UA68D,    UA68C,                                  U050F,    U050E ] };                               // щ Щ ԅ Ԅ ꚍ Ꚍ ԏ Ԏ
    key <AD10> { [       Cyrillic_ze,     Cyrillic_ZE,                       U04E1,                  U04E0,     U0499,    U0498,                                  U0507,    U0506 ] };                               // з З ӡ Ӡ ҙ Ҙ ԇ Ԇ
    key <AD11> { [       Cyrillic_ha,     Cyrillic_HA,               Cyrillic_shha,          Cyrillic_SHHA,     Cyrillic_ha_descender, Cyrillic_HA_descender,     U04FD,    U04FC ] };                               // х Х һ Һ ҳ Ҳ ӽ Ӽ
    key <AD12> { [Cyrillic_hardsign,Cyrillic_HARDSIGN,                Ukrainian_yi,           Ukrainian_YI,     Macedonia_dse, Macedonia_DSE,                     U033E,    U2E2F ] };	                             // ъ Ъ ї Ї ѕ Ѕ, Combining Yerok, Yerok

    key <AC01> { [      Cyrillic_ef,      Cyrillic_EF,                       U0473,                  U0472,     U04C4,    U04C3,                                  U04FB,    U04FA ] };	                             // ф Ф ѳ Ѳ ӄ Ӄ ӻ Ӻ
    key <AC02> { [     Cyrillic_yeru,   Cyrillic_YERU,                 Ukrainian_i,            Ukrainian_I,     U04D5,    U04D4,                                  U04A9,    U04A8 ] };	                             // ы Ы і І ӕ Ӕ ҩ Ҩ
    key	<AC03> { [     Cyrillic_ve,       Cyrillic_VE,                       U051D,                  U051C,     U0529,    U0528,                                  U0527,    U0526 ] };                               // в В ԝ Ԝ ԩ Ԩ ԧ Ԧ
    key <AC04> { [        Cyrillic_a,      Cyrillic_A,              Cyrillic_schwa,         Cyrillic_SCHWA,     UA657,    UA656,                                  UA655,    UA654 ] };                               // а А ә Ә ꙗ Ꙗ ꙕ Ꙕ
    key <AC05> { [       Cyrillic_pe,     Cyrillic_PE,                       U0525,                  U0524,     U0471,    U0470,                                  UA65F,    UA65E ] };                               // п П ԥ Ԥ ѱ Ѱ ꙟ Ꙟ
    key <AC06> { [       Cyrillic_er,     Cyrillic_ER,                       U0481,                  U0480,     U048F,    U048E,                                  U0521,    U0520 ] };                               // р Р ҁ Ҁ ҏ Ҏ ԡ Ԡ
    key <AC07> { [        Cyrillic_o,      Cyrillic_O,              Cyrillic_o_bar,         Cyrillic_O_bar,     U047B,    U047A,                                  U0461,    U0460 ] };                               // о О ө Ө ѻ Ѻ ѡ Ѡ
    key <AC08> { [     Cyrillic_el,       Cyrillic_EL,                Cyrillic_lje,           Cyrillic_LJE,     U04C6,    U04C5,                                  U052F,    U052E ] };	                             // л Л љ Љ ӆ Ӆ ԯ Ԯ
    key <AC09> { [     Cyrillic_de,       Cyrillic_DE,               Cyrillic_dzhe,          Cyrillic_DZHE,     U04BD,    U04BC,                                  U04BF,    U04BE ] };	                             // д Д џ Џ ҽ Ҽ ҿ Ҿ
    key <AC10> { [    Cyrillic_zhe,      Cyrillic_ZHE,                 Serbian_dje,            Serbian_DJE,     Cyrillic_zhe_descender, Cyrillic_ZHE_descender,   U04C2,    U04C1 ] };	                             // ж Ж ђ Ђ Җ җ ӂ Ӂ
    key <AC11> { [      Cyrillic_e,        Cyrillic_E,                Ukrainian_ie,           Ukrainian_IE,     U0465,    U0464,                                  U04CA,    U04C9 ] };                               // э Э є Є ѥ Ѥ ӊ Ӊ
    key <BKSL> { [           slash,               bar,                   backslash,                  U260E,     UA65B,    UA65A,                                  U0513,    U0512 ] };                               // / | \ ☎ ꙛ Ꙛ ԓ Ԓ

    key <LSGT> { [           U0495,             U0494,                       U0501,                  U0500,     U0503,    U0502,                                  U0509,    U0508 ] };                               // ҕ Ҕ ԁ Ԁ ԃ Ԃ ԉ Ԉ
    key <AB01> { [     Cyrillic_ya,       Cyrillic_YA,                       U0469,                  U0468,     U0467,    U0466,                                  UA657,    UA656 ] };                               // я Я ѩ Ѩ ѧ Ѧ ꙗ Ꙗ
    key <AB02> { [    Cyrillic_che,      Cyrillic_CHE,                Serbian_tshe,           Serbian_TSHE,     Cyrillic_che_descender,  Cyrillic_CHE_descender,  U2016,    U00A6 ] };	                             // ч Ч ћ Ћ ҷ Ҷ ‖ ¦
    key <AB03> { [      Cyrillic_es,      Cyrillic_ES,                       U046D,                  U046C,     U046B,    U046A,                                  U04F7,    U04F6 ] };                               // с С ѭ Ѭ ѫ Ѫ ӷ Ӷ
    key <AB04> { [       Cyrillic_em,     Cyrillic_EM,                    multiply,               division,     U22C5,    U2219,                                  U04CE,    U04CD ] };                               // м М × ÷ ⋅ ∙ ӎ Ӎ
    key <AB05> { [      Cyrillic_i,        Cyrillic_I,                       U0475,                  U0474,     U048B,    U048A,                         periodcentered,    U261B ] };    	                     // и И ѵ Ѵ ҋ Ҋ · ☛
    key <AB06> { [      Cyrillic_te,      Cyrillic_TE,                       U04AD,                  U04AC,     U051F,    U051E, Cyrillic_che_vertstroke, Cyrillic_CHE_vertstroke ] };                               // т Т ҭ Ҭ ԟ Ԟ ҹ Ҹ
    key <AB07> { [Cyrillic_softsign,Cyrillic_SOFTSIGN,                       U04A5,                  U04A4,     UA64F,    UA64E,                                  U048D,    U048C ] };                               // ь Ь ҥ Ҥ ꙏ Ꙏ ҍ Ҍ
    key <AB08> { [       Cyrillic_be,     Cyrillic_BE,                  guillemotleft,  doublelowquotemark,     singlelowquotemark, U2039,                        U0523,    U0522 ] };	                             // б Б « „ ‚ ‹ ԣ Ԣ
    key <AB09> { [       Cyrillic_yu,     Cyrillic_YU,                 guillemotright, leftdoublequotemark,     leftsinglequotemark, U203A,                       rightdoublequotemark, rightsinglequotemark]};      // ю Ю » “ ‘ › ” ’
    key <AB10> { [            period,           comma,                       ellipsis,  enfilledcircbullet,     U04CC,    U04CB,                                  UA649,    UA648 ] };                               // . , … • ӌ Ӌ ꙉ  Ꙉ

// eng: Maps Right Alt for reaching the third level
// rus: Составляетъ правую Alt для достиженія третьяго уровня
// srp: Саставља десни Alt за достизање трећег ступња
	include "level3(ralt_switch)"

// eng: Maps <CAPS> for reaching the fifth level
// rus: Составляетъ <CAPS> для достиженія пятаго уровня
// srp: Саставља <CAPS> за достизање петег ступња

	include "level5(caps_switch)"

// eng: Offers pressing both shift keys for capslock
// rus: Предоставляетъ нажатие обѣихъ клавишъ Shift для защелкиванія прописности буквъ
// srp: Ставља на располагање притискивање обију тастера Shift за учвршћивање верзала
	include "shift(both_shiftlock)"

// eng: Makes <KPDL> return comma instead of dot, as the comma is decimal separator in Cyrillic written languages
// rus: Дѣлаетъ что <KPDL> отдаетъ запятую вмѣсто точки, такъ какъ запятая десятичный раздѣлитель въ языкахъ пишемыхъ кириллицей
// srp: Ради да <KPDL> враћа зарез уместо точке, будући да зарез је десетни разделитељ у језицима који се пишу ћирилицом
	include "kpdl(comma)"

// eng: Bug notice: One has to set lv5:rwin_switch_lock or one of the other level 5 locks for the caps switch to work!
// rus: Приходится ставить lv5:rwin_switch_lock либо одинъ изъ другихъ затворовъ пятаго уровня, чтобы работалъ переключатель Caps!
// srp: Потребно да се ставља lv5:rwin_switch_lock или једна из других брава петег ступња, да би шљакао пребацивач Caps!
// https://bugs.freedesktop.org/show_bug.cgi?id=102189
};


partial alphanumeric_keys
xkb_symbols "unipunct" {

// Раскладка представляет собой обычную русскую раскладку, в которой некоторые редко используемые буквы
// убрали на третий уровень, и поставили все пунктуационные знаки на то же место, где они стоят на
// US раскладке (+ добавлен знак номера, который отсутствует в US раскладке, но часто нужен в RU).

// ru(unipunct):
// `~ 1! 2@ 3#3№ 4$ 5% 6^ 7& 8* 9( 0) -_ =+
// хХ бБ уУюЮ кК еЕэЭ нН гГ шШщЩ жЖ зЗ [{ ]} \|
// фФ ыЫ вВ аА пП рР оОёЁ лЛ дД ;: '"           //"
// яЯ чЧцЦ сС мМ иИйЙ тТ ьЬъЪ ,< .> /?

 include "us(basic)"
 name[Group1]= "Russian (with US punctuation)";
 
 // Единственный символ, который отсутствует на US раскладке - №
 key <AE03> { [ 3,             numbersign, 3, numerosign  ] };

 key <LatQ> { [ Cyrillic_ha,   Cyrillic_HA ] };
 key <LatW> { [ Cyrillic_be,   Cyrillic_BE ] };
 key <LatE> { [ Cyrillic_u,    Cyrillic_U, Cyrillic_yu, Cyrillic_YU ] };
 key <LatR> { [ Cyrillic_ka,   Cyrillic_KA ] };
 key <LatT> { [ Cyrillic_ie,   Cyrillic_IE, Cyrillic_e, Cyrillic_E ] };
 key <LatY> { [ Cyrillic_en,   Cyrillic_EN ] };
 key <LatU> { [ Cyrillic_ghe,  Cyrillic_GHE ] };
 key <LatI> { [ Cyrillic_sha,  Cyrillic_SHA, Cyrillic_shcha, Cyrillic_SHCHA ] };
 key <LatO> { [ Cyrillic_zhe,  Cyrillic_ZHE ] };
 key <LatP> { [ Cyrillic_ze,   Cyrillic_ZE ] };

 key <LatA> { [ Cyrillic_ef,   Cyrillic_EF ] };
 key <LatS> { [ Cyrillic_yeru, Cyrillic_YERU ] };
 key <LatD> { [ Cyrillic_ve,   Cyrillic_VE ] };
 key <LatF> { [ Cyrillic_a,    Cyrillic_A ] };
 key <LatG> { [ Cyrillic_pe,   Cyrillic_PE ] };
 key <LatH> { [ Cyrillic_er,   Cyrillic_ER ] };
 key <LatJ> { [ Cyrillic_o,    Cyrillic_O, Cyrillic_io, Cyrillic_IO ] };
 key <LatK> { [ Cyrillic_el,   Cyrillic_EL ] };
 key <LatL> { [ Cyrillic_de,   Cyrillic_DE ] };

 key <LatZ> { [ Cyrillic_ya,   Cyrillic_YA ] };
 key <LatX> { [ Cyrillic_che,  Cyrillic_CHE, Cyrillic_tse, Cyrillic_TSE ] };
 key <LatC> { [ Cyrillic_es,   Cyrillic_ES ] };
 key <LatV> { [ Cyrillic_em,   Cyrillic_EM ] };
 key <LatB> { [ Cyrillic_i,    Cyrillic_I, Cyrillic_shorti, Cyrillic_SHORTI ] };
 key <LatN> { [ Cyrillic_te,   Cyrillic_TE ] };
 key <LatM> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN, Cyrillic_hardsign, Cyrillic_HARDSIGN ] };
};

partial alphanumeric_keys
xkb_symbols "phonetic_mac" {

    include "ru(phonetic_winkeys)"
    name[Group1]= "Russian (phonetic Macintosh)";

    key <LatE> { [       Cyrillic_ie,       Cyrillic_IE, Cyrillic_io, Cyrillic_IO  ] };
    key <LatW> { [      Cyrillic_sha,      Cyrillic_SHA  ] };
    key <LatV> { [       Cyrillic_ve,       Cyrillic_VE  ] };
    key <TLDE> { [    Cyrillic_shcha,    Cyrillic_SHCHA  ] };
    key <AD11> { [       Cyrillic_yu,       Cyrillic_YU  ] };
    key <AD12> { [      Cyrillic_zhe,      Cyrillic_ZHE  ] };
    key <AE03> { [                 3,        numbersign, numerosign  ] };
    key <AE04> { [                 4,            dollar, U20BD       ] }; // ruble
    key <AE05> { [                 5,           percent  ] };
    key <AE06> { [                 6,             caret  ] };
    key <AE11> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN, minus,       underscore  ] };
    key <AE12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN, equal,       plus        ] };

    include "level3(ralt_switch)"
};
// Tamazight en caractères latin 
// Noureddine LOUAHEDJ
// louahedj@noureddine.me

//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ³ ¸ │ 1 ̨  │ 2 É │ 3 ˘ │ 4 — │ 5 – │ 6 ‑ │ 7 È │ 8 ™ │ 9 Ç │ 0 À │ ° ≠ │ + ± ┃ ⌫ Retour┃
// │ ² ¹ │ & ˇ │ é ~ │ " # │ ' { │ ( [ │ - | │ è ` │ _ \ │ ç ^ │ à @ │ ) ] │ = } ┃  arrière┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ A Æ │ Z Â │ E ¢ │ R Ṛ │ T Ṭ │ Y Ÿ │ U Û │ I Î │ O Ɛ │ P Ô │ ¨ ˚ │ £ Ø ┃Entrée ┃
// ┃Tab ↹  ┃ a æ │ z â │ e € │ r ṛ │ t ṭ │ y ÿ │ u û │ i î │ o ɛ │ p ô │ ^ ~ │ $ ø ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ Q Ä │ S Ṣ │ D Ḍ │ F ‚ │ G Ǧ │ H Ḥ │ J Ü │ K Ï │ L Ŀ │ M Ö │ % Ù │ µ ̄  ┃      ┃
// ┃Maj ⇬   ┃ q ä │ s ṣ │ d ḍ │ f ‘ │ g ǧ │ h ḥ │ j ü │ k ï │ l ŀ │ m ö │ ù ' │ * ` ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ > ≥ │ W “ │ X ” │ C Č │ V Ɣ │ B ↑ │ N → │ ? … │ . . │ / ∕ │ § − ┃             ┃
// ┃Shift ⇧┃ < ≤ │ w « │ x » │ c č │ v ɣ │ b ↓ │ n ¬ │ , ¿ │ ; × │ : ÷ │ ! ¡ ┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣         Espace fine insécable ⍽ ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣ Espace       Espace insécable ⍽ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛


default partial alphanumeric_keys
xkb_symbols "la" {

    include "fr(oss)"

    name[Group1]="Berber (Algeria, Latin)";    

    key <AD02>  { [ z,  Z,  0x1001E93,  0x1001E92   ] }; // z Z ẓ Ẓ
    key <AD04>  { [ r,  R,  0x1001E5B,  0x1001E5A   ] }; // r R ṛ Ṛ
    key <AD05>  { [ t,  T,  0x1001E6D,  0x1001E6C   ] }; // t T ṭ Ṭ
    key <AD09>  { [ o,  O,  0x100025B,  0x1000190   ] }; // o O ɛ Ɛ
    key <AC02>  { [ s,  S,  0x1001E63,  0x1001E62   ] }; // s s ṣ Ṣ
    key <AC03>  { [ d,  D,  0x1001E0D,  0x1001E0C   ] }; // d D ḍ Ḍ
    key <AC05>  { [ g,  G,  0x10001E7,  0x10001E6   ] }; // g G ǧ Ǧ
    key <AC06>  { [ h,  H,  0x1001E25,  0x1001E24   ] }; // h H ḥ Ḥ
    key <AB03>  { [ c,  C,  0x100010D,  0x100010C   ] }; // c C č Č
    key <AB04>  { [ v,  V,  0x1000263,  0x1000194   ] }; // v V ɣ Ɣ
 
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "azerty-deadkeys" {
     // Kabyle keyboard with dead keys    
     // 2020 by Louis Gostiaux <louis.gostiaux@free.fr>

    include "fr"

    name[Group1]= "Kabyle (azerty layout with dead keys)";

    key <AD01>	{ [     a,       A,     U025B, U0190  ]}; // a A ɛ Ɛ
    key <AD02>  { [ 	z,  	 Z,  	U2D63 	      ] }; // ⵣ
    key <AC01>	{ [     q,       Q,     U0263, U0194  ] }; // q Q ɣ Ɣ
    key <AB01>  { [ 	w,  	 W,  	U02B7 	      ] }; // ʷ
    key <AB08>  { [ semicolon,  period,  dead_belowdot,  dead_caron] }; 
    		  // dead-below dot for ḍ,ṭ,ẓ,ḥ and dead-caron for č and ǧ  

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "qwerty-gb-deadkeys" {
     // Kabyle keyboard, uk international with dead keys     
     // 2020 by Louis Gostiaux <louis.gostiaux@free.fr>

    include "gb(intl)"

    name[Group1]= "Kabyle (qwerty-gb layout with dead keys)";

    key <AC01>	{ [     a,       A,     U025B, U0190  ]}; // a A ɛ Ɛ
    key <AD01>	{ [     q,       Q,     U0263, U0194  ] }; // q Q ɣ Ɣ
    key <AB01>  { [ 	z,  	 Z,  	U2D63 	      ] }; // ⵣ
    key <AD02>  { [ 	w,  	 W,  	U02B7 	      ] }; // ʷ
    key <AB09>  { [  period,	greater	,  dead_belowdot,  dead_caron] }; 

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "qwerty-us-deadkeys" {
     // Kabyle keyboard, us international with dead keys     
     // 2020 by Louis Gostiaux <louis.gostiaux@free.fr>

    include "us(intl)"

    name[Group1]= "Kabyle (qwerty-us layout with dead keys)";

    key <AC01>	{ [     a,       A,     U025B, U0190  ]	}; // a A ɛ Ɛ
    key <AD01>	{ [     q,       Q,     U0263, U0194  ] }; // q Q ɣ Ɣ
    key <AB01>  { [ 	z,  	 Z,  	U2D63 	      ] }; // ⵣ
    key <AD02>  { [ 	w,  	 W,  	U02B7 	      ] }; // ʷ
    key <AB09>  { [  period,	greater	,  dead_belowdot,  dead_caron] }; 

    include "level3(ralt_switch)"
};


//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │     │ 1 ̨  │ 2   │ 3   │ 4   │ 5   │ 6   │ 7   │ 8   │ 9   │ 0   │ °   │ +   ┃ ⌫ Retour┃
// │ ²   │ &   │   ~ │ " # │ ' { │ ( [ │ - | │     │ _ \ │   ^ │   @ │ ) ] │ = } ┃  arrière┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃     │ ⵥ      │ ⵦ      │ ⵕ      │ ⵟ      │     │     │     │ ⵧ       │     │     │ £ Ø ┃Entrée ┃
// ┃Tab ↹  ┃ ⴰ        │ ⵣ  ⵤ  │ ⴻ       │ ⵔ      │ ⵜ   ⵝ │ ⵢ       │ ⵓ        │ ⵉ      │ ⵄ       │ ⵃ       │ ⵯ       │ $ ø ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ ⵈ      │ ⵚ      │ ⴹ  ⴺ │     │ ⴵ  ⴶ  │ ⵁ      │ ⵋ      │ ⴿ      │     │     │ % Ù │ µ ̄¯ ┃      ┃
// ┃Maj ⇬   ┃ ⵇ      │ ⵙ      │ ⴷ  ⴸ │ ⴼ       │ ⴳ  ⴴ │ ⵀ   ⵂ  │ ⵊ  ⵌ │ ⴽ   ⴾ │ ⵍ      │ ⵎ       │ ù ´ │ * ` ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ > ¦ │     │ ⵆ       │ ⵞ      │ ⵗ    ⵠ │ ⴲ      │ ⵐ      │ ? … │ . ⋅ │ / ∕ │ § − ┃             ┃
// ┃Shift ⇧┃ < | │ ⵡ      │ ⵅ       │ ⵛ     │ ⵖ   ⵘ │ ⴱ  ⵒ  │ ⵏ    ⵑ   │ , ¿ │ ; × │ : ÷ │ ! ¡ ┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣                                 ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣ Espace                          ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "ber" {

    name[Group1]="Berber (Algeria, Tifinagh)";

    // First row
    key <TLDE>  { [ twosuperior,    threesuperior,  onesuperior,    dead_cedilla    ] }; // ² ³ ¹ ¸
    key <AE01>  { [ ampersand,  1,  dead_caron, dead_ogonek ] }; // & 1 ˇ ̨
    key <AE02>  { [ eacute, 2,  asciitilde, Eacute  ] }; // é 2 ~ É
    key <AE03>  { [ quotedbl,   3,  numbersign, dead_breve  ] }; // " 3 # ˘
    key <AE04>  { [ apostrophe, 4,  braceleft,  0x1002014   ] }; // ' 4 { — (tiret cadratin)
    key <AE05>  { [ parenleft,  5,  bracketleft,    0x1002013   ] }; // ( 5 [ – (tiret demi-cadratin)
    key <AE06>  { [ minus,  6,  bar,    0x1002011   ] }; // - 6 | ‑ (tiret insécable)
    key <AE07>  { [ egrave, 7,  grave,  Egrave  ] }; // è 7 ` È
    key <AE08>  { [ underscore, 8,  backslash,  trademark   ] }; // _ 8 \ ™
    key <AE09>  { [ ccedilla,   9,  asciicircum,    Ccedilla    ] }; // ç 9 ^ Ç
    key <AE10>  { [ agrave, 0,  at, Agrave  ] }; // à 0 @ À
    key <AE11>  { [ parenright, degree, bracketright,   notequal    ] }; // ) ° ] ≠
    key <AE12>  { [ equal,  plus,   braceright, plusminus   ] }; // = + } ±

    // Second row
    key <AD01>  { [ 0x1002D30   ] }; // ⴰ
    key <AD02>  { [ 0x1002D63,  0x1002D65,  0x1002D64   ] }; // ⵣ ⵥ ⵤ 
    key <AD03>  { [ 0x1002D3B,  0x1002D66   ] }; // ⴻ ⵦ
    key <AD04>  { [ 0x1002D54,  0x1002D55 ] }; // ⵔ ⵕ
    key <AD05>  { [ 0x1002D5C,  0x1002D5F,  0x1002D5D   ] }; // ⵜ ⵟ ⵝ
    key <AD06>  { [ 0x1002D62   ] }; // ⵢ
    key <AD07>  { [ 0x1002D53   ] }; // ⵓ 
    key <AD08>  { [ 0x1002D49   ] }; // ⵉ
    key <AD09>  { [ 0x1002D44,  0x1002D67   ] }; // ⵄ ⵧ
    key <AD10>  { [ 0x1002D43   ] }; // ⵃ
    key <AD11>  { [ 0x1002D6F   ] }; // ⵯ
    key <AD12>  { [ dollar, sterling,   oslash, Ooblique ] }; // $ £ ø Ø

    // Third row
    key <AC01>  { [ 0x1002D47,  0x1002D48   ] }; // ⵇ ⵈ 
    key <AC02>  { [ 0x1002D59,  0x1002D5A   ] }; // ⵙ ⵚ
    key <AC03>  { [ 0x1002D37,  0x1002D39,  0x1002D38,  0x1002D3A   ] }; // ⴷ ⴹ ⴸ ⴺ
    key <AC04>  { [ 0x1002D3C   ] }; // ⴼ
    key <AC05>  { [ 0x1002D33,  0x1002D35, 0x1002D34,   0x1002D36   ] }; // ⴳ ⴵ ⴴ ⴶ
    key <AC06>  { [ 0x1002D40,  0x1002D41,  0x1002D42   ] }; // ⵀ ⵁ ⵂ 
    key <AC07>  { [ 0x1002D4A,  0x1002D4B,  0x1002D4C   ] }; // ⵊ ⵋ ⵌ Ü
    key <AC08>  { [ 0x1002D3D,  0x1002D3F,  0x1002D3E   ] }; // ⴽ ⴿ ⴾ 
    key <AC09>  { [ 0x1002D4D   ] }; // ⵍ 
    key <AC10>  { [ 0x1002D4E   ] }; // ⵎ 
    key <AC11>  { [ ugrave, percent,    dead_acute, Ugrave  ] }; // ù % ' Ù
    key <BKSL>  { [ asterisk,   mu, dead_grave, dead_macron ] }; // * µ ` ̄

    // Fourth row
    key <LSGT>  { [ less,   greater,    lessthanequal,  greaterthanequal    ] }; // < > ≤ ≥
    key <AB01>  { [ 0x1002D61   ] }; // ⵡ
    key <AB02>  { [ 0x1002D45,  0x1002D46   ] }; // ⵅ ⵆ
    key <AB03>  { [ 0x1002D5B,  0x1002D5E   ] }; // ⵛ ⵞ
    key <AB04>  { [ 0x1002D56,  0x1002D57,  0x1002D58,  0x1002D60   ] }; // ⵖ ⵗ ⵘ ⵠ
    key <AB05>  { [ 0x1002D31,  0x1002D32,  0x1002D52   ] }; // ⴱ ⴲ ⵒ
    key <AB06>  { [ 0x1002D4F,  0x1002D50,  0x1002D51   ] }; // ⵏ ⵐ ⵑ
    key <AB07>  { [ comma,  question,   questiondown,   0x1002026   ] }; // , ? ¿ …
    key <AB08>  { [ semicolon,  period, multiply,   0x10022C5   ] }; // ; . × ⋅
    key <AB09>  { [ colon,  slash,  division,   0x1002215   ] }; // : / ÷ ∕
    key <AB10>  { [ exclam, section,    exclamdown, 0x1002212   ] }; // ! § ¡ −

    include "level3(ralt_switch)"
};

// Arabic AZERTY with modern Latin digits 
partial alphanumeric_keys
xkb_symbols "ar" {
    include "ara(azerty)"

    name[Group1]="Arabic (Algeria)";
};
default  hidden partial keypad_keys
xkb_symbols "x11" {

    include "keypad(operators)"

    key  <KP7> {	[  KP_Home,	KP_7	]	};
    key  <KP8> {	[  KP_Up,	KP_8	]	};
    key  <KP9> {	[  KP_Prior,	KP_9	]	};

    key  <KP4> {	[  KP_Left,	KP_4	]	};
    key  <KP5> {	[  KP_Begin,	KP_5	]	};
    key  <KP6> {	[  KP_Right,	KP_6	]	};

    key  <KP1> {	[  KP_End,	KP_1	]	};
    key  <KP2> {	[  KP_Down,	KP_2	]	};
    key  <KP3> {	[  KP_Next,	KP_3	]	};
    key <KPEN> {	[	KP_Enter	]	};
    key <KPEQ> {	[	KP_Equal	]	};

    key  <KP0> {	[  KP_Insert,	KP_0	]	};
    key <KPDL> {	[  KP_Delete,	KP_Decimal ]	};
    key <KPPT> {	[  KP_Decimal,	KP_Decimal ]	};
};

hidden partial keypad_keys
xkb_symbols "overlay" {
    include "keypad(overlay1)"
};

hidden partial keypad_keys
xkb_symbols "overlay1" {

    key  <KP7> {	[  KP_Home	],	overlay1=<KO7>	};
    key  <KP8> {	[  KP_Up	],	overlay1=<KO8>	};
    key  <KP9> {	[  KP_Prior	],	overlay1=<KO9>	};

    key  <KP4> {	[  KP_Left	],	overlay1=<KO4>	};
    key  <KP5> {	[  KP_Begin	],	overlay1=<KO5>	};
    key  <KP6> {	[  KP_Right	],	overlay1=<KO6>	};

    key  <KP1> {	[  KP_End	],	overlay1=<KO1>	};
    key  <KP2> {	[  KP_Down	],	overlay1=<KO2>	};
    key  <KP3> {	[  KP_Next	],	overlay1=<KO3>	};

    key  <KP0> {	[  KP_Insert	],	overlay1=<KO0>	};
    key <KPDL> {	[  KP_Delete	],	overlay1=<KODL>	};

    key  <KO7> {	[  KP_7	]	};
    key  <KO8> {	[  KP_8	]	};
    key  <KO9> {	[  KP_9	]	};

    key  <KO4> {	[  KP_4	]	};
    key  <KO5> {	[  KP_5	]	};
    key  <KO6> {	[  KP_6	]	};

    key  <KO1> {	[  KP_1	]	};
    key  <KO2> {	[  KP_2	]	};
    key  <KO3> {	[  KP_3	]	};

    key  <KO0> {	[  KP_0	]	};
    key <KODL> {	[  KP_Decimal ]	};
};

hidden partial keypad_keys
xkb_symbols "overlay2" {

    key  <KP7> {	[  KP_Home	],	overlay2=<KO7>	};
    key  <KP8> {	[  KP_Up	],	overlay2=<KO8>	};
    key  <KP9> {	[  KP_Prior	],	overlay2=<KO9>	};

    key  <KP4> {	[  KP_Left	],	overlay2=<KO4>	};
    key  <KP5> {	[  KP_Begin	],	overlay2=<KO5>	};
    key  <KP6> {	[  KP_Right	],	overlay2=<KO6>	};

    key  <KP1> {	[  KP_End	],	overlay2=<KO1>	};
    key  <KP2> {	[  KP_Down	],	overlay2=<KO2>	};
    key  <KP3> {	[  KP_Next	],	overlay2=<KO3>	};

    key  <KP0> {	[  KP_Insert	],	overlay2=<KO0>	};
    key <KPDL> {	[  KP_Delete	],	overlay2=<KODL>	};

    key  <KO7> {	[  KP_7	]	};
    key  <KO8> {	[  KP_8	]	};
    key  <KO9> {	[  KP_9	]	};

    key  <KO4> {	[  KP_4	]	};
    key  <KO5> {	[  KP_5	]	};
    key  <KO6> {	[  KP_6	]	};

    key  <KO1> {	[  KP_1	]	};
    key  <KO2> {	[  KP_2	]	};
    key  <KO3> {	[  KP_3	]	};

    key  <KO0> {	[  KP_0	]	};
    key <KODL> {	[  KP_Decimal ]	};
};

hidden partial keypad_keys
xkb_symbols "operators" {
    // Puts some commands to control the X server on
    // the fifth level of the keypad's operator keys.
    key <KPDV> {
        type="CTRL+ALT",	// Ungrab cancels server/keyboard/pointer grabs
        symbols[Group1]= [ KP_Divide, KP_Divide, KP_Divide, KP_Divide, XF86_Ungrab ]
    };
    key <KPMU> {
        type="CTRL+ALT",	// ClsGrb kills whichever client has a grab in effect
        symbols[Group1]= [ KP_Multiply,	KP_Multiply, KP_Multiply, KP_Multiply, XF86_ClearGrab ]
    };
    key <KPSU> {
        type="CTRL+ALT",	// -VMode switches to the previous video mode
        symbols[Group1]= [ KP_Subtract, KP_Subtract, KP_Subtract, KP_Subtract, XF86_Prev_VMode ]
    };
    key <KPAD> {
        type="CTRL+ALT",	// +VMode switches to the next video mode
        symbols[Group1]= [ KP_Add, KP_Add, KP_Add, KP_Add, XF86_Next_VMode ]
    };
};

// Legacy PC keypad definition
// Copyright © 2006-2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
keypad_keys
xkb_symbols "legacy" {

    include "keypad(core)"
    include "keypad(legacymath)"
    include "keypad(legacynumber)"
    include "kpdl(dot)"
};


// Legacy Wang 725-3771-ae and 725-3771-uk keypad definition
// Copyright © 2006-2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
keypad_keys
xkb_symbols "legacy_wang" {

    include "keypad(core)"
    include "keypad(legacymath)"
    include "keypad(legacynumber_wang)"
    include "kpdl(dot)"
};


// Complete new keypad definition
// Copyright © 2006-2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
keypad_keys
xkb_symbols "oss" {

    include "keypad(core)"
    include "keypad(ossmath)"
    include "keypad(ossnumber)"
    include "kpdl(dotoss)"
};


// Latin9 restriction of new keypad definition
// Copyright © 2006-2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
keypad_keys
xkb_symbols "oss_latin9" {

    include "keypad(core)"
    include "keypad(ossmath_latin9)"
    include "keypad(legacynumber)"
    include "kpdl(dotoss_latin9)"
};


// Wang 725-3771-ae and 725-3771-uk keypad variant of oss keypad
// Copyright © 2006-2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
keypad_keys
xkb_symbols "oss_wang" {

    include "keypad(core)"
    include "keypad(ossmath)"
    include "keypad(ossnumber_wang)"
    include "kpdl(dotoss)"
};


// Forward-looking keypad definition
// Won't work with applications that make ASCII assumptions
// Copyright © 2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
keypad_keys
xkb_symbols "future" {

    include "keypad(core)"
    include "keypad(futuremath)"
    include "keypad(ossnumber)"
    include "kpdl(commaoss)"
};


// Forward-looking keypad definition
// Won't work with applications that make ASCII assumptions
// Copyright © 2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
keypad_keys
xkb_symbols "future_wang" {

    include "keypad(core)"
    include "keypad(futuremath)"
    include "keypad(ossnumber_wang)"
    include "kpdl(commaoss)"
};


// Keypad keys nobody changes
// Copyright © 2006 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
partial keypad_keys
xkb_symbols "core" {

    modifier_map Mod2 { Num_Lock };

    key <NMLK> { [ Num_Lock                     ] };
    key <KPEN> { [ KP_Enter                     ] };
    key <KPEQ> { [ KP_Equal                     ] };
};


// Legacy keypad math area
// Copyright © 2006 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┏━━━━━┱─────┬─────┬─────┐
// ┃Num  ┃ ₁   │ ₂   │ ₃   │ ₁ <XF86_Ungrab>
// ┃Lock⇭┃ /   │ *   │ -   │ ₂ <XF86_ClearGrab>
// ┡━━━━━╃─────┼─────┼─────┤ ₃ <XF86_Prev_VMode>
//                   │ ₄   │ ₄ <XF86_Next_VMode>
//                   │     │
//                   ┤     │ 1 None
//                   │     │ 2 Ctrl+Alt
//                   │ +   │
//                   ╆━━━━━┪
partial keypad_keys
xkb_symbols "legacymath" {

    key.type[Group1]="CTRL+ALT" ;

    key <KPDV> { [   KP_Divide, KP_Divide, KP_Divide, KP_Divide, XF86_Ungrab ] }; // / <XF86_Ungrab>
    key <KPMU> { [ KP_Multiply, KP_Multiply, KP_Multiply, KP_Multiply, XF86_ClearGrab ] }; // * <XF86_ClearGrab>
    key <KPSU> { [ KP_Subtract, KP_Subtract, KP_Subtract, KP_Subtract, XF86_Prev_VMode ] }; // - <XF86_Prev_VMode>

    key <KPAD> { [      KP_Add, KP_Add, KP_Add, KP_Add, XF86_Next_VMode ] }; // + <XF86_Next_VMode>
};


// Keypad math area with non-CS operators
// Copyright © 2006 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┏━━━━━┱─────┬─────┬─────┐
// ┃Num  ┃ ∕ ₁ │ . ₂ │ − ₃ │ ₁ <XF86_Ungrab>
// ┃Lock⇭┃ / ÷ │ * × │ - − │ ₂ <XF86_ClearGrab>
// ┡━━━━━╃─────┼─────┼─────┤ ₃ <XF86_Prev_VMode>
//                   │ + ₄ │ ₄ <XF86_Next_VMode>
//                   │     │
//                   ┤     │ 1 None
//                   │     │ 2 Level3 ⇮
//                   │ + + │ 3 Shift+Level3 ⇧⇮
//                   ╆━━━━━┪ 4 Ctrl+Alt
partial keypad_keys
xkb_symbols "ossmath" {

    key.type[Group1]="CTRL+ALT" ;

    key <KPDV> { [   KP_Divide, 0x1002215, 0x10000F7, VoidSymbol,     XF86_Ungrab ] }; // / ∕ ÷     <XF86_Ungrab>
    key <KPMU> { [ KP_Multiply, 0x10022C5, 0x10000D7, VoidSymbol,  XF86_ClearGrab ] }; // * ⋅ ×  <XF86_ClearGrab>
    key <KPSU> { [ KP_Subtract, 0x1002212, 0x1002212, VoidSymbol, XF86_Prev_VMode ] }; // - − − <XF86_Prev_VMode>

    key <KPAD> { [      KP_Add, 0x100002B, 0x100002B, VoidSymbol, XF86_Next_VMode ] }; // + + + <XF86_Next_VMode>
};


// Keypad math area with non-CS operators in first levels
// As demanded by users not interested in legacy pre-unicode junk
// Copyright © 2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┏━━━━━┱─────┬─────┬─────┐
// ┃Num  ┃ / ₁ │ * ₂ │ - ₃ │ ₁ <XF86_Ungrab>
// ┃Lock⇭┃ ∕ ÷ │ . × │ − − │ ₂ <XF86_ClearGrab>
// ┡━━━━━╃─────┼─────┼─────┤ ₃ <XF86_Prev_VMode>
//                   │ + ₄ │ ₄ <XF86_Next_VMode>
//                   │     │
//                   ┤     │ 1 None
//                   │     │ 2 Level3 ⇮
//                   │ + + │ 3 Shift+Level3 ⇧⇮
//                   ╆━━━━━┪ 4 Ctrl+Alt
partial keypad_keys
xkb_symbols "futuremath" {

    key.type[Group1]="FOUR_LEVEL_X" ;

    key <KPDV> { [ 0x1002215,   KP_Divide, 0x10000F7,     XF86_Ungrab ] }; // ∕ / ÷     <XF86_Ungrab>
    key <KPMU> { [ 0x10022C5, KP_Multiply, 0x10000D7,  XF86_ClearGrab ] }; // ⋅ * ×  <XF86_ClearGrab>
    key <KPSU> { [ 0x1002212, KP_Subtract, 0x1002212, XF86_Prev_VMode ] }; // − - − <XF86_Prev_VMode>

    key <KPAD> { [ 0x100002B,      KP_Add, 0x100002B, XF86_Next_VMode ] }; // + + + <XF86_Next_VMode>
};


// Keypad math area with non-CS operators, restricted to latin9
// Copyright © 2006 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┏━━━━━┱─────┬─────┬─────┐
// ┃Num  ┃ / ₁ │ · ₂ │ - ₃ │ ₁ <XF86_Ungrab>
// ┃Lock⇭┃ / ÷ │ * × │ - - │ ₂ <XF86_ClearGrab>
// ┡━━━━━╃─────┼─────┼─────┤ ₃ <XF86_Prev_VMode>
//                   │ + ₄ │ ₄ <XF86_Next_VMode>
//                   │     │
//                   ┤     │ 1 None
//                   │     │ 2 Level3 ⇮
//                   │ + + │ 3 Shift+Level3 ⇧⇮
//                   ╆━━━━━┪ 4 Ctrl+Alt
partial keypad_keys
xkb_symbols "ossmath_latin9" {

    key.type[Group1]="FOUR_LEVEL_X";

    key <KPDV> { [   KP_Divide,          slash, division,     XF86_Ungrab ] }; // / / ÷     <XF86_Ungrab>
    key <KPMU> { [ KP_Multiply, periodcentered, multiply,  XF86_ClearGrab ] }; // * · ×  <XF86_ClearGrab>
    key <KPSU> { [ KP_Subtract,          minus,    minus, XF86_Prev_VMode ] }; // - - - <XF86_Prev_VMode>

    key <KPAD> { [      KP_Add,           plus,     plus, XF86_Next_VMode ] }; // + + + <XF86_Next_VMode>
};


// Legacy keypad number area
// Copyright © 2006 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┏━━━━━┱
// ┃Num  ┃                   ⇱ Home
// ┃Lock⇭┃                   ⇲ End
// ┡━━━━━╃─────┼─────┼       ⇞ Page up
// │ 7   │ 8   │ 9   │       ⇟ Page down
// │ ⇱   │ ⇧   │ ⇞   │       ⎀ Insert
// ├─────┼─────┼─────┤       ␥ Delete
// │ 4   │ 5   │ 6   │       ⇦⇧⇨⇩ Directions
// │ ⇦   │     │ ⇨   │
// ├─────┼─────┼─────╆
// │ 1   │ 2   │ 3   ┃
// │ ⇲   │ ⇩   │ ⇟   ┃       1 None
// ├─────┴─────┼─────┨       2 Num Lock ⇭
// │ 0         │
// │ ⎀         │
// └───────────┴
partial keypad_keys
xkb_symbols "legacynumber" {

    key.type[Group1]="KEYPAD" ;

    key <KP7>  { [   KP_Home,       KP_7 ] }; //   <home> 7
    key <KP8>  { [     KP_Up,       KP_8 ] }; //     <up> 8
    key <KP9>  { [  KP_Prior,       KP_9 ] }; //  <prior> 9

    key <KP4>  { [   KP_Left,       KP_4 ] }; //   <left> 4
    key <KP5>  { [  KP_Begin,       KP_5 ] }; //  <begin> 5
    key <KP6>  { [  KP_Right,       KP_6 ] }; //  <right> 6

    key <KP1>  { [    KP_End,       KP_1 ] }; //    <end> 1
    key <KP2>  { [   KP_Down,       KP_2 ] }; //   <down> 2
    key <KP3>  { [   KP_Next,       KP_3 ] }; //   <next> 3

    key <KP0>  { [ KP_Insert,       KP_0 ] }; // <insert> 0
};


// Legacy Wang 725-3771-ae and 725-3771-uk keypad number area
// Copyright © 2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
// This is actually a three-level keypad, declared as four-level
// to avoid defining a new type
//
// ┏━━━━━┱
// ┃Num  ┃                   ⇱ Home
// ┃Lock⇭┃                   ⇲ End
// ┡━━━━━╃─────┼─────┼       ⇞ Page up
// │ 7   │ 8   │ 9   │       ⇟ Page down
// │ ⇱ < │ ⇧ > │ ⇞ ^ │       ⎀ Insert
// ├─────┼─────┼─────┤       ␥ Delete
// │ 4   │ 5   │ 6   │       ⇦⇧⇨⇩ Directions
// │ ⇦ [ │   ] │ ⇨ $ │
// ├─────┼─────┼─────╆
// │ 1   │ 2   │ 3   ┃
// │ ⇲ & │ ⇩ @ │ ⇟ # ┃       1 None
// ├─────┴─────┼─────┨       2 Num Lock ⇭
// │ 0         │             3 Level3 ⇮
// │ ⎀         │
// └───────────┴
partial keypad_keys
xkb_symbols "legacynumber_wang" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KP7>  { [   KP_Home,   KP_7,         less ] }; //   <home> 7 <
    key <KP8>  { [     KP_Up,   KP_8,      greater ] }; //     <up> 8 >
    key <KP9>  { [  KP_Prior,   KP_9,  asciicircum ] }; //  <prior> 9 ^

    key <KP4>  { [   KP_Left,   KP_4,  bracketleft ] }; //   <left> 4 [
    key <KP5>  { [  KP_Begin,   KP_5, bracketright ] }; //  <begin> 5 ]
    key <KP6>  { [  KP_Right,   KP_6,       dollar ] }; //  <right> 6 $

    key <KP1>  { [    KP_End,   KP_1,    ampersand ] }; //    <end> 1 &
    key <KP2>  { [   KP_Down,   KP_2,           at ] }; //   <down> 2 @
    key <KP3>  { [   KP_Next,   KP_3,   numbersign ] }; //   <next> 3 #

    key <KP0>  { [ KP_Insert,   KP_0,   apostrophe ] }; // <insert> 0 '
};


// Keypad number area with arrow symbols
// Copyright © 2006 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┏━━━━━┱
// ┃Num  ┃                   ⇱ Home
// ┃Lock⇭┃                   ⇲ End
// ┡━━━━━╃─────┼─────┼       ⇞ Page up
// │ 7 ⇖ │ 8 ⇑ │ 9 ⇗ │       ⇟ Page down
// │ ⇱ ↖ │ ⇧ ↑ │ ⇞ ↗ │       ⎀ Insert
// ├─────┼─────┼─────┤       ␥ Delete
// │ 4 ⇐ │ 5 ⇔ │ 6 ⇒ │       ⇦⇧⇨⇩ Directions
// │ ⇦ ← │   ↔ │ ⇨ → │       ⍽ narrow no-break space
// ├─────┼─────┼─────╆
// │ 1 ⇙ │ 2 ⇓ │ 3 ⇘ ┃
// │ ⇲ ↙ │ ⇩ ↓ │ ⇟ ↘ ┃       1 None
// ├─────┴─────┼─────┨       2 Num Lock ⇭
// │ 0       ⇕ │             3 Level3 ⇮
// │ ⎀       ↕ │             4 Shift+Level3 ⇧⇮
// └───────────┴
partial keypad_keys
xkb_symbols "ossnumber" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KP7>  { [   KP_Home,   KP_7, 0x1002196, 0x10021D6 ] }; //   <home> 7 ↖ ⇖
    key <KP8>  { [     KP_Up,   KP_8, 0x1002191, 0x10021D1 ] }; //     <up> 8 ↑ ⇑
    key <KP9>  { [  KP_Prior,   KP_9, 0x1002197, 0x10021D7 ] }; //  <prior> 9 ↗ ⇗

    key <KP4>  { [   KP_Left,   KP_4, 0x1002190, 0x10021D0 ] }; //   <left> 4 ← ⇐
    key <KP5>  { [  KP_Begin,   KP_5, 0x1002194, 0x10021D4 ] }; //  <begin> 5 ↔ ⇔
    key <KP6>  { [  KP_Right,   KP_6, 0x1002192, 0x10021D2 ] }; //  <right> 6 → ⇒

    key <KP1>  { [    KP_End,   KP_1, 0x1002199, 0x10021D9 ] }; //    <end> 1 ↙ ⇙
    key <KP2>  { [   KP_Down,   KP_2, 0x1002193, 0x10021D3 ] }; //   <down> 2 ↓ ⇓
    key <KP3>  { [   KP_Next,   KP_3, 0x1002198, 0x10021D8 ] }; //   <next> 3 ↘ ⇘

    key <KP0>  { [ KP_Insert,   KP_0, 0x1002195, 0x10021D5 ] }; // <insert> 0 ↕ ⇕
};


// Wang 725-3771-ae and 725-3771-uk keypad number area with additional arrow symbols
// Copyright © 2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┏━━━━━┱
// ┃Num  ┃                   ⇱ Home
// ┃Lock⇭┃                   ⇲ End
// ┡━━━━━╃─────┼─────┼       ⇞ Page up
// │ 7 ↖ │ 8 ↑ │ 9 ↗ │       ⇟ Page down
// │ ⇱ < │ ⇧ > │ ⇞ ^ │       ⎀ Insert
// ├─────┼─────┼─────┤       ␥ Delete
// │ 4 ← │ 5 ↔ │ 6 → │       ⇦⇧⇨⇩ Directions
// │ ⇦ [ │   ] │ ⇨ $ │       ⍽ narrow no-break space
// ├─────┼─────┼─────╆
// │ 1 ↙ │ 2 ↓ │ 3 ↘ ┃
// │ ⇲ & │ ⇩ @ │ ⇟ # ┃       1 None
// ├─────┴─────┼─────┨       2 Num Lock ⇭
// │ 0       ↕ │             3 Level3 ⇮
// │ ⎀       ' │             4 Shift+Level3 ⇧⇮
// └───────────┴
partial keypad_keys
xkb_symbols "ossnumber_wang" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KP7>  { [   KP_Home,   KP_7,         less, 0x1002196 ] }; //   <home> 7 < ↖
    key <KP8>  { [     KP_Up,   KP_8,      greater, 0x1002191 ] }; //     <up> 8 > ↑
    key <KP9>  { [  KP_Prior,   KP_9,  asciicircum, 0x1002197 ] }; //  <prior> 9 ^ ↗

    key <KP4>  { [   KP_Left,   KP_4,  bracketleft, 0x1002190 ] }; //   <left> 4 [ ←
    key <KP5>  { [  KP_Begin,   KP_5, bracketright, 0x1002194 ] }; //  <begin> 5 ] ↔
    key <KP6>  { [  KP_Right,   KP_6,       dollar, 0x1002192 ] }; //  <right> 6 $ →

    key <KP1>  { [    KP_End,   KP_1,    ampersand, 0x1002199 ] }; //    <end> 1 & ↙
    key <KP2>  { [   KP_Down,   KP_2,           at, 0x1002193 ] }; //   <down> 2 @ ↓
    key <KP3>  { [   KP_Next,   KP_3,   numbersign, 0x1002198 ] }; //   <next> 3 # ↘

    key <KP0>  { [ KP_Insert,   KP_0,   apostrophe, 0x1002195 ] }; // <insert> 0 ' ↕
};

// Standard base "pc" layout only contains cursor keys, and then gets
// augmented with the digits later. If you define your own layout for
// the numpad you can inherit the cursors, but you'll have to define
// the digits yourself. This module can be included in the rules to
// define math operators; these are the variants used in computer
// languages that are based on ASCII. NoSymbol does not mean that
// nothing is bound to the key but that no assignment is done here.
// srvr_ctrl(stdkeypad) and keypad(x11) declare the operator keys to
// be of type CTRL+ALT in order to assign server control events to
// them, but it uses the second level which is overwritten if we have
// more than one definition (shift state) for the key. Instead, here
// the commands are put at the 4th lever.
partial keypad_keys
xkb_symbols "ops" {
    key <KPDV> { [ NoSymbol,  slash,     NoSymbol,  XF86_Ungrab     ] };
    key <KPMU> { [ NoSymbol,  asterisk,  NoSymbol,  XF86_ClearGrab  ] };
    key <KPSU> { [ NoSymbol,  minus,     NoSymbol,  XF86_Prev_VMode ] };
    key <KPAD> { [ NoSymbol,  plus,      NoSymbol,  XF86_Next_VMode ] };
    key <KPEQ> { [ NoSymbol,  equal      ] };
};

// Hexadecimal Numpad, by Roland Kaufmann <rlndkfmn at gmail dot com>
// License: BSD (also covers variant with ATM digit order)
// Third-level gives the letters used in hexadecimal numbers, or
// columns in small spreadsheets. As a bonus, having 'e' available at
// the center of the keyboard makes it easy to enter floating point
// numbers in scientific notation.
// Equal is added to start formulas (most numpads on PCs don't have
// their own equal key), comma as a list separator (as most
// programming languages wants period as a decimal separator) and
// colon to enter times and ranges. Someone also may want to represent
// multiplication and division in prose using x and colon.
// Two first levels are specified as NoSymbol to not override any
// previous specification. Combine this with another keypad specifier,
// e.g. "legacy".
partial keypad_keys
xkb_symbols "hex" {
    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    //             None       NumLock    AltGr
    // symbol row
    key <KPDV> { [ NoSymbol,  NoSymbol,  parenleft  ] };
    key <KPMU> { [ NoSymbol,  NoSymbol,  parenright ] };
    key <KPSU> { [ NoSymbol,  NoSymbol,  dollar     ] };

    // upper row
    key <KP7>  { [ NoSymbol,  NoSymbol,  a          ] };
    key <KP8>  { [ NoSymbol,  NoSymbol,  b          ] };
    key <KP9>  { [ NoSymbol,  NoSymbol,  c          ] };

    // home row
    key <KP4>  { [ NoSymbol,  NoSymbol,  d          ] };
    key <KP5>  { [ NoSymbol,  NoSymbol,  e          ] };
    key <KP6>  { [ NoSymbol,  NoSymbol,  f          ] };
    key <KPAD> { [ NoSymbol,  NoSymbol,  comma      ] };

    // lower row
    key <KP1>  { [ NoSymbol,  NoSymbol,  equal      ] };
    key <KP2>  { [ NoSymbol,  NoSymbol,  x          ] };
    key <KP3>  { [ NoSymbol,  NoSymbol,  colon      ] };

    // decimal row
    key <KP0>  { [ NoSymbol,  NoSymbol,  backslash  ] };
};

// Main numbers follows the traditions from ATMs and phones with
// numbers increasing downwards to the right. (It is easier to
// change the keyboard layout than to reprogram your local ATM;
// also cell-phones are becoming more common while calculators are
// becoming more rare).
// First level is left unspecified, so it may be combined with another
// layout, e.g. "legacy".
partial keypad_keys
xkb_symbols "atm" {
    // upper row
    key <KP7>  { [ NoSymbol,  KP_1 ] };
    key <KP8>  { [ NoSymbol,  KP_2 ] };
    key <KP9>  { [ NoSymbol,  KP_3 ] };

    // lower row
    key <KP1>  { [ NoSymbol,  KP_7 ] };
    key <KP2>  { [ NoSymbol,  KP_8 ] };
    key <KP3>  { [ NoSymbol,  KP_9 ] };
};


partial modifier_keys
xkb_symbols "pointerkeys" {
    key <NMLK> { [ Num_Lock, Pointer_EnableKeys ] };
};


// Only numbers, operators and decimal separator,
// as seen on keypad overlay on Japanese keyboard.
// ┌─┬─┬─┬─┐
// │7│8│9│*│
// ├─┼─┼─┼─┤
// │4│5│6│-│
// ├─┼─┼─┼─┤
// │1│2│3│+│
// ├─┼─┼─┼─┤
// │0│ │·│/│
// └─┴─┴─┴─┘
partial keypad_keys
xkb_symbols "numoperdecsep" {
    key  <KO7> {	[  KP_7	]	};
    key  <KO8> {	[  KP_8	]	};
    key  <KO9> {	[  KP_9	]	};
// ClsGrb kills whichever client has a grab in effect
    key <KOMU> {
        type="CTRL+ALT",
        symbols[Group1]= [ KP_Multiply, KP_Multiply, KP_Multiply, KP_Multiply, XF86_ClearGrab ]
    };

    key  <KO4> {	[  KP_4	]	};
    key  <KO5> {	[  KP_5	]	};
    key  <KO6> {	[  KP_6	]	};
// -VMode switches to the previous video mode
    key <KOSU> {
        type="CTRL+ALT",
        symbols[Group1]= [ KP_Subtract, KP_Subtract, KP_Subtract, KP_Subtract, XF86_Prev_VMode ]
    };

    key  <KO1> {	[  KP_1	]	};
    key  <KO2> {	[  KP_2	]	};
    key  <KO3> {	[  KP_3	]	};
// +VMode switches to the next video mode
    key <KOAD> {
        type="CTRL+ALT",
        symbols[Group1]= [ KP_Add, KP_Add, KP_Add, KP_Add, XF86_Next_VMode ]
    };

    key  <KO0> {	[  KP_0	]	};
    key <KODL> {	[ KP_Decimal ]	};
// Ungrab cancels server/keyboard/pointer grabs
    key <KODV> {
        type="CTRL+ALT",
        symbols[Group1]= [ KP_Divide, KP_Divide, KP_Divide, KP_Divide, XF86_Ungrab ]
    };
};
// based on a keyboard map from an 'xkb/symbols/de' file

default
xkb_symbols "basic" {

    include "latin(type4)"

    name[Group1]="German";

    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth ]	};
    key <AE03>	{ [         3,    section, threesuperior,    sterling ]	};
    key <AE04>	{ [         4,     dollar,   onequarter,     currency ]	};

    key <AE11> {type[Group1]="FOUR_LEVEL_PLUS_LOCK",  symbols[Group1]=
                  [ssharp, question, backslash, questiondown, 0x1001E9E ]};
    key <AE12>	{ [dead_acute, dead_grave, dead_cedilla,  dead_ogonek ]	};

    key <AD03>	{ [         e,          E,     EuroSign,     EuroSign ]	};
    key <AD06>	{ [         z,          Z,    leftarrow,          yen ]	};
    key <AD11>	{ [udiaeresis, Udiaeresis, dead_diaeresis, dead_abovering ] };
    key <AD12>	{ [      plus,   asterisk,   asciitilde,  macron ]	};

    key <AC02>  { [         s,          S,                U017F,     U1E9E    ] };
    key <AC07>  { [         j,          J,        dead_belowdot, dead_abovedot   ] };
    key <AC10>	{ [odiaeresis, Odiaeresis, dead_doubleacute, dead_belowdot ] };
    key <AC11>	{ [adiaeresis, Adiaeresis, dead_circumflex, dead_caron ] };
    key <TLDE>	{ [dead_circumflex, degree,	U2032,    U2033	] };

    key <BKSL>	{ [numbersign, apostrophe, rightsinglequotemark,   dead_breve ]	};
    key <AB01>	{ [         y,          Y,       guillemotright,    U203A 	] };
    key <AB02>	{ [         x,          X,        guillemotleft,    U2039 	] };
    key <AB04>	{ [         v,          V,   doublelowquotemark, singlelowquotemark ]	};
    key <AB05>	{ [         b,          B,  leftdoublequotemark, leftsinglequotemark ] };
    key <AB06>	{ [         n,          N, rightdoublequotemark, rightsinglequotemark ]	};
    key <AB08>  { [     comma,  semicolon,       periodcentered,     multiply	] };
    key <AB09>	{ [    period,      colon,                U2026,     division 	] };
    key <AB10>	{ [     minus, underscore,               endash,     emdash	] };
    key <LSGT>	{ [     less,     greater,                  bar, dead_belowmacron ] };

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "deadtilde" {
    // previous standard German layout with tilde as dead key

    include "de(basic)"
    name[Group1]="German (dead tilde)";

    key <AD12>	{ [      plus,   asterisk,   dead_tilde,  dead_macron ]	};
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // modify the basic German layout to not have any dead keys

    include "de(basic)"
    name[Group1]="German (no dead keys)";

    key <TLDE>	{ [asciicircum,     degree,              notsign,     notsign ]	};
    key <AE12>	{ [      acute,      grave,              cedilla,     cedilla ]	};
    key <AD11>	{ [ udiaeresis, Udiaeresis,            diaeresis,   diaeresis ]	};
    key <AD12>	{ [       plus,   asterisk,           asciitilde,      macron ]	};
    key <AC10>	{ [ odiaeresis, Odiaeresis,          doubleacute, doubleacute ]	};
    key <AC11>	{ [ adiaeresis, Adiaeresis,          asciicircum, asciicircum ]	};
    key <BKSL>	{ [ numbersign, apostrophe, rightsinglequotemark,       grave ]	};
};

partial alphanumeric_keys
xkb_symbols "deadgraveacute" {
    // modify the basic German layout to have only acute and grave
    // as dead keys (tilde and circumflex are needed as spacing characters
    // in many programming languages)

    include "de(basic)"
    name[Group1]="German (dead grave acute)";

    key <TLDE>	{ [asciicircum,     degree,              notsign,      notsign ] };
    key <AD12>	{ [       plus,   asterisk,           asciitilde,  dead_macron ] };
    key <BKSL>	{ [ numbersign, apostrophe, rightsinglequotemark,        grave ] };
};

partial alphanumeric_keys
xkb_symbols "deadacute" {
    // modify the basic German layout to have only acute as
    // dead keys (ASCII grave, tilde and circumflex are needed as
    // spacing characters in many programming languages and text formatters)

    include "de(deadgraveacute)"

    name[Group1]="German (dead acute)";

    key <AE12>	{ [dead_acute,      grave,           dead_cedilla,  dead_ogonek ] };
    key <BKSL>	{ [numbersign, apostrophe,   rightsinglequotemark,   dead_grave ] };
};

partial alphanumeric_keys
xkb_symbols "e1" {
    // German extended layout E1 based on DIN 2137-1:2018-12
    // Designed for a 105-key keyboard
    // https://de.wikipedia.org/wiki/Tastaturbelegung

    name[Group1]="German (E1)";

    // first row
    key.type[Group1] = "EIGHT_LEVEL";
    key <TLDE> { [ dead_circumflex,     degree,             multiply, NoSymbol,             NoSymbol,             NoSymbol, NoSymbol, NoSymbol ] };
    key <AE01> { [               1,     exclam, rightsinglequotemark, NoSymbol,           onequarter,                U25CA, NoSymbol, NoSymbol ] };
    key <AE02> { [               2,   quotedbl,          twosuperior, NoSymbol,              onehalf,                U00A6, NoSymbol, NoSymbol ] };
    key <AE03> { [               3,    section,        threesuperior, NoSymbol,        threequarters,                U00B6, NoSymbol, NoSymbol ] };
    key <AE04> { [               4,     dollar,               emdash, NoSymbol,             currency,                U2133, NoSymbol, NoSymbol ] };
    key <AE05> { [               5,    percent,           exclamdown, NoSymbol,                U2030,                U20B0, NoSymbol, NoSymbol ] };
    key <AE06> { [               6,  ampersand,         questiondown, NoSymbol,                U2044,                U204A, NoSymbol, NoSymbol ] };
    key <AE07> { [               7,      slash,            braceleft, NoSymbol,                U2300,                U2116, NoSymbol, NoSymbol ] };
    key <AE08> { [               8,  parenleft,          bracketleft, NoSymbol,                U27E8,                U27EA, NoSymbol, NoSymbol ] };
    key <AE09> { [               9, parenright,         bracketright, NoSymbol,                U27E9,                U27EB, NoSymbol, NoSymbol ] };
    key <AE10> { [               0,      equal,           braceright, NoSymbol,             division,                U2205, NoSymbol, NoSymbol ] };
    key <AE11> { [          ssharp,   question,            backslash, NoSymbol,             notequal,                U00AC, NoSymbol, NoSymbol ] };
    key <AE12> { [      dead_acute, dead_grave,        dead_abovedot, NoSymbol,             sterling,                U035C, NoSymbol, NoSymbol ] };

    // second row
    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC";
    key <AD01> { [               q,          Q,                   at, NoSymbol,            masculine,                U2642, NoSymbol, NoSymbol ] };
    key <AD02> { [               w,          W,           dead_caron, NoSymbol,          ordfeminine,                U2640, NoSymbol, NoSymbol ] };
    key <AD03> { [               e,          E,             EuroSign, NoSymbol,                schwa,                SCHWA, NoSymbol, NoSymbol ] };
    key <AD04> { [               r,          R,     dead_doubleacute, NoSymbol,            trademark,           registered, NoSymbol, NoSymbol ] };
    key <AD05> { [               t,          T,           dead_tilde, NoSymbol,                thorn,                THORN, NoSymbol, NoSymbol ] };
    key <AD06> { [               z,          Z,       dead_diaeresis, NoSymbol,                U0292,                U01B7, NoSymbol, NoSymbol ] };
    key <AD07> { [               u,          U,           dead_breve, NoSymbol,           rightarrow,            leftarrow, NoSymbol, NoSymbol ] };
    key <AD08> { [               i,          I,          dead_macron, NoSymbol,             idotless,                U26A5, NoSymbol, NoSymbol ] };
    key <AD09> { [               o,          O,       dead_abovering, NoSymbol,               oslash,               Oslash, NoSymbol, NoSymbol ] };
    key <AD10> { [               p,          P,            dead_hook, NoSymbol,            downarrow,              uparrow, NoSymbol, NoSymbol ] };
    key <AD11> { [      udiaeresis, Udiaeresis,            dead_horn, NoSymbol,                U2198,                U2197, NoSymbol, NoSymbol ] };
    key.type[Group1] = "EIGHT_LEVEL";
    key <AD12> { [            plus,   asterisk,           asciitilde, NoSymbol,            plusminus,                U2052, NoSymbol, NoSymbol ] };

    // third row
    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC";
    // Per DIN 2137-1:2018-12, p. 11-12, (Alt)Gr+a can either invoke
    // a selection possibility for emojis or special characters, or
    // output the U+263A smiley.
    key <AC01> { [               a,          A,            Multi_key, NoSymbol,             NoSymbol,             NoSymbol, NoSymbol, NoSymbol ] };
    key <AC02> { [               s,          S,              seconds, NoSymbol,                U017F,                U2211, NoSymbol, NoSymbol ] };
    key <AC03> { [               d,          D,              minutes, NoSymbol,                  eth,                  ETH, NoSymbol, NoSymbol ] };
    key <AC04> { [               f,          F,     ISO_Level5_Latch, NoSymbol,             NoSymbol,             NoSymbol, NoSymbol, NoSymbol ] };
    key <AC05> { [               g,          G,                U1E9E, NoSymbol,                U02BF,                U261B, NoSymbol, NoSymbol ] };
    key <AC06> { [               h,          H,     dead_belowmacron, NoSymbol,                U02BE,                U261A, NoSymbol, NoSymbol ] };
    key <AC07> { [               j,          J,         dead_cedilla, NoSymbol,                U02B9,                U02BA, NoSymbol, NoSymbol ] };
    key <AC08> { [               k,          K,      dead_belowcomma, NoSymbol,             NoSymbol,             NoSymbol, NoSymbol, NoSymbol ] };
    key <AC09> { [               l,          L,          dead_ogonek, NoSymbol,              lstroke,              Lstroke, NoSymbol, NoSymbol ] };
    key <AC10> { [      odiaeresis, Odiaeresis,        dead_belowdot, NoSymbol,                   oe,                   OE, NoSymbol, NoSymbol ] };
    key <AC11> { [      adiaeresis, Adiaeresis,          dead_stroke, NoSymbol,                   ae,                   AE, NoSymbol, NoSymbol ] };
    key.type[Group1] = "EIGHT_LEVEL";
    key <BKSL> { [      numbersign, apostrophe,                U2212, NoSymbol,                U2020,                U2021, NoSymbol, NoSymbol ] };

    // fourth row
    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC";
    key <AB01> { [               y,          Y,                U203A, NoSymbol,                U2423,                U23D1, NoSymbol, NoSymbol ] };
    key <AB02> { [               x,          X,       guillemotright, NoSymbol,   doublelowquotemark,   singlelowquotemark, NoSymbol, NoSymbol ] };
    key <AB03> { [               c,          C,                U202F, NoSymbol,                 cent,            copyright, NoSymbol, NoSymbol ] };
    key <AB04> { [               v,          V,        guillemotleft, NoSymbol,  leftdoublequotemark,  leftsinglequotemark, NoSymbol, NoSymbol ] };
    key <AB05> { [               b,          B,                U2039, NoSymbol, rightdoublequotemark, rightsinglequotemark, NoSymbol, NoSymbol ] };
    key <AB06> { [               n,          N,               endash, NoSymbol,                  eng,                  ENG, NoSymbol, NoSymbol ] };
    // Per DIN 2137-1:2018-12, p. 12, U+2217 should be replaced by the
    // 'middle asterisk' character as soon as it has been added to
    // Unicode (see Unicode proposal L2/17-152).
    key <AB07> { [               m,          M,                   mu, NoSymbol,                U200C,                U2217, NoSymbol, NoSymbol ] };
    key.type[Group1] = "EIGHT_LEVEL";
    key <AB08> { [           comma,  semicolon,                U2011, NoSymbol,                U02BB,                U2661, NoSymbol, NoSymbol ] };
    key <AB09> { [          period,      colon,       periodcentered, NoSymbol,             ellipsis,                U2713, NoSymbol, NoSymbol ] };
    key <AB10> { [           minus, underscore,               hyphen, NoSymbol,                U2022,                U25E6, NoSymbol, NoSymbol ] };

    // fifth row
    key.type[Group1] = "EIGHT_LEVEL";
    key <SPCE> { [           space,      space,         nobreakspace, NoSymbol,                U200A,                U2009, NoSymbol, NoSymbol ] };
    key.type[Group1] = "ONE_LEVEL";
    key <LFSH> { [ Shift_L ] };
    key <RTSH> { [ Shift_R ] };
    key <RALT> { [ ISO_Level3_Shift ] };

    // key <LSGT> exists only on the 105-key keyboard
    key.type[Group1] = "EIGHT_LEVEL";
    key <LSGT> { [            less,    greater,                  bar, NoSymbol,        lessthanequal,     greaterthanequal, NoSymbol, NoSymbol ] };

    include "kpdl(comma)"
    include "level3(modifier_mapping)"
    include "level5(modifier_mapping)"
 };

partial alphanumeric_keys
xkb_symbols "e2" {
    // German extended layout E2 based on DIN 2137-1:2018-12
    // Designed for a 104-key keyboard
    // https://de.wikipedia.org/wiki/Tastaturbelegung

    include "de(e1)"
    name[Group1]="German (E2)";

    // one key less: assign bar, less and greater to other keys
    key.type[Group1] = "EIGHT_LEVEL";
    key <TLDE> { [ dead_circumflex,   degree,        bar, NoSymbol,      NoSymbol, NoSymbol, NoSymbol, NoSymbol ] };
    key <AE02> { [               2, quotedbl,       less, NoSymbol,       onehalf,    U00A6, NoSymbol, NoSymbol ] };
    key <AE03> { [               3,  section,    greater, NoSymbol, threequarters,    U00B6, NoSymbol, NoSymbol ] };
    key <AD12> { [            plus, asterisk, asciitilde, NoSymbol,      multiply,    U2052, NoSymbol, NoSymbol ] };

    // if E2 is used on a 105-key keyboard
    key.type[Group1] = "ONE_LEVEL";
    key <LSGT> { [ ISO_Level3_Shift ] };
};

partial alphanumeric_keys
xkb_symbols "T3" {
    // German extended layout T3 based on DIN 2137-1:2012-06
    // Now obsolete, use de(e1) or de(e2)

    name[Group1]="German (T3)";

    key.type[Group1] = "EIGHT_LEVEL";
    key <TLDE> { [ dead_circumflex,          degree,        multiply,        NoSymbol,           U204A,            hyphen,             bar,        NoSymbol ] };
    key <AE01> { [               1,          exclam, rightsinglequotemark,   NoSymbol,     onesuperior,        exclamdown,           U02B9,        NoSymbol ] };
    key <AE02> { [               2,        quotedbl,     twosuperior,        NoSymbol,     twosuperior,          currency,           U02BA,        NoSymbol ] };
    key <AE03> { [               3,         section,   threesuperior,        NoSymbol,   threesuperior,          sterling,           U02BF,        NoSymbol ] };
    key <AE04> { [               4,          dollar,          emdash,        NoSymbol,      onequarter,            0x20AC,           U02BE,        NoSymbol ] };
    key <AE05> { [               5,         percent,      exclamdown,        NoSymbol,         onehalf,           uparrow,           U02C1,        NoSymbol ] };
    key <AE06> { [               6,       ampersand,    questiondown,        NoSymbol,   threequarters,         downarrow,           U02C0,        NoSymbol ] };
    key <AE07> { [               7,           slash,       braceleft,        NoSymbol,       oneeighth,         leftarrow,       braceleft,        NoSymbol ] };
    key <AE08> { [               8,       parenleft,     bracketleft,        NoSymbol,    threeeighths,        rightarrow,      braceright,        NoSymbol ] };
    key <AE09> { [               9,      parenright,    bracketright,        NoSymbol,     fiveeighths,         plusminus,     bracketleft,        NoSymbol ] };
    key <AE10> { [               0,           equal,      braceright,        NoSymbol,    seveneighths,         trademark,    bracketright,        NoSymbol ] };
    key <AE11> { [          ssharp,        question,       backslash,        NoSymbol,       backslash,      questiondown,           U02BB,        NoSymbol ] };
    key <AE12> { [      dead_acute,      dead_grave,   dead_abovedot,        NoSymbol,    dead_cedilla,       dead_ogonek,         notsign,        NoSymbol ] };

    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC";
    key <AD01> { [               q,               Q,              at,        NoSymbol,           U0242,           U0241,           U030D,        NoSymbol ] };
    key <AD02> { [               w,               W,      dead_caron,        NoSymbol,           U02B7,           U2126,   dead_abovedot,        NoSymbol ] };
    key <AD03> { [               e,               E,        EuroSign,        NoSymbol,              oe,              OE,      dead_breve,        NoSymbol ] };
    key <AD04> { [               r,               R,  dead_diaeresis,        NoSymbol,       paragraph,      registered, dead_circumflex,        NoSymbol ] };
    key <AD05> { [               t,               T,     dead_macron,        NoSymbol,           UA78C,           UA78B,  dead_diaeresis,        NoSymbol ] };
    key <AD06> { [               z,               Z, dead_doubleacute,       NoSymbol,           U027C,             yen, dead_invertedbreve,     NoSymbol ] };
    key <AD07> { [               u,               U,      dead_breve,        NoSymbol,           U0223,           U0222,      dead_caron,        NoSymbol ] };
    key <AD08> { [               i,               I,      dead_tilde,        NoSymbol,        idotless,           U214D, dead_abovecomma,        NoSymbol ] };
    key <AD09> { [               o,               O,  dead_abovering,        NoSymbol,          oslash,          Oslash,       dead_horn,        NoSymbol ] };
    key <AD10> { [               p,               P,       dead_hook,        NoSymbol,           thorn,           THORN,       dead_hook,        NoSymbol ] };
    key <AD11> { [      udiaeresis,      Udiaeresis,       dead_horn,        NoSymbol,           U017F,  dead_abovering,      dead_grave,        NoSymbol ] };
    key.type[Group1] = "EIGHT_LEVEL";
    key <AD12> { [            plus,        asterisk,      asciitilde,        NoSymbol,      dead_tilde,     dead_macron,              at,        NoSymbol ] };

    key.type[Group1] = "ONE_LEVEL";
    key <CAPS>  { [ Caps_Lock ] };
    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC";
    key <AC01> { [               a,               A,   lessthanequal,        NoSymbol,              ae,              AE,           U0329,        NoSymbol ] };
    key <AC02> { [               s,               S, greaterthanequal,       NoSymbol,          ssharp,         section,   dead_belowdot,        NoSymbol ] };
    key <AC03> { [               d,               D,           U2300,        NoSymbol,             eth,             ETH, dead_belowbreve,        NoSymbol ] };
    key <AC04> { [               f,               F,         minutes,        NoSymbol,           U0294,     ordfeminine, dead_belowcircumflex,   NoSymbol ] };
    key <AC05> { [               g,               G,         seconds,        NoSymbol,             eng,             ENG, dead_belowmacron,       NoSymbol ] };
    key <AC06> { [               h,               H,           U1E9E,        NoSymbol,           U0272,           U019D,           U0332,        NoSymbol ] };
    key <AC07> { [               j,               J,    dead_cedilla,        NoSymbol,           U0133,           U0132,  dead_belowring,        NoSymbol ] };
    key <AC08> { [               k,               K, dead_belowcomma,        NoSymbol,             kra, dead_belowcomma,     dead_stroke,        NoSymbol ] };
    key <AC09> { [               l,               L,     dead_ogonek,        NoSymbol,         lstroke,         Lstroke,           U0338,        NoSymbol ] };
    key <AC10> { [      odiaeresis,      Odiaeresis,   dead_belowdot,        NoSymbol,      dead_acute, dead_doubleacute,         degree,        NoSymbol ] };
    key <AC11> { [      adiaeresis,      Adiaeresis,     dead_stroke,        NoSymbol,           U019B,           U1E9E,         minutes,        NoSymbol ] };
    key.type[Group1] = "EIGHT_LEVEL";
    key <BKSL> { [      numbersign,      apostrophe,      registered,        NoSymbol,           schwa,           SCHWA,         seconds,        NoSymbol ] };

    key <LSGT> { [            less,         greater,             bar,        NoSymbol,           U0149,       brokenbar,           U266A,        NoSymbol ] };
    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC";
    key <AB01> { [               y,               Y,           U203A,        NoSymbol,           U0292,           U01B7,   guillemotleft,        NoSymbol ] };
    key <AB02> { [               x,               X,  guillemotright,        NoSymbol, doublelowquotemark, singlelowquotemark, guillemotright,   NoSymbol ] };
    key <AB03> { [               c,               C,       copyright,        NoSymbol,            cent,       copyright,  Greek_horizbar,        NoSymbol ] };
    key <AB04> { [               v,               V,   guillemotleft,        NoSymbol, leftdoublequotemark, leftsinglequotemark,   U2039,        NoSymbol ] };
    key <AB05> { [               b,               B,           U2039,        NoSymbol, rightdoublequotemark, rightsinglequotemark, U203A,        NoSymbol ] };
    key <AB06> { [               n,               N,          endash,        NoSymbol,           U019E,           U0220,          endash,        NoSymbol ] };
    key <AB07> { [               m,               M,              mu,        NoSymbol,              mu,       masculine,          emdash,        NoSymbol ] };
    key.type[Group1] = "EIGHT_LEVEL";
    key <AB08> { [           comma,       semicolon,           U02BB,        NoSymbol,        ellipsis,        multiply,          dollar,        NoSymbol ] };
    key <AB09> { [          period,           colon,           U200C,        NoSymbol,  periodcentered,        division,      numbersign,        NoSymbol ] };
    key <AB10> { [           minus,      underscore,          hyphen,        NoSymbol,           U0140,           U013F,           U2011,        NoSymbol ] };

    key <SPCE> { [           space,           space,    nobreakspace,        NoSymbol,           U202F,           U200C,    nobreakspace,        NoSymbol ] };

    include "kpdl(comma)"

    include "level5(modifier_mapping)"
    include "level3(modifier_mapping)"
    key.type[Group1] = "THREE_LEVEL";
    key <LFSH> { [ Shift_L, Shift_L, ISO_Level5_Latch ] };
    key <RTSH> { [ Shift_R, Shift_R, ISO_Level5_Latch ] };
    key <RALT> { [ ISO_Level3_Shift, ISO_Level5_Latch, ISO_Level5_Latch ] };
 };

partial alphanumeric_keys
xkb_symbols "ro" {
    // Adds Romanian-specific letters to the German basic layout.
    // Romanian symbols are accessible by combining <AltGr> and
    // 'a', 's', 't', 'i', 'ä (&auml)' (+<Shift> for capital letters).

    include "de(basic)"

    name[Group1]="Romanian (Germany)";

    key <AD05> { [         t,    T,              U021b,        U021a    ] };
    key <AD08> { [         i,    I,        icircumflex,  Icircumflex    ] };
    key <AC01> { [         a,    A,        acircumflex,  Acircumflex    ] };
    key <AC02> { [         s,    S,              U0219,        U0218    ] };
    key <AC11> { [ adiaeresis,   Adiaeresis,    abreve,       Abreve    ] };
};

partial alphanumeric_keys
xkb_symbols "ro_nodeadkeys" {
    // Adds Romanian-specific letters to the German nodeadkeys layout.
    // Read the comment for de_ro !

    include "de(nodeadkeys)"
    name[Group1]="Romanian (Germany, no dead keys)";

    key <AD05> { [         t,    T,              U021b,        U021a    ] };
    key <AD08> { [         i,    I,        icircumflex,  Icircumflex    ] };
    key <AC01> { [         a,    A,        acircumflex,  Acircumflex    ] };
    key <AC02> { [         s,    S,              U0219,        U0218    ] };
    key <AC11> { [ adiaeresis,   Adiaeresis,    abreve,       Abreve    ] };
};

// German Dvorak keymap by Thorsten Staerk (www.staerk.de/thorsten)
// Have acute and grave as dead keys, tilde and circumflex alive as they are needed 
// in many programming languages.
// to use this keymap, use a 105-key-keyboard and the command setxkbmap -model pc105 -layout dvorak -variant de
// source: http://www-lehre.informatik.uni-osnabrueck.de/~rfreund/dvorak.php
partial alphanumeric_keys
xkb_symbols "dvorak" {
    include "us(dvorak)"

    name[Group1]="German (Dvorak)";

    key <TLDE> { [ asciicircum, degree ] };

    key <AE01> { [ 1, exclam, onesuperior ] };
    key <AE02> { [ 2, quotedbl, twosuperior ] };
    key <AE03> { [ 3, section, threesuperior ] };
    key <AE04> { [ 4, dollar, bar ] };
    key <AE05> { [ 5, percent, bar ] };
    key <AE06> { [ 6, ampersand, brokenbar ] };
    key <AE07> { [ 7, slash, braceleft ] };
    key <AE08> { [ 8, parenleft, bracketleft ] };
    key <AE09> { [ 9, parenright, bracketright ] };
    key <AE10> { [ 0, equal, braceright ] };
    key <AE11> { [ plus, asterisk, asciitilde ] };
    key <AE12> { [ less, greater, dead_grave ] };

    key <AD01> { [ udiaeresis, Udiaeresis, at ] };
    key <AD02> { [ comma, semicolon, dead_diaeresis ] };
    key <AD03> { [ period, colon ] };
    key <AD08> { [ c, C, copyright, Cacute ] };
    key <AD09> { [ t, T, trademark ] };
    key <AD10> { [ z, Z, zabovedot, Zabovedot ] };
    key <AD11> { [ question, ssharp ] };
    key <AD12> { [ slash, backslash, dead_acute ] };

    key <AC01> { [ a, A, at, aogonek ] };
    key <AC02> { [ o, O, oacute, Oacute ] };
    key <AC03> { [ e, E, EuroSign, eogonek ] };
    key <AC04> { [ i, I ] };
    key <AC05> { [ u, U ] };
    key <AC06> { [ h, H ] };
    key <AC07> { [ d, D ] };
    key <AC08> { [ r, R, registered ] };
    key <AC09> { [ n, N, nacute, Nacute ] };
    key <AC10> { [ s, S, sacute, Sacute] };
    key <AC11> { [ l, L, lstroke, Lstroke ] };

    key <AB01> { [ odiaeresis, Odiaeresis ] };
    key <AB02> { [ q, Q, at ] };
    key <AB07> { [ m, M, mu ] };
    key <AB10> { [ numbersign, apostrophe ] };

    key <BKSL> { [ minus, underscore, hyphen, diaeresis] };

    key <LSGT> { [ adiaeresis, Adiaeresis, bar ] };

    include "level3(ralt_switch)"
};


// German Neo-Layout Version 2
// adopted 2004 by Hanno Behrens <Hanno.Behrens@gmx.de>
// inspired by Dvorak/de-ergo  http://www.goebel-consult.de/de-ergo/
//
// Authors: 
//      Stephan Hilb <stephan at ehilb dot de>
//      <lucky at zankt dot net>
//      Benjamin Kellermann <Benjamin dot Kellermann at gmx dot Germany>
//      Erik Streb <mail at erikstreb dot de>
//        and many other contributors
//
//      http://www.neo-layout.org
//
// $Revision$, $Date$

partial alphanumeric_keys modifier_keys keypad_keys
xkb_symbols "neo_base" {

    // Levels in Neo jargon
    // --------------------------------------------------------------
    // Ebene 1: normal
    // Ebene 2: Shift
    // Ebene 3: Mod3
    // Ebene 4: Mod4 (for marking something use Shift + Mod4)
    // Ebene 5: Shift + Mod3
    // Ebene 6: Mod3 + Mod4
    // Compose (not a level): Mod3 + Tab
    // Feststelltaste (Capslock): Shift + Shift
    // Mod4-Lock: Mod4 + Mod4
    // Mod4-Lock: Shift + Mod3 + Tab

    // Legend
    // ===============
    // Levels in Xkbmap jargon to be found here in the definitions. 
    // These are the levels used, and Xorg's translations:
    // --------------------------------------------------------------
    // Xorg:       Level1                   Level2                   Level3                   Level4                   Level5                   Level6                   Level7                   Level8                   
    // Neo:        Ebene1                   Ebene2                   Ebene3                   Ebene5                   Ebene4                   Pseudo-Ebene             Ebene6                   ???                      
    // Keys (Neo): None                     Shift                    Mod3                     Mod3 + Shift             Mod4                     Mod4 + Shift             Mod3 + Mod4              Mod3 + Mod4 + Shift      


    // Alphanumeric-keys
    // ===============
    key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";

    // Tab as Multi_key (Compose)
    // --------------------------------------------------------------
    key  <TAB> { [ Tab,                     ISO_Left_Tab,            Multi_key,               ISO_Level5_Lock,         NoSymbol,                NoSymbol,                NoSymbol,                ISO_Level5_Lock          ] };


    // Number row
    // --------------------------------------------------------------
    key <TLDE> { [ dead_circumflex,         dead_caron,              U21BB,                   U02DE,                   dead_abovedot,           Pointer_EnableKeys,      dead_belowdot,           NoSymbol                 ] };

    key <AE01> { [ 1,                       degree,                  onesuperior,             onesubscript,            ordfeminine,             NoSymbol,                notsign,                 NoSymbol                 ] };
    key <AE02> { [ 2,                       section,                 twosuperior,             twosubscript,            masculine,               NoSymbol,                logicalor,               NoSymbol                 ] };
    key <AE03> { [ 3,                       U2113,                   threesuperior,           threesubscript,          numerosign,              NoSymbol,                logicaland,              NoSymbol                 ] };
    key <AE04> { [ 4,                       guillemotright,          U203A,                   femalesymbol,            NoSymbol,                NoSymbol,                U22A5,                   NoSymbol                 ] };
    key <AE05> { [ 5,                       guillemotleft,           U2039,                   malesymbol,              periodcentered,          NoSymbol,                U2221,                   NoSymbol                 ] };
    key <AE06> { [ 6,                       dollar,                  cent,                    U26A5,                   sterling,                NoSymbol,                U2225,                   NoSymbol                 ] };

    key <AE07> { [ 7,                       EuroSign,                yen,                     U03F0,                   currency,                NoSymbol,                rightarrow,              NoSymbol                 ] };
    key <AE08> { [ 8,                       doublelowquotemark,      singlelowquotemark,      U27E8,                   Tab,                     ISO_Left_Tab,            U221E,                   NoSymbol                 ] };
    key <AE09> { [ 9,                       leftdoublequotemark,     leftsinglequotemark,     U27E9,                   KP_Divide,               KP_Divide,               variation,               NoSymbol                 ] };
    key <AE10> { [ 0,                       rightdoublequotemark,    rightsinglequotemark,    zerosubscript,           KP_Multiply,             KP_Multiply,             emptyset,                NoSymbol                 ] };

    key <AE11> { [ minus,                   emdash,                  NoSymbol,                U2011,                   KP_Subtract,             KP_Subtract,             hyphen,                  NoSymbol                 ] };
    key <AE12> { [ dead_grave,              dead_cedilla,            dead_abovering,          dead_dasia,              dead_diaeresis,          NoSymbol,                dead_macron,             NoSymbol                 ] };

    // Top row
    // --------------------------------------------------------------
    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AD01> { [ x,                       X,                       ellipsis,                Greek_xi,                Prior,                   Prior,                   Greek_XI,                NoSymbol                 ] };
    key <AD02> { [ v,                       V,                       underscore,              NoSymbol,                BackSpace,               BackSpace,               radical,                 NoSymbol                 ] };
    key <AD03> { [ l,                       L,                       bracketleft,             Greek_lambda,            Up,                      Up,                      Greek_LAMBDA,            NoSymbol                 ] };
    key <AD04> { [ c,                       C,                       bracketright,            Greek_chi,               Delete,                  Delete,                  U2102,                   NoSymbol                 ] };
    key <AD05> { [ w,                       W,                       asciicircum,             Greek_omega,             Next,                    Next,                    Greek_OMEGA,             NoSymbol                 ] };

    key <AD06> { [ k,                       K,                       exclam,                  Greek_kappa,             exclamdown,              NoSymbol,                multiply,                NoSymbol                 ] };
    key <AD07> { [ h,                       H,                       less,                    Greek_psi,               KP_7,                    KP_7,                    Greek_PSI,               NoSymbol                 ] };
    key <AD08> { [ g,                       G,                       greater,                 Greek_gamma,             KP_8,                    KP_8,                    Greek_GAMMA,             NoSymbol                 ] };
    key <AD09> { [ f,                       F,                       equal,                   Greek_phi,               KP_9,                    KP_9,                    Greek_PHI,               NoSymbol                 ] };
    key <AD10> { [ q,                       Q,                       ampersand,               U03D5,                   KP_Add,                  KP_Add,                  U211A,                   NoSymbol                 ] };

    key <AD11> { [ ssharp,                  U1E9E,                   U017F,                   Greek_finalsmallsigma,   U2212,                   NoSymbol,                jot,                     NoSymbol                 ] };

    key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AD12> { [ dead_acute,              dead_tilde,              dead_stroke,             dead_psili,              dead_doubleacute,        NoSymbol,                dead_breve,              NoSymbol                 ] };

    // Middle row
    // --------------------------------------------------------------
    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AC01> { [ u,                       U,                       backslash,               NoSymbol,                Home,                    Home,                    includedin,              NoSymbol                 ] };
    key <AC02> { [ i,                       I,                       slash,                   Greek_iota,              Left,                    Left,                    integral,                NoSymbol                 ] };
    key <AC03> { [ a,                       A,                       braceleft,               Greek_alpha,             Down,                    Down,                    U2200,                   NoSymbol                 ] };
    key <AC04> { [ e,                       E,                       braceright,              Greek_epsilon,           Right,                   Right,                   U2203,                   NoSymbol                 ] };
    key <AC05> { [ o,                       O,                       asterisk,                Greek_omicron,           End,                     End,                     elementof,               NoSymbol                 ] };

    key <AC06> { [ s,                       S,                       question,                Greek_sigma,             questiondown,            NoSymbol,                Greek_SIGMA,             NoSymbol                 ] };
    key <AC07> { [ n,                       N,                       parenleft,               Greek_nu,                KP_4,                    KP_4,                    U2115,                   NoSymbol                 ] };
    key <AC08> { [ r,                       R,                       parenright,              Greek_rho,               KP_5,                    KP_5,                    U211D,                   NoSymbol                 ] };
    key <AC09> { [ t,                       T,                       minus,                   Greek_tau,               KP_6,                    KP_6,                    partialderivative,       NoSymbol                 ] };
    key <AC10> { [ d,                       D,                       colon,                   Greek_delta,             KP_Separator,            comma,                   Greek_DELTA,             NoSymbol                 ] };

    key <AC11> { [ y,                       Y,                       at,                      Greek_upsilon,           period,                  KP_Decimal,              nabla,                   NoSymbol                 ] };

    // Bottom row
    // --------------------------------------------------------------
    key <AB01> { [ udiaeresis,              Udiaeresis,              numbersign,              NoSymbol,                Escape,                  Escape,                  union,                   NoSymbol                 ] };
    key <AB02> { [ odiaeresis,              Odiaeresis,              dollar,                  U03F5,                   Tab,                     Tab,                     intersection,            NoSymbol                 ] };
    key <AB03> { [ adiaeresis,              Adiaeresis,              bar,                     Greek_eta,               Insert,                  Insert,                  U2135,                   NoSymbol                 ] };
    key <AB04> { [ p,                       P,                       asciitilde,              Greek_pi,                Return,                  Return,                  Greek_PI,                NoSymbol                 ] };
    key <AB05> { [ z,                       Z,                       grave,                   Greek_zeta,              Undo,                    Redo,                    U2124,                   NoSymbol                 ] };

    key <AB06> { [ b,                       B,                       plus,                    Greek_beta,              colon,                   NoSymbol,                U21D0,                   NoSymbol                 ] };
    key <AB07> { [ m,                       M,                       percent,                 Greek_mu,                KP_1,                    KP_1,                    ifonlyif,                NoSymbol                 ] };
    key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AB08> { [ comma,                   endash,                  quotedbl,                U03F1,                   KP_2,                    KP_2,                    U21D2,                   NoSymbol                 ] };
    key <AB09> { [ period,                  enfilledcircbullet,      apostrophe,              U03D1,                   KP_3,                    KP_3,                    U21A6,                   NoSymbol                 ] };
    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AB10> { [ j,                       J,                       semicolon,               Greek_theta,             semicolon,               NoSymbol,                Greek_THETA,             NoSymbol                 ] };
    key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";

    // Space key
    // --------------------------------------------------------------
    key <SPCE> { [ space,                   space,                   space,                   nobreakspace,            KP_0,                    KP_0,                    U202F,                   NoSymbol                 ] };


    // Keypad-keys
    // ===============

    // The former Numlock key:
    key <NMLK> { [ Tab,                     ISO_Left_Tab,            equal,                   approxeq,                notequal,                Pointer_EnableKeys,      identical,               NoSymbol                 ] };

    // Topmost row
    // --------------------------------------------------------------
    key <KPDV> { [ KP_Divide,               KP_Divide,               division,                U2300,                   U2215,                   NoSymbol,                U2223,                   NoSymbol                 ] };
    key <KPMU> { [ KP_Multiply,             KP_Multiply,             U22C5,                   U2299,                   multiply,                NoSymbol,                U2297,                   NoSymbol                 ] };
    key <KPSU> { [ KP_Subtract,             KP_Subtract,             U2212,                   U2296,                   U2216,                   NoSymbol,                U2238,                   NoSymbol                 ] };

    // Top row
    // --------------------------------------------------------------
    key  <KP7> { [ KP_7,                    U2714,                   U2195,                   U226A,                   KP_Home,                 KP_Home,                 upstile,                 NoSymbol                 ] };
    key  <KP8> { [ KP_8,                    U2718,                   uparrow,                 intersection,            KP_Up,                   KP_Up,                   U22C2,                   NoSymbol                 ] };
    key  <KP9> { [ KP_9,                    dagger,                  U20D7,                   U226B,                   KP_Prior,                KP_Prior,                U2309,                   NoSymbol                 ] };
    key <KPAD> { [ KP_Add,                  KP_Add,                  plusminus,               U2295,                   U2213,                   NoSymbol,                U2214,                   NoSymbol                 ] };

    // Middle row
    // --------------------------------------------------------------
    key  <KP4> { [ KP_4,                    club,                    leftarrow,               includedin,              KP_Left,                 KP_Left,                 U2286,                   NoSymbol                 ] };
    key  <KP5> { [ KP_5,                    EuroSign,                colon,                   U22B6,                   KP_Begin,                KP_Begin,                U22B7,                   NoSymbol                 ] };
    key  <KP6> { [ KP_6,                    U2023,                   rightarrow,              includes,                KP_Right,                KP_Right,                U2287,                   NoSymbol                 ] };

    // Bottom row
    // --------------------------------------------------------------
    key  <KP1> { [ KP_1,                    diamond,                 U2194,                   lessthanequal,           KP_End,                  KP_End,                  downstile,               NoSymbol                 ] };
    key  <KP2> { [ KP_2,                    heart,                   downarrow,               union,                   KP_Down,                 KP_Down,                 U22C3,                   NoSymbol                 ] };
    key  <KP3> { [ KP_3,                    U2660,                   U21CC,                   greaterthanequal,        KP_Next,                 KP_Next,                 U230B,                   NoSymbol                 ] };
    key <KPEN> { [ KP_Enter,                KP_Enter,                KP_Enter,                KP_Enter,                KP_Enter,                KP_Enter,                KP_Enter,                NoSymbol                 ] };
    key <KPEQ> { [ KP_Equal,                NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol                 ] };

    // Bottommost row
    // --------------------------------------------------------------
    key  <KP0> { [ KP_0,                    U2423,                   percent,                 U2030,                   KP_Insert,               KP_Insert,               U25A1,                   NoSymbol                 ] };
    key <KPDL> { [ KP_Separator,            period,                  comma,                   minutes,                 KP_Delete,               KP_Delete,               seconds,                 NoSymbol                 ] };
};

partial alphanumeric_keys modifier_keys keypad_keys
xkb_symbols "neo" {

    include "de(neo_base)"

    name[Group1]= "German (Neo 2)";

    include "shift(both_capslock)"
    include "level3(caps_switch)"
    include "level3(bksl_switch)"
    include "level5(lsgt_switch_lock)"
    include "level5(ralt_switch_lock)"
};

// Copied from macintosh_vndr/de
// olh@suse.de   very close to MacOS map

partial alphanumeric_keys
xkb_symbols "mac" {

    include "de"
    name[Group1]= "German (Macintosh)";

    key <AE01>	{ [         1,     exclam,   exclamdown,           at ]	};
    key <AE05>	{ [         5,    percent,  bracketleft       ]	};
    key <AE06>	{ [         6,  ampersand, bracketright       ]	};
    key <AE07>	{ [         7,      slash,          bar,    backslash ]	};
    key <AE08>	{ [         8,  parenleft,    braceleft,   asciitilde ]	};
    key <AE09>	{ [         9, parenright,   braceright       ]	};
    key <AD01>	{ [         q,          Q, guillemotleft, guillemotright ]	};
    key <AD04>	{ [         r,          R,   registered       ]	};
    key <AD07>	{ [         u,          U,    diaeresis,       Aacute ]	};
    key <AD08>	{ [         i,          I,        slash,  Ucircumflex ]	};
    key <AD11>	{ [ udiaeresis, Udiaeresis, periodcentered,    degree ]	};
    key <AD12>	{ [      plus,   asterisk,   asciitilde       ]	};
    key <AC01>	{ [         a,          A,        aring,        Aring ]	};
    key <AC05>	{ [         g,          G,    copyright       ]	};
    key <AC06>	{ [         h,          H,  ordfeminine       ]	};
    key <AC09>	{ [         l,          L,           at       ]	};
    key <AC10>	{ [ odiaeresis, Odiaeresis,  dead_acute       ]	};
    key <AB06>	{ [         n,          N,   asciitilde       ]	};
};

partial alphanumeric_keys
xkb_symbols "mac_nodeadkeys" {
    // modify the standard German mac layout to not have any dead keys
    include "de(mac)"
    name[Group1]= "German (Macintosh, no dead keys)";

    key <TLDE>	{ [ asciicircum,    degree,     notsign       ]	};
    key <AE04>	{ [          4,     dollar,  onequarter,     currency ]	};
    key <AE12>	{ [      acute,      grave,     cedilla       ]	};
    key <AD11>	{ [ udiaeresis, Udiaeresis,   diaeresis       ]	};
    key <AD12>	{ [       plus,   asterisk,  asciitilde,       macron ]	};
    key <AC10>	{ [ odiaeresis, Odiaeresis,       acute       ]	};
    key <AC11>	{ [ adiaeresis, Adiaeresis, asciicircum       ]	};

    key <BKSL>	{ [ numbersign, apostrophe, rightsinglequotemark ] };
};

partial alphanumeric_keys
xkb_symbols "dsb"
{
	include "latin(basic)"
	name[Group1] = "Lower Sorbian";
	key <AB01> { [              z,              Z,         zcaron,         Zcaron ] };
	key <AB02> { [              x,              X,         zacute,         Zacute ] };
	key <AB03> { [              c,              C,         cacute,         Cacute ] };
	key <AB04> { [              v,              V,         ccaron,         Ccaron ] };
	key <AB06> { [              n,              N,         nacute,         Nacute ] };
	key <AC02> { [              s,              S,         sacute,         Sacute ] };
	key <AC03> { [              d,              D,         scaron,         Scaron ] };
	key <AC04> { [              f,              F                                 ] };
	key <AD01> { [              q,              Q                                 ] };
	key <AD02> { [              w,              W                                 ] };
	key <AD03> { [              e,              E,         ecaron,         Ecaron ] };
	key <AD04> { [              r,              R,         racute,         Racute ] };
	key <AD05> { [              t,              T,          U20B5,       EuroSign ] };
	key <AD09> { [              o,              O,         oacute,         Oacute ] };
	include "kpdl(comma)"
	include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "dsb_qwertz"
{
	include "latin(basic)"
	name[Group1] = "Lower Sorbian (QWERTZ)";
	key <AB01> { [              y,              Y                                 ] };
	key <AB02> { [              x,              X                                 ] };
	key <AB03> { [              c,              C,         cacute,         Cacute ] };
	key <AB04> { [              v,              V,         ccaron,         Ccaron ] };
	key <AB06> { [              n,              N,         nacute,         Nacute ] };
	key <AC02> { [              s,              S,         sacute,         Sacute ] };
	key <AC03> { [              d,              D,         scaron,         Scaron ] };
	key <AC04> { [              f,              F                                 ] };
	key <AD01> { [              q,              Q                                 ] };
	key <AD02> { [              w,              W                                 ] };
	key <AD03> { [              e,              E,         ecaron,         Ecaron ] };
	key <AD04> { [              r,              R,         racute,         Racute ] };
	key <AD05> { [              t,              T,          U20B5,       EuroSign ] };
	key <AD06> { [              z,              Z,         zcaron,         Zcaron ] };
	key <AD07> { [              u,              U,         zacute,         Zacute ] };
	key <AD09> { [              o,              O,         oacute,         Oacute ] };
	include "kpdl(comma)"
	include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "qwerty" {

    // This layout should work exactly as a de with the exception 
    // of 'Z' and 'Y' keys, which are in the qwerty style (ie. swapped).
    // 2008 by Matej Košík <kosik@fiit.stuba.sk>

    include "de(basic)"

    name[Group1] = "German (QWERTY)";

    key <AB01>	{ [         z,          Z,     leftarrow,         yen ]	};
    key <AD06>	{ [         y,          Y, guillemotleft,        less ]	};
};

// layout for Russian letters on an german keyboard
// based on US-RU layout by Ivan Popov <pin@konvalo.org> 2005-07-17
// adopted for german layout by Alexey Fisher <bug-track@fisher-privat.net> 2010-08-19

partial alphanumeric_keys
xkb_symbols "ru" {

    include "de(basic)"

    name[Group1]= "Russian (Germany, phonetic)";

    key <LatA> { [        Cyrillic_a,        Cyrillic_A ] };
    key <LatB> { [       Cyrillic_be,       Cyrillic_BE ] };
    key <LatW> { [       Cyrillic_ve,       Cyrillic_VE ] };
    key <LatG> { [      Cyrillic_ghe,      Cyrillic_GHE ] };
    key <LatD> { [       Cyrillic_de,       Cyrillic_DE ] };
    key <LatE> { [       Cyrillic_ie,       Cyrillic_IE ] };
    key <TLDE> { [       Cyrillic_io,       Cyrillic_IO, asciitilde ] };
    key <LatX> { [      Cyrillic_zhe,      Cyrillic_ZHE ] };
    key <LatZ> { [       Cyrillic_ze,       Cyrillic_ZE ] };
    key <LatI> { [        Cyrillic_i,        Cyrillic_I ] };
    key <LatJ> { [   Cyrillic_shorti,   Cyrillic_SHORTI ] };
    key <LatK> { [       Cyrillic_ka,       Cyrillic_KA ] };
    key <LatL> { [       Cyrillic_el,       Cyrillic_EL ] };
    key <LatM> { [       Cyrillic_em,       Cyrillic_EM ] };
    key <LatN> { [       Cyrillic_en,       Cyrillic_EN ] };
    key <LatO> { [        Cyrillic_o,        Cyrillic_O ] };
    key <LatP> { [       Cyrillic_pe,       Cyrillic_PE ] };
    key <LatR> { [       Cyrillic_er,       Cyrillic_ER ] };
    key <LatS> { [       Cyrillic_es,       Cyrillic_ES ] };
    key <LatT> { [       Cyrillic_te,       Cyrillic_TE ] };
    key <LatU> { [        Cyrillic_u,        Cyrillic_U ] };
    key <LatF> { [       Cyrillic_ef,       Cyrillic_EF ] };
    key <LatH> { [       Cyrillic_ha,       Cyrillic_HA ] };
    key <LatC> { [      Cyrillic_tse,      Cyrillic_TSE ] };
    key <AC10> { [      Cyrillic_che,      Cyrillic_CHE ] };
    key <AD11> { [      Cyrillic_sha,      Cyrillic_SHA ] };
    key <AD12> { [    Cyrillic_shcha,    Cyrillic_SHCHA, plus, asterisk ] };
    key <AE12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN ] };
    key <LatY> { [     Cyrillic_yeru,     Cyrillic_YERU ] };
    key <LatV> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN ] };
    key <AC11> { [        Cyrillic_e,        Cyrillic_E ] };
    key <BKSL> { [       Cyrillic_yu,       Cyrillic_YU, numbersign, apostrophe ] };
    key <LatQ> { [       Cyrillic_ya,       Cyrillic_YA ] };

    include "level3(ralt_switch)"
};

// layout for Russian (recommended) letters on a german keyboard
// based on "Russisch für Deutsche, empfohlen" by B. Bendixen und H. Rothe http://russisch.urz.uni-leipzig.de/key2000.htm 2016-02-01
// adapted for Linux by Niko Krause <nikokrause@gmx.de> 2016-06-09

partial alphanumeric_keys
xkb_symbols "ru-recom" {

    include "de(basic)"

    name[Group1]= "Russian (Germany, recommended)";

    key <LatA> { [        Cyrillic_a,        Cyrillic_A ] };
    key <LatB> { [       Cyrillic_be,       Cyrillic_BE ] };
    key <LatW> { [       Cyrillic_ve,       Cyrillic_VE ] };
    key <LatG> { [      Cyrillic_ghe,      Cyrillic_GHE, Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };
    key <LatD> { [       Cyrillic_de,       Cyrillic_DE ] };
    key <LatE> { [       Cyrillic_ie,       Cyrillic_IE ] };
    key <TLDE> { [       Cyrillic_ya,       Cyrillic_YA, asciicircum, degree ] };
    key <LatX> { [      Cyrillic_ha,      Cyrillic_HA ] };
    key <LatZ> { [       Cyrillic_tse,       Cyrillic_TSE ] };
    key <LatI> { [        Cyrillic_i,        Cyrillic_I, Ukrainian_i,  Ukrainian_I ] };
    key <LatJ> { [   Cyrillic_shorti,   Cyrillic_SHORTI, Ukrainian_yi, Ukrainian_YI ] };
    key <LatK> { [       Cyrillic_ka,       Cyrillic_KA ] };
    key <LatL> { [       Cyrillic_el,       Cyrillic_EL ] };
    key <LatM> { [       Cyrillic_em,       Cyrillic_EM ] };
    key <LatN> { [       Cyrillic_en,       Cyrillic_EN ] };
    key <LatO> { [        Cyrillic_o,        Cyrillic_O ] };
    key <LatP> { [       Cyrillic_pe,       Cyrillic_PE ] };
    key <LatR> { [       Cyrillic_er,       Cyrillic_ER ] };
    key <LatS> { [       Cyrillic_es,       Cyrillic_ES, Cyrillic_ze, Cyrillic_ZE ] };
    key <LatT> { [       Cyrillic_te,       Cyrillic_TE ] };
    key <LatU> { [        Cyrillic_u,        Cyrillic_U ] };
    key <LatF> { [       Cyrillic_ef,       Cyrillic_EF ] };
    key <LatH> { [       Cyrillic_zhe,       Cyrillic_ZHE ] };
    key <LatC> { [      Cyrillic_che,      Cyrillic_CHE ] };
    key <AC10> { [      Cyrillic_io,      Cyrillic_IO ] };
    key <AD11> { [      Cyrillic_yu,      Cyrillic_YU ] };
    key <AD12> { [    Cyrillic_sha,    Cyrillic_SHA, plus, asterisk ] };
    key <LSGT> { [ Cyrillic_ze, Cyrillic_ZE ] };
    key <LatY> { [     Cyrillic_yeru,     Cyrillic_YERU ] };
    key <LatV> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN ] };
    key <AC11> { [        Cyrillic_e,        Cyrillic_E, Ukrainian_ie, Ukrainian_IE ] };
    key <BKSL> { [       Cyrillic_hardsign,       Cyrillic_HARDSIGN, numbersign, apostrophe ] };
    key <LatQ> { [       Cyrillic_shcha,       Cyrillic_SHCHA ] };

    key <AE11> { [ asciitilde, question, backslash, questiondown ] };
    key <AE12>	{ [     U0301,      U0300,      U0323,      U0307 ]	};

    include "level3(ralt_switch)"
};

// layout for Russian (transliteration) letters on a german keyboard
// based on "Russisch für Deutsche, Transliteration" by B. Bendixen und H. Rothe http://russisch.urz.uni-leipzig.de/key2000.htm 2016-02-01
// adapted for Linux by Niko Krause <nikokrause@gmx.de> 2016-06-09

partial alphanumeric_keys
xkb_symbols "ru-translit" {

    include "de(basic)"

    name[Group1]= "Russian (Germany, transliteration)";

    key <LatA> { [        Cyrillic_a,        Cyrillic_A ] };
    key <LatB> { [       Cyrillic_be,       Cyrillic_BE ] };
    key <LatW> { [       Cyrillic_sha,       Cyrillic_SHA ] };
    key <LatG> { [      Cyrillic_ghe,      Cyrillic_GHE, Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };
    key <LatD> { [       Cyrillic_de,       Cyrillic_DE ] };
    key <LatE> { [       Cyrillic_ie,       Cyrillic_IE ] };
    key <TLDE> { [       Cyrillic_ya,       Cyrillic_YA, asciicircum, degree ] };
    key <LatX> { [      Cyrillic_ha,      Cyrillic_HA ] };
    key <LatZ> { [       Cyrillic_ze,       Cyrillic_ZE ] };
    key <LatI> { [        Cyrillic_i,        Cyrillic_I, Ukrainian_i,  Ukrainian_I ] };
    key <LatJ> { [   Cyrillic_shorti,   Cyrillic_SHORTI, Ukrainian_yi, Ukrainian_YI ] };
    key <LatK> { [       Cyrillic_ka,       Cyrillic_KA ] };
    key <LatL> { [       Cyrillic_el,       Cyrillic_EL ] };
    key <LatM> { [       Cyrillic_em,       Cyrillic_EM ] };
    key <LatN> { [       Cyrillic_en,       Cyrillic_EN ] };
    key <LatO> { [        Cyrillic_o,        Cyrillic_O ] };
    key <LatP> { [       Cyrillic_pe,       Cyrillic_PE ] };
    key <LatR> { [       Cyrillic_er,       Cyrillic_ER ] };
    key <LatS> { [       Cyrillic_es,       Cyrillic_ES, Cyrillic_che, Cyrillic_CHE ] };
    key <LatT> { [       Cyrillic_te,       Cyrillic_TE ] };
    key <LatU> { [        Cyrillic_u,        Cyrillic_U ] };
    key <LatF> { [       Cyrillic_ef,       Cyrillic_EF ] };
    key <LatH> { [       Cyrillic_zhe,       Cyrillic_ZHE ] };
    key <LatC> { [      Cyrillic_tse,      Cyrillic_TSE ] };
    key <AC10> { [      Cyrillic_io,      Cyrillic_IO ] };
    key <AD11> { [      Cyrillic_yu,      Cyrillic_YU ] };
    key <AD12> { [    Cyrillic_hardsign,    Cyrillic_HARDSIGN, plus, asterisk ] };
    key <LSGT> { [ Cyrillic_che, Cyrillic_CHE ] };
    key <LatY> { [     Cyrillic_yeru,     Cyrillic_YERU ] };
    key <LatV> { [ Cyrillic_ve, Cyrillic_VE ] };
    key <AC11> { [        Cyrillic_e,        Cyrillic_E, Ukrainian_ie, Ukrainian_IE ] };
    key <BKSL> { [       Cyrillic_softsign,       Cyrillic_SOFTSIGN, numbersign, apostrophe ] };
    key <LatQ> { [       Cyrillic_shcha,       Cyrillic_SHCHA ] };

    key <AE11> { [ asciitilde, question, backslash, questiondown ] };
    key <AE12>	{ [     U0301,      U0300,      U0323,      U0307 ]	};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "pl" {

    // Combined layout for entering both German and Polish symbols on a German physical
    // keyboard. Based on German (no dead keys) and Polish (basic). Polish diacritics
    // on AltGr+"acelnosxz". EuroSign moved to AE04 (AltGr+dollar key) to avoid conflict
    // with Polish eogonek.
    //
    // https://github.com/kontextify/xkeyboard-config

    include "latin(type4)"
    include "de(nodeadkeys)"

    name[Group1]= "Polish (Germany, no dead keys)";

    key <AE04>	{ [         4,     dollar,   EuroSign,     currency ]	};

    key <AD01>  { [         q,          Q ] };
    key <AD02>  { [         w,          W ] };
    key <AD03>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD09>	{ [         o,          O,       oacute,       Oacute ]	};
    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC04>  { [         f,          F ] };
    key <AD06>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "tr" {

    // add turkish-specific letters to the basic German layout.
    // Turkish symbols are accessible with combination of <AltGr> and
    // 'i', 's', 'g', 'c'' (+<Shift> for capital letters).

    include "de(basic)"

    name[Group1]="Turkish (Germany)";

    key <AD08>  { [    i,      I,      U0131,  U0130   ] };
    key <AC02>  { [    s,      S,      U015F,  U015E   ] };
    key <AC05>  { [    g,      G,      U011F,  U011E   ] };
    key <AB03>  { [    c,      C,      U0E7,   U0C7    ] };
};

partial alphanumeric_keys
xkb_symbols "us" {
    include "us"

    name[Group1]="German (US)";

    key <AE03> { [           3, numbersign,    section,     degree ] };
    key <AE11> { [       minus, underscore,     ssharp,      U1E9E ] };

    key <AD03> { [           e,          E,   EuroSign,       cent ] };
    key <AD07> { [           u,          U, udiaeresis, Udiaeresis ] };
    key <AD09> { [           o,          O, odiaeresis, Odiaeresis ] };
    key <AD11> { [ bracketleft,  braceleft, udiaeresis, Udiaeresis ] };

    key <AC01> { [           a,          A, adiaeresis, Adiaeresis ] };
    key <AC02> { [           s,          S,     ssharp,      U1E9E ] };
    key <AC10> { [   semicolon,      colon, odiaeresis, Odiaeresis ] };
    key <AC11> { [  apostrophe,   quotedbl, adiaeresis, Adiaeresis ] };

    key <AB03> { [           c,          C,  Multi_key,  Multi_key ] };
    key <AB07> { [           m,          M, dead_greek,       Menu ] };

    include "level3(ralt_switch)"
};

// EXTRAS:

partial alphanumeric_keys
xkb_symbols "hu" {

    // modify the basic German layout to not have any dead keys and add Hungarian letters

    include "de(basic)"
    name[Group1]="German (with Hungarian letters, no dead keys)";

    key <AB01> { [         y,          Y,        guillemotleft,         less ] };
    key <AC10> { [odiaeresis, Odiaeresis,               eacute,       Eacute ] };
    key <AC11> { [adiaeresis, Adiaeresis,               aacute,        Aacute] };
    key <AD03> { [         e,          E,             EuroSign,     EuroSign ] };
    key <AD06> { [         z,          Z,            leftarrow,          yen ] };
    key <AD07> { [         u,          U,               uacute,       Uacute ] };
    key <AD08> { [         i,          I,               iacute,       Iacute ] };
    key <AD09> { [         o,          O,         odoubleacute, Odoubleacute ] };
    key <AD11> { [udiaeresis, Udiaeresis,         udoubleacute, Udoubleacute ] };
    key <AD12> { [      plus,   asterisk,           asciitilde,       macron ] };
    key <AE12> { [     acute,      grave,               oacute,       Oacute ] };
    key <BKSL> { [numbersign, apostrophe, rightsinglequotemark,        grave ] };
    key <TLDE> { [asciicircum,    degree,              notsign,      notsign ] };
};

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/de(sun_type6)"
};

partial alphanumeric_keys
xkb_symbols "adnw_base" {
    include "de(neo_base)"

    key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AD04> { [ period,                  enfilledcircbullet,      NoSymbol,                U03D1,                   NoSymbol,                NoSymbol,                U21A6,                   NoSymbol                 ] };
    key <AB04> { [ comma,                   endash,                  NoSymbol,                U03F1,                   NoSymbol,                NoSymbol,                U21D2,                   NoSymbol                 ] };

    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AD01> { [ k,                       K,                       NoSymbol,                Greek_kappa,             NoSymbol,                NoSymbol,                multiply,                NoSymbol                 ] };
    key <AD02> { [ u,                       U,                       NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                includedin,              NoSymbol                 ] };
    key <AD03> { [ udiaeresis,              Udiaeresis,              NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                union,                   NoSymbol                 ] };
    key <AD05> { [ adiaeresis,              Adiaeresis,              NoSymbol,                Greek_eta,               NoSymbol,                NoSymbol,                U2135,                   NoSymbol                 ] };
    key <AD06> { [ v,                       V,                       NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                radical,                 NoSymbol                 ] };
    key <AD07> { [ g,                       G,                       NoSymbol,                Greek_gamma,             NoSymbol,                NoSymbol,                Greek_GAMMA,             NoSymbol                 ] };
    key <AD08> { [ c,                       C,                       NoSymbol,                Greek_chi,               NoSymbol,                NoSymbol,                U2102,                   NoSymbol                 ] };
    key <AD09> { [ l,                       L,                       NoSymbol,                Greek_lambda,            NoSymbol,                NoSymbol,                Greek_LAMBDA,            NoSymbol                 ] };
    key <AD10> { [ j,                       J,                       NoSymbol,                Greek_theta,             NoSymbol,                NoSymbol,                Greek_THETA,             NoSymbol                 ] };
    key <AD11> { [ f,                       F,                       NoSymbol,                Greek_phi,               NoSymbol,                NoSymbol,                Greek_PHI,               NoSymbol                 ] };
    key <AC01> { [ h,                       H,                       NoSymbol,                Greek_psi,               NoSymbol,                NoSymbol,                Greek_PSI,               NoSymbol                 ] };
    key <AC02> { [ i,                       I,                       NoSymbol,                Greek_iota,              NoSymbol,                NoSymbol,                integral,                NoSymbol                 ] };
    key <AC03> { [ e,                       E,                       NoSymbol,                Greek_epsilon,           NoSymbol,                NoSymbol,                U2203,                   NoSymbol                 ] };
    key <AC04> { [ a,                       A,                       NoSymbol,                Greek_alpha,             NoSymbol,                NoSymbol,                U2200,                   NoSymbol                 ] };
    key <AC05> { [ o,                       O,                       NoSymbol,                Greek_omicron,           NoSymbol,                NoSymbol,                elementof,               NoSymbol                 ] };
    key <AC06> { [ d,                       D,                       NoSymbol,                Greek_delta,             NoSymbol,                NoSymbol,                Greek_DELTA,             NoSymbol                 ] };
    key <AC07> { [ t,                       T,                       NoSymbol,                Greek_tau,               NoSymbol,                NoSymbol,                partialderivative,       NoSymbol                 ] };
    key <AC08> { [ r,                       R,                       NoSymbol,                Greek_rho,               NoSymbol,                NoSymbol,                U211D,                   NoSymbol                 ] };
    key <AC09> { [ n,                       N,                       NoSymbol,                Greek_nu,                NoSymbol,                NoSymbol,                U2115,                   NoSymbol                 ] };
    key <AC10> { [ s,                       S,                       NoSymbol,                Greek_sigma,             NoSymbol,                NoSymbol,                Greek_SIGMA,             NoSymbol                 ] };
    key <AC11> { [ ssharp,                  U1E9E,                   NoSymbol,                Greek_finalsmallsigma,   NoSymbol,                NoSymbol,                jot,                     NoSymbol                 ] };
    key <AB01> { [ x,                       X,                       NoSymbol,                Greek_xi,                NoSymbol,                NoSymbol,                Greek_XI,                NoSymbol                 ] };
    key <AB02> { [ y,                       Y,                       NoSymbol,                Greek_upsilon,           NoSymbol,                NoSymbol,                nabla,                   NoSymbol                 ] };
    key <AB03> { [ odiaeresis,              Odiaeresis,              NoSymbol,                U03F5,                   NoSymbol,                NoSymbol,                intersection,            NoSymbol                 ] };
    key <AB05> { [ q,                       Q,                       NoSymbol,                U03D5,                   NoSymbol,                NoSymbol,                U211A,                   NoSymbol                 ] };
    key <AB06> { [ b,                       B,                       NoSymbol,                Greek_beta,              NoSymbol,                NoSymbol,                U21D0,                   NoSymbol                 ] };
    key <AB07> { [ p,                       P,                       NoSymbol,                Greek_pi,                NoSymbol,                NoSymbol,                Greek_PI,                NoSymbol                 ] };
    key <AB08> { [ w,                       W,                       NoSymbol,                Greek_omega,             NoSymbol,                NoSymbol,                Greek_OMEGA,             NoSymbol                 ] };
    key <AB09> { [ m,                       M,                       NoSymbol,                Greek_mu,                NoSymbol,                NoSymbol,                ifonlyif,                NoSymbol                 ] };
    key <AB10> { [ z,                       Z,                       NoSymbol,                Greek_zeta,              NoSymbol,                NoSymbol,                U2124,                   NoSymbol                 ] };
};

partial alphanumeric_keys modifier_keys keypad_keys
xkb_symbols "adnw" {

    include "de(adnw_base)"

    name[Group1]= "German (Aus der Neo-Welt)";

    include "shift(both_capslock)"
    include "level3(caps_switch)"
    include "level3(bksl_switch)"
    include "level5(lsgt_switch_lock)"
    include "level5(ralt_switch_lock)"
};

partial alphanumeric_keys
xkb_symbols "koy_base" {
    include "de(neo_base)"

    key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AD02> { [ period,                  enfilledcircbullet,      NoSymbol,                U03D1,                   NoSymbol,                NoSymbol,                U21A6,                   NoSymbol                 ] };
    key <AD04> { [ comma,                   endash,                  NoSymbol,                U03F1,                   NoSymbol,                NoSymbol,                U21D2,                   NoSymbol                 ] };

    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AD01> { [ k,                       K,                       NoSymbol,                Greek_kappa,             NoSymbol,                NoSymbol,                multiply,                NoSymbol                 ] };
    key <AD03> { [ o,                       O,                       NoSymbol,                Greek_omicron,           NoSymbol,                NoSymbol,                elementof,               NoSymbol                 ] };
    key <AD05> { [ y,                       Y,                       NoSymbol,                Greek_upsilon,           NoSymbol,                NoSymbol,                nabla,                   NoSymbol                 ] };
    key <AD06> { [ v,                       V,                       NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                radical,                 NoSymbol                 ] };
    key <AD07> { [ g,                       G,                       NoSymbol,                Greek_gamma,             NoSymbol,                NoSymbol,                Greek_GAMMA,             NoSymbol                 ] };
    key <AD08> { [ c,                       C,                       NoSymbol,                Greek_chi,               NoSymbol,                NoSymbol,                U2102,                   NoSymbol                 ] };
    key <AD09> { [ l,                       L,                       NoSymbol,                Greek_lambda,            NoSymbol,                NoSymbol,                Greek_LAMBDA,            NoSymbol                 ] };
    key <AD10> { [ ssharp,                  U1E9E,                   NoSymbol,                Greek_finalsmallsigma,   NoSymbol,                NoSymbol,                jot,                     NoSymbol                 ] };
    key <AD11> { [ z,                       Z,                       NoSymbol,                Greek_zeta,              NoSymbol,                NoSymbol,                U2124,                   NoSymbol                 ] };
    key <AC01> { [ h,                       H,                       NoSymbol,                Greek_psi,               NoSymbol,                NoSymbol,                Greek_PSI,               NoSymbol                 ] };
    key <AC02> { [ a,                       A,                       NoSymbol,                Greek_alpha,             NoSymbol,                NoSymbol,                U2200,                   NoSymbol                 ] };
    key <AC03> { [ e,                       E,                       NoSymbol,                Greek_epsilon,           NoSymbol,                NoSymbol,                U2203,                   NoSymbol                 ] };
    key <AC04> { [ i,                       I,                       NoSymbol,                Greek_iota,              NoSymbol,                NoSymbol,                integral,                NoSymbol                 ] };
    key <AC05> { [ u,                       U,                       NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                includedin,              NoSymbol                 ] };
    key <AC06> { [ d,                       D,                       NoSymbol,                Greek_delta,             NoSymbol,                NoSymbol,                Greek_DELTA,             NoSymbol                 ] };
    key <AC07> { [ t,                       T,                       NoSymbol,                Greek_tau,               NoSymbol,                NoSymbol,                partialderivative,       NoSymbol                 ] };
    key <AC08> { [ r,                       R,                       NoSymbol,                Greek_rho,               NoSymbol,                NoSymbol,                U211D,                   NoSymbol                 ] };
    key <AC09> { [ n,                       N,                       NoSymbol,                Greek_nu,                NoSymbol,                NoSymbol,                U2115,                   NoSymbol                 ] };
    key <AC10> { [ s,                       S,                       NoSymbol,                Greek_sigma,             NoSymbol,                NoSymbol,                Greek_SIGMA,             NoSymbol                 ] };
    key <AC11> { [ f,                       F,                       NoSymbol,                Greek_phi,               NoSymbol,                NoSymbol,                Greek_PHI,               NoSymbol                 ] };
    key <AB01> { [ x,                       X,                       NoSymbol,                Greek_xi,                NoSymbol,                NoSymbol,                Greek_XI,                NoSymbol                 ] };
    key <AB02> { [ q,                       Q,                       NoSymbol,                U03D5,                   NoSymbol,                NoSymbol,                U211A,                   NoSymbol                 ] };
    key <AB03> { [ adiaeresis,              Adiaeresis,              NoSymbol,                Greek_eta,               NoSymbol,                NoSymbol,                U2135,                   NoSymbol                 ] };
    key <AB04> { [ udiaeresis,              Udiaeresis,              NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                union,                   NoSymbol                 ] };
    key <AB05> { [ odiaeresis,              Odiaeresis,              NoSymbol,                U03F5,                   NoSymbol,                NoSymbol,                intersection,            NoSymbol                 ] };
    key <AB06> { [ b,                       B,                       NoSymbol,                Greek_beta,              NoSymbol,                NoSymbol,                U21D0,                   NoSymbol                 ] };
    key <AB07> { [ p,                       P,                       NoSymbol,                Greek_pi,                NoSymbol,                NoSymbol,                Greek_PI,                NoSymbol                 ] };
    key <AB08> { [ w,                       W,                       NoSymbol,                Greek_omega,             NoSymbol,                NoSymbol,                Greek_OMEGA,             NoSymbol                 ] };
    key <AB09> { [ m,                       M,                       NoSymbol,                Greek_mu,                NoSymbol,                NoSymbol,                ifonlyif,                NoSymbol                 ] };
    key <AB10> { [ j,                       J,                       NoSymbol,                Greek_theta,             NoSymbol,                NoSymbol,                Greek_THETA,             NoSymbol                 ] };
};

partial alphanumeric_keys modifier_keys keypad_keys
xkb_symbols "koy" {

    include "de(koy_base)"

    name[Group1]= "German (KOY)";

    include "shift(both_capslock)"
    include "level3(caps_switch)"
    include "level3(bksl_switch)"
    include "level5(lsgt_switch_lock)"
    include "level5(ralt_switch_lock)"
};

partial alphanumeric_keys
xkb_symbols "bone_base" {
    include "de(neo_base)"

    key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AB08> { [ comma,                   endash,                  NoSymbol,                U03F1,                   NoSymbol,                NoSymbol,                U21D2,                   NoSymbol                 ] };
    key <AB09> { [ period,                  enfilledcircbullet,      NoSymbol,                U03D1,                   NoSymbol,                NoSymbol,                U21A6,                   NoSymbol                 ] };

    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AD01> { [ j,                       J,                       NoSymbol,                Greek_theta,             NoSymbol,                NoSymbol,                Greek_THETA,             NoSymbol                 ] };
    key <AD02> { [ d,                       D,                       NoSymbol,                Greek_delta,             NoSymbol,                NoSymbol,                Greek_DELTA,             NoSymbol                 ] };
    key <AD03> { [ u,                       U,                       NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                includedin,              NoSymbol                 ] };
    key <AD04> { [ a,                       A,                       NoSymbol,                Greek_alpha,             NoSymbol,                NoSymbol,                U2200,                   NoSymbol                 ] };
    key <AD05> { [ x,                       X,                       NoSymbol,                Greek_xi,                NoSymbol,                NoSymbol,                Greek_XI,                NoSymbol                 ] };
    key <AD06> { [ p,                       P,                       NoSymbol,                Greek_pi,                NoSymbol,                NoSymbol,                Greek_PI,                NoSymbol                 ] };
    key <AD07> { [ h,                       H,                       NoSymbol,                Greek_psi,               NoSymbol,                NoSymbol,                Greek_PSI,               NoSymbol                 ] };
    key <AD08> { [ l,                       L,                       NoSymbol,                Greek_lambda,            NoSymbol,                NoSymbol,                Greek_LAMBDA,            NoSymbol                 ] };
    key <AD09> { [ m,                       M,                       NoSymbol,                Greek_mu,                NoSymbol,                NoSymbol,                ifonlyif,                NoSymbol                 ] };
    key <AD10> { [ w,                       W,                       NoSymbol,                Greek_omega,             NoSymbol,                NoSymbol,                Greek_OMEGA,             NoSymbol                 ] };
    key <AD11> { [ ssharp,                  U1E9E,                   NoSymbol,                Greek_finalsmallsigma,   NoSymbol,                NoSymbol,                jot,                     NoSymbol                 ] };
    key <AC01> { [ c,                       C,                       NoSymbol,                Greek_chi,               NoSymbol,                NoSymbol,                U2102,                   NoSymbol                 ] };
    key <AC02> { [ t,                       T,                       NoSymbol,                Greek_tau,               NoSymbol,                NoSymbol,                partialderivative,       NoSymbol                 ] };
    key <AC03> { [ i,                       I,                       NoSymbol,                Greek_iota,              NoSymbol,                NoSymbol,                integral,                NoSymbol                 ] };
    key <AC04> { [ e,                       E,                       NoSymbol,                Greek_epsilon,           NoSymbol,                NoSymbol,                U2203,                   NoSymbol                 ] };
    key <AC05> { [ o,                       O,                       NoSymbol,                Greek_omicron,           NoSymbol,                NoSymbol,                elementof,               NoSymbol                 ] };
    key <AC06> { [ b,                       B,                       NoSymbol,                Greek_beta,              NoSymbol,                NoSymbol,                U21D0,                   NoSymbol                 ] };
    key <AC07> { [ n,                       N,                       NoSymbol,                Greek_nu,                NoSymbol,                NoSymbol,                U2115,                   NoSymbol                 ] };
    key <AC08> { [ r,                       R,                       NoSymbol,                Greek_rho,               NoSymbol,                NoSymbol,                U211D,                   NoSymbol                 ] };
    key <AC09> { [ s,                       S,                       NoSymbol,                Greek_sigma,             NoSymbol,                NoSymbol,                Greek_SIGMA,             NoSymbol                 ] };
    key <AC10> { [ g,                       G,                       NoSymbol,                Greek_gamma,             NoSymbol,                NoSymbol,                Greek_GAMMA,             NoSymbol                 ] };
    key <AC11> { [ q,                       Q,                       NoSymbol,                U03D5,                   NoSymbol,                NoSymbol,                U211A,                   NoSymbol                 ] };
    key <AB01> { [ f,                       F,                       NoSymbol,                Greek_phi,               NoSymbol,                NoSymbol,                Greek_PHI,               NoSymbol                 ] };
    key <AB02> { [ v,                       V,                       NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                radical,                 NoSymbol                 ] };
    key <AB03> { [ udiaeresis,              Udiaeresis,              NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                union,                   NoSymbol                 ] };
    key <AB04> { [ adiaeresis,              Adiaeresis,              NoSymbol,                Greek_eta,               NoSymbol,                NoSymbol,                U2135,                   NoSymbol                 ] };
    key <AB05> { [ odiaeresis,              Odiaeresis,              NoSymbol,                U03F5,                   NoSymbol,                NoSymbol,                intersection,            NoSymbol                 ] };
    key <AB06> { [ y,                       Y,                       NoSymbol,                Greek_upsilon,           NoSymbol,                NoSymbol,                nabla,                   NoSymbol                 ] };
    key <AB07> { [ z,                       Z,                       NoSymbol,                Greek_zeta,              NoSymbol,                NoSymbol,                U2124,                   NoSymbol                 ] };
    key <AB10> { [ k,                       K,                       NoSymbol,                Greek_kappa,             NoSymbol,                NoSymbol,                multiply,                NoSymbol                 ] };
};

partial alphanumeric_keys modifier_keys keypad_keys
xkb_symbols "bone" {

    include "de(bone_base)"

    name[Group1]= "German (Bone)";

    include "shift(both_capslock)"
    include "level3(caps_switch)"
    include "level3(bksl_switch)"
    include "level5(lsgt_switch_lock)"
    include "level5(ralt_switch_lock)"
};

partial alphanumeric_keys
xkb_symbols "bone_eszett_home_base" {
    include "de(bone_base)"

    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AD11> { [ q,                       Q,                       NoSymbol,                U03D5,                   NoSymbol,                NoSymbol,                U211A,                   NoSymbol                 ] };
    key <AC11> { [ ssharp,                  U1E9E,                   NoSymbol,                Greek_finalsmallsigma,   NoSymbol,                NoSymbol,                jot,                     NoSymbol                 ] };
};

partial alphanumeric_keys modifier_keys keypad_keys
xkb_symbols "bone_eszett_home" {

    include "de(bone_eszett_home_base)"

    name[Group1]= "German (Bone, eszett in the home row)";

    include "shift(both_capslock)"
    include "level3(caps_switch)"
    include "level3(bksl_switch)"
    include "level5(lsgt_switch_lock)"
    include "level5(ralt_switch_lock)"
};

partial alphanumeric_keys
xkb_symbols "neo_qwertz_base" {
    include "de(neo_base)"

    key.type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK";
    key <AB08> { [ comma,                   endash,                  NoSymbol,                U03F1,                   NoSymbol,                NoSymbol,                U21D2,                   NoSymbol                 ] };
    key <AB09> { [ period,                  enfilledcircbullet,      NoSymbol,                U03D1,                   NoSymbol,                NoSymbol,                U21A6,                   NoSymbol                 ] };
    key <AB10> { [ minus,                   emdash,                  NoSymbol,                U2011,                   NoSymbol,                NoSymbol,                hyphen,                  NoSymbol                 ] };

    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AE11> { [ ssharp,                  U1E9E,                   NoSymbol,                Greek_finalsmallsigma,   NoSymbol,                NoSymbol,                jot,                     NoSymbol                 ] };
    key <AD01> { [ q,                       Q,                       NoSymbol,                U03D5,                   NoSymbol,                NoSymbol,                U211A,                   NoSymbol                 ] };
    key <AD02> { [ w,                       W,                       NoSymbol,                Greek_omega,             NoSymbol,                NoSymbol,                Greek_OMEGA,             NoSymbol                 ] };
    key <AD03> { [ e,                       E,                       NoSymbol,                Greek_epsilon,           NoSymbol,                NoSymbol,                U2203,                   NoSymbol                 ] };
    key <AD04> { [ r,                       R,                       NoSymbol,                Greek_rho,               NoSymbol,                NoSymbol,                U211D,                   NoSymbol                 ] };
    key <AD05> { [ t,                       T,                       NoSymbol,                Greek_tau,               NoSymbol,                NoSymbol,                partialderivative,       NoSymbol                 ] };
    key <AD06> { [ z,                       Z,                       NoSymbol,                Greek_zeta,              NoSymbol,                NoSymbol,                U2124,                   NoSymbol                 ] };
    key <AD07> { [ u,                       U,                       NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                includedin,              NoSymbol                 ] };
    key <AD08> { [ i,                       I,                       NoSymbol,                Greek_iota,              NoSymbol,                NoSymbol,                integral,                NoSymbol                 ] };
    key <AD09> { [ o,                       O,                       NoSymbol,                Greek_omicron,           NoSymbol,                NoSymbol,                elementof,               NoSymbol                 ] };
    key <AD10> { [ p,                       P,                       NoSymbol,                Greek_pi,                NoSymbol,                NoSymbol,                Greek_PI,                NoSymbol                 ] };
    key <AD11> { [ udiaeresis,              Udiaeresis,              NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                union,                   NoSymbol                 ] };
    key <AC01> { [ a,                       A,                       NoSymbol,                Greek_alpha,             NoSymbol,                NoSymbol,                U2200,                   NoSymbol                 ] };
    key <AC02> { [ s,                       S,                       NoSymbol,                Greek_sigma,             NoSymbol,                NoSymbol,                Greek_SIGMA,             NoSymbol                 ] };
    key <AC03> { [ d,                       D,                       NoSymbol,                Greek_delta,             NoSymbol,                NoSymbol,                Greek_DELTA,             NoSymbol                 ] };
    key <AC04> { [ f,                       F,                       NoSymbol,                Greek_phi,               NoSymbol,                NoSymbol,                Greek_PHI,               NoSymbol                 ] };
    key <AC05> { [ g,                       G,                       NoSymbol,                Greek_gamma,             NoSymbol,                NoSymbol,                Greek_GAMMA,             NoSymbol                 ] };
    key <AC06> { [ h,                       H,                       NoSymbol,                Greek_psi,               NoSymbol,                NoSymbol,                Greek_PSI,               NoSymbol                 ] };
    key <AC07> { [ j,                       J,                       NoSymbol,                Greek_theta,             NoSymbol,                NoSymbol,                Greek_THETA,             NoSymbol                 ] };
    key <AC08> { [ k,                       K,                       NoSymbol,                Greek_kappa,             NoSymbol,                NoSymbol,                multiply,                NoSymbol                 ] };
    key <AC09> { [ l,                       L,                       NoSymbol,                Greek_lambda,            NoSymbol,                NoSymbol,                Greek_LAMBDA,            NoSymbol                 ] };
    key <AC10> { [ odiaeresis,              Odiaeresis,              NoSymbol,                U03F5,                   NoSymbol,                NoSymbol,                intersection,            NoSymbol                 ] };
    key <AC11> { [ adiaeresis,              Adiaeresis,              NoSymbol,                Greek_eta,               NoSymbol,                NoSymbol,                U2135,                   NoSymbol                 ] };
    key <AB01> { [ y,                       Y,                       NoSymbol,                Greek_upsilon,           NoSymbol,                NoSymbol,                nabla,                   NoSymbol                 ] };
    key <AB02> { [ x,                       X,                       NoSymbol,                Greek_xi,                NoSymbol,                NoSymbol,                Greek_XI,                NoSymbol                 ] };
    key <AB03> { [ c,                       C,                       NoSymbol,                Greek_chi,               NoSymbol,                NoSymbol,                U2102,                   NoSymbol                 ] };
    key <AB04> { [ v,                       V,                       NoSymbol,                NoSymbol,                NoSymbol,                NoSymbol,                radical,                 NoSymbol                 ] };
    key <AB05> { [ b,                       B,                       NoSymbol,                Greek_beta,              NoSymbol,                NoSymbol,                U21D0,                   NoSymbol                 ] };
    key <AB06> { [ n,                       N,                       NoSymbol,                Greek_nu,                NoSymbol,                NoSymbol,                U2115,                   NoSymbol                 ] };
    key <AB07> { [ m,                       M,                       NoSymbol,                Greek_mu,                NoSymbol,                NoSymbol,                ifonlyif,                NoSymbol                 ] };
};

partial alphanumeric_keys modifier_keys keypad_keys
xkb_symbols "neo_qwertz" {

    include "de(neo_qwertz_base)"

    name[Group1]= "German (Neo, QWERTZ)";

    include "shift(both_capslock)"
    include "level3(caps_switch)"
    include "level3(bksl_switch)"
    include "level5(lsgt_switch_lock)"
    include "level5(ralt_switch_lock)"
};

partial alphanumeric_keys
xkb_symbols "neo_qwerty_base" {
    include "de(neo_qwertz_base)"

    key.type[Group1] = "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK";
    key <AD06> { [ y,                       Y,                       NoSymbol,                Greek_upsilon,           NoSymbol,                NoSymbol,                nabla,                   NoSymbol                 ] };
    key <AB01> { [ z,                       Z,                       NoSymbol,                Greek_zeta,              NoSymbol,                NoSymbol,                U2124,                   NoSymbol                 ] };
};

partial alphanumeric_keys modifier_keys keypad_keys
xkb_symbols "neo_qwerty" {

    include "de(neo_qwerty_base)"

    name[Group1]= "German (Neo, QWERTY)";

    include "shift(both_capslock)"
    include "level3(caps_switch)"
    include "level3(bksl_switch)"
    include "level5(lsgt_switch_lock)"
    include "level5(ralt_switch_lock)"
};

partial alphanumeric_keys
    xkb_symbols "lld" {
    include "de(basic)"
    name[Group1] = "German (Ladin)";

    key <AD10> { [ p, P, ediaeresis, Ediaeresis ] };
};
// New style XKB layout for some widely used Hungarian keyboard layouts
//
// Based on old style 'xkb/symbols/hu"
//
// (C) 2002-2004 Soós Péter <sp@osb.hu>
// (C) 2010 Andras Timar <timar@fsf.hu>
//
// Permission is granted to anyone to use, distribute and modify
// this file in any way, provided that the above copyright notice
// is left intact and the author of the modification summarizes
// the changes in this header.
//
// This file is distributed without any expressed or implied warranty.
//
// Changes:
//  2004-04-17 - Moved to new style (only Unicode based layouts)
//             - Added consistent dead key support
//             - Fixed abovedot
//             - Added adiaeresis
//             - Added EuroSign and cent symbol
//  2010-04-23 - Added doublelowquotemark
//             - Added rightdoublequotemark
//             - Added endash
//  2010-05-13 - Added ellipsis


// Default layout
default partial
xkb_symbols "basic" {
    include "hu(102_qwertz_comma_dead)"
    name[Group1] = "Hungarian";
};

// Standard layout
partial
xkb_symbols "standard" {
    include "hu(102_qwertz_comma_dead)"
    name[Group1] = "Hungarian (standard)";
};

// Standard layout without dead key support
partial
xkb_symbols "nodeadkeys" {
    include "hu(102_qwertz_comma_nodead)"
    name[Group1] = "Hungarian (no dead keys)";
};

// Qwerty layout
partial
xkb_symbols "qwerty" {
    include "hu(101_qwerty_comma_dead)"
    name[Group1] = "Hungarian (QWERTY)";
};

// Main layouts

// 101_qwertz_comma_dead
// 101 key qwertz layout
// with decimal comma on keypad
// and with dead key support
partial
xkb_symbols "101_qwertz_comma_dead" {
    name[Group1] = "Hungarian (QWERTZ, 101-key, comma, dead keys)";
    include "latin"
    include "hu(def_101)"
    include "hu(def_qwertz)"
    include "kpdl(comma)"
    include "hu(def_dead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 101_qwertz_comma_nodead
// 101 key qwertz layout
// with decimal comma on keypad
// and without dead key support
partial
xkb_symbols "101_qwertz_comma_nodead" {
    name[Group1] = "Hungarian (QWERTZ, 101-key, comma, no dead keys)";
    include "latin"
    include "hu(def_101)"
    include "hu(def_qwertz)"
    include "kpdl(comma)"
    include "hu(def_nodead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 101_qwertz_dot_dead
// 101 key qwertz layout
// with decimal dot on keypad
// and with dead key support
partial
xkb_symbols "101_qwertz_dot_dead" {
    name[Group1] = "Hungarian (QWERTZ, 101-key, dot, dead keys)";
    include "latin"
    include "hu(def_101)"
    include "hu(def_qwertz)"
    include "hu(def_dot)"
    include "hu(def_dead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 101_qwertz_dot_nodead
// 101 key qwertz layout
// with decimal dot on keypad
// and without dead key support
partial
xkb_symbols "101_qwertz_dot_nodead" {
    name[Group1] = "Hungarian (QWERTZ, 101-key, dot, no dead keys)";
    include "latin"
    include "hu(def_101)"
    include "hu(def_qwertz)"
    include "hu(def_dot)"
    include "hu(def_nodead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 101_qwerty_comma_dead
// 101 key qwerty layout
// with decimal comma on keypad
// and with dead key support
partial
xkb_symbols "101_qwerty_comma_dead" {
    name[Group1] = "Hungarian (QWERTY, 101-key, comma, dead keys)";
    include "latin"
    include "hu(def_101)"
    include "hu(def_qwerty)"
    include "kpdl(comma)"
    include "hu(def_dead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 101_qwerty_comma_nodead
// 101 key qwerty layout
// with decimal comma on keypad
// and without dead key support
partial
xkb_symbols "101_qwerty_comma_nodead" {
    name[Group1] = "Hungarian (QWERTY, 101-key, comma, no dead keys)";
    include "latin"
    include "hu(def_101)"
    include "hu(def_qwerty)"
    include "kpdl(comma)"
    include "hu(def_nodead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 101_qwerty_dot_dead
// 101 key qwerty layout
// with decimal dot on keypad
// and with dead key support
partial
xkb_symbols "101_qwerty_dot_dead" {
    name[Group1] = "Hungarian (QWERTY, 101-key, dot, dead keys)";
    include "latin"
    include "hu(def_101)"
    include "hu(def_qwerty)"
    include "hu(def_dot)"
    include "hu(def_dead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 101_qwerty_dot_nodead
// 101 key qwerty layout
// with decimal dot on keypad
// and without dead key support
partial
xkb_symbols "101_qwerty_dot_nodead" {
    name[Group1] = "Hungarian (QWERTY, 101-key, dot, no dead keys)";
    include "latin"
    include "hu(def_101)"
    include "hu(def_qwerty)"
    include "hu(def_dot)"
    include "hu(def_nodead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 102_qwertz_comma_dead
// 102 key qwertz layout
// with decimal comma on keypad
// and with dead key support
partial
xkb_symbols "102_qwertz_comma_dead" {
    name[Group1] = "Hungarian (QWERTZ, 102-key, comma, dead keys)";
    include "latin"
    include "hu(def_102)"
    include "hu(def_qwertz)"
    include "kpdl(comma)"
    include "hu(def_dead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 102_qwertz_comma_nodead
// 102 key qwertz layout
// with decimal comma on keypad
// and without dead key support
partial
xkb_symbols "102_qwertz_comma_nodead" {
    name[Group1] = "Hungarian (QWERTZ, 102-key, comma, no dead keys)";
    include "latin"
    include "hu(def_102)"
    include "hu(def_qwertz)"
    include "kpdl(comma)"
    include "hu(def_nodead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 102_qwertz_dot_dead
// 102 key qwertz layout
// with decimal dot on keypad
// and with dead key support
partial
xkb_symbols "102_qwertz_dot_dead" {
    name[Group1] = "Hungarian (QWERTZ, 102-key, dot, dead keys)";
    include "latin"
    include "hu(def_102)"
    include "hu(def_qwertz)"
    include "hu(def_dot)"
    include "hu(def_dead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 102_qwertz_dot_nodead
// 102 key qwertz layout
// with decimal dot on keypad
// and without dead key support
partial
xkb_symbols "102_qwertz_dot_nodead" {
    name[Group1] = "Hungarian (QWERTZ, 102-key, dot, no dead keys)";
    include "latin"
    include "hu(def_102)"
    include "hu(def_qwertz)"
    include "hu(def_dot)"
    include "hu(def_nodead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 102_qwerty_comma_dead
// 102 key qwerty layout
// with decimal comma on keypad
// and with dead key support
partial
xkb_symbols "102_qwerty_comma_dead" {
    name[Group1] = "Hungarian (QWERTY, 102-key, comma, dead keys)";
    include "latin"
    include "hu(def_102)"
    include "hu(def_qwerty)"
    include "kpdl(comma)"
    include "hu(def_dead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 102_qwerty_comma_nodead
// 102 key qwerty layout
// with decimal comma on keypad
// and without dead key support
partial
xkb_symbols "102_qwerty_comma_nodead" {
    name[Group1] = "Hungarian (QWERTY, 102-key, comma, no dead keys)";
    include "latin"
    include "hu(def_102)"
    include "hu(def_qwerty)"
    include "kpdl(comma)"
    include "hu(def_nodead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 102_qwerty_dot_dead
// 102 key qwerty layout
// with decimal dot on keypad
// and with dead key support
partial
xkb_symbols "102_qwerty_dot_dead" {
    name[Group1] = "Hungarian (QWERTY, 102-key, dot, dead keys)";
    include "latin"
    include "hu(def_102)"
    include "hu(def_qwerty)"
    include "hu(def_dot)"
    include "hu(def_dead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// 102_qwerty_dot_nodead
// 102 key qwerty layout
// with decimal dot on keypad
// and without dead key support
partial
xkb_symbols "102_qwerty_dot_nodead" {
    name[Group1] = "Hungarian (QWERTY, 102-key, dot, no dead keys)";
    include "latin"
    include "hu(def_102)"
    include "hu(def_qwerty)"
    include "hu(def_dot)"
    include "hu(def_nodead)"
    include "hu(def_common)"
    include "level3(ralt_switch)"
};

// Partial layouts

// def_102:
// The standard Hungarian 102 key layout
hidden partial alphanumeric_keys
xkb_symbols "def_102" {
    key <TLDE>  { [            0,      section,           notsign                  ] };
    key <LSGT>  { [       iacute,       Iacute,              less,         greater ] };

};

// def_101:
// An alternative layout for 101 key keyboards
hidden partial alphanumeric_keys
xkb_symbols "def_101" {
    key <TLDE>  { [       iacute,       Iacute,                 0,         section ] };
    key <LSGT>  { [         less,      greater                                     ] };
};

// def_qwertz:
// The standard Hungaryan qwertz layout
hidden partial alphanumeric_keys
xkb_symbols "def_qwertz" {
    key <AD06>  { [            z,            Z,           endash                   ] };
    key <AB01>  { [            y,            Y,           greater                  ] };
};


// def_qwerty:
// The qwerty layout for people who familiar with the standard US layout
hidden partial alphanumeric_keys
xkb_symbols "def_qwerty" {
    key <AD06>  { [            y,            Y,           endash                   ] };
    key <AB01>  { [            z,            Z,           greater                  ] };
};

// def_dot: 	 
// The Hungarian standard is the comma on the keypad not decimal dot, 	 
// but programmers hate it 	 
hidden partial keypad_keys 	 
xkb_symbols "def_dot" { 	 
    key <KPDL>  { [    KP_Delete,   KP_Decimal                                     ] }; 	 
}; 	 


// def_dead:
// Dead keys support part
hidden partial alphanumeric_keys
xkb_symbols "def_dead" {
    key <AE01>  { [            1,   apostrophe,        asciitilde,      dead_tilde ] };
    key <AE02>  { [            2,     quotedbl,        dead_caron,           caron ] };
    key <AE03>  { [            3,         plus,       asciicircum, dead_circumflex ] };
    key <AE04>  { [            4,       exclam,        dead_breve,           breve ] };
    key <AE05>  { [            5,      percent,    dead_abovering,          degree ] };
    key <AE06>  { [            6,        slash,       dead_ogonek,          ogonek ] };
    key <AE07>  { [            7,        equal,             grave,      dead_grave ] };
    key <AE08>  { [            8,    parenleft,     dead_abovedot,        abovedot ] };
    key <AE09>  { [            9,   parenright,        dead_acute,           acute ] };
    key <AE10>  { [   odiaeresis,   Odiaeresis,  dead_doubleacute,     doubleacute ] };
    key <AE11>  { [   udiaeresis,   Udiaeresis,    dead_diaeresis,       diaeresis ] };
    key <AE12>  { [       oacute,       Oacute,      dead_cedilla,         cedilla ] };
};

// def_nodead:
// Without dead keys support
hidden partial alphanumeric_keys
xkb_symbols "def_nodead" {
    key <AE01>  { [            1,   apostrophe,        asciitilde                  ] };
    key <AE02>  { [            2,     quotedbl,             caron                  ] };
    key <AE03>  { [            3,         plus,       asciicircum                  ] };
    key <AE04>  { [            4,       exclam,             breve                  ] };
    key <AE05>  { [            5,      percent,            degree                  ] };
    key <AE06>  { [            6,        slash,            ogonek                  ] };
    key <AE07>  { [            7,        equal,             grave                  ] };
    key <AE08>  { [            8,    parenleft,          abovedot                  ] };
    key <AE09>  { [            9,   parenright,             acute                  ] };
    key <AE10>  { [   odiaeresis,   Odiaeresis,       doubleacute                  ] };
    key <AE11>  { [   udiaeresis,   Udiaeresis,         diaeresis                  ] };
    key <AE12>  { [       oacute,       Oacute,           cedilla                  ] };
};


// def_common:
// The common part of all Hungarian layout above
hidden partial alphanumeric_keys
xkb_symbols "def_common" {
    key <AD01>  { [            q,            Q,         backslash                  ] };
    key <AD02>  { [            w,            W,               bar                  ] };
    key <AD03>  { [            e,            E,        Adiaeresis                  ] };
    key <AD07>  { [            u,            U,          EuroSign                  ] };
    key <AD08>  { [            i,            I,            Iacute,          iacute ] };
    key <AD09>	{ [            o,            O,        doublelowquotemark          ] };
    key <AD10>	{ [            p,            P,        rightdoublequotemark        ] };
    key <AD11>  { [ odoubleacute, Odoubleacute,          division                  ] };
    key <AD12>  { [       uacute,       Uacute,          multiply                  ] };

    key <AC01>  { [            a,            A,        adiaeresis,      Adiaeresis ] };
    key <AC02>  { [            s,            S,           dstroke                  ] };
    key <AC03>  { [            d,            D,           Dstroke                  ] };
    key <AC04>  { [            f,            F,       bracketleft                  ] };
    key <AC05>  { [            g,            G,      bracketright                  ] };
    key <AC07>  { [            j,            J,            iacute,          Iacute ] };
    key <AC08>  { [            k,            K,           lstroke                  ] };
    key <AC09>  { [            l,            L,           Lstroke                  ] };
    key <AC10>  { [       eacute,       Eacute,            dollar,            cent ] };
    key <AC11>  { [       aacute,       Aacute,            ssharp,           U1E9E ] };

    key <BKSL>  { [ udoubleacute, Udoubleacute,          currency                  ] };

    key <AB02>  { [            x,            X,        numbersign                  ] };
    key <AB03>  { [            c,            C,         ampersand                  ] };
    key <AB04>  { [            v,            V,                at                  ] };
    key <AB05>  { [            b,            B,         braceleft                  ] };
    key <AB06>  { [            n,            N,        braceright                  ] };
    key <AB07>  { [            m,            M,              less                  ] };
    key <AB08>  { [        comma,     question,         semicolon                  ] };
    key <AB09>  { [       period,        colon,           greater                  ] };
    key <AB10>  { [        minus,   underscore,          asterisk                  ] };

};

// EXTRAS:

// New style XKB layout used Old Hungarian keyboard layouts
//
// 
//
// (C) 2013 Andras Tisza
// (C) 2017,2018,2020  Viktor Kovacs <kov.h.vik@gmail.com>
//
// Permission is granted to anyone to use, distribute and modify
// this file in any way, provided that the above copyright notice
// is left intact and the author of the modification summarizes
// the changes in this header.
//
// This file is distributed without any expressed or implied warranty.
//
// Changes:
// 2013 - Planned Old Hungarian layout
// 2017 - Added Old Hungarian layout
// 2018 - Resolved several easy-to-use issue, added extra punctuation and quotation marks  
// 2020 - Added ligature capable layout ( with Zero-widt-joiner), added copyright, copyleft symbols 
// 2020 - Added ZWNJ key to "Old Hungarian (for ligatures)", replaced its ohu_lig id to oldhunlig, replaced its ohu_lig short description to oldhun(lig).
// Added "oldhun_magic_numpad" for both "Old Hungarian" layouts, as a specialised numpad.

// Old Hungartian layout
partial alphanumeric_keys
xkb_symbols "oldhun" {
name[Group1]="Old Hungarian";
include "hu(oldhun_base)"
include "hu(oldhun_origin)"
include "hu(oldhun_magic_numpad)"
include "level3(ralt_switch)"
};

// Old Hungarian layout for ligatures
partial alphanumeric_keys
xkb_symbols "oldhunlig" {
name[Group1]="Old Hungarian (for ligatures)";
include "hu(oldhun_base)"
include "hu(oldhun_lig)"
include "hu(oldhun_magic_numpad)"
include "level3(ralt_switch)"
};

// The base Old Hungarian keys
// In the remarks you can read characters displayed only Unicode point 
hidden partial alphanumeric_keys
xkb_symbols "oldhun_base" { 
key.type[Group1]="FOUR_LEVEL_ALPHABETIC";
    key <AD01> {[ U10CCE, U10C8E, backslash ]};
//Old-Hungarian gy, Gy    
    key <AD02> {[ U10CF0, U10CB0 ]}; 
//Old Hungarian zs, Zs
    key <AD03> {[ U10CC9, U10C89, U10CCA, U10C8A ]};
 //Old Hungarian e, E, close e, close E
    key <AD04> {[ U10CE2, U10CA2, U10CE3, U10CA3 ]};
//Old Hungarian r, R, short r, short R    
    key <AD05> {[ U10CE6, U10CA6, U10CF1, U10CB1 ]};
//Old Hungarian t, T, ent-sharped sign,Ent-sharped sign    
    key <AD06> {[ U10CEF, U10CAF ]};
//Old Hungarian z, Z    
    key <AD07> {[ U10CEA, U10CAA, U10CF2, U10CB2 ]};
//Old Hungarian u, U,  Old Hungarian us, Us    
    key <AD08> {[ U10CD0, U10C90 ]};
//Old Hungarian i, I   
    key <AD09> {[ U10CDB, U10C9B ]};
//Old Hungarian o, O    
    key <AD10> {[ U10CE0, U10CA0 ]};
//Old Hungarian p, P    
    key <AD11> {[ U10CDF, U10C9F ]};
//Old Hungarian oee, Oee
    key <AD12> {[ U10CEB, U10CAB, U10CD5, U10C95 ]};
//Old Hungarian uu,Uu,unk,Unk   
    key <AC01> {[ U10CC0, U10C80, U10CC3, U10C83 ]};
//Old Hungarian a,A,amb,Amb    
    key <AC02> {[ U10CE4, U10CA4, U10CE1, U10CA1 ]};
//Old Hungarian s,S,emp,Emp    
    key <AC03> {[ U10CC7, U10C87, U10CE7, U10CA7 ]};
//Old Hungarian d,D, ent/ant/int, Ent/Ant/Int
	key <AC04> {[ U10CCC, U10C8C, bracketleft ]};
//Old Hungarian f,F    
    key <AC05> {[ U10CCD, U10C8D, bracketright ]};
//Old Hungarian g, G    
    key <AC06> {[ U10CCF, U10C8F, U10CE9, U10CA9 ]};
//Old Hungarian h, H,ech, Ech    
    key <AC07> {[ U10CD2, U10C92, backslash ]};
//Old Hungarian j, J    
    key <AC08> {[ U10CD3, U10C93, U10CD4, U10C94 ]};
//Old Hungarian open k, open K, close k, close K    
    key <AC09> {[ U10CD6, U10C96 ]};
//Old Hungarian l, L    
    key <AC10> {[ U10CCB, U10C8B ]};
//Old Hungarian ee, EE    
    key <AC11> {[ U10CC1, U10C81, U10CC8, U10C88 ]};
//Old Hungarian aa, AA, and And	     
    key <BKSL> {[ U10CEC, U10CAC ]};
//Old Hungarian ue, Ue    
    key <AB01> {[ U10CD7, U10C97, greater ]};
//Old Hungarian ly, Ly    
    key <AB02> {[ U10CE5, U10CA5, numbersign ]};
//Old Hungarian sz, Sz    
    key <AB03> {[ U10CC4, U10C84, U10CC5, U10C85 ]};
//Old Hungarian c,C, enc, Enc    
    key <AB04> {[ U10CEE, U10CAE, at ]};
//Old Hungarian v,V    
    key <AB05> {[ U10CC2, U10C82, braceleft ]};
//Old Hungarian b, B    
    key <AB06> {[ U10CD9, U10C99, braceright ]};
//Old Hungarian n, N    
    key <AB07> {[ U10CD8, U10C98, less ]};
//Old Hungarian m, M    
    key <AB08> {[ U2E41, U2E2E, U204F ]};
//reversed question mark,reversed semicolon, reversed comma    
    key <AB09> {[ period, colon, greater ]};    
    key <AB10> {[ minus, underscore, asterisk ]};    
	key <LSGT> {[ U10CD1, U10C91, less ]};
//Old Hungarian ii,II
};

//Old Hungarian layout specialised keys
// In the remarks you can read characters displayed only Unicode point
hidden partial alphanumeric_keys
xkb_symbols "oldhun_origin" {
key.type[Group1]="FOUR_LEVEL_ALPHABETIC";
	key <TLDE> {[ section, U200F, U200E, 0 ]};
//Right to left mark, left to right mark
    key <AE01> {[ U10CFA, apostrophe, U2E42, 1 ]};
//Old Hungarian one, reversed 9 double low quotemark
    key <AE02> {[ U10CFB, quotedbl, U201F, 2 ]};
//Old Hungarian five, reversed 9 double upper quotemark
    key <AE03> {[ U10CFC, plus, minus, 3 ]};
//Old Hungarian ten
    key <AE04> {[ U10CFD, exclam, U203C, 4 ]};
//Old Hungarian fifty,double exclam
    key <AE05> {[ U10CFE, percent, U2026, 5 ]};
//Old Hungarian hundred, triple dot
    key <AE06> {[ U10CFF, slash, backslash, 6 ]};
//Old Hungarian thousand
    key <AE07> {[ U10CC6, U10C86, equal, 7 ]};
//Old Hungarian cs, Cs    
    key <AE08> {[ U10CDA, U10C9A, parenleft, 8 ]};
//Old Hungarian ny, Ny    
    key <AE09> {[ U10CE8, U10CA8, parenright, 9 ]};
//Old Hungarian ty, Ty
    key <AE10> {[ U10CDE, U10C9E, U10CDD, U10C9D ]};
//Old Hungarian Rudimenta oe, Oe, Nikolsburg oe, Oe
    key <AE11> {[ U10CED, U10CAD, section ]};
//Old Hungarian ue , Ue
    key <AE12> {[ U10CDC, U10C9C, copyright, U1F12F ]};
//Old Hungarian oo, OO, copyleft    
};

//Special section for "Old Hungarian (for ligatures)" layout
// In the remarks you can read characters displayed only Unicode point
hidden partial alphanumeric_keys
xkb_symbols "oldhun_lig" {
key.type[Group1]="FOUR_LEVEL_ALPHABETIC";
	key <TLDE> {[ U200D, U200F, U200C, 0 ]};
//Zero-width-joiner,Right to left mark, Zero-width-non-joiner
//Zero-width-joiner and Zero-width-non-joiner are reqired for ligatures
    key <AE01> {[ U10CFA, apostrophe, U2E42, 1 ]};
//Old Hungarian one, reversed 9 double low quotemark
    key <AE02> {[ U10CFB, quotedbl, U201F, 2 ]};
//Old Hungarian five, reversed 9 double upper quotemark
    key <AE03> {[ U10CFC, plus, minus, 3 ]};
//Old Hungarian ten
    key <AE04> {[ U10CFD, exclam, U203C, 4 ]};
//Old Hungarian fifty,double exclam    
    key <AE05> {[ U10CFE, percent, U2026, 5 ]};
//Old Hungarian hundred, triple dot
    key <AE06> {[ U10CFF, slash, backslash, 6 ]};
//Old Hungarian thousand
    key <AE07> {[ U10CC6, U10C86, equal, 7 ]};
//Old Hungarian cs, Cs    
    key <AE08> {[ U10CDA, U10C9A, parenleft, 8 ]};
//Old Hungarian ny, Ny    
    key <AE09> {[ U10CE8, U10CA8, parenright, 9 ]};
//Old Hungarian ty, Ty
    key <AE10> {[ U10CDE, U10C9E, U10CDD, U10C9D ]};
//Old Hungarian Rudimenta oe, Oe, Nikolsburg oe, Oe    
    key <AE11> {[ U10CED, U10CAD, section ]};
//Old Hungarian ue , Ue    
    key <AE12> {[ U10CDC, U10C9C, copyright, U1F12F ]};
//Old Hungarian oo, OO, copyleft    
};

//Numpad for Old Hungarian layouts
// In the remarks you can read characters displayed only Unicode point
hidden partial keypad_keys
xkb_symbols "oldhun_magic_numpad" {
    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD";
    key <NMLK> {[ Num_Lock, Num_Lock, Num_Lock, Num_Lock ]};
    key <KP0> {[ KP_Insert, KP_0, U200C, U200C ]};
//Zero-width-non-joiner
    key <KP7> {[ KP_Home, KP_7, U10CFA, U10CFA ]};
//Old Hungarian number one
    key <KP8> {[ KP_Up, KP_8, U10CFB, U10CFB ]};
//Old Hungarian number five
    key <KP9> {[ KP_Prior, KP_9, U10CFC, U10CFC ]};
//Old Hungarian number ten
    key <KP4> {[ KP_Left, KP_4, U10CFD, U10CFD ]};
//Old Hungarian number fifty
    key <KP5> {[ KP_Begin, KP_5, U10CFE, U10CFE ]};
//Old Hungarian number hundred
    key <KP6> {[ KP_Right, KP_6, U10CFF, U10CFF ]};
//Old Hungarian number thousand
    key <KP1> {[ KP_End, KP_1, U200F, U200F ]};
//Right-to-left mark
    key <KP2> {[ KP_Down, KP_2, U200D, U200D ]};
//Zero-width-joiner
    key <KP3> {[ KP_Next, KP_3, U200E, U200E ]};
//Left-to-right mark
    key <KPEN> {[ KP_Enter, KP_Enter, KP_Enter, KP_Enter ]};
    key <KPEQ> {[ KP_Equal, KP_Equal, KP_Equal, KP_Equal ]};
    key <KPDL> {[ KP_Delete, KP_Separator, KP_Delete, KP_Separator ]};
    key <KPPT> {[ KP_Separator, KP_Separator, KP_Separator, KP_Separator ]};
    key <KPDV> {[ KP_Divide, KP_Divide, KP_Divide, KP_Divide ]};
    key <KPMU> {[ KP_Multiply, KP_Multiply, KP_Multiply, KP_Multiply ]};
    key <KPSU> {[ KP_Subtract, KP_Subtract,	KP_Subtract, KP_Subtract ]};
    key <KPAD> {[ KP_Add, KP_Add, KP_Add, KP_Add ]};
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "fr(azerty)"

    name[Group1]="French (Togo)";

// This is based on French AZERTY-Keyboard layout that is mostly used in Togo.
// It includes symbols used to write different local languages in Togo.
// Created 2015 by Globalbility Togo (www.globalbility.org)
// Authors: Issaka Ouro-Wétchiré, Caroline Riefstahl, Mats Blakstad <mats @ globalbility.org>
//
// LAYOUT OVERVIEW
//  ____                                    
// | 1 3| 1 = Shift,  3 = AltGr + Shift    (AltGr is the right side alt key)
// | 2 4| 2 = normal, 4 = AltGr
//  ¯¯¯¯                                  
//  ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ _______
// |    | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  | 0  | °  | +  | <--   |
// | ²  | &  | é ~| " #| ' {| ( [| - || è `| _ \| ç ^| à @| ) ]| = }|       |
//  ========================================================================
// | |<-  | A  | Z Ʒ| E  | R Ɛ| T Ɗ| Y Ƴ| U Ʊ| I Ɩ| O Ɔ| P  | ¨  | $  |   , |
// |  ->| | a  | z ʒ| e €| r ɛ| t ɗ| y ƴ| u ʊ| i ɩ| o ɔ| p  | ^  ̌| £ ¤| <-' |
//  ===================================================================¬    |
// |       | Q Ǝ| S  | D Ɖ| F Ƒ| G Ɣ| H Ĥ | J Ɨ| K  | L  | M Ŋ| %  | µ  |    |
// | MAJ   | q ǝ| s  | d ɖ| f ƒ| g ɣ| h ɦ| j ɨ | k  | l  | m ɲ| ù `| *  ́|    |
//  ========================================================================
// | ^   | >  | W  | X  | C  | V Ʋ| B Ɓ| N Ŋ| ?  | .  | /  | §  |     |     |
// | |   | <  | w  | x  | c  | v ʋ| b ɓ| n ŋ| ,  | ;  | : ¯| ! ~|     |     |
//  ========================================================================
// |      |      |      |                       |       |      |     |      |
// | Ctrl | Super| Alt  | Space    Nobreakspace | AltGr | Super|Menu | Ctrl |
//  ¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯ ¯¯¯¯¯¯
// The different local languages in Togo uses all together 17 symbols not found in French language:
// Ʒ, ɛ, Ɗ, Ƴ, Ʊ, Ɩ, Ɔ, Ǝ, Ɖ, Ƒ, Ɣ, Ĥ, Ɨ, Ɲ, Ʋ, Ɓ, Ŋ.
// Togolese local languages use 9 tone markers:
// Acute ( ´ ),	Grave ( ` ), Circumflex ( ˆ ), Caron ( ˇ ), Macron ( ¯ ), Tilde ( ~ ), Tilde + Acute (  ̃́ ), Tilde + Grave (  ̃̀ ), Diaeresis ( ¨ )
// The vowels can use these tone markers except diaeresis.
// 'Y' is not used as a vowel in most local languages, and can only use diaeresis.
// Nasal consonants (m, n, ŋ) can only have have accent tones (acute and grave)

    // Modifications of the basic French Azerty layout to add symbols for Togolese local languages

             // Second row
             key <AD02>	{ [	z,		Z,		ezh,		EZH 	] };	// U0292 = ʒ (small), U01B7 = Ʒ (capital)

             key <AD04>	{ [	r,		R,		U025B,		U0190 	] };	// U025B = ɛ (small), U0190 = Ɛ (capital)
             key <AD05>	{ [	t,		T,		U0257,		U018A 	] };	// U0257 = ɗ (small), U018A = Ɗ (capital)
             key <AD06>	{ [	y,		Y,		U01B4,		U01B3 	] };	// U01B4 = ƴ (small), U01B3 = Ƴ (capital)
             key <AD07>	{ [	u,		U,		U028A,		U01B1 	] };	// U028A = ʊ (small), U01B1 = Ʊ (capital)
             key <AD08>	{ [	i,		I,		U0269,		U0196 	] };	// U0269 = ɩ (small), U0196 = Ɩ (capital)
             key <AD09>	{ [	o,		O,		U0254,		U0186 	] };	// U0254 = ɔ (small), U0186 = Ɔ (capital)
             key <AD11>	{ [	dead_circumflex,dead_diaeresis,	dead_caron		] };


             // Third row
             key <AC01>	{ [	q,		Q,		U01DD,		U018E 	] };	// U01DD = ǝ (small), U018E = Ǝ (capital)
             key <AC03>	{ [	d,		D,		U0256,		U0189 	] };	// U0256 = ɖ (small), U0189 = Ɖ (capital)
             key <AC04>	{ [	f,		F,		U0192,		U0191 	] };	// U0192 = ƒ (small), U0191 = Ƒ (capital)
             key <AC05>	{ [	g,		G,		U0263,		U0194 	] };	// U0263 = ɣ (small), U0194 = Ɣ (capital)
             key <AC06>	{ [	h,		H,		U0266,		U0124 	] };	// U0266 = ɦ (small), U0124 = Ĥ (capital)
             key <AC07>	{ [	j,		J,		U0268,		U0197 	] };	// U0268 = ɨ (small), U0197 = Ɨ (capital)
             key <AC10>	{ [	m,		M,		U0272,		U019D	] };	// U0272 = ɲ (small), U019D = Ɲ (capital)
             key <AC11>	{ [	ugrave,		percent,	dead_grave		] };	
             key <BKSL> { [	asterisk,	mu,		dead_acute		] };


             // Fourth row
             key <AB04>	{ [	v,		V,		U028B,		U01B2	] };	// U028B = ʋ (small), U01B2 = Ʋ (capital)
             key <AB05> { [	b,		B,		U0253,		U0181 	] };	// U0253 = ɓ (small), U0181 = Ɓ (capital)
             key <AB06>	{ [	n,		N,		U014B,		U014A 	] };	// U014B = ŋ (small), U014A = Ŋ (capital)
             key <AB09> { [	colon,		slash,		dead_macron		] };
             key <AB10>	{ [	exclam,		section,	dead_tilde		] };
};
default partial alphanumeric_keys modifier_keys
xkb_symbols "pc105" {

    key <ESC>  {	[ Escape		]	};

    // The extra key on many European keyboards:
    key <LSGT> {	[ less, greater, bar, brokenbar ] };

    // The following keys are common to all layouts.
    key <BKSL> {	[ backslash,	bar	]	};
    key <SPCE> {	[ 	 space		]	};

    include "srvr_ctrl(fkey2vt)"
    include "pc(editing)"
    include "keypad(x11)"

    key <BKSP> {	[ BackSpace, BackSpace	]	};

    key  <TAB> {	[ Tab,	ISO_Left_Tab	]	};
    key <RTRN> {	[ Return		]	};

    key <CAPS> {	[ Caps_Lock		]	};
    key <NMLK> {	[ Num_Lock 		]	};

    key <LFSH> {	[ Shift_L		]	};
    key <LCTL> {	[ Control_L		]	};
    key <LWIN> {	[ Super_L		]	};

    key <RTSH> {	[ Shift_R		]	};
    key <RCTL> {	[ Control_R		]	};
    key <RWIN> {	[ Super_R		]	};
    key <MENU> {	[ Menu			]	};

    // Beginning of modifier mappings.
    modifier_map Shift  { Shift_L, Shift_R };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L, Control_R };
    modifier_map Mod2   { Num_Lock };
    modifier_map Mod4   { Super_L, Super_R };

    // Fake keys for virtual<->real modifiers mapping:
    key <LVL3> {	[ ISO_Level3_Shift	]	};
    key <MDSW> {	[ Mode_switch 		]	};
    modifier_map Mod5   { <LVL3>, <MDSW> };

    key <ALT>  {	[ NoSymbol, Alt_L	]	};
    include "altwin(meta_alt)"

    key <META> {	[ NoSymbol, Meta_L	]	};
    modifier_map Mod1   { <META> };

    key <SUPR> {	[ NoSymbol, Super_L	]	};
    modifier_map Mod4   { <SUPR> };

    key <HYPR> {	[ NoSymbol, Hyper_L	]	};
    modifier_map Mod4   { <HYPR> };
    // End of modifier mappings.

    key <OUTP> { [ XF86Display ] };
    key <KITG> { [ XF86KbdLightOnOff ] };
    key <KIDN> { [ XF86KbdBrightnessDown ] };
    key <KIUP> { [ XF86KbdBrightnessUp ] };
};

hidden partial alphanumeric_keys
xkb_symbols "editing" {
    key <PRSC> {
	type= "PC_ALT_LEVEL2",
	symbols[Group1]= [ Print, Sys_Req ]
    };
    key <SCLK> {	[  Scroll_Lock		]	};
    key <PAUS> {
	type= "PC_CONTROL_LEVEL2",
	symbols[Group1]= [ Pause, Break ]
    };
    key  <INS> {	[  Insert		]	};
    key <HOME> {	[  Home			]	};
    key <PGUP> {	[  Prior		]	};
    key <DELE> {	[  Delete		]	};
    key  <END> {	[  End			]	};
    key <PGDN> {	[  Next			]	};

    key   <UP> {	[  Up			]	};
    key <LEFT> {	[  Left			]	};
    key <DOWN> {	[  Down			]	};
    key <RGHT> {	[  Right		]	};
};
// Keyboard layout for Swahili in Arabic script.
// Based on Martin Vidner's Buckwalter transliteration variant of the Arabic keyboard
// Please notify any corrections or omissions to
// Kevin Donnelly (kevin@dotmon.com)

default partial alphanumeric_keys
xkb_symbols "swa" {
    name[Group1]= "Swahili (Tanzania)";

    key <TLDE> {  [  0x1000670,         VoidSymbol             ]  };

    key <AE01> {  [  0x1000661,         VoidSymbol             ]  };
    key <AE02> {  [  0x1000662,         VoidSymbol             ]  };
    key <AE03> {  [  0x1000663,         VoidSymbol             ]  };
    key <AE04> {  [  0x1000664,         VoidSymbol             ]  };
    key <AE05> {  [  0x1000665,         Arabic_percent         ]  };
    key <AE06> {  [  0x1000666,         VoidSymbol             ]  };
    key <AE07> {  [  0x1000667,         VoidSymbol             ]  };
    key <AE08> {  [  0x1000668,         VoidSymbol             ]  };
    key <AE09> {  [  0x1000669,         0x100fd3e              ]  };
    key <AE10> {  [  0x1000660,         0x100fd3f              ]  };
    key <AE11> {  [  minus,             Arabic_tatweel         ]  };
    key <AE12> {  [  equal,             plus                   ]  };

    key <AD01> {  [  Arabic_qaf,        Arabic_gaf             ]  };
    key <AD02> {  [  Arabic_waw,        Arabic_hamzaonwaw      ]  };
    key <AD03> {  [  0x1000656,         Arabic_ain             ]  };
    key <AD04> {  [  Arabic_ra,         Arabic_tteh            ]  };
    key <AD05> {  [  Arabic_teh,        Arabic_tah             ]  };
    key <AD06> {  [  Arabic_yeh,        Arabic_alefmaksura     ]  };
    key <AD07> {  [  Arabic_damma,      Arabic_dammatan        ]  };
    key <AD08> {  [  Arabic_kasra,      Arabic_hamzaonyeh      ]  };
    key <AD09> {  [  Arabic_sukun,      0x1000657              ]  };
    key <AD10> {  [  Arabic_peh,        Arabic_tehmarbuta      ]  };
    key <AD12> {  [  VoidSymbol,        VoidSymbol             ]  };

    key <AC01> {  [  Arabic_fatha,      Arabic_alef            ]  };
    key <AC02> {  [  Arabic_seen,       Arabic_sad             ]  };
    key <AC03> {  [  Arabic_dal,        Arabic_dad             ]  };
    key <AC04> {  [  Arabic_feh,        Arabic_fathatan        ]  };
    key <AC05> {  [  0x10006A0,         Arabic_ghain           ]  };
    key <AC06> {  [  Arabic_ha,         Arabic_hah             ]  };
    key <AC07> {  [  Arabic_jeem,       VoidSymbol             ]  };
    key <AC08> {  [  Arabic_kaf,        Arabic_kasratan        ]  };
    key <AC09> {  [  Arabic_lam,        Arabic_shadda          ]  };
    key <AC10> {  [  Arabic_semicolon,  VoidSymbol             ]  };
    key <AC11> {  [  Arabic_hamza,      VoidSymbol             ]  };

    key <AB01> {  [  Arabic_zain,       Arabic_zah             ]  };
    key <AB02> {  [  Arabic_khah,       VoidSymbol             ]  };
    key <AB03> {  [  Arabic_tcheh,      Arabic_sheen           ]  };
    key <AB04> {  [  0x10006A8,        Arabic_theh            ]  };
    key <AB05> {  [  Arabic_beh,        Arabic_thal            ]  };
    key <AB06> {  [  Arabic_noon,       VoidSymbol             ]  };
    key <AB07> {  [  Arabic_meem,       VoidSymbol             ]  };
    key <AB08> {  [  Arabic_comma,      Arabic_hamzaunderalef  ]  };
    key <AB09> {  [  0x10006d4,         Arabic_hamzaonalef     ]  };
    key <AB10> {  [  VoidSymbol,        Arabic_question_mark   ]  };
};
// These partial variants assign Shift to various XKB keycodes.

// The Less/Greater key (while pressed) chooses the second shift level.
partial modifier_keys
xkb_symbols "lsgt_switch" {
  key <LSGT> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ Shift_L ]
  };
};
// based on a keyboard map from an 'xkb/symbols/de' file

default
xkb_symbols "basic" {

    include "de(basic)"

    name[Group1]="German (Austria)";
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    include "de(nodeadkeys)"

    name[Group1]="German (Austria, no dead keys)";
};

partial alphanumeric_keys
xkb_symbols "mac" {

    include "de(mac)"

    name[Group1]= "German (Austria, Macintosh)";
};
// based on a keyboard map from an 'xkb/symbols/th' file

default partial alphanumeric_keys
xkb_symbols "basic" {
    name[Group1]= "Thai";

    // converted to THai keysysms - Pablo Saratxaga <pablo@mandrakesoft.com>

    key <TLDE> { [ underscore,		percent		]	};
    key <AE01> { [ Thai_lakkhangyao,	plus		]	};
    key <AE02> { [ slash,		Thai_leknung	]	};
    key <AE03> { [ minus,		Thai_leksong	]	};
    key <AE04> { [ Thai_phosamphao,	Thai_leksam	]	};
    key <AE05> { [ Thai_thothung,	Thai_leksi	]	};
    key <AE06> { [ Thai_sarau,		Thai_sarauu	]	};
    key <AE07> { [ Thai_saraue,		Thai_baht	]	};
    key <AE08> { [ Thai_khokhwai,	Thai_lekha	]	};
    key <AE09> { [ Thai_totao,		Thai_lekhok	]	};
    key <AE10> { [ Thai_chochan,	Thai_lekchet	]	};
    key <AE11> { [ Thai_khokhai,	Thai_lekpaet	]	};
    key <AE12> { [ Thai_chochang,	Thai_lekkao	]	};

    key <AD01> { [ Thai_maiyamok,	Thai_leksun	]	};
    key <AD02> { [ Thai_saraaimaimalai,	quotedbl	]	};
    key <AD03> { [ Thai_saraam,		Thai_dochada	]	};
    key <AD04> { [ Thai_phophan,	Thai_thonangmontho ]	};
    key <AD05> { [ Thai_saraa,		Thai_thothong	]	};
    key <AD06> { [ Thai_maihanakat,	Thai_nikhahit	]	};
    key <AD07> { [ Thai_saraii,		Thai_maitri	]	};
    key <AD08> { [ Thai_rorua,		Thai_nonen	]	};
    key <AD09> { [ Thai_nonu,		Thai_paiyannoi	]	};
    key <AD10> { [ Thai_yoyak,		Thai_yoying	]	};
    key <AD11> { [ Thai_bobaimai,	Thai_thothan	]	};
    key <AD12> { [ Thai_loling,		comma		]	};

    key <AC01> { [ Thai_fofan,		Thai_ru		]	};
    key <AC02> { [ Thai_hohip,		Thai_khorakhang	]	};
    key <AC03> { [ Thai_kokai,		Thai_topatak	]	};
    key <AC04> { [ Thai_dodek,		Thai_sarao	]	};
    key <AC05> { [ Thai_sarae,		Thai_chochoe	]	};
    key <AC06> { [ Thai_maitho,		Thai_maitaikhu	]	};
    key <AC07> { [ Thai_maiek,		Thai_maichattawa ]	};
    key <AC08> { [ Thai_saraaa,		Thai_sorusi	]	};
    key <AC09> { [ Thai_sosua,		Thai_sosala	]	};
    key <AC10> { [ Thai_wowaen,		Thai_soso	]	};
    key <AC11> { [ Thai_ngongu,		period		]	};

    key <AB01> { [ Thai_phophung,	parenleft	]	};
    key <AB02> { [ Thai_popla,		parenright	]	};
    key <AB03> { [ Thai_saraae,		Thai_choching	]	};
    key <AB04> { [ Thai_oang,		Thai_honokhuk	]	};
    key <AB05> { [ Thai_sarai,		Thai_phinthu	]	};
    key <AB06> { [ Thai_sarauee,	Thai_thanthakhat ]	};
    key <AB07> { [ Thai_thothahan,	question	]	};
    key <AB08> { [ Thai_moma,		Thai_thophuthao	]	};
    key <AB09> { [ Thai_saraaimaimuan,	Thai_lochula	]	};
    key <AB10> { [ Thai_fofa,		Thai_lu		]	};

    key <BKSL> { [ Thai_khokhuat,	Thai_khokhon	]	};
};

partial alphanumeric_keys
xkb_symbols "pat" {
    name[Group1]= "Thai (Pattachote)";
    // The thai layout defines a second keyboard group and changes
    // the behavior of a few modifier keys.

    // converted to THai keysysms - Pablo Saratxaga pablo@mandrakesoft.com
    // Pattachote modification by Visanu Euarchukiati -- visanu@inet.co.th
    key <TLDE> { [ underscore,		Thai_baht	] };
    key <AE01> { [ equal,		plus		] };
    key <AE02> { [ Thai_leksong,	quotedbl	] };
    key <AE03> { [ Thai_leksam,		slash		] };
    key <AE04> { [ Thai_leksi,		comma		] };
    key <AE05> { [ Thai_lekha,		question	] };
    key <AE06> { [ Thai_sarauu,		Thai_sarau	] };
    key <AE07> { [ Thai_lekchet,	underscore	] };
    key <AE08> { [ Thai_lekpaet,	period		] };
    key <AE09> { [ Thai_lekkao,		parenleft	] };
    key <AE10> { [ Thai_leksun,		parenright	] };
    key <AE11> { [ Thai_leknung,	minus		] };
    key <AE12> { [ Thai_lekhok,		percent		] };

    key <AD01> { [ Thai_maitaikhu,	Thai_maitri	] };
    key <AD02> { [ Thai_totao,		Thai_ru		] };
    key <AD03> { [ Thai_yoyak,		Thai_maiyamok	] };
    key <AD04> { [ Thai_oang,		Thai_yoying	] };
    key <AD05> { [ Thai_rorua,		Thai_sorusi	] };
    key <AD06> { [ Thai_maiek,		Thai_saraue	] };
    key <AD07> { [ Thai_dodek,		Thai_fofa	] };
    key <AD08> { [ Thai_moma,		Thai_soso	] };
    key <AD09> { [ Thai_wowaen,		Thai_thothung	] };
    key <AD10> { [ Thai_saraae,		Thai_thophuthao	] };
    key <AD11> { [ Thai_saraaimaimuan,	Thai_paiyannoi	] };
    key <AD12> { [ Thai_chochoe,	Thai_lu		] };

    key <AC01> { [ Thai_maitho,		Thai_maichattawa] };
    key <AC02> { [ Thai_thothahan,	Thai_thothong	] };
    key <AC03> { [ Thai_ngongu,		Thai_saraam	] };
    key <AC04> { [ Thai_kokai,		Thai_nonen	] };
    key <AC05> { [ Thai_maihanakat,	Thai_thanthakhat] };
    key <AC06> { [ Thai_saraii,		Thai_sarauee	] };
    key <AC07> { [ Thai_saraaa,		Thai_phophung	] };
    key <AC08> { [ Thai_nonu,		Thai_chochang	] };
    key <AC09> { [ Thai_sarae,		Thai_sarao	] };
    key <AC10> { [ Thai_saraaimaimalai,	Thai_khorakhang	] };
    key <AC11> { [ Thai_khokhai,	Thai_thonangmontho ] };

    key <AB01> { [ Thai_bobaimai,	Thai_dochada	] };
    key <AB02> { [ Thai_popla,		Thai_topatak	] };
    key <AB03> { [ Thai_loling,		Thai_thothan	] };
    key <AB04> { [ Thai_hohip,		Thai_phosamphao	] };
    key <AB05> { [ Thai_sarai,		Thai_phinthu	] };
    key <AB06> { [ Thai_khokhwai,	Thai_sosala	] };
    key <AB07> { [ Thai_sosua,		Thai_honokhuk	] };
    key <AB08> { [ Thai_saraa,		Thai_fofan	] };
    key <AB09> { [ Thai_chochan,	Thai_choching	] };
    key <AB10> { [ Thai_phophan,	Thai_lochula	] };

    key <BKSL> { [ Thai_lakkhangyao,	Thai_nikhahit	] };
};


partial alphanumeric_keys
xkb_symbols "tis" {
    name[Group1]= "Thai (TIS-820.2538)";
    // The thai layout defines a second keyboard group and changes
    // the behavior of a few modifier keys.  

    // converted to THai keysysms - Pablo Saratxaga <pablo@mandrakesoft.com>
    // modified to TIS-820.2538 - Theppitak Karoonboonyanan <thep@linux.thai.net>
    key <TLDE> {	[ 0x1000e4f,		0x1000e5b	]	};
    key <AE01> {	[ Thai_baht,		Thai_lakkhangyao]	};
    key <AE02> {	[ slash,  		Thai_leknung	]	};
    key <AE03> {	[ minus,		Thai_leksong	]	};
    key <AE04> {	[ Thai_phosamphao, 	Thai_leksam	]	};
    key <AE05> {	[ Thai_thothung,   	Thai_leksi	]	};
    key <AE06> {	[ Thai_sarau,		Thai_sarauu	]	};
    key <AE07> {	[ Thai_saraue,		0x1000e4e	]	};
    key <AE08> {	[ Thai_khokhwai,	Thai_lekha	]	};
    key <AE09> {	[ Thai_totao,		Thai_lekhok	]	};
    key <AE10> {	[ Thai_chochan,		Thai_lekchet	]	};
    key <AE11> {	[ Thai_khokhai,		Thai_lekpaet	]	};
    key <AE12> {	[ Thai_chochang,	Thai_lekkao	]	};

    key <AD01> {	[ Thai_maiyamok,	Thai_leksun	]	};
    key <AD02> {	[ Thai_saraaimaimalai, 	quotedbl	]	};
    key <AD03> {	[ Thai_saraam,		Thai_dochada	]	};
    key <AD04> {	[ Thai_phophan,		Thai_thonangmontho ]	};
    key <AD05> {	[ Thai_saraa,		Thai_thothong	]	};
    key <AD06> {	[ Thai_maihanakat,	Thai_nikhahit	]	};
    key <AD07> {	[ Thai_saraii,		Thai_maitri	]	};
    key <AD08> {	[ Thai_rorua,		Thai_nonen	]	};
    key <AD09> {type[Group1]="THREE_LEVEL",
    			[   Thai_nonu,	Thai_paiyannoi,	0x1000e5a]	};
    key <AD10> {	[ Thai_yoyak,		Thai_yoying	]	};
    key <AD11> {	[ Thai_bobaimai,	Thai_thothan	]	};
    key <AD12> {	[ Thai_loling,		comma		]	};

    key <AC01> {	[ Thai_fofan,		Thai_ru		]	};
    key <AC02> {	[ Thai_hohip,		Thai_khorakhang	]	};
    key <AC03> {	[ Thai_kokai,		Thai_topatak	]	};
    key <AC04> {	[ Thai_dodek,		Thai_sarao	]	};
    key <AC05> {	[ Thai_sarae,		Thai_chochoe	]	};
    key <AC06> {	[ Thai_maitho,		Thai_maitaikhu	]	};
    key <AC07> {	[ Thai_maiek,		Thai_maichattawa ]	};
    key <AC08> {	[ Thai_saraaa,		Thai_sorusi	]	};
    key <AC09> {	[ Thai_sosua,		Thai_sosala	]	};
    key <AC10> {	[ Thai_wowaen,		Thai_soso	]	};
    key <AC11> {	[ Thai_ngongu,		period		]	};

    key <AB01> {	[ Thai_phophung,	parenleft	]	};
    key <AB02> {	[ Thai_popla,		parenright	]	};
    key <AB03> {	[ Thai_saraae,		Thai_choching	]	};
    key <AB04> {	[ Thai_oang,		Thai_honokhuk	]	};
    key <AB05> {	[ Thai_sarai,		Thai_phinthu	]	};
    key <AB06> {	[ Thai_sarauee,		Thai_thanthakhat ]	};
    key <AB07> {	[ Thai_thothahan,	question	]	};
    key <AB08> {	[ Thai_moma,		Thai_thophuthao	]	};
    key <AB09> {	[ Thai_saraaimaimuan,	Thai_lochula 	]	};
    key <AB10> {	[ Thai_fofa,		Thai_lu		]	};

    key <BKSL> {	[ Thai_khokhon,		Thai_khokhuat	]	};
};

partial alphanumeric_keys
xkb_symbols "olpc" {

    name[Group1]= "Thai";
    // The OLPC thai layout
    // walter@laptop.org

    key <TLDE> { [ 0x1000E4F,  0x1000E5B ] };
    key <AE01> { [ 0x1000E3F,  0x1000E45 ] };
    key <AE02> { [     slash,  0x1000E51 ] };
    key <AE03> { [     minus,  0x1000E52 ] };
    key <AE04> { [ 0x1000E20,  0x1000E53 ] };
    key <AE05> { [ 0x1000E16,  0x1000E54 ] };
    key <AE06> { [ 0x1000E38,  0x1000E39 ] };
    key <AE07> { [ 0x1000E36,  0x1000E4E ] };
    key <AE08> { [ 0x1000E04,  0x1000E55 ] };
    key <AE09> { [ 0x1000E15,  0x1000E56 ] };
    key <AE10> { [ 0x1000E08,  0x1000E57 ] };
    key <AE11> { [ 0x1000E02,  0x1000E58 ] };
    key <AE12> { [ 0x1000E0A,  0x1000E59 ] };

    key <AD01> { [ 0x1000E46,  0x1000E50 ] };
    key <AD02> { [ 0x1000E44,   quotedbl ] };
    key <AD03> { [ 0x1000E33,  0x1000E0E ] };
    key <AD04> { [ 0x1000E1E,  0x1000E11 ] };
    key <AD05> { [ 0x1000E30,  0x1000E18 ] };
    key <AD06> { [ 0x1000E31,  0x1000E4D ] };
    key <AD07> { [ 0x1000E35,  0x1000E4A ] };
    key <AD08> { [ 0x1000E23,  0x1000E13 ] };
    key <AD09> { [ 0x1000E19,  0x1000E2F ] };
    key <AD10> { [ 0x1000E22,  0x1000E0D ] };
    key <AD11> { [ 0x1000E1A,  0x1000E10 ] };
    key <AD12> { [ 0x1000E25,      comma ] };

    key <AC01> { [ 0x1000E1F,  0x1000E24 ] };
    key <AC02> { [ 0x1000E2B,  0x1000E06 ] };
    key <AC03> { [ 0x1000E01,  0x1000E0F ] };
    key <AC04> { [ 0x1000E14,  0x1000E42 ] };
    key <AC05> { [ 0x1000E40,  0x1000E0C ] };
    key <AC06> { [ 0x1000E49,  0x1000E47 ] };
    key <AC07> { [ 0x1000E48,  0x1000E4B ] };
    key <AC08> { [ 0x1000E32,  0x1000E29 ] };
    key <AC09> { [ 0x1000E2A,  0x1000E28 ] };
    key <AC10> { [ 0x1000E27,  0x1000E0B ] };
    key <AC11> { [ 0x1000E07,     period ] };
    key <BKSL> { [ 0x1000E05,  0x1000E03 ] };

    key <AB01> { [ 0x1000E1C,  parenleft ] };
    key <AB02> { [ 0x1000E1B, parenright ] };
    key <AB03> { [ 0x1000E41,  0x1000E09 ] };
    key <AB04> { [ 0x1000E2D,  0x1000E2E ] };
    key <AB05> { [ 0x1000E34,  0x1000E3A ] };
    key <AB06> { [ 0x1000E37,  0x1000E4C ] };
    key <AB07> { [ 0x1000E17,   question ] };
    key <AB08> { [ 0x1000E21,  0x1000E12 ] };
    key <AB09> { [ 0x1000E43,  0x1000E2C ] };
    key <AB10> { [ 0x1000E1D,  0x1000E26 ] };

    include "group(olpc)"
};
////////////////////////////////////////////////////////////////////////////////
// Philippines National Keyboard Layout v1.0.0 (2010-10-23)                   //
// http://laibcoms.com/sandbox/the-philippines-national-keyboard-layout       //
//                                                                            //
// Loosely based on ISO/IEC 9995-3:2009                                       //
//	* glyphs that are not used in Philippine Languages and                //
//		Philippine English were not included                          //
//	* Additions/Changes that are not part of ISO/IEC 9995-3:2009          //
//		were added                                                    //
//                                                                            //
// http://en.wikipedia.org/wiki/ISO/IEC_9995                                  //
// http://www.fileformat.info/info/unicode/char/20B1/index.htm                //
//                                                                            //
// By: Ubuntu Philippines LoCo Team                                           //
// Site: http://ubuntu-ph.org                                                 //
//                                                                            //
// Project Contact: JC John Sese Cuneta / 謝施洗 / ᜑᜓᜏᜈ᜔ ᜃᜓᜈᜒᜆ                                    //
// XMPP/Jabber: jcjohn.sesecuneta@talkr.im                                    //
// Email: jcjohn.sesecuneta@laibcoms.com                                      //
////////////////////////////////////////////////////////////////////////////////

// QWERTY (Latin) version
// http://en.wikipedia.org/wiki/QWERTY
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │ ~ ̃◌ │ ! ¡ │ @ ¤ │ # £ │ $ € │ % ° │ ^ ̂◌ │ & ← │ * → │ ( ↑ │ ) ↓ │ _ ◌͠  │ + ∓ ┃ ⌫ Bak ┃
// │ ` ̀◌ │ 1 ¹ │ 2 ² │ 3 ³ │ 4 ¼ │ 5 ½ │ 6 ¾ │ 7 ⅛ │ 8 ⅜ │ 9 ⅝ │ 0 ⅞ │ - ¬ │ = ± ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃ Q   │ W   │ E Œ │ R ¶ │ T   │ Y   │ U   │ I İ │ O Ø │ P   │ {   │ }   │ | Ə │
// ┃Tab ↹  ┃ q   │ w   │ e œ │ r ® │ t ™ │ y ¥ │ u   │ i ı │ o ø │ p ₱ │ [   │ ]   │ \ ə │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃ A Æ │ S   │ D   │ F ª │ G   │ H   │ J   │ K   │ L   │ :   │ " ̋◌ ┃ Enter    ┃
// ┃Caps ⇬  ┃ a æ │ s § │ d   │ f   │ g   │ h   │ j   │ k   │ l   │ ;   │ ' ́◌ ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃   ¦ │ Z » │ X · │ C ¢ │ V ‘ │ B ’ │ N Ñ │ M º │ < ̨◌ │ > ␣ │ ? ¿ ┃           ┃
// ┃Shift ⇧┃     │ z « │ x × │ c © │ v “ │ b ” │ n ñ │ m µ │ , ̧◌ │ . … │ / ÷ ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space             Space ␣ ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space             Space ␣ ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]= "Filipino";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	U0060,		U007E,		U0300,		U0303		] }; // ` ~ ̀◌ ̃◌ (combining grave accent) (combining tilde)
	key <AE01> { [	U0031,		U0021,		U00B9,		U00A1		] }; // 1 ! ¹ ¡
	key <AE02> { [	U0032,		U0040,		U00B2,		U00A4		] }; // 2 @ ² ¤
	key <AE03> { [	U0033,		U0023,		U00B3,		U00A3		] }; // 3 # ³ £
	key <AE04> { [	U0034,		U0024,		U00BC,		U20AC		] }; // 4 $ ¼ €
	key <AE05> { [	U0035,		U0025,		U00BD,		U00B0		] }; // 5 % ½ °
    // E row; Numerals row, right side
	key <AE06> { [	U0036,		U005E,		U00BE,		U0302		] }; // 6 ^ ¾ ̂◌ (combining circumflex accent)
	key <AE07> { [	U0037,		U0026,		U215B,		U2190		] }; // 7 & ⅛ ←
	key <AE08> { [	U0038,		U002A,		U215C,		U2192		] }; // 8 * ⅜ →
	key <AE09> { [	U0039,		U0028,		U215D,		U2191		] }; // 9 ( ⅝ ↑
	key <AE10> { [	U0030,		U0029,		U215E,		U2193		] }; // 0 ) ⅞ ↓
	key <AE11> { [	U002D,		U005F,		U00AC,		U0360		] }; // - _ ¬ ◌͠
	key <AE12> { [	U003D,		U002B,		U00B1,		U2213		] }; // = + ± ∓

    // D row; QWERTY row, left side
	key <AD01> { [	U0071,		U0051,		VoidSymbol,	VoidSymbol	] }; // q Q
	key <AD02> { [	U0077,		U0057,		VoidSymbol,	VoidSymbol	] }; // w W
	key <AD03> { [	U0065,		U0045,		U0153,		U0152		] }; // e E œ Œ
	key <AD04> { [	U0072,		U0052,		U00AE,		U00B6		] }; // r R ® ¶
	key <AD05> { [	U0074,		U0054,		U2122,		VoidSymbol	] }; // t T ™
    // D row; QWERTY row, right side
	key <AD06> { [	U0079,		U0059,		U00A5,		VoidSymbol	] }; // y Y ¥
	key <AD07> { [	U0075,		U0055,		VoidSymbol,	VoidSymbol	] }; // u U
	key <AD08> { [	U0069,		U0049,		U0131,		U0130		] }; // i I ı İ
	key <AD09> { [	U006F,		U004F,		U00F8,		U00D8		] }; // o O ø Ø
	key <AD10> { [	U0070,		U0050,		U20B1,		VoidSymbol	] }; // p P ₱
	key <AD11> { [	U005B,		U007B,		VoidSymbol,	VoidSymbol	] }; // [ {
	key <AD12> { [	U005D,		U007D,		VoidSymbol,	VoidSymbol	] }; // ] }
	key <BKSL> { [	U005C,		U007C,		U0259,		U018F		] }; // \ | ə Ə

    // C row; Home row, left side
	key <AC01> { [	U0061,		U0041,		U00E6,		U00C6		] }; // a A æ Æ
	key <AC02> { [	U0073,		U0053,		U00A7,		VoidSymbol	] }; // s S §
	key <AC03> { [	U0064,		U0044,		VoidSymbol,	VoidSymbol	] }; // d D 
	key <AC04> { [	U0066,		U0046,		VoidSymbol,	U00AA		] }; // f F   ª
	key <AC05> { [	U0067,		U0047,		VoidSymbol,	VoidSymbol	] }; // g G
    // C row; Home row, right side
	key <AC06> { [	U0068,		U0048,		VoidSymbol,	VoidSymbol	] }; // h H
	key <AC07> { [	U006A,		U004A,		VoidSymbol,	VoidSymbol	] }; // j J
	key <AC08> { [	U006B,		U004B,		VoidSymbol,	VoidSymbol	] }; // k K
	key <AC09> { [	U006C,		U004C,		VoidSymbol,	VoidSymbol	] }; // l L
	key <AC10> { [	U003B,		U003A,		VoidSymbol,	VoidSymbol	] }; // ; :
	key <AC11> { [	U0027,		U0022,		U0301,		U030B		] }; // ' " ́◌ ̋◌ (combining acute accent) (combining double-acute accent)

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	U00A6		] }; //       ¦
	key <AB01> { [	U007A,		U005A,		U00AB,		U00BB		] }; // z Z « »
	key <AB02> { [	U0078,		U0058,		U00D7,		U00B7		] }; // x X × ·
	key <AB03> { [	U0063,		U0043,		U00A9,		U00A2		] }; // c C © ¢
	key <AB04> { [	U0076,		U0056,		U201C,		U2018		] }; // v V “ ‘
	key <AB05> { [	U0062,		U0042,		U201D,		U2019		] }; // b B ” ’
    // B row; Lower row, right side
	key <AB06> { [	U006E,		U004E,		U00F1,		U00D1		] }; // n N ñ Ñ
	key <AB07> { [	U006D,		U004D,		U00B5,		U00BA		] }; // m M µ º
	key <AB08> { [	U002C,		U003C,		U0327,		U0328		] }; // , < ̧◌ ̨◌ (combining cedilla) (combining ogonek)
	key <AB09> { [	U002E,		U003E,		U2026,		U2423		] }; // . > … ␣
	key <AB10> { [	U002F,		U003F,		U00F7,		U00BF		] }; // / ? ÷ ¿

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// QWERTY (Baybayin) version
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │ ◌᜔      ┃ ⌫ Bak ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │ ◌᜔      ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃     │     │ ᜁ     │     │     │     │ ᜂ      │ ᜁ     │ ᜂ      │     │     │     │     │
// ┃Tab ↹  ┃     │ ᜏ     │ ◌ᜒ      │ ᜍ    │ ᜆ     │ ᜌ     │ ◌ᜓ      │ ◌ᜒ      │ ◌ᜓ      │ ᜉ     │     │     │     │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃     │     │     │     │     │     │     │     │     │     │     ┃ Enter    ┃
// ┃Caps ⇬  ┃ ᜀ     │ ᜐ     │ ᜇ    │     │ ᜄ     │ ᜑ     │     │ ᜃ     │ ᜎ    │     │     ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │ ᜅ     │     │     │     │     ┃           ┃
// ┃Shift ⇧┃     │     │     │     │     │ ᜊ     │ ᜈ     │ ᜋ    │ ᜵          │ ᜶         │     ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space                     ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space                     ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "qwerty-bay" {

    name[Group1]= "Filipino (QWERTY, Baybayin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE05> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
    // E row; Numerals row, right side
	key <AE06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE07> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE08> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE09> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE12> { [	U1714,		U1714,		VoidSymbol,	VoidSymbol	] }; // ◌᜔ (virama) ◌᜔ (virama)

    // D row; QWERTY row, left side
	key <AD01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD02> { [	U170F,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜏ (Wa)
	key <AD03> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AD04> { [	U170D,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜍ (Ra)
	key <AD05> { [	U1706,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜆ (Ta)
    // D row; QWERTY row, right side
	key <AD06> { [	U170C,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜌ (Ya)
	key <AD07> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AD08> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AD09> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AD10> { [	U1709,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜉ (Pa)
	key <AD11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD12> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <BKSL> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

     // C row; Home row, left side
	key <AC01> { [	U1700,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜀ (A)
	key <AC02> { [	U1710,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜐ (Sa)
	key <AC03> { [	U1707,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜇ (Da)
	key <AC04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AC05> { [	U1704,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜄ (Ga)
    // C row; Home row, right side
	key <AC06> { [	U1711,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜑ (Ha)
	key <AC07> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AC08> { [	U1703,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜃ (Ka)
	key <AC09> { [	U170E,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜎ (La)
	key <AC10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AC11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB05> { [	U170A,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜊ (Ba)
    // B row; Lower row, right side
	key <AB06> { [	U1708,		U1705,		VoidSymbol,	VoidSymbol	] }; // ᜈ (Na) ᜅ (Nga)
	key <AB07> { [	U170B,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜋ (Ma)
	key <AB08> { [	U1735,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜵ (comma)
	key <AB09> { [	U1736,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜶ (period)
	key <AB10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// Capewell-Dvorak (Latin) version
// http://www.michaelcapewell.com/projects/keyboard/index.htm#The_Capewell-Dvorak_Layout
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │ ~ ̃◌ │ ! ¡ │ @ ¤ │ # £ │ $ € │ % ° │ ^ ̂◌ │ & → │ * → │ ( ↑ │ ) ↓ │ {   │ }   ┃ ⌫ Bak ┃
// │ ` ̀◌ │ 1 ¹ │ 2 ² │ 3 ³ │ 4 ¼ │ 5 ½ │ 6 ¾ │ 7 ⅛ │ 8 ⅜ │ 9 ⅝ │ 0 ⅞ │ [   │ ]   ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃ " ̋◌ │ < ̨◌ │ > ␣ │ P   │ Y   │ Q   │ F ª │ G   │ R ¶ │ K   │ ? ¿ │ + ∓ │ | Ə │
// ┃Tab ↹  ┃ ' ́◌ │ , ̧◌ │ . … │ p ₱ │ y ¥ │ q   │ f   │ g   │ r ® │ k   │ / ÷ │ = ± │ \ ə │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃ O Ø │ A Æ │ E Œ │ I İ │ U   │ D   │ H   │ T   │ N Ñ │ S   │ _ ◌͠  ┃ Enter    ┃
// ┃Caps ⇬  ┃ o ø │ a æ │ e œ │ i ı │ u   │ d   │ h   │ t ™ │ n ñ │ s § │ - ¬ ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃   ¦ │ Z » │ X · │ C ¢ │ V ‘ │ J   │ L   │ M º │ W   │ B ’ │ :   ┃           ┃
// ┃Shift ⇧┃     │ z « │ x × │ c © │ v “ │ j   │ l   │ m µ │ w   │ b ” │ ;   ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space             Space ␣ ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space             Space ␣ ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "capewell-dvorak" {

    name[Group1]= "Filipino (Capewell-Dvorak, Latin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	U0060,		U007E,		U0300,		U0303		] }; // ` ~ ̀◌ ̃◌ (combining grave accent) (combining tilde)
	key <AE01> { [	U0031,		U0021,		U00B9,		U00A1		] }; // 1 ! ¹ ¡
	key <AE02> { [	U0032,		U0040,		U00B2,		U00A4		] }; // 2 @ ² ¤
	key <AE03> { [	U0033,		U0023,		U00B3,		U00A3		] }; // 3 # ³ £
	key <AE04> { [	U0034,		U0024,		U00BC,		U20AC		] }; // 4 $ ¼ €
	key <AE05> { [	U0035,		U0025,		U00BD,		U00B0		] }; // 5 % ½ °
    // E row; Numerals row, right side
	key <AE06> { [	U0036,		U005E,		U00BE,		U0302		] }; // 6 ^ ¾ ̂◌ (combining circumflex accent)
	key <AE07> { [	U0037,		U0026,		U215B,		U2190		] }; // 7 & ⅛ ←
	key <AE08> { [	U0038,		U002A,		U215C,		U2192		] }; // 8 * ⅜ →
	key <AE09> { [	U0039,		U0028,		U215D,		U2191		] }; // 9 ( ⅝ ↑
	key <AE10> { [	U0030,		U0029,		U215E,		U2193		] }; // 0 ) ⅞ ↓
	key <AE11> { [	U005B,		U007B,		VoidSymbol,	VoidSymbol	] }; // [ {
	key <AE12> { [	U005D,		U007D,		VoidSymbol,	VoidSymbol	] }; // ] }

    // D row; Upper row, left side
	key <AD01> { [	U0027,		U0022,		U0301,		U030B		] }; // ' " ́◌ ̋◌ (combining acute accent) (combining double-acute accent)
	key <AD02> { [	U002C,		U003C,		U0327,		U0328		] }; // , < ̧◌ ̨◌ (combining cedilla) (combining ogonek)
	key <AD03> { [	U002E,		U003E,		U2026,		U2423		] }; // . > … ␣
	key <AD04> { [	U0070,		U0050,		U20B1,		VoidSymbol	] }; // p P ₱
	key <AD05> { [	U0079,		U0059,		U00A5,		VoidSymbol	] }; // y Y ¥
    // D row; Upper row, right side
	key <AD06> { [	U0071,		U0051,		VoidSymbol,	VoidSymbol	] }; // q Q
	key <AD07> { [	U0066,		U0046,		VoidSymbol,	U00AA		] }; // f F   ª
	key <AD08> { [	U0067,		U0047,		VoidSymbol,	VoidSymbol	] }; // g G
	key <AD09> { [	U0072,		U0052,		U00AE,		U00B6		] }; // r R ® ¶
	key <AD10> { [	U006B,		U004B,		VoidSymbol,	VoidSymbol	] }; // k K
	key <AD11> { [	U002F,		U003F,		U00F7,		U00BF		] }; // / ? ÷ ¿
	key <AD12> { [	U003D,		U002B,		U00B1,		U2213		] }; // = + ± ∓
	key <BKSL> { [	U005C,		U007C,		U0259,		U018F		] }; // \ | ə Ə

    // C row; Home row, left side
	key <AC01> { [	U006F,		U004F,		U00F8,		U00D8		] }; // o O ø Ø
	key <AC02> { [	U0061,		U0041,		U00E6,		U00C6		] }; // a A æ Æ
	key <AC03> { [	U0065,		U0045,		U0153,		U0152		] }; // e E œ Œ
	key <AC04> { [	U0069,		U0049,		U0131,		U0130		] }; // i I ı İ
	key <AC05> { [	U0075,		U0055,		VoidSymbol,	VoidSymbol	] }; // u U
    // C row; Home row, right side
	key <AC06> { [	U0064,		U0044,		VoidSymbol,	VoidSymbol	] }; // d D
	key <AC07> { [	U0068,		U0048,		VoidSymbol,	VoidSymbol	] }; // h H
	key <AC08> { [	U0074,		U0054,		U2122,		VoidSymbol	] }; // t T ™
	key <AC09> { [	U006E,		U004E,		U00F1,		U00D1		] }; // n N ñ Ñ
	key <AC10> { [	U0073,		U0053,		U00A7,		VoidSymbol	] }; // s S §
	key <AC11> { [	U002D,		U005F,		U00AC,		U0360		] }; // - _ ¬ ◌͠

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	U00A6		] }; //       ¦
	key <AB01> { [	U007A,		U005A,		U00AB,		U00BB		] }; // z Z « »
	key <AB02> { [	U0078,		U0058,		U00D7,		U00B7		] }; // x X × ·
	key <AB03> { [	U0063,		U0043,		U00A9,		U00A2		] }; // c C © ¢
	key <AB04> { [	U0076,		U0056,		U201C,		U2018		] }; // v V “ ‘
	key <AB05> { [	U006A,		U004A,		VoidSymbol,	VoidSymbol	] }; // j J
    // B row; Lower row, right side
	key <AB06> { [	U006C,		U004C,		VoidSymbol,	VoidSymbol	] }; // l L
	key <AB07> { [	U006D,		U004D,		U00B5,		U00BA		] }; // m M µ º
	key <AB08> { [	U0077,		U0057,		VoidSymbol,	VoidSymbol	] }; // w W
	key <AB09> { [	U0062,		U0042,		U201D,		U2019		] }; // b B ” ’
	key <AB10> { [	U003B,		U003A,		VoidSymbol,	VoidSymbol	] }; // ; :

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// Capewell-Dvorak (Baybayin) version
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫ Bak ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     │ ◌᜔      │     │
// ┃Tab ↹  ┃     │ ᜵          │ ᜶         │ ᜉ     │ ᜌ    │     │     │ ᜄ     │ ᜍ     │ ᜃ     │     │ ◌᜔      │     │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃ ᜂ       │     │ ᜁ    │ ᜁ     │ ᜂ      │     │     │     │ ᜅ     │     │     ┃ Enter    ┃
// ┃Caps ⇬  ┃ ◌ᜓ      │ ᜀ     │ ◌ᜒ      │ ◌ᜒ      │ ◌ᜓ      │ ᜇ    │ ᜑ     │ ᜆ     │ ᜈ     │ ᜐ    │     ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     ┃           ┃
// ┃Shift ⇧┃     │     │     │     │     │     │ ᜎ     │ ᜋ     │ ᜏ    │ ᜊ     │     ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space                     ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space                     ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "capewell-dvorak-bay" {

    name[Group1]= "Filipino (Capewell-Dvorak, Baybayin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE05> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
    // E row; Numerals row, right side
	key <AE06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE07> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE08> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE09> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE12> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // D row; QWERTY row, left side
	key <AD01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD02> { [	U1735,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜵ (comma)
	key <AD03> { [	U1736,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜶ (period)
	key <AD04> { [	U1709,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜉ (Pa)
	key <AD05> { [	U170C,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜌ (Ya)
    // D row; QWERTY row, right side
	key <AD06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD07> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD08> { [	U1704,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜄ (Ga)
	key <AD09> { [	U170D,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜍ (Ra)
	key <AD10> { [	U1703,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜃ (Ka)
	key <AD11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD12> { [	U1714,		U1714,		VoidSymbol,	VoidSymbol	] }; // ◌᜔ (virama) ◌᜔ (virama)
	key <BKSL> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

     // C row; Home row, left side
	key <AC01> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AC02> { [	U1700,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜀ (A)
	key <AC03> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AC04> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AC05> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
    // C row; Home row, right side
	key <AC06> { [	U1707,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜇ (Da)
	key <AC07> { [	U1711,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜑ (Ha)
	key <AC08> { [	U1706,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜆ (Ta)
	key <AC09> { [	U1708,		U1705,		VoidSymbol,	VoidSymbol	] }; // ᜈ (Na) ᜅ (Nga)
	key <AC10> { [	U1710,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜐ (Sa)
	key <AC11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB05> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
    // B row; Lower row, right side
	key <AB06> { [	U170E,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜎ (La)
	key <AB07> { [	U170B,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜋ (Ma)
	key <AB08> { [	U170F,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜏ (Wa)
	key <AB09> { [	U170A,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜊ (Ba)
	key <AB10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// Capewell-QWERF 2006 (Latin) version
// http://www.michaelcapewell.com/projects/keyboard/index.htm#The_QWERF_Layout
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │ ~ ̃◌ │ ! ¡ │ @ ¤ │ # £ │ $ € │ % ° │ ^ ̂◌ │ & → │ * → │ ( ↑ │ ) ↓ │ _ ◌͠  │ + ∓ ┃ ⌫ Bak ┃
// │ ` ̀◌ │ 1 ¹ │ 2 ² │ 3 ³ │ 4 ¼ │ 5 ½ │ 6 ¾ │ 7 ⅛ │ 8 ⅜ │ 9 ⅝ │ 0 ⅞ │ - ¬ │ = ± ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃ Q   │ W   │ E Œ │ R ¶ │ F ª │ J   │ Y   │ K   │ L   │ :   │ {   │ }   │ | Ə │
// ┃Tab ↹  ┃ q   │ w   │ e œ │ r ® │ f   │ j   │ y ¥ │ k   │ l   │ ;   │ [   │ ]   │ \ ə │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃ A Æ │ S   │ D   │ T   │ G   │ H   │ U   │ I İ │ O Ø │ P   │ " ̋◌ ┃ Enter    ┃
// ┃Caps ⇬  ┃ a æ │ s § │ d   │ t ™ │ g   │ h   │ u   │ i ı │ o ø │ p ₱ │ ' ́◌ ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃   ¦ │ Z » │ X · │ C ¢ │ V ‘ │ B ’ │ N Ñ │ M º │ < ̨◌ │ > ␣ │ ? ¿ ┃           ┃
// ┃Shift ⇧┃     │ z « │ x × │ c © │ v “ │ b ” │ n ñ │ m µ │ , ̧◌ │ . … │ / ÷ ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space             Space ␣ ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space             Space ␣ ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "capewell-qwerf2k6" {

    name[Group1]= "Filipino (Capewell-QWERF 2006, Latin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	U0060,		U007E,		U0300,		U0303		] }; // ` ~ ̀◌ ̃◌ (combining grave accent) (combining tilde)
	key <AE01> { [	U0031,		U0021,		U00B9,		U00A1		] }; // 1 ! ¹ ¡
	key <AE02> { [	U0032,		U0040,		U00B2,		U00A4		] }; // 2 @ ² ¤
	key <AE03> { [	U0033,		U0023,		U00B3,		U00A3		] }; // 3 # ³ £
	key <AE04> { [	U0034,		U0024,		U00BC,		U20AC		] }; // 4 $ ¼ €
	key <AE05> { [	U0035,		U0025,		U00BD,		U00B0		] }; // 5 % ½ °
    // E row; Numerals row, right side
	key <AE06> { [	U0036,		U005E,		U00BE,		U0302		] }; // 6 ^ ¾ ̂◌ (combining circumflex accent)
	key <AE07> { [	U0037,		U0026,		U215B,		U2190		] }; // 7 & ⅛ ←
	key <AE08> { [	U0038,		U002A,		U215C,		U2192		] }; // 8 * ⅜ →
	key <AE09> { [	U0039,		U0028,		U215D,		U2191		] }; // 9 ( ⅝ ↑
	key <AE10> { [	U0030,		U0029,		U215E,		U2193		] }; // 0 ) ⅞ ↓
	key <AE11> { [	U002D,		U005F,		U00AC,		U0360		] }; // - _ ¬ ◌͠
	key <AE12> { [	U003D,		U002B,		U00B1,		U2213		] }; // = + ± ∓

    // D row; Upper row, left side
	key <AD01> { [	U0071,		U0051,		VoidSymbol,	VoidSymbol	] }; // q Q
	key <AD02> { [	U0077,		U0057,		VoidSymbol,	VoidSymbol	] }; // w W
	key <AD03> { [	U0065,		U0045,		U0153,		U0152		] }; // e E œ Œ
	key <AD04> { [	U0072,		U0052,		U00AE,		U00B6		] }; // r R ® ¶
	key <AD05> { [	U0066,		U0046,		VoidSymbol,	U00AA		] }; // f F   ª
    // D row; Upper row, right side
	key <AD06> { [	U006A,		U004A,		VoidSymbol,	VoidSymbol	] }; // j J
	key <AD07> { [	U0079,		U0059,		U00A5,		VoidSymbol	] }; // y Y ¥
	key <AD08> { [	U006B,		U004B,		VoidSymbol,	VoidSymbol	] }; // k K
	key <AD09> { [	U006C,		U004C,		VoidSymbol,	VoidSymbol	] }; // l L
	key <AD10> { [	U003B,		U003A,		VoidSymbol,	VoidSymbol	] }; // ; :
	key <AD11> { [	U005B,		U007B,		VoidSymbol,	VoidSymbol	] }; // [ {
	key <AD12> { [	U005D,		U007D,		VoidSymbol,	VoidSymbol	] }; // ] }
	key <BKSL> { [	U005C,		U007C,		U0259,		U018F		] }; // \ | ə Ə

    // C row; Home row, left side
	key <AC01> { [	U0061,		U0041,		U00E6,		U00C6		] }; // a A æ Æ
	key <AC02> { [	U0073,		U0053,		U00A7,		VoidSymbol	] }; // s S §
	key <AC03> { [	U0064,		U0044,		VoidSymbol,	VoidSymbol	] }; // d D
	key <AC04> { [	U0074,		U0054,		U2122,		VoidSymbol	] }; // t T ™
	key <AC05> { [	U0067,		U0047,		VoidSymbol,	VoidSymbol	] }; // g G
    // C row; Home row, right side
	key <AC06> { [	U0068,		U0048,		VoidSymbol,	VoidSymbol	] }; // h H
	key <AC07> { [	U0075,		U0055,		VoidSymbol,	VoidSymbol	] }; // u U
	key <AC08> { [	U0069,		U0049,		U0131,		U0130		] }; // i I ı İ
	key <AC09> { [	U006F,		U004F,		U00F8,		U00D8		] }; // o O ø Ø
	key <AC10> { [	U0070,		U0050,		U20B1,		VoidSymbol	] }; // p P ₱
	key <AC11> { [	U0027,		U0022,		U0301,		U030B		] }; // ' " ́◌ ̋◌ (combining acute accent) (combining double-acute accent)

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	U00A6		] }; //       ¦
	key <AB01> { [	U007A,		U005A,		U00AB,		U00BB		] }; // z Z « »
	key <AB02> { [	U0078,		U0058,		U00D7,		U00B7		] }; // x X × ·
	key <AB03> { [	U0063,		U0043,		U00A9,		U00A2		] }; // c C © ¢
	key <AB04> { [	U0076,		U0056,		U201C,		U2018		] }; // v V “ ‘
	key <AB05> { [	U0062,		U0042,		U201D,		U2019		] }; // b B ” ’
    // B row; Lower row, right side
	key <AB06> { [	U006E,		U004E,		U00F1,		U00D1		] }; // n N ñ Ñ
	key <AB07> { [	U006D,		U004D,		U00B5,		U00BA		] }; // m M µ º
	key <AB08> { [	U002C,		U003C,		U0327,		U0328		] }; // , < ̧◌ ̨◌ (combining cedilla) (combining ogonek)
	key <AB09> { [	U002E,		U003E,		U2026,		U2423		] }; // . > … ␣
	key <AB10> { [	U002F,		U003F,		U00F7,		U00BF		] }; // / ? ÷ ¿

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// Capewell-QWERF 2006 (Baybayin) version
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │ ◌᜔      ┃ ⌫ Bak ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │ ◌᜔      ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃     │     │ ᜁ     │     │     │     │     │     │     │     │     │     │     │
// ┃Tab ↹  ┃     │ ᜏ     │ ◌ᜒ      │ ᜍ     │     │     │ ᜌ    │ ᜃ     │ ᜎ     │     │     │     │     │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃     │     │     │     │     │     │ ᜂ      │ ᜁ     │ ᜂ       │     │     ┃ Enter    ┃
// ┃Caps ⇬  ┃ ᜀ     │ ᜐ     │ ᜇ    │ ᜆ     │ ᜄ     │ ᜑ     │ ◌ᜓ     │ ◌ᜒ      │ ◌ᜓ      │ ᜉ     │     ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │ ᜅ     │     │     │     │     ┃           ┃
// ┃Shift ⇧┃     │     │     │     │     │ ᜊ     │ ᜈ     │ ᜋ    │ ᜵          │ ᜶         │     ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space                     ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space                     ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "capewell-qwerf2k6-bay" {

    name[Group1]= "Filipino (Capewell-QWERF 2006, Baybayin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE05> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
    // E row; Numerals row, right side
	key <AE06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE07> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE08> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE09> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE12> { [	U1714,		U1714,		VoidSymbol,	VoidSymbol	] }; // ◌᜔ (virama) ◌᜔ (virama)

    // D row; QWERTY row, left side
	key <AD01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD02> { [	U170F,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜏ (Wa)
	key <AD03> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AD04> { [	U170D,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜍ (Ra)
	key <AD05> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
    // D row; QWERTY row, right side
	key <AD06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD07> { [	U170C,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜌ (Ya)
	key <AD08> { [	U1703,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜃ (Ka)
	key <AD09> { [	U170E,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜎ (La)
	key <AD10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD12> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <BKSL> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

     // C row; Home row, left side
	key <AC01> { [	U1700,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜀ (A)
	key <AC02> { [	U1710,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜐ (Sa)
	key <AC03> { [	U1707,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜇ (Da)
	key <AC04> { [	U1706,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜆ (Ta)
	key <AC05> { [	U1704,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜄ (Ga)
    // C row; Home row, right side
	key <AC06> { [	U1711,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜑ (Ha)
	key <AC07> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AC08> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AC09> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AC10> { [	U1709,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜉ (Pa)
	key <AC11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB05> { [	U170A,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜊ (Ba)
    // B row; Lower row, right side
	key <AB06> { [	U1708,		U1705,		VoidSymbol,	VoidSymbol	] }; // ᜈ (Na) ᜅ (Nga)
	key <AB07> { [	U170B,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜋ (Ma)
	key <AB08> { [	U1735,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜵ (comma)
	key <AB09> { [	U1736,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜶ (period)
	key <AB10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// Colemak (Latin) version
// http://colemak.com
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │ ~ ̃◌ │ ! ¡ │ @ ¤ │ # £ │ $ € │ % ° │ ^ ̂◌ │ & → │ * → │ ( ↑ │ ) ↓ │ _ ◌͠  │ + ∓ ┃ ⌫ Bak ┃
// │ ` ̀◌ │ 1 ¹ │ 2 ² │ 3 ³ │ 4 ¼ │ 5 ½ │ 6 ¾ │ 7 ⅛ │ 8 ⅜ │ 9 ⅝ │ 0 ⅞ │ - ¬ │ = ± ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃ Q   │ W   │ F ª │ P   │ G   │ J   │ L   │ U   │ Y   │ :   │ {   │ }   │ | Ə │
// ┃Tab ↹  ┃ q   │ w   │ f   │ p ₱ │ g   │ j   │ l   │ u   │ y ¥ │ ;   │ [   │ ]   │ \ ə │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃ A Æ │ R ¶ │ S   │ T   │ D   │ H   │ N Ñ │ E Œ │ I İ │ O Ø │ " ̋◌ ┃ Enter    ┃
// ┃Caps ⇬  ┃ a æ │ r ® │ s § │ t ™ │ d   │ h   │ n ñ │ e œ │ i ı │ o ø │ ' ́◌ ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃   ¦ │ Z » │ X · │ C ¢ │ V ‘ │ B ’ │ K   │ M º │ < ̨◌ │ > ␣ │ ? ¿ ┃           ┃
// ┃Shift ⇧┃     │ z « │ x × │ c © │ v “ │ b ” │ k   │ m µ │ , ̧◌ │ . … │ / ÷ ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space             Space ␣ ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space             Space ␣ ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "colemak" {

    name[Group1]= "Filipino (Colemak, Latin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	U0060,		U007E,		U0300,		U0303		] }; // ` ~ ̀◌ ̃◌ (combining grave accent) (combining tilde)
	key <AE01> { [	U0031,		U0021,		U00B9,		U00A1		] }; // 1 ! ¹ ¡
	key <AE02> { [	U0032,		U0040,		U00B2,		U00A4		] }; // 2 @ ² ¤
	key <AE03> { [	U0033,		U0023,		U00B3,		U00A3		] }; // 3 # ³ £
	key <AE04> { [	U0034,		U0024,		U00BC,		U20AC		] }; // 4 $ ¼ €
	key <AE05> { [	U0035,		U0025,		U00BD,		U00B0		] }; // 5 % ½ °
    // E row; Numerals row, right side
	key <AE06> { [	U0036,		U005E,		U00BE,		U0302		] }; // 6 ^ ¾ ̂◌ (combining circumflex accent)
	key <AE07> { [	U0037,		U0026,		U215B,		U2190		] }; // 7 & ⅛ ←
	key <AE08> { [	U0038,		U002A,		U215C,		U2192		] }; // 8 * ⅜ →
	key <AE09> { [	U0039,		U0028,		U215D,		U2191		] }; // 9 ( ⅝ ↑
	key <AE10> { [	U0030,		U0029,		U215E,		U2193		] }; // 0 ) ⅞ ↓
	key <AE11> { [	U002D,		U005F,		U00AC,		U0360		] }; // - _ ¬ ◌͠
	key <AE12> { [	U003D,		U002B,		U00B1,		U2213		] }; // = + ± ∓

    // D row; Upper row, left side
	key <AD01> { [	U0071,		U0051,		VoidSymbol,	VoidSymbol	] }; // q Q
	key <AD02> { [	U0077,		U0057,		VoidSymbol,	VoidSymbol	] }; // w W
	key <AD03> { [	U0066,		U0046,		VoidSymbol,	U00AA		] }; // f F   ª
	key <AD04> { [	U0070,		U0050,		U20B1,		VoidSymbol	] }; // p P ₱
	key <AD05> { [	U0067,		U0047,		VoidSymbol,	VoidSymbol	] }; // g G
   // D row; Upper row, right side
	key <AD06> { [	U006A,		U004A,		VoidSymbol,	VoidSymbol	] }; // j J
	key <AD07> { [	U006C,		U004C,		VoidSymbol,	VoidSymbol	] }; // l L
	key <AD08> { [	U0075,		U0055,		VoidSymbol,	VoidSymbol	] }; // u U
	key <AD09> { [	U0079,		U0059,		U00A5,		VoidSymbol	] }; // y Y ¥
	key <AD10> { [	U003B,		U003A,		VoidSymbol,	VoidSymbol	] }; // ; :
	key <AD11> { [	U005B,		U007B,		VoidSymbol,	VoidSymbol	] }; // [ {
	key <AD12> { [	U005D,		U007D,		VoidSymbol,	VoidSymbol	] }; // ] }
	key <BKSL> { [	U005C,		U007C,		U0259,		U018F		] }; // \ | ə Ə

    // C row; Home row, left side
	key <AC01> { [	U0061,		U0041,		U00E6,		U00C6		] }; // a A æ Æ
	key <AC02> { [	U0072,		U0052,		U00AE,		U00B6		] }; // r R ® ¶
	key <AC03> { [	U0073,		U0053,		U00A7,		VoidSymbol	] }; // s S §
	key <AC04> { [	U0074,		U0054,		U2122,		VoidSymbol	] }; // t T ™
	key <AC05> { [	U0064,		U0044,		VoidSymbol,	VoidSymbol	] }; // d D
    // C row; Home row, right side
	key <AC06> { [	U0068,		U0048,		VoidSymbol,	VoidSymbol	] }; // h H
	key <AC07> { [	U006E,		U004E,		U00F1,		U00D1		] }; // n N ñ Ñ
	key <AC08> { [	U0065,		U0045,		U0153,		U0152		] }; // e E œ Œ
	key <AC09> { [	U0069,		U0049,		U0131,		U0130		] }; // i I ı İ
	key <AC10> { [	U006F,		U004F,		U00F8,		U00D8		] }; // o O ø Ø
	key <AC11> { [	U0027,		U0022,		U0301,		U030B		] }; // ' " ́◌ ̋◌ (combining acute accent) (combining double-acute accent)

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	U00A6		] }; //       ¦
	key <AB01> { [	U007A,		U005A,		U00AB,		U00BB		] }; // z Z « »
	key <AB02> { [	U0078,		U0058,		U00D7,		U00B7		] }; // x X × ·
	key <AB03> { [	U0063,		U0043,		U00A9,		U00A2		] }; // c C © ¢
	key <AB04> { [	U0076,		U0056,		U201C,		U2018		] }; // v V “ ‘
	key <AB05> { [	U0062,		U0042,		U201D,		U2019		] }; // b B ” ’
    // B row; Lower row, right side
	key <AB06> { [	U006B,		U004B,		VoidSymbol,	VoidSymbol	] }; // k K
	key <AB07> { [	U006D,		U004D,		U00B5,		U00BA		] }; // m M µ º
	key <AB08> { [	U002C,		U003C,		U0327,		U0328		] }; // , < ̧◌ ̨◌ (combining cedilla) (combining ogonek)
	key <AB09> { [	U002E,		U003E,		U2026,		U2423		] }; // . > … ␣
	key <AB10> { [	U002F,		U003F,		U00F7,		U00BF		] }; // / ? ÷ ¿

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// Colemak (Baybayin) version
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │ ◌᜔      ┃ ⌫ Bak ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │ ◌᜔      ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃     │     │     │     │     │     │     │ ᜂ      │     │     │     │     │     │
// ┃Tab ↹  ┃     │ ᜏ     │     │ ᜉ     │ ᜄ    │     │ ᜎ     │ ◌ᜓ      │ ᜌ     │     │     │     │     │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃     │     │     │     │     │     │ ᜅ     │ ᜁ     │ ᜁ    │ ᜂ       │     ┃ Enter    ┃
// ┃Caps ⇬  ┃ ᜀ     │ ᜍ     │ ᜐ    │ ᜆ     │ ᜇ     │ ᜑ    │ ᜈ     │ ◌ᜒ      │ ◌ᜒ      │ ◌ᜓ      │     ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     ┃           ┃
// ┃Shift ⇧┃     │     │     │     │     │ ᜊ     │ ᜃ     │ ᜋ    │ ᜵          │ ᜶         │     ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space                     ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space                     ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "colemak-bay" {

    name[Group1]= "Filipino (Colemak, Baybayin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE05> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
    // E row; Numerals row, right side
	key <AE06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE07> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE08> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE09> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE12> { [	U1714,		U1714,		VoidSymbol,	VoidSymbol	] }; // ◌᜔ (virama) ◌᜔ (virama)

    // D row; QWERTY row, left side
	key <AD01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD02> { [	U170F,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜏ (Wa)
	key <AD03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD04> { [	U1709,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜉ (Pa)
	key <AD05> { [	U1704,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜄ (Ga)
    // D row; QWERTY row, right side
	key <AD06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD07> { [	U170E,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜎ (La)
	key <AD08> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AD09> { [	U170C,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜌ (Ya)
	key <AD10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD12> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <BKSL> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

     // C row; Home row, left side
	key <AC01> { [	U1700,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜀ (A)
	key <AC02> { [	U170D,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜍ (Ra)
	key <AC03> { [	U1710,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜐ (Sa)
	key <AC04> { [	U1706,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜆ (Ta)
	key <AC05> { [	U1707,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜇ (Da)
    // C row; Home row, right side
	key <AC06> { [	U1711,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜑ (Ha)
	key <AC07> { [	U1708,		U1705,		VoidSymbol,	VoidSymbol	] }; // ᜈ (Na) ᜅ (Nga)
	key <AC08> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AC09> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AC10> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AC11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB05> { [	U170A,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜊ (Ba)
    // B row; Lower row, right side
	key <AB06> { [	U1703,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜃ (Ka)
	key <AB07> { [	U170B,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜋ (Ma)
	key <AB08> { [	U1735,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜵ (comma)
	key <AB09> { [	U1736,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜶ (period)
	key <AB10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// Dvorak Simplified (Latin) version
// http://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │ ~ ̃◌ │ ! ¡ │ @ ¤ │ # £ │ $ € │ % ° │ ^ ̂◌ │ & → │ * → │ ( ↑ │ ) ↓ │ {   │ }   ┃ ⌫ Bak ┃
// │ ` ̀◌ │ 1 ¹ │ 2 ² │ 3 ³ │ 4 ¼ │ 5 ½ │ 6 ¾ │ 7 ⅛ │ 8 ⅜ │ 9 ⅝ │ 0 ⅞ │ [   │ ]   ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃ " ̋◌ │ < ̨◌ │ > ␣ │ P   │ Y   │ F ª │ G   │ C ¢ │ R ¶ │ L   │ ? ¿ │ + ∓ │ | Ə │
// ┃Tab ↹  ┃ ' ́◌ │ , ̧◌ │ . … │ p ₱ │ y ¥ │ f   │ g   │ c © │ r ® │ l   │ / ÷ │ = ± │ \ ə │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃ A Æ │ O Ø │ E Œ │ U   │ I İ │ D   │ H   │ T   │ N Ñ │ S   │ _ ◌͠  ┃ Enter    ┃
// ┃Caps ⇬  ┃ a æ │ o ø │ e œ │ u   │ i ı │ d   │ h   │ t ™ │ n ñ │ s § │ - ¬ ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃   ¦ │ :   │ Q   │ J   │ K   │ X · │ B ’ │ M º │ W   │ V ‘ │ Z » ┃           ┃
// ┃Shift ⇧┃     │ ;   │ q   │ j   │ k   │ x × │ b ” │ m µ │ w   │ v “ │ z « ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space             Space ␣ ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space             Space ␣ ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "dvorak" {

    name[Group1]= "Filipino (Dvorak, Latin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	U0060,		U007E,		U0300,		U0303		] }; // ` ~ ̀◌ ̃◌ (combining grave accent) (combining tilde)
	key <AE01> { [	U0031,		U0021,		U00B9,		U00A1		] }; // 1 ! ¹ ¡
	key <AE02> { [	U0032,		U0040,		U00B2,		U00A4		] }; // 2 @ ² ¤
	key <AE03> { [	U0033,		U0023,		U00B3,		U00A3		] }; // 3 # ³ £
	key <AE04> { [	U0034,		U0024,		U00BC,		U20AC		] }; // 4 $ ¼ €
	key <AE05> { [	U0035,		U0025,		U00BD,		U00B0		] }; // 5 % ½ °
    // E row; Numerals row, right side
	key <AE06> { [	U0036,		U005E,		U00BE,		U0302		] }; // 6 ^ ¾ ̂◌ (combining circumflex accent)
	key <AE07> { [	U0037,		U0026,		U215B,		U2190		] }; // 7 & ⅛ ←
	key <AE08> { [	U0038,		U002A,		U215C,		U2192		] }; // 8 * ⅜ →
	key <AE09> { [	U0039,		U0028,		U215D,		U2191		] }; // 9 ( ⅝ ↑
	key <AE10> { [	U0030,		U0029,		U215E,		U2193		] }; // 0 ) ⅞ ↓
	key <AE11> { [	U005B,		U007B,		VoidSymbol,	VoidSymbol	] }; // [ {
	key <AE12> { [	U005D,		U007D,		VoidSymbol,	VoidSymbol	] }; // ] }

    // D row; Upper row, left side
	key <AD01> { [	U0027,		U0022,		U0301,		U030B		] }; // ' " ́◌ ̋◌ (combining acute accent) (combining double-acute accent)
	key <AD02> { [	U002C,		U003C,		U0327,		U0328		] }; // , < ̧◌ ̨◌ (combining cedilla) (combining ogonek)
	key <AD03> { [	U002E,		U003E,		U2026,		U2423		] }; // . > … ␣
	key <AD04> { [	U0070,		U0050,		U20B1,		VoidSymbol	] }; // p P ₱
	key <AD05> { [	U0079,		U0059,		U00A5,		VoidSymbol	] }; // y Y ¥
    // D row; Upper row, right side
	key <AD06> { [	U0066,		U0046,		VoidSymbol,	U00AA		] }; // f F   ª
	key <AD07> { [	U0067,		U0047,		VoidSymbol,	VoidSymbol	] }; // g G
	key <AD08> { [	U0063,		U0043,		U00A9,		U00A2		] }; // c C © ¢
	key <AD09> { [	U0072,		U0052,		U00AE,		U00B6		] }; // r R ® ¶
	key <AD10> { [	U006C,		U004C,		VoidSymbol,	VoidSymbol	] }; // l L
	key <AD11> { [	U002F,		U003F,		U00F7,		U00BF		] }; // / ? ÷ ¿
	key <AD12> { [	U003D,		U002B,		U00B1,		U2213		] }; // = + ± ∓
	key <BKSL> { [	U005C,		U007C,		U0259,		U018F		] }; // \ | ə Ə

    // C row; Home row, left side
	key <AC01> { [	U0061,		U0041,		U00E6,		U00C6		] }; // a A æ Æ
	key <AC02> { [	U006F,		U004F,		U00F8,		U00D8		] }; // o O ø Ø
	key <AC03> { [	U0065,		U0045,		U0153,		U0152		] }; // e E œ Œ
	key <AC04> { [	U0075,		U0055,		VoidSymbol,	VoidSymbol	] }; // u U
	key <AC05> { [	U0069,		U0049,		U0131,		U0130		] }; // i I ı İ
    // C row; Home row, right side
	key <AC06> { [	U0064,		U0044,		VoidSymbol,	VoidSymbol	] }; // d D
	key <AC07> { [	U0068,		U0048,		VoidSymbol,	VoidSymbol	] }; // h H
	key <AC08> { [	U0074,		U0054,		U2122,		VoidSymbol	] }; // t T ™
	key <AC09> { [	U006E,		U004E,		U00F1,		U00D1		] }; // n N ñ Ñ
	key <AC10> { [	U0073,		U0053,		U00A7,		VoidSymbol	] }; // s S §
	key <AC11> { [	U002D,		U005F,		U00AC,		U0360		] }; // - _ ¬ ◌͠

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	U00A6		] }; //       ¦
	key <AB01> { [	U003B,		U003A,		VoidSymbol,	VoidSymbol	] }; // ; :
	key <AB02> { [	U0071,		U0051,		VoidSymbol,	VoidSymbol	] }; // q Q
	key <AB03> { [	U006A,		U004A,		VoidSymbol,	VoidSymbol	] }; // j J
	key <AB04> { [	U006B,		U004B,		VoidSymbol,	VoidSymbol	] }; // k K
	key <AB05> { [	U0078,		U0058,		U00D7,		U00B7		] }; // x X × ·
    // B row; Lower row, right side
	key <AB06> { [	U0062,		U0042,		U201D,		U2019		] }; // b B ” ’
	key <AB07> { [	U006D,		U004D,		U00B5,		U00BA		] }; // m M µ º
	key <AB08> { [	U0077,		U0057,		VoidSymbol,	VoidSymbol	] }; // w W
	key <AB09> { [	U0076,		U0056,		U201C,		U2018		] }; // v V “ ‘
	key <AB10> { [	U007A,		U005A,		U00AB,		U00BB		] }; // z Z « »

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


// Dvorak Simplified (Baybayin) version
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫ Bak ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     │ ◌᜔      │     │
// ┃Tab ↹  ┃     │ ᜵          │ ᜶         │ ᜉ    │ ᜌ     │     │ ᜄ     │     │ ᜍ     │ ᜎ    │     │ ◌᜔       │     │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃     │ ᜂ      │ ᜁ     │ ᜂ       │ ᜁ    │     │     │     │ ᜅ     │     │     ┃ Enter    ┃
// ┃Caps ⇬  ┃ ᜀ     │ ◌ᜓ      │ ◌ᜒ      │ ◌ᜓ      │ ◌ᜒ      │ ᜇ     │ ᜑ    │ ᜆ     │ ᜈ     │ ᜐ     │     ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     ┃           ┃
// ┃Shift ⇧┃     │     │     │     │ ᜃ     │     │ ᜊ     │ ᜋ    │ ᜏ     │     │     ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space                     ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space                     ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
partial alphanumeric_keys
xkb_symbols "dvorak-bay" {

    name[Group1]= "Filipino (Dvorak, Baybayin)";

//	ISO grouping:	|--------- Group1 ---------|	|--------- Group2 ---------|
//			Level1		Level2		Level3		Level4
//			Base		Shift		AltGr		AltGr+Shift

    // E row; Numerals row, left side
	key <TLDE> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE04> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE05> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
    // E row; Numerals row, right side
	key <AE06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE07> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE08> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE09> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AE12> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // D row; QWERTY row, left side
	key <AD01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD02> { [	U1735,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜵ (comma)
	key <AD03> { [	U1736,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜶ (period)
	key <AD04> { [	U1709,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜉ (Pa)
	key <AD05> { [	U170C,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜌ (Ya)
    // D row; QWERTY row, right side
	key <AD06> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD07> { [	U1704,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜄ (Ga)
	key <AD08> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD09> { [	U170D,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜍ (Ra)
	key <AD10> { [	U170E,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜎ (La)
	key <AD11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AD12> { [	U1714,		U1714,		VoidSymbol,	VoidSymbol	] }; // ◌᜔ (virama) ◌᜔ (virama)
	key <BKSL> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // C row; Home row, left side
	key <AC01> { [	U1700,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜀ (A)
	key <AC02> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AC03> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
	key <AC04> { [	U1713,		U1702,		VoidSymbol,	VoidSymbol	] }; // ◌ᜓ (o/u) ᜂ (O/U)
	key <AC05> { [	U1712,		U1701,		VoidSymbol,	VoidSymbol	] }; // ◌ᜒ (e/i) ᜁ (E/I)
    // C row; Home row, right side
	key <AC06> { [	U1707,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜇ (Da)
	key <AC07> { [	U1711,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜑ (Ha)
	key <AC08> { [	U1706,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜆ (Ta)
	key <AC09> { [	U1708,		U1705,		VoidSymbol,	VoidSymbol	] }; // ᜈ (Na) ᜅ (Nga)
	key <AC10> { [	U1710,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜐ (Sa)
	key <AC11> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // B row; Lower row, left side
	key <AB00> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB01> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB02> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB03> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB04> { [	U1703,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜃ (Ka)
	key <AB05> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
    // B row; Lower row, right side
	key <AB06> { [	U170A,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜊ (Ba)
	key <AB07> { [	U170B,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜋ (Ma)
	key <AB08> { [	U170F,		VoidSymbol,	VoidSymbol,	VoidSymbol	] }; // ᜏ (Wa)
	key <AB09> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //
	key <AB10> { [	VoidSymbol,	VoidSymbol,	VoidSymbol,	VoidSymbol	] }; //

    // A row
	key <AA03> { [	U0020,		U0020,		U0020,		U0020		] }; // (space) (space) (space) (space)

    include "level3(ralt_switch)"
};


//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫ Bak ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ Space ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┯━━━━━┩
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     │     │     │
// ┃Tab ↹  ┃     │     │     │     │     │     │     │     │     │     │     │     │     │
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━┪
// ┃        ┃     │     │     │     │     │     │     │     │     │     │     ┃ Enter    ┃
// ┃Caps ⇬  ┃     │     │     │     │     │     │     │     │     │     │     ┃   ⏎      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┻━━━━━━━━━━┫
// ┃       ┃     │     │     │     │     │     │     │     │     │     │     ┃           ┃
// ┃Shift ⇧┃     │     │     │     │     │     │     │     │     │     │     ┃Shift ⇧    ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┷━┳━━━┻━━━┳━━━━━━━┫
// ┃       ┃Win    ┃       ┃ ␣ Space             Space ␣ ┃       ┃Win    ┃       ┃       ┃
// ┃Ctrl   ┃Super  ┃Alt    ┃ ␣ Space             Space ␣ ┃AltGr ⇮┃Meta   ┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹─────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin"

    name[Group1]="French";

    key <AE01>	{ [ ampersand,          1,  onesuperior,   exclamdown ]	};
    key <AE02>	{ [    eacute,          2,   asciitilde,    oneeighth ]	};
    key <AE03>	{ [  quotedbl,          3,   numbersign,     sterling ]	};
    key <AE04>	{ [apostrophe,          4,    braceleft,       dollar ]	};
    key <AE05>	{ [ parenleft,          5,  bracketleft, threeeighths ]	};
    key <AE06>	{ [     minus,          6,          bar,  fiveeighths ]	};
    key <AE07>	{ [    egrave,          7,        grave, seveneighths ]	};
    key <AE08>	{ [underscore,          8,    backslash,    trademark ]	};
    key <AE09>	{ [  ccedilla,          9,  asciicircum,    plusminus ]	};
    key <AE10>	{ [    agrave,          0,           at,       degree ]	};
    key <AE11>	{ [parenright,     degree, bracketright, questiondown ]	};
    key <AE12>	{ [     equal,       plus,   braceright,  dead_ogonek ]	};

    key <AD01>	{ [         a,          A,           ae,           AE ]	};
    key <AD02>	{ [         z,          Z, guillemotleft,        less ]	};
    key <AD03>	{ [         e,          E,     EuroSign,         cent ]	};
    key <AD11>	{ [dead_circumflex, dead_diaeresis, dead_diaeresis, dead_abovering ] };
    key <AD12>	{ [    dollar,   sterling,     currency,  dead_macron ]	};

    key <AC01>	{ [         q,          Q,           at,  Greek_OMEGA ]	};
    key <AC10>	{ [         m,          M,           mu,    masculine ]	};
    key <AC11>	{ [    ugrave,    percent, dead_circumflex, dead_caron]	};
    key <TLDE>	{ [twosuperior, asciitilde,     notsign,      notsign ]	};

    key <BKSL>	{ [  asterisk,         mu,   dead_grave,   dead_breve ]	};
    key <AB01>	{ [         w,          W,      lstroke,      Lstroke ]	};
    key <AB07>	{ [     comma,   question,   dead_acute, dead_doubleacute ] };
    key <AB08>	{ [ semicolon,     period, horizconnector,   multiply ]	};
    key <AB09>	{ [     colon,      slash, periodcentered,   division ]	};
    key <AB10>	{ [    exclam,    section, dead_belowdot, dead_abovedot ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "olpc" {
    // Contact: Sayamindu Dasgupta <sayamindu@laptop.org>
    include "fr(basic)"

    name[Group1]="French";

    key <I219>	{ [ less, greater ]	};
    key <AD11>	{ [ dead_circumflex, dead_diaeresis, notsign, dead_abovering ]	};
    key <AB08>	{ [ semicolon, period, underscore, multiply ]	};
    key <TLDE>	{ [ twosuperior, asciitilde, VoidSymbol, VoidSymbol ]	};

    // Some keys only have the Shift+AltGr character printed on them (alongside
    // the unmodified one). Make such keys shift-invariant so that the printed
    // value is achieved by pressing AltGr or Shift+AltGr.
    key <AB02>	{ [ x,  X,  guillemotright, guillemotright ]	};
    key <AC02>	{ [ s,  S,  ssharp, U1E9E ]	};
    key <AD02>	{ [ z,  Z,  guillemotleft, guillemotleft ]	};
};

partial alphanumeric_keys
xkb_symbols "sundeadkeys" {

    // Modifies the basic French layout to use the Sun dead keys.

    include "fr(basic)"
    name[Group1]="French (Sun dead keys)";

    key <AD11>	{ [dead_circumflex, dead_diaeresis                                ] };
    key <AB07>	{ [          comma,       question,  dead_acute, dead_doubleacute ] };
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // Modifies the basic French layout to eliminate all dead keys

    include "fr(basic)"

    name[Group1]="French (no dead keys)";

    key <AE12>	{ [     equal,       plus,   braceright,       ogonek ]	};
    key <AD11>	{ [asciicircum,  diaeresis ]	};
    key <AD12>	{ [    dollar,   sterling,     currency,       macron ]	};
    key <AC11>	{ [    ugrave,    percent,  asciicircum,        caron ]	};
    key <BKSL>	{ [  asterisk,         mu,        grave,        breve ]	};
    key <AB07>	{ [     comma,   question,        acute,  doubleacute ]	};
    key <AB10>	{ [    exclam,    section, dead_belowdot,    abovedot ]	};
};


// Unicode French derivative
// Loose refactoring of the historic Linux French keyboard layout
//
// Copyright © 2006-2008 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// Credits (fr-latin1, fr-latin0, fr-latin9)
//   © 199x-1996 René Cougnenc ✝
//   © 1997-2002 Guylhem Aznar <clavier @ externe.net>
//   © 2003-2006 Nicolas Mailhot <nicolas.mailhot @ laposte.net>
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ³ ¸ │ 1 ̨  │ 2 É │ 3 ˘ │ 4 — │ 5 – │ 6 ‑ │ 7 È │ 8 ™ │ 9 Ç │ 0 À │ ° ≠ │ + ± ┃ ⌫ Retour┃
// │ ² ¹ │ & ˇ │ é ~ │ " # │ ' { │ ( [ │ - | │ è ` │ _ \ │ ç ^ │ à @ │ ) ] │ = } ┃  arrière┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ A Æ │ Z Â │ E ¢ │ R Ê │ T Þ │ Y Ÿ │ U Û │ I Î │ O Œ │ P Ô │ ¨ ˚ │ £ Ø ┃Entrée ┃
// ┃Tab ↹  ┃ a æ │ z â │ e € │ r ê │ t þ │ y ÿ │ u û │ i î │ o œ │ p ô │ ^ ~ │ $ ø ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ Q Ä │ S „ │ D Ë │ F ‚ │ G ¥ │ H Ð │ J Ü │ K Ï │ L Ŀ │ M Ö │ % Ù │ µ ̄  ┃      ┃
// ┃Maj ⇬   ┃ q ä │ s ß │ d ë │ f ‘ │ g ’ │ h ð │ j ü │ k ï │ l ŀ │ m ö │ ù ' │ * ` ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ > ≥ │ W “ │ X ” │ C ® │ V ← │ B ↑ │ N → │ ? … │ . . │ / ∕ │ § − ┃             ┃
// ┃Shift ⇧┃ < ≤ │ w « │ x » │ c © │ v ⍽ │ b ↓ │ n ¬ │ , ¿ │ ; × │ : ÷ │ ! ¡ ┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣         Espace fine insécable ⍽ ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣ Espace       Espace insécable ⍽ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛
partial alphanumeric_keys
xkb_symbols "oss" {

    include "latin"
    include "level3(ralt_switch)"
    include "nbsp(level4n)"
    include "keypad(oss)"

    name[Group1]="French (alt.)";

    // First row
    key <TLDE>	{ [      twosuperior,    threesuperior,          onesuperior,          dead_cedilla ] }; // ² ³ ¹ ¸
    key <AE01>	{ [        ampersand,                1,           dead_caron,           dead_ogonek ] }; // & 1 ˇ ̨
    key <AE02>	{ [           eacute,                2,           asciitilde,                Eacute ] }; // é 2 ~ É
    key <AE03>	{ [         quotedbl,                3,           numbersign,            dead_breve ] }; // " 3 # ˘
    key <AE04>	{ [       apostrophe,                4,            braceleft,             0x1002014 ] }; // ' 4 { — (tiret cadratin)
    key <AE05>	{ [        parenleft,                5,          bracketleft,             0x1002013 ] }; // ( 5 [ – (tiret demi-cadratin)
    key <AE06>	{ [            minus,                6,                  bar,             0x1002011 ] }; // - 6 | ‑ (tiret insécable)
    key <AE07>	{ [           egrave,                7,                grave,                Egrave ] }; // è 7 ` È
    key <AE08>	{ [       underscore,                8,            backslash,             trademark ] }; // _ 8 \ ™
    key <AE09>	{ [         ccedilla,                9,          asciicircum,              Ccedilla ] }; // ç 9 ^ Ç
    key <AE10>	{ [           agrave,                0,                   at,                Agrave ] }; // à 0 @ À
    key <AE11>	{ [       parenright,           degree,         bracketright,              notequal ] }; // ) ° ] ≠
    key <AE12>	{ [            equal,             plus,           braceright,             plusminus ] }; // = + } ±

    // Second row
    key <AD01>	{ [                a,                A,                   ae,                    AE ] }; // a A æ Æ
    key <AD02>	{ [                z,                Z,          acircumflex,           Acircumflex ] }; // z Z â Â
    key <AD03>	{ [                e,                E,             EuroSign,                  cent ] }; // e E € ¢
    key <AD04>	{ [                r,                R,          ecircumflex,           Ecircumflex ] }; // r R ê Ê
    key <AD05>	{ [                t,                T,                thorn,                 THORN ] }; // t T þ Þ
    key <AD06>	{ [                y,                Y,           ydiaeresis,            Ydiaeresis ] }; // y Y ÿ Ÿ
    key <AD07>	{ [                u,                U,          ucircumflex,           Ucircumflex ] }; // u U û Û
    key <AD08>	{ [                i,                I,          icircumflex,           Icircumflex ] }; // i I î Î
    key <AD09>	{ [                o,                O,                   oe,                    OE ] }; // o O œ Œ
    key <AD10>	{ [                p,                P,          ocircumflex,           Ocircumflex ] }; // p P ô Ô
    key <AD11>	{ [  dead_circumflex,   dead_diaeresis,           dead_tilde,        dead_abovering ] }; // ^ ̈ ̃ ˚
    key <AD12>	{ [           dollar,         sterling,               oslash,              Ooblique ] }; // $ £ ø Ø

    // Third row
    key <AC01>	{ [                q,                Q,           adiaeresis,            Adiaeresis ] }; // q Q ä Ä
    key <AC02>	{ [                s,                S,               ssharp,    doublelowquotemark ] }; // s S ß „
    key <AC03>	{ [                d,                D,           ediaeresis,            Ediaeresis ] }; // d D ë Ë
    key <AC04>	{ [                f,                F,  leftsinglequotemark,    singlelowquotemark ] }; // f F ‘ ‚
    key <AC05>	{ [                g,                G, rightsinglequotemark,                   yen ] }; // g G ’ ¥
    key <AC06>	{ [                h,                H,                  eth,                   ETH ] }; // h H ð Ð
    key <AC07>	{ [                j,                J,           udiaeresis,            Udiaeresis ] }; // j J ü Ü
    key <AC08>	{ [                k,                K,           idiaeresis,            Idiaeresis ] }; // k K ï Ï
    key <AC09>	{ [                l,                L,            0x1000140,             0x100013F ] }; // l L ŀ Ŀ
    key <AC10>	{ [                m,                M,           odiaeresis,            Odiaeresis ] }; // m M ö Ö
    key <AC11>	{ [           ugrave,          percent,           dead_acute,                Ugrave ] }; // ù % ' Ù
    key <BKSL>	{ [         asterisk,               mu,           dead_grave,           dead_macron ] }; // * µ ` ̄

    // Fourth row
    key <LSGT>  { [             less,          greater,        lessthanequal,      greaterthanequal ] }; // < > ≤ ≥
    key <AB01>  { [                w,                W,        guillemotleft,   leftdoublequotemark ] }; // w W « “
    key <AB02>  { [                x,                X,       guillemotright,  rightdoublequotemark ] }; // x X » ”
    key <AB03>  { [                c,                C,            copyright,            registered ] }; // c C © ®
    key <AB04>  { [                v,                V,            0x100202F,             leftarrow ] }; // v V ⍽ ← (espace fine insécable)
    key <AB05>  { [                b,                B,            downarrow,               uparrow ] }; // b B ↓ ↑
    key <AB06>  { [                n,                N,              notsign,            rightarrow ] }; // n N ¬ →
    key <AB07>  { [            comma,         question,         questiondown,             0x1002026 ] }; // , ? ¿ …
    key <AB08>  { [        semicolon,           period,             multiply,             0x10022C5 ] }; // ; . × ⋅
    key <AB09>  { [            colon,            slash,             division,             0x1002215 ] }; // : / ÷ ∕
    key <AB10>  { [           exclam,          section,           exclamdown,             0x1002212 ] }; // ! § ¡ −
};

partial alphanumeric_keys
xkb_symbols "oss_latin9" {

    // Restricts the fr(oss) layout to latin9 symbols

    include "fr(oss)"
    include "keypad(oss_latin9)"

    name[Group1]="French (alt., Latin-9 only)";

    // First row
    key <AE01>	{ [        ampersand,                1,           dead_caron,          dead_cedilla ] }; // & 1 ˇ ¸
    key <AE03>	{ [         quotedbl,                3,           numbersign,            dead_tilde ] }; // " 3 # ~
    key <AE04>	{ [       apostrophe,                4,            braceleft,            underscore ] }; // ' 4 { _
    key <AE05>	{ [        parenleft,                5,          bracketleft,                 minus ] }; // ( 5 [ -
    key <AE06>	{ [            minus,                6,                  bar,                 minus ] }; // - 6 | -
    key <AE08>	{ [       underscore,                8,            backslash,             backslash ] }; // _ 8 \ \
    key <AE11>	{ [       parenright,           degree,         bracketright,                 equal ] }; // ) ° ] =

    // Third row
    key <AC02>	{ [                s,                S,               ssharp,         guillemotleft ] }; // s S ß «
    key <AC04>	{ [                f,                F,           apostrophe,            apostrophe ] }; // f F ' '
    key <AC05>	{ [                g,                G,           apostrophe,                   yen ] }; // g G ' ¥
    key <AC09>	{ [                l,                L,       periodcentered,        periodcentered ] }; // l L · ·
    key <BKSL>	{ [         asterisk,               mu,           dead_grave,       dead_circumflex ] }; // * µ ` ^

    // Fourth row
    key <LSGT>  { [             less,          greater,                 less,               greater ] }; // < > < >
    key <AB01>  { [                w,                W,        guillemotleft,         guillemotleft ] }; // w W « «
    key <AB02>  { [                x,                X,       guillemotright,        guillemotright ] }; // x X » »
    key <AB04>  { [                v,                V,         nobreakspace,                  less ] }; // v V ⍽ < (espace insécable)
    key <AB05>  { [                b,                B,                minus,           asciicircum ] }; // b B - ^
    key <AB06>  { [                n,                N,              notsign,               greater ] }; // n N ¬ >
    key <AB07>  { [            comma,         question,         questiondown,                period ] }; // , ? ¿ .
    key <AB08>  { [        semicolon,           period,             multiply,        periodcentered ] }; // ; . × ·
    key <AB09>  { [            colon,            slash,             division,                 slash ] }; // : / ÷ /
    key <AB10>  { [           exclam,          section,           exclamdown,                 minus ] }; // ! § ¡ -
};

partial alphanumeric_keys
xkb_symbols "oss_sundeadkeys" {

    // Modifies the basic fr(oss) layout to use the Sun dead keys.

    include "fr(oss)"
    name[Group1]="French (alt., Sun dead keys)";

    key <TLDE>	{ [      twosuperior,    threesuperior,          onesuperior,          dead_cedilla ] }; // ¹ ² ³ ¸
    key <AD11>	{ [  dead_circumflex,   dead_diaeresis,           dead_tilde,        dead_abovering ] }; // ^ ¨ ~ ˚
    key <AC11>	{ [           ugrave,          percent,           dead_acute,                Ugrave ] }; // ù % ' Ù
    key <BKSL>	{ [         asterisk,               mu,           dead_grave,           dead_macron ] }; // * µ ` ¯
};

partial alphanumeric_keys
xkb_symbols "oss_nodeadkeys" {

    // Modifies the basic fr(oss) layout to eliminate all dead keys

    include "fr(oss)"

    name[Group1]="French (alt., no dead keys)";

    key <TLDE>	{ [      twosuperior,    threesuperior,          onesuperior,               cedilla ] }; // ² ³ ¹ ¸
    key <AE01>	{ [        ampersand,                1,                caron,                ogonek ] }; // & 1 ˇ ̨
    key <AE03>	{ [         quotedbl,                3,           numbersign,                 breve ] }; // " 3 # ˘

    key <AD11>	{ [      asciicircum,        diaeresis,           asciitilde,                 Aring ] }; // ^ ̈ ̃ Å
    key <AC11>	{ [           ugrave,          percent,                acute,                Ugrave ] }; // ù % ' Ù
    key <BKSL>	{ [         asterisk,               mu,                grave,                macron ] }; // * µ ` ̄
};


// Historic Linux French keyboard layout (fr-latin9)
// Copyright (c) 199x, 2002 Rene Cougnenc (original work)
//                          Guylhem Aznar <clavier @ externe.net> (maintainer)
//                          Nicolas Mailhot <Nicolas.Mailhot @ laposte.net>
//                              (XFree86 submission)
//
// This layout has long been distributed and refined outside official channels.
// To this day it remains more feature-rich and popular than the 'fr' layout.
//
// This layout is derived from an original version by Guylhem Aznar.
// The original version is always available from:
// http://en.tldp.org/HOWTO/Francophones-HOWTO.html
// and is distributed under a GPL license.
//
// The author has given permission for this derived version to be distributed
// under the standard XFree86 license. He would like all changes to this
// version to be sent to him at <clavier @ externe.net>, so he can sync
// the identically named linux console map (kbd, linux-console) and his
// out-of-tree GPL version.
//
// Now follows the keyboard design description in French.
// (If you can't read it you probably have no business changing this file anyway:)
//
// Les accents circonflexes des principales voyelles sont obtenus avec
// la touche Alt_Gr, les trémas sont obtenus par Alt_Gr + Shift.
//
//  ____                                     _________ _____________ _______
// | S A| S = Shift,  A = AltGr + Shift     | Imprime | Arrêt défil | Pause |
// | s a| s = normal, a = AltGr             |  Exec   |             | Halte |
//  ¯¯¯¯                                     ¯¯¯¯¯¯¯¯¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯¯¯¯¯¯¯
//  ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ _______
// | œ "| 1 ·| 2 É| 3 ,| 4 '| 5 "| 6 || 7 È| 8 ¯| 9 Ç| 0 À| ° ÿ| + °| <--   |
// | Œ "| & '| é ~| " #| ' {| ( [| - || è `| _ \| ç ^| à @| ) ]| = }|       |
//  ========================================================================
// | |<-  | A ä| Z Å| E ¢| R Ç| T Þ| Y Ý| U ü| I ï| O ö| P '| " `| $ ë|   , |
// |  ->| | a â| z å| e €| r ç| t þ| y ý| u û| i î| o ô| p ¶| ^ ~| £ ê| <-' |
//  ===================================================================¬    |
// |       | Q Ä| S Ø| D Ë| F ª| G Æ| H Ð| J Ü| K Ï| L Ö| M º| % Ù| µ ¥|    |
// | MAJ   | q Â| s ø| d Ê| f ±| g æ| h ð| j Û| k Î| l Ô| m ¹| ù ²| * ³|    |
//  ========================================================================
// | ^   | >  | W  | X  | C  | V  | B  | N  | ?  | .  | /  | §  |     ^     |
// | |   | < || w «| x »| c ©| v ®| b ß| n ¬| , ¿| ; ×| : ÷| ! ¡|     |     |
//  ========================================================================
// |      |      |      |                       |       |      |     |      |
// | Ctrl | Super| Alt  | Space    Nobreakspace | AltGr | Super|Menu | Ctrl |
//  ¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯ ¯¯¯¯¯¯
//
//
//		Si les touches mortes fonctionnent, utiliser les accents dits
//		« morts », i.e. fonctionnant comme l'accent circonflexe & le
//		tréma des machines à écrire ; sont disponibles :
//
// (^) : accent circonflexe,
// Shift+(^) : tréma,
// Shift+AltGr+(^) : tilde,
// AltGr+(1) : accent aigu,
// AltGr+(7) : accent grave
//
// Pour s'en servir, procéder comme avec l'accent circonflexe & le tréma
// sur les vielles machines à écrire :
//
// AltGr+(1) puis e : é
// AltGr+(1) puis E : É
//
partial alphanumeric_keys

xkb_symbols "latin9" {

    include "latin"
    include "nbsp(level3)"

    name[Group1]="French (legacy, alt.)";

    key <TLDE>	{ [              oe,              OE, leftdoublequotemark, rightdoublequotemark ] };
    key <AE01>	{ [       ampersand,               1,          dead_acute,       periodcentered ] };
    key <AE02>	{ [          eacute,               2,          asciitilde,               Eacute ] };
    key <AE03>	{ [        quotedbl,               3,          numbersign,              cedilla ] };
    key <AE04>	{ [      apostrophe,               4,           braceleft,                acute ] };
    key <AE05>	{ [       parenleft,               5,         bracketleft,            diaeresis ] };
    key <AE06>	{ [           minus,               6,                 bar,            brokenbar ] };
    key <AE07>	{ [          egrave,               7,          dead_grave,               Egrave ] };
    key <AE08>	{ [      underscore,               8,           backslash,               macron ] };
    key <AE09>	{ [        ccedilla,               9,         asciicircum,             Ccedilla ] };
    key <AE10>	{ [          agrave,               0,                  at,               Agrave ] };
    key <AE11>	{ [      parenright,          degree,        bracketright,           ydiaeresis ] };
    key <AE12>	{ [           equal,            plus,          braceright,       dead_abovering ] };

    key <AD01>	{ [               a,               A,         acircumflex,           adiaeresis ] };
    key <AD02>	{ [               z,               Z,               aring,                Aring ] };
    key <AD03>	{ [               e,               E,            EuroSign,                 cent ] };
    key <AD04>	{ [               r,               R,            ccedilla,             Ccedilla ] };
    key <AD05>	{ [               t,               T,               thorn,                THORN ] };
    key <AD06>	{ [               y,               Y,              yacute,               Yacute ] };
    key <AD07>	{ [               u,               U,         ucircumflex,           udiaeresis ] };
    key <AD08>	{ [               i,               I,         icircumflex,           idiaeresis ] };
    key <AD09>	{ [               o,               O,         ocircumflex,           odiaeresis ] };
    key <AD10>	{ [               p,               P,           paragraph,                grave ] };
    key <AD11>	{ [ dead_circumflex,  dead_diaeresis,          dead_tilde,           apostrophe ] };
    key <AD12>	{ [          dollar,	    sterling,         ecircumflex,           ediaeresis ] };

    key <AC01>	{ [               q,               Q,         Acircumflex,           Adiaeresis ] };
    key <AC02>	{ [               s,               S,              oslash,             Ooblique ] };
    key <AC03>	{ [               d,               D,         Ecircumflex,           Ediaeresis ] };
    key <AC04>	{ [               f,               F,           plusminus,          ordfeminine ] };
    key <AC05>	{ [               g,               G,                  ae,                   AE ] };
    key <AC06>	{ [               h,               H,                 eth,                  ETH ] };
    key <AC07>	{ [               j,               J,         Ucircumflex,           Udiaeresis ] };
    key <AC08>	{ [               k,               K,         Icircumflex,           Idiaeresis ] };
    key <AC09>	{ [               l,               L,         Ocircumflex,           Odiaeresis ] };
    key <AC10>	{ [               m,               M,         onesuperior,            masculine ] };
    key <AC11>	{ [          ugrave,         percent,         twosuperior,               Ugrave ] };
    key <BKSL>  { [        asterisk,              mu,       threesuperior,                  yen ] };

    key <LSGT>	{ [            less,         greater,                 bar                       ] };
    key <AB01>	{ [               w,               W,       guillemotleft	        	] };
    key <AB02>	{ [               x,               X,      guillemotright                       ] };
    key <AB03>	{ [               c,               C,           copyright                       ] };
    key <AB04>	{ [               v,               V,          registered		        ] };
    key <AB05>	{ [               b,               B,              ssharp,                U1E9E ] };
    key <AB06>	{ [               n,               N,             notsign                       ] };
    key <AB07>	{ [           comma,        question,        questiondown                       ] };
    key <AB08>	{ [       semicolon,          period,            multiply		        ] };
    key <AB09>	{ [           colon,           slash,            division                       ] };
    key <AB10>	{ [          exclam,         section,          exclamdown                       ] };

    // French uses a comma as decimal separator, but keyboards are labeled with a period
    // Will take effect when KP_Decimal is mapped to the locale decimal separator
    key <KPDL>  { [       KP_Delete,      KP_Decimal,           KP_Delete,           KP_Decimal ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "latin9_sundeadkeys" {

    // Modifies the basic fr-latin9 layout to use the Sun dead keys

    include "fr(latin9)"
    name[Group1]="French (legacy, alt., Sun dead keys)";

    key <AE01>	{ [       ampersand,               1,         dead_acute,       periodcentered ] };
    key <AE07>	{ [          egrave,               7,         dead_grave,               Egrave ] };
    key <AD11>	{ [ dead_circumflex,  dead_diaeresis,         dead_tilde,           apostrophe ] };
};

partial alphanumeric_keys
xkb_symbols "latin9_nodeadkeys" {

    // Modifies the basic fr-latin9 layout to eliminate all dead keys

    include "fr(latin9)"

    name[Group1]="French (legacy, alt., no dead keys)";

    key <AE01>	{ [       ampersand,               1,          apostrophe,       periodcentered ] };
    key <AE07>	{ [          egrave,               7,               grave,               Egrave ] };
    key <AE12>	{ [           equal,            plus,          braceright         	        ] };
    key <AD11>	{ [	asciicircum,  	   diaeresis,          asciitilde,           apostrophe ] };
};

// Bépo : Improved ergonomic french keymap using Dvorak method.
// Built by community on 'Dvorak Fr / Bépo' :
// see http://www.clavier-dvorak.org/wiki/ to join and help.
// XOrg integration (1.0rc2 version) in 2008
// by Frédéric Boiteux <fboiteux at free dot fr>
//
// Bépo layout (1.0rc2 version) for a pc105 keyboard (french) :
// ┌─────┐
// │ S A │   S = Shift,  A = AltGr + Shift
// │ s a │   s = normal, a = AltGr
// └─────┘
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ # ¶ │ 1 „ │ 2 “ │ 3 ” │ 4 ≤ │ 5 ≥ │ 6   │ 7 ¬ │ 8 ¼ │ 9 ½ │ 0 ¾ │ ° ′ │ ` ″ ┃ ⌫ Retour┃
// │ $ – │ " — │ « < │ » > │ ( [ │ ) ] │ @ ^ │ + ± │ - − │ / ÷ │ * × │ = ≠ │ % ‰ ┃  arrière┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ B ¦ │ É ˝ │ P § │ O Œ │ È ` │ !   │ V   │ D Ð │ L   │ J Ĳ │ Z Ə │ W   ┃Entrée ┃
// ┃Tab ↹  ┃ b | │ é ˊ │ p & │ o œ │ è ` │ ˆ ¡ │ v ˇ │ d ð │ l / │ j ĳ │ z ə │ w ̆  ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ A Æ │ U Ù │ I ˙ │ E ¤ │ ; ̛  │ C ſ │ T Þ │ S ẞ │ R ™ │ N   │ M º │ Ç , ┃      ┃
// ┃Maj ⇬   ┃ a æ │ u ù │ i ̈  │ e € │ , ’ │ c © │ t þ │ s ß │ r ® │ n ˜ │ m ¯ │ ç ¸ ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ Ê   │ À   │ Y ‘ │ X ’ │ : · │ K   │ ? ̉  │ Q ̣  │ G   │ H ‡ │ F ª ┃             ┃
// ┃Shift ⇧┃ ê / │ à \ │ y { │ x } │ . … │ k ~ │ ' ¿ │ q ˚ │ g µ │ h † │ f ˛ ┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ Espace inséc.   Espace inséc. fin ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣ (Espace)      _               ␣ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛
partial alphanumeric_keys
xkb_symbols "bepo" {

    include "level3(ralt_switch)"
    include "keypad(oss)"

    name[Group1]= "French (BEPO)";

    // First row
    key <TLDE> { [          dollar,   numbersign,        endash,       paragraph ] }; // $ # – ¶
    key <AE01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [        quotedbl,            1,         emdash, doublelowquotemark ] }; // " 1 — „
    key <AE02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [   guillemotleft,            2,           less,  leftdoublequotemark ] }; // « 2 < “
    key <AE03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  guillemotright,            3,        greater, rightdoublequotemark ] }; // » 3 > ”
    key <AE04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [       parenleft,            4,    bracketleft,      lessthanequal ] }; // ( 4 [ ≤
    key <AE05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [      parenright,            5,   bracketright,   greaterthanequal ] }; // ) 5 ] ≥
    key <AE06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [              at,            6,    asciicircum                 ] }; // @ 6 ^
    key <AE07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [            plus,            7,      plusminus,        notsign ] }; // + 7 ± ¬
    key <AE08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [           minus,            8,          U2212,     onequarter ] }; // - 8 − ¼
    key <AE09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [           slash,            9,       division,        onehalf ] }; // / 9 ÷ ½
    key <AE10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [        asterisk,            0,       multiply,  threequarters ] }; // * 0 × ¾
    key <AE11> { [           equal,       degree,       notequal,        minutes ] }; // = ° ≠ ′
    key <AE12> { [         percent,        grave,       permille,        seconds ] }; // % ` ‰ ″

    // Second row
    key <AD01> { [               b,            B,            bar,      brokenbar ] }; // b B | ¦
    key <AD02> { [          eacute,       Eacute,     dead_acute, dead_doubleacute ] }; // é É ˊ ˝
    key <AD03> { [               p,            P,      ampersand,        section ] }; // p P & §
    key <AD04> { [               o,            O,             oe,             OE ] }; // o O œ Œ
    key <AD05> { [          egrave,       Egrave,     dead_grave,          grave ] }; // è È ` `
    key <AD06> { [ dead_circumflex,       exclam,     exclamdown                 ] }; // ^ ! ¡
    key <AD07> { [               v,            V,     dead_caron                 ] }; // v V ˇ
    key <AD08> { [               d,            D,            eth,            ETH ] }; // d D ð Ð
    key <AD09> { [               l,            L,    dead_stroke                 ] }; // l L /
    key <AD10> { [               j,            J,          U0133,          U0132 ] }; // j J ĳ Ĳ
    key <AD11> { [               z,            Z,          schwa,          SCHWA ] }; // z Z ə Ə
    key <AD12> { [               w,            W,     dead_breve                 ] }; // w W ̆

    // Third row
    key <AC01> { [               a,            A,             ae,             AE ] }; // a A æ Æ
    key <AC02> { [               u,            U,         ugrave,         Ugrave ] }; // u U ù Ù
    key <AC03> { [               i,            I, dead_diaeresis,  dead_abovedot ] }; // i I ̈ ˙
    key <AC04> { [               e,            E,       EuroSign,  dead_currency ] }; // e E € ¤
    key <AC05> { [           comma,    semicolon, rightsinglequotemark, dead_horn ] }; // , ; ’ ̛
    key <AC06> { [               c,            C,      copyright,          U017F ] }; // c C © ſ
    key <AC07> { [               t,            T,          thorn,          THORN ] }; // t T þ Þ
    key <AC08> { [               s,            S,         ssharp,          U1E9E ] }; // s S ß ẞ
    key <AC09> { [               r,            R,     registered,      trademark ] }; // r R ® ™
    key <AC10> { [               n,            N,     dead_tilde                 ] }; // n N ~
    key <AC11> { [               m,            M,    dead_macron,      masculine ] }; // m M ̄ º
    key <BKSL> { [        ccedilla,     Ccedilla,   dead_cedilla, dead_belowcomma ] }; // ç Ç ¸ ,

    // Fourth row
    key <LSGT> { [     ecircumflex,  Ecircumflex,          slash                 ] }; // ê Ê /
    key <AB01> { [          agrave,       Agrave,      backslash                 ] }; // à À \
    key <AB02> { [               y,            Y,      braceleft, leftsinglequotemark  ] }; // y Y { ‘
    key <AB03> { [               x,            X,     braceright, rightsinglequotemark ] }; // x X } ’
    key <AB04> { [          period,        colon,       ellipsis, periodcentered ] }; // . : … ·
    key <AB05> { [               k,            K,     asciitilde                 ] }; // k K ~
    key <AB06> { [      apostrophe,     question,   questiondown,      dead_hook ] }; // ' ? ¿ ̉
    key <AB07> { [               q,            Q, dead_abovering,  dead_belowdot ] }; // q Q ˚ ̣
    key <AB08> { [               g,            G,     dead_greek                 ] }; // g G µ
    key <AB09> { [               h,            H,         dagger,   doubledagger ] }; // h H † ‡
    key <AB10> { [               f,            F,    dead_ogonek,    ordfeminine ] }; // f F ̨ ª

    key <SPCE> { [           space, nobreakspace,     underscore,          U202F ] }; // ␣ (espace insécable) _ (espace insécable fin)
};

partial alphanumeric_keys
xkb_symbols "bepo_latin9" {

    // Restricts the fr(bepo) layout to latin9 symbols

    include "fr(bepo)"
    include "keypad(oss_latin9)"

    name[Group1]="French (BEPO, Latin-9 only)";

    key <TLDE> { [          dollar,   numbersign,        dollar,       paragraph ] }; // $ # $ ¶

    key <AE01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [        quotedbl,            1                                 ] }; // " 1
    key <AE02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [   guillemotleft,            2,           less                 ] }; // « 2 <
    key <AE03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  guillemotright,            3,        greater                 ] }; // » 3 >
    key <AE04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [       parenleft,            4,    bracketleft                 ] }; // ( 4 [
    key <AE05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [      parenright,            5,   bracketright                 ] }; // ) 5 ]
    key <AE08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [           minus,            8,          minus,     onequarter ] }; // - 8 - ¼
    key <AE11> { [           equal,       degree                                 ] }; // = °
    key <AE12> { [         percent,        grave                                 ] }; // % `

    key <AD01> { [               b,            B,            bar                 ] }; // b B |
    key <AD02> { [          eacute,       Eacute,     dead_acute                 ] }; // é É ˊ
    key <AD10> { [               j,            J                                 ] }; // j J
    key <AD11> { [               z,            Z                                 ] }; // z Z
    key <AD12> { [               w,            W                                 ] }; // w W

    key <AC03> { [               i,            I, dead_diaeresis                 ] }; // i I ̈
    key <AC05> { [           comma,    semicolon,          comma,      dead_horn ] }; // , ; , ̛
    key <AC06> { [               c,            C,      copyright                 ] }; // c C ©
    key <AC08> { [               s,            S,         ssharp,          U1E9E ] }; // s S ß ẞ
    key <AC09> { [               r,            R,     registered                 ] }; // r R ®
    key <AC11> { [               m,            M,         macron,      masculine ] }; // m M ̄ º

    key <AB02> { [               y,            Y,      braceleft                 ] }; // y Y {
    key <AB03> { [               x,            X,     braceright                 ] }; // x X }
    key <AB04> { [          period,        colon                                 ] }; // . :
    key <AB09> { [               h,            H                                 ] }; // h H
    key <AB10> { [               f,            F,              f,    ordfeminine ] }; // f F   ª

    // Note : on a besoin de redéfinir les niveaux 3 et 4,
    // donc nbsp(level2) ne suffit pas !
    key <SPCE> { [           space,  nobreakspace,    underscore,   nobreakspace ] }; // ␣ (espace insécable) _ (espace insécable)
};

// Version 1.1rc2 of the Bépo keyboard layout, 
// normalized by the AFNOR NF Z71‐300 norm.
// 
// Layout: https://bepo.fr/wiki/Version_1.1rc2
// Normalization: https://normalisation.afnor.org/actualites/faq-clavier-francais/
// 
// ┌────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────┬────╔═════════╗
// │ # ¶│ 1 „│ 2 “│ 3 ”│ 4 ⩽│ 5 ⩾║ 6  │ 7 ¬│ 8 ¼│ 9 ½│ 0 ¾│ ° ′│ ` ″║         ║
// │ $ –│ " —│ « <│ » >│ ( [│ ) ]║ @ ^│ + ±│ - −│ / ÷│ * ×│ = ≠│ % ‰║ <--     ║
// ╔════╧══╗─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─┴──┬─╚══╦══════╣
// ║  |<-  ║ B _│ É  │ P §│ O Œ│ È `║ !  │ V  │ D  │ L £│ J  │ Z  │ W  ║   |  ║
// ║  ->|  ║ b |│ é ´│ p &│ o œ│ è `║ ˆ ¡│ v ˇ│ d ∞│ l /│ j  │ z ―│ w  ║ <-'  ║
// ╠═══════╩╗───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───┴┬───╚╗     ║
// ║        ║ A Æ│ U Ù│ I ˙│ E ¤│ ; ,║ C ©│ T ™│ S ſ│ R ®│ N  │ M  │ Ç ©║     ║
// ║  CAPS  ║ a æ│ u ù│ i ¨│ e €│ , '║ c ¸│ t ᵉ│ s ß│ r ˘│ n ~│ m ¯│ ç  ║     ║
// ╠══════╦═╝──┬─┴──┬─┴──┬─┴─══─┴──┬─┴──┬─┴─══─┴──┬─┴──┬─┴──┬─┴──╔═╧════╩═════╣
// ║   ^  ║ Ê ^│ À ‚│ Y ‘│ X ’│ : ·│ K ‑║ ? ̉ │ Q ̛│ G †│ H ‡│ F  ║     ^      ║
// ║   |  ║ ê /│ à \│ y {│ x }│ . …│ k ~║ ’ ¿│ q °│ g µ│ h ̣ │ f ˛║     |      ║
// ╠══════╩╦═══╧══╦═╧═══╦╧════╧════╧════╧════╧════╧═╦══╧══╦═╧════╬═════╦══════╣
// ║       ║      ║     ║ Fine insécable  Insécable ║     ║      ║     ║      ║
// ║ Ctrl  ║ WinG ║ Alt ║ Espace                  _ ║AltGr║ WinD ║WinM ║ Ctrl ║
// ╚═══════╩══════╩═════╩═══════════════════════════╩═════╩══════╩═════╩══════╝
partial alphanumeric_keys
xkb_symbols "bepo_afnor" {

	name[Group1]= "French (BEPO, AFNOR)";

	include "pc(pc105)"

	key <TLDE> { type[group1] = "FOUR_LEVEL", [ dollar, numbersign, endash, paragraph ] }; // $ # – ¶
	key <AE01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ quotedbl, 1, emdash, doublelowquotemark ] }; // " 1 — „
	key <AE02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ guillemotleft, 2, less, leftdoublequotemark ] }; // « 2 < “
	key <AE03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ guillemotright, 3, greater, rightdoublequotemark ] }; // » 3 > ”
	key <AE04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ parenleft, 4, bracketleft, U2A7D ] }; // ( 4 [ ⩽
	key <AE05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ parenright, 5, bracketright, U2A7E ] }; // ) 5 ] ⩾
	key <AE06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ at, 6, asciicircum, U262D ] }; // @ 6 ^ ☭
	key <AE07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ plus, 7, plusminus, notsign ] }; // + 7 ± ¬
	key <AE08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ minus, 8, U2212, onequarter ] }; // - 8 − ¼
	key <AE09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ slash, 9, division, onehalf ] }; // / 9 ÷ ½
	key <AE10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ asterisk, 0, multiply, threequarters ] }; // * 0 × ¾
	key <AE11> { type[group1] = "FOUR_LEVEL", [ equal, degree, notequal, minutes ] }; // = ° ≠ ′
	key <AE12> { type[group1] = "FOUR_LEVEL", [ percent, grave, U2030, seconds ] }; // % ` ‰ ″

	key <AD01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ b, B, bar, underscore ] }; // b B | _
	key <AD02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ eacute, Eacute, dead_acute, heart ] }; // é É ´ ♥
	key <AD03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ p, P, ampersand, section ] }; // p P & §
	key <AD04> { type[group1] = "FOUR_LEVEL_ALPHABETIC", [ o, O, oe, OE ] }; // o O œ Œ
	key <AD05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ egrave, Egrave, dead_grave, grave ] }; // è È ` `
	key <AD06> { type[group1] = "FOUR_LEVEL", [ dead_circumflex, exclam, exclamdown, U2620 ] }; // ^ ! ¡ ☠
	key <AD07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ v, V, dead_caron, U2622 ] }; // v V ˇ ☢
	key <AD08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ d, D, UFDD7, U2623 ] }; // d D ∞ ☣
	key <AD09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ l, L, dead_stroke, sterling ] }; // l L / £
	key <AD10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ j, J, U262E, U262F ] }; // j J ☮ ☯
	key <AD11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ z, Z, UFDD8, U2619 ] }; // z Z ― ☙
	key <AD12> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ w, W, U269C, U267F ] }; // w W ⚜ ♿

	key <AC01> { type[group1] = "FOUR_LEVEL_ALPHABETIC", [ a, A, ae, AE ] }; // a A æ Æ
	key <AC02> { type[group1] = "FOUR_LEVEL_ALPHABETIC", [ u, U, ugrave, Ugrave ] }; // u U ù Ù
	key <AC03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ i, I, dead_diaeresis, dead_abovedot ] }; // i I ¨ ˙
	key <AC04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ e, E, EuroSign, dead_currency ] }; // e E € ¤
	key <AC05> { type[group1] = "FOUR_LEVEL", [ comma, semicolon, apostrophe, dead_belowcomma ] }; // , ; ' ,
	key <AC06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ c, C, dead_cedilla, copyright ] }; // c C ¸ ©
	key <AC07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ t, T, UFDD5, trademark ] }; // t T ᵉ ™
	key <AC08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ s, S, UFDD4, U017F ] }; // s S ß ſ
	key <AC09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ r, R, dead_breve, registered ] }; // r R ˘ ®
	key <AC10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ n, N, dead_tilde, U2693 ] }; // n N ~ ⚓
	key <AC11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ m, M, dead_macron, U26FD ] }; // m M ¯ ⛽
	key <BKSL> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ ccedilla, Ccedilla, U2708, U1F12F ] }; // ç Ç ✈ 🄯

	key <LSGT> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ ecircumflex, Ecircumflex, slash, asciicircum ] }; // ê Ê / ^
	key <AB01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ agrave, Agrave, backslash, singlelowquotemark ] }; // à À \ ‚
	key <AB02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ y, Y, braceleft, leftsinglequotemark ] }; // y Y { ‘
	key <AB03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ x, X, braceright, rightsinglequotemark ] }; // x X } ’
	key <AB04> { type[group1] = "FOUR_LEVEL", [ period, colon, ellipsis, periodcentered ] }; // . : … ·
	key <AB05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ k, K, asciitilde, U2011 ] }; // k K ~ ‑
	key <AB06> { type[group1] = "FOUR_LEVEL", [ rightsinglequotemark, question, questiondown, dead_hook ] }; // ’ ? ¿ ̉
	key <AB07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ q, Q, dead_abovering, dead_horn ] }; // q Q ˚ ̛
	key <AB08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ g, G, dead_greek, dagger ] }; // g G µ †
	key <AB09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ h, H, dead_belowdot, doubledagger ] }; // h H ̣ ‡
	key <AB10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ f, F, dead_ogonek, U26C4 ] }; // f F ˛ ⛄
	key <SPCE> { type[group1] = "FOUR_LEVEL", [ space, U202F, underscore, nobreakspace ] }; //     _  


	include "level3(ralt_switch)"
};

// Author   : Francis Leboutte, http://www.algo.be/ergo/dvorak-fr.html
//            thanks to Fabien Cazenave for his help
// Licence  : X11
// Version  : 0.3

// Base layer + dead AltGr key (`):
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │ *   │ 1   │ 2   │ 3   │ 4   │ 5   │ 6   │ 7   │ 8   │ 9   │ 0   │ +   │ %   ┃          ┃
// │ _   │ =   │ / ± │ - ¼ │ è ½ │ \ ¾ │ ^   │ (   │ ` ` │ )   │ "   │ [   │ ]   ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
// ┃        ┃ ? Æ │ <   │ >   │ G   │ !   │ H   │ V   │ C Ç │ M   │ K   │ Z   │ &   ┃       ┃
// ┃ ↹      ┃ : æ │ ' $ │ é É │ g € │ . ° │ h   │ v   │ c ç │ m µ │ k   │ z   │ ¨   ┃       ┃
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
// ┃         ┃ O Ò │ A À │ U Ù │ E È │ B   │ F   │ S   │ T   │ N   │ D   │ W   │ #   ┃      ┃
// ┃ ⇬       ┃ o ò │ a à │ u ù │ e è │ b   │ f   │ s « │ t   │ n » │ d   │ w   │ ~   ┃      ┃
// ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
// ┃      ┃ ç Ç │ | Œ │ Q   │ @   │ I Ì │ Y   │ X   │ R   │ L   │ P   │ J   ┃               ┃
// ┃ ⇧    ┃ à À │ ; œ │ q { │ , } │ i ì │ y £ │ x   │ r º │ l   │ p § │ j   ┃ ⇧             ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃ ␣                            ⍽ ┃       ┃       ┃       ┃       ┃
// ┃ ctrl  ┃ super ┃ alt   ┃ ␣ Espace    Espace insécable ⍽ ┃ alt   ┃ super ┃ menu  ┃ ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

// Notice the specific Caps_Lock layer:
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │ *   │ 1   │ 2   │ 3   │ 4   │ 5   │ 6   │ 7   │ 8   │ 9   │ 0   │ +   │ %   ┃          ┃
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
// ┃        ┃     │ <   │ >   │     │     │     │     │     │     │     │     │     ┃       ┃
// ┃ ↹      ┃     │     │     │     │     │     │     │     │     │     │     │     ┃       ┃
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
// ┃         ┃     │     │     │     │     │     │     │     │     │     │     │     ┃      ┃
// ┃ ⇬       ┃     │     │     │     │     │     │     │     │     │     │     │     ┃      ┃
// ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
// ┃      ┃ /   │ -   │     │     │     │     │     │     │     │     │     ┃               ┃
// ┃ ⇧    ┃     │     │     │     │     │     │     │     │     │     │     ┃ ⇧             ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃ ␣                            ⍽ ┃       ┃       ┃       ┃       ┃
// ┃ ctrl  ┃ super ┃ alt   ┃ ␣ Espace    Espace insécable ⍽ ┃ alt   ┃ super ┃ menu  ┃ ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys modifier_keys
xkb_symbols "dvorak" {
  name[Group1]="French (Dvorak)";

  // First row
  key <TLDE> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [       underscore,   asterisk                  ] };
  key <AE01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [            equal,          1                  ] };
  key <AE02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [            slash,          2,       plusminus ] };
  key <AE03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [            minus,          3,      onequarter ] };
  key <AE04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [           egrave,          4,         onehalf ] };
  key <AE05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [        backslash,          5,   threequarters ] };
  key <AE06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [  dead_circumflex,          6                  ] };
  key <AE07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [        parenleft,          7                  ] };
  key <AE08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ ISO_Level3_Latch,          8,           grave ] };
  key <AE09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [       parenright,          9                  ] };
  key <AE10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [         quotedbl,          0                  ] };
  key <AE11> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [      bracketleft,       plus                  ] };
  key <AE12> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [     bracketright,    percent                  ] };

  // Second row
  key <AD01> { [            colon,         question,              ae,               AE ] };
  key <AD02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [       apostrophe,       less,          dollar ] };
  key <AD03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [           eacute,    greater,          Eacute ] };
  key <AD04> { [                g,                G,        EuroSign                   ] };
  key <AD05> { [           period,           exclam,          degree                   ] };
  key <AD06> { [                h,                H                                    ] };
  key <AD07> { [                v,                V                                    ] };
  key <AD08> { [                c,                C,        ccedilla,         Ccedilla ] };
  key <AD09> { [                m,                M,              mu                   ] };
  key <AD10> { [                k,                K                                    ] };
  key <AD11> { [                z,                Z                                    ] };
  key <AD12> { [   dead_diaeresis,        ampersand                                    ] };

  // Third row
  key <AC01> { [                o,                O,          ograve,           Ograve ] };
  key <AC02> { [                a,                A,          agrave,           Agrave ] };
  key <AC03> { [                u,                U,          ugrave,           Ugrave ] };
  key <AC04> { [                e,                E,          egrave,           Egrave ] };
  key <AC05> { [                b,                B                                    ] };
  key <AC06> { [                f,                F                                    ] };
  key <AC07> { [                s,                S,   guillemotleft                   ] };
  key <AC08> { [                t,                T                                    ] };
  key <AC09> { [                n,                N,  guillemotright                   ] };
  key <AC10> { [                d,                D                                    ] };
  key <AC11> { [                w,                W                                    ] };
  key <BKSL> { [       asciitilde,       numbersign                                    ] };

  // Fourth row
  key <LSGT> { type[group1] = "FOUR_LEVEL_PLUS_LOCK", [       agrave, ccedilla,  Agrave, Ccedilla,   slash ] };
  key <AB01> { type[group1] = "FOUR_LEVEL_PLUS_LOCK", [    semicolon,      bar,      oe,       OE,   minus ] };
  key <AB02> { [                q,                Q,       braceleft                   ] };
  key <AB03> { [            comma,               at,      braceright                   ] };
  key <AB04> { [                i,                I,          igrave,           Igrave ] };
  key <AB05> { [                y,                Y,        sterling                   ] };
  key <AB06> { [                x,                X                                    ] };
  key <AB07> { [                r,                R,       masculine                   ] };
  key <AB08> { [                l,                L                                    ] };
  key <AB09> { [                p,                P,         section                   ] };
  key <AB10> { [                j,                J                                    ] };

  key <SPCE> { [            space,            space,    nobreakspace,     nobreakspace ] };
};

// C'WHERTY: Breton keyboard. Ar c'hlavier brezhoneg.
// Copyright © 2009 Dominique Pellé <dominique.pelle@gmail.com>
// Version: 0.1
//
// ┌─────┐
// │ S A │   S = Reol = Shift,  A = ArErl + Pennlizherenn = AltGr + Shift
// │ s a │   s = normal,        a = ArErl = AltGr
// └─────┘
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ $ Γ │ 1 Δ │ 2 Θ │ 3 Λ │ 4 Ξ │ 5 Π │ 6 Σ │ 7 Φ │ 8 Ψ │ 9 Ç │ 0 Ω │ ° ß │ + ¬ ┃ ⌫ Souzañ┃
// │ ² ˙ │ & ¯ │ é ´ │ " # │ ' { │ ( [ │ - | │ è ` │ - \ │ ç ± │ à @ │ ) ] │ = } ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃Toalenn┃ C'h │ W ω │ E ε │ R ρ │ T τ │ Y ψ │ U υ │ I ι │ O OE│ P π │ ¨ ¥ │ * £ ┃Enankañ┃
// ┃     ↹ ┃ c'h │ w   │ e € │ r   │ t   │ y   │ u   │ i ı │ o oe│ p   │ ^ « │ / » ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃Prenn   ┃ A Æ │ S σ │ D δ │ F φ │ G γ │ H η │ J ς │ K κ │ L λ │ M μ │ Ù ® │ ! ¡ ┃      ┃
// ┃Pennli ⇬┃ a æ │ s   │ d $ │ f   │ g   │ h   │ j   │ k   │ l   │ m   │ ù ŭ │ ? ¿ ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ Q θ │ Z ζ │ X ξ │ C χ │ V   │ B β │ N ν │ CH  │ Ñ   │ : © │ ;   ┃             ┃
// ┃Shift ⇧┃ q < │ z > │ x   │ c ¢ │ v   │ b   │ n   │ ch  │ ñ   │ .   │ ,   ┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ⍽ Espace insécable              ␣ ┃       ┃       ┃       ┃
// ┃Reol   ┃Meta   ┃Erl    ┃ ␣ Espace                        ␣ ┃ArErl ⇮┃Menu   ┃Reol   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛
partial alphanumeric_keys
xkb_symbols "bre" {

    include "keypad(oss)"

    name[Group1]= "French (Breton)";

    // First row
    key <TLDE> { [     twosuperior,     dead_tilde,   dead_abovedot,    Greek_GAMMA ] };
    key <AE01> { [       ampersand,              1,     dead_macron,    Greek_DELTA ] };
    key <AE02> { [          eacute,              2,      dead_acute,    Greek_THETA ] };
    key <AE03> { [        quotedbl,              3,      numbersign,    Greek_LAMDA ] };
    key <AE04> { [      apostrophe,              4,       braceleft,       Greek_XI ] };
    key <AE05> { [       parenleft,              5,     bracketleft,       Greek_PI ] };
    key <AE06> { [           minus,              6,             bar,    Greek_SIGMA ] };
    key <AE07> { [          egrave,              7,      dead_grave,      Greek_PHI ] };
    key <AE08> { [      underscore,              8,       backslash,      Greek_PSI ] };
    key <AE09> { [        ccedilla,              9,       plusminus,       Ccedilla ] };
    key <AE10> { [          agrave,              0,              at,    Greek_OMEGA ] };
    key <AE11> { [      parenright, dead_abovering,    bracketright,         ssharp ] };
    key <AE12> { [           equal,           plus,      braceright,        notsign ] };

    // Second row
    // Handling the C'H key correctly requires an inputmethod (XIM)
    // See https://bugs.freedesktop.org/show_bug.cgi?id=19506
 // key <AD01> { [    trigraph_c_h,   trigraph_C_h,    trigraph_C_H,    Greek_alpha ] };
    key <AD01> { [           UF8FD,          UF8FE,           UF8FF,    Greek_alpha ] };
    key <AD02> { [               w,              W,     Greek_omega,    Greek_omega ] };
    key <AD03> { [               e,              E,        EuroSign,  Greek_epsilon ] };
    key <AD04> { [               r,              R,       Greek_rho,      Greek_rho ] };
    key <AD05> { [               t,              T,       Greek_tau,      Greek_tau ] };
    key <AD06> { [               y,              Y,       Greek_psi,      Greek_psi ] };
    key <AD07> { [               u,              U,   Greek_upsilon,  Greek_upsilon ] };
    key <AD08> { [               i,              I,        idotless,     Greek_iota ] };
    key <AD09> { [               o,              O,              oe,             OE ] };
    key <AD10> { [               p,              P,        Greek_pi,       Greek_pi ] };
    key <AD11> { [ dead_circumflex, dead_diaeresis,   guillemotleft,            yen ] };
    key <AD12> { [           slash,       asterisk,  guillemotright,       sterling ] };

    // Third row
    key <AC01> { [               a,              A,              ae,             AE ] };
    key <AC02> { [               s,              S,     Greek_sigma,    Greek_sigma ] };
    key <AC03> { [               d,              D,          dollar,    Greek_delta ] };
    key <AC04> { [               f,              F,       Greek_phi,      Greek_phi ] };
    key <AC05> { [               g,              G,     Greek_gamma,    Greek_gamma ] };
    key <AC06> { [               h,              H,       Greek_eta,      Greek_eta ] };
    key <AC07> { [               j,              J, Greek_finalsmallsigma, Greek_finalsmallsigma ] };
    key <AC08> { [               k,              K,       Greek_kappa,  Greek_kappa ] };
    key <AC09> { [               l,              L,       Greek_lamda, Greek_lambda ] };
    key <AC10> { [               m,              M,          Greek_mu,     Greek_mu ] };
    key <AC11> { [          ugrave,         Ugrave,            ubreve,   registered ] };
    key <BKSL> { [        question,         exclam,      questiondown,   exclamdown ] };

    // Fourth row
    key <LSGT> { [               q,              Q,            less,    Greek_theta ] };
    key <AB01> { [               z,              Z,         greater,     Greek_zeta ] };
    key <AB02> { [               x,              X,        Greek_xi,       Greek_xi ] };
    key <AB03> { [               c,              C,            cent,      Greek_chi ] };
    key <AB04> { [               v,              V                                  ] };
    key <AB05> { [               b,              B,      Greek_beta,     Greek_beta ] };
    key <AB06> { [               n,              N,        Greek_nu,       Greek_nu ] };
    // Handling the CH key correctly requires an inputmethod (XIM)
    // See https://bugs.freedesktop.org/show_bug.cgi?id=19506
 // key <AB07> { [      digraph_ch,     digraph_Ch,      digraph_CH,  Greek_omicron ] };
    key <AB07> { [           UF8FA,          UF8FB,           UF8FC,  Greek_omicron ] };
    key <AB08> { [          ntilde,         Ntilde                                  ] };
    key <AB09> { [          period,          colon,         section,      copyright ] };
    key <AB10> { [           comma,      semicolon,         percent                 ] };

    key <SPCE> { [           space,   nobreakspace,           space,   nobreakspace ] };

    include "level3(ralt_switch)"
};

// Occitan layout
// Author : 2009 Thomas Metz <tmetz @ free.fr>
// Derived from the layout defined at http://www.panoccitan.org
// Version: 0.1
// Differences from OSS French keyboard :
// - add á, í, ò, ó et ú, Á, Í, Ò, Ó, Ú, ñ, Ñ
// - change position of æ, ü, î, û, œ, ô, ö, ï, â, ë
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ³ ¸ │ 1 ̨  │ 2 É │ 3 ˘ │ 4 — │ 5 – │ 6 ‑ │ 7 È │ 8 ™ │ 9 Ç │ 0 À │ ° ≠ │ + ± ┃ ⌫ Retour┃
// │ ² ¹ │ & ˇ │ é ~ │ " # │ ' { │ ( [ │ - | │ è ` │ _ \ │ ç ^ │ à @ │ ) ] │ = } ┃  arrière┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ A Á │ Z Æ │ E ¢ │ R Ê │ T Ë │ Y Û │ U Ú │ I Í │ O Ó │ P Ò │ ¨ Œ │ £ Ø ┃Entrée ┃
// ┃Tab ↹  ┃ a á │ z æ │ e € │ r ê │ t ë │ y û │ u ú │ i í │ o ó │ p ò │ ^ œ │ $ ø ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ Q Ä │ S „ │ D Â │ F ‚ │ G ¥ │ H Ü │ J Î │ K Ï │ L Ô │ M Ö │ % Ù │ µ ̄  ┃      ┃
// ┃Maj ⇬   ┃ q ä │ s ß │ d â │ f ‘ │ g ’ │ h ü │ j î │ k ï │ l ô │ m ö │ ù ' │ * ` ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ > ≥ │ W “ │ X ” │ C ® │ V ← │ B ↑ │ N Ñ │ ? … │ . . │ / ∕ │ § − ┃             ┃
// ┃Shift ⇧┃ < ≤ │ w « │ x » │ c © │ v → │ b ↓ │ n ñ │ , ¿ │ ; × │ : ÷ │ ! ¡ ┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣         Espace fine insécable ⍽ ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣ Espace       Espace insécable ⍽ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛
partial alphanumeric_keys
xkb_symbols "oci" {

    include "fr(oss)"

    name[Group1]= "Occitan";

    key <AD01>	{ [                a,                A,               aacute,                Aacute ] }; // a A á Á
    key <AD02>	{ [                z,                Z,                   ae,                    AE ] }; // z Z æ Æ
    key <AD05>	{ [                t,                T,           ediaeresis,            Ediaeresis ] }; // t T ë Ë
    key <AD06>	{ [                y,                Y,          ucircumflex,           Ucircumflex ] }; // y Y û Û
    key <AD07>	{ [                u,                U,               uacute,                Uacute ] }; // u U ú Ú
    key <AD08>	{ [                i,                I,               iacute,                Iacute ] }; // i I í Í
    key <AD09>	{ [                o,                O,               oacute,                Oacute ] }; // o O ó Ó
    key <AD10>	{ [                p,                P,               ograve,                Ograve ] }; // p P ò Ò
    key <AD11>	{ [  dead_circumflex,   dead_diaeresis,                   oe,                    OE ] }; // ^ ̈ ̃ œ Œ

    key <AC03>	{ [                d,                D,          acircumflex,           Acircumflex ] }; // d D â Â
    key <AC06>	{ [                h,                H,           udiaeresis,            Udiaeresis ] }; // h H ü Ü
    key <AC07>	{ [                j,                J,          icircumflex,           Icircumflex ] }; // j J î Î
    key <AC08>	{ [                k,                K,           idiaeresis,            Idiaeresis ] }; // k K ï Ï
    key <AC09>	{ [                l,                L,          ocircumflex,           Ocircumflex ] }; // l L ô Ô

    key <AB04>  { [                v,                V,           rightarrow,             leftarrow ] }; // v V → ←
    key <AB06>  { [                n,                N,               ntilde,                Ntilde ] }; // n N ñ Ñ
};

// Marc.Shapiro@inria.fr 19-sep-1998
// modifications : Etienne Herlent <eherlent@linux-france.org> june 2000
// adapted to the new input layer :
//        Martin Costabel <costabel@wanadoo.fr> 3-jan-2001
// adapted for Latin9 alphabet (ISO-8859-15):
//        Etienne Herlent <eherlent@linux-france.org> march 2005

// This map is an almost-complete mapping of the standard French
// MacIntosh keyboard under Xwindows.  I tried to remain as faithful
// as possible to the Mac meaning of each key.	I did this entirely by
// hand and by intuition, relying on the Clavier (Keyboard?) Desktop
// Accessory for the Mac meaning of keys, and on reading keysymdef.h
// to intuit the corresponding X names.	 Lacking proper documentation,
// I may have made some mistakes.

// Entries marked CHECK are particularly uncertain

// Entries marked MISSING mark Mac characters for which I was unable
// to find a corresponding keysym.  (Some for sure don't: e.g. the
// Apple mark and the oe/OE character; others I may have simply not
// found.)

// Copied from macintosh_vndr/fr
partial alphanumeric_keys
xkb_symbols "mac" {

    name[Group1]= "French (Macintosh)";

    key <TLDE> {	[          at, numbersign, periodcentered,  Ydiaeresis	]	}; // MISSING: Ydiaeresis; eherlent : ok in Latin9
    key <AE01> {	[   ampersand,    1,   VoidSymbol,    dead_acute	]	}; // MISSING: Apple
    key <AE02> {	[      eacute,    2,   ediaeresis,        Eacute	]	};
    key <AE03> {	[    quotedbl,    3,   VoidSymbol,    VoidSymbol	] 	}; // CHECK all quotemarks
    key <AE04> {	[  apostrophe,    4,   VoidSymbol,    VoidSymbol	] 	};
    key <AE05> {	[   parenleft,    5,    braceleft,   bracketleft	]	};
 // CHECK section
    key <AE06> {	[     section,    6,    paragraph,         aring	]	};
    key <AE07> {	[      egrave,    7, guillemotleft, guillemotright	]	};
    key <AE08> {	[      exclam,    8,   exclamdown,   Ucircumflex	]	};
    key <AE09> {	[    ccedilla,    9,     Ccedilla,        Aacute	]	};
    key <AE10> {	[      agrave,    0,       oslash,    VoidSymbol	]	}; // MISSING: Oslash
    key <AE11> {	[  parenright, degree, braceright,  bracketright	]	};
    key <AE12> {	[       minus, underscore, emdash,        endash	]	}; // CHECK dashes

    key <AD01> {	[           a,  A,           ae,          AE	]	};
    key <AD02> {	[           z,  Z,  Acircumflex,       Aring	]	};
    key <AD03> {	[           e,  E,  ecircumflex, Ecircumflex	]	};
    key <AD04> {	[           r,  R,   registered,    currency	]	};
    key <AD05> {	[           t,  T,   VoidSymbol,  VoidSymbol	]	};
    key <AD06> {	[           y,  Y,       Uacute,  Ydiaeresis	]	}; // MISSING: Ydiaeresis; eherlent : ok in Latin9
    key <AD07> {	[           u,  U,   VoidSymbol, ordfeminine	]	}; // MISSING: ordmasculine?
    key <AD08> {	[           i,  I,  icircumflex,  idiaeresis	]	};
    key <AD09> {	[           o,  O,           oe,          OE	]	}; // MISSING: oe, OE lacking in Latin1; eherlent ok in Latin9
    key <AD10> {	[           p,  P,   VoidSymbol,  VoidSymbol	]	};
    key <AD11> {	[dead_circumflex,dead_diaeresis, ocircumflex, Ocircumflex	]	};
    key <AD12> {	[      dollar, asterisk,   EuroSign, yen	]	}; // eherlent : EuroSign in Latin9

    key <AC01> {	[         q, Q, acircumflex,         Agrave	]	};
    key <AC02> {	[         s, S,      Ograve,     VoidSymbol	]	};
    key <AC03> {	[         d, D,  VoidSymbol,     VoidSymbol	]	};
    key <AC04> {	[         f, F,  VoidSymbol, periodcentered	]	}; // MISSING: oblong script f??
    key <AC05> {	[         g, G,  VoidSymbol,     VoidSymbol	]	}; // MISSING: kerned fi, fl
    key <AC06> {	[         h, H,      Igrave,    Icircumflex	]	};
    key <AC07> {	[         j, J,  Idiaeresis,         Iacute	]	};
    key <AC08> {	[         k, K,      Egrave,     Ediaeresis	]	};
    key <AC09> {	[         l, L,     notsign,            bar	]	};
    key <AC10> {	[         m, M,          mu,         Oacute	]	};
    key <AC11> {	[    ugrave,percent, Ugrave,    ucircumflex	]	}; // MISSING: per-mille
    key <BKSL> {	[ dead_grave, sterling,  at,     numbersign	]	};

    key <LSGT> {	[      less, greater, VoidSymbol, VoidSymbol	]	};
    key <AB01> {	[         w, W, VoidSymbol,   VoidSymbol	]	}; // MISSING: half-guillemot (single angle bracket)
    key <AB02> {	[         x, X, VoidSymbol,   VoidSymbol	]	}; // CHECK similarequal; MISSING: extra-slanted slash
    key <AB03> {	[         c, C,  copyright,         cent	]	};
    key <AB04> {	[         v, V,    diamond,  leftradical	]	}; // CHECK diamond, leftradical
    key <AB05> {	[         b, B,     ssharp,        U1E9E	]	}; // CHECK: Greek_beta or ssharp?; MISSING: oblong script s
    key <AB06> {	[         n, N,  dead_tilde,  asciitilde	]	};
    key <AB07> {	[     comma,  question, VoidSymbol,  questiondown	]	};
    key <AB08> {	[ semicolon,  period, VoidSymbol,  periodcentered	]	};
    key <AB09> {	[     colon,  slash,   division,        backslash	]	};
    key <AB10> {	[     equal,   plus, VoidSymbol,        plusminus	]	};

    key <SPCE> {	[     space,  space, nobreakspace,   nobreakspace	]	};

    key <KPDL> {	[  comma,KP_Decimal	]	};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "geo" {
    include "ge(basic)"

    name[Group1]= "Georgian (France, AZERTY Tskapo)";

    key <TLDE> { [ exclam, noSymbol ] };
    key <AE01> { [ 0x0100201e, 1 ] };
    key <AE02> { [ 0x01002116, 2 ] };
    key <AE03> { [ percent, 3    ] };
    key <AE04> { [ parenleft, 4  ] };
    key <AE05> { [ colon, 5      ] };
    key <AE06> { [ semicolon, 6  ] };
    key <AE07> { [ question, 7   ] };
    key <AE08> { [ 0x01002116, 8 ] };
    key <AE09> { [ degree, 9     ] };
    key <AE10> { [ parenright, 0 ] };
    key <AE11> { [ minus, underscore, 0x01002014 ] };
    key <AE12> { [ less, greater ] };

    key <AD01> { [ Georgian_an,    0x010010fa     ] };
    key <AD02> { [ Georgian_zen,   Z              ] };
    key <AD03> { [ Georgian_en,    E, Georgian_he ] };
    key <AD04> { [ Georgian_rae,   0x010000ae     ] };
    key <AD05> { [ Georgian_tar,   T              ] };
    key <AD06> { [ Georgian_qar,   0x010010f8     ] };
    key <AD07> { [ Georgian_un,    U              ] };
    key <AD08> { [ Georgian_in,    Georgian_hie   ] };
    key <AD09> { [ Georgian_on,    O              ] };
    key <AD10> { [ Georgian_par,   P              ] };
    key <AD11> { [ Georgian_tan,   T              ] };
    key <AD12> { [ Georgian_jil,   Z              ] };

    key <AC01> { [ Georgian_khar,  Q              ] };
    key <AC02> { [ Georgian_san,   S              ] };
    key <AC03> { [ Georgian_don,   D              ] };
    key <AC04> { [ Georgian_phar,  Georgian_fi    ] };
    key <AC05> { [ Georgian_gan,   0x010010f9     ] };
    key <AC06> { [ Georgian_hae,   Georgian_hoe   ] };
    key <AC07> { [ Georgian_jhan,  0x010010f7     ] };
    key <AC08> { [ Georgian_kan,   K              ] };
    key <AC09> { [ Georgian_las,   L              ] };
    key <AC10> { [ Georgian_man,   M              ] };
    key <AC11> { [ Georgian_zhar,  J              ] };
    key <BKSL> { [ Georgian_chin,  0x010000a9     ] };

    key <LSGT> { [ guillemotleft,  guillemotright ] };
    key <AB01> { [ Georgian_cil,   W              ] };
    key <AB02> { [ Georgian_xan,   Georgian_har   ] };
    key <AB03> { [ Georgian_can,   0x010000a9     ] };
    key <AB04> { [ Georgian_vin,   Georgian_we    ] };
    key <AB05> { [ Georgian_ban,   B              ] };
    key <AB06> { [ Georgian_nar,   0x010010fc     ] };
    key <AB07> { [ comma,          0x01002014     ] };
    key <AB08> { [ Georgian_shin,  S              ] };
    key <AB09> { [ Georgian_ghan,  noSymbol       ] };
    key <AB10> { [ Georgian_char,  noSymbol       ] };
};

// US keyboard made French
//
// Copyright (C) 2018, Florent Gallaire <f@gallai.re>
partial alphanumeric_keys
xkb_symbols "us" {

    include "us(euro)"
    name[Group1]= "French (US)";


    key <TLDE> { [     grave, asciitilde,    dead_grave                   ] };
    key <AE06> { [         6,asciicircum,dead_circumflex                  ] };

    key <AB01> { [	   z,          Z,   acircumflex,      Acircumflex ] }; // â Â
    key <AB03> { [	   c,          C,      ccedilla,         Ccedilla ] }; // ç Ç

    key <AC01> { [	   a,          A,        agrave,           Agrave ] }; // à À
    key <AC02> { [	   s,          S,            ae,               AE ] }; // æ Æ
    key <AC03> { [	   d,          D,   ecircumflex,      Ecircumflex ] }; // ê Ê
    key <AC04> { [	   f,          F,    ediaeresis,       Ediaeresis ] }; // ë Ë
    key <AC06> { [	   h,          H,    udiaeresis,       Udiaeresis ] }; // ü Ü
    key <AC07> { [	   j,          J,   ucircumflex,      Ucircumflex ] }; // û Û
    key <AC08> { [	   k,          K,   icircumflex,      Icircumflex ] }; // î Î
    key <AC11> { [apostrophe,   quotedbl,dead_diaeresis                   ] };

    key <AD03> { [	   e,          E,        eacute,           Eacute ] }; // é É
    key <AD04> { [	   r,          R,        egrave,           Egrave ] }; // è È
    key <AD06> { [	   y,          Y,    ydiaeresis,       Ydiaeresis ] }; // ÿ Ÿ
    key <AD07> { [	   u,          U,        ugrave,           Ugrave ] }; // ù Ù
    key <AD08> { [	   i,          I,    idiaeresis,       Idiaeresis ] }; // ï Ï
    key <AD09> { [	   o,          O,   ocircumflex,      Ocircumflex ] }; // ô Ô
    key <AD10> { [	   p,          P,            oe,               OE ] }; // œ Œ
    key <AD11> { [ bracketleft,  braceleft,  guillemotleft,  leftdoublequotemark ] }; // « “
    key <AD12> { [bracketright, braceright, guillemotright, rightdoublequotemark ] }; // » ”

    key <AE04> { [        4,     dollar,      EuroSign,         currency ] }; // € ¤
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/fr(sun_type6)"
};


partial alphanumeric_keys
xkb_symbols "azerty" {
    name[Group1]="French (AZERTY)";

    include "level3(ralt_switch)"

// French AZERTY-Keyboard layout
// Author : 2015, Mats Blakstad <mats @ globalbility.org>
// Based on the layout at https://en.wikipedia.org/wiki/File:KB_France.svg

// LAYOUT OVERVIEW                              
//  ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ ____ _______
// |    | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  | 0  | °  | +  | <--   |
// | ²  | &  | é ~| " #| ' {| ( [| - || è `| _ \| ç ^| à @| ) ]| = }|       |
//  ========================================================================
// | |<-  | A  | Z  | E  | R  | T  | Y  | U  | I  | O  | P  | ¨  | $  |   , |
// |  ->| | a  | z  | e €| r  | t  | y  | u  | i  | o  | p  | ^  | £ ¤| <-' |
//  ===================================================================¬    |
// |       | Q  | S  | D  | F  | G  | H  | J  | K  | L  | M  | %  | µ  |    |
// | MAJ   | q  | s  | d  | f  | g  | h  | j  | k  | l  | m  | ù  | *  |    |
//  ========================================================================
// | ^   | >  | W  | X  | C  | V  | B  | N  | ?  | .  | /  | §  |     ^     |
// | |   | <  | w  | x  | c  | v  | b  | n  | ,  | ;  | :  | !  |     |     |
//  ========================================================================
// |      |      |      |                       |       |      |     |      |
// | Ctrl | Super| Alt  | Space    Nobreakspace | AltGr | Super|Menu | Ctrl |
//  ¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯ ¯¯¯¯¯¯¯ ¯¯¯¯¯¯ ¯¯¯¯¯ ¯¯¯¯¯¯

    // First row
    key <TLDE>	{ [	twosuperior 						] };
    key <AE01>	{ [	ampersand,	1 					] };
    key <AE02> { [	eacute,		2,		asciitilde	 	] };
    key <AE03>	{ [	quotedbl,	3,		numbersign		] };
    key <AE04>	{ [	apostrophe,	4,		braceleft		] };
    key <AE05>	{ [	parenleft,	5,		bracketleft		] };
    key <AE06>	{ [	minus,		6,		bar			] };
    key <AE07>	{ [	egrave,		7,		grave			] };
    key <AE08>	{ [	underscore, 	8,		backslash		] };
    key <AE09>	{ [	ccedilla, 	9,		asciicircum		] };
    key <AE10>	{ [	agrave,		0,		at			] };
    key <AE11>	{ [	parenright,	degree,		bracketright		] };
    key <AE12>	{ [	equal,		plus,		braceright		] };

    // Second row
    key <AD01>	{ [	a,		A					] };
    key <AD02>	{ [	z,		Z				 	] };
    key <AD03>	{ [	e,		E,		EuroSign		] };	
    key <AD04>	{ [	r,		R				 	] };
    key <AD05>	{ [	t,		T					] };
    key <AD06>	{ [	y,		Y					] };	
    key <AD07>	{ [	u,		U					] };	
    key <AD08>	{ [	i,		I					] };	
    key <AD09>	{ [	o,		O					] };	
    key <AD10>	{ [	p,		P					] };
    key <AD11>	{ [	dead_circumflex,dead_diaeresis				] };
    key <AD12>	{ [	dollar,		sterling,	currency		] };	

    // Third row
    key <AC01>	{ [	q,		Q					] };
    key <AC02>	{ [	s,		S				 	] };
    key <AC03>	{ [	d,		D					] };	
    key <AC04>	{ [	f,		F					] };
    key <AC05>	{ [	g,		G					] };	
    key <AC06>	{ [	h,		H				 	] };
    key <AC07>	{ [	j,		J					] };
    key <AC08>	{ [	k,		K					] };
    key <AC09>	{ [	l,		L					] };
    key <AC10>	{ [	m,		M					] };	
    key <AC11>	{ [	ugrave,		percent					] };
    key <BKSL>  { [	asterisk,	mu					] };

    // Fourth row
    key <LSGT>	{ [	less,		greater					] };
    key <AB01>	{ [	w,		W					] };
    key <AB02>	{ [	x,		X					] };
    key <AB03>	{ [	c,		C					] };
    key <AB04>	{ [	v,		V					] };	
    key <AB05>  { [	b,		B				 	] };
    key <AB06>	{ [	n,		N				 	] };
    key <AB07>	{ [	comma,		question				] };
    key <AB08>	{ [ 	semicolon,	period					] };
    key <AB09>	{ [ 	colon,		slash					] };
    key <AB10>	{ [	exclam,		section					] };
};

// US keyboard made French (with dead keys, alternative)
//
// Copyright (C) 2018, Florent Gallaire <f@gallai.re>

partial alphanumeric_keys
xkb_symbols "us-alt" {

    include "us(euro)"
    name[Group1]= "French (US with dead keys, alt.)";

    key <AB03> { [         c,          C,      ccedilla,         Ccedilla ] }; // ç Ç

    key <AC01> { [         a,          A,            ae,               AE ] }; // æ Æ
    key <AC11> { [dead_diaeresis, quotedbl,  apostrophe ] };

    key <AD03> { [         e,          E,        eacute,           Eacute ] }; // é É
    key <AD09> { [         o,          O,            oe,               OE ] }; // œ Œ
    key <AD11> { [ bracketleft,  braceleft,  guillemotleft,  leftdoublequotemark ] }; // « “
    key <AD12> { [bracketright, braceright, guillemotright, rightdoublequotemark ] }; // » ”

    key <TLDE> { [dead_grave, asciitilde,         grave ] };
    key <AE06> { [dead_circumflex, asciicircum,       6 ] };
    key <AE04> { [         4,     dollar,      EuroSign,         currency ] }; // € ¤
};

// For physically modified US keyboard (Q <-> A, W <-> Z and ; <-> M)
//
// Copyright (C) 2018, Florent Gallaire <f@gallai.re>

partial alphanumeric_keys
xkb_symbols "us-azerty" {

    include "us"
    name[Group1]= "French (US, AZERTY)";

    key <AB01> { [         w,          W, guillemotleft, leftdoublequotemark ] }; // « “
    key <AB02> { [         x,          X,guillemotright,rightdoublequotemark ] }; // » ”
    key <AB07> { [ semicolon,      colon                                  ] };

    key <AC01> { [         q,          Q                                  ] };
    key <AC10> { [         m,          M                                  ] };
    key <AC11> { [apostrophe,   quotedbl,        ugrave,           Ugrave ] }; // ù Ù

    key <AD01> { [         a,          A,            ae,               AE ] }; // æ Æ
    key <AD02> { [         z,          Z                                  ] };
    key <AD09> { [         o,          O,            oe,               OE ] }; // œ Œ
    key <AD11> { [bracketleft, braceleft,dead_circumflex,  dead_diaeresis ] };

    key <TLDE> { [     grave, asciitilde,    dead_grave                   ] };
    key <AE02> { [         2,         at,        eacute,           Eacute ] }; // é É
    key <AE04> { [         4,     dollar,      currency                   ] }; // ¤
    key <AE06> { [         6,asciicircum,dead_circumflex                  ] };
    key <AE07> { [         7,  ampersand,        egrave,           Egrave ] }; // è È
    key <AE09> { [         9,  parenleft,      ccedilla,         Ccedilla ] }; // ç Ç
    key <AE10> { [         0, parenright,        agrave,           Agrave ] }; // à À

    include "eurosign(e)"
    include "level3(ralt_switch)"
};

// Unicode French standardized new azerty
// Defined by the French national organization for standardization (AFNOR) in norm NF Z71-300 (http://norme-azerty.fr/)
//
// Credits
//   © 2019 Cimbali <me @ cimba.li>
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ # ̑  │ 1 À │ 2 É │ 3 È │ 4 Ê │ 5 ̋  │ 6 ̏  │ 7   │ 8 — │ 9 ‹ │ 0 › │ "   │ ¨   ┃ ⌫ Retour┃
// │ @ ̆̆̆  ̆│ à § │ é  ́ │ è  ̀ │ ê & │ ( [ │ ) ] │ ‘ ̄̄  │ ’ _ │ « “ │ » ” │ ' ° │ ̂  ̌̌̌  ┃  arrière┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ A Æ │ Z   │ E   │ R   │ T ™ │ Y   │ U Ù │ I  ̣ │ O Œ │ P ‰ │ – ‑ │ ± ‡ ┃Entrée ┃
// ┃Tab ↹  ┃ a æ │ z £ │ e € │ r ® │ t { │ y } │ u ù │ i ̇  │ o œ │ p % │ - − │ + † ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ Q   │ S ẞ │ D   │ F   │ G   │ H ̱  │ J", │ K   │ L   │ M   │ \ √ │ ½ ¼ ┃      ┃
// ┃Maj ⇬   ┃ q θ │ s ß │ d $ │ f ¤ │ g µ │ h   │ j   │ k ̷  │ l | │ m ∞ │ / ÷ │ * × ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ > ≥ │ W “ │ X ” │ C ® │ V ← │ B ↑ │ N → │ ? … │ . . │ / ∕ │ § − ┃             ┃
// ┃Shift ⇧┃ < ≤ │ w « │ x » │ c © │ v ⍽ │ b ↓ │ n ¬ │ , ¿ │ ; × │ : ÷ │ ! ¡ ┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣         Espace fine insécable ⍽ ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣ Espace       Espace insécable ⍽ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛
partial alphanumeric_keys
xkb_symbols "afnor" {

    include "latin"
    include "level3(ralt_switch)"
    include "nbsp(level3n)"
    include "keypad(oss)"

    name[Group1]="French (AZERTY, AFNOR)";

     // First row
     key <TLDE> { [                  at,      numbersign,               dead_breve,   dead_invertedbreve ] }; // @ # ̑  ̆̆̆  //
     key <AE01> { [              agrave,               1,                  section,               Agrave ] }; // à 1 § À
     key <AE02> { [              eacute,               2,               dead_acute,               Eacute ] }; // é 2  ́ É
     key <AE03> { [              egrave,               3,               dead_grave,               Egrave ] }; // è 3  ̀ È
     key <AE04> { [         ecircumflex,               4,                ampersand,          Ecircumflex ] }; // ê 4 & Ê
     key <AE05> { [           parenleft,               5,              bracketleft,     dead_doubleacute ] }; // ( 5 [
     key <AE06> { [          parenright,               6,             bracketright,     dead_doublegrave ] }; // ) 6 ]
     key <AE07> { [ leftsinglequotemark,               7,              dead_macron,           VoidSymbol ] }; // ‘ 7
     key <AE08> { [rightsinglequotemark,               8,               underscore,               emdash ] }; // ’ 8 _ —
     key <AE09> { [       guillemotleft,               9,      leftdoublequotemark,           VoidSymbol ] }; // « 9 “ ‹
     key <AE10> { [      guillemotright,               0,     rightdoublequotemark,           VoidSymbol ] }; // » 0 ” ›
     key <AE11> { [          apostrophe,        quotedbl,                   degree,       dead_abovering ] }; // ' " °
     key <AE12> { [     dead_circumflex,  dead_diaeresis,               dead_caron,           VoidSymbol ] }; // ̂  ¨ ̌̌̌    //

     // Second  ow
     key <AD01> { [                   a,               A,                       ae,                   AE ] }; // a A æ Æ
     key <AD02> { [                   z,               Z,                 sterling,           VoidSymbol ] }; // z Z £
     key <AD03> { [                   e,               E,                 EuroSign,           VoidSymbol ] }; // e E €
     key <AD04> { [                   r,               R,               registered,           VoidSymbol ] }; // r R ®
     key <AD05> { [                   t,               T,                braceleft,            trademark ] }; // t T { ™
     key <AD06> { [                   y,               Y,               braceright,           VoidSymbol ] }; // y Y }
     key <AD07> { [                   u,               U,                   ugrave,               Ugrave ] }; // u U ù Ù
     key <AD08> { [                   i,               I,            dead_abovedot,        dead_belowdot ] }; // i I ̇   ̣ //
     key <AD09> { [                   o,               O,                       oe,                   OE ] }; // o O œ Œ
     key <AD10> { [                   p,               P,                  percent,             permille ] }; // p P % ‰
     key <AD11> { [               minus,          endash,                0x1002212,            0x1002011 ] }; // - – − ‑ // signe moins (minus sign), trait d'union insécable (non-breaking hyphen)
     key <AD12> { [                plus,       plusminus,                   dagger,         doubledagger ] }; // + ± † ‡

     // Third r w
     key <AC01> { [                   q,               Q,              Greek_theta,           VoidSymbol ] }; // q Q θ
     key <AC02> { [                   s,               S,                   ssharp,            0x1001E9E ] }; // s S ß ẞ // lettre majuscule latine S dur (latin capital letter sharp s)
     key <AC03> { [                   d,               D,                   dollar,           VoidSymbol ] }; // d D $
     key <AC04> { [                   f,               F,            dead_currency,           VoidSymbol ] }; // f F ¤
     key <AC05> { [                   g,               G,               dead_greek,           VoidSymbol ] }; // g G µ
     key <AC06> { [                   h,               H,               VoidSymbol,     dead_belowmacron ] }; // h H   ̱  // Missing dead key for other european keys (ªəƏþÞıİºſðÐƞȠĳĲ)
     key <AC07> { [                   j,               J,               VoidSymbol,           VoidSymbol ] }; // j J
     key <AC08> { [                   k,               K,  dead_longsolidusoverlay,           VoidSymbol ] }; // k K ̷    //
     key <AC09> { [                   l,               L,                      bar,           VoidSymbol ] }; // l L |
     key <AC10> { [                   m,               M,                 infinity,           VoidSymbol ] }; // m M ∞
     key <AC11> { [               slash,       backslash,                 division,              radical ] }; // / \ ÷ √
     key <BKSL> { [            asterisk,         onehalf,                 multiply,           onequarter ] }; // * ½ × ¼

     // Fourth row
     key <LSGT> { [                less,         greater,            lessthanequal,    greaterthanequal ] }; // < > ≤ ≥
     key <AB01> { [                   w,               W,                      ezh,                 EZH ] }; // w W ʒ Ʒ
     key <AB02> { [                   x,               X,                copyright,          VoidSymbol ] }; // x X ©
     key <AB03> { [                   c,               C,                 ccedilla,            Ccedilla ] }; // c C ç Ç
     key <AB04> { [                   v,               V,             dead_cedilla,         dead_ogonek ] }; // v V ̧  ̨  //
     key <AB05> { [                   b,               B,              dead_stroke,          VoidSymbol ] }; // b B ̵    //
     key <AB06> { [                   n,               N,               dead_tilde,          VoidSymbol ] }; // n N ~
     key <AB07> { [              period,        question,             questiondown,          VoidSymbol ] }; // . ? ¿
     key <AB08> { [               comma,          exclam,               exclamdown,     dead_belowcomma ] }; // , ! ¡ ̦  //
     key <AB09> { [               colon,        ellipsis,           periodcentered,          VoidSymbol ] }; // : … ·
     key <AB10> { [           semicolon,           equal,             similarequal,            notequal ] }; // ; = ≃ ≠
};
default partial alphanumeric_keys modifier_keys
xkb_symbols "basic" {
    name[Group1]= "Empty";
};
//
// Complete set of Romanian keyboards as described in the new Romanian standard
// SR 13392:2004 adopted in December 2004 by ASRO, "Asociatia de Standardizare 
// din Romania".
// 
// The default mapping is the Programmers layout (also known as RO_US) because
// of the lack of Romanian hardware keyboards. The primary standard layout is
// implemented as the "std" variant.
//
// Diacritics with cedillas, as in ISO-8859-2, are no longer supported. This
// error has been corrected in ISO-889-16 through using commabelow accents.
// Pre-Vista MS compatible layout ("winkeys" variant) generates commabelow
// accents too now.
// 
// Created by Cristian Gafton, <gafton@redhat.com> (C) 2000
// Modified by Marius Andreiana, <mandreiana@yahoo.com> (C) 2001
// Completed by Dumitru Moldovan, <dumol@gnome.org> (C) 2001, 2004-2008, 2020


default partial alphanumeric_keys
xkb_symbols "basic" {
// This RO_US/Programmers layout, although the secondary layout in the 
// Romanian standard, has always been the "de facto" standard in the 
// Linux/Unix world. It is implemented here as the default layout and it's
// fully compatible with an US keyboard (Euro on AltGr+5 does not count).

    include "us"

    name[Group1]="Romanian";

    key <AE01> { [            1,      exclam,       dead_tilde              ] };
    key <AE02> { [            2,          at,       dead_caron              ] };
    key <AE03> { [            3,  numbersign,  dead_circumflex              ] };
    key <AE04> { [            4,      dollar,       dead_breve              ] };
    key <AE05> { [            5,     percent,   dead_abovering              ] };
    key <AE06> { [            6, asciicircum,      dead_ogonek              ] };
    key <AE07> { [            7,   ampersand,       dead_grave              ] };
    key <AE08> { [            8,    asterisk,    dead_abovedot              ] };
    key <AE09> { [            9,   parenleft,       dead_acute              ] };
    key <AE10> { [            0,  parenright, dead_doubleacute              ] };
    key <AE11> { [        minus,  underscore,   dead_diaeresis,      endash ] };
    key <AE12> { [        equal,        plus,     dead_cedilla,   plusminus ] };
    key <AD01> { [            q,           Q,      acircumflex, Acircumflex ] };
    key <AD02> { [            w,           W,           ssharp,       U1e9e ] };
    key <AD03> { [            e,           E,         EuroSign              ] };
    key <AD05> { [            t,           T,            U021b,       U021a ] };
    key <AD08> { [            i,           I,      icircumflex, Icircumflex ] };
    key <AD10> { [            p,           P,          section              ] };
    key <AD11> { [  bracketleft,   braceleft, doublelowquotemark            ] };
    key <AD12> { [ bracketright,  braceright, rightdoublequotemark          ] };
    key <AC01> { [            a,           A,           abreve,      Abreve ] };
    key <AC02> { [            s,           S,            U0219,       U0218 ] };
    key <AC03> { [            d,           D,          dstroke,     Dstroke ] };
    key <AC09> { [            l,           L,          lstroke,     Lstroke ] };
    key <LSGT> { [    backslash,         bar                                ] };
    key <AB03> { [            c,           C,        copyright              ] };
    key <AB08> { [        comma,        less,    guillemotleft              ] };
    key <AB09> { [       period,     greater,   guillemotright              ] };

    key <KPDL> { [    KP_Delete,  KP_Decimal,    KP_Separator, KP_Separator ] };

    include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "std" {
    // Primary layout in the new Romanian standard.
    // Implemented here as a variant because of the lack of hardware 
    // Romanian keyboards and because of the predilection of Romanian
    // X users towards the secondary layout from the new standard.

    include "us"

    name[Group1]="Romanian (standard)";

    key <TLDE> { [ doublelowquotemark, rightdoublequotemark, grave, asciitilde ] };
    key <AE01> { [            1,      exclam,       dead_tilde              ] };
    key <AE02> { [            2,          at,       dead_caron              ] };
    key <AE03> { [            3,  numbersign,  dead_circumflex              ] };
    key <AE04> { [            4,      dollar,       dead_breve              ] };
    key <AE05> { [            5,     percent,   dead_abovering              ] };
    key <AE06> { [            6, asciicircum,      dead_ogonek              ] };
    key <AE07> { [            7,   ampersand,       dead_grave              ] };
    key <AE08> { [            8,    asterisk,    dead_abovedot              ] };
    key <AE09> { [            9,   parenleft,       dead_acute              ] };
    key <AE10> { [            0,  parenright, dead_doubleacute              ] };
    key <AE11> { [        minus,  underscore,   dead_diaeresis,      endash ] };
    key <AE12> { [        equal,        plus,     dead_cedilla,   plusminus ] };
    key <AD03> { [            e,           E,         EuroSign              ] };
    key <AD10> { [            p,           P,          section              ] };
    key <AD11> { [       abreve,      Abreve,      bracketleft,   braceleft ] };
    key <AD12> { [  icircumflex, Icircumflex,     bracketright,  braceright ] };
    key <BKSL> { [  acircumflex, Acircumflex,        backslash,         bar ] };
    key <AC02> { [            s,           S,           ssharp,       U1e9e ] };
    key <AC03> { [            d,           D,          dstroke,     Dstroke ] };
    key <AC09> { [            l,           L,          lstroke,     Lstroke ] };
    key <AC10> { [        U0219,       U0218,        semicolon,       colon ] };
    key <AC11> { [        U021b,       U021a,       apostrophe,    quotedbl ] };
    key <LSGT> { [    backslash,         bar                                ] };
    key <AB03> { [            c,           C,        copyright              ] };
    key <AB08> { [        comma,   semicolon,           less, guillemotleft ] };
    key <AB09> { [       period,       colon,       greater, guillemotright ] };

    key <KPDL> { [    KP_Delete, KP_Separator,      KP_Decimal,  KP_Decimal ] };

    include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "winkeys" {
    // Romanian (Legacy) QWERTZ keyboard layout, as available on Windows 10,
    // but with the correct commabelow accents and the Euro sign on AltGr+e.
    // Some Romanian hardware keyboards are still built like this.
    // Older Romanian hardware keyboards might be slightly different.
    // Created by Manfred Pohler, <Manfred.Pohler@t-online.de> (C) 2003
    // Updated by Dumitru Moldovan, <dumol@gnome.org> (C) 2020

    include "us"

    name[Group1]="Romanian (Windows)";

    key <TLDE> { [ bracketright, bracketleft                                ] };
    key <AE01> { [            1,      exclam,       asciitilde              ] };
    key <AE02> { [            2,    quotedbl,       dead_caron              ] };
    key <AE03> { [            3,  numbersign,  dead_circumflex              ] };
    key <AE04> { [            4,    currency,       dead_breve              ] };
    key <AE05> { [            5,     percent,   dead_abovering              ] };
    key <AE06> { [            6,   ampersand,      dead_ogonek              ] };
    key <AE07> { [            7,       slash,       dead_grave              ] };
    key <AE08> { [            8,   parenleft,    dead_abovedot              ] };
    key <AE09> { [            9,  parenright,       dead_acute              ] };
    key <AE10> { [            0,       equal, dead_doubleacute              ] };
    key <AE11> { [         plus,    question,   dead_diaeresis              ] };
    key <AE12> { [   apostrophe,    asterisk,     dead_cedilla              ] };
    key <AD01> { [            q,           Q,        backslash              ] };
    key <AD02> { [            w,           W,              bar              ] };
    key <AD03> { [            e,           E,         EuroSign              ] };
    key <AD06> { [            z,           Z                                ] };
    key <AD11> { [       abreve,      Abreve,         division              ] };
    key <AD12> { [  icircumflex, Icircumflex,         multiply              ] };
    key <AC02> { [            s,           S,          dstroke              ] };
    key <AC03> { [            d,           D,          Dstroke              ] };
    key <AC08> { [            k,           K,          lstroke              ] };
    key <AC09> { [            l,           L,          Lstroke              ] };
    key <AC10> { [        U0219,       U0218,           dollar              ] };
    key <AC11> { [        U021b,       U021a,           ssharp              ] };
    key <BKSL> { [  acircumflex, Acircumflex                                ] };
    key <LSGT> { [         less,     greater                                ] };
    key <AB01> { [            y,           Y                                ] };
    key <AB04> { [            v,           V,               at              ] };
    key <AB05> { [            b,           B,        braceleft              ] };
    key <AB06> { [            n,           N,       braceright              ] };
    key <AB07> { [            m,           M,          section              ] };
    key <AB08> { [        comma,   semicolon,             less              ] };
    key <AB09> { [       period,       colon,          greater              ] };
    key <AB10> { [        minus,  underscore                                ] };

    key <KPDL> { [    KP_Delete, KP_Separator,      KP_Decimal,  KP_Decimal ] };

    include "level3(ralt_switch)"
};


// EXTRAS:


partial
xkb_symbols "crh_dobruja" {
    // Romania-specific Crimean Tatar (Crimean Turkish) Q layout.
    // This layout is not yet standard. Common Alt-Q and F layouts are now also 
    // available right next to this layout in the new language-centric UI.
    // Reşat SABIQ <tilde.birlik @ gmail . com>, 2009, 2011
    // Özgür Qarahan <qarahan @ gmail . com>, 2009

    include "tr(crh)"

    name[Group1]="Crimean Tatar (Dobruja Q)";

    key <AD02> { [            w,           W,           abreve,       Abreve ] };
    key <AD05> { [            t,           T,            U021b,        U021a ] };
    key <AD10> { [            p,           P,          section               ] };
    key <AC02> { [            s,           S,            U0219,        U0218 ] };
    key <AC07> { [       ibreve,      Ibreve,                j,            J ] };
    key <AB07> { [            m,           M,        trademark,    masculine ] };
};


partial alphanumeric_keys
xkb_symbols "ergonomic" {
    // This layout is optimized for fast touch-typing in Romanian on a
    // US keyboard, and works by swapping out symbols infrequently used
    // in written Romanian (q,w,y,k) in favor of native ones, thus reducing
    // the need to use modifier keys.
    // Created by Gabriel Somlo, <somlo@cmu.edu> (C) 2011

    include "ro(basic)"

    name[Group1]="Romanian (ergonomic Touchtype)";

    key <AD01> { [       abreve,      Abreve,                q,           Q ] };
    key <AD02> { [        U0219,       U0218,                w,           W ] };
    key <AD06> { [        U021b,       U021a,                y,           Y ] };
    key <AC01> { [            a,           A,      acircumflex, Acircumflex ] };
    key <AC08> { [  icircumflex, Icircumflex,                k,           K ] };
};


partial alphanumeric_keys
xkb_symbols "sun_type6" {
    include "sun_vndr/ro(sun_type6)"
};
// Keyboard layout for Swahili in Arabic script.
// Based on Martin Vidner's Buckwalter transliteration variant of the Arabic keyboard
// Please notify any corrections or omissions to
// Kevin Donnelly (kevin@dotmon.com)

default partial alphanumeric_keys
xkb_symbols "swa" {

    include "us"

    name[Group1]= "Swahili (Kenya)";

    key <AC10> { [ semicolon,	    colon,  0x01000324,  0x01000324 ] };	//COMBINING DIAERESIS BELOW	
    key <AC11> { [apostrophe,    quotedbl,  0x01000301,  0x01000308 ] };	//COMBINING ACUTE ACCENT, COMBINING DIAERESIS
    key <TLDE> { [     grave,  asciitilde,  0x01000300,  0x01000303 ] };	//COMBINING GRAVE ACCENT, COMBINING TILDE
    key <AE06> { [   	   6, asciicircum,  0x01000302 	       	    ] };	//COMBINING CIRCUMFLEX ACCENT
    key <AE08> { [	   8,    asterisk,  0x01000307,  0x01000323 ] };	//COMBINING DOT ABOVE, COMBINING DOT BELOW
    key <AE09> { [	   9,   parenleft,  0x01000306	            ] };	//COMBINING BREVE
    key <AE10> { [	   0,  parenright,  0x0100030c 	            ] };	//COMBINING CARON
    key <AE11> { [     minus,  underscore,  0x01000304,  0x01000331 ] };	//COMBINING MACRON,COMBINING MACRON BELOW   

    include "level3(ralt_switch)"
};


// Kikuyu (Gĩkũyũ) keyboard
// Based on Kasahorow keyboard layout
// https://code.google.com/archive/p/africakeyboards/
//
//
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ~ ¸ │ ! ¡ │ @ ⅛ │ # £ │ $ $ │ % ⅜ │ ^ ⅝ │ & ⅞ │ * ™ │ ( ± │ ) ° │ _ ¿ │ + ˛ ┃  BKSP   ┃
// │ `   │ 1 ¹ │ 2 @ │ 3 ³ │ 4 ¼ │ 5 ½ │ 6 ¬ │ 7 { │ 8 [ │ 9 ] │ 0 } │ - \ │ = ¸ ┃         ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ Ĩ Q │ W Ł │ E ¢ │ R ® │ T Ŧ │ Y ¥ │ U ↑ │ I ı │ O Ø │ P Þ │ { ° │ } ¯ ┃Enter  ┃
// ┃Tab    ┃ ĩ q │ w ł │ e € │ r ¶ │ t ŧ │ y ← │ u ↓ │ i → │ o ø │ p þ │ [ ¨ │ ] ~ ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ A Æ │ S § │ D Ð │ F ª │ G Ŋ │ H Ħ │ J X │ K & │ L Ŀ │ : ˝ │ " ˇ │ | ̄˘ ┃      ┃
// ┃CAPS    ┃ a æ │ s ß │ d ð │ f đ │ g ŋ │ h ħ │ j x │ k ĸ │ l ŀ │ ; ´ │ ' ^ │ \ ` ┃      ┃
// ┣━━━━━━━┳┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃       ┃ > ¦ │ Z < │ Ũ > │ C © │ V ‘ │ B ’ │ N N │ M º │ < × │ > ÷ │ ? ˙ ┃             ┃
// ┃Shift ⇧┃ < | │ z « │ ũ » │ c ¢ │ v “ │ b ” │ n n │ m µ │ , ─ │ . · │ / ̣  ̣̣̣̣̣┃Shift ⇧      ┃
// ┣━━━━━━━╋━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃         Space                     ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "kik" {

    include "latin(type4)"

    name[Group1]= "Kikuyu";

    key <TLDE> {        [     grave,    asciitilde      ]       };
    key <AE01> {        [         1,    exclam          ]       };
    key <AE02> {        [         2,    at              ]       };
    key <AE03> {        [         3,    numbersign      ]       };
    key <AE04> {        [         4,    dollar          ]       };
    key <AE05> {        [         5,    percent         ]       };
    key <AE06> {        [         6,    asciicircum     ]       };
    key <AE07> {        [         7,    ampersand       ]       };
    key <AE08> {        [         8,    asterisk        ]       };
    key <AE09> {        [         9,    parenleft       ]       };
    key <AE10> {        [         0,    parenright      ]       };
    key <AE11> {        [     minus,    underscore      ]       };
    key <AE12> {        [     equal,    plus            ]       };

    key <AD01> {        [         itilde,  Itilde, q, Q       ]       };
    key <AD02> {        [         w,    W               ]       };
    key <AD03> {        [         e,    E               ]       };
    key <AD04> {        [         r,    R               ]       };
    key <AD05> {        [         t,    T               ]       };
    key <AD06> {        [         y,    Y               ]       };
    key <AD07> {        [         u,    U               ]       };
    key <AD08> {        [         i,    I               ]       };
    key <AD09> {        [         o,    O               ]       };
    key <AD10> {        [         p,    P               ]       };
    key <AD11> {        [ bracketleft,  braceleft       ]       };
    key <AD12> {        [ bracketright, braceright      ]       };

    key <AC01> {        [         a,    A               ]       };
    key <AC02> {        [         s,    S               ]       };
    key <AC03> {        [         d,    D               ]       };
    key <AC04> {        [         f,    F               ]       };
    key <AC05> {        [         g,    G               ]       };
    key <AC06> {        [         h,    H               ]       };
    key <AC07> {        [         j,    J, x, X         ]       };
    key <AC08> {        [         k,    K               ]       };
    key <AC09> {        [         l,    L               ]       };
    key <AC10> {        [ semicolon,    colon           ]       };
    key <AC11> {        [ apostrophe,   quotedbl        ]       };

    key <AB01> {        [         z,    Z               ]       };
    key <AB02> {        [         utilde,  Utilde       ]       };
    key <AB03> {        [         c,    C               ]       };
    key <AB04> {        [         v,    V               ]       };
    key <AB05> {        [         b,    B               ]       };
    key <AB06> {        [         n,    N               ]       };
    key <AB07> {        [         m,    M               ]       };
    key <AB08> {        [     comma,    less            ]       };
    key <AB09> {        [    period,    greater         ]       };
    key <AB10> {        [     slash,    question        ]       };

    key <BKSL> {        [ backslash,         bar        ]       };

   include "level3(ralt_switch)"
};
// based on keyboard map:
// Author: Damjan Georgievski <penguinista AT mail.net.mk>
// Revision: 1.5

default partial alphanumeric_keys
xkb_symbols "basic" { 
    name[Group1]= "Macedonian";

    key <AB01> { [     Cyrillic_ze,     Cyrillic_ZE	]	};
    key <AC02> { [     Cyrillic_es,     Cyrillic_ES	]	};
    key <AC01> { [      Cyrillic_a,      Cyrillic_A	]	};
    key <AD01> { [    Cyrillic_lje,    Cyrillic_LJE	]	};
    key <AD02> { [    Cyrillic_nje,    Cyrillic_NJE	]	};
    key <AB03> { [    Cyrillic_tse,    Cyrillic_TSE	]	};
    key <AB02> { [   Cyrillic_dzhe,   Cyrillic_DZHE	]	};
    key <AC03> { [     Cyrillic_de,     Cyrillic_DE	]	};
    key <AD03> { [     Cyrillic_ie,     Cyrillic_IE	]	};
    key <AB04> { [     Cyrillic_ve,     Cyrillic_VE	]	};
    key <AC04> { [     Cyrillic_ef,     Cyrillic_EF	]	};
    key <AD05> { [     Cyrillic_te,     Cyrillic_TE	]	};
    key <AD04> { [     Cyrillic_er,     Cyrillic_ER	]	};
    key <AB06> { [     Cyrillic_en,     Cyrillic_EN	]	};
    key <AB05> { [     Cyrillic_be,     Cyrillic_BE	]	};
    key <AC06> { [     Cyrillic_ha,     Cyrillic_HA	]	};
    key <AC05> { [    Cyrillic_ghe,    Cyrillic_GHE	]	};
    key <AD06> { [   Macedonia_dse,   Macedonia_DSE	]	};
    key <AB07> { [     Cyrillic_em,     Cyrillic_EM	]	};
    key <AC07> { [     Cyrillic_je,     Cyrillic_JE	]	};
    key <AD07> { [      Cyrillic_u,      Cyrillic_U	]	};
    key <AC08> { [     Cyrillic_ka,     Cyrillic_KA	]	};
    key <AD08> { [      Cyrillic_i,      Cyrillic_I	]	};
    key <AD09> { [      Cyrillic_o,      Cyrillic_O	]	};
    key <AC09> { [     Cyrillic_el,     Cyrillic_EL	]	};
    key <AC10> { [    Cyrillic_che,    Cyrillic_CHE	]	};
    key <AD10> { [     Cyrillic_pe,     Cyrillic_PE	]	};
    key <AC11> { [   Macedonia_kje,   Macedonia_KJE	]	};
    key <AD11> { [    Cyrillic_sha,    Cyrillic_SHA	]	};
    key <AD12> { [   Macedonia_gje,   Macedonia_GJE	]	};
    key <BKSL> { [    Cyrillic_zhe,    Cyrillic_ZHE	]	};
    key <AE12> { [           equal,            plus	]	};
    key <AE11> { [           minus,      underscore	]	};
    key <TLDE> { [      dead_grave,      asciitilde	]	};
    key <AE01> { [               1,          exclam	]	};
    key <AE02> { [               2, doublelowquotemark	]	};
    key <AE03> { [               3, leftdoublequotemark	]	};
    key <AE04> { [               4,          dollar	]	};
    key <AE05> { [               5,         percent	]	};
    key <AE06> { [               6,     asciicircum	]	};
    key <AE07> { [               7,       ampersand	]	};
    key <AE08> { [               8,        asterisk	]	};
    key <AE09> { [               9,       parenleft	]	};
    key <AE10> { [               0,      parenright	]	};
    key <AB08> { [           comma,       semicolon	]	};
    key <AB09> { [          period,           colon	]	};
    key <AB10> { [           slash,        question	]	};

    include "kpdl(comma)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {
    include "mk(basic)"
    name[Group1]= "Macedonian (no dead keys)";
    key <TLDE> { [           grave,      asciitilde ]   };
};
default partial alphanumeric_keys modifier_keys
xkb_symbols "basic" {

    name[Group1]= "English (US)";

    key <TLDE> {	[     grave,	asciitilde	]	};
    key <AE01> {	[	  1,	exclam 		]	};
    key <AE02> {	[	  2,	at		]	};
    key <AE03> {	[	  3,	numbersign	]	};
    key <AE04> {	[	  4,	dollar		]	};
    key <AE05> {	[	  5,	percent		]	};
    key <AE06> {	[	  6,	asciicircum	]	};
    key <AE07> {	[	  7,	ampersand	]	};
    key <AE08> {	[	  8,	asterisk	]	};
    key <AE09> {	[	  9,	parenleft	]	};
    key <AE10> {	[	  0,	parenright	]	};
    key <AE11> {	[     minus,	underscore	]	};
    key <AE12> {	[     equal,	plus		]	};

    key <AD01> {	[	  q,	Q 		]	};
    key <AD02> {	[	  w,	W		]	};
    key <AD03> {	[	  e,	E		]	};
    key <AD04> {	[	  r,	R		]	};
    key <AD05> {	[	  t,	T		]	};
    key <AD06> {	[	  y,	Y		]	};
    key <AD07> {	[	  u,	U		]	};
    key <AD08> {	[	  i,	I		]	};
    key <AD09> {	[	  o,	O		]	};
    key <AD10> {	[	  p,	P		]	};
    key <AD11> {	[ bracketleft,	braceleft	]	};
    key <AD12> {	[ bracketright,	braceright	]	};

    key <AC01> {	[	  a,	A 		]	};
    key <AC02> {	[	  s,	S		]	};
    key <AC03> {	[	  d,	D		]	};
    key <AC04> {	[	  f,	F		]	};
    key <AC05> {	[	  g,	G		]	};
    key <AC06> {	[	  h,	H		]	};
    key <AC07> {	[	  j,	J		]	};
    key <AC08> {	[	  k,	K		]	};
    key <AC09> {	[	  l,	L		]	};
    key <AC10> {	[ semicolon,	colon		]	};
    key <AC11> {	[ apostrophe,	quotedbl	]	};

    key <AB01> {	[	  z,	Z 		]	};
    key <AB02> {	[	  x,	X		]	};
    key <AB03> {	[	  c,	C		]	};
    key <AB04> {	[	  v,	V		]	};
    key <AB05> {	[	  b,	B		]	};
    key <AB06> {	[	  n,	N		]	};
    key <AB07> {	[	  m,	M		]	};
    key <AB08> {	[     comma,	less		]	};
    key <AB09> {	[    period,	greater		]	};
    key <AB10> {	[     slash,	question	]	};

    key <BKSL> {	[ backslash,         bar	]	};
};

partial alphanumeric_keys
xkb_symbols "euro" {

    include "us(basic)"
    name[Group1]= "English (US, euro on 5)";

    include "eurosign(5)"

    include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "ibm238l" {

    include "us(basic)"
    name[Group1]= "English (US, IBM Arabic 238_L)";

    key <AB08> {        [     comma,    comma      ]       };
    key <AB09> {        [    period,    period     ]       };
    key <BKSL> {        [ quoteleft,    asciitilde ]       };
    key <LSGT> {        [ backslash,    bar        ]       };
    key <TLDE> {        [ leftcaret,    rightcaret ]       };
};

partial alphanumeric_keys
xkb_symbols "intl" {

    name[Group1]= "English (US, intl., with dead keys)";

    key <TLDE> { [dead_grave, dead_tilde,         grave,       asciitilde ] };
    key <AE01> { [	   1,     exclam,    exclamdown,      onesuperior ] };
    key <AE02> { [	   2,         at,   twosuperior, dead_doubleacute ] };
    key <AE03> { [	   3, numbersign, threesuperior,      dead_macron ] };
    key <AE04> { [	   4,     dollar,      currency,         sterling ] };
    key <AE05> { [	   5,    percent,      EuroSign,     dead_cedilla ] };
    key <AE06> { [    6, dead_circumflex,    onequarter,      asciicircum ] };
    key <AE07> { [	   7,  ampersand,       onehalf,	dead_horn ] };
    key <AE08> { [	   8,   asterisk, threequarters,      dead_ogonek ] };
    key <AE09> { [	   9,  parenleft, leftsinglequotemark, dead_breve ] };
    key <AE10> { [	   0, parenright, rightsinglequotemark, dead_abovering ] };
    key <AE11> { [     minus, underscore,           yen,    dead_belowdot ] };
    key <AE12> { [     equal,       plus,      multiply,         division ] };

    key <AD01> { [	   q,          Q,    adiaeresis,       Adiaeresis ] };
    key <AD02> { [	   w,          W,         aring,            Aring ] };
    key <AD03> { [	   e,          E,        eacute,           Eacute ] };
    key <AD04> { [	   r,          R,    registered,       registered ] };
    key <AD05> { [	   t,          T,         thorn,            THORN ] };
    key <AD06> { [	   y,          Y,    udiaeresis,       Udiaeresis ] };
    key <AD07> { [	   u,          U,        uacute,           Uacute ] };
    key <AD08> { [	   i,          I,        iacute,           Iacute ] };
    key <AD09> { [	   o,          O,        oacute,           Oacute ] };
    key <AD10> { [	   p,          P,    odiaeresis,       Odiaeresis ] };
    key <AD11> { [ bracketleft,  braceleft,  guillemotleft, leftdoublequotemark ] };
    key <AD12> { [bracketright, braceright, guillemotright, rightdoublequotemark ] };

    key <AC01> { [	   a,          A,        aacute,           Aacute ] };
    key <AC02> { [	   s,          S,        ssharp,          section ] };
    key <AC03> { [	   d,          D,           eth,              ETH ] };
    key <AC04> { [	   f,          F,             f,                F ] };
    key <AC05> { [	   g,          G,             g,                G ] };
    key <AC06> { [	   h,          H,             h,                H ] };
    key <AC07> { [	   j,          J,             j,                J ] };
    key <AC08> { [	   k,          K,            oe,               OE ] };
    key <AC09> { [	   l,          L,        oslash,         Ooblique ] };
    key <AC10> { [ semicolon,      colon,     paragraph,           degree ] };
    key <AC11> { [dead_acute, dead_diaeresis, apostrophe,        quotedbl ] };

    key <AB01> { [	   z,          Z,            ae,               AE ] };
    key <AB02> { [	   x,          X,             x,                X ] };
    key <AB03> { [	   c,          C,     copyright,             cent ] };
    key <AB04> { [	   v,          V,             v,                V ] };
    key <AB05> { [	   b,          B,             b,                B ] };
    key <AB06> { [	   n,          N,        ntilde,           Ntilde ] };
    key <AB07> { [	   m,          M,            mu,               mu ] };
    key <AB08> { [     comma,       less,      ccedilla,         Ccedilla ] };
    key <AB09> { [    period,    greater, dead_abovedot,       dead_caron ] };
    key <AB10> { [     slash,   question,  questiondown,        dead_hook ] };
    key <BKSL> { [ backslash,        bar,       notsign,        brokenbar ] };

    key <LSGT> { [ backslash,   bar,            backslash,      bar ] };

    include "level3(ralt_switch)"
};

// Based on symbols/us_intl keyboard map:
// Dead-keys definition for a very simple US/ASCII layout.
// by Conectiva (http://www.conectiva.com.br)
// modified by Ricardo Y. Igarashi (iga@that.com.br)

// Added the following deadkeys, to make it truly international:
//
// dead_macron: on AltGr-minus
// dead_breve: on AltGr-parenleft
// dead_abovedot: on AltGr-period
// dead_abovering: on AltGr-0
// dead_doubleacute: on AltGr-equal (as quotedbl is already used)
// dead_caron: on AltGr-less (AltGr-shift-comma)
// dead_cedilla: on AltGr-comma
// dead_ogonek: on AltGr-semicolon
// dead_belowdot: on AltGr-underscore (AltGr-shift-minus)
// dead_hook: on AltGr-question
// dead_horn: on AltGr-plus (AltGr-shift-equal)
// dead_diaeresis: on AltGr-colon (Alt-shift-semicolon)
//
// those were already there:
// dead_grave
// dead_acute
// dead_circumflex
// dead_tilde
// dead_diaeresis

partial alphanumeric_keys
xkb_symbols "alt-intl" {

  include "us"
  name[Group1]= "English (US, alt. intl.)";

  key <TLDE> { [ dead_grave, dead_tilde,    grave,	      asciitilde    ] };
  key <AE05> { [          5, percent,	    EuroSign			    ] };
  key <AE06> { [	  6, dead_circumflex, asciicircum,    asciicircum   ] };
  key <AE09> { [	  9, parenleft, leftsinglequotemark,  dead_breve ] };
  key <AE10> { [	  0, parenright, rightsinglequotemark, dead_abovering ] };
  key <AE11> { [      minus, underscore,    dead_macron,      dead_belowdot ] };
  key <AE12> { [      equal, plus,	    dead_doubleacute, dead_horn	    ] };

  key <AD03> { [          e, E,		     EuroSign,         cent	    ] };

  key <AC10> { [  semicolon, colon,	     dead_ogonek,   dead_diaeresis  ] };
  key <AC11> { [ dead_acute, dead_diaeresis, apostrophe,    quotedbl	    ] };

  key <AB08> { [      comma, less,	     dead_cedilla,  dead_caron	    ] };
  key <AB09> { [     period, greater,	     dead_abovedot, dead_circumflex ] };
  key <AB10> { [      slash, question,	     dead_hook,	    dead_hook	    ] };

  key <LSGT> { [ backslash,   bar,            backslash,      bar ] };

  include "level3(ralt_switch)"
};

// based on a keyboard map from an 'xkb/symbols/dk' file

partial alphanumeric_keys
xkb_symbols "dvorak" {

    name[Group1]= "English (Dvorak)";

    key <TLDE> { [       grave,	asciitilde, dead_grave, dead_tilde	] };

    key <AE01> { [	    1,	exclam 		]	};
    key <AE02> { [	    2,	at		]	};
    key <AE03> { [	    3,	numbersign	]	};
    key <AE04> { [	    4,	dollar		]	};
    key <AE05> { [	    5,	percent		]	};
    key <AE06> { [	    6,	asciicircum, dead_circumflex, dead_circumflex ]	};
    key <AE07> { [	    7,	ampersand	]	};
    key <AE08> { [	    8,	asterisk	]	};
    key <AE09> { [	    9,	parenleft,  dead_grave]	};
    key <AE10> { [	    0,	parenright	]	};
    key <AE11> { [ bracketleft,	braceleft	]	};
    key <AE12> { [ bracketright, braceright,  dead_tilde] };

    key <AD01> { [  apostrophe,	quotedbl, dead_acute, dead_diaeresis	] };
    key <AD02> { [	comma,	less,   dead_cedilla, dead_caron	] };
    key <AD03> { [      period,	greater, dead_abovedot, periodcentered	] };
    key <AD04> { [	    p,	P		]	};
    key <AD05> { [	    y,	Y		]	};
    key <AD06> { [	    f,	F		]	};
    key <AD07> { [	    g,	G		]	};
    key <AD08> { [	    c,	C		]	};
    key <AD09> { [	    r,	R		]	};
    key <AD10> { [	    l,	L		]	};
    key <AD11> { [	slash,	question	]	};
    key <AD12> { [	equal,	plus		]	};

    key <AC01> { [	    a,	A 		]	};
    key <AC02> { [	    o,	O		]	};
    key <AC03> { [	    e,	E		]	};
    key <AC04> { [	    u,	U		]	};
    key <AC05> { [	    i,	I		]	};
    key <AC06> { [	    d,	D		]	};
    key <AC07> { [	    h,	H		]	};
    key <AC08> { [	    t,	T		]	};
    key <AC09> { [	    n,	N		]	};
    key <AC10> { [	    s,	S		]	};
    key <AC11> { [	minus,	underscore	]	};

    key <AB01> { [   semicolon,	colon, dead_ogonek, dead_doubleacute ] };
    key <AB02> { [	    q,	Q		]	};
    key <AB03> { [	    j,	J		]	};
    key <AB04> { [	    k,	K		]	};
    key <AB05> { [	    x,	X		]	};
    key <AB06> { [	    b,	B		]	};
    key <AB07> { [	    m,	M		]	};
    key <AB08> { [	    w,	W		]	};
    key <AB09> { [	    v,	V		]	};
    key <AB10> { [	    z,	Z		]	};

    key <BKSL> { [  backslash,  bar             ]       };
};

// Dvorak intl., with dead keys
// Olivier Mehani (shtrom-xorg@ssji.net)
// Reproduce the per-key mapping of us(intl) for the dvorak layout
// aka "I just swapped my keys over"
partial alphanumeric_keys
xkb_symbols "dvorak-intl" {

    include "us(dvorak)"
    name[Group1]= "English (Dvorak, intl., with dead keys)";

    key <TLDE> { [dead_grave, dead_tilde,         grave,       asciitilde ] };

    key <AE01> { [	   1,     exclam,    exclamdown,      onesuperior ] };
    key <AE02> { [	   2,         at,   twosuperior, dead_doubleacute ] };
    key <AE03> { [	   3, numbersign, threesuperior,      dead_macron ] };
    key <AE04> { [	   4,     dollar,      currency,         sterling ] };
    key <AE05> { [	   5,    percent,      EuroSign,     dead_cedilla ] };
    key <AE06> { [    6, dead_circumflex,    onequarter,      asciicircum ] };
    key <AE07> { [	   7,  ampersand,       onehalf,	dead_horn ] };
    key <AE08> { [	   8,   asterisk, threequarters,      dead_ogonek ] };
    key <AE09> { [	   9,  parenleft, leftsinglequotemark, dead_breve ] };
    key <AE10> { [	   0, parenright, rightsinglequotemark, dead_abovering ] };
    key <AE11> { [ bracketleft,  braceleft,  guillemotleft, leftdoublequotemark ] };
    key <AE12> { [bracketright, braceright, guillemotright, rightdoublequotemark ] };

    key <AD01> { [dead_acute, dead_diaeresis, apostrophe,        quotedbl ] };
    key <AD02> { [     comma,       less,      ccedilla,         Ccedilla ] };
    key <AD03> { [    period,    greater, dead_abovedot,       dead_caron ] };
    key <AD04> { [	   p,          P,    odiaeresis,       Odiaeresis ] };
    key <AD05> { [	   y,          Y,    udiaeresis,       Udiaeresis ] };
    // key <AD06> { [	   f,	F		]	};
    // key <AD07> { [	   g,	G		]	};
    key <AD08> { [	   c,          C,     copyright,             cent ] };
    key <AD09> { [	   r,          R,    registered,       registered ] };
    key <AD10> { [	   l,          L,        oslash,         Ooblique ] };
    key <AD11> { [     slash,   question,  questiondown,        dead_hook ] };
    // key <AD12> { [     equal,       plus,      multiply,         division ] };

    key <AC01> { [	   a,          A,        aacute,           Aacute ] };
    key <AC02> { [	   o,          O,        oacute,           Oacute ] };
    key <AC03> { [	   e,          E,        eacute,           Eacute ] };
    key <AC04> { [	   u,          U,        uacute,           Uacute ] };
    key <AC05> { [	   i,          I,        iacute,           Iacute ] };
    key <AC06> { [	   d,          D,           eth,              ETH ] };
    // key <AC07> { [	   h,	H		]	};
    key <AC08> { [	   t,          T,         thorn,            THORN ] };
    key <AC09> { [	   n,          N,        ntilde,           Ntilde ] };
    key <AC10> { [	   s,          S,        ssharp,          section ] };
    // key <AC11> { [     minus, underscore,           yen,    dead_belowdot ] };

    key <AB01> { [ semicolon,      colon,     paragraph,           degree ] };
    key <AB02> { [	   q,          Q,    adiaeresis,       Adiaeresis ] };
    // key <AB03> { [	   j,	J		]	};
    key <AB04> { [	   k,          K,            oe,               OE ] };
    // key <AB05> { [	   x,	X		]	};
    // key <AB06> { [	   b,	B		]	};
    key <AB07> { [	   m,          M,            mu,               mu ] };
    key <AB08> { [	   w,          W,         aring,            Aring ] };
    // key <AB09> { [	   v,	V		]	};
    key <AB10> { [	   z,          Z,            ae,               AE ] };

    key <BKSL> { [ backslash,        bar,       notsign,        brokenbar ] };

    include "level3(ralt_switch)"
};

// Dvorak international without dead keys
// Stephane Magnenat (stephane at magnenat dot net, http://stephane.magnenat.net)
// Based on information from http://www.poupinou.org/dvorak/index.html
//
//  `   1   2   3   4   5   6   7   8   9   0   [   ]   \
//                  €
//
//      '   ,   .   p   y   f   g   c   r   l   /   =
//          ä   ê   ë   ü           ç
//
//      a   o   e   u   i   d   h   t   n   s   -
//      à   ô   é   û   î                   ß
//
//      ;   q   j   k   x   b   m   w   v   z
//      â   ö   è   ù   ï

partial alphanumeric_keys
xkb_symbols "dvorak-alt-intl" {

    include "us(dvorak)"
    name[Group1]= "English (Dvorak, alt. intl.)";

    key <AE04> { [         4,  dollar,    EuroSign ] };

    key <AD02> { [     comma,    less,  adiaeresis,       dead_caron ] };
    key <AD03> { [    period, greater, ecircumflex,   periodcentered	] };
    key <AD04> { [         p,       P,  ediaeresis,     dead_cedilla ] };
    key <AD05> { [         y,       Y,  udiaeresis ] };
    key <AD08> { [         c,       C,    ccedilla,    dead_abovedot ] };

    key <AC01> { [         a,       A,      agrave ] };
    key <AC02> { [         o,       O, ocircumflex ] };
    key <AC03> { [         e,       E,      eacute ] };
    key <AC04> { [         u,       U, ucircumflex ] };
    key <AC05> { [         i,       I, icircumflex ] };
    key <AC10> { [         s,       S,      ssharp,            U1E9E ] };

    key <AB01> { [ semicolon,   colon, acircumflex ] };
    key <AB02> { [         q,       Q,  odiaeresis,      dead_ogonek ] };
    key <AB03> { [         j,       J,      egrave, dead_doubleacute ] };
    key <AB04> { [         k,       K,      ugrave ] };
    key <AB05> { [         x,       X,  idiaeresis ] };

    include "level3(ralt_switch)"
};

// Left and right handed dvorak layouts
// by sqweek <sqweek@gmail.com> 2006-01-30
// Based on the corresponding layouts in the console-tools package.
partial alphanumeric_keys
xkb_symbols "dvorak-l" {

    include "us(dvorak)"
    name[Group1]= "English (Dvorak, left-handed)";

    key <AE01> {	[ bracketleft,	braceleft	]	};
    key <AE02> {	[ bracketright,	braceright	]	};
    key <AE03> {	[	slash,	question	]	};
    key <AE04> {	[	    p,	P		]	};
    key <AE05> {	[	    f,	F		]	};
    key <AE06> {	[	    m,	M		]	};
    key <AE07> {	[	    l,	L		]	};
    key <AE08> {	[	    j,	J		]	};
    key <AE09> {	[	    4,	dollar		]	};
    key <AE10> {	[	    3,	numbersign	]	};
    key <AE11> {	[	    2,	at		]	};
    key <AE12> {	[	    1,	exclam 		]	};

    key <AD01> {	[   semicolon,	colon 		]	};
    key <AD02> {	[	    q,	Q		]	};
    key <AD03> {	[	    b,	B		]	};
    key <AD04> {	[	    y,	Y		]	};
    key <AD05> {	[	    u,	U		]	};
    key <AD06> {	[	    r,	R		]	};
    key <AD07> {	[	    s,	S		]	};
    key <AD08> {	[	    o,	O		]	};
    key <AD09> {	[      period,	greater		]	};
    key <AD10> {	[	    6,	asciicircum	]	};
    key <AD11> {	[	    5,	percent		]	};
    key <AD12> {	[	equal,	plus		]	};

    key <AC01> {	[	minus,	underscore	]	};
    key <AC02> {	[	    k,	K		]	};
    key <AC03> {	[	    c,	C		]	};
    key <AC04> {	[	    d,	D		]	};
    key <AC05> {	[	    t,	T		]	};
    key <AC06> {	[	    h,	H		]	};
    key <AC07> {	[	    e,	E		]	};
    key <AC08> {	[	    a,	A 		]	};
    key <AC09> {	[	    z,	Z		]	};
    key <AC10> {	[	    8,	asterisk	]	};
    key <AC11> {	[	    7,	ampersand	]	};

    key <AB01> {	[  apostrophe,	quotedbl	] 	};
    key <AB02> {	[	    x,	X		]	};
    key <AB03> {	[	    g,	G		]	};
    key <AB04> {	[	    v,	V		]	};
    key <AB05> {	[	    w,	W		]	};
    key <AB06> {	[	    n,	N		]	};
    key <AB07> {	[	    i,	I		]	};
    key <AB08> {	[	comma,	less		]	};
    key <AB09> {	[	    0,	parenright	]	};
    key <AB10> {	[	    9,	parenleft	]	};
};

partial alphanumeric_keys
xkb_symbols "dvorak-r" {

    include "us(dvorak)"
    name[Group1]= "English (Dvorak, right-handed)";

    key <AE01> {	[	    1,	exclam 		]	};
    key <AE02> {	[	    2,	at		]	};
    key <AE03> {	[	    3,	numbersign	]	};
    key <AE04> {	[	    4,	dollar		]	};
    key <AE05> {	[	    j,	J		]	};
    key <AE06> {	[	    l,	L		]	};
    key <AE07> {	[	    m,	M		]	};
    key <AE08> {	[	    f,	F		]	};
    key <AE09> {	[	    p,	P		]	};
    key <AE10> {	[	slash,	question	]	};
    key <AE11> {	[ bracketleft,	braceleft	]	};
    key <AE12> {	[ bracketright,	braceright	]	};

    key <AD01> {	[	    5,	percent		]	};
    key <AD02> {	[	    6,	asciicircum ]	};
    key <AD03> {	[	    q,	Q		]	};
    key <AD04> {	[      period,	greater		]	};
    key <AD05> {	[	    o,	O		]	};
    key <AD06> {	[	    r,	R		]	};
    key <AD07> {	[	    s,	S		]	};
    key <AD08> {	[	    u,	U		]	};
    key <AD09> {	[	    y,	Y		]	};
    key <AD10> {	[	    b,	B		]	};
    key <AD11> {	[   semicolon,	colon 		]	};
    key <AD12> {	[	equal,	plus		]	};

    key <AC01> {	[	    7,	ampersand	]	};
    key <AC02> {	[	    8,	asterisk	]	};
    key <AC03> {	[	    z,	Z		]	};
    key <AC04> {	[	    a,	A 		]	};
    key <AC05> {	[	    e,	E		]	};
    key <AC06> {	[	    h,	H		]	};
    key <AC07> {	[	    t,	T		]	};
    key <AC08> {	[	    d,	D		]	};
    key <AC09> {	[	    c,	C		]	};
    key <AC10> {	[	    k,	K		]	};
    key <AC11> {	[	minus,	underscore	]	};

    key <AB01> {	[	    9,	parenleft	]	};
    key <AB02> {	[	    0,	parenright	]	};
    key <AB03> {	[	    x,	X		]	};
    key <AB04> {	[	comma,	less		]	};
    key <AB05> {	[	    i,	I		]	};
    key <AB06> {	[	    n,	N		]	};
    key <AB07> {	[	    w,	W		]	};
    key <AB08> {	[	    v,	V		]	};
    key <AB09> {	[	    g,	G		]	};
    key <AB10> {	[  apostrophe,	quotedbl	] 	};
};

// Classic dvorak layout
// by Piter Punk <piterpk@terra.com.br> - 2006-07-06
// Based on dvorak layout and e-mail from Russel L. Harris rlharris@oplink.net
// on xorg list.
partial alphanumeric_keys
xkb_symbols "dvorak-classic" {

    name[Group1]= "English (classic Dvorak)";

    key <TLDE> { [       grave,	asciitilde, dead_grave, dead_tilde	] };

    key <AE01> { [ bracketleft,	braceleft	]	};
    key <AE02> { [	    7,	ampersand	]	};
    key <AE03> { [	    5,	percent		]	};
    key <AE04> { [	    3,	numbersign	]	};
    key <AE05> { [	    1,	exclam 		]	};
    key <AE06> { [	    9,	parenleft,  dead_grave]	};
    key <AE07> { [	    0,	parenright	]	};
    key <AE08> { [	    2,	at		]	};
    key <AE09> { [	    4,	dollar		]	};
    key <AE10> { [	    6,	asciicircum, dead_circumflex, dead_circumflex ]	};
    key <AE11> { [	    8,	asterisk	]	};
    key <AE12> { [ bracketright, braceright,  dead_tilde] };

    key <AD01> { [	slash,	question	]	};
    key <AD02> { [	comma,	less,   dead_cedilla, dead_caron	] };
    key <AD03> { [      period,	greater, dead_abovedot, periodcentered	] };
    key <AD04> { [	    p,	P		]	};
    key <AD05> { [	    y,	Y		]	};
    key <AD06> { [	    f,	F		]	};
    key <AD07> { [	    g,	G		]	};
    key <AD08> { [	    c,	C		]	};
    key <AD09> { [	    r,	R		]	};
    key <AD10> { [	    l,	L		]	};
    key <AD11> { [  apostrophe,	quotedbl, dead_acute, dead_diaeresis	] };
    key <AD12> { [	equal,	plus		]	};

    key <AC01> { [	    a,	A 		]	};
    key <AC02> { [	    o,	O		]	};
    key <AC03> { [	    e,	E		]	};
    key <AC04> { [	    u,	U		]	};
    key <AC05> { [	    i,	I		]	};
    key <AC06> { [	    d,	D		]	};
    key <AC07> { [	    h,	H		]	};
    key <AC08> { [	    t,	T		]	};
    key <AC09> { [	    n,	N		]	};
    key <AC10> { [	    s,	S		]	};
    key <AC11> { [	minus,	underscore	]	};

    key <AB01> { [   semicolon,	colon, dead_ogonek, dead_doubleacute ] };
    key <AB02> { [	    q,	Q		]	};
    key <AB03> { [	    j,	J		]	};
    key <AB04> { [	    k,	K		]	};
    key <AB05> { [	    x,	X		]	};
    key <AB06> { [	    b,	B		]	};
    key <AB07> { [	    m,	M		]	};
    key <AB08> { [	    w,	W		]	};
    key <AB09> { [	    v,	V		]	};
    key <AB10> { [	    z,	Z		]	};
    key <BKSL> { [  backslash,  bar             ]       };
};

// programmer Dvorak, by Roland Kaufmann <rlndkfmn at gmail dot com>
// License: BSD, available at <http://www.kaufmann.no/roland/dvorak/license.html>
// Main features: Numbers are in shift position (like French), symbols have been
// placed in locations that give good hand-alternation and finger rolling with
// symbols that usually follows, accented characters are possible for I18N.
// Patch suggestions should be sent upstream.
partial alphanumeric_keys
xkb_symbols "dvp" {

    include "us(dvorak)"
    name[Group1] = "English (programmer Dvorak)";

    //             Unmodified       Shift           AltGr            Shift+AltGr
    // symbols row, left side
    key <TLDE> { [ dollar,          asciitilde,     dead_tilde                  ] };
    key <AE01> { [ ampersand,       percent                                     ] };
    key <AE02> { [ bracketleft,     7,              currency                    ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <AE03> { [ braceleft,       5,              cent                        ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <AE04> { [ braceright,      3,              yen                         ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <AE05> { [ parenleft,       1,              EuroSign                    ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <AE06> { [ equal,           9,              sterling                    ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };

    // symbols row, right side
    key <AE07> { [ asterisk,        0                                           ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <AE08> { [ parenright,      2,              onehalf                     ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <AE09> { [ plus,            4                                           ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <AE10> { [ bracketright,    6                                           ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <AE11> { [ exclam,          8,              exclamdown,      U2E18      ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };  // reversed interrobang
    key <AE12> { [ numbersign,      grave,          dead_grave                  ] };
    key <BKSP> { [ BackSpace,       BackSpace                                   ] };

    // upper row, left side
    key <AD01> { [ semicolon,       colon,          dead_diaeresis              ] };
    key <AD02> { [ comma,           less,           guillemotleft,   U201C      ] };
    key <AD03> { [ period,          greater,        guillemotright,  U201D      ] };
    key <AD04> { [ p,               P,              paragraph,       section    ] };
    key <AD05> { [ y,               Y,              udiaeresis,      Udiaeresis ] };

    // upper row, right side
    key <AD08> { [ c,               C,              ccedilla,        Ccedilla   ] };
    key <AD09> { [ r,               R,              registered,      trademark  ] };
    key <AD11> { [ slash,           question,       questiondown,    U203D      ] };  // interrobang
    key <AD12> { [ at,              asciicircum,    dead_circumflex, dead_caron ] };

    // home row, left side
    key <AC01> { [ a,               A,              aring,           Aring      ] };
    key <AC02> { [ o,               O,              oslash,          Ooblique   ] };
    key <AC03> { [ e,               E,              ae,              AE         ] };
    key <AC04> { [ u,               U,              eacute,          Eacute     ] };

    // home row, right side
    key <AC06> { [ d,               D,              eth,             ETH        ] };
    key <AC07> { [ h,               H,              dead_acute                  ] };
    key <AC08> { [ t,               T,              thorn,           THORN      ] };
    key <AC09> { [ n,               N,              ntilde,          Ntilde     ] };
    key <AC10> { [ s,               S,              ssharp,          U1E9E      ] };
    key <AC11> { [ minus,           underscore,     hyphen,          endash     ], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
    key <BKSL> { [ backslash,       bar                                         ] };

    // lower row, left side
    key <AB01> { [ apostrophe,      quotedbl,       dead_acute                  ] };

    // do NOT hardcode this switch; use lv3:ralt_switch option instead!
    //include "level3(ralt_switch)"
};

// phonetic layout for Russian letters on an US keyboard
// by Ivan Popov <pin@konvalo.org> 2005-07-17

// level3 modifier is a shortcut to the "us" meaning of the keys where
// we place cyrillic letters, handy for accessing the corresponding
// punctuation marks.
// It is important to have access to punctuation marks, and the rest of
// alphabetical keys are added for being consequent so that the users
// can expect the level3 modifier to give what the key label shows.

partial alphanumeric_keys
xkb_symbols "rus" {

    include "us(basic)"
    name[Group1]= "Russian (US, phonetic)";

key.type[group1]="FOUR_LEVEL_ALPHABETIC";

    key	<LatA> {	[ Cyrillic_a, Cyrillic_A ]	};
    key	<LatB> {	[ Cyrillic_be, Cyrillic_BE ]	};
    key	<LatW> {	[ Cyrillic_ve, Cyrillic_VE ]	};
    key	<LatG> {	[ Cyrillic_ghe, Cyrillic_GHE ]	};
    key	<LatD> {	[ Cyrillic_de, Cyrillic_DE ]	};
    key	<LatE> {	[ Cyrillic_ie, Cyrillic_IE ]	};
    key	<TLDE> {	[ Cyrillic_io, Cyrillic_IO, grave, asciitilde ] };
    key	<LatV> {	[ Cyrillic_zhe, Cyrillic_ZHE ]	};
    key	<LatZ> {	[ Cyrillic_ze, Cyrillic_ZE ]	};
    key	<LatI> {	[ Cyrillic_i, Cyrillic_I ]	};
    key	<LatJ> {	[ Cyrillic_shorti, Cyrillic_SHORTI ]	};
    key	<LatK> {	[ Cyrillic_ka, Cyrillic_KA ]	};
    key	<LatL> {	[ Cyrillic_el, Cyrillic_EL ]	};
    key	<LatM> {	[ Cyrillic_em, Cyrillic_EM ]	};
    key	<LatN> {	[ Cyrillic_en, Cyrillic_EN ]	};
    key	<LatO> {	[ Cyrillic_o, Cyrillic_O ]	};
    key	<LatP> {	[ Cyrillic_pe, Cyrillic_PE ]	};
    key	<LatR> {	[ Cyrillic_er, Cyrillic_ER ]	};
    key	<LatS> {	[ Cyrillic_es, Cyrillic_ES ]	};
    key	<LatT> {	[ Cyrillic_te, Cyrillic_TE ]	};
    key	<LatU> {	[ Cyrillic_u, Cyrillic_U ]	};
    key	<LatF> {	[ Cyrillic_ef, Cyrillic_EF ]	};
    key	<LatH> {	[ Cyrillic_ha, Cyrillic_HA ]	};
    key	<LatC> {	[ Cyrillic_tse, Cyrillic_TSE ]	};
    key <AC10> {        [ Cyrillic_che, Cyrillic_CHE, semicolon, colon ] };
    key	<AD11> {	[ Cyrillic_sha, Cyrillic_SHA, bracketleft, braceleft] };
    key	<AD12> {	[ Cyrillic_shcha, Cyrillic_SHCHA, bracketright, braceright ]	};
    key <AE12> {        [ Cyrillic_hardsign, Cyrillic_HARDSIGN, equal, plus ] };
    key	<LatY> {	[ Cyrillic_yeru, Cyrillic_YERU ]	};
    key	<LatX> {	[ Cyrillic_softsign, Cyrillic_SOFTSIGN ]	};
    key	<BKSL> {	[ Cyrillic_e, Cyrillic_E, backslash, bar ]	};
    key <AC11> {        [ Cyrillic_yu, Cyrillic_YU, apostrophe, quotedbl ] };
    key	<LatQ> {	[ Cyrillic_ya, Cyrillic_YA ]	};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "mac" {

    name[Group1]= "English (Macintosh)";

    key.type[group1]="FOUR_LEVEL";

    // Slightly improvised from http://homepage.mac.com/thgewecke/kblayout.jpg
    key <LSGT> { [   section,  plusminus,       section,        plusminus ] };
    key <TLDE> { [     grave, asciitilde,    dead_grave,        dead_horn ] };
    key <AE01> { [	   1,     exclam,    exclamdown,            U2044 ] };
    key <AE02> { [	   2,         at,     trademark,         EuroSign ] };
    key <AE03> { [	   3, numbersign,      sterling,            U2039 ] };
    key <AE04> { [	   4,     dollar,          cent,            U203A ] };
    key <AE05> { [	   5,    percent,      infinity,            UFB01 ] };
    key <AE06> { [         6,asciicircum,       section,            UFB02 ] };
    key <AE07> { [	   7,  ampersand,     paragraph,     doubledagger ] };
    key <AE08> { [	   8,   asterisk, enfilledcircbullet,      degree ] };
    key <AE09> { [	   9,  parenleft,   ordfeminine,   periodcentered ] };
    key <AE10> { [	   0, parenright,     masculine,singlelowquotemark] };
    key <AE11> { [     minus, underscore,        endash,           emdash ] };
    key <AE12> { [     equal,       plus,      notequal,        plusminus ] };

    key <AD01> { [	   q,          Q,            oe,               OE ] };
    key <AD02> { [	   w,          W,         U2211,doublelowquotemark] };
    key <AD03> { [	   e,          E,    dead_acute,            acute ] };
    key <AD04> { [	   r,          R,    registered,            U2030 ] };
    key <AD05> { [	   t,          T,        dagger,       dead_caron ] };
    key <AD06> { [	   y,          Y,           yen,       onequarter ] };
    key <AD07> { [	   u,        U,  dead_diaeresis,        diaeresis ] };
    key <AD08> { [	   i,        I, dead_circumflex,            U02C6 ] };
    key <AD09> { [	   o,          O,        oslash,         Ooblique ] };
    key <AD10> { [	   p,          P,      Greek_pi,            U220F ] };
    key <AD11> { [ bracketleft,  braceleft, leftdoublequotemark, rightdoublequotemark ] };
    key <AD12> { [bracketright, braceright, leftsinglequotemark, rightsinglequotemark ] };
    key <BKSL> { [ backslash,        bar, guillemotleft,   guillemotright ] };

    key <AC01> { [	   a,          A,         aring,            Aring ] };
    key <AC02> { [	   s,          S,        ssharp,      dead_stroke ] };
    key <AC03> { [	   d,          D, partialderivative,          eth ] };
    key <AC04> { [	   f,          F,      function,        dead_hook ] };
    key <AC05> { [	   g,          G,     copyright, dead_doubleacute ] };
    key <AC06> { [	   h,          H, dead_abovedot,    dead_belowdot ] };
    key <AC07> { [	   j,          J,         U2206,          onehalf ] };
    key <AC08> { [	   k,          K,dead_abovering,            UF8FF ] };
    key <AC09> { [	   l,          L,       notsign,            THORN ] };
    key <AC10> { [ semicolon,      colon,         U2026,            thorn ] };
    key <AC11> { [apostrophe,   quotedbl,            ae,               AE ] };

    key <AB01> { [	   z,          Z,   Greek_OMEGA,     dead_cedilla ] };
    key <AB02> { [	   x,          X,         U2248,      dead_ogonek ] };
				// unclear whether "approxeq" is 2248 or 2245
    key <AB03> { [	   c,          C,      ccedilla,         Ccedilla ] };
    key <AB04> { [	   v,          V,    squareroot,            U25CA ] };
    key <AB05> { [	   b,          B,      integral,         idotless ] };
    key <AB06> { [	   n,          N,    dead_tilde,            U02DC ] };
    key <AB07> { [	   m,          M,            mu,    threequarters ] };
    key <AB08> { [     comma,       less, lessthanequal,      dead_macron ] };
    key <AB09> { [    period,    greater, greaterthanequal,    dead_breve ] };
    key <AB10> { [     slash,   question,      division,     questiondown ] };

    include "level3(ralt_switch)"
};

// Colemak symbols for xkb on X.Org Server 7.x
// 2006-01-01 Shai Coleman, http://colemak.com/

partial alphanumeric_keys
xkb_symbols "colemak" {

    name[Group1]= "English (Colemak)";

    key <TLDE> { [        grave,   asciitilde,      dead_tilde,       asciitilde ] };
    key <AE01> { [            1,       exclam,      exclamdown,      onesuperior ] };
    key <AE02> { [            2,           at,       masculine,      twosuperior ] };
    key <AE03> { [            3,   numbersign,     ordfeminine,    threesuperior ] };
    key <AE04> { [            4,       dollar,            cent,         sterling ] };
    key <AE05> { [            5,      percent,        EuroSign,              yen ] };
    key <AE06> { [            6,  asciicircum,         hstroke,          Hstroke ] };
    key <AE07> { [            7,    ampersand,             eth,              ETH ] };
    key <AE08> { [            8,     asterisk,           thorn,            THORN ] };
    key <AE09> { [            9,    parenleft,  leftsinglequotemark,  leftdoublequotemark ] };
    key <AE10> { [            0,   parenright, rightsinglequotemark,  rightdoublequotemark ] };
    key <AE11> { [        minus,   underscore,          endash,           emdash ] };
    key <AE12> { [        equal,         plus,        multiply,         division ] };

    key <AD01> { [            q,            Q,      adiaeresis,       Adiaeresis ] };
    key <AD02> { [            w,            W,           aring,            Aring ] };
    key <AD03> { [            f,            F,          atilde,           Atilde ] };
    key <AD04> { [            p,            P,          oslash,         Ooblique ] };
    key <AD05> { [            g,            G,     dead_ogonek,       asciitilde ] };
    key <AD06> { [            j,            J,         dstroke,          Dstroke ] };
    key <AD07> { [            l,            L,         lstroke,          Lstroke ] };
    key <AD08> { [            u,            U,          uacute,           Uacute ] };
    key <AD09> { [            y,            Y,      udiaeresis,       Udiaeresis ] };
    key <AD10> { [    semicolon,        colon,      odiaeresis,       Odiaeresis ] };
    key <AD11> { [  bracketleft,    braceleft,   guillemotleft,        0x1002039 ] };
    key <AD12> { [ bracketright,   braceright,  guillemotright,        0x100203a ] };
    key <BKSL> { [    backslash,          bar,      asciitilde,       asciitilde ] };

    key <AC01> { [            a,            A,          aacute,           Aacute ] };
    key <AC02> { [            r,            R,      dead_grave,       asciitilde ] };
    key <AC03> { [            s,            S,          ssharp,        0x1001e9e ] };
    key <AC04> { [            t,            T,      dead_acute, dead_doubleacute ] };
    key <AC05> { [            d,            D,  dead_diaeresis,       asciitilde ] };
    key <AC06> { [            h,            H,      dead_caron,       asciitilde ] };
    key <AC07> { [            n,            N,          ntilde,           Ntilde ] };
    key <AC08> { [            e,            E,          eacute,           Eacute ] };
    key <AC09> { [            i,            I,          iacute,           Iacute ] };
    key <AC10> { [            o,            O,          oacute,           Oacute ] };
    key <AC11> { [   apostrophe,     quotedbl,          otilde,           Otilde ] };

    key <AB01> { [            z,            Z,              ae,               AE ] };
    key <AB02> { [            x,            X, dead_circumflex,       asciitilde ] };
    key <AB03> { [            c,            C,        ccedilla,         Ccedilla ] };
    key <AB04> { [            v,            V,              oe,               OE ] };
    key <AB05> { [            b,            B,      dead_breve,       asciitilde ] };
    key <AB06> { [            k,            K,  dead_abovering,       asciitilde ] };
    key <AB07> { [            m,            M,     dead_macron,       asciitilde ] };
    key <AB08> { [        comma,         less,    dead_cedilla,       asciitilde ] };
    key <AB09> { [       period,      greater,   dead_abovedot,       asciitilde ] };
    key <AB10> { [        slash,     question,    questiondown,       asciitilde ] };

    key <CAPS> { [    BackSpace,    BackSpace,       BackSpace,        BackSpace ] };
    key <LSGT> { [        minus,   underscore,          endash,           emdash ] };
    key <SPCE> { [        space,        space,           space,     nobreakspace ] };

    include "level3(ralt_switch)"
};

// I do NOT like dead-keys - the International keyboard as defined by Microsoft
// does not fit my needs. Why use two keystrokes for all simple characters (eg '
// and <space> generates a single ') just to have an é (eacute) in two strokes
// as well? I type ' more often than é (eacute).
//
// This file works just like a regular keyboard, BUT has all dead-keys
// accessible at level3 (through AltGr). An ë (ediaeresis) is now: AltGr+"
// followed by an e. In other words, this keyboard is not international as long
// as you leave the right Alt key alone.
//
// The original MS International keyboard was intended for Latin1 (iso8859-1).
// With the introduction of iso8859-15, the (important) ligature oe (and OE)
// became available. I added them next to ae. Because I write ediaeresis more
// often than registered, I moved registered to be next to copyright and added
// ediaeresis and idiaeresis. - Adriaan

partial alphanumeric_keys
xkb_symbols "altgr-intl" {

   include "us(intl)"
   name[Group1]= "English (intl., with AltGr dead keys)";

// five dead keys moved into level3:

   key <TLDE> { [    grave, asciitilde,  dead_grave,   dead_tilde      ] };
   key <AC11> { [apostrophe,quotedbl,    dead_acute,   dead_diaeresis  ] };

// diversions from the MS Intl keyboard:

   key <AE01> { [        1, exclam,      onesuperior,  exclamdown      ] };
   key <AD04> { [        r, R,           ediaeresis,   Ediaeresis      ] };
   key <AC07> { [        j, J,           idiaeresis,   Idiaeresis      ] };
   key <AB02> { [        x, X,           oe,           OE              ] };
   key <AB04> { [        v, V,           registered,   registered      ] };

// onequarter etc (not in iso8859-15) moved to get three unshifted deadkeys:

   key <AE06> { [        6, asciicircum, dead_circumflex, onequarter    ] };
   key <AE07> { [        7, ampersand,   dead_horn,       onehalf       ] };
   key <AE08> { [        8, asterisk,    dead_ogonek,     threequarters ] };

   include "level3(ralt_switch)"
};

// Intel ClassmatePC Keyboard Layout
// by Piter PUNK <piterpk@terra.com.br>
//
// The keyboard layouts below maps the us(basic), us(intl) and us(alt-intl)
// to ClassmatePC keyboard. All layouts uses RCTL as level3(switch) since
// the keyboard does not have AltGr key. The EuroSign is engraved at 5 key.

// classmate - us(basic)
partial alphanumeric_keys
xkb_symbols "classmate" {
    include "us(basic)"
    name[Group1]= "English (US)";

    key <LSGT> { [ backslash,	bar,		backslash,	bar ] };

    include "eurosign(5)"
    include "level3(switch)"
};

// classmate-intl - us(intl)
// RCTL is generated by Fn+Alt, because of that, when trying to access
// the level3 symbols at 7,8,9,0, u,i,o,p, j,k,l,;, and m,.,/, we get
// the keypad keycodes. The keypad is changed to make Fn+Alt+<KP_key>
// generate the same symbol as the original key.
partial alphanumeric_keys
xkb_symbols "classmate-intl" {
    include "us(intl)"
    name[Group1]= "USA - ClassmatePC (International)";
    key.type[Group1]="FOUR_LEVEL";

    key <LSGT> { [ backslash,   bar,         backslash,            bar            ] };

    key <KP7>  { [ KP_Home,     KP_7,        onehalf,              dead_horn      ] };
    key <KP8>  { [ KP_Up,       KP_8,        threequarters,        dead_ogonek    ] };
    key <KP9>  { [ KP_Prior,    KP_9,        leftsinglequotemark,  dead_breve     ] };
    key <KPMU> { [ KP_Multiply, KP_Multiply, rightsinglequotemark, dead_abovering ] };

    key <KP4>  { [ KP_Left,     KP_4,        uacute,               Uacute         ] };
    key <KP5>  { [ KP_Begin,    KP_5,        iacute,               Iacute         ] };
    key <KP6>  { [ KP_Right,    KP_6,        oacute,               Oacute         ] };
    key <KPSU> { [ KP_Subtract, KP_Subtract, odiaeresis,           Odiaeresis     ] };

    key <KP2>  { [ KP_Down,     KP_2,        oe,                   OE             ] };
    key <KP3>  { [ KP_Next,     KP_3,        oslash,               Ooblique       ] };
    key <KPAD> { [ KP_Add,      KP_Add,      paragraph,            degree         ] };

    key <KP0>  { [ KP_Insert,   KP_0,        mu,                   mu             ] };
    key <KPDL> { [ KP_Delete,   KP_Decimal,  dead_abovedot,        dead_caron     ] };
    key <KPDV> { [ KP_Divide,   KP_Divide,   questiondown,         dead_hook      ] };

    include "level3(switch)"
};

// classmate-alt-intl - us(alt-intl)
// RCTL is generated by Fn+Alt, because of that, when trying to access
// the level3 symbols at 7,8,9,0, u,i,o,p, j,k,l,;, and m,.,/, we get
// the keypad keycodes. The keypad is changed to make Fn+Alt+<KP_key>
// generate the same symbol as the original key.
partial alphanumeric_keys
xkb_symbols "classmate-alt-intl" {
    include "us(alt-intl)"
    name[Group1]= "USA - ClassmatePC (Alternative international)";
    key.type[Group1]="FOUR_LEVEL";

    key <LSGT> { [ backslash,   bar,         backslash,            bar            ] };

    key <KPSU> { [ KP_Subtract, KP_Subtract  ] };

    key <KP9>  { [ KP_Prior,    KP_9,        leftsinglequotemark,  dead_breve     ] };
    key <KPMU> { [ KP_Multiply, KP_Multiply, rightsinglequotemark, dead_abovering ] };

    key <KPAD> { [ KP_Add,      KP_Add,      dead_ogonek,          dead_diaeresis ] };

    key <KPDL> { [ KP_Delete,   KP_Decimal,  dead_abovedot,        dead_circumflex] };
    key <KPDV> { [ KP_Divide,   KP_Divide,   dead_hook,            dead_hook      ] };

    include "level3(switch)"
};

// classmate-altgr-intl - us(altgr-intl)
// RCTL is generated by Fn+Alt, because of that, when trying to access
// the level3 symbols at 7,8,9,0, u,i,o,p, j,k,l,;, and m,.,/, we get
// the keypad keycodes. The keypad is changed to make Fn+Alt+<KP_key>
// generate the same symbol as the original key.
partial alphanumeric_keys
xkb_symbols "classmate-altgr-intl" {
    include "us(altgr-intl)"
    name[Group1]= "USA - ClassmatePC (International Fn+Alt dead-keys)";
    key.type[Group1]="FOUR_LEVEL";

    key <LSGT> { [ backslash,   bar,         backslash,            bar            ] };

    key <KP7>  { [ KP_Home,     KP_7,        dead_horn,            dead_horn      ] };
    key <KP8>  { [ KP_Up,       KP_8,        dead_ogonek,          dead_ogonek    ] };
    key <KP9>  { [ KP_Prior,    KP_9,        leftsinglequotemark,  dead_breve     ] };
    key <KPMU> { [ KP_Multiply, KP_Multiply, rightsinglequotemark, dead_abovering ] };

    key <KP4>  { [ KP_Left,     KP_4,        uacute,               Uacute         ] };
    key <KP5>  { [ KP_Begin,    KP_5,        iacute,               Iacute         ] };
    key <KP6>  { [ KP_Right,    KP_6,        oacute,               Oacute         ] };
    key <KPSU> { [ KP_Subtract, KP_Subtract, odiaeresis,           Odiaeresis     ] };

    key <KP1>  { [ KP_End,      KP_1,        idiaeresis,           Idiaeresis     ] };
    key <KP2>  { [ KP_Down,     KP_2,        oe,                   OE             ] };
    key <KP3>  { [ KP_Next,     KP_3,        oslash,               Ooblique       ] };
    key <KPAD> { [ KP_Add,      KP_Add,      paragraph,            degree         ] };

    key <KP0>  { [ KP_Insert,   KP_0,        mu,                   mu             ] };
    key <KPDL> { [ KP_Delete,   KP_Decimal,  dead_abovedot,        dead_caron     ] };
    key <KPDV> { [ KP_Divide,   KP_Divide,   questiondown,         dead_hook      ] };

    include "level3(switch)"
};

partial alphanumeric_keys
xkb_symbols "olpc" {

   include "us(basic)"
   name[Group1]= "English (US)";

   // OLPC international US English keyboard layout.
   // It's a little different from the usual international layout.
   // See: http://wiki.laptop.org/go/Image:Keyboard_english.png

   key <TLDE> { [     grave, asciitilde,    dead_grave, dead_tilde ] };
   key <AE01> { [         1,     exclam,    exclamdown, exclamdown ] };
   key <AE02> { [         2,         at,       notsign,    notsign ] };
   key <AE03> { [         3, numbersign,     0x1000300,  0x1000300 ] }; // combining grave
   key <AE04> { [         4,     dollar,     0x1000301,  0x1000301 ] }; // combining acute
   key <AE05> { [         5,    percent,     0x1000306,  0x1000306 ] }; // combining breve above
   key <AE06> { [         6,asciicircum,     0x100030A,  0x100030A ] }; // combining ring above
   key <AE07> { [         7,  ampersand,     0x1000302,  0x1000302 ] }; // combining circumflex above
   key <AE08> { [         8,   asterisk,     0x100030C,  0x100030C ] }; // combining caron above
   key <AE09> { [         9,  parenleft,     0x1000307,  0x1000307 ] }; // combining dot above
   key <AE10> { [         0, parenright,     0x1000308,  0x1000308 ] }; // combining diaeresis above
   key <AE11> { [     minus, underscore,     0x1000304,  0x1000304 ] }; // combining macron above
   key <AE12> { [     equal,       plus,     0x1000303,  0x1000303 ] }; // combining tilde above

   key <AD01> { [         q,          Q,  Greek_omega, Greek_OMEGA ] };
   key <AD02> { [         w,          W,       oslash,      Oslash ] };
   key <AD03> { [         e,          E,           oe,          OE ] };
   key <AD04> { [         r,          R,    0x1000327,   0x1000327 ] }; // combining cedilla
   key <AD05> { [         t,          T,    0x100032E,   0x100032E ] }; // combining breve below
   key <AD06> { [         y,          Y,    0x1000325,   0x1000325 ] }; // combining ring below
   key <AD07> { [         u,          U,    0x100032D,   0x100032D ] }; // combining circumflex below
   key <AD08> { [         i,          I,    0x100032C,   0x100032C ] }; // combining caron below
   key <AD09> { [         o,          O,    0x1000323,   0x1000323 ] }; // combining dot below
   key <AD10> { [         p,          P,    0x1000324,   0x1000324 ] }; // combining diaeresis below
   key <AD11> { [ bracketleft,  braceleft,  0x1000331,   0x1000331 ] }; // combining macron below
   key <AD12> { [bracketright, braceright,  0x1000330,   0x1000330 ] }; // combining tilde below

   key <AC01>  { [         a,          A,          ae,               AE ] };
   key <AC02>  { [         s,          S,      ssharp,        0x1001E9E ] }; // uppercase S sharp
   key <AC03>  { [         d,          D,         eth,              ETH ] };
   key <AC04>  { [         f,          F,       thorn,            THORN ] };
   key <AC06>  { [         h,          H,    sterling,         sterling ] };
   key <AC07>  { [         j,          J,    EuroSign,         EuroSign ] };
   key <AC10>  { [ semicolon,      colon,   masculine,      ordfeminine ] };
   key <AC11>  { [ apostrophe,  quotedbl,    currency,         currency ] };
   key <AC12>  { [ backslash,        bar,      section,         section ] };

   key <AB03>  { [         c,          C,    ccedilla,         Ccedilla ] };
   key <AB06>  { [         n,          N,      ntilde,           Ntilde ] };
   key <AB07>  { [         m,          M,          mu,               mu ] };
   key <AB08>  { [     comma,     less,  guillemotleft,   guillemotleft ] };
   key <AB09>  { [    period,  greater, guillemotright,  guillemotright ] };
   key <AB10>  { [     slash,   question, questiondown,    questiondown ] };

   key <I219>  { [  multiply,   division, ISO_Next_Group, ISO_Prev_Group ] };

   include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "olpc2" {
   include "us(olpc)"
   name[Group1]= "English (the divide/multiply toggle the layout)";
   include "group(olpc)"
};

xkb_symbols "olpcm" {

   include "us(basic)"
   name[Group1]= "English (US)";

   // Mechanical (non-membrane) OLPC int'l US English keyboard layout.
   // See: http://wiki.laptop.org/go/OLPC_English_Non-membrane_Keyboard

   key <TLDE> { [     grave, asciitilde,    dead_grave, dead_tilde ] };
   key <AE01> { [         1,     exclam,    exclamdown, exclamdown ] };
   key <AE02> { [         2,         at,       notsign,    notsign ] };
   key <AE03> { [         3, numbersign,     0x1000300,  0x1000300 ] }; // combining grave
   key <AE04> { [         4,     dollar,     0x1000301,  0x1000301 ] }; // combining acute
   key <AE05> { [         5,    percent,     0x1000306,  0x1000306 ] }; // combining breve above
   key <AE06> { [         6,asciicircum,     0x100030A,  0x100030A ] }; // combining ring above
   key <AE07> { [         7,  ampersand,     0x1000302,  0x1000302 ] }; // combining circumflex above
   key <AE08> { [         8,   asterisk,     0x100030C,  0x100030C ] }; // combining caron above
   key <AE09> { [         9,  parenleft,     0x1000307,  0x1000307 ] }; // combining dot above
   key <AE10> { [         0, parenright,     0x1000308,  0x1000308 ] }; // combining diaeresis above
   key <AE11> { [     minus, underscore,     0x1000304,  0x1000304 ] }; // combining macron above

   key <AD01> { [         q,          Q,  Greek_omega, Greek_OMEGA ] };
   key <AD02> { [         w,          W,       oslash,      Oslash ] };
   key <AD03> { [         e,          E,           oe,          OE ] };
   key <AD04> { [         r,          R,    0x1000327,   0x1000327 ] }; // combining cedilla
   key <AD05> { [         t,          T,    0x100032E,   0x100032E ] }; // combining breve below
   key <AD06> { [         y,          Y,    0x1000325,   0x1000325 ] }; // combining ring below
   key <AD07> { [         u,          U,    0x100032D,   0x100032D ] }; // combining circumflex below
   key <AD08> { [         i,          I,    0x100032C,   0x100032C ] }; // combining caron below
   key <AD09> { [         o,          O,    0x1000323,   0x1000323 ] }; // combining dot below
   key <AD10> { [         p,          P,    0x1000324,   0x1000324 ] }; // combining diaeresis below
   key <AD11> { [ bracketleft,  braceleft,  0x1000331,   0x1000331 ] }; // combining macron below
   key <AD12> { [bracketright, braceright,  0x1000330,   0x1000330 ] }; // combining tilde below

   key <AC01>  { [         a,          A,          ae,               AE ] };
   key <AC02>  { [         s,          S,      ssharp,        0x1001E9E ] }; // uppercase S sharp
   key <AC03>  { [         d,          D,         eth,              ETH ] };
   key <AC04>  { [         f,          F,       thorn,            THORN ] };
   key <AC06>  { [         h,          H,    sterling,         sterling ] };
   key <AC07>  { [         j,          J,    EuroSign,         EuroSign ] };
   key <AC10>  { [ semicolon,      colon,   masculine,      ordfeminine ] };
   // no AC11 or AC12 on olpcm

   key <AB03>  { [         c,          C,    ccedilla,         Ccedilla ] };
   key <AB06>  { [         n,          N,      ntilde,           Ntilde ] };
   key <AB07>  { [         m,          M,          mu,               mu ] };
   key <AB08>  { [     comma,     less,  guillemotleft,   guillemotleft ] };
   key <AB09>  { [    period,  greater, guillemotright,  guillemotright ] };
   key <AB10>  { [     slash,   question, questiondown,    questiondown ] };

   key <AA02>  { [ backslash,        bar,      section,         section ] };
   key <AA06>  { [     equal,       plus,     0x1000303,  0x1000303 ] };
   key <AA07>  { [ apostrophe,  quotedbl,    currency,         currency ] };

   include "level3(ralt_switch)"
};

// Based on Cherokee Nation Official Layout
// http://www.cherokee.org/extras/downloads/font/Keyboard.htm

partial alphanumeric_keys modifier_keys
xkb_symbols "chr" {

    name[Group1]= "Cherokee";
    key.type[group1]="ALPHABETIC";

    key <TLDE> { [      grave,      U13CA ] };
    key <AE01> { [          1,      U13B1 ] };
    key <AE02> { [          2,      U13C7 ] };
    key <AE03> { [          3,      U13E7 ] };
    key <AE04> { [      U13D9,      U13B0 ] };
    key <AE05> { [      U13E6,      U13B9 ] };
    key <AE06> { [      U13DC,      U13DD ] };
    key <AE07> { [      U13CB,      U13E1 ] };
    key <AE08> { [      U13D6,      U13BA ] };
    key <AE09> { [      U13D2,  parenleft ] };
    key <AE10> { [      U13C4, parenright ] };
    key <AE11> { [      U13BF,      U13BC ] };
    key <AE12> { [      U13F3,      U13BD ] };

    key <AD01> { [      U13AA,      U13C6 ] };
    key <AD02> { [      U13B3,      U13EB ] };
    key <AD03> { [      U13A1,      U13E3 ] };
    key <AD04> { [      U13DB,      U13CF ] };
    key <AD05> { [      U13D4,      U13D8 ] };
    key <AD06> { [      U13EF,      U13F2 ] };
    key <AD07> { [      U13A4,      U13AD ] };
    key <AD08> { [      U13A2,      U13F1 ] };
    key <AD09> { [      U13A3,      U13EC ] };
    key <AD10> { [      U13C1,      U13EA ] };
    key <AD11> { [      U13D5,      U13D1 ] };
    key <AD12> { [      U13B6,      U13E4 ] };
    key <BKSL> { [      U13E9,      U13EE ] };

    key <AC01> { [      U13A0,      U13CC ] };
    key <AC02> { [      U13CD,      U13CE ] };
    key <AC03> { [      U13D7,      U13D0 ] };
    key <AC04> { [      U13A9,      U13C8 ] };
    key <AC05> { [      U13A6,      U13E5 ] };
    key <AC06> { [      U13AF,      U13B2 ] };
    key <AC07> { [      U13DA,      U13AB ] };
    key <AC08> { [      U13B8,      U13A7 ] };
    key <AC09> { [      U13B5,      U13AE ] };
    key <AC10> { [      U13E8,      U13E0 ] };
    key <AC11> { [ apostrophe,   quotedbl ] };

    key <AB01> { [      U13AC,      U13C3 ] };
    key <AB02> { [      U13F4,      U13ED ] };
    key <AB03> { [      U13D3,      U13DF ] };
    key <AB04> { [      U13A5,      U13DE ] };
    key <AB05> { [      U13A8,      U13F0 ] };
    key <AB06> { [      U13BE,      U13BB ] };
    key <AB07> { [      U13C5,      U13B7 ] };
    key <AB08> { [      comma,      U13E2 ] };
    key <AB09> { [     period,      U13B4 ] };
    key <AB10> { [      U13C2,      U13C9 ] };
};

// Add Hawaiian `okina and kahako to US layout
// Author: Greg Meyer <gregory.meyer@gmail.com>, 2020
// this mapping follows the one for Windows here: http://www.olelo.hawaii.edu/enehana/winkbd.php
// `okina replaces apostrophe (apostrophe moves to level 3)
// vowels with kahako (macron) are level 3 symbols
partial alphanumeric_keys
xkb_symbols "haw"  {

    include "us(basic)"
    name[Group1] = "Hawaiian";

    // `okina replaces single apostrophe
    // alt gives the literal apostrophe
    key <AC11> {[ U02BB, quotedbl, apostrophe ] };

    // kahako
    key <AC01> {[ a, A, amacron, Amacron ]};
    key <AD03> {[ e, E, emacron, Emacron ]};
    key <AD07> {[ u, U, umacron, Umacron ]};
    key <AD08> {[ i, I, imacron, Imacron ]};
    key <AD09> {[ o, O, omacron, Omacron ]};

    include "level3(ralt_switch)"
};

// Serbian charecters added as third level symbols to US keyboard layout.

partial alphanumeric_keys
xkb_symbols "hbs" {

  include "us"
  name[Group1]= "Serbo-Croatian (US)";

  key <TLDE> { [ grave, asciitilde ] };
  key <AE06> { [ 6, dead_caron, asciicircum, asciicircum ] };
  key <AE08> { [ 8, asterisk, multiply, division ] };
  key <AE11> { [ minus, underscore, endash, emdash ] };
  key <AC09> { [ l, L, U1C9, U1C8 ] };
  key <AB06> { [ n, N, U1CC, U1CB ] };
  key <AB01> { [ z, Z, U1C6, U1C5 ] };
  key <AD03> { [ e, E, EuroSign, cent ] };
  key <AC03> { [ d, D, dstroke, Dstroke ] };
  key <AC11> { [ dead_acute, quotedbl, apostrophe, apostrophe ] };
  key <SPCE> { [ space, space, nobreakspace, nobreakspace ] };
  key <AB08> { [ comma, less, U3003, guillemotright ] };
  key <AB09> { [ period, greater, ellipsis, guillemotleft ] };

  include "level3(ralt_switch)"
};

// Workman Keyboard Layout symbols for xkb on X.Org Server 7.x
// 09-06-2010 OJ Bucao. http://www.workmanlayout.com

partial alphanumeric_keys
xkb_symbols "workman" {

    include "us(basic)"
    name[Group1]= "English (Workman)";

    key <AD01> {  [   q,  Q   ] };
    key <AD02> {  [   d,  D   ] };
    key <AD03> {  [   r,  R   ] };
    key <AD04> {  [   w,  W   ] };
    key <AD05> {  [   b,  B   ] };
    key <AD06> {  [   j,  J   ] };
    key <AD07> {  [   f,  F   ] };
    key <AD08> {  [   u,  U   ] };
    key <AD09> {  [   p,  P   ] };
    key <AD10> {  [   semicolon,  colon   ] };

    key <AC01> {  [   a,  A   ] };
    key <AC02> {  [   s,  S   ] };
    key <AC03> {  [   h,  H   ] };
    key <AC04> {  [   t,  T   ] };
    key <AC05> {  [   g,  G   ] };
    key <AC06> {  [   y,  Y   ] };
    key <AC07> {  [   n,  N   ] };
    key <AC08> {  [   e,  E   ] };
    key <AC09> {  [   o,  O   ] };
    key <AC10> {  [   i,  I   ] };

    key <AB01> {  [   z,  Z   ] };
    key <AB02> {  [   x,  X   ] };
    key <AB03> {  [   m,  M   ] };
    key <AB04> {  [   c,  C   ] };
    key <AB05> {  [   v,  V   ] };
    key <AB06> {  [   k,  K   ] };
    key <AB07> {  [   l,  L   ] };

    key <CAPS> { [    BackSpace,       Escape,       BackSpace,        BackSpace ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "workman-intl" {

    include "us(intl)"
    name[Group1]= "English (Workman, intl., with dead keys)";

    key <AD01> { [     q,          Q,    adiaeresis,       Adiaeresis ] };
    key <AD02> { [     d,          D,           eth,              ETH ] };
    key <AD03> { [     r,          R,    registered,       registered ] };
    key <AD04> { [     w,          W,         aring,            Aring ] };
    key <AD05> { [     b,          B,             b,                B ] };
    key <AD06> { [     j,          J,             j,                J ] };
    key <AD07> { [     f,          F,             f,                F ] };
    key <AD08> { [     u,          U,        uacute,           Uacute ] };
    key <AD09> { [     p,          P,    odiaeresis,       Odiaeresis ] };
    key <AD10> { [ semicolon,  colon,     paragraph,           degree ] };

    key <AC01> { [     a,          A,        aacute,           Aacute ] };
    key <AC02> { [     s,          S,        ssharp,          section ] };
    key <AC03> { [     h,          H,             h,                H ] };
    key <AC04> { [     t,          T,         thorn,            THORN ] };
    key <AC05> { [     g,          G,             g,                G ] };
    key <AC06> { [     y,          Y,    udiaeresis,       Udiaeresis ] };
    key <AC07> { [     n,          N,        ntilde,           Ntilde ] };
    key <AC08> { [     e,          E,        eacute,           Eacute ] };
    key <AC09> { [     o,          O,        oacute,           Oacute ] };
    key <AC10> { [     i,          I,        iacute,           Iacute ] };

    key <AB01> { [     z,          Z,            ae,               AE ] };
    key <AB02> { [     x,          X,             x,                X ] };
    key <AB03> { [     m,          M,            mu,               mu ] };
    key <AB04> { [     c,          C,     copyright,             cent ] };
    key <AB05> { [     v,          V,             v,                V ] };
    key <AB06> { [     k,          K,            oe,               OE ] };
    key <AB07> { [     l,          L,        oslash,         Ooblique ] };

    key <CAPS> { [ BackSpace, Escape,     BackSpace,        BackSpace ] };

    include "level3(ralt_switch)"
};

// Norman keyboard layout symbols for xkb on X.Org Server 7.x
// Written 11/23/2012, revised 3/7/2013 by David Norman http://normanlayout.info
// To the extent possible under law, the author(s) have dedicated all
// copyright and related and neighboring rights to this software to the
// public domain worldwide. This software is distributed without any warranty.

partial alphanumeric_keys
xkb_symbols "norman" {

    include "us(basic)"
    name[Group1]= "English (Norman)";

    key <AD01> { [ q, Q ] };
    key <AD02> { [ w, W ] };
    key <AD03> { [ d, D ] };
    key <AD04> { [ f, F ] };
    key <AD05> { [ k, K ] };
    key <AD06> { [ j, J ] };
    key <AD07> { [ u, U ] };
    key <AD08> { [ r, R ] };
    key <AD09> { [ l, L ] };
    key <AD10> { [ semicolon, colon ] };

    key <AC01> { [ a, A ] };
    key <AC02> { [ s, S ] };
    key <AC03> { [ e, E ] };
    key <AC04> { [ t, T ] };
    key <AC05> { [ g, G ] };
    key <AC06> { [ y, Y ] };
    key <AC07> { [ n, N ] };
    key <AC08> { [ i, I ] };
    key <AC09> { [ o, O ] };
    key <AC10> { [ h, H ] };

    key <AB01> { [ z, Z ] };
    key <AB02> { [ x, X ] };
    key <AB03> { [ c, C ] };
    key <AB04> { [ v, V ] };
    key <AB05> { [ b, B ] };
    key <AB06> { [ p, P ] };
    key <AB07> { [ m, M ] };

    key <CAPS> { [ BackSpace ] };

    include "level3(ralt_switch)"
};

// Carpalx layout created by Martin Krzywinski
// http://mkweb.bcgsc.ca/carpalx/

partial alphanumeric_keys
xkb_symbols "carpalx" {

    name[Group1]= "English (Carpalx)";

    key <TLDE> {	[     grave,	asciitilde	]	};
    key <AE01> {	[	  1,	exclam 		]	};
    key <AE02> {	[	  2,	at		]	};
    key <AE03> {	[	  3,	numbersign	]	};
    key <AE04> {	[	  4,	dollar		]	};
    key <AE05> {	[	  5,	percent		]	};
    key <AE06> {	[	  6,	asciicircum	]	};
    key <AE07> {	[	  7,	ampersand	]	};
    key <AE08> {	[	  8,	asterisk	]	};
    key <AE09> {	[	  9,	parenleft	]	};
    key <AE10> {	[	  0,	parenright	]	};
    key <AE11> {	[     minus,	underscore	]	};
    key <AE12> {	[     equal,	plus		]	};

    key <AD01> {	[	  q,	Q 		]	};
    key <AD02> {	[	  g,	G		]	};
    key <AD03> {	[	  m,	M		]	};
    key <AD04> {	[	  l,	L		]	};
    key <AD05> {	[	  w,	W		]	};
    key <AD06> {	[	  y,	Y		]	};
    key <AD07> {	[	  f,	F		]	};
    key <AD08> {	[	  u,	U		]	};
    key <AD09> {	[	  b,	B		]	};
    key <AD10> {	[ semicolon,	colon		]	};
    key <AD11> {	[ bracketleft,	braceleft	]	};
    key <AD12> {	[ bracketright,	braceright	]	};

    key <AC01> {	[	  d,	D 		]	};
    key <AC02> {	[	  s,	S		]	};
    key <AC03> {	[	  t,	T		]	};
    key <AC04> {	[	  n,	N		]	};
    key <AC05> {	[	  r,	R		]	};
    key <AC06> {	[	  i,	I		]	};
    key <AC07> {	[	  a,	A		]	};
    key <AC08> {	[	  e,	E		]	};
    key <AC09> {	[	  o,	O		]	};
    key <AC10> {	[	  h,	H		]	};
    key <AC11> {	[ apostrophe,	quotedbl	]	};

    key <AB01> {	[	  z,	Z 		]	};
    key <AB02> {	[	  x,	X		]	};
    key <AB03> {	[	  c,	C		]	};
    key <AB04> {	[	  v,	V		]	};
    key <AB05> {	[	  j,	J		]	};
    key <AB06> {	[	  k,	K		]	};
    key <AB07> {	[	  p,	P		]	};
    key <AB08> {	[     comma,	less		]	};
    key <AB09> {	[    period,	greater		]	};
    key <AB10> {	[     slash,	question	]	};

    key <BKSL> {	[ backslash,         bar	]	};
};

// Carpalx layout created by Martin Krzywinski
// http://mkweb.bcgsc.ca/carpalx/
// Merged with us(intl) and modified to move
// accented vowels closer to the plain vowels

partial alphanumeric_keys
xkb_symbols "carpalx-intl" {

    name[Group1]= "English (Carpalx, intl., with dead keys)";

    key <TLDE> { [dead_grave, dead_tilde,         grave,       asciitilde ] };
    key <AE01> { [	   1,     exclam,    exclamdown,      onesuperior ] };
    key <AE02> { [	   2,         at,   twosuperior, dead_doubleacute ] };
    key <AE03> { [	   3, numbersign, threesuperior,      dead_macron ] };
    key <AE04> { [	   4,     dollar,      currency,         sterling ] };
    key <AE05> { [	   5,    percent,      EuroSign,     dead_cedilla ] };
    key <AE06> { [    6, dead_circumflex,    onequarter,      asciicircum ] };
    key <AE07> { [	   7,  ampersand,       onehalf,	dead_horn ] };
    key <AE08> { [	   8,   asterisk, threequarters,      dead_ogonek ] };
    key <AE09> { [	   9,  parenleft, leftsinglequotemark, dead_breve ] };
    key <AE10> { [	   0, parenright, rightsinglequotemark, dead_abovering ] };
    key <AE11> { [     minus, underscore,           yen,    dead_belowdot ] };
    key <AE12> { [     equal,       plus,      multiply,         division ] };

    key <AD01> { [	   q,          Q,        degree,        paragraph ] };
    key <AD02> { [	   g,          G,         U011F,            U011E ] };
    key <AD03> { [	   m,          M,            mu,               mu ] };
    key <AD04> { [	   l,          L,     copyright,             cent ] };
    key <AD05> { [	   w,          W,             w,                W ] };
    key <AD06> { [	   y,          Y,    idiaeresis,       Idiaeresis ] };
    key <AD07> { [	   f,          F,    adiaeresis,       Adiaeresis ] };
    key <AD08> { [	   u,          U,    udiaeresis,       Udiaeresis ] };
    key <AD09> { [	   b,          B,    odiaeresis,       Odiaeresis ] };
    key <AD10> { [ semicolon,      colon,        oslash,         Ooblique ] };
    key <AD11> { [ bracketleft,  braceleft,  guillemotleft, leftdoublequotemark ] };
    key <AD12> { [bracketright, braceright, guillemotright, rightdoublequotemark ] };

    key <AC01> { [	   d,          D,           eth,              ETH ] };
    key <AC02> { [	   s,          S,        ssharp,          section ] };
    key <AC03> { [	   t,          T,         thorn,            THORN ] };
    key <AC04> { [	   n,          N,        ntilde,           Ntilde ] };
    key <AC05> { [	   r,          R,    registered,       registered ] };
    key <AC06> { [	   i,          I,        iacute,           Iacute ] };
    key <AC07> { [	   a,          A,        aacute,           Aacute ] };
    key <AC08> { [	   e,          E,        eacute,           Eacute ] };
    key <AC09> { [	   o,          O,        oacute,           Oacute ] };
    key <AC10> { [	   h,          H,        uacute,           Uacute ] };
    key <AC11> { [dead_acute, dead_diaeresis, apostrophe,        quotedbl ] };

    key <AB01> { [	   z,          Z,             z,                Z ] };
    key <AB02> { [	   x,          X,         U015F,            U015E ] };
    key <AB03> { [	   c,          C,      ccedilla,         Ccedilla ] };
    key <AB04> { [	   v,          V,            ae,               AE ] };
    key <AB05> { [	   j,          J,            oe,               OE ] };
    key <AB06> { [	   k,          K,         U0131,            U0130 ] };
    key <AB07> { [	   p,          P,         aring,            Aring ] };
    key <AB08> { [     comma,       less,    ediaeresis,       Ediaeresis ] };
    key <AB09> { [    period,    greater, dead_abovedot,       dead_caron ] };
    key <AB10> { [     slash,   question,  questiondown,        dead_hook ] };
    key <BKSL> { [ backslash,        bar,       notsign,        brokenbar ] };

    key <LSGT> { [ backslash,   bar,            backslash,      bar ] };

    include "level3(ralt_switch)"
};

// Carpalx layout created by Martin Krzywinski
// http://mkweb.bcgsc.ca/carpalx/
// Merged with us(intl) and us(altgr-intl) and modified to move
// accented vowels closer to the plain vowels

partial alphanumeric_keys
xkb_symbols "carpalx-altgr-intl" {

   include "us(carpalx-intl)"
   name[Group1]= "English (Carpalx, intl., with AltGr dead keys)";

   key <TLDE> { [    grave, asciitilde,  dead_grave,   dead_tilde      ] };
   key <AC11> { [apostrophe,quotedbl,    dead_acute,   dead_diaeresis  ] };

   key <AE01> { [        1, exclam,      onesuperior,  exclamdown      ] };

   key <AE06> { [        6, asciicircum, dead_circumflex, onequarter    ] };
   key <AE07> { [        7, ampersand,   dead_horn,       onehalf       ] };
   key <AE08> { [        8, asterisk,    dead_ogonek,     threequarters ] };

   include "level3(ralt_switch)"
};

// Carpalx layout created by Martin Krzywinski
// Full optimization variant without fixed QWERTY-like ZXCV keys
// http://mkweb.bcgsc.ca/carpalx/

partial alphanumeric_keys
xkb_symbols "carpalx-full" {

    include "us(carpalx)"
    name[Group1]= "English (Carpalx, full optimization)";

    key <AD06> {	[	  b,	B		]	};
    key <AD07> {	[	  y,	Y		]	};
    key <AD09> {	[	  v,	V		]	};

    key <AB04> {	[	  f,	F		]	};
};

// Carpalx layout created by Martin Krzywinski
// Full optimization variant without fixed QWERTY-like ZXCV keys
// http://mkweb.bcgsc.ca/carpalx/
// Merged with us(intl) and modified to move
// accented vowels closer to the plain vowels

partial alphanumeric_keys
xkb_symbols "carpalx-full-intl" {

    include "us(carpalx-intl)"
    name[Group1]= "English (Carpalx, full optimization, intl., with dead keys)";

    key <AD06> { [	   b,          B,    idiaeresis,       Idiaeresis ] };
    key <AD07> { [	   y,          Y,    adiaeresis,       Adiaeresis ] };
    key <AD09> { [	   v,          V,    odiaeresis,       Odiaeresis ] };

    key <AB04> { [	   f,          F,            ae,               AE ] };
};

// Carpalx layout created by Martin Krzywinski
// Full optimization variant without fixed QWERTY-like ZXCV keys
// http://mkweb.bcgsc.ca/carpalx/
// Merged with us(intl) and us(altgr-intl) and modified to move
// accented vowels closer to the plain vowels

partial alphanumeric_keys
xkb_symbols "carpalx-full-altgr-intl" {

   include "us(carpalx-altgr-intl)"
   name[Group1]= "English (Carpalx, full optimization, intl., with AltGr dead keys)";

    key <AD06> { [	   b,          B,    idiaeresis,       Idiaeresis ] };
    key <AD07> { [	   y,          Y,    adiaeresis,       Adiaeresis ] };
    key <AD09> { [	   v,          V,    odiaeresis,       Odiaeresis ] };

    key <AB04> { [	   f,          F,            ae,               AE ] };
};

// US Symbolic
// Author: Daniele Baisero <daniele.baisero@gmail.com>
// Based on the default keyboard map from 'symbols/us', edited for scientific literature.
// Added simple Greek letters to alphas, and common symbols everywhere else.
// TLDE and BKSL are AltGr-inverse, to facilitate placement of ESC over TLDE on 60% keyboards.
// LGST (Iso Key) contains rarely used floor and ceiling brackets.
partial alphanumeric_keys modifier_keys
xkb_symbols "symbolic" {

 name[Group1]= "English (US, Symbolic)";

 key <TLDE> { [ grave, asciitilde,  backslash,     bar            ] }; // ` ~ \ |
 key <AE01> { [ 1,     exclam,      onesuperior,   notsign        ] }; // 1 ! ¹ ¬
 key <AE02> { [ 2,     at,          twosuperior,   therefore      ] }; // 2 @ ² ∴
 key <AE03> { [ 3,     numbersign,  threesuperior, sterling       ] }; // 3 # ³ £
 key <AE04> { [ 4,     dollar,      foursuperior,  EuroSign       ] }; // 4 $ ⁴ €
 key <AE05> { [ 5,     percent,     fivesuperior,  U2030          ] }; // 5 % ⁵ ‰
 key <AE06> { [ 6,     asciicircum, sixsuperior,   squareroot     ] }; // 6 ^ ⁶ √
 key <AE07> { [ 7,     ampersand,   sevensuperior, section        ] }; // 7 & ⁷ §
 key <AE08> { [ 8,     asterisk,    eightsuperior, infinity       ] }; // 8 * ⁸ ∞
 key <AE09> { [ 9,     parenleft,   ninesuperior,  periodcentered ] }; // 9 ( ⁹ ·
 key <AE10> { [ 0,     parenright,  zerosuperior,  degree         ] }; // 0 ) ⁰ °
 key <AE11> { [ minus, underscore,  notequal,      plusminus      ] }; // - _ ≠ ±
 key <AE12> { [ equal, plus,        multiply,      division       ] }; // = + × ÷

 key <AD01> { [ q,            Q,          U2200,         U2203         ] }; // q Q ∀ ∃
 key <AD02> { [ w,            W,          elementof,     notelementof  ] }; // w W ∈ ∉
 key <AD03> { [ e,            E,          Greek_epsilon, Greek_EPSILON ] }; // e E ε Ε
 key <AD04> { [ r,            R,          Greek_rho,     Greek_RHO     ] }; // p P ρ Ρ
 key <AD05> { [ t,            T,          Greek_tau,     Greek_TAU     ] }; // t T τ Τ
 key <AD06> { [ y,            Y,          Greek_upsilon, Greek_UPSILON ] }; // y Y υ Υ
 key <AD07> { [ u,            U,          Greek_theta,   Greek_THETA   ] }; // u U θ Θ
 key <AD08> { [ i,            I,          Greek_iota,    Greek_IOTA    ] }; // i I ι Ι
 key <AD09> { [ o,            O,          Greek_omicron, Greek_OMICRON ] }; // o O ο Ο
 key <AD10> { [ p,            P,          Greek_pi,      Greek_PI      ] }; // p P π Π
 key <AD11> { [ bracketleft,  braceleft,  union,         intersection  ] }; // [ { ∪ ∩
 key <AD12> { [ bracketright, braceright, includedin,    includes      ] }; // ] } ⊂ ⊃

 key <AC01> { [ a,          A,        Greek_alpha, Greek_ALPHA ] }; // a A α Α
 key <AC02> { [ s,          S,        Greek_sigma, Greek_SIGMA ] }; // s S σ Σ
 key <AC03> { [ d,          D,        Greek_delta, Greek_DELTA ] }; // d D δ Δ
 key <AC04> { [ f,          F,        Greek_phi,   Greek_PHI   ] }; // f F φ Φ
 key <AC05> { [ g,          G,        Greek_gamma, Greek_GAMMA ] }; // g G γ Γ
 key <AC06> { [ h,          H,        Greek_eta,   Greek_ETA   ] }; // h H η Η
 key <AC07> { [ j,          J,        Greek_xi,    Greek_XI    ] }; // j J ξ Ξ
 key <AC08> { [ k,          K,        Greek_kappa, Greek_KAPPA ] }; // k K κ Κ
 key <AC09> { [ l,          L,        Greek_lamda, Greek_LAMDA ] }; // l L λ Λ
 key <AC10> { [ semicolon,  colon,    downarrow,   uparrow     ] }; // ; : ↓ ↑
 key <AC11> { [ apostrophe, quotedbl, rightarrow,  leftarrow   ] }; // ' " → ←

 key <AB01> { [ z,      Z,        Greek_zeta,       Greek_ZETA     ] }; // z Z ζ Ζ
 key <AB02> { [ x,      X,        Greek_chi,        Greek_CHI      ] }; // x X χ Χ
 key <AB03> { [ c,      C,        Greek_psi,        Greek_PSI      ] }; // c C ψ Ψ
 key <AB04> { [ v,      V,        Greek_omega,      Greek_OMEGA    ] }; // v V ω Ω
 key <AB05> { [ b,      B,        Greek_beta,       Greek_BETA     ] }; // b B β Β
 key <AB06> { [ n,      N,        Greek_nu,         Greek_NU       ] }; // n N ν Ν
 key <AB07> { [ m,      M,        Greek_mu,         Greek_MU       ] }; // m M μ Μ
 key <AB08> { [ comma,  less,     lessthanequal,    guillemotleft  ] }; // , < ≤ «
 key <AB09> { [ period, greater,  greaterthanequal, guillemotright ] }; // . > ≥ »
 key <AB10> { [ slash,  question, U203D,            U2766          ] }; // / ? ‽ ❦

 key <BKSL> { [ backslash, bar,   grave, asciitilde ] }; // \ | ` ~
 key <LSGT> { [ U230A,     U230B, U2308, U2309      ] }; // ⌊ ⌋ ⌈ ⌉

 include "level3(ralt_switch)"
};

// EXTRAS:

// Czech, Slovak and German charecters added as third level symbols to US keyboard layout.
partial alphanumeric_keys
xkb_symbols "cz_sk_de" {

    include "us"
    name[Group1]="Czech Slovak and German (US)";

    key <TLDE>  { [grave,   asciitilde, uring,      Uring       ] };
    key <AE01>	{ [    1,	exclam,	uacute,	    Uacute	] };
    key <AE02>	{ [    2,           at, ecaron,	    Ecaron	] };
    key <AE03>	{ [    3,   numbersign, scaron,	    Scaron	] };
    key <AE04>	{ [    4,       dollar,	ccaron,	    Ccaron	] };
    key <AE05>	{ [    5,      percent, rcaron,	    Rcaron	] };
    key <AE06>	{ [    6,  asciicircum, zcaron,	    Zcaron	] };
    key <AE07>	{ [    7,    ampersand,	yacute,	    Yacute	] };
    key <AE08>	{ [    8,     asterisk, aacute,	    Aacute	] };
    key <AE09>	{ [    9,    parenleft,	iacute,	    Iacute	] };
    key <AE10>	{ [    0,   parenright, eacute,	    Eacute	] };
    key <AE11>	{ [minus,   underscore, ssharp,     0x1001E9E	] };
    key <AE12>	{ [equal,	  plus, dead_acute, dead_caron  ] };

    key <AD03>	{ [         e,          E,     EuroSign,     Eacute ]	};

    key <AD11>	{ [bracketleft, braceleft,   udiaeresis,   Udiaeresis ]	};
    key <AC10>	{ [ semicolon,      colon,   odiaeresis,   Odiaeresis ]	};
    key <AC11>	{ [apostrophe,      quotedbl,adiaeresis,   Adiaeresis ]	};

    key <AC01>	{ [         a,          A,     aacute,	     Aacute   ]	};
    key <AD08>	{ [         i,          I,     iacute,	     Iacute   ]	};
    key <AD09>	{ [         o,          O,     oacute,       Oacute   ]	};
    key <AD06>	{ [         y,          Y,     yacute,       Yacute   ]	};
    key <AD07>	{ [         u,          U,     uring,	     Uring    ]	};

    key <AC02>	{ [         s,          S,     scaron,       Scaron   ]	};
    key <AB01>	{ [         z,          Z,     zcaron,	     Zcaron   ]	};
    key <AB03>	{ [         c,          C,     ccaron,       Ccaron   ]	};
    key <AD04>	{ [         r,          R,     rcaron,	     Rcaron   ]	};
    key <AD05>	{ [         t,          T,     tcaron,	     Tcaron   ]	};
    key <AC03>	{ [         d,          D,     dcaron,	     Dcaron   ]	};
    key <AB06>	{ [         n,          N,     ncaron,	     Ncaron   ]	};
    key <AC09>  { [         l,          L,     lcaron,       Lcaron   ] };
    key <AD10>  { [         p,          P,ocircumflex,  Ocircumflex   ] };

    key <SPCE>  { [     space,       space, nobreakspace, nobreakspace] };

    include "level3(ralt_switch)"
};

// 03 December 2017 - Added us(scn), please refer to
//                    Cadèmia Siciliana <l10n@cademiasiciliana.org>
partial alphanumeric_keys
xkb_symbols "scn" {

    include "us(intl)"
    name[Group1]="Sicilian (US keyboard)";

    key <AD03> { [      e,       E, U0259,       U018F ] };
    key <AC03> { [      d,       D, U1E0D,       U1E0C ] };
    key <AC04> { [      f,       F, U0111,       U0110 ] };
    key <AC06> { [      h,       H, U1E25,       U1E24 ] };
    key <AB02> { [      x,       X, U03C7,       U03A7 ] };
    key <AB09> { [ period, greater, U1D58,  dead_caron ] };

    include "level3(ralt_switch)"
};

// XCompose is out! Unicode combining is in!  For those of us who live
// on the edge: A keymap using Unicode combining characters instead of
// deadkeys.  This variation does not deviate from the lame MS-style
// US-intl layout; but it uses AltGr for combining, like altgr-intl.
//
// This might break your font layout systems (because they suck),
// caveat emptor.  Also, most of today's software will count
// individual combining marks for selection, deletion, character
// counting &c., and won't be smart enough to do canonical equivalence
// when searching, &c.
//
// With Unicode combining you use "handwriting order", not
// "typewriting order" as with deadkeys.  That is, you first type the
// base character, then the diacritics/accents/modifiers.  This has
// the advantage of avoiding hidden states --- each keypress changes
// something on screen.
//
// TODO: as of now, this duplicates all us(intl) functionality with
// combining.  With care, perhaps we could add more combining marks
// not present in intl, and support all major languages.
partial alphanumeric_keys
xkb_symbols "intl-unicode" {

 include "us(intl)"
 include "level3(ralt_switch)"

 name[Group1]= "English (US, intl., AltGr Unicode combining)";

 key <TLDE> { [ grave, asciitilde, U0300, U0303 ] }; // grave, tilde
 key <AE02> { [ 2, at, twosuperior, U030B ] }; // double acute
 key <AE03> { [ 3, numbersign, threesuperior, U0304 ] }; // macron
 key <AE06> { [ 6, asciicircum, onequarter, U0302 ] }; // circumflex
 key <AE07> { [ 7, ampersand, onehalf, U031B ] }; // horn
 key <AE08> { [ 8, asterisk, threequarters, U0328 ] }; // ogonek
 key <AE09> { [ 9, parenleft, leftsinglequotemark, U0306 ] }; // breve
 key <AE10> { [ 0, parenright, rightsinglequotemark, U030A ] }; // abovering

 key <AE11> { [ minus, underscore, yen, U0323 ] }; // belowdot
 key <AC11> { [ apostrophe, quotedbl, U0301, U0308 ] }; // acute, diaeresis
 key <AB09> { [ period, greater, U0307, U030C ] }; // abovedot, caron
 key <AB10> { [ slash, question, questiondown, U0309 ] }; // hook

 // alt-intl compatibility
 key <AB08> { [ comma, less, U0327, U030C ] }; // cedilla, caron
 key <AC10> { [ semicolon, colon, U0328, U0308 ] }; // ogonek, diaeresis
 key <AE12> { [ equal, plus, U030B, U031B ] }; // doubleacute, horn

 // We don't do combining latin letters and combining enclosures,
 // because support for those is very rare.
};

// XCompose is out! Unicode combining is in! For those of us who live
// on the edge: A keymap using Unicode combining characters instead of
// deadkeys. This variation does break compatibility with us-intl,
// whenever I thought it would be more mnemonic or Unicodeish.
partial alphanumeric_keys
xkb_symbols "alt-intl-unicode" {

 include "us(intl-unicode)"

 name[Group1]= "English (US, intl., AltGr Unicode combining, alt.)";

 // easier macron; em-dash.
 // em-dash is available via compose, but I added here since it's such
 // an important typographic character.
 key <AE11> { [ minus, underscore, U0304, U2014 ] };

 // belowdot, abovedot (caron at coma/less key, per above)
 key <AB09> { [ period, greater, U0323, U0307 ] };
};

partial alphanumeric_keys
xkb_symbols "ats" {

    include "us"
    name[Group1]= "Atsina";

    //Using Dead key to get COMBINING COMMA ABOVE for ejectives on
    //q, l, t, s, m, g, k, p, w, y, r
    //XCompose key is used for the other accute and grave.

    key <AD03> { [ e, E, eacute, Eacute  ] };
    key <AD07> { [ u, U, uacute, Uacute  ] };
    key <AD08> { [ i, I, iacute, Iacute  ] };
    key <AD09> { [ o, O, oacute, Oacute  ] };
    key <AD11> { [ bracketleft,	braceleft, U03B8 ] };
    key <AD12> { [ bracketright, braceright, U010D, U010C ] };
    //U+010C (uppercase Č) and U+010D (lowercase č).

    key <AC01> { [ a, A, aacute, Aacute  ] };

    //Small letter Open use compose to key get acute accent
    key <AB03> { [ c,	C, U0254, U0186		  ] };
    key <AB08> { [ comma,     less, U0313 ] };
    key <AB10> { [ slash, question, U0294 ] };

    include "level3(ralt_switch)"
    include "compose(rctrl)"
};

partial alphanumeric_keys
xkb_symbols "crd" {

  include "us"
  name[Group1]= "Coeur d'Alene Salish";

  key <AD02> { [         w,           W, U02B7, U02B7 ] };
  key <AE07> { [         7,   ampersand, U0294        ] };
  key <AD01> { [         q,           Q, U221A        ] };
  key <AB04> { [         v,           V, U0259        ] };
  key <BKSL> { [ backslash,         bar, U026B        ] };
  key <AD03> { [         e,           E, U025B        ] };
  key <AD08> { [         i,           I, U026A        ] };
  key <AC07> { [         j,           J, U01F0        ] };
  key <AE06> { [         6, asciicircum, U0295        ] };
  key <AC02> { [         s,           S, U0161        ] };
  key <AB03> { [         c,           C, U010D        ] };
  key <AD09> { [         o,           O, U0254        ] };
  key <AB09> { [    period,     greater, U0323        ] };

  include "level3(ralt_switch)"
  include "compose(rctrl)"
};


partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/us(sun_type6)"
};

// Implementation of the 3l keyboard layout
// See https://github.com/jackrosenthal/threelayout for specification
partial alphanumeric_keys modifier_keys
xkb_symbols "3l" {
    name[Group1] = "English (3l)";

    key.type[Group1] = "ONE_LEVEL";
    key <TAB> { [ Escape ] };
    key <CAPS> { [ Tab ] };
    key <AC11> { [ ISO_Level3_Shift ] }; // Sym Modifier
    key <AB10> { [ ISO_Level5_Shift ] }; // Cur/Num Modifier

    // Top row numbers - not part of spec, but given for convenience
    key <AE01> { [ 1 ] };
    key <AE02> { [ 2 ] };
    key <AE03> { [ 3 ] };
    key <AE04> { [ 4 ] };
    key <AE05> { [ 5 ] };
    key <AE06> { [ 6 ] };
    key <AE07> { [ 7 ] };
    key <AE08> { [ 8 ] };
    key <AE09> { [ 9 ] };
    key <AE10> { [ 0 ] };

    // Main keys
    // Order of mods (defined by EIGHT_LEVEL_SEMIALPHABETIC) is:
    //           [ None,      Shift,     Sym,          Shift+Sym,      Num,       Shift+Num,  Sym+Num,  Shift+Sym+Num ]
    key.type[Group1] = "EIGHT_LEVEL_SEMIALPHABETIC";

    // Second row
    key <AD01> { [ q,         Q,         quotedbl,     Greek_omicron,  Prior,     Prior,      U21CD,    Greek_OMICRON ] };
    key <AD02> { [ f,         F,         underscore,   Greek_phi,      BackSpace, BackSpace,  U21A4,    Greek_PHI ] };
    key <AD03> { [ u,         U,         bracketleft,  Greek_upsilon,  Up,        Up,         U2191,    Greek_UPSILON ] };
    key <AD04> { [ y,         Y,         bracketright, Greek_psi,      Delete,    Delete,     U21A6,    Greek_PSI ] };
    key <AD05> { [ z,         Z,         asciicircum,  Greek_zeta,     Next,      Next,       U21CF,    Greek_ZETA ] };
    key <AD06> { [ x,         X,         exclam,       Greek_xi,       NoSymbol,  NoSymbol,   U2260,    Greek_XI ] };
    key <AD07> { [ k,         K,         less,         Greek_kappa,    1,         A,          U2A7D,    Greek_KAPPA ] };
    key <AD08> { [ c,         C,         greater,      Greek_chi,      2,         B,          U2A7E,    Greek_CHI ] };
    key <AD09> { [ w,         W,         equal,        Greek_omega,    3,         C,          U2261,    Greek_OMEGA ] };
    key <AD10> { [ b,         B,         ampersand,    Greek_beta,     NoSymbol,  NoSymbol,   U2248,    Greek_BETA ] };

    // Home row
    key <AC01> { [ o,         O,         slash,        Greek_omega,    Home,      Home,       U21D0,    Greek_OMEGA ] };
    key <AC02> { [ h,         H,         minus,        Greek_theta,    Left,      Left,       U2190,    Greek_THETA ] };
    key <AC03> { [ e,         E,         braceleft,    Greek_epsilon,  Down,      Down,       U2193,    Greek_EPSILON ] };
    key <AC04> { [ a,         A,         braceright,   Greek_alpha,    Right,     Right,      U2192,    Greek_ALPHA ] };
    key <AC05> { [ i,         I,         asterisk,     Greek_iota,     End,       End,        U21D2,    Greek_IOTA ] };
    key <AC06> { [ d,         D,         question,     Greek_delta,    period,    colon,      U2286,    Greek_DELTA ] };
    key <AC07> { [ r,         R,         parenleft,    Greek_rho,      4,         D,          U2227,    Greek_RHO ] };
    key <AC08> { [ t,         T,         parenright,   Greek_tau,      5,         E,          U2228,    Greek_TAU ] };
    key <AC09> { [ n,         N,         apostrophe,   Greek_eta,      6,         F,          U2200,    Greek_ETA ] };
    key <AC10> { [ s,         S,         colon,        Greek_sigma,    NoSymbol,  NoSymbol,   U2203,    Greek_SIGMA ] };

    // Bottom row
    key <AB01> { [ comma,     comma,     numbersign,   NoSymbol,       slash,     NoSymbol,   U21AE,    NoSymbol ] };
    key <AB02> { [ m,         M,         dollar,       Greek_mu,       asterisk,  NoSymbol,   U2194,    Greek_MU ] };
    key <AB03> { [ period,    period,    bar,          NoSymbol,       minus,     NoSymbol,   U21CE,    NoSymbol ] };
    key <AB04> { [ j,         J,         asciitilde,   Greek_SIGMA,    plus,      NoSymbol,   U21D4,    NoSymbol ] };
    key <AB05> { [ semicolon, semicolon, grave,        NoSymbol,       comma,     NoSymbol,   U2282,    NoSymbol ] };
    key <AB06> { [ g,         G,         plus,         Greek_gamma,    0,         NoSymbol,   U2229,    Greek_GAMMA ] };
    key <AB07> { [ l,         L,         percent,      Greek_lambda,   7,         parenleft,  U222A,    Greek_LAMBDA ] };
    key <AB08> { [ p,         P,         backslash,    Greek_pi,       8,         parenright, U2208,    Greek_PI ] };
    key <AB09> { [ v,         V,         at,           Greek_nu,       9,         NoSymbol,   U2209,    Greek_NU ] };

    include "level5(modifier_mapping)"
};

// Chromebooks typically have the key which is normally in the caps
// lock position mapped to keycode 133 (LWIN). For 3l, it is critical
// that the key in this positon correspond to tab, so there is a
// variant available for chromebook hardware.
partial modifier_keys
xkb_symbols "3l-cros" {
    include "us(3l)"
    name[Group1] = "English (3l, Chromebook)";
    key <LWIN> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ Tab ]
    };
};

// A 3l variant for emacs users, which maps control to caps lock and (re)maps 
// tab back to tab.
partial modifier_keys
xkb_symbols "3l-emacs" {
    include "us(3l)"
    name[Group1] = "English (3l, emacs)";

    key <TAB> { [ Tab ] };
    key <CAPS> { [ Control_L ] };

    modifier_map Control { <CAPS> };
};

// Drix EU Latin - version 3.1 (2019-10-07)
// Author: Jerome Leclanche <jerome@leclan.ch>
// Latin layout based on classic US qwerty, with azerty-style second-row m key.
// Features:
// - Programmer-centric punctuation keys (All common symbols on right hand except < and > on left)
// - Most common dead accents on altgr-shift number row
// - Unicode arrows on Altgr+shift+WASD
// - Some commonly used special characters available:
//   - Most common european special characters
//   - Misc currency symbols, copyright/registered/trademark symbols
//   - Common math symbols + some common greek letters
// - Compose key replaces Mod5
//
// This layout is in the Public Domain.
//
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ~ ~ │ " ´ │ ' ` │ ^ ^ │ ` ¨ │ ´ ° │ 6 ¯ │ 7 ¸ │ 8 ˛ │ 9 ˇ │ | ˝ │ _ ± │ = ≠ ┃Backspace┃
// │ @ £ │ 1 ¹ │ 2 ² │ 3 ³ │ 4 ⁴ │ 5 ⁵ │ 6 ⁶ │ 7 ⁷ │ 8 ⁸ │ 9 ⁹ │ 0 ⁰ │ - " │ + ' ┃ ⌫       ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃Tab    ┃ Q Ø │ W ↑ │ E € │ R ₽ │ T τ │ Y ¥ │ U U │ I ’ │ O Ω │ P ₱ │ [ « │ ] » ┃ ⏎     ┃
// ┃ ↹     ┃ q ø │ w w │ e € │ r ® │ t ™ │ y ¥ │ u u │ i ‘ │ o œ │ p π │ ( { │ ) } ┃ Enter ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃Caps    ┃ A ← │ S ↓ │ D → │ F Ƒ │ G G │ H H │ J ” │ K „ │ L λ │ M M │ % ‰ │ & × ┃      ┃
// ┃Lock  ⇬ ┃ a æ │ s ß │ d Δ │ f ƒ │ g g │ h h │ j “ │ k ‚ │ l £ │ m µ │ # ~ │ * $ ┃      ┃
// ┣━━━━━━┳━┹───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┬─┴───┲━┷━━━━━┻━━━━━━┫
// ┃Shift ┃ > ≥ │ Z ¶ │ X ÷ │ C ¢ │ V V │ B ₿ │ N N │ ? ¿ │ , · │ ; ´ │ \ ¦ ┃Shift         ┃
// ┃ ⇧    ┃ < ≤ │ z § │ x × │ c © │ v ♀ │ b ♂ │ n ⚥ │ ! ¡ │ . … │ : ` │ / | ┃ ⇧            ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴────┲┷━━━━━╈━━━━━┻┳━━━━━━┳━━━━━━┫
// ┃Ctrl   ┃ Fn    ┃Alt    ┃ ␣ Space            Nobreakspace ⍽ ┃AltGr ┃Multi ┃ Ctxt ┃ Ctrl ┃
// ┃       ┃       ┃       ┃ ␣ Space            Nobreakspace ⍽ ┃      ┃      ┃ Menu ┃      ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━┻━━━━━━┻━━━━━━┻━━━━━━┛

partial alphanumeric_keys modifier_keys
xkb_symbols "drix" {

	name[Group1] = "English (Drix)";

	// First row
	key <TLDE> {[ at,          asciitilde,     sterling,             dead_tilde            ]}; // @ ~ £ ~
	key <AE01> {[ 1,           quotedbl,       onesuperior,          dead_grave            ]}; // 1 " ¹ `
	key <AE02> {[ 2,           apostrophe,     twosuperior,          dead_acute            ]}; // 2 ' ² ´
	key <AE03> {[ 3,           asciicircum,    threesuperior,        dead_circumflex       ]}; // 3 ^ ³ ^
	key <AE04> {[ 4,           grave,          foursuperior,         dead_diaeresis        ]}; // 4 4 ⁴ ¨
	key <AE05> {[ 5,           degree,         fivesuperior,         dead_abovering        ]}; // 5 ° ⁵ °
	key <AE06> {[ 6,           6,              sixsuperior,          dead_macron           ]}; // 6 6 ⁶ ¯
	key <AE07> {[ 7,           7,              sevensuperior,        dead_cedilla          ]}; // 7 7 ⁷ ¸
	key <AE08> {[ 8,           8,              eightsuperior,        dead_ogonek           ]}; // 8 8 ⁸ ˛
	key <AE09> {[ 9,           9,              ninesuperior,         dead_caron            ]}; // 9 9 ⁹ ˇ
	key <AE10> {[ 0,           bar,            zerosuperior,         dead_doubleacute      ]}; // 0 | ⁰ ˝
	key <AE11> {[ minus,       underscore,     quotedbl,             plusminus             ]}; // - _ " ±
	key <AE12> {[ plus,        equal,          apostrophe,           notequal              ]}; // + = ' ≠

	// Second row
	key <AD01> {[ q,           Q,              oslash,               Ooblique              ]}; // q Q ø Ø
	key <AD02> {[ w,           W,              w,                    uparrow               ]}; // w W w ↑
	key <AD03> {[ e,           E,              EuroSign,             EuroSign              ]}; // e E € €
	key <AD04> {[ r,           R,              registered,           0x10020bd             ]}; // r R ® ₽
	key <AD05> {[ t,           T,              trademark,            Greek_tau             ]}; // t T ™ τ
	key <AD06> {[ y,           Y,              yen,                  yen                   ]}; // y Y ¥ ¥
	key <AD07> {[ u,           U,              u,                    U                     ]}; // u U u U
	key <AD08> {[ i,           I,              leftsinglequotemark,  rightsinglequotemark  ]}; // i I ‘ ’
	key <AD09> {[ o,           O,              oe,                   Greek_OMEGA           ]}; // o O œ Ω
	key <AD10> {[ p,           P,              Greek_pi,             0x10020b1             ]}; // p P π ₱
	key <AD11> {[ parenleft,   bracketleft,    braceleft,            guillemotleft         ]}; // ( [ { «
	key <AD12> {[ parenright,  bracketright,   braceright,           guillemotright        ]}; // ) ] } »

	// Third row
	key <AC01> {[ a,           A,              ae,                   leftarrow             ]}; // a A æ ←
	key <AC02> {[ s,           S,              ssharp,               downarrow             ]}; // s S ß ↓
	key <AC03> {[ d,           D,              Greek_DELTA,          rightarrow            ]}; // d D Δ →
	key <AC04> {[ f,           F,              0x1000192,            0x1000191             ]}; // f F ƒ Ƒ
	key <AC05> {[ g,           G,              g,                    G                     ]}; // g G g G
	key <AC06> {[ h,           H,              h,                    H                     ]}; // h H h H
	key <AC07> {[ j,           J,              leftdoublequotemark,  rightdoublequotemark  ]}; // j J “ ”
	key <AC08> {[ k,           K,              singlelowquotemark,   doublelowquotemark    ]}; // k K ‚ „
	key <AC09> {[ l,           L,              sterling,             Greek_lambda          ]}; // l L £ λ
	key <AC10> {[ m,           M,              mu,                   M                     ]}; // m M µ M
	key <AC11> {[ numbersign,  percent,        asciitilde,           0x1002030             ]}; // # % ~ ‰

	// Fourth row
	key <LSGT> {[ less,        greater,        lessthanequal,        greaterthanequal      ]}; // < > ≤ ≥
	key <AB01> {[ z,           Z,              section,              paragraph             ]}; // z Z § ¶
	key <AB02> {[ x,           X,              multiply,             division              ]}; // x X × ÷
	key <AB03> {[ c,           C,              copyright,            cent                  ]}; // c C © ¢
	key <AB04> {[ v,           V,              0x1002640,            V                     ]}; // v V ♀ V
	key <AB05> {[ b,           B,              0x1002642,            0x10020bf             ]}; // b B ♂ ₿
	key <AB06> {[ n,           N,              0x10026a5,            N                     ]}; // n N ⚥ N
	key <AB07> {[ exclam,      question,       exclamdown,           questiondown          ]}; // ! ? ¡ ¿
	key <AB08> {[ period,      comma,          0x1002026,            periodcentered        ]}; // . , … ·
	key <AB09> {[ colon,       semicolon,      grave,                acute                 ]}; // : ; ` ´
	key <AB10> {[ slash,       backslash,      bar,                  brokenbar             ]}; // / \ | ¦

	// Next to the enter key
	key <BKSL> {[ asterisk,    ampersand,      dollar,               multiply              ]}; // * & $ ×

	// Rebind right Super (windows key) into a Compose key
	key <RWIN> {[ Multi_key ]};

	// Implement AltGr and AltGr+Shift
	// For some reason, include "level3(ralt_switch)" doesn't do the trick.
	key <RALT> {
		type[Group1]="TWO_LEVEL",
		[ ISO_Level3_Shift, Multi_key ]
	};
};

// German and Swedish characters added as third level symbols to the US keyboard layout
// Author: Stephan Lachnit <stephanlachnit@protonmail.com>, 2019
// the german umlauts are placed over the characters without diaeresis, the sharp-s over the s
// the swedish ao is placed over the p, since it's closed to the position on a swedish keyboard
// the euro sign is placed over the e, as it is usual for german and swedish keyboards
partial alphanumeric_keys
xkb_symbols "de_se_fi"  {

    include "us(basic)"
    include "eurosign(e)"
    name[Group1] = "German, Swedish and Finnish (US)";

    key <AC01> {[ a,            A,          adiaeresis, Adiaeresis ]};
    key <AC02> {[ s,            S,          ssharp,     U1E9E      ]};
    key <AD01> {[ q,            Q,          at                     ]};
    key <AD07> {[ u,            U,          udiaeresis, Udiaeresis ]};
    key <AD09> {[ o,            O,          odiaeresis, Odiaeresis ]};
    key <AD10> {[ p,            P,          aring,      Aring      ]};
    key <AD12> {[ bracketright, braceright, asciitilde             ]};

    include "level3(ralt_switch)"
};
// Let Space key provide No-Break Space (NBSP), Narrow No-Break Space (NNBSP),
// Zero-Width Non-Joiner (ZWNJ), and Zero-Width Joiner (ZWJ) for the desired
// levels.


////////////////////////////////////////
// Only Space

partial
xkb_symbols "none" {
  key <SPCE> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1]= [ space ]
  };
};


////////////////////////////////////////
// No-Break Space

partial
xkb_symbols "level2" {
  key <SPCE> {
    type[Group1]="TWO_LEVEL",
    symbols[Group1]= [ space, nobreakspace ]
  };
};


// level3 & level3ns provide no-breaking spaces starting from level3
// This is good for typographers but experience shows many users accidently
// type no-breaking spaces on the CLI (resulting in errors)
// Used by fr(latin9) and lt(std)
partial
xkb_symbols "level3" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, space, nobreakspace ]
  };
};

// level3s kills fourth level
// Used by ca(multix)
partial
xkb_symbols "level3s" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, space, nobreakspace, NoSymbol ]
  };
};

// for this reason pushing no-breaking spaces to level4 is the safe default nowadays
partial
xkb_symbols "level4" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, space, space, nobreakspace ]
  };
};


////////////////////////////////////////
// Narrow No-Break Space

// level3n provides narrow no-breaking space in addition to the normal one
partial
xkb_symbols "level3n" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, space, nobreakspace, 0x100202F ]
  };
};

// level4n provides narrow no-breaking space in addition to the normal one
partial
xkb_symbols "level4n" {
 key <SPCE> {
   type[Group1]="EIGHT_LEVEL",
   symbols[Group1]= [ space, space, space, nobreakspace, space, 0x100202F, NoSymbol, NoSymbol ]
 };
};

// level4nl provides narrow no-breaking space in addition to the normal one
// without forcing the use of level5 for mostly four-level layouts
// Used by fr(oss), be(oss)…
partial
xkb_symbols "level4nl" {
 key <SPCE> {
   type[Group1]="LOCAL_EIGHT_LEVEL",
   symbols[Group1]= [ space, space, space, nobreakspace, space, 0x100202F, NoSymbol, NoSymbol ]
 };
};


////////////////////////////////////////
// Zero-Width Non-Joiner & Zero-Width Joiner
// Author: Behnam Esfahbod <behnam@esfahbod.info>

// ZWNJ and ZWJ are widely used in Persian, Kurdinsh, Pashto, Uzbek and other
// languages that use PersoArabic script.


// ZWNJ on level 2
partial
xkb_symbols "zwnj2" {
  key <SPCE> {
    type[Group1]="TWO_LEVEL",
    symbols[Group1]= [ space, 0x100200c ]
  };
};


// ZWNJ on level 2
// ZWJ on level 3
partial
xkb_symbols "zwnj2zwj3" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, 0x100200c, 0x100200d ]
  };
};


// ZWNJ on level 2
// ZWJ on level 3
// NBSP on level 4
partial
xkb_symbols "zwnj2zwj3nb4" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, 0x100200c, 0x100200d, nobreakspace ]
  };
};

// ZWNJ on level 2
// NBSP on level 3
// Used by ir(ku_ara), af(basic), af(ps), af(uz), af(olpc-fa), af(olpc-ps), af(olpc-uz)
partial
xkb_symbols "zwnj2nb3" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, 0x100200c, nobreakspace ]
  };
};


// ZWNJ on level 2
// NBSP on level 3
partial
xkb_symbols "zwnj2nb3s" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, 0x100200c, nobreakspace, NoSymbol ]
  };
};


// ZWNJ on level 2
// NBSP on level 3
// ZWJ on level 4
partial
xkb_symbols "zwnj2nb3zwj4" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, 0x100200c, nobreakspace, 0x100200d ]
  };
};


// ZWNJ on level 2
// NBSP on level 3
// NNBSP on level 4
// Used by ir(pes)
partial
xkb_symbols "zwnj2nb3nnb4" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, 0x100200c, nobreakspace, 0x100202F ]
  };
};


// ZWNJ on level 3
// ZWJ on level 4
// Used by in(deva), in(olpc)
partial
xkb_symbols "zwnj3zwj4" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, space, 0x100200c, 0x100200d ]
  };
};


// NBSP on level 2
// ZWNJ on level 3
// Used by lk(sin_phonetic)
partial
xkb_symbols "nb2zwnj3s" {
  key <SPCE> {
    type[Group1]="FOUR_LEVEL",
    symbols[Group1]= [ space, nobreakspace, 0x100200c, NoSymbol ]
  };
};
// The <KPDL> key is a mess.
// It was probably originally meant to be a decimal separator.
// Except since it was declared by USA people it didn't use the original
// SI separator "," but a "." (since then the USA managed to f-up the SI
// by making "." an accepted alternative, but standards still use "," as
// default)
// As a result users of SI-abiding countries expect either a "." or a ","
// or a "decimal_separator" which may or may not be translated in one of the
// above depending on applications.
// It's not possible to define a default per-country since user expectations
// depend on the conflicting choices of their most-used applications,
// operating system, etc. Therefore it needs to be a configuration setting
// Copyright © 2007 Nicolas Mailhot <nicolas.mailhot @ laposte.net>


// Legacy <KPDL> #1
// This assumes KP_Decimal will be translated in a dot
partial keypad_keys
xkb_symbols "dot" {

    key.type[Group1]="KEYPAD" ;

    key <KPDL> { [ KP_Delete, KP_Decimal ] }; // <delete> <separator>
};


// Legacy <KPDL> #2
// This assumes KP_Separator will be translated in a comma
partial keypad_keys
xkb_symbols "comma" {

    key.type[Group1]="KEYPAD" ;

    key <KPDL> { [ KP_Delete, KP_Separator ] }; // <delete> <separator>
};


// Period <KPDL>, usual keyboard serigraphy in most countries
partial keypad_keys
xkb_symbols "dotoss" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KPDL> { [ KP_Delete, period, comma, 0x100202F ] }; // <delete> . , ⍽ (narrow no-break space)
};


// Period <KPDL>, usual keyboard serigraphy in most countries, latin-9 restriction
partial keypad_keys
xkb_symbols "dotoss_latin9" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KPDL> { [ KP_Delete, period, comma, nobreakspace ] }; // <delete> . , ⍽ (no-break space)
};


// Comma <KPDL>, what most non anglo-saxon people consider the real separator
partial keypad_keys
xkb_symbols "commaoss" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KPDL> { [ KP_Delete, comma, period, 0x100202F ] }; // <delete> , . ⍽ (narrow no-break space)
};


// Momayyez <KPDL>: Bahrain, Iran, Iraq, Kuwait, Oman, Qatar, Saudi Arabia, Syria, UAE
partial keypad_keys
xkb_symbols "momayyezoss" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KPDL> { [ KP_Delete, 0x100066B, comma, 0x100202F ] }; // <delete> ? , ⍽ (narrow no-break space)
};


// Abstracted <KPDL>, pray everything will work out (it usually does not)
partial keypad_keys
xkb_symbols "kposs" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KPDL> { [ KP_Delete, KP_Decimal, KP_Separator, 0x100202F ] }; // <delete> ? ? ⍽ (narrow no-break space)
};

// Spreadsheets may be configured to use the dot as decimal
// punctuation, comma as a thousands separator and then semi-colon as
// the list separator. Of these, dot and semi-colon is most important
// when entering data by the keyboard; the comma can then be inferred
// and added to the presentation afterwards. Using semi-colon as a
// general separator may in fact be preferred to avoid ambiguities
// in data files. Most times a decimal separator is hard-coded, it
// seems to be period, probably since this is the syntax used in
// (most) programming languages.
partial keypad_keys
xkb_symbols "semi" {

    key.type[Group1]="FOUR_LEVEL_MIXED_KEYPAD" ;

    key <KPDL> { [ NoSymbol, NoSymbol, semicolon ] };
};
// Georgian Keyboard Layouts by Aiet Kolkhi <aietkolkhi@gmail.com>
// Full layout descriptions available at http://www.gakartuleba.org/layouts/
//
// This includes the following keyboard layouts: Georgian QWERTY; Georgian Ergonomic;
// Georgian MESS; Georgian AZERTY Tskapo; Georgian Russian.
//
// Layouts include Georgian Mkhedruli alphabeth; most layouts also include some special
// and ancient characters (like Fi, Yn, Elifi, Turned Gan and Ain). Layouts do not
// include Georgian Asomtavruli or Georgian Khutsuri alphabeths which are also present
// in Unicode.
//
// Georgian Typewriter no longer supported, as it is no longer used in Georgia.
//
// some layouts based on Georgian keyboard map, in the so called "latin" layout.
// 1999, Pablo Saratxaga <srtxg@chanae.alphanet.ch>
//

default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]= "Georgian";

    key <TLDE> { [ 0x0100201e, 0x0100201c, 0x0100201e, asciitilde ] };
    key <AE01> { [ 1,             exclam,        apostrophe    ] };
    key <AE02> { [ 2,             at,            0x0100201e    ] };
    key <AE03> { [ 3,             numbersign,    0x0100201c    ] };
    key <AE04> { [ 4,             dollar,        0x01002116    ] };
    key <AE05> { [ 5,             percent,       EuroSign      ] };
    key <AE06> { [ 6,             asciicircum                  ] };
    key <AE07> { [ 7,             ampersand,     section       ] };
    key <AE08> { [ 8,             asterisk,      degree        ] };
    key <AE09> { [ 9,             parenleft                    ] };
    key <AE10> { [ 0,             parenright                   ] };
    key <AE11> { [ minus,         underscore,    0x01002014    ] };
    key <AE12> { [ equal,         plus,          0x01002013    ] };

    key <AD01> { [ Georgian_khar, Q                            ] };
    key <AD02> { [ Georgian_cil,  Georgian_char                ] };
    key <AD03> { [ Georgian_en,   E,             Georgian_he   ] };
    key <AD04> { [ Georgian_rae,  Georgian_ghan, 0x010000ae    ] };
    key <AD05> { [ Georgian_tar,  Georgian_tan                 ] };
    key <AD06> { [ Georgian_qar,  Y,             0x010010f8    ] };
    key <AD07> { [ Georgian_un,   U                            ] };
    key <AD08> { [ Georgian_in,   I,             Georgian_hie  ] };
    key <AD09> { [ Georgian_on,   O                            ] };
    key <AD10> { [ Georgian_par,  P                            ] };
    key <AD11> { [ bracketleft,   braceleft                    ] };
    key <AD12> { [ bracketright,  braceright                   ] };

    key <AC01> { [ Georgian_an,   A,             0x010010fa    ] };
    key <AC02> { [ Georgian_san,  Georgian_shin                ] };
    key <AC03> { [ Georgian_don,  D                            ] };
    key <AC04> { [ Georgian_phar, F,             Georgian_fi   ] };
    key <AC05> { [ Georgian_gan,  G,             0x010010f9    ] };
    key <AC06> { [ Georgian_hae,  H,             Georgian_hoe  ] };
    key <AC07> { [ Georgian_jhan, Georgian_zhar, 0x010010f7    ] };
    key <AC08> { [ Georgian_kan,  K                            ] };
    key <AC09> { [ Georgian_las,  L                            ] };
    key <AC10> { [ semicolon,     colon                        ] };
    key <AC11> { [ apostrophe,    quotedbl                     ] };
    key <BKSL> { [ backslash,     bar, asciitilde, asciitilde  ] };

    key <LSGT> { [ guillemotleft, guillemotright               ] };
    key <AB01> { [ Georgian_zen,  Georgian_jil                 ] };
    key <AB02> { [ Georgian_xan,  X,             Georgian_har  ] };
    key <AB03> { [ Georgian_can,  Georgian_chin, 0x010000a9    ] };
    key <AB04> { [ Georgian_vin,  V,             Georgian_we   ] };
    key <AB05> { [ Georgian_ban,  B                            ] };
    key <AB06> { [ Georgian_nar,  N,             0x010010fc    ] };
    key <AB07> { [ Georgian_man,  M                            ] };
    key <AB08> { [ comma,         less,          guillemotleft ] };
    key <AB09> { [ period,        greater,      guillemotright ] };
    key <AB10> { [ slash,         question,      0x010010fb    ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "qwerty" {
    include "ge(basic)"
};

partial alphanumeric_keys
xkb_symbols "ergonomic" {
    include "ge(basic)"

    name[Group1]= "Georgian (ergonomic)";

    key <TLDE> { [ 0x0100201e, apostrophe, 0x0100201e, asciitilde ] };
    key <AE01> { [ exclam, 1, exclam      ] };
    key <AE02> { [ 0x01002116, 2, at      ] };
    key <AE03> { [ comma, 3, numbersign, section ] };
    key <AE04> { [ semicolon, 4, dollar   ] };
    key <AE05> { [ percent, 5, EuroSign	 ] };
    key <AE06> { [ colon, 6, asciicircum  ] };
    key <AE07> { [ question, 7, ampersand ] };
    key <AE08> { [ period, 8, asterisk, degree ] };
    key <AE09> { [ parenleft, 9, parenleft, guillemotleft ] };
    key <AE10> { [ parenright, 0, parenright, guillemotright ] };
    key <AE11> { [ minus, plus, 0x01002014, underscore ] };
    key <AE12> { [ 0x0100201c, equal, equal ] };

    key <AD01> { [ Georgian_chin, noSymbol      ]       };
    key <AD02> { [ Georgian_par,  noSymbol      ]       };
    key <AD03> { [ Georgian_un,   noSymbol      ]       };
    key <AD04> { [ Georgian_jil,  noSymbol, noSymbol, 0x010000ae ] };
    key <AD05> { [ Georgian_char, noSymbol, noSymbol, Georgian_tan  ] };
    key <AD06> { [ Georgian_tar,  noSymbol, noSymbol, 0x010010f8 ] };
    key <AD07> { [ Georgian_tan,  noSymbol      ]       };
    key <AD08> { [ Georgian_nar,  noSymbol, 0x010010fc, I ] };
    key <AD09> { [ Georgian_vin,  noSymbol, Georgian_we      ] };
    key <AD10> { [ Georgian_shin, noSymbol                ] };
    key <AD11> { [ Georgian_kan,  noSymbol, bracketleft, braceleft  ] };
    key <AD12> { [ Georgian_khar, noSymbol, bracketright,braceright ] };

    key <AC01> { [ Georgian_xan,  noSymbol, Georgian_har     ] };
    key <AC02> { [ Georgian_in,   noSymbol, Georgian_hie     ] };
    key <AC03> { [ Georgian_an,   noSymbol, 0x010010fa, D ] };
    key <AC04> { [ Georgian_en,   noSymbol, Georgian_he      ] };
    key <AC05> { [ Georgian_on,   noSymbol     ]       };
    key <AC06> { [ Georgian_don,  noSymbol     ]       };
    key <AC07> { [ Georgian_man,  noSymbol     ]       };
    key <AC08> { [ Georgian_san,  noSymbol     ]       };
    key <AC09> { [ Georgian_rae,  noSymbol, L  ]       };
    key <AC10> { [ Georgian_ban,  noSymbol, colon         ] };
    key <AC11> { [ Georgian_gan,  noSymbol, 0x010010f9, quotedbl ] };
    key <BKSL> { [ slash, section, backslash, bar ] };

    key <LSGT> { [ guillemotleft,guillemotright   ] };
    key <AB01> { [ Georgian_jhan, noSymbol      ]      };
    key <AB02> { [ Georgian_hae,  noSymbol, Georgian_hoe,  X ] };
    key <AB03> { [ Georgian_qar,  noSymbol, 0x010010f8, C ] };
    key <AB04> { [ Georgian_ghan, noSymbol, 0x010010f7, V ] };
    key <AB05> { [ Georgian_zhar, noSymbol                ] };
    key <AB06> { [ Georgian_zen,  noSymbol                ] };
    key <AB07> { [ Georgian_can,  noSymbol, noSymbol, M   ] };
    key <AB08> { [ Georgian_las,  noSymbol, guillemotleft, less ] };
    key <AB09> { [ Georgian_phar, noSymbol, Georgian_fi,   guillemotright ] };
    key <AB10> { [ Georgian_cil,  noSymbol, 0x010010fb    ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "mess" {
    include "ge(basic)"

    name[Group1]= "Georgian (MESS)";

    key <TLDE> { [ Georgian_char, backslash, grave ] };
    key <AE01> { [ 1, exclam, apostrophe ] };
    key <AE02> { [ 2, at, asciitilde ] };
    key <AE03> { [ 3, 0x01002116, numbersign ]	};
    key <AE04> { [ 4, dollar, EuroSign ] };
    key <AE05> { [ 5, percent ]	};
    key <AE06> { [ 6, asciicircum ] };
    key <AE07> { [ 7, ampersand, section ] };
    key <AE08> { [ 8, asterisk, degree ] };
    key <AE09> { [ 9, parenleft ] };
    key <AE10> { [ 0, parenright, 0x01002014 ] };
    key <AE11> { [ minus, underscore, 0x01002013 ] };
    key <AE12> { [ Georgian_zhar,	plus, bar   ]  };
    key <AD01> { [ Georgian_khar,	Q ] };
    key <AD02> { [ Georgian_cil, 	W ] };
    key <AD03> { [ Georgian_en,  	E ] };
    key <AD04> { [ Georgian_rae, 	R ] };
    key <AD05> { [ Georgian_tar, 	T ] };
    key <AD06> { [ Georgian_qar, 	Y ] };
    key <AD07> { [ Georgian_un,  	U ] };
    key <AD08> { [ Georgian_in,  	I, Georgian_hie  ] };
    key <AD09> { [ Georgian_on,  	O ] };
    key <AD10> { [ Georgian_par, 	P ] };
    key <AD11> { [ Georgian_shin,	bracketleft,  guillemotleft  ] };
    key <AD12> { [ Georgian_ghan,	bracketright, guillemotright ] };
    key <AC01> { [ Georgian_an,  	A, 0x010010fa ] };
    key <AC02> { [ Georgian_san, 	S ] };
    key <AC03> { [ Georgian_don, 	D ] };
    key <AC04> { [ Georgian_phar,	F, Georgian_fi   ] };
    key <AC05> { [ Georgian_gan, 	G, 0x010010f9 ] };
    key <AC06> { [ Georgian_hae, 	H, Georgian_he   ]	};
    key <AC07> { [ Georgian_jhan,	J, 0x010010f7 ] };
    key <AC08> { [ Georgian_kan, 	K ] };
    key <AC09> { [ Georgian_las, 	L ] };
    key <AC10> { [ Georgian_tan, 0x0100201e ] };
    key <AC11> { [ Georgian_chin,0x0100201c ] };
    key <BKSL> { [ equal, slash, bar ]	};

    key <LSGT> { [ guillemotleft, guillemotright ] };
    key <AB01> { [ Georgian_zen,  Z, Georgian_hoe  ] };
    key <AB02> { [ Georgian_xan,  X, Georgian_har  ]	};
    key <AB03> { [ Georgian_can, 	C ] };
    key <AB04> { [ Georgian_vin, 	V, Georgian_we   ]	};
    key <AB05> { [ Georgian_ban, 	B ] };
    key <AB06> { [ Georgian_nar, 	N, 0x010010fc ] };
    key <AB07> { [ Georgian_man, 	M ] };
    key <AB08> { [ comma, semicolon, less ] };
    key <AB09> { [ period, colon, greater ] };
    key <AB10> { [ Georgian_jil,  question, 0x010010fb ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "ru" {

    name[Group1]= "Russian (Georgia)";

    key <TLDE> { [ asciicircum,   asciitilde       ]       };
    key <AE01> { [         1,      exclam          ]       };
    key <AE02> { [         2,      at              ]       };
    key <AE03> { [         3,      numbersign      ]       };
    key <AE04> { [         4,      semicolon       ]       };
    key <AE05> { [         5,      colon           ]       };
    key <AE06> { [         6,      comma           ]       };
    key <AE07> { [         7,      period          ]       };
    key <AE08> { [         8,      asterisk        ]       };
    key <AE09> { [         9,      parenleft       ]       };
    key <AE10> { [         0,      parenright      ]       };
    key <AE11> { [     minus,      underscore      ]       };
    key <AE12> { [ numbersign,     bar             ]       };

    key <AD01> { [ Georgian_ghan,  q               ]       };
    key <AD02> { [ Georgian_can,   w               ]       };
    key <AD03> { [ Georgian_un,    e               ]       };
    key <AD04> { [ Georgian_kan,   r               ]       };
    key <AD05> { [ Georgian_en,    t               ]       };
    key <AD06> { [ Georgian_nar,   y               ]       };
    key <AD07> { [ Georgian_gan,   u               ]       };
    key <AD08> { [ Georgian_shin,  i               ]       };
    key <AD09> { [ Georgian_cil,   o               ]       };
    key <AD10> { [ Georgian_zen,   p               ]       };
    key <AD11> { [ Georgian_xan,   bracketleft     ]       };
    key <AD12> { [ Georgian_jhan,  bracketright    ]       };

    key <AC01> { [ Georgian_phar,  a               ]       };
    key <AC02> { [ Georgian_tan,   s               ]       };
    key <AC03> { [ Georgian_vin,   d               ]       };
    key <AC04> { [ Georgian_an,    f               ]       };
    key <AC05> { [ Georgian_par,   g               ]       };
    key <AC06> { [ Georgian_rae,   h               ]       };
    key <AC07> { [ Georgian_on,    j               ]       };
    key <AC08> { [ Georgian_las,   k               ]       };
    key <AC09> { [ Georgian_don,   l               ]       };
    key <AC10> { [ Georgian_zhar,  semicolon       ]       };
    key <AC11> { [ Georgian_jil,   percent         ]       };
    key <BKSL> { [ backslash,      bar             ]       };

    key <LSGT> { [ guillemotleft,  guillemotright  ]       };
    key <AB01> { [ Georgian_char,  z               ]       };
    key <AB02> { [ Georgian_chin,  x               ]       };
    key <AB03> { [ Georgian_san,   c               ]       };
    key <AB04> { [ Georgian_man,   v               ]       };
    key <AB05> { [ Georgian_in,    b               ]       };
    key <AB06> { [ Georgian_tar,   n               ]       };
    key <AB07> { [ Georgian_khar,  m               ]       };
    key <AB08> { [ Georgian_ban,   less            ]       };
    key <AB09> { [ Georgian_qar,   greater         ]       };
    key <AB10> { [ Georgian_hae,   question        ]       };
};

partial alphanumeric_keys
xkb_symbols "os" {

    include "ru(os_legacy)"

    name[Group1]= "Ossetian (Georgia)";
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "rs(latin)"
    name[Group1]="Croatian";

    // Redefine these keys to match the XFree86 Croatian layout.
    key <AE01> { [     1,     exclam,    asciitilde,      dead_tilde ] };
    key <AE03> { [     3, numbersign,   asciicircum, dead_circumflex ] };
    key <AE05> { [     5,    percent,        degree,  dead_abovering ] };
    key <AE07> { [     7,      slash,         grave,      dead_grave ] };
    key <AC03> { [   any,        any, rightdoublequotemark, guillemotleft ] };
    key <AB10> { [ minus, underscore, dead_belowdot,   dead_abovedot ] };
};

partial alphanumeric_keys
xkb_symbols "us" {

    include "us"
    name[Group1]= "Croatian (US)";

    key <AD01> { [  any,  any,  backslash               ] };
    key <AD02> { [  any,  any,  bar                     ] };
    key <AD03> { [  any,  any,  EuroSign                ] };
    key <AD06> { [  any,  any,  z,           Z          ] };
    key <AD11> { [  any,  any,  scaron,      Scaron     ] };
    key <AD12> { [  any,  any,  dstroke,     Dstroke    ] };
    key <AC04> { [  any,  any,  bracketleft             ] };
    key <AC05> { [  any,  any,  bracketright            ] };
    key <AC08> { [  any,  any,  lstroke                 ] };
    key <AC09> { [  any,  any,  Lstroke                 ] };
    key <AC10> { [  any,  any,  ccaron,      Ccaron     ] };
    key <AC11> { [  any,  any,  cacute,      Cacute     ] };
    key <LSGT> { [  any,  any,  bar                     ] };
    key <AB01> { [  any,  any,  y,           Y          ] };
    key <AB04> { [  any,  any,  at                      ] };
    key <AB05> { [  any,  any,  braceleft               ] };
    key <AB06> { [  any,  any,  braceright              ] };
    key <AB07> { [  any,  any,  section                 ] };
    key <AB08> { [  any,  any,  semicolon               ] };
    key <AB09> { [  any,  any,  colon                   ] };
    key <AB10> { [  any,  any,  minus,       underscore ] };
    key <BKSL> { [  any,  any,  zcaron,      Zcaron     ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "alternatequotes" {

    include "rs(latinalternatequotes)"
    name[Group1]= "Croatian (with guillemets)";
};

partial alphanumeric_keys
xkb_symbols "unicode" {

    include "rs(latinunicode)"
    name[Group1]= "Croatian (with Croatian digraphs)";
};

partial alphanumeric_keys
xkb_symbols "unicodeus" {

    include "rs(latinunicodeyz)"
    name[Group1]= "Croatian (US, with Croatian digraphs)";
};
// based on a keyboard map from an 'xkb/symbols/gb' file

default partial alphanumeric_keys
xkb_symbols "basic" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple U.K. keyboard layout defined by
    // the SVR4 European Language Supplement and sometimes also
    // known as the IBM 166 layout.

    include "latin"

    name[Group1]="English (UK)";

    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth ]	};
    key <AE03>	{ [         3,   sterling, threesuperior,    sterling ]	};
    key <AE04>	{ [         4,     dollar,     EuroSign,   onequarter ]	};

    key <AC11>	{ [apostrophe,         at, dead_circumflex, dead_caron]	};
    key <TLDE>	{ [     grave,    notsign,          bar,          bar ]	};

    key <BKSL>	{ [numbersign, asciitilde,   dead_grave,   dead_breve ]	};
    key <LSGT>	{ [ backslash,        bar,          bar,    brokenbar ]	};

    include "level3(ralt_switch_multikey)"
};

partial alphanumeric_keys
xkb_symbols "intl" { 

    // Describes the differences between a very simple en_US 
    // keyboard and a very simple U.K. keyboard layout with 
    // dead keys. By Phil Jones (philjones1@blueyonder.co.uk) 

    // Includes the following keys: 
    // dead_grave 
    // dead_acute 
    // dead_circumflex 
    // dead_tilde 
    // dead_diaeresis 

    include "latin" 

    name[Group1]="English (UK, intl., with dead keys)";

    key <AE02>  { [   2,  dead_diaeresis,      twosuperior,     onehalf ] };
    key <AE03>  { [   3,        sterling,    threesuperior,    onethird ] };
    key <AE04>  { [   4,          dollar,         EuroSign,  onequarter ] };
    key <AE06>  { [   6, dead_circumflex,         NoSymbol,    onesixth ] };

    key <AC11>  { [ dead_acute,         at,     apostrophe,         bar ] };
    key <TLDE>  { [ dead_grave,    notsign,            bar,         bar ] };

    key <BKSL>  { [ numbersign, dead_tilde,            bar,         bar ] };
    key <LSGT>  { [  backslash,        bar,            bar,         bar ] };

    key <AB08>  { [      comma,       less,       ccedilla,         Ccedilla ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "extd" {
    // Clone of the Microsoft "English (UK, Extended" layout, which
    // includes dead keys for: grave; diaeresis; circumflex; tilde; and
    // accute. It also enables direct access to accute characters using
    // the Multi_key (Alt Gr).
    //
    // Taken from...
    //    "Windows Keyboard Layouts"
    //    http://msdn.microsoft.com/en-us/goglobal/bb964651.aspx
    //
    // -- Jonathan Miles <jon@cybah.co.uk>

    include "latin"

    name[Group1]="English (UK, extended, Windows)";

    key <TLDE> { [ dead_grave,    notsign,       brokenbar,    NoSymbol ] };

    key <AE02> { [     2,        quotedbl,  dead_diaeresis,     onehalf ] };
    key <AE03> { [     3,        sterling,   threesuperior,    onethird ] };
    key <AE04> { [     4,          dollar,        EuroSign,  onequarter ] };
    key <AE06> { [     6,     asciicircum, dead_circumflex,    NoSymbol ] };

    key <AD02> { [   w,                 W,          wacute,      Wacute ] };
    key <AD03> { [   e,                 E,          eacute,      Eacute ] };
    key <AD06> { [   y,                 Y,          yacute,      Yacute ] };
    key <AD07> { [   u,                 U,          uacute,      Uacute ] };
    key <AD08> { [   i,                 I,          iacute,      Iacute ] };
    key <AD09> { [   o,                 O,          oacute,      Oacute ] };

    key <AC01> { [   a,                 A,          aacute,      Aacute ] };
    key <AC11> { [  apostrophe,         at,     dead_acute,    NoSymbol ] };

    key <AB03> { [   c,                 C,        ccedilla,    Ccedilla ] };

    key <BKSL>  { [ numbersign, asciitilde,     dead_tilde,    NoSymbol ] };
    key <LSGT>  { [  backslash,        bar,       NoSymbol,    NoSymbol ] };

    include "level3(ralt_switch)"
};

// Describe the differences between the US Colemak layout
// and a UK variant. By Andy Buckley (andy@insectnation.org)

partial alphanumeric_keys
xkb_symbols "colemak" {
    include "us(colemak)"

    name[Group1]="English (UK, Colemak)";

    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth ]	};
    key <AE03>	{ [         3,   sterling, threesuperior,    sterling ]	};
    key <AE04>	{ [         4,     dollar,     EuroSign,   onequarter ]	};

    key <AC11>	{ [apostrophe,         at, dead_circumflex, dead_caron]	};
    key <TLDE>	{ [     grave,    notsign,          bar,          bar ]	};

    key <BKSL>	{ [numbersign, asciitilde,   dead_grave,   dead_breve ]	};
    key <LSGT>	{ [ backslash,        bar,          bar,    brokenbar ]	};

    include "level3(ralt_switch_multikey)"
};


// Dvorak (UK) keymap (by odaen) allowing the usage of
// the £ and ? key and swapping the @ and " keys.

partial alphanumeric_keys
xkb_symbols "dvorak" {
    include "us(dvorak-alt-intl)"

    name[Group1]="English (UK, Dvorak)";

    key <AD01> { [ apostrophe,	at		] };
    key <AE02> { [	    2,	quotedbl,  twosuperior,   NoSymbol	] };
    key <AE03> { [	    3,	sterling,  threesuperior, NoSymbol	] };
    key <BKSL> { [ numbersign,	asciitilde	] };
    key <LSGT> { [  backslash,	bar		] };
    key <TLDE> { [	grave,	notsign,   bar,           bar		] };
};

// Dvorak letter positions, but punctuation all in the normal UK positions.
partial alphanumeric_keys
xkb_symbols "dvorakukp" {
    include "gb(dvorak)"

    name[Group1]="English (UK, Dvorak, with UK punctuation)";

    key <AE11> {        [     minus,    underscore      ]       };
    key <AE12> {        [     equal,    plus            ]       };
    key <AD11> {        [ bracketleft,  braceleft       ]       };
    key <AD12> {        [ bracketright, braceright      ]       };
    key <AD01> {        [ slash,        question        ]       };
    key <AC11> {        [apostrophe,    at,         dead_circumflex, dead_caron] };
};

// Copied from macintosh_vndr/gb
partial alphanumeric_keys
xkb_symbols "mac" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple U.K. keyboard layout

    include "latin"

    name[Group1]= "English (UK, Macintosh)";

    key <AE02> {	[               2,              at,         EuroSign	]	};
    key <AE03> {	[               3,        sterling,       numbersign	]	};
    key <TLDE> {	[         section,       plusminus ]	};
    key <LSGT> {	[           grave,      asciitilde ]	};

    include "level3(ralt_switch)"
    include "level3(enter_switch)"
};


partial alphanumeric_keys
xkb_symbols "mac_intl" { 

    include "latin" 

    name[Group1]="English (UK, Macintosh, intl.)";

    key <AE02>  { [   2,                       at,           EuroSign,    onehalf ] };
    key <AE03>  { [   3,                 sterling,        twosuperior,   onethird ] };
    key <AE04>  { [   4,                   dollar,      threesuperior, onequarter ] };
    key <AE06>  { [   6,          dead_circumflex,           NoSymbol,   onesixth ] };
    key <AD09>    { [   o,                        O,                 oe,       OE ] };

    key <AC11>  { [ dead_acute,    dead_diaeresis,     dead_diaeresis,        bar ] }; //dead_doubleacute
    key <TLDE>  { [ section,            plusminus,            notsign,    notsign ] }; //dead_grave

    key <BKSL>  { [ backslash,                bar,         numbersign,        bar ] };
    key <LSGT>  { [ dead_grave,        dead_tilde,          brokenbar,        bar ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "pl" {

    // Polish layout based on British keyboard
    // Adopted 2016 by Aleksander Kowalski
    
    include "latin"
    
    name[Group1]="Polish (British keyboard)";

    key <AE02>{ [         2,   quotedbl,  twosuperior,    oneeighth ]};
    key <AE03>{ [         3,   sterling, threesuperior,    sterling ]};
    key <AE04>{ [         4,     dollar,     EuroSign,   onequarter ]};
    
    key <AC11>{ [apostrophe,         at, dead_circumflex, dead_caron]};
    key <TLDE>{ [     grave,    notsign,          bar,          bar ]};
    
    key <BKSL>{ [numbersign, asciitilde,   dead_grave,   dead_breve ]};
    key <LSGT>{ [ backslash,        bar,          bar,    brokenbar ]};
    
    key <AD01>  { [         q,          Q ] };
    key <AD02>  { [         w,          W ] };
    key <AD03>{ [         e,          E,      eogonek,      Eogonek ]   };
    key <AD09>  { [         o,          O,       oacute,       Oacute ] };
    
    key <AC01>  { [         a,          A,      aogonek,      Aogonek ] };
    key <AC02>  { [         s,          S,       sacute,       Sacute ] };
    key <AC04>  { [         f,          F ] };
    
    key <AB01>  { [         z,          Z,    zabovedot,    Zabovedot ] };
    key <AB02>  { [         x,          X,       zacute,       Zacute ] };
    key <AB03>  { [         c,          C,       cacute,       Cacute ] };
    key <AB06>  { [         n,          N,       nacute,       Nacute ] };

    include "level3(ralt_switch)"
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/gb(sun_type6)"
};
// Modified for a real Spanish keyboard by Jon Tombs.

default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin(type4)"

    name[Group1]="Spanish";

    key <AE01>	{ [         1,     exclam,          bar,   exclamdown ]	};
    key <AE03>	{ [         3, periodcentered, numbersign,   sterling ]	};
    key <AE04>	{ [         4,     dollar,   asciitilde,       dollar ]	};
    key <AE06>	{ [         6,  ampersand,      notsign,  fiveeighths ]	};
    key <AE11>	{ [apostrophe,   question,    backslash, questiondown ]	};
    key <AE12>	{ [exclamdown, questiondown, dead_tilde,   asciitilde ]	};

    key <AD11>	{ [dead_grave, dead_circumflex, bracketleft, dead_abovering ] };
    key <AD12>	{ [      plus,   asterisk, bracketright,  dead_macron ]	};

    key <AC10>	{ [    ntilde, Ntilde,   asciitilde, dead_doubleacute ]	};
    key <AC11>	{ [dead_acute, dead_diaeresis, braceleft,   braceleft ]	};
    key <TLDE>	{ [ masculine, ordfeminine,    backslash,   backslash ]	};

    key <BKSL>	{ [  ccedilla,   Ccedilla,   braceright,   dead_breve ]	};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "winkeys" {

    include "es(basic)"
    name[Group1]="Spanish (Windows)";
    include "eurosign(5)"
};

partial alphanumeric_keys
xkb_symbols "sundeadkeys" {

    include "es(basic)"
    name[Group1]="Spanish (Sun dead keys)";

    key <AC11>	{ [dead_acute,  dead_diaeresis,   braceleft,      braceleft ] };
    key <AD11>	{ [dead_grave, dead_circumflex, bracketleft, dead_abovering ] };
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    include "es(basic)"

    name[Group1]="Spanish (no dead keys)";

    key <AD11>	{ [     grave, asciicircum,  bracketleft,      degree ]	};
    key <AD12>	{ [      plus,   asterisk, bracketright,       macron ]	};
    key <AC10>	{ [    ntilde,     Ntilde,   asciitilde,  doubleacute ]	};
    key <AC11>	{ [     acute,  diaeresis,    braceleft,    braceleft ]	};
    key <BKSL>	{ [  ccedilla,   Ccedilla,   braceright,        breve ]	};
    key <AB10>	{ [     minus, underscore, dead_belowdot,    abovedot ]	};
};

// Spanish mapping (note R-H exchange)
partial alphanumeric_keys
xkb_symbols "dvorak" {

    name[Group1]="Spanish (Dvorak)";

    key <TLDE> {[  masculine, ordfeminine, backslash, degree		]};
    key <AE01> {[          1, exclam, bar, onesuperior			]};
    key <AE02> {[          2, quotedbl, at, twosuperior			]};
    key <AE03> {[          3, periodcentered, numbersign, threesuperior	]};
    key <AE04> {[          4, dollar, asciitilde, onequarter		]};
    key <AE05> {[          5, percent, brokenbar, fiveeighths		]};
    key <AE06> {[          6, ampersand, notsign, threequarters		]};
    key <AE07> {[          7, slash, onehalf, seveneighths		]};
    key <AE08> {[          8, parenleft, oneeighth, threeeighths	]};
    key <AE09> {[          9, parenright, asciicircum			]};
    key <AE10> {[          0, equal, grave, dead_doubleacute		]};
    key <AE11> {[ apostrophe, question, dead_macron, dead_ogonek	]};
    key <AE12> {[ exclamdown, questiondown, dead_breve, dead_abovedot	]};

    key <AD01> {[     period, colon, less, guillemotleft                ]};
    key <AD02> {[      comma, semicolon, greater, guillemotright        ]};
    key <AD03> {[     ntilde, Ntilde, lstroke, Lstroke			]};
    key <AD04> {[          p, P, paragraph				]};
    key <AD05> {[          y, Y, yen					]};
    key <AD06> {[          f, F, tslash, Tslash				]};
    key <AD07> {[          g, G, dstroke, Dstroke			]};
    key <AD08> {[          c, C, cent, copyright			]};
    key <AD09> {[          h, H, hstroke, Hstroke			]};
    key <AD10> {[          l, L, sterling				]};
    key <AD11> {[ dead_grave, dead_circumflex, bracketleft, dead_caron	]};
    key <AD12> {[       plus, asterisk, bracketright, plusminus		]};

    key <AC01> {[          a, A, ae, AE					]};
    key <AC02> {[          o, O, oslash, Oslash				]};
    key <AC03> {[          e, E, EuroSign				]};
    key <AC04> {[          u, U, aring, Aring				]};
    key <AC05> {[          i, I, oe, OE					]};
    key <AC06> {[          d, D, eth, ETH				]};
    key <AC07> {[          r, R, registered, trademark			]};
    key <AC08> {[          t, T, thorn, THORN				]};
    key <AC09> {[          n, N, eng, ENG				]};
    key <AC10> {[          s, S, ssharp, section			]};
    key <AC11> {[ dead_acute, dead_diaeresis, braceleft, dead_tilde	]};
    key <BKSL> {[   ccedilla, Ccedilla, braceright, dead_cedilla	]};

    key <LSGT> {[       less, greater, guillemotleft, guillemotright	]};
    key <AB01> {[      minus, underscore, hyphen, macron		]};
    key <AB02> {[          q, Q, currency				]};
    key <AB03> {[          j, J						]};
    key <AB04> {[          k, K, kra					]};
    key <AB05> {[          x, X, multiply, division			]};
    key <AB06> {[          b, B						]};
    key <AB07> {[          m, M, mu					]};
    key <AB08> {[          w, W						]};
    key <AB09> {[          v, V						]};
    key <AB10> {[          z, Z						]};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "cat" {

    include "es(basic)"

    name[Group1]="Catalan (Spain, with middle-dot L)";

    key <AC09>  { [	    l,      L,		0x1000140,  0x100013F ] };
};

partial alphanumeric_keys
xkb_symbols "ast" {

    include "es(basic)"

    name[Group1]="Asturian (Spain, with bottom-dot H and L)";

    key <AC06>  { [	    h,      H,		0x1001E25,  0x1001E24 ] };
    key <AC09>  { [	    l,      L,		0x1001E37,  0x1001E36 ] };
};

// Copied from macintosh_vndr/es
partial alphanumeric_keys
xkb_symbols "mac" {
    include "es"
    name[Group1]= "Spanish (Macintosh)";
};

partial alphanumeric_keys
xkb_symbols "olpc" {

    // http://wiki.laptop.org/go/OLPC_Spanish_Keyboard

    include "us(basic)"
    name[Group1]="Spanish";

    key <AE00> { [    masculine,    ordfeminine      ] };
    key <AE01> { [            1,         exclam,             bar ] };
    key <AE02> { [            2,       quotedbl,              at ] };
    key <AE03> { [            3,     dead_grave,      numbersign,   grave           ] };
    key <AE05> { [            5,        percent,     asciicircum,   dead_circumflex ] };
    key <AE06> { [            6,      ampersand,         notsign ] };
    key <AE07> { [            7,          slash,       backslash ] };
    key <AE08> { [            8,      parenleft                         ] };
    key <AE09> { [            9,     parenright                         ] };
    key <AE10> { [            0,          equal                  ] };
    key <AE11> { [   apostrophe,       question                  ] };
    key <AE12> { [   exclamdown,   questiondown                  ] };

    key <AD03> { [            e,              E,        EuroSign ] };
    key <AD11> { [   dead_acute, dead_diaeresis,           acute,   dead_abovering  ] };
    key <AD12> { [  bracketleft,      braceleft                  ] };

    key <AC10> { [       ntilde,        Ntilde                  ] };
    key <AC11> { [         plus,       asterisk,      dead_tilde ] };
    key <AC12> { [ bracketright,     braceright,      section    ] };

    key <AB08> { [        comma,      semicolon                  ] };
    key <AB09> { [       period,          colon                  ] };
    key <AB10> { [        minus,     underscore                  ] };

    key <I219> { [         less,        greater,  ISO_Next_Group ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "olpcm" {

    // Mechanical (non-membrane) OLPC Spanish keyboard layout.
    // See: http://wiki.laptop.org/go/OLPC_Spanish_Non-membrane_Keyboard

    include "us(basic)"
    name[Group1]="Spanish";

    key <AE00> { [    questiondown,    exclamdown, backslash      ] };
    key <AE01> { [            1,         exclam,             bar ] };
    key <AE02> { [            2,       quotedbl,              at ] };
    key <AE03> { [            3,     dead_grave,      numbersign,   grave           ] };
    key <AE04> { [            4,     dollar,     asciitilde,     dead_tilde ] };
    key <AE05> { [            5,        percent,     asciicircum,   dead_circumflex ] };
    key <AE06> { [            6,      ampersand,         notsign ] };
    key <AE07> { [            7,          slash,       backslash ] };   // no '\' label on olpcm, leave for compatibility
    key <AE08> { [            8,      parenleft,    masculine                ] };
    key <AE09> { [            9,     parenright,    ordfeminine                 ] };
    key <AE10> { [            0,          equal                  ] };
    key <AE11> { [   apostrophe,       question                  ] };

    key <AD03> { [            e,              E,        EuroSign ] };
    key <AD11> { [   dead_acute, dead_diaeresis,     dead_abovering, acute  ] };
    key <AD12> { [  plus,      asterisk                  ] };

    key <AC10> { [       ntilde,        Ntilde                  ] };
    // no AC11 or AC12 on olpcm

    key <AB08> { [        comma,      semicolon                  ] };
    key <AB09> { [       period,          colon                  ] };
    key <AB10> { [        minus,     underscore                  ] };

    key <AA02>  { [        less,        greater ] };
    key <AA06>  { [  bracketleft,      braceleft,   ccedilla,         Ccedilla  ] };
    key <AA07>  { [  bracketright,     braceright                ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "deadtilde" {

    include "es(basic)"

    name[Group1]="Spanish (dead tilde)";

    key <AE04>	{ [         4,     dollar,   dead_tilde,       dollar ]	};
};

partial alphanumeric_keys
xkb_symbols "olpc2" {

    // Modified variant of US International layout, specifically for Peru
    // Contact: Sayamindu Dasgupta <sayamindu@laptop.org>

    include "us(olpc)"
    name[Group1]="Spanish (OLPC2)";

    key <AE03> { [  3, numbersign,   dead_grave,  dead_grave] }; // combining grave
    key <I236>  { [ XF86Start ] };

    include "level3(ralt_switch)"
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/es(sun_type6)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin(type4)"
    name[Group1]="Portuguese";

    key <TLDE> { [     backslash,             bar,        notsign,          notsign ] };
    key <AE03> { [             3,      numbersign,       sterling,         sterling ] };
    key <AE04> { [             4,          dollar,        section,           dollar ] };
    key <AE11> { [    apostrophe,        question,      backslash,     questiondown ] };
    key <AE12> { [ guillemotleft,  guillemotright,   dead_cedilla,      dead_ogonek ] };

    key <AD11> { [          plus,        asterisk, dead_diaeresis,   dead_abovering ] };
    key <AD12> { [    dead_acute,      dead_grave,     dead_tilde,      dead_macron ] };
    key <BKSL> { [    dead_tilde, dead_circumflex,     dead_grave,       dead_breve ] };

    key <AC10> { [      ccedilla,        Ccedilla,     dead_acute, dead_doubleacute ] };
    key <AC11> { [     masculine,     ordfeminine,dead_circumflex,       dead_caron ] };

    key <LSGT> { [          less,         greater,      backslash,        backslash ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "sundeadkeys" {

    include "pt(basic)"
    name[Group1]="Portuguese (Sun dead keys)";

    key <AD11> { [          plus,        asterisk, dead_diaeresis,   dead_diaeresis ] };
    key <AD12> { [    dead_acute,      dead_grave                                   ] };
    key <BKSL> { [    dead_tilde, dead_circumflex                                   ] };
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    include "pt(basic)"
    name[Group1]="Portuguese (no dead keys)";

    key <AE12> { [ guillemotleft,  guillemotright,        cedilla,           ogonek ] };
    key <AD11> { [          plus,        asterisk,       quotedbl,         quotedbl ] };
    key <AD12> { [         acute,           grave                                   ] };
    key <BKSL> { [    asciitilde,     asciicircum                                   ] };
    key <AC10> { [      ccedilla,        Ccedilla,          acute,      doubleacute ] };
    key <AC11> { [     masculine,     ordfeminine,    asciicircum,            caron ] };
    key <AB10> { [         minus,      underscore,  dead_belowdot,         abovedot ] };
};

// Layout variant for Mac, by Ricardo Cabral <bfe00991@mail.telepac.pt>.
partial alphanumeric_keys
xkb_symbols "mac" {

    include "pt"
    name[Group1]= "Portuguese (Macintosh)";

    key <TLDE> { [         grave,      asciitilde,        notsign,          notsign ] };
    key <AE06> { [             6,       ampersand,  threequarters,      fiveeighths ] };
    key <AE08> { [             8,       parenleft,    bracketleft,        braceleft ] };
    key <AE09> { [             9,      parenright,   bracketright,       braceright ] };
    key <AE12> { [          plus,        asterisk, dead_diaeresis                   ] };
    key <AD11> { [     masculine,     ordfeminine                                   ] };
    key <BKSL> { [     backslash,             bar,     dead_grave,       dead_breve ] };
    key <AC11> { [    dead_tilde, dead_circumflex                                   ] };
};

partial alphanumeric_keys
xkb_symbols "mac_sundeadkeys" {

    include "pt(mac)"
    name[Group1]= "Portuguese (Macintosh, Sun dead keys)";

    key <AE12> { [          plus,        asterisk, dead_diaeresis,   dead_diaeresis ] };
    key <AD12> { [    dead_acute,      dead_grave                                   ] };
    key <AC11> { [    dead_tilde, dead_circumflex                                   ] };
};

partial alphanumeric_keys
xkb_symbols "mac_nodeadkeys" {

    include "pt(mac)"
    name[Group1]= "Portuguese (Macintosh, no dead keys)";

    key <AE12> { [          plus,       asterisk,         quotedbl,        quotedbl ] };
    key <AD12> { [         acute,          grave                                    ] };
    key <AC11> { [    asciitilde,    asciicircum                                    ] };
};


//
// Portuguese Nativo layout.
//     This is a Dvorak-based layout, designed for the Portuguese language.
//
// Ari Caldeira    <ari@tecladobrasileiro.com.br>    2005-07-19
//
partial alphanumeric_keys
xkb_symbols "nativo" {

    name[Group1]="Portuguese (Nativo)";

// Numeric row
    key <TLDE> { [         plus,        asterisk,       dead_diaeresis,        plusminus ] };
    key <AE01> { [            1,          exclam,          onesuperior,       exclamdown ] };
    key <AE02> { [            2,        quotedbl,                   at,      twosuperior ] };
    key <AE03> { [            3,      numbersign,             sterling,    threesuperior ] };
    key <AE04> { [            4,          dollar,              section,       onequarter ] };
    key <AE05> { [            5,         percent,                 cent,       0x01002030 ] };
    key <AE06> { [            6,       ampersand,              notsign,        diaeresis ] };
    key <AE07> { [            7,           slash,            braceleft,       0x0100032D ] };
    key <AE08> { [            8,       parenleft,          bracketleft,       0x01000331 ] };
    key <AE09> { [            9,      parenright,         bracketright,        dead_horn ] };
    key <AE10> { [            0,           equal,           braceright,        dead_hook ] };
    key <AE11> { [    masculine,     ordfeminine,          dead_ogonek,       0x01000326 ] };
    key <AE12> { [         less,         greater,         dead_cedilla,   dead_abovering ] };

// Upper row
    key <AD01> { [   apostrophe,        question,               degree,     questiondown ] };
    key <AD02> { [        comma,       semicolon,           0x01000329,       0x01000315 ] };
    key <AD03> { [       period,           colon,           0x01002022,   periodcentered ] };
    key <AD04> { [            h,               H,            paragraph,        paragraph ] };
    key <AD05> { [            x,               X,             multiply,         division ] };
    key <AD06> { [            w,               W,               ubreve,           Ubreve ] };
    key <AD07> { [            l,               L,              lstroke,          Lstroke ] };
    key <AD08> { [            t,               T,            trademark,        trademark ] };
    key <AD09> { [            c,               C,            copyright,        copyright ] };
    key <AD10> { [            p,               P,                thorn,            THORN ] };
    key <AD11> { [   dead_tilde, dead_circumflex,           dead_caron, dead_doubleacute ] };
    key <AD12> { [        minus,      underscore,           0x01002015,       0x01000336 ] };

// Central row
    key <AC01> { [            i,               I,             idotless,        Iabovedot ] };
    key <AC02> { [            e,               E,             EuroSign,         EuroSign ] };
    key <AC03> { [            a,               A,                   ae,               AE ] };
    key <AC04> { [            o,               O,                   oe,               OE ] };
    key <AC05> { [            u,               U,               oslash,         Ooblique ] };
    key <AC06> { [            m,               M,                   mu,               mu ] };
    key <AC07> { [            d,               D,                  eth,              ETH ] };
    key <AC08> { [            s,               S,               ssharp,       0x01001E9E ] };
    key <AC09> { [            r,               R,           registered,       registered ] };
    key <AC10> { [            n,               N,                  eng,              ENG ] };
    key <AC11> { [   dead_acute,      dead_grave,          dead_macron,       dead_breve ] };
    key <BKSL> { [    backslash,             bar,        dead_belowdot,    dead_abovedot ] };

// Lower row
    key <LSGT> { [ guillemotleft, guillemotright,           0x01002039,       0x0100203A ] };
    key <AB01> { [            y,               Y,                  yen,              yen ] };
    key <AB02> { [     ccedilla,        Ccedilla                                         ] };
    key <AB03> { [            j,               J,           0x01000292,       0x010001B7 ] };
    key <AB04> { [            b,               B,           apostrophe,         quotedbl ] };
    key <AB05> { [            k,               K,             currency,        brokenbar ] };
    key <AB06> { [            q,               Q,           0x01000259,       0x0100018F ] };
    key <AB07> { [            v,               V,   doublelowquotemark,   singlelowquotemark ] };
    key <AB08> { [            g,               G,  leftdoublequotemark,  leftsinglequotemark ] };
    key <AB09> { [            f,               F, rightdoublequotemark, rightsinglequotemark ] };
    key <AB10> { [            z,               Z,           0x0100201F,       0x0100201B ] };

    key <SPCE> { [        space,           space,         nobreakspace,     nobreakspace ] };

// Configures the use of the AltGr key
    include "level3(ralt_switch)"
};


//
// Portuguese Nativo layout for US keyboards.
//
// Ari Caldeira    <ari@tecladobrasileiro.com.br>    2005-07-19
//
partial alphanumeric_keys
xkb_symbols "nativo-us" {

    include "pt(nativo)"

    name[Group1]="Portuguese (Nativo for US keyboards)";

    key <AB01> { [            y,               Y,              ccedilla,        Ccedilla ] };
    key <AB02> { [ guillemotleft, guillemotright,           0x01002039,       0x0100203A ] };
};


//
// Portuguese Nativo layout for typing Esperanto.
//
// Ari Caldeira    <ari@tecladobrasileiro.com.br>    2005-07-19
//
partial alphanumeric_keys
xkb_symbols "nativo-epo" {

    include "pt(nativo)"

    name[Group1]="Esperanto (Portugal, Nativo)";

    key <AD04> { [            h,               H,          hcircumflex,      Hcircumflex ] };
    key <AD05> { [  ccircumflex,     Ccircumflex,                    x,                X ] };
    key <AD06> { [       ubreve,          Ubreve,                    w,                W ] };

    key <AB01> { [  jcircumflex,     Jcircumflex,                    y,                Y ] };
    key <AB02> { [  scircumflex,     Scircumflex,             ccedilla,         Ccedilla ] };
    key <AB06> { [  gcircumflex,     Gcircumflex,                    q,                Q ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/pt(sun_type6)"
};

//
// Portuguese Colemak layout.
//
partial alphanumeric_keys
xkb_symbols "colemak" {
    include "pt(basic)"

    name[Group1]="Portuguese (Colemak)";

    key <AD01>  { [         q,          Q,           at,   Greek_OMEGA ] };
    key <AD02>  { [         w,          W,      lstroke,       Lstroke ] };
    key <AD03>  { [         f,          F,      dstroke,   ordfeminine ] };
    key <AD04>  { [         p,          P,        thorn,         THORN ] };
    key <AD05>  { [         g,          G,          eng,           ENG ] };
    key <AD06>  { [         j,          J,    dead_hook,     dead_horn ] };
    key <AD07>  { [         l,          L,      lstroke,       Lstroke ] };
    key <AD08>  { [         u,          U,    downarrow,       uparrow ] };
    key <AD09>  { [         y,          Y,    leftarrow,           yen ] };
    key <AD10>  { [  ccedilla,   Ccedilla,   dead_acute, dead_doubleacute ] };

    key <AC01>  { [         a,          A,           ae,           AE ] };
    key <AC02>  { [         r,          R,    paragraph,   registered ] };
    key <AC03>  { [         s,          S,       ssharp,      section ] };
    key <AC04>  { [         t,          T,       tslash,       Tslash ] };
    key <AC05>  { [         d,          D,          eth,          ETH ] };
    key <AC06>  { [         h,          H,      hstroke,      Hstroke ] };
    key <AC07>  { [         n,          N,            n,            N ] };
    key <AC08>  { [         e,          E,     EuroSign,         cent ] };
    key <AC09>  { [         i,          I,   rightarrow,     idotless ] };
    key <AC10>  { [         o,          O,       oslash,     Ooblique ] };

    key <AB01>  { [         z,          Z, guillemotleft,        less ] };
    key <AB02>  { [         x,          X, guillemotright,    greater ] };
    key <AB03>  { [         c,          C,         cent,    copyright ] };
    key <AB04>  { [         v,          V, leftdoublequotemark, leftsinglequotemark ]   };
    key <AB05>  { [         b,          B, rightdoublequotemark, rightsinglequotemark ] };
    key <AB08>  { [         k,          K,          kra,    ampersand ] };
    key <AB07>  { [         m,          M,           mu,    masculine ] };

    key <CAPS> { [    BackSpace,    BackSpace,       BackSpace,        BackSpace ] };
};
// Basic layout based on converted file, from keytable file to xkb/symbols/ file
// with mk_xkb by root@linux.chanae.stben.be Tue Sep 30 00:53:29 MET DST 1997

// Converted from the nl-latin.map of the Linux kbd package by
// Pablo Saratxaga <srtxg@f2219.n293.z2.fidonet.org>

// Official layout by Benno Schulenberg <bensberg@justemail.net>, January 2007,
// based on http://www.xs4all.nl/~koospol/public/Xmodmap-nl-deadkeys.gz


default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin"

    name[Group1]="Dutch";

    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth ]	};
    key <AE06>	{ [         6,  ampersand, threequarters, fiveeighths ]	};
    key <AE07>	{ [         7, underscore,     sterling, seveneighths ]	};
    key <AE08>	{ [         8,  parenleft,    braceleft,  bracketleft ]	};
    key <AE09>	{ [         9, parenright,   braceright, bracketright ]	};
    key <AE10>	{ [         0, apostrophe,       degree,    trademark ]	};
    key <AE11>	{ [     slash,   question,    backslash, questiondown ]	};
    key <AE12>	{ [    degree, dead_tilde, dead_cedilla,  dead_ogonek ]	};

    key <AD03>	{ [         e,          E,     EuroSign,         cent ] };
    key <AD05>	{ [         t,          T,        thorn,        THORN ]	};
    key <AD06>	{ [         y,          Y,   ydiaeresis,          yen ]	};
    key <AD07>	{ [         u,          U,   udiaeresis,   Udiaeresis ]	};
    key <AD08>	{ [         i,          I,   idiaeresis,   Idiaeresis ]	};
    key <AD09>	{ [         o,          O,       ograve,       Ograve ]	};
    key <AD10>	{ [         p,          P,    paragraph,        THORN ]	};
    key <AD11>	{ [dead_diaeresis, dead_circumflex, asciitilde, asciicircum]	};
    key <AD12>	{ [  asterisk,        bar,   dead_tilde,  dead_macron ]	};

    key <AC01>	{ [         a,          A,       aacute,       Aacute ]	};
    key <AC04>	{ [         f,          F,  ordfeminine,  ordfeminine ]	};
    key <AC10>	{ [      plus,  plusminus,   dead_acute, dead_doubleacute ] };
    key <AC11>	{ [dead_acute, dead_grave,   apostrophe,        grave ] };
    key <TLDE>	{ [        at,    section,      notsign,      notsign ]	};

    key <BKSL>	{ [      less,    greater,   dead_grave,   dead_breve ]	};
    key <AB06>	{ [         n,          N,       ntilde,       Ntilde ]	};
    key <AB07>	{ [         m,          M,     Greek_mu,    masculine ]	};
    key <AB08>	{ [     comma,  semicolon,      cedilla, guillemotleft]	};
    key <AB09>	{ [    period,      colon, periodcentered, guillemotright ] };
    key <AB10>	{ [     minus,      equal,       hyphen, dead_abovedot]	};

    key <LSGT>	{ [bracketright, bracketleft,       bar,    brokenbar ]	};

    include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "std" {

    name[Group1]= "Dutch (standard)";

    key <TLDE>  { [             at,        section,        notsign ] };
    key <AE01>  { [              1,         exclam,    onesuperior ] };
    key <AE02>  { [              2,       quotedbl,    twosuperior ] };
    key <AE03>  { [              3,     numbersign,  threesuperior ] };
    key <AE04>  { [              4,         dollar,     onequarter ] };
    key <AE05>  { [              5,        percent,        onehalf ] };
    key <AE06>  { [              6,      ampersand,  threequarters ] };
    key <AE07>  { [              7,     underscore,       sterling ] };
    key <AE08>  { [              8,      parenleft,      braceleft ] };
    key <AE09>  { [              9,     parenright,     braceright ] };
    key <AE10>  { [              0,     apostrophe                 ] };
    key <AE11>  { [          slash,       question,      backslash ] };
    key <AE12>  { [         degree,     dead_tilde,   dead_cedilla ] };

    key <AD01>  { [              q,              Q                 ] };
    key <AD02>  { [              w,              W                 ] };
    key <AD03>  { [              e,              E,       EuroSign ] };
    key <AD04>  { [              r,              R,      paragraph ] };
    key <AD05>  { [              t,              T                 ] };
    key <AD06>  { [              y,              Y                 ] };
    key <AD07>  { [              u,              U                 ] };
    key <AD08>  { [              i,              I                 ] };
    key <AD09>  { [              o,              O                 ] };
    key <AD10>  { [              p,              P                 ] };
    key <AD11>  { [ dead_diaeresis, dead_circumflex                ] };
    key <AD12>  { [       asterisk,            bar                 ] };
    key <BKSL>  { [           less,        greater                 ] };

    key <AC01>  { [              a,              A                 ] };
    key <AC02>  { [              s,              S,  ssharp, U1E9E ] };
    key <AC03>  { [              d,              D                 ] };
    key <AC04>  { [              f,              F                 ] };
    key <AC05>  { [              g,              G                 ] };
    key <AC06>  { [              h,              H                 ] };
    key <AC07>  { [              j,              J                 ] };
    key <AC08>  { [              k,              K                 ] };
    key <AC09>  { [              l,              L                 ] };
    key <AC10>  { [           plus,      plusminus                 ] };
    key <AC11>  { [     dead_acute,     dead_grave                 ] };

    key <LSGT>  { [   bracketright,    bracketleft,            bar ] };
    key <AB01>  { [              z,              Z,  guillemotleft ] };
    key <AB02>  { [              x,              X, guillemotright ] };
    key <AB03>  { [              c,              C,           cent ] };
    key <AB04>  { [              v,              V                 ] };
    key <AB05>  { [              b,              B                 ] };
    key <AB06>  { [              n,              N                 ] };
    key <AB07>  { [              m,              M,             mu ] };
    key <AB08>  { [          comma,      semicolon                 ] };
    key <AB09>  { [         period,          colon, periodcentered ] };
    key <AB10>  { [          minus,          equal                 ] };

    include "level3(ralt_switch)"
};


// Copied from macintosh_vndr/nl
partial alphanumeric_keys
xkb_symbols "mac" {

    include "latin"

    name[Group1]= "Dutch (Macintosh)";

    include "level3(ralt_switch)"
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/nl(sun_type6)"
};
// Keyboard layouts for Turkey.
// This file distributed without any expressed or implied warranty.
// Nilgün Belma Bugüner <nilgun@belgeler.org>, 2005

// Turkish Q layout
default partial
xkb_symbols "basic" {

    include "latin"

    name[Group1]="Turkish";

    key <AE01>  { [         1,    exclam,        greater,    exclamdown ] };
    key <AE02>  { [         2, apostrophe,      sterling,   twosuperior ] };
    key <AE03>  { [         3,asciicircum,    numbersign, threesuperior ] };
    key <AE04>  { [         4,       plus,        dollar,    onequarter ] };
    key <AE06>  { [         6,  ampersand, threequarters,    VoidSymbol ] };
    key <AE07>  { [         7,      slash,     braceleft,    VoidSymbol ] };
    key <AE08>  { [         8,  parenleft,   bracketleft,    VoidSymbol ] };
    key <AE09>  { [         9, parenright,  bracketright,     plusminus ] };
    key <AE10>  { [         0,      equal,    braceright,        degree ] };
    key <AE11>  { [  asterisk,   question,     backslash,  questiondown ] };
    key <AE12>  { [     minus, underscore,           bar,    VoidSymbol ] };

    key <AD02>  { [         w,          W,    VoidSymbol,    VoidSymbol ] };
    key <AD03>  { [         e,          E,      EuroSign,    VoidSymbol ] };
    key <AD05>  { [         t,          T,         U20BA,    VoidSymbol ] };
    key <AD07>  { [         u,          U,   ucircumflex,   Ucircumflex ] };
    key <AD08>  { type[group1] = "FOUR_LEVEL_ALPHABETIC",
                  [  idotless,          I,   icircumflex,   Icircumflex ] };
    key <AD09>  { [         o,          O,   ocircumflex,   Ocircumflex ] };
    key <AD10>  { [         p,          P,    VoidSymbol,    VoidSymbol ] };
    key <AD11>  { [    gbreve,     Gbreve                               ] };
    key <AD12>  { [udiaeresis, Udiaeresis,    asciitilde,   dead_macron ] };

    key <AC01>  { [         a,          A,   acircumflex,   Acircumflex ] };
    key <AC02>  { [         s,          S,        ssharp,    VoidSymbol ] };
    key <AC03>  { [         d,          D,    VoidSymbol,    VoidSymbol ] };
    key <AC04>  { [         f,          F,   ordfeminine,    VoidSymbol ] };
    key <AC05>  { [         g,          G,    VoidSymbol,    VoidSymbol ] };
    key <AC06>  { [         h,          H,    VoidSymbol,    VoidSymbol ] };
    key <AC08>  { [         k,          K,    VoidSymbol,    VoidSymbol ] };
    key <AC09>  { [         l,          L,    VoidSymbol,    VoidSymbol ] };
    key <AC10>  { [  scedilla,   Scedilla,         acute,    dead_acute ] };
    key <AC11>  { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC",
                  [         i,  Iabovedot,    apostrophe,    dead_caron ] };
    key <TLDE>  { [  quotedbl,     eacute,          less,        degree ] };

    key <BKSL>  { [     comma,  semicolon,         grave,    dead_grave ] };
    key <LSGT>  { [      less,    greater,           bar,     brokenbar ] };
    key <AB08>  { [odiaeresis, Odiaeresis,      multiply,    VoidSymbol ] };
    key <AB09>  { [  ccedilla,   Ccedilla,periodcentered,      division ] };
    key <AB10>  { [    period,      colon, dead_abovedot, dead_abovedot ] };

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};


// Turkish F layout
partial
xkb_symbols "f" {

    include "latin"

    name[Group1]="Turkish (F)";

    key <AE01>  { [         1,     exclam,   onesuperior,    exclamdown ] };
    key <AE02>  { [         2,   quotedbl,   twosuperior,    VoidSymbol ] };
    key <AE03>  { [         3,asciicircum,    numbersign, threesuperior ] };
    key <AE04>  { [         4,     dollar,    onequarter,    VoidSymbol ] };
    key <AE06>  { [         6,  ampersand, threequarters,    VoidSymbol ] };
    key <AE07>  { [         7, apostrophe,     braceleft,    VoidSymbol ] };
    key <AE08>  { [         8,  parenleft,   bracketleft,    VoidSymbol ] };
    key <AE09>  { [         9, parenright,  bracketright,     plusminus ] };
    key <AE10>  { [         0,      equal,    braceright,        degree ] };
    key <AE11>  { [     slash,   question,     backslash,  questiondown ] };
    key <AE12>  { [     minus, underscore,           bar,    VoidSymbol ] };

    key <AD01>  { [         f,          F,            at,    VoidSymbol ] };
    key <AD02>  { [         g,          G,    VoidSymbol,    VoidSymbol ] };
    key <AD03>  { [    gbreve,     Gbreve,    VoidSymbol,    VoidSymbol ] };
    key <AD04>  { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC",
                  [  idotless,          I,     paragraph,    VoidSymbol ] };
    key <AD05>  { [         o,          O,   ocircumflex,   Ocircumflex ] };
    key <AD06>  { [         d,          D,           yen,    VoidSymbol ] };
    key <AD07>  { [         r,          R,    registered,    VoidSymbol ] };
    key <AD08>  { [         n,          N,    VoidSymbol,    VoidSymbol ] };
    key <AD09>  { [         h,          H,        degree,    VoidSymbol ] };
    key <AD10>  { [         p,          P,      sterling,    VoidSymbol ] };
    key <AD11>  { [         q,          Q,dead_diaeresis,dead_abovering ] };
    key <AD12>  { [         w,          W,    asciitilde,    dead_breve ] };

    key <AC01>  { [         u,          U,   ucircumflex,   Ucircumflex ] };
    key <AC02>  { type[group1] = "FOUR_LEVEL_ALPHABETIC",
                  [         i,  Iabovedot,   icircumflex,   Icircumflex ] };
    key <AC03>  { [         e,          E,      EuroSign,    VoidSymbol ] };
    key <AC04>  { [         a,          A,   acircumflex,   Acircumflex ] };
    key <AC05>  { [udiaeresis, Udiaeresis,   ucircumflex,   Ucircumflex ] };
    key <AC06>  { [         t,          T,         U20BA,    VoidSymbol ] };
    key <AC07>  { [         k,          K,    VoidSymbol,    VoidSymbol ] };
    key <AC08>  { [         m,          M,            mu,    VoidSymbol ] };
    key <AC09>  { [         l,          L,    VoidSymbol,    VoidSymbol ] };
    key <AC10>  { [         y,          Y,         acute,    dead_acute ] };
    key <AC11>  { [  scedilla,   Scedilla,    numbersign,    dead_caron ] };
    key <TLDE>  { [      plus,   asterisk,       notsign,     plusminus ] };

    key <BKSL>  { [         x,          X,         grave,    dead_grave ] };
    key <AB01>  { [         j,          J, guillemotleft,    VoidSymbol ] };
    key <AB02>  { [odiaeresis, Odiaeresis,guillemotright,    VoidSymbol ] };
    key <AB03>  { [         v,          V, leftdoublequotemark, VoidSymbol ] };
    key <AB04>  { [         c,          C,          cent,     copyright ] };
    key <AB05>  { [  ccedilla,   Ccedilla,rightdoublequotemark, VoidSymbol ] };
    key <AB06>  { [         z,          Z,    VoidSymbol,    VoidSymbol ] };
    key <AB07>  { [         s,          S,       section,    VoidSymbol ] };
    key <AB08>  { [         b,          B,      multiply,  nobreakspace ] };
    key <AB09>  { [    period,      colon,      division, dead_abovedot ] };
    key <AB10>  { [     comma,  semicolon,periodcentered,    VoidSymbol ] };
    key <LSGT>  { [     less,     greater,           bar,     brokenbar ] };

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};

// Turkish Alt-Q layout
partial
xkb_symbols "alt" {

    include "latin"

    name[Group1]="Turkish (Alt-Q)";

    key <AE07>  { [         7,   ampersand,  lowleftcorner,  upleftcorner ] };
    key <AE08>  { [         8,    asterisk,          leftt,          topt ] };
    key <AE09>  { [         9,   parenleft,         rightt,          bott ] };
    key <AE10>  { [         0,  parenright, lowrightcorner, uprightcorner ] };
    key <AE11>  { [     minus,  underscore, horizlinescan5,       vertbar ] };
    key <AE12>  { [     equal,        plus,  crossinglines                ] };

    key <AD03>  { [         e,           E,       EuroSign,    VoidSymbol ] };
//    key <AD05>    { [         t,           T,      trademark,    VoidSymbol >
    key <AD07>  { [         u,           U,     udiaeresis,    Udiaeresis ] };
    key <AD08>  { [         i,           I,       idotless,     Iabovedot ] };
    key <AD09>  { [         o,           O,     odiaeresis,    Odiaeresis ] };
    key <AC01>  { [         a,           A,    acircumflex,   Acircumflex ] };
    key <AC02>  { [         s,           S,       scedilla,      Scedilla ] };
    key <AC05>  { [         g,           G,         gbreve,        Gbreve ] };

    key <AB03>  { [         c,           C,       ccedilla,      Ccedilla ] };

    include "level3(ralt_switch)"
};


// Kurdish Q layout
// Erdal Ronahi <erdal.ronahi@gmail.com>, 2006
// http://ferheng.org
partial
xkb_symbols "ku" {

   include "tr(basic)"

   name[Group1]="Kurdish (Turkey, Latin Q)";

    key <AD08>  { [          i,           I,     idotless,            I ] };
    key <AD11>  { [          x,           X,       gbreve,       Gbreve ] };
    key <AD12>  { [ucircumflex, Ucircumflex,   asciitilde,  dead_macron ] };
    key <AC11>  { [icircumflex, Icircumflex,   apostrophe,   dead_caron ] };
    key <AB08>  { [ecircumflex, Ecircumflex,   odiaeresis,   Odiaeresis ] };
};

// Kurdish F layout
partial
xkb_symbols "ku_f" {

    include "tr(f)"

    name[Group1]="Kurdish (Turkey, F)";

    key <AD03>  { [          x,           X,       gbreve,       Gbreve ] };
    key <AD04>  { [          i,           I,    paragraph,   VoidSymbol ] };
    key <AD05>  { [          o,           O,  ocircumflex,  Ocircumflex ] };

    key <AC01>  { [ucircumflex, Ucircumflex,   udiaeresis,   Udiaeresis ] };
    key <AC02>  { [icircumflex, Icircumflex,            i,    Iabovedot ] };
    key <AC05>  { [          u,           U,   udiaeresis,   Udiaeresis ] };
    key <AB02>  { [ecircumflex, Ecircumflex,   odiaeresis,   Odiaeresis ] };
};

// Kurdish Alt-Q layout
partial
xkb_symbols "ku_alt" {

    include "tr(alt)"

    name[Group1]="Kurdish (Turkey, Latin Alt-Q)";

    key <AD03>  { [          e,           E,  ecircumflex,  Ecircumflex ] };
    key <AD07>  { [          u,           U,  ucircumflex,  Ucircumflex ] };
    key <AD08>  { [          i,           I,  icircumflex,  Icircumflex ] };
    key <AD09>  { [          o,           O,   odiaeresis,   Odiaeresis ] };
};

// Turkish international Q layout
// Alexis Pellicier <alexis.pellicier@nds.k12.tr>, 2007
partial
xkb_symbols "intl" {

    include "latin"

    name[Group1]="Turkish (intl., with dead keys)";

    key <AE01>  { type[group1] = "FOUR_LEVEL", [         1,    exclam,      onesuperior,    exclamdown ] };
    key <AE02>  { type[group1] = "FOUR_LEVEL", [         2, apostrophe,        sterling,   twosuperior ] };
    key <AE03>  { type[group1] = "FOUR_LEVEL", [         3, dead_circumflex, numbersign, threesuperior ] };
    key <AE04>  { type[group1] = "FOUR_LEVEL", [         4,       plus,          dollar,    onequarter ] };
    key <AE06>  { type[group1] = "FOUR_LEVEL", [         6,  ampersand,   threequarters,    VoidSymbol ] };
    key <AE07>  { type[group1] = "FOUR_LEVEL", [         7,      slash,       braceleft,    VoidSymbol ] };
    key <AE08>  { type[group1] = "FOUR_LEVEL", [         8,  parenleft,     bracketleft,    VoidSymbol ] };
    key <AE09>  { type[group1] = "FOUR_LEVEL", [         9, parenright,    bracketright,     plusminus ] };
    key <AE10>  { type[group1] = "FOUR_LEVEL", [         0,      equal,      braceright,        degree ] };
    key <AE11>  { type[group1] = "FOUR_LEVEL", [  asterisk,   question,       backslash,  questiondown ] };
    key <AE12>  { type[group1] = "FOUR_LEVEL", [     minus, underscore,        division,    VoidSymbol ] };

    key <AD02>  { [         w,          W,     VoidSymbol,    VoidSymbol ] };
    key <AD03>  { [         e,          E,       EuroSign,          cent ] };
    key <AD05>  { [         t,          T,          U20BA,    VoidSymbol ] };
    key <AD07>  { [         u,          U,    ucircumflex,   Ucircumflex ] };
    key <AD08>  { [  idotless,          I,    icircumflex,   Icircumflex ] };
    key <AD09>  { [         o,          O,    ocircumflex,   Ocircumflex ] };
    key <AD10>  { [         p,          P,     VoidSymbol,    VoidSymbol ] };
    key <AD11>  { [    gbreve,     Gbreve, dead_diaeresis                ] };
    key <AD12>  { [udiaeresis, Udiaeresis,     dead_tilde,   dead_macron ] };

    key <AC01>  { [         a,          A,    acircumflex,   Acircumflex ] };
    key <AC02>  { [         s,          S,        section,    VoidSymbol ] };
    key <AC03>  { [         d,          D,     VoidSymbol,    VoidSymbol ] };
    key <AC04>  { [         f,          F,    ordfeminine,    VoidSymbol ] };
    key <AC05>  { [         g,          G,     VoidSymbol,    VoidSymbol ] };
    key <AC06>  { [         h,          H,     VoidSymbol,    VoidSymbol ] };
    key <AC08>  { [         k,          K,     VoidSymbol,    VoidSymbol ] };
    key <AC09>  { [         l,          L,     VoidSymbol,    VoidSymbol ] };
    key <AC10>  { [  scedilla,   Scedilla,     dead_acute,    dead_acute ] };
    key <AC11>  { [         i,  Iabovedot,     apostrophe,    dead_caron ] };

    key <TLDE>  { type[group1] = "FOUR_LEVEL", [  quotedbl,     eacute,       plusminus,        degree ] };
    key <BKSL>  { type[group1] = "FOUR_LEVEL", [     comma,  semicolon,      dead_grave,    dead_grave ] };
    key <LSGT>  { type[group1] = "FOUR_LEVEL", [      less,    greater,             bar,     brokenbar ] };

    key <AB08>  { [odiaeresis, Odiaeresis,       multiply,    VoidSymbol ] };
    key <AB09>  { [  ccedilla,   Ccedilla, periodcentered,      division ] };
    key <AB10>  { type[group1] = "FOUR_LEVEL", [    period,      colon,   dead_abovedot, dead_abovedot ] };

    include "nbsp(level3)"
    include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "olpc" {

    include "tr(intl)"

    name[Group1]= "Turkish";

    key <AE01>  { [         1,      exclam,           VoidSymbol,     VoidSymbol ] };
    key <AE06>  { [         6,   ampersand,           VoidSymbol,     VoidSymbol ] };
    key <AE12>  { type[group1] = "FOUR_LEVEL",
                  [     minus,  underscore,                  bar,     VoidSymbol ] };

    key <AB03>  { [         c,           C,  leftdoublequotemark,     VoidSymbol ] };
    key <AB04>  { [         v,           V, rightdoublequotemark,     VoidSymbol ] };
    key <AB05>  { [         b,           B,           VoidSymbol,     VoidSymbol ] };
    key <AB08>  { [odiaeresis,  Odiaeresis,           VoidSymbol,     VoidSymbol ] };
    key <AB09>  { [  ccedilla,    Ccedilla,             multiply,     VoidSymbol ] };
    key <AB10>  { [    period,       colon,             division,  dead_abovedot ] };

    key <I219> { [       less,     greater,           VoidSymbol,     VoidSymbol ] };
};

// Crimean Tatar (Crimean Turkish) layouts.
// First released (by Ubuntu): 2009-02-24.
// These layouts are not yet standard.  In particular, the mapping of
// the letter 'x' might change in the future.  This letter is not used
// in the current official alphabet, but is included in the layouts for
// foreign words and for shortcuts.
// Reşat SABIQ <tilde.birlik @ gmail . com>, 2009
// Özgür Qarahan <qarahan @ gmail . com>, 2009

// Crimean Tatar (Crimean Turkish) Q layout
partial
xkb_symbols "crh" {

    include "tr(basic)"

    name[Group1]="Crimean Tatar (Turkish Q)";

    key <AE11>  { [         x,          X,        asterisk,        question ] };

    key <AC04>  { [         f,          F,          iacute,          Iacute ] };
    key <AC07>  { [         j,          J,          ibreve,          Ibreve ] };
    key <TLDE>  { [  quotedbl,  backslash,            less,          degree ] };

    key <AB02>  { [    ntilde,     Ntilde,  guillemotright,         greater ] };
};

// Crimean Tatar (Crimean Turkish) F layout
partial
xkb_symbols "crh_f" {

    include "tr(f)"

    name[Group1]="Crimean Tatar (Turkish F)";

    key <AE11>  { [         x,          X,           slash,        question ] };

    key <AD04>  { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC",
                  [  idotless,          I,          iacute,          Iacute ] };

    key <AC07>  { [         k,          K,          ibreve,          Ibreve ] };
    key <TLDE>  { [      plus,   asterisk,       backslash,       plusminus ] };

    key <BKSL>  { [    ntilde,     Ntilde,           grave,      dead_grave ] };
};

// Crimean Tatar (Crimean Turkish) Alt-Q layout
partial
xkb_symbols "crh_alt" {

    include "tr(alt)"

    name[Group1]="Crimean Tatar (Turkish Alt-Q)";

    key <AC04>  { [         f,          F,          iacute,          Iacute ] };
    key <AC07>  { [         j,          J,          ibreve,          Ibreve ] };

    key <AB06>  { [         n,          N,          ntilde,          Ntilde ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/tr(sun_type6)"
};

// Old Turkic Experimental Keyboard Layout
// Created by Emir SARI <bitigchi@me.com>
partial alphanumeric_keys
    xkb_symbols "otk" {

    name[Group1]="Old Turkic";

    key <AE01> { [    U10C48,  NoSymbol,     1,      exclam ] };
    key <AE02> { [    U10C05,  NoSymbol,     2,    quotedbl ] };
    key <AE03> { [    U10C02,  NoSymbol,     3, asciicircum ] };
    key <AE04> { [    U10C47,  NoSymbol,     4,      dollar ] };
    key <AE05> { [    U10C21,  NoSymbol,     5,     percent ] };
    key <AE06> { [    U10C26,    U10C27,     6,   ampersand ] };
    key <AE07> { [    U10C36,    U10C37,     7,  apostrophe ] };
    key <AE08> { [    U10C38,    U10C39,     8,   parenleft ] };
    key <AE09> { [    U10C1C,    U10C1D,     9,  parenright ] };
    key <AE10> { [    U10C31,     U2E2E,     0,       equal ] };
    key <AE11> { [ backslash,     colon, slash,    question ] };
    key <AE12> { [     comma, semicolon, minus,  underscore ] };

    key <AD01> { [ U10C13, NoSymbol,           at, NoSymbol ] };
    key <AD02> { [ U10C11,   U10C12,   numbersign, NoSymbol ] };
    key <AD03> { [ U10C0F,   U10C10,       dollar, NoSymbol ] };
    key <AD04> { [ U10C0D,   U10C0E,    braceleft, NoSymbol ] };
    key <AD05> { [ U10C23, NoSymbol,   braceright, NoSymbol ] };
    key <AD06> { [ U10C14,   U10C15,  bracketleft, NoSymbol ] };
    key <AD07> { [ U10C43,   U10C44, bracketright, NoSymbol ] };
    key <AD08> { [ U10C3A,   U10C3B,    parenleft, NoSymbol ] };
    key <AD09> { [ U10C3C, NoSymbol,   parenright, NoSymbol ] };
    key <AD10> { [ U10C2F,   U10C30,    backslash, NoSymbol ] };
    key <AD11> { [ U10C32,   U10C33,          bar, NoSymbol ] };
    key <AD12> { [ U10C2A,   U10C2B,   asciitilde, NoSymbol ] };

    key <AC01> { [ U10C00,   U10C01,   NoSymbol, NoSymbol ] };
    key <AC02> { [ U10C07,   U10C08,   NoSymbol, NoSymbol ] };
    key <AC03> { [ U10C06, NoSymbol,   EuroSign, NoSymbol ] };
    key <AC04> { [ U10C03,   U10C04, dead_breve, NoSymbol ] };
    key <AC05> { [ U10C24,   U10C25, dead_acute, NoSymbol ] };
    key <AC06> { [ U10C45,   U10C46,      U20BA, NoSymbol ] };
    key <AC07> { [ U10C34,   U10C35,   NoSymbol, NoSymbol ] };
    key <AC08> { [ U10C22, NoSymbol,   NoSymbol, NoSymbol ] };
    key <AC09> { [ U10C1E,   U10C1F,   sterling, NoSymbol ] };
    key <AC10> { [ U10C16,   U10C17,        yen, NoSymbol ] };
    key <AC11> { [ U10C41,   U10C42,     endash, NoSymbol ] };
    key <BKSL> { [ U10C3F,   U10C40,     emdash, NoSymbol ] };

    key <TLDE> { [ quotedbl, guillemotleft, guillemotright, NoSymbol ] };
    key <AB01> { [   U10C28,        U10C29,       NoSymbol, NoSymbol ] };
    key <AB02> { [   U10C2D,        U10C2E,         U10C2C, NoSymbol ] };
    key <AB03> { [   U10C3D,      NoSymbol,      copyright, NoSymbol ] };
    key <AB04> { [   U10C09,        U10C0A,     registered, NoSymbol ] };
    key <AB05> { [   U10C0B,        U10C0C,       NoSymbol, NoSymbol ] };
    key <AB06> { [   U10C1A,        U10C1B,       NoSymbol, NoSymbol ] };
    key <AB07> { [   U10C3E,      NoSymbol,       NoSymbol, NoSymbol ] };
    key <AB08> { [   U10C20,      NoSymbol,       multiply, NoSymbol ] };
    key <AB09> { [   U10C18,        U10C19,       division, NoSymbol ] };
    key <AB10> { [    U2E31,        period,          minus, NoSymbol ] };
    key <LSGT> { [    less,        greater,           plus, NoSymbol ] };

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};
// Iraque keyboard layout,

// 3-Level layout

default partial alphanumeric_keys
xkb_symbols "basic" {
    include "ara(basic)"
    name[Group1]= "Iraqi";
};

partial alphanumeric_keys
xkb_symbols "ku" {
    include "tr(ku)"
    name[Group1]= "Kurdish (Iraq, Latin Q)";
};

partial alphanumeric_keys
xkb_symbols "ku_f" {
    include "tr(ku_f)"
    name[Group1]= "Kurdish (Iraq, F)";
};

partial alphanumeric_keys
xkb_symbols "ku_alt" {
    include "tr(ku_alt)"
    name[Group1]= "Kurdish (Iraq, Latin Alt-Q)";
};

partial alphanumeric_keys
xkb_symbols "ku_ara" {
    include "ir(ku_ara)"
    name[Group1]= "Kurdish (Iraq, Arabic-Latin)";
};
// Keymap for Thaana/Dhivehi script (Dhivehi language).

default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]="Dhivehi";

    key <TLDE> { [           grave,      asciitilde      ]       };
    key <AE01> { [               1,          exclam      ]       };
    key <AE02> { [               2,              at      ]       };
    key <AE03> { [               3,      numbersign      ]       };
    key <AE04> { [               4,          dollar      ]       };
    key <AE05> { [               5,         percent      ]       };
    key <AE06> { [               6,     asciicircum      ]       };
    key <AE07> { [               7,       ampersand      ]       };
    key <AE08> { [               8,        asterisk      ]       };
    key <AE09> { [               9,       parenleft      ]       };
    key <AE10> { [               0,      parenright      ]       };
    key <AE11> { [           minus,      underscore      ]       };
    key <AE12> { [           equal,            plus      ]       };

    key <AD01> { [	0x10007B0,	0x10007A4      ]       };
    key <AD02> { [	0x1000787,	0x10007A2      ]       };
    key <AD03> { [	0x10007AC,     	0x10007AD      ]       };
    key <AD04> { [	0x1000783,     	0x100079C      ]       };
    key <AD05> { [	0x100078C,      0x1000793      ]       };
    key <AD06> { [	0x1000794, 	0x10007A0      ]       };
    key <AD07> { [	0x10007AA,      0x10007AB      ]       };
    key <AD08> { [	0x10007A8,      0x10007A9      ]       };
    key <AD09> { [	0x10007AE,      0x10007AF      ]       };
    key <AD10> { [	0x1000795,    	division       ]       };
    key <AD11> {	[ 	bracketleft,	braceleft      ]	};
    key <AD12> {	[ 	bracketright,	braceright     ]	};

    key <AC01> { [	0x10007A6,       0x10007A7     ]       };
    key <AC02> { [	0x1000790,       0x1000781     ]       };
    key <AC03> { [	0x100078B,       0x1000791     ]       };
    key <AC04> { [	0x100078A,       0x100fdf2     ]       };
    key <AC05> { [	0x100078E,       0x10007A3     ]       };
    key <AC06> { [	0x1000780,	 0x1000799     ]       };
    key <AC07> { [	0x1000796,       0x100079B     ]       };
    key <AC08> { [	0x1000786,       0x100079A     ]       };
    key <AC09> { [	0x100078D,       0x1000785     ]       };
    key <AC10> { [	semicolon,       colon         ]       };
    key <AC11> { [	apostrophe,      quotedbl      ]       };
    key <BKSL> { [ 	backslash,	 bar           ]       };

    key <LSGT> { [        bar,      	brokenbar	]       };
    key <AB01> { [ 	0x1000792,    	0x10007A1       ]       };
    key <AB02> { [	multiply,      	0x1000798	  ]       };
    key <AB03> { [	0x1000797,     	0x100079D	  ]       };
    key <AB04> { [	0x1000788,      0x10007A5	  ]       };
    key <AB05> { [	0x1000784,      0x100079E         ]       };
    key <AB06> { [	0x1000782, 	0x100078F 	  ]       };
    key <AB07> { [	0x1000789,    	0x100079F         ]       };
    key <AB08> { [	Arabic_comma,   less              ]       };
    key <AB09> { [	period,         greater           ]       };
    key <AB10> { [	slash, 		Arabic_question_mark ]       };

    modifier_map Shift  { Shift_L };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L };
    modifier_map Mod3   { Mode_switch };
};

// Any additional keys (if need be added) should appear and function exactly as it does on the US_en keyboard.
//
// Created by Bernardo Innocenti <bernie@codewiz.org>
//
// Additional symbol definitions for the OLPC keyboards
//

alphanumeric_keys modifier_keys
xkb_symbols "olpc" {
    include "pc(pc105)"

    modifier_map Mod1 { KP_Home   }; // KP_Home  is the "square" game key
    modifier_map Mod3 { KP_End    }; // KP_End   is the "tick" game key
    modifier_map Mod4 { KP_Prior  }; // KP_Prior is the "O" game key
    modifier_map Mod5 { KP_Next   }; // KP_Next  is the "X" game key

    key <I220> { [ XF86Search    ] }; // search key (unpopulated on olpcm, harmless)
    key <I221> { [ XF86Meeting   ] }; // fn+search key (unpopulated on olpcm, harmless)
    key <I236> { [ XF86Start     ] }; // gear key (fn+space)
    key <I147> { [ XF86TaskPane  ] }; // frame key (the top-right key) (unpopulated on olpcm, harmless)
    key <I224> { [ XF86Messenger ] }; // overlay key (next to frame key) (unpopulated on olpcm, harmless)
};
// EAK (Easy Access keyboards: Internet, Multimedia, PDA)
// Copyright (C) 2002 Stanislav Brabec <sbrabec@suse.cz>
//
// Based on the LinEAK project.
// LinEAK - Linux support for Easy Access and Internets
// Copyright (C) 2001, 2002 Mark Smulders <Mark@PIRnet.nl>

// Usage in XF86Config:
// Option "XkbLayout"	"my_kb_layout"
// Option "XkbVariant"	"my_kb_variant"
// Option "XkbModel"	"my_eak_type"
// Option "XkbRules"	"xfree86"
// Simple command line usage:
// setxkbmap 'my_kb_layout' -variant 'my_kb_variant' -model 'my_eak_type'

// Very common set of media keys.
hidden partial alphanumeric_keys
xkb_symbols "media_common" {
    key <I01>   {       [ XF86AudioMedia        ] };
    key <I10>   {       [ XF86AudioPrev         ] };
    key <I19>   {       [ XF86AudioNext         ] };
    key <I20>   {       [ XF86AudioMute         ] };
    key <I22>   {       [ XF86AudioPlay, XF86AudioPause ] };
    key <I24>   {       [ XF86AudioStop, XF86Eject ] };
    key <I2E>   {       [ XF86AudioLowerVolume  ] };
    key <I30>   {       [ XF86AudioRaiseVolume  ] };
    key <K5A>   {       [ XF86Eject             ] };
    key <K6C>   {       [ XF86Eject             ] };
};

// Popular web navigation keys.
hidden partial alphanumeric_keys
xkb_symbols "nav_common" {
    key <I21>   {       [ XF86Calculator        ] };
    key <I32>   {       [ XF86WWW               ] };
    key <I65>   {       [ XF86Search            ] };
    key <I66>   {       [ XF86Favorites         ] };
    key <I67>   {       [ XF86Reload            ] };
    key <I68>   {       [ XF86Stop              ] };
    key <I69>   {       [ XF86Forward           ] };
    key <I6A>   {       [ XF86Back              ] };
    key <I6B>   {       [ XF86MyComputer        ] };
    key <I6C>   {       [ XF86Mail              ] };
    key <I6D>   {       [ XF86AudioMedia        ] };
};

// ACPI Standard
hidden partial alphanumeric_keys
xkb_symbols "acpi_common" {
    key <I5E>	{	[ XF86PowerOff		]	};
    key <I5F>	{	[ XF86Standby		]	};
    key <I63>	{	[ XF86WakeUp		]	};
    key <I74>	{	[ XF86Battery		]	};
    key <I76>	{	[ XF86WLAN		]	};
    key <I16>	{	[ XF86Sleep		]	};
};

// Combined sections, for simplicity.
hidden partial alphanumeric_keys
xkb_symbols "media_nav_common" {
    include "inet(media_common)"
    include "inet(nav_common)"
};

hidden partial alphanumeric_keys
xkb_symbols "media_nav_acpi_common" {
    include "inet(media_common)"
    include "inet(nav_common)"
    include "inet(acpi_common)"
};

hidden partial alphanumeric_keys
xkb_symbols "nav_acpi_common" {
    include "inet(nav_common)"
    include "inet(acpi_common)"
};

hidden partial alphanumeric_keys
xkb_symbols "media_acpi_common" {
    include "inet(media_common)"
    include "inet(acpi_common)"
};

// Evdev Standardized Keycodes
partial alphanumeric_keys
xkb_symbols "evdev" {
    key <MUTE>   {      [ XF86AudioMute         ]       };
    key <VOL->   {      [ XF86AudioLowerVolume  ]       };
    key <VOL+>   {      [ XF86AudioRaiseVolume  ]       };
    key <POWR>   {      [ XF86PowerOff          ]       };
    key <STOP>   {      [ Cancel                ]       };
    key <AGAI>   {      [ Redo                  ]       };
    key <PROP>   {      [ SunProps              ]       };
    key <UNDO>   {      [ Undo                  ]       };
    key <FRNT>   {      [ SunFront              ]       };
    key <COPY>   {      [ XF86Copy              ]       };
    key <OPEN>   {      [ XF86Open              ]       };
    key <PAST>   {      [ XF86Paste             ]       };
    key <FIND>   {      [ Find                  ]       };
    key <CUT>    {      [ XF86Cut               ]       };
    key <HELP>   {      [ Help                  ]       };
    key <LNFD>   {      [ Linefeed              ]       };

// Commented out because HZTG has same keycode as TLDE
//    key <HZTG>   {      [ Zenkaku_Hankaku       ]       };

    key <HKTG>   {      [ Hiragana_Katakana     ]       };
    key <HENK>   {      [ Henkan                ]       };
    key <MUHE>   {      [ Muhenkan              ]       };
    key <KATA>   {      [ Katakana              ]       };
    key <HIRA>   {      [ Hiragana              ]       };
    key <RO>     {      [ Romaji                ]       };

    key <HNGL>   {      [ Hangul                ]       };
    key <HJCV>   {      [ Hangul_Hanja          ]       };
    key <FK21>   {      [ XF86TouchpadToggle    ]       };
    key <FK22>   {      [ XF86TouchpadOn        ]       };
    key <FK23>   {      [ XF86TouchpadOff       ]       };

    key <FK20>   {      [ XF86AudioMicMute      ]       };

//  key <I120>   {      [ ]       }; // KEY_MACRO
    key <I126>   {      [ plusminus             ]       };
    key <I128>   {      [ XF86LaunchA           ]       };
    key <I147>   {      [ XF86MenuKB            ]       };
    key <I148>   {      [ XF86Calculator        ]       };
//  key <I149>   {      [ ]       }; // KEY_SETUP
    key <I150>   {      [ XF86Sleep             ]       };
    key <I151>   {      [ XF86WakeUp            ]       };
    key <I152>   {      [ XF86Explorer          ]       };
    key <I153>   {      [ XF86Send              ]       };
//  key <I154>   {      [ ]       }; // KEY_DELETEFILE
    key <I155>   {      [ XF86Xfer              ]       };
    key <I156>   {      [ XF86Launch1           ]       };
    key <I157>   {      [ XF86Launch2           ]       };
    key <I158>   {      [ XF86WWW               ]       };
    key <I159>   {      [ XF86DOS               ]       };
    key <I160>   {      [ XF86ScreenSaver       ]       };
    key <I161>   {      [ XF86RotateWindows     ]       };
    key <I162>   {      [ XF86TaskPane          ]       };
    key <I163>   {      [ XF86Mail              ]       };
    key <I164>   {      [ XF86Favorites         ]       };
    key <I165>   {      [ XF86MyComputer        ]       };
    key <I166>   {      [ XF86Back              ]       };
    key <I167>   {      [ XF86Forward           ]       };
//  key <I168>   {      [ ]       }; // KEY_CLOSECD (opposite of eject)
    key <I169>   {      [ XF86Eject             ]       };
    key <I170>   {      [ XF86Eject, XF86Eject  ]       };
    key <I171>   {      [ XF86AudioNext         ]       };
    key <I172>   {      [ XF86AudioPlay, XF86AudioPause ] };
    key <I173>   {      [ XF86AudioPrev         ]       };
    key <I174>   {      [ XF86AudioStop, XF86Eject ]    };
    key <I175>   {      [ XF86AudioRecord       ]       };
    key <I176>   {      [ XF86AudioRewind       ]       };
    key <I177>   {      [ XF86Phone             ]       };
//  key <I178>   {      [ ]       }; // KEY_ISO
    key <I179>   {      [ XF86Tools             ]       };
    key <I180>   {      [ XF86HomePage          ]       };
    key <I181>   {      [ XF86Reload           ]       };
    key <I182>   {      [ XF86Close             ]       };
//  key <I183>   {      [ ]       }; // KEY_MOVE
//  key <I184>   {      [ ]       }; // KEY_EDIT
    key <I185>   {      [ XF86ScrollUp          ]       };
    key <I186>   {      [ XF86ScrollDown        ]       };
    key <I187>   {      [ parenleft             ]       };
    key <I188>   {      [ parenright            ]       };
    key <I189>   {      [ XF86New               ]       };
    key <I190>   {      [ Redo                  ]       };
    key <I192>   {      [ XF86LaunchA           ]       };
    key <I193>   {      [ XF86LaunchC           ]       };
    key <I194>   {      [ XF86LaunchD           ]       };
    key <I195>   {      [ XF86LaunchE           ]       };
    key <I196>   {      [ XF86LaunchF           ]       };
    key <I208>   {      [ XF86AudioPlay         ]       };
    key <I209>   {      [ XF86AudioPause        ]       };
    key <I210>   {      [ XF86Launch3           ]       };
    key <I211>   {      [ XF86Launch4           ]       };
    key <I212>   {      [ XF86LaunchB           ]       };
    key <I213>   {      [ XF86Suspend           ]       };
    key <I214>   {      [ XF86Close             ]       };
    key <I215>   {      [ XF86AudioPlay         ]       };
    key <I216>   {      [ XF86AudioForward      ]       };
//  key <I217>   {      [ ]       }; // KEY_BASSBOOST
    key <I218>   {      [ Print                 ]       };
//  key <I219>   {      [ ]       }; // KEY_HP
    key <I220>   {      [ XF86WebCam            ]       };
    key <I221>   {      [ XF86AudioPreset       ]       };
//  key <I222>   {      [ ]       }; // KEY_QUESTION
    key <I223>   {      [ XF86Mail              ]       };
    key <I224>   {      [ XF86Messenger         ]       }; // KEY_CHAT
    key <I225>   {      [ XF86Search            ]       };
    key <I226>   {      [ XF86Go                ]       }; // KEY_CONNECT
    key <I227>   {      [ XF86Finance           ]       };
    key <I228>   {      [ XF86Game              ]       }; // KEY_SPORT
    key <I229>   {      [ XF86Shop              ]       };
//  key <I230>   {      [ ]       }; // KEY_ALTERASE
    key <I231>   {      [ Cancel                ]       };
    key <I232>   {      [ XF86MonBrightnessDown ]       };
    key <I233>   {      [ XF86MonBrightnessUp   ]       };
    key <I234>   {      [ XF86AudioMedia        ]       };
    key <I235>   {      [ XF86Display           ]       };
    key <I236>   {      [ XF86KbdLightOnOff     ]       }; // KEY_KBDILLUMTOGGLE
    key <I237>   {      [ XF86KbdBrightnessDown ]       }; // KEY_KBDILLUMDOWN
    key <I238>   {      [ XF86KbdBrightnessUp   ]       }; // KEY_KBDILLUMUP
    key <I239>   {      [ XF86Send              ]       };
    key <I240>   {      [ XF86Reply             ]       };
    key <I241>   {      [ XF86MailForward       ]       };
    key <I242>   {      [ XF86Save              ]       };
    key <I243>   {      [ XF86Documents         ]       };
    key <I244>   {      [ XF86Battery           ]       };
    key <I245>   {      [ XF86Bluetooth         ]       };
    key <I246>   {      [ XF86WLAN              ]       };
//  key <I249>   {      [ ]       }; // KEY_VIDEO_NEXT  --  drive next video source
//  key <I250>   {      [ ]       }; // KEY_VIDEO_PREV  --  drive previous video source
    key <I251>   {      [ XF86MonBrightnessCycle ]      }; // KEY_BRIGHTNESS_CYCLE  --  bright up, max++ == min
//  key <I252>   {      [ ]       }; // KEY_BRIGHTNESS_ZERO  --  brightness off
//  key <I253>   {      [ ]       }; // KEY_DISPLAY_OFF  --  turn off display
    key <I254>   {      [ XF86WWAN              ]       }; // KEY_WWAN
    key <I255>   {      [ XF86RFKill            ]       }; // KEY_RFKILL

    key <I372>  {       [ XF86Favorites          ]       };
    key <I380>  {       [ XF86FullScreen         ]       };
    key <I382>  {       [ XF86Keyboard           ]       };
    key <I442>  {       [ dollar                 ]       };
    key <I443>  {       [ EuroSign               ]       };
    key <I569>  {       [ XF86RotationLockToggle ]       };

    key <FK13>   {      [ XF86Tools         ]       };
    key <FK14>   {      [ XF86Launch5       ]       };
    key <FK15>   {      [ XF86Launch6       ]       };
    key <FK16>   {      [ XF86Launch7       ]       };
    key <FK17>   {      [ XF86Launch8       ]       };
    key <FK18>   {      [ XF86Launch9       ]       };
};


// Acer

// Acer AirKey V
partial alphanumeric_keys
xkb_symbols "airkey" {
    include "inet(acpi_common)"
    key <I13>	{	[ XF86AudioNext		]	};
    key <I15>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I16>	{	[ XF86Mail		]	};
    key <I18>	{	[ XF86AudioPrev		]	};
    key <I19>	{	[ XF86AudioMute		]	};
    key <I24>	{	[ XF86WWW		]	};
    key <I26>	{	[ XF86AudioLowerVolume	]	};
    key <I2D>	{	[ XF86AudioRaiseVolume	]	};
    key <I2F>	{	[ XF86Terminal		]	};
    key <I31>	{	[ XF86AudioStop, XF86Eject ]	};
};

// Acer C300 laptop
partial alphanumeric_keys
xkb_symbols "acer_c300" {
    include "inet(nav_common)"
    key <I17>   {       [ F14                   ]       };
    key <I1F>   {       [ F13                   ]       };
    key <I20>   {       [ XF86AudioMute         ]       };
    key <I2E>   {       [ XF86AudioLowerVolume  ]       };
    key <I30>   {       [ XF86AudioRaiseVolume  ]       };
    key <I5E>   {       [ XF86Launch2           ]       };
    key <I75>   {       [ Help                  ]       };
    key <IR7C>  {       [ XF86Launch1           ]       };
};

// Acer Ferrari 4000 Keyboard
// From Alex Dubov <oakad@yahoo.com>
partial alphanumeric_keys
xkb_symbols "acer_ferrari4k" {
    include "inet(media_nav_common)"
    key <I24>   {       [ dollar                ]       };
    key <I25>   {       [ EuroSign              ]       };
    key <I26>   {       [ XF86Display           ]       };
    // Missing keycodes - set-up with setkeycodes
    key <I70>   {       [ Help                  ]       };
    key <I71>   {       [ XF86Launch1           ]       };
    key <I72>   {       [ XF86Launch2           ]       };
    key <I73>   {       [ XF86Launch3           ]       };
    key <I74>   {       [ XF86Launch4           ]       };
};

// Acer laptop (Generic layout for Acer laptops from 2004 onwards)
// From Carlos Corbacho <cathectic@gmail.com>
// Keys marked (HAL) require HAL 0.5.10 (or newer) to be set up correctly
// (Your laptop must also be added to hal-info)
// (Not all these keys will be available on every Acer laptop)
partial alphanumeric_keys
xkb_symbols "acer_laptop" {
    include "inet(media_nav_acpi_common)"
    key <I17>   {       [ XF86Launch2           ]        }; // "P" or "P2" (HAL)
    key <I1F>   {       [ XF86Launch1           ]        }; // "e" or "P1" (HAL)

    // Hotkeys (Function)
    // Launch Keys
    // Device keys
    key <I56>   {       [ XF86Display           ]        }; // Fn+F5 (HAL)
    key <I71>   {       [ XF86Launch4           ]        }; // Fn+F3 (HAL)
    key <I72>   {       [ XF86LaunchB           ]        }; // Bluetooth (HAL)
    key <I73>   {       [ XF86LaunchA           ]        }; // Wireless (HAL)
    key <I75>   {       [ Help                  ]        }; // Fn+F1 (HAL)
    key <I79>   {       [ XF86Launch5           ]        }; // Fn+F7 (HAL)
    key <K66>   {       [ XF86Launch3           ]        }; // Fn+F2 (HAL)

    // Special Characters
    // To avoid setting a precedent/standard that will be broken in later
    // versions of HAL, these keys are commented out for now. When they are no
    // longer marked 'FIXME' and have saner keycodes, these two entries can be
    // fixed and permanently uncommented. In the meantime, just uncomment these
    // to make the keys work.
//  key <K5D>   {       [ EuroSign              ]        }; // Euro (HAL)
//  key <K5E>   {       [ dollar                ]        }; // Dollar (HAL)
};


// Azona

// Azona RF2300 wireless Internet
partial alphanumeric_keys
xkb_symbols "azonaRF2300" {
    // From Radics Laszlo <garaboncias@mailbox.hu>
    include "inet(nav_acpi_common)"
    key <I02>   {       [ XF86HomePage          ]       };
    key <I17>   {       [ XF86AudioStop         ]       };
    key <I1E>   {       [ XF86AudioRaiseVolume  ]       };
    key <I1F>   {       [ XF86AudioPlay, XF86AudioPause ] };
    key <I22>   {       [ XF86AudioNext         ]       };
    key <I24>   {       [ XF86AudioPrev         ]       };
    key <I25>   {       [ XF86AudioLowerVolume  ]       };
    key <I26>   {       [ XF86AudioMute         ]       };
    key <I3C>   {       [ XF86Copy              ]       };
    key <I78>   {       [ XF86Cut               ]       };
//  key <RCTL>  {       [ XF86Paste             ]       };
};


// Brother

// Brother Internet
partial alphanumeric_keys
xkb_symbols "brother" {
    include "inet(acpi_common)"
    key <I10>	{	[ XF86ScrollUp		]	};
    key <I12>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I17>	{	[ XF86AudioPrev		]	};
    key <I18>	{	[ XF86ScrollDown	]	};
    key <I19>	{	[ XF86ZoomOut		]	};
    key <I1E>	{	[ XF86AudioMute		]	};
    key <I21>	{	[ XF86WWW		]	};
    key <I22>	{	[ Menu			]	};
    key <I23>	{	[ XF86AudioStop		]	};
    key <I24>	{	[ XF86Calculator	]	};
    key <I25>	{	[ XF86Xfer		]	};
    key <I26>	{	[ XF86Mail		]	};
    key <I2E>	{	[ XF86AudioNext		]	};
    key <I30>	{	[ XF86AudioRaiseVolume	]	};
    key <I32>	{	[ XF86ZoomIn		]	};
    key <I68>	{	[ XF86AudioLowerVolume	]	};
};


// BTC

// BTC 5113RF Multimedia
partial alphanumeric_keys
xkb_symbols "btc5113rf" {
    include "inet(acpi_common)"
    key <I10>	{	[ XF86AudioStop		]	};
    key <I12>	{	[ XF86AudioMute		]	};
    key <I19>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I1E>	{	[ XF86AudioRaiseVolume	]	};
    key <I20>	{	[ XF86Favorites		]	};
    key <I21>	{	[ XF86Eject		]	};
    key <I22>	{	[ XF86AudioPrev		]	};
    key <I24>	{	[ XF86AudioNext		]	};
    key <I25>	{	[ XF86AudioLowerVolume	]	};
    key <I26>	{	[ XF86Back		]	};
    key <I30>	{	[ XF86WWW		]	};
    key <I32>	{	[ XF86Search		]	};
};

// BTC 9000
partial alphanumeric_keys
xkb_symbols "btc9000" {
    include "inet(acpi_common)"
    key <I10>	{	[ XF86AudioStop		]	};
    key <I12>	{	[ XF86AudioMute		]	};
    key <I19>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I1E>	{	[ XF86AudioRaiseVolume	]	};
    key <I20>	{	[ XF86Favorites		]	};
    key <I21>	{	[ XF86AudioMedia	]	};
    key <I22>	{	[ XF86AudioPrev		]	};
    key <I24>	{	[ XF86AudioNext		]	};
    key <I25>	{	[ XF86AudioLowerVolume	]	};
    key <I26>	{	[ XF86Reload		]	};
    key <I2E>	{	[ XF86Mail		]	};
    key <I30>	{	[ XF86HomePage		]	};
    key <I32>	{	[ XF86Search		]	};
};

// BTC 9000A
partial alphanumeric_keys
xkb_symbols "btc9000a" {
    include "inet(acpi_common)"
    key <I10>	{	[ XF86AudioStop		]	};
    key <I12>	{	[ XF86AudioMute		]	};
    key <I19>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I1E>	{	[ XF86AudioRaiseVolume	]	};
    key <I20>	{	[ XF86Favorites		]	};
    key <I21>	{	[ XF86Eject		]	};
    key <I22>	{	[ XF86AudioPrev		]	};
    key <I24>	{	[ XF86AudioNext		]	};
    key <I25>	{	[ XF86AudioLowerVolume	]	};
    key <I26>	{	[ XF86HomePage		]	};
    key <I2E>	{	[ Help			]	};
    key <I30>	{	[ XF86WWW		]	};
    key <I32>	{	[ XF86Search		]	};
};

// BTC 9001AH
xkb_symbols "btc9001ah" {
    include "inet(acpi_common)"
    key <I02>   {       [ XF86HomePage          ]       };
    key <I17>   {       [ XF86AudioStop         ]       };
    key <I1E>   {       [ XF86AudioRaiseVolume  ]       };
    key <I1F>   {       [ XF86AudioPlay, XF86AudioPause ] };
    key <I22>   {       [ XF86AudioNext         ]       };
    key <I24>   {       [ XF86AudioPrev         ]       };
    key <I25>   {       [ XF86AudioLowerVolume  ]       };
    key <I26>   {       [ XF86AudioMute         ]       };
    key <I6C>   {       [ XF86Mail              ]       };
    key <RWIN>  {       [ XF86Eject             ]       };
};

// BTC 5090
partial alphanumeric_keys
xkb_symbols "btc5090" {
    include "inet(media_nav_acpi_common)"
    key <I26>   {       [ XF86Start             ]       };
    key <I33>   {       [ XF86Eject             ]       };
};

// BTC 9019U
partial alphanumeric_keys
xkb_symbols "btc9019u" {
    include "inet(media_nav_acpi_common)"
    key <FK17> {	[ XF86Search		]	};
    key <I02>  {	[ XF86HomePage		]	};
};


// Cherry

// Cherry Blue Line CyBo@rd
partial alphanumeric_keys
xkb_symbols "cherryblue" {
    include "inet(nav_common)"
    key <FK16>	{	[ XF86Reload		]	};
    key <I02>	{	[ XF86HomePage		]	};
    key <I17>	{	[ XF86AudioStop		]	};
    key <I1E>	{	[ XF86AudioRaiseVolume	]	};
    key <I1F>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I22>	{	[ XF86AudioNext		]	};
    key <I24>	{	[ XF86AudioPrev		]	};
    key <I25>	{	[ XF86AudioLowerVolume	]	};
    key <I26>	{	[ XF86AudioMute		]	};
    key <I63>	{	[ XF86Standby		]	};
    key <PRSC>	{	[ XF86Terminal		]	};
    key <IR7C>	{	[ XF86Go		]	};
};

// Cherry CyMotion Master XPress
partial alphanumeric_keys
xkb_symbols "cherryblueb" {
    include "inet(media_nav_common)"
    key <FK16>  {       [ XF86Reload            ]       };
    key <I02>   {       [ XF86HomePage          ]       };
    key <I07>   {       [ XF86Forward           ]       };
    key <I08>   {       [ XF86Back              ]       };
    key <I0A>   {       [ XF86Copy              ]       };
    key <I0B>	{	[ XF86ScrollUp		]	};
    key <I12>   {       [ XF86ScrollDown        ]       };
    key <I17>   {       [ XF86Cut               ]       };
    key <I18>   {       [ XF86Paste             ]       };
    key <I1E>   {       [ XF86AudioRaiseVolume  ]       };
    key <I25>   {       [ XF86AudioLowerVolume  ]       };
    key <I26>   {       [ XF86AudioMute         ]       };
    key <I2C>   {       [ XF86Book              ]       };
    key <I32>   {       [ XF86Finance           ]       };
    key <I63>   {       [ XF86Standby                   ] };
    key <I67>   {       [ XF86AudioRewind       ]       };
    key <I70>   {       [ XF86Eject             ]       };
    key <I71>   {       [ XF86Book              ]       };
    key <I72>   {       [ XF86Book              ]       };
    key <PRSC>  {       [ XF86Terminal          ]       };
    key <IR7C>  {       [ XF86Go                ]       };
};

// Cherry Blue Line CyBo@rd (alt.)
partial alphanumeric_keys
xkb_symbols "cherrybluea" {
    include "inet(media_nav_acpi_common)"
    key <I6D>	{	[ XF86Go		]	};
};

// Cherry CyBo@rd USB-Hub
partial alphanumeric_keys
xkb_symbols "cherrycyboard" {
    include "inet(media_nav_acpi_common)"
    key <FK17>    {   [ XF86Search        ]   };
    key <I02> {   [ XF86HomePage      ]   };
    key <K67> {   [ XF86Terminal      ]   };
    key <IR7C>    {   [ XF86AudioMedia    ]   };
};

// Cherry CyMotion Expert
partial alphanumeric_keys
xkb_symbols "cherrycmexpert" {
    include "inet(cherryblueb)"
    include "inet(acpi_common)"
    key <FK15>	{	[ XF86Mail		]	};
};


// Chicony

// Chicony Internet
partial alphanumeric_keys
xkb_symbols "chicony" {
    include "inet(acpi_common)"
    key <I12>	{	[ XF86AudioMute		]	};
    key <I17>	{	[ XF86Mail		]	};
    key <I19>	{	[ XF86AudioLowerVolume	]	};
    key <I1E>	{	[ XF86Forward		]	};
    key <I20>	{	[ XF86AudioNext		]	};
    key <I21>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I22>	{	[ XF86AudioPrev		]	};
    key <I23>	{	[ XF86AudioRaiseVolume	]	};
    key <I24>	{	[ XF86AudioStop		]	};
    key <I25>	{	[ XF86Back		]	};
    key <I26>	{	[ XF86LaunchB		]	};
    key <I2E>	{	[ XF86LaunchC		]	};
    key <I30>	{	[ XF86LaunchA		]	};
    key <I32>	{	[ XF86WWW		]	};
    key <I5F>	{	[ XF86ContrastAdjust	]	};
    key <I63>	{	[ XF86BrightnessAdjust	]	};
};

// Chicony KU-0108
partial alphanumeric_keys
xkb_symbols "chicony0108" {
    include "inet(cherrycyboard)"
};

// Chicony KU-0420 AKA Targus Slim Internet Media USB Keyboard
partial alphanumeric_keys
xkb_symbols "chicony0420" {
    include "inet(media_nav_acpi_common)"
    key <I01>   {       [ XF86AudioMedia        ]       };
    key <K67>   {       [ XF86MyComputer        ]       };
};

// Chicony KB-9885
partial alphanumeric_keys
xkb_symbols "chicony9885" {
    include "inet(acpi_common)"
    key <I12>	{	[ XF86AudioMute		]	};
    key <I17>	{	[ XF86Mail		]	};
    key <I19>	{	[ XF86AudioLowerVolume	]	};
    key <I1E>	{	[ XF86Forward		]	};
    key <I20>	{	[ XF86AudioNext		]	};
    key <I21>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I22>	{	[ XF86AudioPrev		]	};
    key <I23>	{	[ XF86AudioRaiseVolume	]	};
    key <I24>	{	[ XF86AudioStop		]	};
    key <I25>	{	[ XF86Back		]	};
    key <I26>	{	[ XF86LaunchB		]	};
    key <I2E>	{	[ XF86LaunchC		]	};
    key <I30>	{	[ XF86LaunchA		]	};
    key <I32>	{	[ XF86WWW		]	};
};


// Compaq

// Compaq Easy Access
partial alphanumeric_keys
xkb_symbols "compaqeak8" {
    key <I13>	{	[ XF86Community		]	};
    key <I14>	{	[ XF86Market		]	};
    key <I15>	{	[ XF86Meeting		]	};
    key <I1A>	{	[ XF86Search		]	};
    key <I1B>	{	[ XF86News		]	};
    key <I1E>	{	[ XF86Mail		]	};
    key <I1F>	{	[ XF86HomePage		]	};
    key <I23>	{	[ XF86WWW		]	};
};

// Compaq Internet (7 keys)
partial alphanumeric_keys
xkb_symbols "compaqik7" {
    key <I12>	{	[ XF86LightBulb		]	};
    key <I1E>	{	[ XF86Mail		]	};
    key <I21>	{	[ XF86Search		]	};
    key <I23>	{	[ Help			]	};
    key <I25>	{	[ XF86VendorHome	]	};
    key <I26>	{	[ XF86HomePage		]	};
    key <I32>	{	[ XF86Shop		]	};
};

// Compaq Internet (13 keys)
partial alphanumeric_keys
xkb_symbols "compaqik13" {
    include "inet(media_acpi_common)"
    key <I1E>	{	[ XF86Mail		]	};
    key <I1F>	{	[ XF86Go		]	};
    key <I21>	{	[ XF86Search		]	};
    key <I23>	{	[ XF86WWW		]	};
    key <I32>	{	[ XF86Shop		]	};
};

// Compaq Internet (18 keys)
partial alphanumeric_keys
xkb_symbols "compaqik18" {
    include "inet(media_acpi_common)"
    key <I12>	{	[ XF86LightBulb		]	};
    key <I18>	{	[ XF86Eject		]	};
    key <I1E>	{	[ XF86Mail		]	};
    key <I1F>	{	[ XF86Go		]	};
    key <I21>	{	[ XF86Search		]	};
    key <I23>	{	[ XF86WWW		]	};
    key <I25>	{	[ XF86VendorHome	]	};
    key <I26>	{	[ XF86Community		]	};
    key <I32>	{	[ XF86Shop		]	};
    key <I68>	{	[ Print			]	};
};

// laptop/notebook Compaq (eg. Armada, Evo) laptop Keyboard
partial alphanumeric_keys
xkb_symbols "armada" {
    include "inet(media_acpi_common)"
    key <I1A>	{	[ XF86Search		]	};
    key <I1E>	{	[ XF86Mail		]	};
    key <I1F>	{	[ XF86HomePage		]	};
    key <I23>	{	[ XF86WWW		]	};
    key <I59>   {       [ XF86Launch2           ]       }; // Battery Monitor
    key <I6F>	{	[ XF86AudioMedia	]	};
    key <I75>   {       [ XF86Launch0           ]       }; // Info Center
};

// Compaq Presario laptop
partial alphanumeric_keys
xkb_symbols "presario" {
    include "inet(media_acpi_common)"
    key <I14>	{	[ XF86Q			]	};
    key <I18>	{	[ XF86Launch2		]	};
    key <I1E>	{	[ XF86Mail		]	};
    key <I1F>	{	[ XF86Launch1		]	};
    key <I23>	{	[ XF86WWW		]	};
    key <I32>	{	[ XF86Shop		]	};
    key <I75>	{	[ XF86AudioMedia	]	};
};

// Compaq iPaq
partial alphanumeric_keys
xkb_symbols "ipaq" {
    key <FK16>	{	[ XF86Shop		]	};
    key <I02>	{	[ XF86Standby		]	};
    key <I65>	{	[ XF86Search		]	};
    key <I66>	{	[ XF86Travel		]	};
    key <I69>	{	[ XF86BackForward	]	};
    key <I6A>	{	[ XF86Q			]	};
    key <I6C>	{	[ XF86Mail		]	};
};


// Dell

partial alphanumeric_keys
xkb_symbols "dell" {
    include "inet(acpi_common)"
    key <I12>	{	[ XF86Mail		]	};
    key <I1E>	{	[ XF86Search		]	};
    key <I26>	{	[ XF86HomePage		]	};
};

// Dell Precision M65 laptop
partial alphanumeric_keys
xkb_symbols "dellm65" {
    include "inet(media_common)"
    key <I04>   {       [ XF86PowerOff          ]       };
    key <LWIN>  {       [ Super_L               ]       };
};

// laptop/notebook Dell Inspiron 8xxx
partial alphanumeric_keys
xkb_symbols "inspiron" {
    include "inet(media_common)"
    key <I02>   {       [ XF86AudioStop         ]       };
    key <I04>   {       [ XF86AudioNext         ]       };
    key <I21>   {       [ XF86Eject             ]       };
    key <I56>   {       [ XF86Display           ]       };
    key <IR7D>  {       [ XF86AudioPrev         ]       };
    key <IR7C>  {       [ XF86AudioPlay, XF86AudioPause ] };
};

// DELL USB Multimedia (former 8135, generalized, superset of 8125)
partial alphanumeric_keys
xkb_symbols "dellusbmm" {
    // Describes the extra keys on a SK-8135 Multimedia keyboard
    // From Olivier Lahaye <olivier dot lahaye at motorola dot com>
    include "inet(media_nav_acpi_common)"
    key <I02>	{	[ XF86HomePage		]	};
    key <K67>	{	[ XF86MyComputer	]	};
    key <IR7C>	{	[ XF86AudioMedia	]	};
};


// Diamond

// Diamond 9801/9802
partial alphanumeric_keys
xkb_symbols "diamond" {
    include "inet(media_nav_acpi_common)"
    key <I6D>	{	[ XF86Go		]	};
};


// Ennyah

// Ennyah DKB-1008
partial alphanumeric_keys
xkb_symbols "ennyah_dkb1008" {
    include "inet(media_nav_acpi_common)"
    key <IR7C>  {	[ XF86AudioMedia	]	};
};


// Genius

// Genius Comfy KB-16M/Multimedia KWD-910
partial alphanumeric_keys
xkb_symbols "genius" {
    include "inet(media_acpi_common)"
    key <I12>   {	[ XF86AudioRaiseVolume	]	};
    key <I17>   {	[ XF86Calculator	]	};
    key <I19>   {	[ XF86AudioLowerVolume	]	};
    key <I1E>   {	[ XF86Forward		]	};
    key <I21>   {	[ XF86AudioNext		]	};
    key <I23>	{	[ XF86AudioPrev		]	};
    key <I25>   {	[ XF86Back		]	};
    key <I26>   {	[ XF86ScreenSaver	]	};
    key <I2E>   {	[ XF86Mail		]	};
    key <I30>   {	[ XF86Eject		]	};
    key <I32>   {	[ XF86WWW		]	};
};

// Genius Comfy 21e
partial alphanumeric_keys
xkb_symbols "geniuscomfy2" {
    // Describes the extra keys on a Genius Comfy KB-21e-Scroll
    // From Radics Laszlo <garaboncias@mailbox.hu>
    include "inet(media_nav_acpi_common)"
    key <I23>   {       [ Return                ]       };
};


// Gyration

partial alphanumeric_keys
xkb_symbols "gyration" {
    include "inet(nav_common)"
    key <FK16>	{	[ XF86Reload		]	};
    key <I02>	{	[ XF86HomePage		]	};
    key <I17>	{	[ XF86AudioStop		]	};
    key <I1E>	{	[ XF86AudioRaiseVolume	]	};
    key <I1F>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I22>	{	[ XF86AudioNext		]	};
    key <I24>	{	[ XF86AudioPrev		]	};
    key <I25>	{	[ XF86AudioLowerVolume	]	};
    key <I26>	{	[ XF86AudioMute		]	};
};


// Hewlett-Packard

// Hewlett-Packard Internet
partial alphanumeric_keys
xkb_symbols "hpi6" {
    include "inet(media_nav_acpi_common)"
    key <I02>   {       [ XF86HomePage          ]       };
    key <I12>	{	[ XF86Search		]	};
    key <I14>	{	[ XF86VendorHome	]	};
    key <I15>	{	[ XF86Community		]	};
    key <I16>	{	[ XF86AudioMedia	]	};
    key <I18>	{	[ XF86Eject		]	};
    key <I1E>	{	[ XF86Shop		]	};
    key <I1F>	{	[ XF86Launch1		]	};
    key <I26>	{	[ Help			]	};
    key <I27>	{	[ XF86Finance		]	};
    key <I39>	{	[ Print			]	};
    key <I75>   {       [ Help                  ]       };
};

// Hewlett-Packard SK-2501, SK-2505 Multimedia
partial alphanumeric_keys
xkb_symbols "hp250x" {
    key <I12>	{	[ XF86Tools		]	};
    key <I17>	{	[ XF86Search		]	};
    key <I18>	{	[ XF86Eject		]	};
    key <I1E>	{	[ XF86Mail		]	};
    key <I20>	{	[ XF86AudioMute		]	};
    key <I21>	{	[ XF86Launch5		]	};
    key <I22>	{	[ XF86Launch3		]	};
    key <I23>	{	[ XF86Launch2		]	};
    key <I24>	{	[ XF86Launch4		]	};
    key <I25>	{	[ XF86Standby		]	};
    key <I26>	{	[ Help			]	};
    key <I2E>	{	[ XF86AudioLowerVolume	]	};
    key <I30>	{	[ XF86AudioRaiseVolume	]	};
    key <I32>	{	[ XF86WWW		]	};
};

// Hewlett-Packard Omnibook XE3 GC, GD, GE and Pavilion N5xxx
partial alphanumeric_keys
xkb_symbols "hpxe3gc" {
    // Describes the OneTouch buttons on HP Omnibook XE3 GC and
    // HP Pavilion N52XX models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    include "inet(media_common)"
    key <I71>	{	[ Help			]	};
    key <I72>	{	[ XF86Launch1		]	};
    key <I73>	{	[ XF86WWW		]	};
    key <I74>	{	[ XF86Mail		]	};
};

// Hewlett-Packard Omnibook XE3 GF
partial alphanumeric_keys
xkb_symbols "hpxe3gf" {
    // Describes the OneTouch buttons on HP Omnibook XE3 GF models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    include "inet(media_nav_common)"
    key <I73>	{	[ Help			]	};
    key <I74>	{	[ XF86Launch1		]	};
};

// Hewlett-Packard Omnibook XT1000
partial alphanumeric_keys
xkb_symbols "hpxt1000" {
    // Describes the OneTouch buttons on HP Omnibook XT1000 models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    include "inet(media_nav_common)"
    key <I71>	{	[ XF86Launch3		]	};
    key <I72>	{	[ Help			]	};
    key <I73>	{	[ XF86Launch2		]	};
    key <I74>	{	[ XF86Launch1		]	};
};

// Hewlett-Packard Pavilion ZT1100
partial alphanumeric_keys
xkb_symbols "hpzt11xx" {
    // Describes the OneTouch buttons on HP Pavilion ZT11xx models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    include "inet(media_nav_common)"
    key <I71>	{	[ XF86Launch3		]	};
    key <I72>	{	[ Help			]	};
    key <I73>	{	[ XF86Launch2		]	};
    key <I74>	{	[ XF86Launch1		]	};
};

// Hewlett-Packard Pavilion dv5
partial alphanumeric_keys
xkb_symbols "hpdv5" {
    // Describes the OneTouch buttons on HP Pavilion dv5 models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    include "inet(media_common)"
    key <I12>  {       [ XF86ScreenSaver       ]       };
    key <I32>  {       [ XF86WWW               ]       };
    key <I75>  {       [ Help                  ]       };
    key <K6D>  {       [ XF86Launch1           ]       };
};

// Hewlett-Packard Omnibook XE4xxx and ZE4xxx
partial alphanumeric_keys
xkb_symbols "hpxe4xxx" {
    // Describes the OneTouch buttons on HP Omnibook XE4xxx and ZE4xxx
    // models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    include "inet(media_nav_common)"
    key <I70>	{	[ Help			]	};
    key <I71>	{	[ XF86Launch2		]	};
    key <I73>	{	[ XF86Launch1		]	};
};

// Hewlett-Packard Omnibook 500 FA
partial alphanumeric_keys
xkb_symbols "hp500fa" {
    // Describes the OneTouch buttons on HP Omnibook 500 FA models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    key <I73>	{	[ Help			]	};
    key <I74>	{	[ XF86Launch1		]	};
};

// Hewlett-Packard Omnibook 500
partial alphanumeric_keys
xkb_symbols "hp5xx" {
    // Describes the OneTouch buttons on HP Omnibook 5xx models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    include "inet(media_common)"
    key <I73>	{	[ Help			]	};
    key <I74>	{	[ XF86Launch1		]	};
};


// Honeywell

// Honeywell Euroboard
partial alphanumeric_keys
xkb_symbols "honeywell_euroboard" {
    // January 2002
    // Scott Penrose <scottp@dd.com.au>
    // http://linux.dd.com.au/quest/linux/keyboard/honeywell/
    key <I10>	{	[ XF86Game		]	};
    key <I12>	{	[ XF86AudioPrev		]	};
    key <I17>	{	[ XF86Eject		]	};
    key <I18>	{	[ XF86Launch2		]	};
    key <I19>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I1E>	{	[ XF86Launch1		]	};
    key <I20>	{	[ XF86AudioMute		]	};
    key <I22>	{	[ XF86AudioNext		]	};
    key <I23>	{	[ XF86AudioStop		]	};
    key <I24>	{	[ XF86Mail		]	};
    key <I25>	{	[ XF86ScreenSaver	]	};
    key <I26>	{	[ XF86Calculator	]	};
    key <I2E>	{	[ XF86AudioLowerVolume	]	};
    key <I30>	{	[ XF86AudioRaiseVolume	]	};
    key <I32>	{	[ XF86WWW		]	};
};


// IBM

// IBM Rapid Access
partial alphanumeric_keys
xkb_symbols "rapidaccess" {
    key <I12>	{	[ XF86AudioMute		]	};
    key <I17>	{	[ XF86Launch2		]	};
    key <I1E>	{	[ XF86AudioLowerVolume	]	};
    key <I20>	{	[ XF86AudioRaiseVolume	]	};
    key <I21>	{	[ XF86AudioNext		]	};
    key <I22>	{	[ XF86AudioPause	]	};
    key <I22>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I23>	{	[ XF86AudioPrev		]	};
    key <I24>	{	[ XF86AudioStop		]	};
    key <I25>	{	[ XF86Standby		]	};
    key <I26>	{	[ Help			]	};
    key <I2E>	{	[ XF86Launch4		]	};
    key <I30>	{	[ XF86Launch3		]	};
    key <I32>	{	[ XF86Launch1		]	};
};

// IBM Rapid Access II
partial alphanumeric_keys
xkb_symbols "rapidaccess2" {
    include "inet(acpi_common)"
    key <I12>	{	[ XF86AudioNext		]	};
    key <I17>	{	[ XF86Favorites		]	};
    key <I1E>	{	[ XF86AudioMute		]	};
    key <I20>	{	[ XF86AudioStop		]	};
    key <I21>	{	[ XF86AudioLowerVolume	]	};
    key <I22>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I23>	{	[ XF86AudioRaiseVolume	]	};
    key <I24>	{	[ XF86AudioPrev		]	};
    key <I25>	{	[ XF86HomePage		]	};
    key <I26>	{	[ XF86Shop		]	};
    key <I2E>	{	[ XF86Search		]	};
    key <I30>	{	[ XF86MyComputer	]	};
    key <I32>	{	[ XF86VendorHome	]	};
};

// IBM ThinkPad 60 series
partial alphanumeric_keys
xkb_symbols "thinkpad60" {
    include "inet(media_nav_common)"
    key <I1F> { [ XF86VendorHome ] };
};

// IBM Space Saver
partial alphanumeric_keys
xkb_symbols "ibm_spacesaver" {
    key <NMLK>  {
        type="ONE_LEVEL",
        symbols[Group1]= [ Num_Lock ]
    };
};


// Logitech

// Logitech common definitions
hidden partial alphanumeric_keys
xkb_symbols "logitech_base" {
    include "inet(media_nav_acpi_common)"
    key <I02> { [ XF86HomePage ] };
    key <I15> { [ XF86Community ] };
    key <I16> { [ XF86ScrollClick ] };
    key <I21> {	[ XF86VendorHome ] };
    key <I3B> { [ XF86New ] };
    key <I3C> { [ XF86Reply ] };
    key <I43> { [ XF86MyComputer ] };
    key <I44> { [ XF86Documents ] };
    key <I57> { [ XF86Pictures ] };
    key <I58> { [ XF86Music ] };
};

// Logitech second set of common keys
hidden partial alphanumeric_keys
xkb_symbols "logitech_set3" {
    key <I17>	{	[ XF86AudioStop		]	};
    key <I1E>	{	[ XF86AudioRaiseVolume	]	};
    key <I1F>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I22>	{	[ XF86AudioNext		]	};
    key <I24>	{	[ XF86AudioPrev		]	};
    key <I25>	{	[ XF86AudioLowerVolume	]	};
    key <I26>	{	[ XF86AudioMute		]	};
    key <I44>   {       [ XF86New               ]       };      // F1
    key <I45>   {       [ XF86Reply             ]       };      // F2
    key <I4A>   {       [ XF86Send              ]       };      // F4
    key <I54>   {       [ Print                 ]       };      // F7
    key <I55>   {       [ XF86Save              ]       };      // F8
    key <I56>   {       [ XF86Documents         ]       };      // F10
    key <I69>   {       [ XF86Go                ]       };
    key <IR7C>  {       [ XF86AudioMedia        ]       };
};

// Logitech Access
partial alphanumeric_keys
xkb_symbols "logiaccess" {
    include "inet(logitech_base)"
    key <FK13>	{	[ XF86MailForward	]	};
    key <FK14>	{	[ XF86Send		]	};
    key <I11>	{	[ XF86Messenger		]	};
    key <I12>	{	[ XF86WebCam		]	};
};

// Logitech Cordless Desktop (alt.)
partial alphanumeric_keys
xkb_symbols "logicda" {
    include "inet(logitech_base)"
    include "inet(logitech_set3)"
};

// Logitech Internet Navigator
partial alphanumeric_keys
xkb_symbols "logicink" {
    include "inet(logitech_base)"
    key <I11>	{	[ XF86Shop		]	};
    key <I12>	{	[ XF86VendorHome	]	};
    key <I13>	{	[ XF86Finance		]	};
    key <I14>	{	[ XF86Start		]	};
};

// Logitech Cordless Desktop EX110
partial alphanumeric_keys
xkb_symbols "logiex110" {
    include "inet(logitech_base)"
    key <I2F>   {       [ XF86Close             ]       };      // Close
// Extended function keys
// In the Console before starting X
// Using setkeycodes e03b 212 e03c 213 e03d 214 e03e 215 e03f 216 e040 217
//       setkeycodes e041 218 e042 219 e043 220 e044 221 e057 222 e058 223 6d 206
// *=keys that are there but need different symbol names.
    key <I3B>   {       [ Help                  ]       };      // F1
    key <FK13>  {       [ XF86Word              ]       };      // F2
    key <FK14>  {       [ XF86Excel             ]       };      // F3
    key <FK15>  {       [ XF86Pictures          ]       };      // F4
    key <FK16>  {       [ Undo                  ]       };      // F5
    key <I65>   {       [ Redo                  ]       };      // F6 *
    key <I42>   {       [ Print                 ]       };      // F7
    key <I43>   {       [ XF86Save              ]       };      // F8
    key <I44>   {       [ XF86Launch1           ]       };      // F9 *
    key <I45>   {       [ XF86Launch2           ]       };      // F10
    key <I14>   {       [ XF86Launch3           ]       };      // F11
    key <I4A>   {       [ XF86Launch4           ]       };      // F12
};

// Logitech iTouch Internet Navigator SE
partial alphanumeric_keys
xkb_symbols "logiinkse" {
    include "inet(logitech_base)"
    key <FK13>	{	[ XF86MailForward	]	};	// F3
    key <FK14>	{	[ XF86Send		]	};	// F4
    key <FK15>	{	[ Undo			]	};	// F5
    key <FK16>	{	[ Redo			]	};	// F6
    key <FK17>	{	[ Print			]	};	// F7
    key <I11>	{	[ XF86Messenger		]	};
    key <I12>	{	[ XF86WebCam		]	};
    key <I13>	{	[ XF86VendorHome	]	};
    key <I14>	{	[ XF86Shop		]	};
    key <I42>	{	[ XF86Save		]	};	// F8
};

// Logitech iTouch Internet Navigator SE USB
partial alphanumeric_keys
xkb_symbols "logiinkseusb" {
    include "inet(logitech_base)"
    include "inet(logitech_set3)"
};

// Logitech iTouch Cordless Y-RB6
partial alphanumeric_keys
xkb_symbols "logiitc" {
    include "inet(logitech_base)"
    key <I2F> {	[ XF86AudioRaiseVolume ] };

    // Just to override RaiseVolume from logitech_base,
    // since no keysym can have two keycodes, see
    // https://bugs.freedesktop.org/show_bug.cgi?id=7095
    key <I30> {	[ XF86Launch1 ] };
};

// Logitech Internet
partial alphanumeric_keys
xkb_symbols "logiik" {
    include "inet(logitech_base)"
    key <I12>	{	[ Find			]	};
    key <I17>	{	[ Print			]	};
    key <I18>	{	[ XF86Favorites		]	};
    key <I19>	{	[ XF86Reload		]	};
    key <I1E>	{	[ XF86Search		]	};
    key <I20>	{	[ XF86HotLinks		]	};
    key <I22>	{	[ XF86Forward		]	};
    key <I23>	{	[ XF86HomePage		]	};
    key <I24>	{	[ XF86Stop		]	};
    key <I25>	{	[ XF86OpenURL		]	};
    key <I26>	{	[ XF86AddFavorite	]	};
    key <I32>	{	[ XF86History		]	};
    key <I7A>	{	[ XF86WWW		]	};
};

// Logitech iTouch
partial alphanumeric_keys
xkb_symbols "itouch" {
    include "inet(logitech_base)"
    key <I1F>	{	[ XF86AudioMute		]	};
    key <I2B>	{	[ XF86AudioLowerVolume	]	};
    key <I2D>	{	[ XF86AudioRaiseVolume	]	};
};

// Logitech UltraX Cordless Media Desktop
partial alphanumeric_keys
xkb_symbols "logiultraxc" {
    key <FK16>  {       [ XF86AudioMute ]       };
    key <FK17>  {       [ XF86AudioLowerVolume  ]       };
    key <I2B>   {       [ XF86AudioNext ]       };
    key <I2D>   {       [ XF86AudioPrev ]       };
    key <I2C>   {       [ XF86AudioPlay, XF86AudioPause ]       };
    key <KPDC>  {       [ XF86AudioRaiseVolume  ]       };
};

partial alphanumeric_keys
xkb_symbols "logidinovo" {
    include "inet(media_nav_common)"
    key <I02>	{	[ XF86HomePage		]	};
    key <I12>	{	[ XF86Standby		]	};
    key <I17>	{	[ XF86Search		]	};
    key <I21>	{	[ XF86AudioRaiseVolume	]	};
    key <K66>	{	[ XF86AudioLowerVolume	]	};
    key <KPDC>	{	[ XF86AudioMute		]	};
    key <IR7C>	{	[ XF86AudioMedia	]	};
};

partial alphanumeric_keys
xkb_symbols "logidinovoedge" {
    include "inet(media_acpi_common)"
    key <I02>	{	[ XF86HomePage		]	};
    key <I6C>	{	[ XF86Mail		]	};
    key <FK17>  {       [ XF86Search            ]       };
    key <IR7C>	{	[ XF86AudioMedia	]	};
};

partial alphanumeric_keys
xkb_symbols "logitech_g15" {
    include "inet(media_nav_acpi_common)"
    key <AE13> {         [   XF86Messenger ] };
    key <HKTG> {         [     XF86Launch7 ] };
    key  <I02> {         [     XF86Launch9 ] };
    key  <I04> {         [       XF86Phone ] };
    key  <I08> {         [     XF86LaunchD ] };
    key  <I09> {         [     XF86Support ] };
    key  <I0F> {         [     XF86LaunchF ] };
    key  <I16> {         [      XF86LogOff ] };
    key  <I18> {         [     XF86Launch5 ] };
    key  <I21> {         [      XF86Travel ] };
    key  <I23> {         [       XF86Spell ] };
    key  <I31> {         [     XF86Launch4 ] };
    key  <I3C> {         [       XF86Music ] };
    key  <I42> {         [     XF86Forward ] };
    key  <I43> {         [        XF86Send ] };
    key  <I57> {         [        XF86Save ] };
    key  <I64> {         [    XF86Pictures ] };
    key  <I67> {         [     XF86LaunchA ] };
    key  <I76> {         [      XF86iTouch ] };
    key  <I77> {         [     XF86Launch3 ] };
    key  <I79> {         [    XF86ToDoList ] };
    key  <I7B> {         [  XF86Calculator ] };
    key  <K5A> {         [  XF86VendorHome ] };
    key  <K5D> {         [        XF86Away ] };
    key  <K5E> {         [      XF86WebCam ] };
    key  <K5F> {         [     XF86Launch0 ] };
    key  <K63> {         [     XF86Launch6 ] };
    key  <K6D> {         [    XF86Calendar ] };
    key  <K71> {         [     XF86LaunchB ] };
    key  <K72> {         [     XF86LaunchC ] };
    key  <K74> {         [         XF86WWW ] };
    key  <K75> {         [     XF86LaunchE ] };
    key <II5D> {         [     XF86Launch1 ] };
    key <IR7D> {         [     XF86Launch2 ] };
    key <IR7C> {         [     XF86Launch8 ] };
};


// Memorex

// Memorex MX1998
partial alphanumeric_keys
xkb_symbols "mx1998" {
    include "inet(media_acpi_common)"
    key <DOWN>	{	[ XF86ScrollDown	]	};
    key <I12>	{	[ XF86AudioRewind	]	};
    key <I17>	{	[ XF86Close		]	};
    key <I18>	{	[ XF86Xfer		]	};
    key <I1E>	{	[ XF86AudioRecord	]	};
    key <I21>	{	[ XF86Documents		]	};
    key <I23>	{	[ XF86Game		]	};
    key <I25>	{	[ XF86Calculator	]	};
    key <I26>	{	[ Menu			]	};
    key <I32>	{	[ XF86WWW		]	};
    key <I57>	{	[ XF86WakeUp		]	};
    key <I68>	{	[ XF86DOS		]	};
    key <I7A>	{	[ XF86ScreenSaver	]	};
    key <UP>	{	[ XF86ScrollUp		]	};
};

// Memorex MX2500 EZ-Access
partial alphanumeric_keys
xkb_symbols "mx2500" {
    include "inet(media_nav_acpi_common)"
    key <I12>	{	[ XF86Clear		]	};
    key <I13>	{	[ XF86Phone		]	};
    key <I14>	{	[ XF86DOS		]	};
    key <I17>	{	[ XF86Close		]	};
    key <I18>	{	[ XF86Xfer		]	};
    key <I1E>	{	[ XF86Eject		]	};
    key <I1F>	{	[ XF86Documents		]	};
    key <I26>	{	[ XF86News		]	};
    key <I6B>	{	[ XF86WakeUp		]	};
    key <I6D>	{	[ XF86RotateWindows	]	};
};

// Memorex MX2750
partial alphanumeric_keys
xkb_symbols "mx2750" {
    include "inet(media_nav_acpi_common)"
    key <I32>	{	[ XF86Launch0		]	};
};


// Microsoft

// Microsoft Natural Ergonomic 4000
partial alphanumeric_keys
xkb_symbols "microsoft4000" {
    include "inet(media_nav_common)"
    key <I192>  {       [ XF86Launch1           ]       };
    key <I193>  {       [ XF86Launch2           ]       };
    key <I194>  {       [ XF86Launch3           ]       };
    key <I195>  {       [ XF86Launch4           ]       };
    key <I196>  {       [ XF86Launch5           ]       };
//  Missing because of lack of support from kbd driver: Zoom in and
//  slider.
};

// Microsoft Natural Wireless Ergonomic 7000
partial alphanumeric_keys
xkb_symbols "microsoft7000" {
    include "inet(media_nav_common)"
    key <I07>	{	[ Undo			]	};
    key <I09>	{	[ XF86New		]	};
    key <I0A>	{	[ Redo			]	};
    key <I0E>	{	[ XF86MailForward	]	};
    key <I2F>	{	[ XF86Close		]	};
    key <I39>	{	[ Print			]	};
    key <I55>	{	[ XF86Save		]	};
    key <I5A>	{	[ XF86Send		]	};
    key <I62>	{	[ Help			]	};
    key <I64>	{	[ XF86Reply		]	};
    key <I76>	{	[ parenleft		]	};
    key <I7B>	{	[ parenright		]	};
    key <K59>	{	[ KP_Equal		]	};
    key <K64>	{	[ XF86Open		]	};
//  Missing because of lack of support from kbd driver: Spell, Launch,
//  and Zoom in and out buttons.
};

// Microsoft Internet
partial alphanumeric_keys
xkb_symbols "microsoftinet" {
    include "inet(nav_acpi_common)"
    key <I68>	{	[ XF86AudioStop		]	};
};

// Microsoft Natural Pro USB
partial alphanumeric_keys
xkb_symbols "microsoftprousb" {
    include "inet(nav_common)"
    key <FK16>   {   [ XF86Reload      ]   };
    key <I01>   {   [ XF86AudioMedia   ]   };
    key <I02>   {   [ XF86HomePage      ]   };
    key <I17>   {   [ XF86AudioStop      ]   };
    key <I1E>   {   [ XF86AudioRaiseVolume   ]   };
    key <I1F>   {   [ XF86AudioPlay, XF86AudioPause ] };
    key <I22>   {   [ XF86AudioNext      ]   };
    key <I24>   {   [ XF86AudioPrev      ]   };
    key <I25>   {   [ XF86AudioLowerVolume   ]   };
    key <I26>   {   [ XF86AudioMute      ]   };
    key <I63>   {   [ XF86Standby      ]   };
//   Internet Section -- Left Side
//   Multimedia Section -- Right Side
//   My Computer Section -- Far Right
//   My computer maps to printscreen, so leaving commented out for now
//   key <PRSC>   {   [ XF86MyComputer   ]   };
};

// Microsoft Natural Pro OEM
partial alphanumeric_keys
xkb_symbols "microsoftprooem" {
    include "inet(media_nav_common)"
    key <FK17>	{	[ XF86Search		]	};
    key <I02>	{	[ XF86HomePage		]	};
    key <I63>	{	[ XF86Standby		]	};
    key <K67>	{	[ XF86MyComputer	]	};
//   Internet Section -- Left Side
//   Multimedia Section -- Right Side
//   My Computer Section -- Far Right
};

// Microsoft Internet Pro (Swedish)
partial alphanumeric_keys
xkb_symbols "microsoftprose" {
    include "inet(nav_common)"
    key <FK16>	{	[ XF86Reload		]	};
    key <I02>	{	[ XF86HomePage		]	};
    key <I17>	{	[ XF86AudioStop		]	};
    key <I1E>	{	[ XF86AudioRaiseVolume	]	};
    key <I1F>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I22>	{	[ XF86AudioNext		]	};
    key <I24>	{	[ XF86AudioPrev		]	};
    key <I25>	{	[ XF86AudioLowerVolume	]	};
    key <I26>	{	[ XF86AudioMute		]	};
    key <I63>	{	[ XF86Standby		]	};
    key <I68>	{	[ XF86AudioStop		]	};
    key <PRSC>	{	[ XF86MyComputer	]	};
    key <IR7C>	{	[ XF86AudioMedia	]	};
};

// Microsoft Office Keyboard
partial alphanumeric_keys
xkb_symbols "microsoftoffice" {
    include "inet(nav_acpi_common)"
    key <BRK>	{	[ XF86Calendar		]	};
    key <END>	{	[ Undo			]	};
    key <I02>	{	[ XF86HomePage		]	};
    key <I1E>	{	[ XF86AudioLowerVolume	]	};
    key <I25>	{	[ XF86AudioRaiseVolume	]	};
    key <I26>	{	[ XF86AudioMute		]	};
    key <I3C>	{	[ XF86Cut		]	};
    key <I4A>	{	[ XF86LogOff		]	};
    key <I54>	{	[ XF86ApplicationLeft	]	};
    key <I55>	{	[ XF86TaskPane		]	};
    key <I56>	{	[ XF86Spell		]	};
    key <I57>	{	[ XF86WWW		]	};
    key <I58>	{	[ XF86New		]	};
    key <I59>	{	[ XF86Open		]	};
    key <I5A>	{	[ XF86Close		]	};
    key <I62>	{	[ Help			]	};
    key <I64>	{	[ XF86Save		]	};
    key <I67>	{	[ Print			]	};
    key <I6D>	{	[ XF86OfficeHome	]	};
    key <I70>	{	[ Redo			]	};
    key <I71>	{	[ XF86Reply		]	};
    key <I72>	{	[ XF86MailForward	]	};
    key <I73>	{	[ XF86Send		]	};
    key <I78>	{	[ XF86Copy		]	};
    key <MOAR>	{	[ XF86ApplicationRight	]	};
    key <RCTL>	{	[ XF86Paste		]	};
};

// Microsoft Wireless Multimedia 1.0A
partial alphanumeric_keys
xkb_symbols "microsoftmult" {
    include "inet(media_nav_acpi_common)"
    key <AE13>  {       [ XF86Messenger         ]       };
    key <FK14>	{	[ XF86New		]	};
    key <FK15>	{	[ XF86Open		]	};
    key <FK16>	{	[ XF86Close		]	};
    key <FK17>	{	[ XF86Reply		]	};
    key <I07>	{	[ Redo			]	};
    key <I08>	{	[ Undo			]	};
    key <I16>   {       [ XF86LogOff            ]       };
    key <I23>	{	[ XF86Spell		]	};
    key <I3B>	{	[ Help			]	};
    key <I3C>   {       [ XF86Music     ]       };
    key <I42>	{	[ XF86Forward		]	};
    key <I43>	{	[ XF86Send		]	};
    key <I57>	{	[ XF86Save		]	};
    key <I58>	{	[ Print			]	};
    key <I64>   {       [ XF86Pictures  ]       };
    key <I80>   {       [ XF86Documents ]       };
};

// Microsoft Surface
partial alphanumeric_keys
xkb_symbols "microsoftsurface" {
    include "inet(evdev)"
    key <I88>   {       [ XF86Search            ]         };
    key <I163>  {       [ XF86AudioPrev         ]         };
    key <I164>  {       [ XF86AudioPlay, XF86AudioPause ] };
    key <I165>  {       [ XF86AudioNext         ]         };
};


// Oretec

// Oretec MCK-800 MM/Internet keyboard
partial alphanumeric_keys
xkb_symbols "oretec" {
    include "inet(acpi_common)"
    key <I10>	{	[ XF86ScrollUp		]	};
    key <I12>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I17>	{	[ XF86AudioPrev		]	};
    key <I18>	{	[ XF86ScrollDown	]	};
    key <I19>	{	[ XF86ZoomOut		]	};
    key <I1E>	{	[ XF86AudioMute		]	};
    key <I21>	{	[ XF86WWW		]	};
    key <I22>	{	[ Menu			]	};
    key <I23>	{	[ XF86AudioStop		]	};
    key <I24>	{	[ XF86Calculator	]	};
    key <I25>	{	[ XF86Xfer		]	};
    key <I26>	{	[ XF86Mail		]	};
    key <I2E>	{	[ XF86AudioNext		]	};
    key <I30>	{	[ XF86AudioRaiseVolume	]	};
    key <I32>	{	[ XF86ZoomIn		]	};
    key <I68>	{	[ XF86AudioLowerVolume	]	};
};


// Propeller

// Propeller Voyager KTEZ-1000
partial alphanumeric_keys
xkb_symbols "propeller" {
    include "inet(media_common)"
    key <I12>	{	[ XF86AudioRewind	]	};
    key <I17>	{	[ XF86Close		]	};
    key <I18>	{	[ XF86Xfer		]	};
    key <I1E>	{	[ XF86AudioRecord	]	};
    key <I21>	{	[ XF86Documents		]	};
    key <I23>	{	[ XF86Game		]	};
    key <I25>	{	[ XF86Calculator	]	};
    key <I26>	{	[ Menu			]	};
    key <I32>	{	[ XF86WWW		]	};
    key <I68>	{	[ XF86DOS		]	};
    key <I7A>	{	[ XF86Standby		]	};
};


// QTronix

// QTronix Scorpius 98N+
partial alphanumeric_keys
xkb_symbols "qtronix" {
    key <I10>	{	[ XF86ScrollDown	]	};
    key <I12>	{	[ XF86Forward		]	};
    key <I13>	{	[ XF86WakeUp		]	};
    key <I17>	{	[ XF86Search		]	};
    key <I18>	{	[ XF86Standby		]	};
    key <I19>	{	[ XF86ScrollUp		]	};
    key <I1E>	{	[ XF86Back		]	};
    key <I1F>	{	[ XF86Reload		]	};
    key <I20>	{	[ XF86AudioRaiseVolume	]	};
    key <I21>	{	[ XF86AudioPrev		]	};
    key <I22>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I23>	{	[ XF86AudioNext		]	};
    key <I24>	{	[ XF86AudioStop		]	};
    key <I25>	{	[ XF86HomePage		]	};
    key <I26>	{	[ XF86AudioMute		]	};
    key <I2E>	{	[ XF86AudioLowerVolume	]	};
    key <I30>	{	[ XF86AudioRecord	]	};
    key <I31>	{	[ XF86PowerOff		]	};
    key <I32>	{	[ XF86Stop		]	};
    key <I68>	{	[ XF86Calculator	]	};
};


// Samsung

// Samsung SDM 4500P
partial alphanumeric_keys
xkb_symbols "samsung4500" {
    include "inet(media_nav_acpi_common)"
    key <AE13>	{	[ XF86Launch4		]	};
    key <I02>	{	[ XF86Launch1		]	};
    key <I04>	{	[ XF86Launch3		]	};
    key <I06>	{	[ XF86Launch5		]	};
    key <I09>	{	[ XF86Close		]	};
    key <I0A>	{	[ XF86Book		]	};
    key <I18>	{	[ XF86Eject		]	};
    key <I26>	{	[ Help			]	};
    key <I59>	{	[ XF86Explorer		]	};
    key <IR7D>	{	[ XF86Launch2		]	};
};

// Samsung SDM 4510P
partial alphanumeric_keys
xkb_symbols "samsung4510" {
    include "inet(media_acpi_common)"
    key <I02>	{	[ XF86Launch1		]	};
    key <I04>	{	[ XF86Launch3		]	};
    key <I18>	{	[ XF86Eject		]	};
    key <IR7D>	{	[ XF86Launch2		]	};
};


// SK

// NEC SK-1300
partial alphanumeric_keys
xkb_symbols "sk1300" {
    include "inet(media_common)"
    key <I12>	{	[ XF86Eject		]	};
    key <I1E>	{	[ XF86Forward		]	};
    key <I20>	{	[ XF86WWW		]	};
    key <I25>	{	[ XF86Standby		]	};
    key <I26>	{	[ XF86Back		]	};
    key <I32>	{	[ XF86Stop		]	};
};

// NEC SK-2500
partial alphanumeric_keys
xkb_symbols "sk2500" {
    include "inet(media_nav_common)"
    key <I12>	{	[ XF86AudioRewind	]	};
    key <I17>	{	[ XF86Close		]	};
    key <I18>	{	[ XF86Eject		]	};
    key <I18>	{	[ XF86Eject		]	};
    key <I19>	{	[ XF86Forward		]	};
    key <I1E>	{	[ XF86AudioRecord	]	};
    key <I23>	{	[ XF86Xfer		]	};
    key <I25>	{	[ XF86PowerOff		]	};
    key <I26>	{	[ Menu			]	};
    key <I7A>	{	[ XF86ScreenSaver	]	};
};

// NEC SK-6200
partial alphanumeric_keys
xkb_symbols "sk6200" {
    include "inet(acpi_common)"
    key <I12>	{	[ XF86Favorites		]	};
    key <I14>	{	[ XF86AudioLowerVolume	]	};
    key <I16>	{	[ XF86AudioRaiseVolume	]	};
    key <I17>	{	[ XF86Back		]	};
    key <I19>	{	[ XF86Forward		]	};
    key <I1E>	{	[ XF86WWW		]	};
    key <I20>	{	[ XF86AudioMute		]	};
    key <I21>	{	[ XF86AudioNext		]	};
    key <I22>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I23>	{	[ XF86AudioPrev		]	};
    key <I24>	{	[ XF86AudioStop		]	};
    key <I32>	{	[ XF86Mail		]	};
};

// NEC SK-7100
partial alphanumeric_keys
xkb_symbols "sk7100" {
    include "inet(media_common)"
    key <I12>	{	[ XF86AudioPause	]	};
    key <I17>	{	[ XF86Close		]	};
    key <I18>	{	[ XF86Video		]	};
    key <I1E>	{	[ XF86Eject		]	};
    key <I25>	{	[ XF86CD		]	};
    key <I26>	{	[ XF86Display		]	};
    key <I32>	{	[ XF86WWW		]	};
};


// Sven

// SVEN Ergonomic 2500
partial alphanumeric_keys
xkb_symbols "sven" {
    include "inet(acpi_common)"
    key <I10>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I12>	{	[ XF86Forward		]	};
    key <I17>	{	[ XF86AudioRaiseVolume	]	};
    key <I18>	{	[ XF86ZoomOut		]	};
    key <I19>	{	[ XF86AudioPrev		]	};
    key <I1A>	{	[ XF86AudioStop		]	};
    key <I1E>	{	[ XF86HomePage		]	};
    key <I20>	{	[ XF86Mail		]	};
    key <I21>	{	[ XF86ZoomIn		]	};
    key <I22>	{	[ XF86MyComputer	]	};
    key <I23>	{	[ XF86Stop		]	};
    key <I24>	{	[ XF86ScreenSaver	]	};
    key <I25>	{	[ XF86AudioLowerVolume	]	};
    key <I26>	{	[ XF86AudioMute		]	};
    key <I28>	{	[ XF86Calculator	]	};
    key <I29>	{	[ XF86Reload		]	};
    key <I2E>	{	[ XF86Search		]	};
    key <I30>	{	[ XF86Favorites		]	};
    key <I31>	{	[ XF86ScrollUp		]	};
    key <I32>	{	[ XF86ScrollDown	]	};
    key <I62>	{	[ XF86AudioNext		]	};
    key <I68>	{	[ XF86Back		]	};
};

// SVEN Slim 303
partial alphanumeric_keys
xkb_symbols "sven303" {
    key <I11>	{	[ XF86PowerOff		]	};
    key <I12>	{	[ XF86Sleep		]	};
    key <I16>	{	[ XF86WakeUp		]	};
};


// Symplon

// Symplon PaceBook tablet
partial alphanumeric_keys
xkb_symbols "symplon" {
    include "inet(nav_acpi_common)"
    key <HOME>	{	[ XF86RotationPB	]	};
    key <I13>	{	[ XF86SplitScreen	]	};
    key <I14>	{	[ XF86Support		]	};
    key <I17>	{	[ XF86New		]	};
    key <I21>	{	[ XF86User2KB		]	};
    key <I25>	{	[ XF86RotationKB	]	};
    key <I26>	{	[ XF86MenuKB		]	};
    key <I6B>	{	[ XF86User1KB		]	};
    key <PAUS>	{	[ XF86UserPB		]	};
    key <UP>	{	[ XF86MenuPB		]	};
};


// Toshiba

// Toshiba Satellite S3000
partial alphanumeric_keys
xkb_symbols "toshiba_s3000" {
    include "inet(media_common)"
    // Describes the Special buttons on Toshiba Satellite 3000 models.
    // See http://sourceforge.net/projects/omke for details on enabling
    // these keys
    key <I06>	{	[ XF86Launch1		]	};
    key <I13>	{	[ XF86Launch2		]	};
    key <I71>	{	[ XF86WWW		]	};
    key <I73>	{	[ XF86Mail		]	};
    key <I75>	{	[ XF86AudioRaiseVolume	]	};
    key <I76>	{	[ XF86AudioLowerVolume	]	};
};


// Trust

// Trust Wireless Classic
partial alphanumeric_keys
xkb_symbols "trust" {
    include "inet(media_nav_acpi_common)"
    key <I11>	{	[ XF86ScreenSaver	]	};
    key <I1E>	{	[ XF86Eject		]	};
};

// Trust Direct Access
partial alphanumeric_keys
xkb_symbols "trustda" {
    include "inet(media_common)"
    key <I12>	{	[ XF86AudioRewind	]	};
    key <I17>	{	[ XF86Close		]	};
    key <I18>	{	[ XF86Eject		]	};
    key <I1E>	{	[ XF86AudioRecord	]	};
    key <I23>	{	[ XF86Xfer		]	};
    key <I25>	{	[ XF86Standby		]	};
    key <I26>	{	[ Help			]	};
    key <I32>	{	[ XF86WWW		]	};
    key <I7A>	{	[ XF86Away		]	};
};


// YaHoo!

// Yahoo! Internet
partial alphanumeric_keys
xkb_symbols "yahoo" {
    include "inet(acpi_common)"
    key <I11>	{	[ XF86AudioPrev		]	};
    key <I12>	{	[ XF86AudioPlay, XF86AudioPause ] };
    key <I1E>	{	[ XF86AudioStop		]	};
    key <I1F>	{	[ XF86AudioNext		]	};
    key <I20>	{	[ XF86AudioRecord	]	};
    key <I21>	{	[ XF86AudioLowerVolume	]	};
    key <I22>	{	[ XF86AudioRaiseVolume	]	};
    key <I23>	{	[ XF86AudioMute		]	};
    key <I24>	{	[ XF86Close		]	};
    key <I25>	{	[ XF86Calculator	]	};
    key <I26>	{	[ Help			]	};
    key <I27>	{	[ XF86Mail		]	};
    key <I28>	{	[ XF86WWW		]	};
};


// Apple keyboards (macbooks, powerbooks, powermac G5, etc)
partial alphanumeric_keys
xkb_symbols "apple" {
// Really brightness up/down
    key <II65>  {       [ XF86BrightnessAdjust  ]       };
    key <I54>   {       [ XF86BrightnessAdjust  ]       };
    key <I20>	{	[ XF86AudioMute		]	};
    key <I2E>	{	[ XF86AudioLowerVolume	]	};
    key <I30>	{	[ XF86AudioRaiseVolume	]	};
    key <I56>   {       [ XF86RotateWindows	]	};
// Really keyboard backlight off/up/down
    key <I57>   {       [ XF86Launch0		]	};
    key <I58>	{	[ XF86Launch1    	]	};
    key <I59>	{	[ XF86Launch2   	]	};
    key <I5E>	{	[ XF86PowerOff          ]       };
    key <K5D>	{	[ F13 ]    };
    key <K5E>	{	[ F14 ]    };
    key <K5F>	{	[ F15 ]    };
    key <K6C>	{	[ XF86Eject ]    };
    key <II5D>	{	[ F16 ]    };
    key <KPEQ>  {       [ KP_Equal ] };
};

partial alphanumeric_keys
xkb_symbols "cymotionlinux" {
    include "inet(media_nav_acpi_common)"
    key <I07>	{	[	Undo			]	};
    key <I0A>	{	[	Redo			]	};
    key <I0F>	{	[	XF86ScrollDown		]	};
    key <I17>	{	[	XF86Launch2		]	};
    key <I1F>	{	[	XF86Launch1		]	};
    key <I28>	{	[	XF86MenuKB		]	};
    key <I2B>	{	[	XF86Launch3		]	};
    key <I3C>	{	[	XF86Cut			]	};
    key <I78>	{	[	XF86Copy		]	};
    key <K65>	{	[	XF86Paste		]	};
    key <K75>	{	[	XF86ScrollUp		]	};
    key <IR7C>	{	[	XF86AudioMedia		]	};
};

partial alphanumeric_keys
xkb_symbols "silvercrest" {
    include "inet(media_nav_acpi_common)"
    key <I02>	{	[ XF86HomePage		]	};
    key <I21>	{	[ XF86Launch2		]	};
    key <K67>	{	[ XF86Launch1		]	};
};


// eMachines

partial alphanumeric_keys
xkb_symbols "emachines" {
    include "inet(media_nav_acpi_common)"
    key <I32>  {  [ XF86iTouch                    ]  };
    key <KP0>  {  [ KP_0                          ]  };
    key <KP1>  {  [ KP_1                          ]  };
    key <KP2>  {  [ KP_2                          ]  };
    key <KP3>  {  [ KP_3                          ]  };
    key <KP4>  {  [ KP_4                          ]  };
    key <KP5>  {  [ KP_5                          ]  };
    key <KP6>  {  [ KP_6                          ]  };
    key <KP7>  {  [ KP_7                          ]  };
    key <KP8>  {  [ KP_8                          ]  };
    key <KP9>  {  [ KP_9                          ]  };
    key <KPAD> {  [ KP_Add                        ]  };
    key <KPDL> {  [ KP_Decimal                    ]  };
    key <KPDV> {  [ KP_Divide                     ]  };
    key <KPMU> {  [ KP_Multiply                   ]  };
    key <KPSU> {  [ KP_Subtract                   ]  };
};


// BenQ

// BenQ X* (X730, X500, X800)
//
// To make the FN_LOCK and CONFIG key work on the BenQ X500 , use:
// setkeycodes e074 130 # KEY_PROPS  from /usr/include/linux/input.h
// setkeycodes e075 171 # KEY_CONFIG from /usr/include/linux/input.h
partial alphanumeric_keys
xkb_symbols "benqx" {
    include "inet(media_nav_acpi_common)"
    key <I02> { [ XF86ModeLock ] };
    key <I21> { [ XF86WWW      ]  };
    key <I2B> { [ XF86Go ] };
    key <I31> { [ XF86Calendar ] };
};


// Intel

// Intel Classmate
partial alphanumeric_keys
xkb_symbols "classmate" {
    key <I2E>   {       [ XF86AudioLowerVolume  ] };
    key <I30>   {       [ XF86AudioRaiseVolume  ] };
};


// Unitek

partial alphanumeric_keys
xkb_symbols "unitekkb1925" {
    include "inet(media_nav_common)"
    key <I0C> { [ XF86AudioMute ] };
    key <I11> { [ XF86PowerOff ] };
    key <I12> { [ XF86Sleep ] };
    key <I16> { [ XF86WakeUp ] };
    key <I18> { [ XF86Search ] };
    key <I1A> { [ XF86Reload ] };
};


// Creative

// Creative Desktop Wireless 7000
partial alphanumeric_keys
xkb_symbols "creativedw7000" {
    include "inet(media_nav_acpi_common)"
    key <I66>   {       [ XF86Pictures ]       };
};


// Compal

// Compal FL90
partial alphanumeric_keys
xkb_symbols "compalfl90" {
    include "inet(media_nav_acpi_common)"
    key <I54>   {       [ XF86MonBrightnessUp   ]       };
    key <II65>  {       [ XF86MonBrightnessDown ]       };
};

partial alphanumeric_keys
xkb_symbols "pc105" {
    include "inet(media_nav_acpi_common)"
};

partial alphanumeric_keys
xkb_symbols "chromebook" {
	include "level3(ralt_switch)"
        key <FK01> {    [ XF86Back ] };
        key <FK02> {    [ XF86Forward ] };
        key <FK03> {    [ XF86Reload ] };
        key <FK04> {    [ F11 ] };
//        key <FK05> {    [ F5, F5, F5, F5 ] }; // Overview key
        key <FK06> {    [ XF86MonBrightnessDown ] };
        key <FK07> {    [ XF86MonBrightnessUp ] };
        key <FK08> {    [ XF86AudioMute ] };
        key <FK09> {    [ XF86AudioLowerVolume ] };
        key <FK10> {    [ XF86AudioRaiseVolume ] };
        key <BKSP> {    [ BackSpace, BackSpace, Delete ] };
        key <UP>   {    [ Up, Up, Prior, Up ] };
        key <DOWN> {    [ Down, Down, Next, Down ] };
        key <LEFT> {    [ Left, Left, Home, Left ] };
        key <RGHT> {    [ Right, Right, End, Right ] };
        key <LWIN> {    [ Super_L, Super_L, Caps_Lock, Super_L ] };
};

partial alphanumeric_keys
xkb_symbols "teck227" {
    include "inet(media_nav_common)"
    key <HIRA> { [ Hiragana ] };
};

partial alphanumeric_keys
xkb_symbols "teck229" {
    include "inet(teck227)"
};

// Actions which control the server's behavior.

partial keypad_keys function_keys
xkb_symbols "xfree86" {
    include "keypad(operators)"
    include "srvr_ctrl(fkey2vt)"
};

partial function_keys
xkb_symbols "fkey2vt" {

    key <FK01> {
	type="CTRL+ALT",
	symbols[Group1]= [ F1, F1, F1, F1, XF86_Switch_VT_1 ]
    };

    key <FK02> {
	type="CTRL+ALT",
	symbols[Group1]= [ F2, F2, F2, F2, XF86_Switch_VT_2 ]
    };

    key <FK03> {
	type="CTRL+ALT",
	symbols[Group1]= [ F3, F3, F3, F3, XF86_Switch_VT_3 ]
    };

    key <FK04> {
	type="CTRL+ALT",
	symbols[Group1]= [ F4, F4, F4, F4, XF86_Switch_VT_4 ]
    };

    key <FK05> {
	type="CTRL+ALT",
	symbols[Group1]= [ F5, F5, F5, F5, XF86_Switch_VT_5 ]
    };

    key <FK06> {
	type="CTRL+ALT",
	symbols[Group1]= [ F6, F6, F6, F6, XF86_Switch_VT_6 ]
    };

    key <FK07> {
	type="CTRL+ALT",
	symbols[Group1]= [ F7, F7, F7, F7, XF86_Switch_VT_7 ]
    };

    key <FK08> {
	type="CTRL+ALT",
	symbols[Group1]= [ F8, F8, F8, F8, XF86_Switch_VT_8 ]
    };

    key <FK09> {
	type="CTRL+ALT",
	symbols[Group1]= [ F9, F9, F9, F9, XF86_Switch_VT_9 ]
    };

    key <FK10> {
	type="CTRL+ALT",
	symbols[Group1]= [ F10, F10, F10, F10, XF86_Switch_VT_10 ]
    };

    key <FK11> {
	type="CTRL+ALT",
	symbols[Group1]= [ F11, F11, F11, F11, XF86_Switch_VT_11 ]
    };

    key <FK12> {
	type="CTRL+ALT",
	symbols[Group1]= [ F12, F12, F12, F12, XF86_Switch_VT_12 ]
    };
};

partial function_keys keypad_keys
xkb_symbols "no_srvr_keys" {

    key.type="TWO_LEVEL";

    key <FK01> { [ F1, F1 ]	};
    key <FK02> { [ F2, F2 ]	};
    key <FK03> { [ F3, F3 ]	};
    key <FK04> { [ F4, F4 ]	};
    key <FK05> { [ F5, F5 ]	};
    key <FK06> { [ F6, F6 ]	};
    key <FK07> { [ F7, F7 ]	};
    key <FK08> { [ F8, F8 ]	};
    key <FK09> { [ F9, F9 ]	};
    key <FK10> { [ F10, F10 ]	};
    key <FK11> { [ F11, F11 ]	};
    key <FK12> { [ F12, F12 ]	};

    key <KPDV> { [ KP_Divide,	KP_Divide	] };
    key <KPMU> { [ KP_Multiply,	KP_Multiply	] };
    key <KPSU> { [ KP_Subtract,	KP_Subtract	] };
    key <KPAD> { [ KP_Add,	KP_Add		] };
};

partial function_keys
xkb_symbols "grab_debug" {

    key <FK11> {
	type="CTRL+ALT",
	symbols[Group1]= [ F11, F11, F11, F11, XF86LogGrabInfo ]
    };

    key <FK12> {
	type="CTRL+ALT",
	symbols[Group1]= [ F12, F12, F12, F12, XF86LogWindowTree ]
    };
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "rs(latin)"

    name[Group1]="Slovenian";

    key <TLDE> { type[Group1]="TWO_LEVEL", [ cedilla, diaeresis ] };
};

partial alphanumeric_keys
xkb_symbols "us" {

    include "rs(latinyz)"

    name[Group1]= "Slovenian (US)";

    key <TLDE> { type[Group1]="TWO_LEVEL", [ cedilla, diaeresis ] };
};

partial alphanumeric_keys
xkb_symbols "alternatequotes" {

    include "rs(latinalternatequotes)"

    name[Group1]= "Slovenian (with guillemets)";

    key <TLDE> { type[Group1]="TWO_LEVEL", [ cedilla, diaeresis ] };
};
//
// Default layout, additional characters must be in "phoneticx" (with "x") or other extended layout variants below
//
default partial alphanumeric_keys
xkb_symbols "phonetic" {

    name[Group1]= "Indonesian (Arab Melayu, phonetic)";

    // `
    key <TLDE> { [ grave,        asciitilde,        VoidSymbol, VoidSymbol                ] };

    // 1..=
    key <AE01> { [ Arabic_1,     exclam,            1,          VoidSymbol                ] };
    key <AE02> { [ Arabic_2,     at,                2,          VoidSymbol                ] };
    key <AE03> { [ Arabic_3,     numbersign,        3,          VoidSymbol                ] };
    key <AE04> { [ Arabic_4,     VoidSymbol,        4,          dollar                    ] };
    key <AE05> { [ Arabic_5,     Arabic_percent,    5,          percent                   ] };
    key <AE06> { [ Arabic_6,     asciicircum,       6,          VoidSymbol                ] };
    key <AE07> { [ Arabic_7,     ampersand,         7,          VoidSymbol                ] };
    key <AE08> { [ Arabic_8,     asterisk,          8,          VoidSymbol                ] };
    key <AE09> { [ Arabic_9,     parenright,        9,          VoidSymbol                ] };
    key <AE10> { [ Arabic_0,     parenleft,         0,          VoidSymbol                ] };
    key <AE11> { [ minus,        Arabic_tatweel,    VoidSymbol, underscore                ] };
    key <AE12> { [ equal,        plus,              VoidSymbol, VoidSymbol                ] };

    // Q..]
    key <AD01> { [ Arabic_qaf,          Arabic_maddaonalef,     VoidSymbol,    VoidSymbol      ] };
    key <AD02> { [ Arabic_waw,          VoidSymbol,             VoidSymbol,    VoidSymbol      ] };
    key <AD03> { [ Arabic_alefmaksura,  Arabic_ain,             VoidSymbol,    VoidSymbol      ] };
    key <AD04> { [ Arabic_ra,           VoidSymbol,             VoidSymbol,    VoidSymbol      ] };
    key <AD05> { [ Arabic_teh,          Arabic_tehmarbuta,      Arabic_tah,    VoidSymbol      ] };
    key <AD06> { [ Arabic_yeh,          VoidSymbol,             VoidSymbol,    VoidSymbol      ] };
    key <AD07> { [ Arabic_hamzaonwaw,   VoidSymbol,             VoidSymbol,    VoidSymbol      ] };
    key <AD08> { [ Arabic_hamzaonyeh,   Arabic_hamzaunderalef,  VoidSymbol,    VoidSymbol      ] };
    key <AD09> { [ Arabic_hamza,        U0674,                  VoidSymbol,    VoidSymbol      ] }; // high_hamza
    key <AD10> { [ Arabic_veh,          VoidSymbol,             VoidSymbol,    VoidSymbol      ] }; // p
    key <AD11> { [ bracketright,        braceright,             VoidSymbol,    VoidSymbol      ] };
    key <AD12> { [ bracketleft,         braceleft,              VoidSymbol,    VoidSymbol      ] };

    // \ 
    key <BKSL> { [ backslash,           bar,                    VoidSymbol,    VoidSymbol      ] };

    // A..'
    key <AC01> { [ Arabic_alef,       Arabic_hamzaonalef,  VoidSymbol,      VoidSymbol       ] };
    key <AC02> { [ Arabic_seen,       Arabic_sheen,        Arabic_sad,      VoidSymbol       ] };
    key <AC03> { [ Arabic_dal,        VoidSymbol,          Arabic_dad,      VoidSymbol       ] };
    key <AC04> { [ Arabic_feh,        VoidSymbol,          VoidSymbol,      VoidSymbol       ] };
    key <AC05> { [ U0762,             U06a0,               Arabic_ghain,    U06af            ] }; // g, ng, gaf (tausug)
    key <AC06> { [ Arabic_ha,         Arabic_hah,          VoidSymbol,      VoidSymbol       ] };
    key <AC07> { [ Arabic_jeem,       VoidSymbol,          VoidSymbol,      VoidSymbol       ] };
    key <AC08> { [ Arabic_keheh,      Arabic_kaf,          VoidSymbol,      VoidSymbol       ] }; // k
    key <AC09> { [ Arabic_lam,        VoidSymbol,          VoidSymbol,      VoidSymbol       ] };
    key <AC10> { [ Arabic_semicolon,  colon,               semicolon,       VoidSymbol       ] };
    key <AC11> { [ 0x10000ab,         0x10000bb,           apostrophe,      quotedbl         ] }; // «, »

    // not exist in US keyboard
    key <LSGT> { [ bar,               brokenbar,           VoidSymbol,      VoidSymbol       ] };

    // Z../
    key <AB01> { [ Arabic_zain,    Arabic_thal,           Arabic_zah,       VoidSymbol       ] };
    key <AB02> { [ Arabic_khah,    VoidSymbol,            VoidSymbol,       VoidSymbol       ] };
    key <AB03> { [ Arabic_tcheh,   VoidSymbol,            VoidSymbol,       VoidSymbol       ] }; // c
    key <AB04> { [ Arabic_theh,    VoidSymbol,            VoidSymbol,       U06cf            ] }; // waw_with_dot_above (malay)
    key <AB05> { [ Arabic_beh,     VoidSymbol,            VoidSymbol,       VoidSymbol       ] };
    key <AB06> { [ Arabic_noon,    U06bd,                 VoidSymbol,       VoidSymbol       ] }; // ny
    key <AB07> { [ Arabic_meem,    VoidSymbol,            VoidSymbol,       VoidSymbol       ] };
    key <AB08> { [ Arabic_comma,   greater,               comma,            0x100066b        ] }; // decimal_separator
    key <AB09> { [ period,         less,                  Arabic_fullstop,  0x100066c        ] }; // thousands_separator
    key <AB10> { [ slash,          Arabic_question_mark,  0x100060d,        question         ] }; // date_separator

    include "level3(ralt_switch)"
};


//
// Extended layout, non-standard characters
//
partial alphanumeric_keys
xkb_symbols "phoneticx" {

    include "id(phonetic)"
    name[Group1]= "Indonesian (Arab Melayu, extended phonetic)";

    // 1..=
    key <AE01> { [ NoSymbol,  NoSymbol,  NoSymbol,      Arabic_superscript_alef   ] };
    key <AE09> { [ NoSymbol,  NoSymbol,  NoSymbol,      0x100fd3e                 ] }; // ornate_left
    key <AE10> { [ NoSymbol,  NoSymbol,  NoSymbol,      0x100fd3f                 ] }; // ornate_right

    // Q..]
    key <AD02> { [ NoSymbol,  NoSymbol,  Arabic_shadda, NoSymbol                  ] };
    key <AD03> { [ NoSymbol,  NoSymbol,  0x10008e6,     0x10008e4                 ] }; // curly_kasra, curly_fatha
    key <AD07> { [ NoSymbol,  NoSymbol,  Arabic_damma,  Arabic_dammatan           ] };
    key <AD08> { [ NoSymbol,  NoSymbol,  Arabic_kasra,  Arabic_kasratan           ] };
    key <AD09> { [ NoSymbol,  NoSymbol,  0x100065d,     NoSymbol                  ] }; // reversed_damma

    // A..'
    key <AC01> { [ NoSymbol,  NoSymbol,  Arabic_fatha,  Arabic_fathatan           ] };
    key <AC07> { [ NoSymbol,  NoSymbol,  0x10008f8,     NoSymbol                  ] }; // right_arrowhead_above

    // Z../
    key <AB02> { [ NoSymbol,  NoSymbol,  0x100065b,     0x100065C                 ] }; // inverted_small_v_above, dot_below
    key <AB03> { [ NoSymbol,  NoSymbol,  Arabic_sukun,  0x10006E1                 ] }; // small_high_dotless_head_of_khah
};
// based on a keyboard map from an 'xkb/symbols/pl' file

default partial alphanumeric_keys
xkb_symbols "basic" {

    // Visualisation and description: http://podziemie.net/xkb/pl
    // Contact: Michał Górny <zrchos+freedesktop@gmail.com>

    include "latin"

    name[Group1]="Polish";

    key <AE01>	{ [         1,     exclam,     notequal,   exclamdown ]	};
    key <AE02>	{ [         2,         at,  twosuperior, questiondown ]	};
    key <AE04>	{ [         4,     dollar,         cent,   onequarter ]	};
    key <AE05>	{ [         5,    percent,     EuroSign,        U2030 ]	};
    key <AE06>	{ [         6, asciicircum,     onehalf,   logicaland ]	};
    key <AE07>	{ [         7,  ampersand,      section,        U2248 ]	};
    key <AE08>	{ [         8,   asterisk, periodcentered, threequarters ] };
    key <AE09>	{ [         9,  parenleft, guillemotleft,   plusminus ]	};
    key <AE10>	{ [         0, parenright, guillemotright,     degree ]	};
    key <AE11>	{ [     minus, underscore,       endash,       emdash ]	};

    key <AD01>	{ [         q,          Q,     Greek_pi,  Greek_OMEGA ]	};
    key <AD02>	{ [         w,          W,           oe,           OE ]	};
    key <AD03>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD04>	{ [         r,          R,    copyright,   registered ]	};
    key <AD05>	{ [         t,          T,       ssharp,    trademark ]	};
    key <AD08>	{ [         i,          I,   rightarrow,        U2194 ]	};
    key <AD09>	{ [         o,          O,       oacute,       Oacute ]	};

    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC04>	{ [         f,          F,           ae,           AE ]	};
    key <AC06>	{ [         h,          H, rightsinglequotemark, U2022 ] };
    key <AC07>	{ [         j,          J,        schwa,        SCHWA ]	};
    key <AC08>	{ [         k,          K,     ellipsis,  dead_stroke ]	};
    key <TLDE>	{ [     grave, asciitilde,      notsign,    logicalor ]	};

    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB04>	{ [         v,          V, doublelowquotemark, leftsinglequotemark ] };
    key <AB05>	{ [         b,          B, rightdoublequotemark, leftdoublequotemark ] };
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};
    key <AB07>	{ [         m,          M,           mu,     infinity ]	};
    key <AB08>	{ [     comma,       less, lessthanequal,    multiply ]	};
    key <AB09>	{ [    period,    greater, greaterthanequal, division ]	};

    key <SPCE>	{ [     space,      space, nobreakspace, nobreakspace ]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "legacy" {

    include "latin"

    name[Group1]="Polish (legacy)";

    key <AD03>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD07>  { [         u,          U,	EuroSign,     cent    ] };
    key <AD09>	{ [         o,          O,       oacute,       Oacute ]	};

    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};

    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "qwertz" {

    include "latin(type3)"

    name[Group1]="Polish (QWERTZ)";

    key <AE01>	{ [         1,     exclam,   asciitilde,   exclamdown ]	};
    key <AE02>	{ [         2,   quotedbl,   dead_caron,    oneeighth ]	};
    key <AE03>	{ [         3, numbersign, dead_circumflex,  sterling ]	};
    key <AE04>	{ [         4,     dollar,   dead_breve,       dollar ]	};
    key <AE05>	{ [         5,    percent,       degree, threeeighths ]	};
    key <AE06>	{ [         6,  ampersand,  dead_ogonek,  fiveeighths ]	};
    key <AE07>	{ [         7,      slash,   dead_grave, seveneighths ]	};
    key <AE08>	{ [         8,  parenleft, dead_abovedot,   trademark ]	};
    key <AE09>	{ [         9, parenright,   dead_acute,    plusminus ]	};
    key <AE10>	{ [         0,      equal, dead_doubleacute,   degree ]	};
    key <AE11>	{ [      plus,   question, dead_diaeresis, questiondown ] };
    key <AE12>	{ [apostrophe,   asterisk, dead_cedilla,  dead_ogonek ]	};

    key <AD01>  { [         q,          Q ] };
    key <AD02>  { [         w,          W ] };
    key <AD03>	{ [         e,          E,     EuroSign,         cent ]	};
    key <AD11>	{ [ zabovedot,     nacute,     division, dead_abovering ] };
    key <AD12>	{ [    sacute,     cacute,     multiply,  dead_macron ]	};

    key <AC02>	{ [         s,          S,      dstroke,      section ]	};
    key <AC03>	{ [         d,          D,      Dstroke,          ETH ]	};
    key <AC04>  { [         f,          F ] };
    key <AC08>	{ [         k,          K,          kra,    ampersand ]	};
    key <AC09>	{ [         l,          L,      lstroke,      Lstroke ]	};
    key <AC10>	{ [   lstroke,    Lstroke,       dollar, dead_doubleacute ] };
    key <AC11>	{ [   aogonek,    eogonek,       ssharp,   dead_caron ]	};
    key <TLDE>	{ [  abovedot, dead_ogonek,     notsign,      notsign ]	};

    key <BKSL>	{ [    oacute,     zacute,   dead_grave,   dead_breve ]	};
    key <AB03>	{ [         c,          C,         cent,    copyright ]	};
    key <AB10>  { [     minus, underscore, dead_belowdot, dead_abovedot ] };

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

// Polish Dvorak keymaps
// by Rafal Rzepecki <divide@users.sf.net>

// The base keymap "pl" places Polish quotes on quotemark key and 
// moves the dead symbols from there to "1/!" key. If you are used to common 
// dead keys placement, you could use "pl_altquotes"; in this layout 
// dead keys remain in the old place, whereas Polish quotes are placed on the
// "1/!" key. If you do not use Polish quotes at all, you can use "pl_basic" map.

// Basic Polish keymap (without Polish quotes)
partial alphanumeric_keys
xkb_symbols "dvorak" {
    include "us(dvorak)"

    name[Group1] = "Polish (Dvorak)";

    key <AD08> { [	    c,	C,	cacute,	Cacute		]	};
    key <AD10> { [	    l,	L,     lstroke, Lstroke		]	};
    key <AC01> { [	    a,	A,     aogonek, Aogonek		]	};
    key <AC02> { [	    o,	O,      oacute, Oacute		]	};
    key <AC03> { [	    e,	E,     eogonek, Eogonek		]	};
    key <AC09> { [	    n,	N,      nacute, Nacute		]	};
    key <AC10> { [	    s,	S,      sacute, Sacute		]	};
    key <AB09> { [	    v,	V,      zacute, Zacute		]	};
    key <AB10> { [	    z,	Z,   zabovedot, Zabovedot	]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

// Default Polish keymap with Polish quotes on quotemark key
partial alphanumeric_keys
xkb_symbols "dvorak_quotes" {
    include "pl(dvorak)"

    name[Group1] = "Polish (Dvorak, with Polish quotes on quotemark key)";

    key <AD01> { [  apostrophe,	quotedbl, doublelowquotemark, rightdoublequotemark	] };

    // Dead symbols moved to this key
    key <AE01> { [	    1,	exclam, dead_acute, dead_diaeresis 		]	};
};

// Polish keymap with Polish quotes on key "1/!"
partial alphanumeric_keys
xkb_symbols "dvorak_altquotes" {
    include "pl(dvorak)"

    name[Group1] = "Polish (Dvorak, with Polish quotes on key 1)";

    key <AE01> { [	    1,	exclam, doublelowquotemark, rightdoublequotemark	]	};
};

// Polish programmer Dvorak keymap  by Michal Nazarewicz <mina86@mina86.com>
// based on programmer Dvorak  by Roland Kaufmann <rlndkfmn at gmail dot com>
//      and Polish Dvorak keymaps  by Rafal Rzepecki <divide@users.sf.net
//      and latin(basic)
//
// * Numbers are in shift position (like French).
// * Symbols have been placed in locations that give good
//   hand-alternation and finger rolling with symbols that usually
//   follows.
// * Polish diacritics on AltGr+"acelnosxz" (same as in basic pl(basic)).
// * Aditionaly, zacute on AltGr+"v" so that both zacute and zabovedot
//   next to each other same as in pl(basic).
// * Polish open and close quotes on AltGr+& (same location as in
//   pl(dvp_altquotes)).
// * English open quote on AltGr+k (same location as in latin(basic))
// * English/Polish close quote on AltGr+b (similar location as in
//   latin(basic) but moved right because AltGr+x is taken for zacute).
// * Polish open and close quote on AltGr+j.
//
// Those rules overwrite only the following rules from us(dvp):
// * ccedilla on AltGr+c
// * aring on Alt+a
// * oslash/Ooblique on Alt+o
// * ae on Alt+e
// * ntilde on Alt+n
//
partial alphanumeric_keys
xkb_symbols "dvp" {
    include "us(dvp)"

    name[Group1] = "Polish (programmer Dvorak)";

    //             Unmodified    Shift           AltGr            Shift+AltGr
    // symbols row, left side
    key <AE01> { [ ampersand,    percent,        doublelowquotemark, rightdoublequotemark ] };

    // symbols row, right side

    // upper row, left side

    // upper row, right side
    key <AD08> { [ c,            C,              cacute,          Cacute     ] };
    key <AD10> { [ l,            L,              lstroke,         Lstroke    ] };

    // home row, left side
    key <AC01> { [ a,            A,              aogonek,         Aogonek    ], type[Group1] = "EIGHT_LEVEL_ALPHABETIC" };
    key <AC02> { [ o,            O,              oacute,          Oacute     ] };
    key <AC03> { [ e,            E,              eogonek,         Eogonek    ] };

    // home row, right side
    key <AC09> { [ n,            N,              nacute,          Nacute     ] };
    key <AC10> { [ s,            S,              sacute,          Sacute     ] };

    // lower row, left side
    key <AB03> { [ j,            J,              doublelowquotemark, rightdoublequotemark ] };
    key <AB04> { [ k,            K,              leftdoublequotemark, leftsinglequotemark ] };
    key <AB05> { [ x,            X,              zacute,          Zacute     ] };

    // lower row, right side
    key <AB06> { [ b,            B,              rightdoublequotemark, rightsinglequotemark ] };
    key <AB09> { [ v,            V,              zacute,          Zacute     ] };
    key <AB10> { [ z,            Z,              zabovedot,       Zabovedot  ] };

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

// Silesian keyboard layout by Grzegorz Kulik <poslunsku@gmail.com>
// and Przemysław Buczkowski <przemub@yahoo.pl>.
// See http://poslunsku.eu/2012/07/slonsko-slabikorzowo-klawiatura-na-windows-i-ubuntu/
// for a description.

partial alphanumeric_keys
xkb_symbols "szl" {

    include "latin"

    name[Group1]="Silesian";

    key <AD01>  { [         q,          Q ] };
    key <AD02>  { [         w,          W ] };
    key <AD03>	{ [         e,          E,      atilde,      Atilde ]	};
    key <AD09>	{ [         o,          O,       ocircumflex,       Ocircumflex ]	};
    key <AD07>  { [         u,          U,       omacron,       Omacron ]        };
    key <AD10>	{ [         p,          P,       otilde,       Otilde ]	};

    key <AC01>	{ [         a,          A,      U014F,      U014E ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC04>  { [         f,          F ] };

    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "csb" {

    include "latin"

    name[Group1]="Kashubian";

    key <AD01>  { [         q,          Q ] };
    key <AD02>  { [         w,          W ] };
    key <AD03>	{ [         e,          E,      eacute,      Eacute ]	};
    key <AD04>	{ [         r,           R,      ediaeresis,      Ediaeresis ]	};
    key <AD06>      { [         y,          Y,      EuroSign,         cent ]        };
    key <AD07>	{ [          u,          U,       ugrave,       Ugrave ]	};
    key <AD08>	{ [         i,            I,       ograve,       Ograve ]	};
    key <AD09>	{ [         o,          O,       oacute,       Oacute ]	};
    key <AD10>	{ [         p,          P,       ocircumflex,       Ocircumflex ]	};

    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,      atilde,      Atilde ]	      };
    key <AC04>  { [         f,          F ] };
    key <AC09>	{ [         l,          L,      lstroke,      Lstroke ]      };

    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

// Russian Polish-phonetic Dvorak
// by Adrian Dziubek <adrian.dziubek@gmail.com>
//
// This layout aims to enable Polish Dvorak users to type with Russian
// Cyrillic alphabet by using the sound correspondence between Polish and
// Russian languages.
//
// This keyboard should be intuitive. Please let me know, if my intuition
// lets You down.
//
// The guidelines used:
// - no Cyrillic symbols are placed on punctuation symbols,
// - visual similarities are ignored if there is a sound correspondence:
//   no Cyrillic_es on c, no Cyrillic_er on p, no Cyrillic_ha on x etc.,
// - the Latin symbols that have close sound correspondence (as read in Polish)
//   to Cyrillic symbols (as read in Russian) are mapped respectively:
//         * j -> Cyrillic_shorti,
//         * k -> Cyrillic_ka,
//         * b -> Cyrillic_be,
//         * m -> Cyrillic_em,
//         * w -> Cyrillic_ve,
//         * z -> Cyrillic_ze
//         * a -> Cyrillic_a,
//         * o -> Cyrillic_o,
//         * u -> Cyrillic_u,
//         * i -> Cyrillic_i,
//         * d -> Cyrillic_de,
//         * h -> Cyrillic_ha,
//         * t -> Cyrillic_te,
//         * n -> Cyrillic_en,
//         * s -> Cyrillic_es,
//         * p -> Cyrillic_pe,
//         * y -> Cyrillic_yeru,
//         * f -> Cyrillic_ef,
//         * g -> Cyrillic_ghe,
//         * c -> Cyrillic_tse,
//         * r -> Cyrillic_er,
//         * l -> Cyrillic_el,
// - ...and little more distant:
//         * AltGr + s (sacute) -> Cyrillic_sha,
//         * AltGr + z (zabovedot) -> Cyrillic_zhe,
//         * AltGr + c (cacute) -> Cyrillic_che,
// - the soft versions of Russian vowels are accessible through AltGr + vowel:
//         * AltGr + a -> Cyrillic_ya,
//         * AltGr + o -> Cyrillic_io,
//         * AltGr + u -> Cyrillic_yu,
// - ...except for Cyrillic_ie which is more frequently used than Cyrillic_e:
//         * AltGr + e -> Cyrillic_e,
//         * e -> Cyrillic_ie,
// - q is also mapped to Cyrillic_ya, following the US phonetic keyboard
//   choice, as Cyrillic_ya and Cyrillic_a are both often used:
//         * q -> Cyrillic_ya,
// - the soft and hard symbols that have no Polish counterparts are mapped
//   to rarely used in Polish x character:
//         * x -> Cyrillic_softsign
//         * AltGr + x -> Cyrillic_hardsign,
// - the soft sign is additionally available as AltGr + consonant combination
//   for every consonant that can be softened or separated by soft sign:
//         * AltGr + l -> Cyrillic_softsign,
//         * AltGr + d -> Cyrillic_softsign,
//         * AltGr + n -> Cyrillic_softsign,
//         * AltGr + r -> Cyrillic_softsign,
//         * AltGr + t -> Cyrillic_softsign,
//         * AltGr + p -> Cyrillic_softsign,
// - ...and also because of visual similarity under level3 b:
//         * AltGr + b -> Cyrillic_softsign,
//         * Shift + AltGr + b -> Cyrillic_hardsign,
// - the Cyrillic_shcha symbol is placed under AltGr + w (visual similarity):
//         * AltGr + w -> Cyrillic_shcha
// - v, also rarely unused in Polish is mapped like w:
//         * v -> Cyrillic_ve,
//
partial alphanumeric_keys
xkb_symbols "ru_phonetic_dvorak" {
   include "us(dvorak)"

   name[Group1] = "Russian (Poland, phonetic Dvorak)";

   // lower row
   key <AB02> { [ Cyrillic_ya, Cyrillic_YA ] };
   key <AB03> { [ Cyrillic_shorti, Cyrillic_SHORTI ] };
   key <AB04> { [ Cyrillic_ka, Cyrillic_KA ] };
   key <AB05> { [ Cyrillic_shcha, Cyrillic_SHCHA ] };
   key <AB06> { [ Cyrillic_be, Cyrillic_BE, Cyrillic_hardsign, Cyrillic_HARDSIGN ] };
   key <AB07> { [ Cyrillic_em, Cyrillic_EM ] };
   key <AB08> { [ Cyrillic_ve, Cyrillic_VE, Cyrillic_shcha, Cyrillic_SHCHA ] };
   key <AB09> { [ Cyrillic_ve, Cyrillic_VE, Cyrillic_shcha, Cyrillic_SHCHA ] };
   key <AB10> { [ Cyrillic_ze, Cyrillic_ZE, Cyrillic_zhe, Cyrillic_ZHE ] };
   // home row
   key <AC01> { [ Cyrillic_a, Cyrillic_A, Cyrillic_ya, Cyrillic_YA  ] };
   key <AC02> { [ Cyrillic_o, Cyrillic_O, Cyrillic_io, Cyrillic_IO ] };
   key <AC03> { [ Cyrillic_ie, Cyrillic_IE, Cyrillic_e, Cyrillic_E ] };
   key <AC04> { [ Cyrillic_u, Cyrillic_U, Cyrillic_yu, Cyrillic_YU  ] };
   key <AC05> { [ Cyrillic_i, Cyrillic_I ] };
   key <AC06> { [ Cyrillic_de, Cyrillic_DE, Cyrillic_softsign, Cyrillic_SOFTSIGN ] };
   key <AC07> { [ Cyrillic_ha, Cyrillic_HA ] };
   key <AC08> { [ Cyrillic_te, Cyrillic_TE, Cyrillic_softsign, Cyrillic_SOFTSIGN ] };
   key <AC09> { [ Cyrillic_en, Cyrillic_EN, Cyrillic_softsign, Cyrillic_SOFTSIGN ] };
   key <AC10> { [ Cyrillic_es, Cyrillic_ES, Cyrillic_sha, Cyrillic_SHA ] };
   // upper row
   key <AD04> { [ Cyrillic_pe, Cyrillic_PE, Cyrillic_softsign, Cyrillic_SOFTSIGN ] };
   key <AD05> { [ Cyrillic_yeru, Cyrillic_YERU ] };
   key <AD06> { [ Cyrillic_ef, Cyrillic_EF ] };
   key <AD07> { [ Cyrillic_ghe, Cyrillic_GHE ] };
   key <AD08> { [ Cyrillic_tse, Cyrillic_TSE, Cyrillic_che, Cyrillic_CHE ] };
   key <AD09> { [ Cyrillic_er, Cyrillic_ER, Cyrillic_softsign, Cyrillic_SOFTSIGN ] };
   key <AD10> { [ Cyrillic_el, Cyrillic_EL, Cyrillic_softsign, Cyrillic_SOFTSIGN ] };

   include "kpdl(comma)"

   include "level3(ralt_switch)"
};

// EXTRAS:

// A Polish keymap with a comprehensive set of quotes, dashes, and dead accents
// 
// See http://marcinwolinski.pl/keyboard/ for a description.
//
// ┌────┐
// │ 2 4│   2 = Shift,  4 = Level3 + Shift
// │ 1 3│   1 = Normal, 3 = Level3
// └────┘
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │ ~ ~ │ ! ' │ @ " │ # ˝ │ $ ¸ │ % ˇ │ ^ ^ │ & ˘ │ * ˙ │ ( ̣ │ ) ° │ _ ¯ │ + ˛ ┃ ⌫ Back  ┃
// │ ` ` │ 1 ¡ │ 2 © │ 3 • │ 4 § │ 5 € │ 6 ¢ │ 7 − │ 8 × │ 9 ÷ │ 0 ° │ - – │ = — ┃  space  ┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃ Q   │ W   │ E Ę │ R   │ T   │ Y   │ U   │ I   │ O Ó │ P   │ { « │ } » ┃ Enter ┃
// ┃Tab ↹  ┃ q   │ w   │ e ę │ r   │ t   │ y   │ u   │ i   │ o ó │ p   │ [ ‹ │ ] › ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ A Ą │ S Ś │ D   │ F   │ G   │ H   │ J   │ K   │ L Ł │ : “ │ " ” │ | ¶ ┃      ┃
// ┃Caps ⇬  ┃ a ą │ s ś │ d   │ f   │ g   │ h   │ j   │ k   │ l ł │ ; ‘ │ ' ’ │ \   ┃      ┃
// ┣━━━━━━━━┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
// ┃             │ Z Ż │ X Ź │ C Ć │ V   │ B   │ N Ń │ M   │ < „ │ > · │ ? ¿ ┃             ┃
// ┃Shift ⇧      │ z ż │ x ź │ c ć │ v   │ b   │ n ń │ m   │ , ‚ │ . … │ / ⁄ ┃Shift ⇧      ┃
// ┣━━━━━━━┳━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃ ␣                               ⍽ ┃       ┃       ┃       ┃
// ┃Ctrl   ┃Meta   ┃Alt    ┃ ␣           Space               ⍽ ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys
xkb_symbols "intl" {

    include "latin(intl)"

    name[Group1]="Polish (intl., with dead keys)";

    key <AD03>	{ [         e,          E,      eogonek,      Eogonek ]	};
    key <AD09>	{ [         o,          O,       oacute,       Oacute ]	};

    key <AC01>	{ [         a,          A,      aogonek,      Aogonek ]	};
    key <AC02>	{ [         s,          S,       sacute,       Sacute ]	};
    key <AC09>	{ [         l,          L,      lstroke,      Lstroke ]	};

    key <AB01>	{ [         z,          Z,    zabovedot,    Zabovedot ]	};
    key <AB02>	{ [         x,          X,       zacute,       Zacute ]	};
    key <AB03>	{ [         c,          C,       cacute,       Cacute ]	};
    key <AB06>	{ [         n,          N,       nacute,       Nacute ]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

// Polish Colemak
// by Tomek Piotrowski <tomek.piotrowski@atteo.com>
//
partial alphanumeric_keys
xkb_symbols "colemak" {
    include "us(colemak)"
    name[Group1]= "Polish (Colemak)";

    key <AB01> { [            z,            Z,       zabovedot,        Zabovedot ] };
    key <AB02> { [            x,            X, 	        zacute,           Zacute ] };
    key <AB03> { [            c,            C,          cacute,           Cacute ] };
    key <AC01> { [            a,            A,         aogonek,          Aogonek ] };
    key <AC03> { [            s,            S,          sacute,           Sacute ] };
    key <AC07> { [            n,            N,          nacute,           Nacute ] };
    key <AC08> { [            e,            E,         eogonek,          Eogonek ] };
    key <AC10> { [            o,            O,          oacute,           Oacute ] };
    key <AD01> { [            q,            Q,              ae,               AE ] };
    key <AD02> { [            w,            W, dead_circumflex,       asciitilde ] };
    key <AD03> { [            f,            F,          ssharp,        0x1001e9e ] };
    key <AD07> { [            l,            L,         lstroke,          Lstroke ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
       xkb_symbols "sun_type6" {
       include "sun_vndr/pl(sun_type6)"
};

//Glagolica
partial alphanumeric_keys
xkb_symbols "glagolica"
{
    name[Group1] = "Polish (Glagolica)";

    key <AD01> { [ U2C21, U2C23, any, any ] };//q/Q/Ⱑ/Ⱓ
    key <AD02> { [ U2C02, U2C19, any, any ] };//w/W/Ⰲ/Ⱉ/
    key <AD03> { [ U2C05, U2C27, U2C24, U2C25 ] };//e/E/Ⰵ/Ⱗ/Ⱔ/Ⱕ
    key <AD04> { [ U2C13, U2C13, any, any ] };//r/R/Ⱃ/Ⱃ
    key <AD05> { [ U2C15, U2C15, any, any ] };//t/T/Ⱅ/Ⱅ
    key <AD06> { [ U2C09, U2C0A, U2C20, any ] };//y/Y/Ⰹ/Ⰺ/Ⱐ
    key <AD07> { [ U2C16, U2C16, any, any ] };//u/U/Ⱆ/
    key <AD08> { [ U2C0B, U2C09, any, any ] };//i/I/Ⰻ/Ⰹ
    key <AD09> { [ U2C11, U2C19, U2C41, any ] };//o/O/Ⱁ/Ⱉ/ⱁ
    key <AD10> { [ U2C12, U2C1A, any, any ] };//p/P/Ⱂ/Ⱊ
    key <AD11> { [ U2C1E, U2C26, any, any ] };//[/{/Ⱎ/Ⱖ
    key <AD12> { [ U2C1B, U2C29, any, any ] };//]/}/Ⱋ/Ⱙ
    key <AC01> { [ U2C00, U2C00, U2C28, U2C29 ] };//a/A/Ⰰ/Ⰰ/Ⱘ/Ⱙ
    key <AC02> { [ U2C14, U2C1E, any, any ] };//[/{/Ⱄ/Ⱎ
    key <AC03> { [ U2C04, U2C04, any, any ] };//d/D/Ⰴ/Ⰴ
    key <AC04> { [ U2C17, U2C2A, any, any ] };//f/F/Ⱇ/Ⱚ
    key <AC05> { [ U2C03, U2C03, any, any ] };//g/G/Ⰳ/Ⰳ
    key <AC06> { [ U2C18, U2C18, any, any ] };//h/H/Ⱈ/Ⱈ
    key <AC07> { [ U2C0A, U2C0A, any, any ] };//j/J/Ⰺ/Ⰺ
    key <AC08> { [ U2C0D, U2C0D, any, any ] };//k/K/Ⰽ/Ⰽ
    key <AC09> { [ U2C0E, U2C0E, any, any ] };//l/L/Ⰾ/Ⰾ
    key <AC12> { [ U2C0C, any, any, any ] };//\/|/Ⰼ
    key <AC10> { [ U2C28, U2C24, any, any ] };//;/:/Ⱘ/Ⱔ
    key <AC11> { [ U2C06, any, any, any ] };//'/"/Ⰶ
    key <AB01> { [ U2C08, U2C07, any, any ] };//z/Z/Ⰸ/Ⰷ
    key <AB02> { [ U2C20, U2C1F, any, any ] };//x/X/Ⱐ/Ⱏ
    key <AB03> { [ U2C1C, U2C1D, any, any] };//c/C/Ⱌ/Ⱍ
    key <AB04> { [ U2C02, U2C2B, any, any ] };//v/V/Ⰲ/Ⱛ
    key <AB05> { [ U2C01, U2C01, any, any ] };//b/B/Ⰱ/Ⰱ
    key <AB06> { [ U2C10, U2C10, any, any ] };//n/N/Ⱀ/Ⱀ
    key <AB07> { [ U2C0F, U2C0F, any, any ] };//m/M/Ⰿ/Ⰿ

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "rs(latin)"
    name[Group1]="Bosnian";
};

partial alphanumeric_keys
xkb_symbols "us" {

    include "rs(latinyz)"
    name[Group1]= "Bosnian (US)";
};

partial alphanumeric_keys
xkb_symbols "alternatequotes" {

    include "rs(latinalternatequotes)"
    name[Group1]= "Bosnian (with guillemets)";
};

partial alphanumeric_keys
xkb_symbols "unicode" {

    include "rs(latinunicode)"
    name[Group1]= "Bosnian (with Bosnian digraphs)";
};

partial alphanumeric_keys
xkb_symbols "unicodeus" {

    include "rs(latinunicodeyz)"
    name[Group1]= "Bosnian (US, with Bosnian digraphs)";
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    // This layout conforms to a new Slovak compromise standard
    // designed to satisfy most Unix, Windows and Mac users.
    // 2001 by Kamil Toman <ktoman@email.cz>

    include "latin"
    name[Group1] = "Slovak";

    key <TLDE>  { [ semicolon, dead_abovering,    grave,   asciitilde ] };
    key <AE01>  { [      plus,          1,       exclam,   dead_tilde ] };
    key <AE02>  { [    lcaron,          2,           at,   dead_caron ] };
    key <AE03>  { [    scaron,          3,   numbersign, dead_circumflex ] };
    key <AE04>  { [    ccaron,          4,       dollar,   dead_breve ] };
    key <AE05>  { [    tcaron,          5,      percent, dead_abovering]};
    key <AE06>  { [    zcaron,          6,  asciicircum,  dead_ogonek ] };
    key <AE07>  { [    yacute,          7,    ampersand,   dead_grave ] };
    key <AE08>  { [    aacute,          8,     asterisk, dead_abovedot] };
    key <AE09>  { [    iacute,          9,    braceleft,   dead_acute ] };
    key <AE10>  { [    eacute,          0,   braceright, dead_doubleacute ] };
    key <AE11>  { [     equal,    percent,     NoSymbol, dead_diaeresis]};
    key <AE12>  { [dead_acute, dead_caron,  dead_macron, dead_cedilla ] };

    key <AD01>  { [         q,          Q,    backslash,     NoSymbol ] };
    key <AD02>  { [         w,          W,          bar,     Nosymbol ] };
    key <AD03>  { [         e,          E,     EuroSign,     NoSymbol ] };
    key <AD04>  { [         r,          R,     NoSymbol,     NoSymbol ] };
    key <AD05>  { [         t,          T,     NoSymbol,     NoSymbol ] };
    key <AD06>  { [         z,          Z,     NoSymbol,     NoSymbol ] };
    key <AD07>  { [         u,          U,     NoSymbol,     NoSymbol ] };
    key <AD08>  { [         i,          I,     NoSymbol,     NoSymbol ] };
    key <AD09>  { [         o,          O,     NoSymbol,     NoSymbol ] };
    key <AD10>  { [         p,          P,     NoSymbol,     NoSymbol ] };

    key <AD11>  { [    uacute,      slash,  bracketleft,     division ] };
    key <AD12>  { [adiaeresis,  parenleft, bracketright,     multiply ] };

    key <AC01>  { [         a,          A,   asciitilde,     NoSymbol ] };
    key <AC02>  { [         s,          S,      dstroke,     NoSymbol ] };
    key <AC03>  { [         d,          D,      Dstroke,     NoSymbol ] };
    key <AC04>  { [         f,          F,  bracketleft,     NoSymbol ] };
    key <AC05>  { [         g,          G, bracketright,     NoSymbol ] };
    key <AC06>  { [         h,          H,        grave,     NoSymbol ] };
    key <AC07>  { [         j,          J,   apostrophe,     NoSymbol ] };
    key <AC08>  { [         k,          K,      lstroke,     NoSymbol ] };
    key <AC09>  { [         l,          L,      Lstroke,     NoSymbol ] };

    key <AC10>  { [ocircumflex,   quotedbl,      dollar,     NoSymbol ] };
    key <AC11>  { [   section,     exclam,   apostrophe,       ssharp ] };
    key <AC12>  { [  EuroSign, dead_diaeresis, NoSymbol,     NoSymbol ] };
    key <BKSL>  { [    ncaron, parenright,    backslash,          bar ] };

    key <LSGT>  { [ backslash,        bar,        slash,     NoSymbol ] };
    key <AB01>  { [         y,          Y,       degree,     NoSymbol ] };
    key <AB02>  { [         x,          X,   numbersign,     Nosymbol ] };
    key <AB03>  { [         c,          C,    ampersand,     NoSymbol ] };
    key <AB04>  { [         v,          V,           at,     NoSymbol ] };
    key <AB05>  { [         b,          B,    braceleft,     NoSymbol ] };
    key <AB06>  { [         n,          N,   braceright,     NoSymbol ] };
    key <AB07>  { [         m,          M,  asciicircum,     NoSymbol ] };
    key <AB08>  { [     comma,   question,         less,     NoSymbol ] };
    key <AB09>  { [    period,      colon,      greater,     NoSymbol ] };
    key <AB10>  { [     minus, underscore,     asterisk,     NoSymbol ] };

    key <SPCE>  { [     space,      space, nobreakspace, nobreakspace ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys alternate_group
xkb_symbols "acc" {

    // This layout is usually used as the second group, it contains
    // accented characters only, no 'latin' set.
    // 2017 by Pavol Babinčák <scroolik@gmail.com>

    // Based on cz(ucw). Slovak letter frequency is used if a letter can be
    // used with multiple diacritic symbols. Other accented letters of Slovak
    // and Czech language end up on surrounding unused keys.

    name[Group1] = "Slovak (ACC layout, only accented letters)";

    key <AB01> { [zcaron,      Zcaron      ] };
    key <AB03> { [ccaron,      Ccaron      ] };
    key <AB06> { [ncaron,      Ncaron      ] };

    key <AC01> { [aacute,      Aacute      ] };
    key <AC02> { [scaron,      Scaron      ] };
    key <AC03> { [dcaron,      Dcaron      ] };
    key <AC04> { [ecaron,      Ecaron      ] };
    key <AC05> { [rcaron,      Rcaron      ] };
    key <AC06> { [uring,       Uring       ] };
    key <AC08> { [oacute,      Oacute      ] };
    key <AC09> { [lcaron,      Lcaron      ] };

    key <AD01> { [adiaeresis,  Adiaeresis  ] };
    key <AD03> { [eacute,      Eacute      ] };
    key <AD04> { [racute,      Racute      ] };
    key <AD05> { [tcaron,      Tcaron      ] };
    key <AD06> { [yacute,      Yacute      ] };
    key <AD07> { [uacute,      Uacute      ] };
    key <AD08> { [iacute,      Iacute      ] };
    key <AD09> { [ocircumflex, Ocircumflex ] };
    key <AD10> { [lacute,      Lacute      ] };

    key <AE12> { [dead_acute,  dead_caron  ] };
};

xkb_symbols "bksl" {

    // Use <BKSL> instead of <LSGT> (useful for keyboards without <LSGT> key).

    include "sk(basic)"
    name[Group1] = "Slovak (extended backslash)";

    key <BKSL>  { [ backslash,        bar,        slash,     parenright ] };
    key <LSGT>  { [ backslash,  parenleft,        slash,     NoSymbol ] };
};

partial alphanumeric_keys
xkb_symbols "qwerty" {

    // This layout works exactly as the basic Slovak one with the exception
    // of the 'Z' and 'Y' keys, which are in Qwerty style (i.e. swapped).
    // 2001 by Kamil Toman <ktoman@email.cz>

    include "sk(basic)"
    name[Group1] = "Slovak (QWERTY)";

    key <AB01>  { [         z,          Z,       degree,     NoSymbol ] };
    key <AD06>  { [         y,          Y,     NoSymbol,     NoSymbol ] };
};

xkb_symbols "qwerty_bksl" {

    // Use <BKSL> instead of <LSGT> (useful for keyboards without <LSGT> key).

    include "sk(qwerty)"
    name[Group1] = "Slovak (QWERTY, extended backslash)";

    key <BKSL>  { [ backslash,        bar,        slash,     parenright ] };
    key <LSGT>  { [ backslash,  parenleft,        slash,     NoSymbol ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/sk(sun_type6)"
};
//
// Keymap for the Afghan dari keybord layout
// Based on the specification "Computer Locale Requirements for 
// Afghanstan" [1] from the "United Nations Development Programme
// Afghanistan" and the "Afghan Transitional Islamic 
// Administration Ministry of Communications". 
// [1] http://www.evertype.com/standards/af/
// For a MINI HOWTO see [2].
// [2] http://www.afghanischerKulturverein.de/en/afghanComputer_en.php
//
// 2006-02-15 file created by M. Emal Alekozai <memala@gmx.net>

default partial alphanumeric_keys
xkb_symbols "basic" {
   name[Group1]= "Afghani";

   key <TLDE> { [ 0x100200d, 0x10000f7, dead_tilde ] };
   key <AE01> { [ 0x10006f1, exclam, 0x1000060 ] };
   key <AE02> { [ 0x10006f2, 0x100066c, 0x1000040 ] };
   key <AE03> { [ 0x10006f3, 0x100066b, numbersign ] };
   key <AE04> { [ 0x10006f4, 0x100e60b, 0x1000024] };
   key <AE05> { [ 0x10006f5, 0x100066a, 0x1000025 ] };
   key <AE06> { [ 0x10006f6, multiply, 0x100005e ] };
   key <AE07> { [ 0x10006f7, Arabic_comma, 0x1000026 ] };
   key <AE08> { [ 0x10006f8, asterisk, 0x1002022 ] };
   key <AE09> { [ 0x10006f9, 0x1000029, 0x100200e ] };
   key <AE10> { [ 0x10006f0, 0x1000028, 0x100200f ] };
   key <AE11> { [ minus, Arabic_tatweel, 0x100005f ] };
   key <AE12> { [ equal, plus ] };

   key <AD01> { [ Arabic_dad, Arabic_sukun, 0x10000b0 ] };
   key <AD02> { [ Arabic_sad, Arabic_dammatan ] };
   key <AD03> { [ Arabic_theh, Arabic_kasratan, 0x10020ac ] };
   key <AD04> { [ Arabic_qaf, Arabic_fathatan, 0x100fd3e ] };
   key <AD05> { [ Arabic_feh, Arabic_damma, 0x100fd3f ] };
   key <AD06> { [ Arabic_ghain, Arabic_kasra, 0x100e656] };
   key <AD07> { [ Arabic_ain, Arabic_fatha, 0x100e659] };
   key <AD08> { [ Arabic_heh, Arabic_shadda, 0x1000655] };
   key <AD09> { [ Arabic_khah, bracketright, 0x1000027] };
   key <AD10> { [ Arabic_hah, bracketleft, 0x1000022] };
   key <AD11> { [ Arabic_jeem, braceright, 0x1000681 ] };
   key <AD12> { [ 0x1000686, braceleft, 0x1000685 ] };

   key <AC01> { [ Arabic_sheen, Arabic_hamzaonwaw, 0x100069a ] };
   key <AC02> { [ Arabic_seen, Arabic_hamzaonyeh, 0x10006cd ] };
   key <AC03> { [ 0x10006cc, Arabic_yeh, 0x1000649 ] };
   key <AC04> { [ Arabic_beh, Arabic_hamzaunderalef, 0x10006d0 ] };
   key <AC05> { [ Arabic_lam, Arabic_hamzaonalef, 0x10006b7 ] };
   key <AC06> { [ Arabic_alef, Arabic_maddaonalef, 0x1000671 ] };
   key <AC07> { [ Arabic_teh, Arabic_tehmarbuta, 0x100067c ] };
   key <AC08> { [ Arabic_noon, 0x10000bb, 0x10006bc ] };
   key <AC09> { [ Arabic_meem, 0x10000ab, 0x10006ba ] };
   key <AC10> { [ 0x10006a9, colon, 0x100003b ] };
   key <AC11> { [ 0x10006af, Arabic_semicolon, 0x10006ab ] };

   key <BKSL> { [ backslash, bar, 0x100003f ] };

   key <AB01> { [ Arabic_zah, Arabic_kaf, 0x10006d2] };
   key <AB02> { [ Arabic_tah, 0x1000653 , 0x1000691 ] };
   key <AB03> { [ Arabic_zain, 0x1000698, 0x1000696 ] };
   key <AB04> { [ Arabic_ra, 0x1000670 , 0x1000693 ] };
   key <AB05> { [ Arabic_thal, 0x100200c, 0x1000688  ] };
   key <AB06> { [ Arabic_dal, 0x1000654, 0x1000689 ] };
   key <AB07> { [ 0x100067e, Arabic_hamza, 0x1000679 ] };
   key <AB08> { [ Arabic_waw, greater, 0x100002c ] };
   key <AB09> { [ period, less, 0x10006c7 ] };
   key <AB10> { [ slash, Arabic_question_mark, 0x10006c9 ] };

   include "nbsp(zwnj2nb3)"
   include "level3(ralt_switch)"
};

// Keymap for the Afghan pashto keybord layout
// Based on the specification "Computer Locale Requirements for 
// Afghanstan" [1] from the "United Nations Development Programme
// Afghanistan"" and the "Afghan Transitional Islamic 
// Administration Ministry of Communications". 
// [1] http://www.evertype.com/standards/af/
// For a MINI HOWTO see [2].
// [2] http://www.afghanischerKulturverein.de/en/afghanComputer_en.php
// 
// 2006-02-15 file created by M. Emal Alekozai <memala@gmx.net>

partial alphanumeric_keys
xkb_symbols "ps" {
   name[Group1]= "Pashto";

   key <TLDE> { [ 0x100200d, 0x10000f7, dead_tilde ] };
   key <AE01> { [ 0x10006f1, exclam, 0x1000060 ] };
   key <AE02> { [ 0x10006f2, 0x100066c, 0x1000040 ] };
   key <AE03> { [ 0x10006f3, 0x100066b, numbersign ] };
   key <AE04> { [ 0x10006f4, 0x100e60b, 0x1000024] };
   key <AE05> { [ 0x10006f5, 0x100066a, 0x1000025 ] };
   key <AE06> { [ 0x10006f6, multiply, 0x100005e ] };
   key <AE07> { [ 0x10006f7, 0x10000bb, 0x1000026 ] };
   key <AE08> { [ 0x10006f8, 0x10000ab, 0x1002022 ] };
   key <AE09> { [ 0x10006f9, 0x1000029, 0x100200e ] };
   key <AE10> { [ 0x10006f0, 0x1000028, 0x100200f ] };
   key <AE11> { [ minus, Arabic_tatweel, 0x100005f ] };
   key <AE12> { [ equal, plus ] };

   key <AD01> { [ Arabic_dad, Arabic_sukun, 0x10000b0 ] };
   key <AD02> { [ Arabic_sad, Arabic_dammatan, 0x1000653 ] };
   key <AD03> { [ Arabic_theh, Arabic_kasratan, 0x10020ac ] };
   key <AD04> { [ Arabic_qaf, Arabic_fathatan, 0x100fd3e ] };
   key <AD05> { [ Arabic_feh, Arabic_damma, 0x100fd3f ] };
   key <AD06> { [ Arabic_ghain, Arabic_kasra, 0x100e656] };
   key <AD07> { [ Arabic_ain, Arabic_fatha, 0x100e659] };
   key <AD08> { [ Arabic_heh, Arabic_shadda, 0x1000670] };
   key <AD09> { [ Arabic_khah, 0x1000681, 0x1000027] };
   key <AD10> { [ Arabic_hah, 0x1000685, 0x1000022] };
   key <AD11> { [ Arabic_jeem, 0x100005d, 0x100007d ] };
   key <AD12> { [ 0x1000686, 0x100005b, 0x100007b ] };

   key <AC01> { [ Arabic_sheen, 0x100069a ] };
   key <AC02> { [ Arabic_seen, Arabic_hamzaonyeh, 0x10006d2 ] };
   key <AC03> { [ 0x10006cc, Arabic_yeh, 0x1000649 ] };
   key <AC04> { [ Arabic_beh, 0x100067e, 0x10006ba ] };
   key <AC05> { [ Arabic_lam, Arabic_hamzaonalef, 0x10006b7 ] };
   key <AC06> { [ Arabic_alef, Arabic_maddaonalef, 0x1000671 ] };
   key <AC07> { [ Arabic_teh, 0x100067c, 0x1000679 ] };
   key <AC08> { [ Arabic_noon, 0x10006bc, 0x100003e ] };
   key <AC09> { [ Arabic_meem, 0x1000629, 0x100003c ] };
   key <AC10> { [ 0x10006a9, colon, 0x1000643 ] };
   key <AC11> { [ 0x10006ab, Arabic_semicolon, 0x10006af ] };

   key <BKSL> { [ backslash, 0x100002a, 0x100007c ] };

   key <AB01> { [ 0x10006cd, 0x1000638, 0x100003f] };
   key <AB02> { [ 0x10006d0, 0x1000637, 0x100003b ] };
   key <AB03> { [ Arabic_zain, 0x1000698, 0x1000655 ] };
   key <AB04> { [ Arabic_ra, 0x1000621, 0x1000654 ] };
   key <AB05> { [ Arabic_thal, 0x100200c, 0x1000625  ] };
   key <AB06> { [ Arabic_dal, 0x1000689, 0x1000688 ] };
   key <AB07> { [ 0x1000693, 0x1000624, 0x1000691 ] };
   key <AB08> { [ Arabic_waw, 0x100060c, 0x100002c ] };
   key <AB09> { [ 0x1000696, 0x100002e, 0x10006c7 ] };
   key <AB10> { [ slash, Arabic_question_mark, 0x10006c9 ] };

   include "nbsp(zwnj2nb3)"
   include "level3(ralt_switch)"
};

// Keymap for the Afghan southern uzbek keybord layout
// Based on the specification "Computer Locale Requirements for 
// Afghanstan" [1] from the "United Nations Development Programme
// Afghanistan"" and the "Afghan Transitional Islamic 
// Administration Ministry of Communications". 
// [1] http://www.evertype.com/standards/af/
// For a MINI HOWTO see [2].
// [2] http://www.afghanischerKulturverein.de/en/afghanComputer_en.php
// 
// 2006-02-15 file created by M. Emal Alekozai <memala@gmx.net>

partial alphanumeric_keys
xkb_symbols "uz" {
   name[Group1]= "Uzbek (Afghanistan)";

   key <TLDE> { [ 0x100200d, 0x10000f7, dead_tilde ] };
   key <AE01> { [ 0x10006f1, exclam, 0x1000060 ] };
   key <AE02> { [ 0x10006f2, 0x100066c, 0x1000040 ] };
   key <AE03> { [ 0x10006f3, 0x100066b, numbersign ] };
   key <AE04> { [ 0x10006f4, 0x100e60b, 0x1000024] };
   key <AE05> { [ 0x10006f5, 0x100066a, 0x1000025 ] };
   key <AE06> { [ 0x10006f6, multiply, 0x100005e ] };
   key <AE07> { [ 0x10006f7, Arabic_comma, 0x1000026 ] };
   key <AE08> { [ 0x10006f8, asterisk, 0x1002022 ] };
   key <AE09> { [ 0x10006f9, 0x1000029, 0x100200e ] };
   key <AE10> { [ 0x10006f0, 0x1000028, 0x100200f ] };
   key <AE11> { [ minus, Arabic_tatweel, 0x100005f ] };
   key <AE12> { [ equal, plus ] };

   key <AD01> { [ Arabic_dad, Arabic_sukun, 0x10000b0 ] };
   key <AD02> { [ Arabic_sad, Arabic_dammatan, 0x1000653 ] };
   key <AD03> { [ Arabic_theh, Arabic_kasratan, 0x10020ac ] };
   key <AD04> { [ Arabic_qaf, Arabic_fathatan, 0x100fd3e ] };
   key <AD05> { [ Arabic_feh, Arabic_damma, 0x100fd3f ] };
   key <AD06> { [ Arabic_ghain, Arabic_kasra, 0x100e656] };
   key <AD07> { [ Arabic_ain, Arabic_fatha, 0x100e659] };
   key <AD08> { [ Arabic_heh, Arabic_shadda, 0x1000670] };
   key <AD09> { [ Arabic_khah, bracketright, 0x1000027] };
   key <AD10> { [ Arabic_hah, bracketleft, 0x1000022] };
   key <AD11> { [ Arabic_jeem, braceright, 0x1000681 ] };
   key <AD12> { [ 0x1000686, braceleft, 0x1000685 ] };

   key <AC01> { [ Arabic_sheen, Arabic_hamzaonwaw, 0x100069a ] };
   key <AC02> { [ Arabic_seen, Arabic_hamzaonyeh, 0x10006cd ] };
   key <AC03> { [ 0x10006cc, Arabic_yeh, 0x1000649 ] };
   key <AC04> { [ Arabic_beh, 0x10006d0, 0x1000643 ] };
   key <AC05> { [ Arabic_lam, Arabic_hamzaonalef, 0x10006b7 ] };
   key <AC06> { [ Arabic_alef, Arabic_maddaonalef, 0x1000671 ] };
   key <AC07> { [ Arabic_teh, Arabic_tehmarbuta, 0x100067c ] };
   key <AC08> { [ Arabic_noon, 0x10000bb, 0x10006bc ] };
   key <AC09> { [ Arabic_meem, 0x10000ab, 0x10006ba ] };
   key <AC10> { [ 0x10006a9, colon, 0x100003b ] };
   key <AC11> { [ 0x10006af, Arabic_semicolon, 0x10006ab ] };

   key <BKSL> { [ backslash, bar, 0x100003f ] };

   key <AB01> { [ Arabic_zah, 0x10006c9, 0x10006d2] };
   key <AB02> { [ Arabic_tah, 0x10006c7, 0x1000691 ] };
   key <AB03> { [ Arabic_zain, 0x1000698, 0x1000696 ] };
   key <AB04> { [ Arabic_ra, 0x1000625, 0x1000693 ] };
   key <AB05> { [ Arabic_thal, 0x100200c, 0x1000688  ] };
   key <AB06> { [ Arabic_dal, 0x1000654, 0x1000689 ] };
   key <AB07> { [ 0x100067e, Arabic_hamza, 0x1000679 ] };
   key <AB08> { [ Arabic_waw, greater, 0x100002c ] };
   key <AB09> { [ period, less ] };
   key <AB10> { [ slash, Arabic_question_mark, 0x1000655 ] };

   include "nbsp(zwnj2nb3)"
   include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "olpc-ps" {

   name[Group1]= "Pashto (Afghanistan, OLPC)";

   key <TLDE> { [ 0x100200D, 0x1000654, grave ] }; // zero width joiner, Arabic hamza above
   key <AE01> { [ 0x10006F1, exclam, asciitilde ] }; // Arabic one
   key <AE02> { [ 0x10006F2, 0x100066C, at ] }; // Arabic two, Arabic thousands separator
   key <AE03> { [ 0x10006F3, 0x100066B, numbersign ] }; // Arabic three, Arabic decimal separator
   key <AE04> { [ 0x10006F4, 0x100060B, dollar ] }; // Arabic four, Afghani sign
   key <AE05> { [ 0x10006F5, 0x100066A, percent ] }; // Arabic five, Arabic percent sign
   key <AE06> { [ 0x10006F6, multiply, asciicircum ] }; // Arabic six
   key <AE07> { [ 0x10006F7, guillemotright, ampersand ] }; // Arabic seven
   key <AE08> { [ 0x10006F8, guillemotleft, 0x100066D ] }; // Arabic eight, Arabic five-pointed star
   key <AE09> { [ 0x10006F9, parenright, enfilledcircbullet ] }; // Arabic nine
   key <AE10> { [ 0x10006F0, parenleft, degree ] }; // Arabic zero
   key <AE11> { [ minus, 0x1000640, underscore ] }; // Arabic_tatweel
   key <AE12> { [ equal, plus, division ] };

   key <AD01> { [ 0x1000636, 0x1000652, EuroSign ] }; // Arabic dad, Arabic sukun
   key <AD02> { [ 0x1000635, 0x100064C, 0x1000671 ] }; // Arabic sad, Arabic dammatan, Arabic alef walsa
   key <AD03> { [ 0x100062B, 0x100064D, 0x1000649 ] }; // Arabic theh, Arabic kasratan, Arabic alef maksura initial form
   key <AD04> { [ 0x1000642, 0x100064B, 0x100200E ] }; // Arabic qaf, Arabic fathatan, left-to-right mark
   key <AD05> { [ 0x1000641, 0x100064F, 0x100200F ] }; // Arabic feh, Arabic damma, right-to-left mark
   key <AD06> { [ 0x100063A, 0x1000650, 0x100e653 ] }; // Arabic ghain, Arabic kasra, Arabic alef with madda above
   key <AD07> { [ 0x1000639, 0x100064E, 0x100e659 ] }; // Arabic ain, Arabic fatha, Arabic zwarakay
   key <AD08> { [ 0x1000647, 0x1000651, 0x1000670 ] }; // Arabic heh, Arabic shadda, Arabic superscript alef
   key <AD09> { [ 0x100062E, 0x1000681, apostrophe ] }; // Arabic khah, Arabic hah with hamza above, 
   key <AD10> { [ 0x100062D, 0x1000685, quotedbl ] }; // Arabic hah, Arabic hah with three dots above
   key <AD11> { [ 0x100062C, bracketright, braceleft ] }; // Arabic jeem
   key <AD12> { [ 0x1000686, bracketleft, braceright ] }; // Arabic tcheh

   key <AC01> { [ 0x1000634, 0x100069A ] }; // Arabic sheen, Arabic seen with dot below and dot above
   key <AC02> { [ 0x1000633, 0x10006CD ] }; // Arabic seen, Arabic yeh with tail
   key <AC03> { [ 0x10006CC, 0x100064A, 0x10006D2 ] }; // Farsi yeh, Arabic yeh, Arabic yeh barree
   key <AC04> { [ 0x1000628, 0x100067E, 0x10006BA ] }; // Arabic beh, Arabic peh, Arabic noon ghunna
   key <AC05> { [ 0x1000644, 0x1000623, 0x10006B7 ] }; // Arabic lam, Arabic hamza on alef, Arabic alef with hamza above
   key <AC06> { [ 0x1000627, 0x1000622, 0x1000625 ] }; // Arabic alef, Arabic madda on alef, Arabic alef with hamza below
   key <AC07> { [ 0x100062A, 0x100067C, 0x1000679 ] }; // Arabic teh, Arabic teh with ring, Arabic tteh
   key <AC08> { [ 0x1000646, 0x10006BC, greater ] }; // Arabic noon, Arabic noon with ring
   key <AC09> { [ 0x1000645, 0x1000629, less ] }; // Arabic meem, Arabic teh marbuta
   key <AC10> { [ 0x10006A9, colon, 0x1000643 ] }; // Arabic keheh, Arabic kaf
   key <AC11> { [ 0x10006AB, 0x100061B, 0x10006AF ] }; // Arabic kaf with ring, Arabic semicolon, Arabic gaf

   key <BKSL> { [ backslash, asterisk, bar ] };

   key <AB01> { [ 0x1000638, 0x1000626, question] }; // Arabic zah, Arabic yeh with hamza above
   key <AB02> { [ 0x10006D0, 0x1000637, semicolon ] }; // Arabic tah, Arabic E
   key <AB03> { [ 0x1000632, 0x1000698 ] }; // Arabic zain, Arabic jeh
   key <AB04> { [ 0x1000631, 0x1000621 ] }; // Arabic_ra (reh?), Arabic hamza
   key <AB05> { [ 0x1000630, 0x100200C ] }; // Arabic_thal, zero width non-joiner
   key <AB06> { [ 0x100062F, 0x1000689, 0x1000688 ] }; // Arabic_dal, Arabic dal with ring, Arabic ddal
   key <AB07> { [ 0x1000693, 0x1000624, 0x1000691 ] }; // Arabic reh with ring, Arabic waw with hamza above, Arabic rreh
   key <AB08> { [ 0x1000648, period, comma ] }; // Arabic_waw, Arabic comma
   key <AB09> { [ 0x1000696, 0x100002E, 0x10006C7 ] }; // Arabic reh with dot below and dot above, full stop, Arabic letter U
   key <AB10> { [ slash, 0x100061F, 0x10006C9 ] }; // Arabic question mark, Arabic kirghiz yu

   include "nbsp(zwnj2nb3)"
   include "group(olpc)"
};

partial alphanumeric_keys
xkb_symbols "fa-olpc" {

   name[Group1]= "Persian (Afghanistan, Dari OLPC)";

   key <TLDE> { [ 0x100200D, division, asciitilde ] }; // zero width joiner
   key <AE01> { [ 0x10006F1, exclam, grave ] }; // Arabic one
   key <AE02> { [ 0x10006F2, 0x100066C, at ] }; // Arabic two, Arabic thousands separator
   key <AE03> { [ 0x10006F3, 0x100066B, numbersign ] }; // Arabic three, Arabic decimal separator
   key <AE04> { [ 0x10006F4, 0x100060B, dollar ] }; // Arabic four, Afghani sign
   key <AE05> { [ 0x10006F5, 0x100066A, percent ] }; // Arabic five, Arabic percent sign
   key <AE06> { [ 0x10006F6, multiply, asciicircum ] }; // Arabic six
   key <AE07> { [ 0x10006F7, 0x100060C, ampersand ] }; // Arabic seven, Arabic comma
   key <AE08> { [ 0x10006F8, asterisk, enfilledcircbullet ] }; // Arabic eight, 
   key <AE09> { [ 0x10006F9, parenright, 0x100200E ] }; // Arabic nine, left-to-right mark
   key <AE10> { [ 0x10006F0, parenleft, 0x100200F ] }; // Arabic zero, right-to-left mark
   key <AE11> { [ minus, 0x1000640, underscore ] }; // Arabic_tatweel
   key <AE12> { [ equal, plus ] };

   key <AD01> { [ 0x1000636, 0x1000652, degree ] }; // Arabic dad, Arabic sukun
   key <AD02> { [ 0x1000635, 0x100064C ] }; // Arabic sad, Arabic dammatan
   key <AD03> { [ 0x100062B, 0x100064D, EuroSign ] }; // Arabic theh, Arabic kasratan
   key <AD04> { [ 0x1000642, 0x100064B, 0x100FD3E ] }; // Arabic qaf, Arabic fathatan, ornate left paren
   key <AD05> { [ 0x1000641, 0x100064F, 0x100FD3F ] }; // Arabic feh, Arabic damma, ornate right paren
   key <AD06> { [ 0x100063A, 0x1000650, 0x1000656 ] }; // Arabic ghain, Arabic kasra, Arabic subscript alef
   key <AD07> { [ 0x1000639, 0x100064E, 0x100e659 ] }; // Arabic ain, Arabic fatha, Arabic zwarakay
   key <AD08> { [ 0x1000647, 0x1000651, 0x1000655 ] }; // Arabic heh, Arabic shadda, Arabic hamza below
   key <AD09> { [ 0x100062E, bracketright, apostrophe ] }; // Arabic khah
   key <AD10> { [ 0x100062D, bracketleft, quotedbl ] }; // Arabic hah
   key <AD11> { [ 0x100062C, braceright, 0x1000681 ] }; // Arabic jeem, Arabic hah with hamza above
   key <AD12> { [ 0x1000686, braceleft, 0x1000685 ] }; // Arabic tcheh, Arabic hah with three dots above

   key <AC01> { [ 0x1000634, 0x1000624, 0x100069A ] }; // Arabic sheen, Arabic waw with hamza above, Arabic seen with dot below and dot above
   key <AC02> { [ 0x1000633, 0x1000626, 0x10006CD ] }; // Arabic seen, Arabic yeh with hamza above, Arabic yeh with tail
   key <AC03> { [ 0x10006CC, 0x100064A, 0x1000649 ] }; // Farsi yeh, Arabic yeh, Arabic alef maksura
   key <AC04> { [ 0x1000628, 0x1000625, 0x10006D0 ] }; // Arabic beh, Arabic alef with hamza below, Arabic e
   key <AC05> { [ 0x1000644, 0x1000623, 0x10006B7 ] }; // Arabic lam, Arabic hamza on alef, Arabic alef with hamza above
   key <AC06> { [ 0x1000627, 0x1000622, 0x1000671 ] }; // Arabic alef, Arabic madda on alef, Arabic alef wasla
   key <AC07> { [ 0x100062A, 0x1000629, 0x100067C ] }; // Arabic teh, Arabic teh marbuta, Arabic tteh
   key <AC08> { [ 0x1000646, guillemotright, 0x10006BC ] }; // Arabic noon, Arabic noon with ring
   key <AC09> { [ 0x1000645, guillemotleft, 0x10006BA ] }; // Arabic meem, Arabic noon ghunna
   key <AC10> { [ 0x10006A9, colon, semicolon ] }; // Arabic keheh, 
   key <AC11> { [ 0x10006AF, 0x100061B, 0x10006AB ] }; // Arabic gaf, Arabic semicolon, Arabic kaf with ring

   key <BKSL> { [ backslash, bar, question ] };

   key <AB01> { [ 0x1000638, 0x1000643, 0x10006D2 ] }; // Arabic zah, Arabic kaf, Arabic yeh barree
   key <AB02> { [ 0x1000637, 0x1000653, 0x1000691 ] }; // Arabic tah, Arabic maddah above, Arabic rreh
   key <AB03> { [ 0x1000632, 0x1000698, 0x1000696 ] }; // Arabic zain, Arabic jeh,  Arabic reh with dot below and dot above
   key <AB04> { [ 0x1000631, 0x1000670, 0x1000693 ] }; // Arabic_ra (reh?), Arabic superscript alef, Arabic reh with ring
   key <AB05> { [ 0x1000630, 0x100200C, 0x1000688 ] }; // Arabic_thal, zero width non-joiner, Arabic ddal
   key <AB06> { [ 0x100062F, 0x1000654, 0x1000689 ] }; // Arabic dal, Arabic hamza above, Arabic dal with ring
   key <AB07> { [ 0x100067E, 0x1000621, 0x1000679 ] }; // Arabic peh, Arabic hamza, Arabic tteh
   key <AB08> { [ 0x1000648, greater, comma ] }; // Arabic_waw
   key <AB09> { [ period, less, 0x10006C7 ] }; // Arabic u
   key <AB10> { [ slash, 0x100061F, 0x10006C9 ] }; // Arabic question mark, Arabic kirghiz yu

   include "nbsp(zwnj2nb3)"
   include "group(olpc)"
};

partial alphanumeric_keys
xkb_symbols "uz-olpc" {

   name[Group1]= "Uzbek (Afghanistan, OLPC)";

   key <TLDE> { [ 0x100200D, division, asciitilde ] }; // zero width joiner
   key <AE01> { [ 0x10006F1, exclam, grave ] }; // Arabic one
   key <AE02> { [ 0x10006F2, 0x100066C, at ] }; // Arabic two, Arabic thousands separator
   key <AE03> { [ 0x10006F3, 0x100066B, numbersign ] }; // Arabic three, Arabic decimal separator
   key <AE04> { [ 0x10006F4, 0x100060B, dollar ] }; // Arabic four, Afghani sign
   key <AE05> { [ 0x10006F5, 0x100066A, percent ] }; // Arabic five, Arabic percent sign
   key <AE06> { [ 0x10006F6, multiply, asciicircum ] }; // Arabic six
   key <AE07> { [ 0x10006F7, 0x100060C, ampersand ] }; // Arabic seven, Arabic comma
   key <AE08> { [ 0x10006F8, asterisk, enfilledcircbullet ] }; // Arabic eight, 
   key <AE09> { [ 0x10006F9, parenright, 0x100200E ] }; // Arabic nine, left-to-right mark
   key <AE10> { [ 0x10006F0, parenleft, 0x100200F ] }; // Arabic zero, right-to-left mark
   key <AE11> { [ minus, 0x1000640, underscore ] }; // Arabic_tatweel
   key <AE12> { [ equal, plus ] };

   key <AD01> { [ 0x1000636, 0x1000652, degree ] }; // Arabic dad, Arabic sukun
   key <AD02> { [ 0x1000635, 0x100064C, 0x1000653 ] }; // Arabic sad, Arabic dammatan, Arabic maddah above
   key <AD03> { [ 0x100062B, 0x100064D, EuroSign ] }; // Arabic theh, Arabic kasratan
   key <AD04> { [ 0x1000642, 0x100064B, 0x100FD3E ] }; // Arabic qaf, Arabic fathatan, ornate left paren
   key <AD05> { [ 0x1000641, 0x100064F, 0x100FD3F ] }; // Arabic feh, Arabic damma, ornate right paren
   key <AD06> { [ 0x100063A, 0x1000650, 0x1000656 ] }; // Arabic ghain, Arabic kasra, Arabic subscript alef
   key <AD07> { [ 0x1000639, 0x100064E, 0x100e659 ] }; // Arabic ain, Arabic fatha, Arabic zwarakay
   key <AD08> { [ 0x1000647, 0x1000651, 0x1000670 ] }; // Arabic heh, Arabic shadda, Arabic superscript alef
   key <AD09> { [ 0x100062E, bracketright, apostrophe ] }; // Arabic khah
   key <AD10> { [ 0x100062D, bracketleft, quotedbl ] }; // Arabic hah
   key <AD11> { [ 0x100062C, braceright, 0x1000681 ] }; // Arabic jeem, Arabic hah with hamza above
   key <AD12> { [ 0x1000686, braceleft, 0x1000685 ] }; // Arabic tcheh, Arabic hah with three dots above

   key <AC01> { [ 0x1000634, 0x1000624, 0x100069A ] }; // Arabic sheen, Arabic waw with hamza above, Arabic seen with dot below and dot above
   key <AC02> { [ 0x1000633, 0x1000626, 0x10006CD ] }; // Arabic seen, Arabic yeh with hamza above, Arabic yeh with tail
   key <AC03> { [ 0x10006CC, 0x100064A, 0x1000649 ] }; // Farsi yeh, Arabic yeh, Arabic alef maksura
   key <AC04> { [ 0x1000628, 0x10006D0, 0x1000643  ] }; // Arabic beh, Arabic e, Arabic kaf
   key <AC05> { [ 0x1000644, 0x1000623, 0x10006B7 ] }; // Arabic lam, Arabic hamza on alef, Arabic alef with hamza above
   key <AC06> { [ 0x1000627, 0x1000622, 0x1000671 ] }; // Arabic alef, Arabic madda on alef, Arabic alef wasla
   key <AC07> { [ 0x100062A, 0x1000629, 0x100067C ] }; // Arabic teh, Arabic teh marbuta, Arabic tteh
   key <AC08> { [ 0x1000646, guillemotright, 0x10006BC ] }; // Arabic noon, Arabic noon with ring
   key <AC09> { [ 0x1000645, guillemotleft, 0x10006BA ] }; // Arabic meem, Arabic noon ghunna
   key <AC10> { [ 0x10006A9, colon, semicolon ] }; // Arabic keheh, 
   key <AC11> { [ 0x10006AF, 0x100061B, 0x10006AB ] }; // Arabic gaf, Arabic semicolon, Arabic kaf with ring

   key <BKSL> { [ backslash, bar, question ] };

   key <AB01> { [ 0x1000638, 0x10006C9, 0x10006D2 ] }; // Arabic zah, Arabic kirghiz yu, Arabic yeh barree
   key <AB02> { [ 0x1000637, 0x10006C7, 0x1000691 ] }; // Arabic tah, Arabic u, Arabic rreh
   key <AB03> { [ 0x1000632, 0x1000698, 0x1000696 ] }; // Arabic zain, Arabic jeh,  Arabic reh with dot below and dot above
   key <AB04> { [ 0x1000631, 0x1000625, 0x1000693 ] }; // Arabic_ra (reh?), Arabic alef with hamza below, Arabic reh with ring
   key <AB05> { [ 0x1000630, 0x100200C, 0x1000688 ] }; // Arabic_thal, zero width non-joiner, Arabic ddal
   key <AB06> { [ 0x100062F, 0x1000654, 0x1000689 ] }; // Arabic dal, Arabic hamza above, Arabic dal with ring
   key <AB07> { [ 0x100067E, 0x1000621, 0x1000679 ] }; // Arabic peh, Arabic hamza, Arabic tteh
   key <AB08> { [ 0x1000648, greater, comma ] }; // Arabic_waw
   key <AB09> { [ period, less ] };
   key <AB10> { [ slash, 0x100061F, 0x1000655 ] }; // Arabic question mark, Arabic hamza below

   include "nbsp(zwnj2nb3)"
   include "group(olpc)"
};
// based on
// XKB keyboard by Hrafnkell Eiriksson - hkelle@rhi.hi.is
//     fixes by Olafur Osvaldsson - oli@isnic.is
//
// "basic" corrected according to the Icelandic standard for keyboards,
//     IST 125:1995 (some symbols substituted by a dead diacritic).
//     Some positions are according to IST ISO/IEC 9995-3:1994
//     Added nobreakspace

default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin(type4)"

    name[Group1]="Icelandic";

//  <AE00> = <TLDE>
    key <AE02>	{ [         2,   quotedbl,  twosuperior,    oneeighth ]	};
    key <AE04>	{ [         4,     dollar,   onequarter,     currency ]	};
    key <AE11>	{ [odiaeresis, Odiaeresis,    backslash, questiondown ]	};
    key <AE12>	{ [     minus, underscore, dead_cedilla,  dead_ogonek ]	};

    key <AD11>	{ [       eth,        ETH, dead_diaeresis, dead_abovering ] };
    key <AD12>	{ [apostrophe,   question,   asciitilde,  dead_macron ]	};

    key <AC03>	{ [         d,          D,  U201e,       U201c ] };
    key <AC10>	{ [        ae,         AE,  asciicircum, dead_doubleacute ] };
    key <AC11>	{ [dead_acute, dead_acute, dead_circumflex, dead_caron ] };
    key <TLDE>	{ [dead_abovering,  dead_diaeresis,      notsign,      hyphen ]	};

//  <AC12> = <BKSL>
    key <BKSL>	{ [      plus,   asterisk,   grave,   dead_breve ]	};

//  <AB00> = <LSGT>, is in file "pc": pc105
    key <AB10>	{ [     thorn,      THORN, dead_belowdot, dead_abovedot ] };

    key <SPCE>  { [     space,      space,  space, space ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "Sundeadkeys" {

    // modify the basic Icelandic layout to use Sun dead keys

    include "is(basic)"

    name[Group1]="Icelandic (Sun dead keys)";

    key <TLDE>	{ [dead_circumflex,     degree,      notsign,    notsign ]	};
    key <AE12>	{ [dead_acute, dead_grave, dead_cedilla, dead_cedilla ] };
    key <AD11>	{ [udiaeresis, Udiaeresis, dead_diaeresis, dead_diaeresis ] };
    key <AD12>	{ [      plus,   asterisk,  dead_tilde,  dead_macron ]	};
    key <AC10>	{ [odiaeresis, Odiaeresis,  dead_acute,  dead_acute ]	};
    key <AC11>	{ [adiaeresis, Adiaeresis, dead_circumflex, dead_circumflex ]	};
    key <BKSL>	{ [numbersign,      acute,  dead_grave,  dead_grave ]	};
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // modify the basic Icelandic layout to not have any dead keys

    include "is(basic)"

    name[Group1]="Icelandic (no dead keys)";

    key <TLDE>	{ [asciicircum,    degree,      notsign,      notsign ]	};
    key <AE12>	{ [apostrophe,      grave,      cedilla,      cedilla ]	};
    key <AD11>	{ [udiaeresis, Udiaeresis,    diaeresis,    diaeresis ]	};
    key <AD12>	{ [      plus,   asterisk,   asciitilde,       macron ]	};
    key <AC10>	{ [odiaeresis, Odiaeresis,        acute,        acute ]	};
    key <AC11>	{ [adiaeresis, Adiaeresis,  asciicircum,  asciicircum ]	};
    key <BKSL>	{ [numbersign,      acute,        grave,        grave ]	};
    key <AB10>	{ [     thorn,      THORN, dead_belowdot,    abovedot ]	};
};

// Copyright (C) 2004, 2006 Ævar Arnfjörð Bjarmason <avarab@gmail.com>
//
// = HISTORY
// * 2004-09-28:
//   Initial cleanroom writing of the keymap, I just booted Mac OS X, opened
//   TextEdit.app and wrote down what the value produced by each key was when I
//   pressed it, a for a, A for shift + a, å for lalt + a etc and made the
//   keymap from that information
//
// * 2006-01-14:
//   Revised the comments in the file
//
// * 2013-05-30:
//   Renamed the old keyboard layout and created a new one that conforms with the later
//   model Apple laptop and Aluminium USB/Bluetooth keyboards (A1243/A1255 and later)
//   that are used with the more recent versions of OS X. Also replaced some Unicode
//   codes with proper symbol names.
//
// = NOTES
// * 20 characters in this keymap have no named character defined in
//   include/keysymdef.h and as a result their Unicode code points in
//   hexadecimal are listed here, these can be generated with the following
//   perl command:
//     $ perl -CA -e 'printf "U%x\n", ord shift' Æ
//   and converted back like:
//     $ perl -CO -le '$_=shift;s/[^a-f0-9]//ig;print chr hex' Uc6
// * The Apple logo appears twice on this keymap like the Mac OS and Mac OS X
//   keymaps. In the MacRoman encoding it has the code point 0xF0 (240) but it
//   has no assigned code point in Unicode, the code point Apple uses for it is
//   U+F8FF (63743) which is in the BMP's Private Use Area (U+E000–U+F8FF)
// * This keymap has only been tested on a PowerBook6,5 (iBook G4) but it
//   should work on other Apple laptop models which use the same keyboard
//   layout. It will probably work on standard sized keyboards with little or
//   no modification but it might not support them fully, please report if
//   you're able to get it running with such a keyboard

// Copied from macintosh_vndr/is

xkb_symbols "mac_legacy" {
    name[Group1]= "Icelandic (Macintosh, legacy)";

    //-- Row 5 (E) --//
    key <TLDE> { [ sterling,   section,    UF8FF,        apostrophe ] };
    key <AE01> { [ 1,          exclam,     exclamdown,   VoidSymbol ] };
    key <AE02> { [ 2,          quotedbl,   at,           VoidSymbol ] };
    key <AE03> { [ 3,          numbersign, U2122,        sterling   ] };
    key <AE04> { [ 4,          dollar,     U00A2,        EuroSign   ] };
    key <AE05> { [ 5,          percent,    U2030,        infinity   ] };
    key <AE06> { [ 6,          ampersand,  asciicircum,  U2044      ] };
    key <AE07> { [ 7,          slash,      backslash,    U00F7      ] };
    key <AE08> { [ 8,          parenleft,  bracketleft,  braceleft  ] };
    key <AE09> { [ 9,          parenright, bracketright, braceright ] };
    key <AE10> { [ 0,          equal,      U2260,        U2248      ] };
    key <AE11> { [ odiaeresis, Odiaeresis, oslash,       Ooblique   ] };
    key <AE12> { [ minus,      underscore, endash,       emdash     ] };


    //-- Row 4 (D) --//
    key <AD01> { [ q,          Q,        paragraph,       VoidSymbol ] };
    key <AD02> { [ w,          W,        U2211,           VoidSymbol ] };
    key <AD03> { [ e,          E,        dead_grave,      VoidSymbol ] };
    key <AD04> { [ r,          R,        registered,      VoidSymbol ] };
    key <AD05> { [ t,          T,        degree,          VoidSymbol ] };
    key <AD06> { [ y,          Y,        yen,             VoidSymbol ] };
    key <AD07> { [ u,          U,        dead_diaeresis,  VoidSymbol ] };
    key <AD08> { [ i,          I,        U0131,           U00AA      ] };
    key <AD09> { [ o,          O,        dead_circumflex, U00BA      ] };
    key <AD10> { [ p,          P,        Greek_pi,        Greek_PI   ] };
    key <AD11> { [ eth,        Eth,      U201e,           U201c      ] };
    key <AD12> { [ apostrophe, question, questiondown,    U00B7      ] };


    //-- Row 3 (C) --//
    key <AC01> { [ a,          A,                aring,     Aring      ] };
    key <AC02> { [ s,          S,                ssharp,    abovedot   ] };
    key <AC03> { [ d,          D,                U2202,     U2DA       ] };
    key <AC04> { [ f,          F,                U192,      macron     ] };
    key <AC05> { [ g,          G,                copyright, breve      ] };
    key <AC06> { [ h,          H,                bar,       VoidSymbol ] };
    key <AC07> { [ j,          J,                U2206,     U2dd       ] };
    key <AC08> { [ k,          K,                U00AC,     VoidSymbol ] };
    key <AC09> { [ l,          L,                U2026,     caron      ] };
    key <AC10> { [ ae,         AE,               oe,        OE         ] };
    key <AC11> { [ dead_acute, dead_diaeresis,   U201A,     U2018      ] };
    key <BKSL> { [ plus,       asterisk,         U2022,     plusminus  ] };


    //-- Row 2  (B) --//
    key <LSGT> { [ less,   greater,   section,          UF8FF          ] };
    key <AB01> { [ z,      Z,         U3A9,             VoidSymbol     ] };
    key <AB02> { [ x,      X,         asciitilde,       VoidSymbol     ] };
    key <AB03> { [ c,      C,         ccedilla,         Ccedilla       ] };
    key <AB04> { [ v,      V,         U221A,            U25CA          ] };
    key <AB05> { [ b,      B,         U222B,            VoidSymbol     ] };
    key <AB06> { [ n,      N,         dead_tilde,       VoidSymbol     ] };
    key <AB07> { [ m,      M,         U00B5,            VoidSymbol     ] };
    key <AB08> { [ comma,  semicolon, lessthanequal,    guillemotleft  ] };
    key <AB09> { [ period, colon,     greaterthanequal, guillemotright ] };
    key <AB10> { [ thorn,  Thorn,     U2019,            U201d          ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "mac" {
    name[Group1]= "Icelandic (Macintosh)";

    //-- Row 5 (E) --//
    key <TLDE> { [ degree,     dead_diaeresis, oslash,       Ooblique    ] };
    key <AE01> { [ 1,          exclam,     exclamdown,   VoidSymbol  ] };
    key <AE02> { [ 2,          quotedbl,   at,           VoidSymbol  ] };
    key <AE03> { [ 3,          numbersign, trademark,    sterling    ] };
    key <AE04> { [ 4,          dollar,     cent,         EuroSign    ] };
    key <AE05> { [ 5,          percent,    U2030,        infinity    ] };
    key <AE06> { [ 6,          ampersand,  asciicircum,  U2044       ] };
    key <AE07> { [ 7,          slash,      braceleft,    division    ] };
    key <AE08> { [ 8,          parenleft,  bracketleft,  braceleft   ] };
    key <AE09> { [ 9,          parenright, bracketright, braceright  ] };
    key <AE10> { [ 0,          equal,      braceright,   approxeq    ] };
    key <AE11> { [ odiaeresis, Odiaeresis, backslash,    U2260       ] };
    key <AE12> { [ minus,      underscore, endash,       emdash      ] };


    //-- Row 4 (D) --//
    key <AD01> { [ q,          Q,          U0040,              paragraph           ] };
    key <AD02> { [ w,          W,          U2211,              U00A7               ] };
    key <AD03> { [ e,          E,          U20AC,              U00BF               ] };
    key <AD04> { [ r,          R,          registered,         VoidSymbol          ] };
    key <AD05> { [ t,          T,          degree,             U2022               ] };
    key <AD06> { [ y,          Y,          yen,                VoidSymbol          ] };
    key <AD07> { [ u,          U,          dead_diaeresis,     VoidSymbol          ] };
    key <AD08> { [ i,          I,          idotless,           ordfeminine         ] };
    key <AD09> { [ o,          O,          dead_circumflex,    U00BA               ] };
    key <AD10> { [ p,          P,          Greek_pi,           Greek_PI            ] };
    key <AD11> { [ eth,        Eth,        doublelowquotemark, leftdoublequotemark ] };
    key <AD12> { [ apostrophe, question,   asciitilde,         periodcentered      ] };


    //-- Row 3 (C) --//
    key <AC01> { [ a,          A,          aring,             Aring               ] };
    key <AC02> { [ s,          S,          ssharp,            abovedot            ] };
    key <AC03> { [ d,          D,          partialderivative, U02DA               ] };
    key <AC04> { [ f,          F,          function,          macron              ] };
    key <AC05> { [ g,          G,          copyright,         breve               ] };
    key <AC06> { [ h,          H,          bar,               U00B8               ] };
    key <AC07> { [ j,          J,          U2206,             doubleacute         ] };
    key <AC08> { [ k,          K,          notsign,           U2DB                ] };
    key <AC09> { [ l,          L,          ellipsis,          caron               ] };
    key <AC10> { [ ae,         AE,         oe,                OE                  ] };
    key <AC11> { [ dead_acute, dead_acute, asciicircum,       leftsinglequotemark ] };
    key <BKSL> { [ plus,       asterisk,   grave,             plusminus           ] };


    //-- Row 2  (B) --//
    key <LSGT> { [ less,   greater,   bar,                  UF8FF                ] };
    key <AB01> { [ z,      Z,              Greek_OMEGA,          VoidSymbol           ] };
    key <AB02> { [ x,      X,              asciitilde,           VoidSymbol           ] };
    key <AB03> { [ c,      C,              ccedilla,             Ccedilla             ] };
    key <AB04> { [ v,      V,              radical,              U25CA                ] };
    key <AB05> { [ b,      B,              integral,             VoidSymbol           ] };
    key <AB06> { [ n,      N,              dead_tilde,           VoidSymbol           ] };
    key <AB07> { [ m,      M,              mu,                   VoidSymbol           ] };
    key <AB08> { [ comma,  semicolon,      lessthanequal,        guillemotleft        ] };
    key <AB09> { [ period, colon,          greaterthanequal,     guillemotright       ] };
    key <AB10> { [ thorn,  Thorn,          rightsinglequotemark, rightdoublequotemark ] };

    include "level3(ralt_switch)"
};

// This is a modified version of the English Dvorak layout that allows
// you to type all Icelandic letters under X. It's not a full attempt at
// nationalizing the layout as e.g. the Norwegian, Swedish and French
// layouts which modify the primary keys of the basic Dvorak layout
// extensively.

// Rather it's a simple modification of 5 keys of the US Dvorak layout,
// it adds Germanic/Icelandic style quotation marks („“), eth (ðÐ), ae
// (æÆ), endash and emdash (–—), thorn (þÞ), EuroSign (€) and the German
// Sharp S (ßẞ). These keys aren't used in the US version, making the
// Icelandic version a superset of it.

// Maybe someone else will make a "full" attempt at an Icelandic layout
// but I was mostly interested in continuing to type English comfortably
// as a primary function while being able to type the full Icelandic
// alphabet as a secondary function.
//     -- Ævar Arnfjörð Bjarmason <avarab@gmail.com>

// Icelandic Dvorak
partial alphanumeric_keys
xkb_symbols "dvorak" {

    include "us(dvorak)"
    include "eurosign(4)"

    name[Group1]= "Icelandic (Dvorak)";

    key <AD11> { [      slash,  question,    U201e,   U201c   ] };
    key <AC02> { [       o,     O,           odiaeresis, Odiaeresis ] };
    key <AC06> { [       d,     D,           eth,     ETH     ] };
    key <AC10> { [       s,     S,           ae,      AE      ] };
    key <AC11> { [   minus,     underscore,  endash,  emdash  ] };
    key <AB10> { [       z,     Z,           thorn,   Thorn   ] };
    key <AB06> { [       b,     B,           ssharp,  U1E9E   ] };

    include "level3(ralt_switch)"
};
// based on a keyboard map from an 'xkb/symbols/se' file

default partial alphanumeric_keys
xkb_symbols "basic" {
    include "latin(type2)"
    include "se(se)"
};

partial alphanumeric_keys
xkb_symbols "se" {

    name[Group1]="Swedish";

    key <AE05>	{ [         5,    percent,     EuroSign,         cent ]	};
    key <AE11>	{ [      plus,   question,    backslash, questiondown ]	};
    key <AE12>	{ [dead_acute, dead_grave,    plusminus,      notsign ]	};


    key <AC10>	{ [odiaeresis, Odiaeresis,       oslash,     Ooblique ]	};
    key <AC11>	{ [adiaeresis, Adiaeresis,           ae,           AE ]	};
    key <TLDE>	{ [   section,    onehalf,    paragraph, threequarters]	};

    key <BKSL>	{ [apostrophe,   asterisk,        acute,     multiply ]	};

    key <SPCE>	{ [     space,      space,        space, nobreakspace ]	};

    key <LSGT>  { [      less,     greater,         bar,    brokenbar ] };
    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // Modifies the basic Swedish layout to eliminate all dead keys

    include "latin(type2)"
    include "latin(type2_nodeadkeys)"
    include "se(se)"

    name[Group1]="Swedish (no dead keys)";

    key <AE12>	{ [     acute,      grave,    plusminus,      notsign ]	};
};

// Swedish Dvorak
partial alphanumeric_keys
xkb_symbols "dvorak" {

    include "se(basic)"

    name[Group1]="Swedish (Dvorak)";

    key <AD01> { [     aring,      Aring,    backslash		     ]	};
    key <AD02> { [  adiaeresis,	Adiaeresis,  braceleft,  bracketleft ]	};
    key <AD03> { [ odiaeresis, Odiaeresis,  braceright, bracketright ]	};
    key <AD04> { [         p,          P,        thorn,        THORN ]	};
    key <AD05> { [         y,          Y,    leftarrow,          yen ]	};
    key <AD06> { [         f,          F,      dstroke,  ordfeminine ]	};
    key <AD07> { [         g,          G,          eng,          ENG ]	};
    key <AD08> { [         c,          C,    copyright,    copyright ]	};
    key <AD09> { [         r,          R,   registered,   registered ]	};
    key <AD10> { [         l,          L,      lstroke,      Lstroke ]	};
    key <AD11> { [     comma,  semicolon, dead_cedilla,  dead_ogonek ]	};
    key <AD12> { [ dead_diaeresis, dead_circumflex, dead_tilde,	asciicircum	]	};

    key <AC01> { [         a,          A,           ae,           AE ]	};
    key <AC02> { [         o,          O,           oe,           OE ]	};
    key <AC03> { [         e,          E,     EuroSign,         cent ]	};
    key <AC04> { [         u,          U,    downarrow,      uparrow ]	};
    key <AC05> { [         i,          I,   rightarrow,     idotless ]	};
    key <AC06> { [         d,          D,          eth,          ETH ]	};
    key <AC07> { [         h,          H,      hstroke,      Hstroke ]	};
    key <AC08> { [         t,          T,       tslash,       Tslash ]	};
    key <AC09> { [         n,          N ]	};
    key <AC10> { [         s,          S,       ssharp,      section ]	};
    key <AC11> { [     minus, underscore, dead_belowdot, dead_abovedot ] };

    key <AB01> { [    period,   colon, periodcentered, dead_abovedot ]	};
    key <AB02> { [         q,          Q,           at,  Greek_OMEGA ]	};
    key <AB03> { [         j,          J ]	};
    key <AB04> { [         k,          K,          kra,    ampersand ]	};
    key <AB05> { [         x,          X, guillemotright,    greater ]	};
    key <AB06> { [         b,          B, rightdoublequotemark, apostrophe ] };
    key <AB07> { [         m,          M,           mu,    masculine ]	};
    key <AB08> { [         w,          W,      lstroke,      Lstroke ]	};
    key <AB09> { [         v,          V, leftdoublequotemark, grave ]	};
    key <AB10> { [         z,          Z, guillemotleft,        less ]	};
};

// Ivan Popov, 2005-07-17
// phonetic layout for Russian cyrillic letters
// on Swedish (latin type2) keyboards

// level3 modifier is a shortcut to the "se" meaning of the keys where
// we place cyrillic letters, handy for accessing the corresponding
// punctuation marks.
// It is important to have access to punctuation marks, and the rest of
// alphabetical keys are added for being consequent so that the users
// can expect the level3 modifier to give what the key label shows.

partial alphanumeric_keys
xkb_symbols "rus" {
    include "se(basic)"

    name[Group1]="Russian (Sweden, phonetic)";
    key.type[group1]="ALPHABETIC";

    key <TLDE> {	[ Cyrillic_io, Cyrillic_IO ]	};
    key <AE12> {	[ Cyrillic_hardsign, Cyrillic_HARDSIGN ]	};

    key <AD01> {	[ Cyrillic_ya, Cyrillic_YA ]	};
    key <AD02> {	[ Cyrillic_ve, Cyrillic_VE ]	};
    key <AD03> {	[ Cyrillic_ie, Cyrillic_IE ]	};
    key <AD04> {	[ Cyrillic_er, Cyrillic_ER ]	};
    key <AD05> {	[ Cyrillic_te, Cyrillic_TE ]	};
    key <AD06> {	[ Cyrillic_yeru, Cyrillic_YERU ]	};
    key <AD07> {	[ Cyrillic_u, Cyrillic_U ]	};
    key <AD08> {	[ Cyrillic_i, Cyrillic_I ]	};
    key <AD09> {	[ Cyrillic_o, Cyrillic_O ]	};
    key <AD10> {	[ Cyrillic_pe, Cyrillic_PE ]	};
    key <AD11> {	[ Cyrillic_e, Cyrillic_E ]	};

    key <AC01> {	[ Cyrillic_a, Cyrillic_A ]	};
    key <AC02> {	[ Cyrillic_es, Cyrillic_ES ]	};
    key <AC03> {	[ Cyrillic_de, Cyrillic_DE ]	};
    key <AC04> {	[ Cyrillic_ef, Cyrillic_EF ]	};
    key <AC05> {	[ Cyrillic_ghe, Cyrillic_GHE ]	};
    key <AC06> {	[ Cyrillic_ha, Cyrillic_HA ]	};
    key <AC07> {	[ Cyrillic_shorti, Cyrillic_SHORTI ]	};
    key <AC08> {	[ Cyrillic_ka, Cyrillic_KA ]	};
    key <AC09> {	[ Cyrillic_el, Cyrillic_EL ]	};
    key <AC10> {	[ Cyrillic_sha, Cyrillic_SHA ]	};
    key <AC11> {	[ Cyrillic_shcha, Cyrillic_SHCHA ]	};
    key <BKSL> {	[ Cyrillic_yu, Cyrillic_YU ]	};

    key <LSGT> {	[ Cyrillic_che, Cyrillic_CHE ]	};
    key <AB01> {	[ Cyrillic_ze, Cyrillic_ZE ]	};
    key <AB02> {	[ Cyrillic_softsign, Cyrillic_SOFTSIGN ]	};
    key <AB03> {	[ Cyrillic_tse, Cyrillic_TSE ]	};
    key <AB04> {	[ Cyrillic_zhe, Cyrillic_ZHE ]	};
    key <AB05> {	[ Cyrillic_be, Cyrillic_BE ]	};
    key <AB06> {	[ Cyrillic_en, Cyrillic_EN ]	};
    key <AB07> {	[ Cyrillic_em, Cyrillic_EM ]	};
};

partial alphanumeric_keys
xkb_symbols "rus_nodeadkeys" {

    include "se(nodeadkeys)"
    include "se(rus)"

    name[Group1]="Russian (Sweden, phonetic, no dead keys)";

    key <AE12> {	[ Cyrillic_hardsign, Cyrillic_HARDSIGN ]	};
};

xkb_symbols "smi" {
    include "fi(smi)"
    name[Group1]= "Northern Saami (Sweden)";
};

// Copied from macintosh_vndr/se
partial alphanumeric_keys
xkb_symbols "mac" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple Swedish(Sweden) keyboard.

    include "latin"
    name[Group1]= "Swedish (Macintosh)";

    key <TLDE> {	[         section,         degree	]	};
    key <AE01> {	[               1,          exclam,        copyright,      exclamdown	]	};
    key <AE02> {	[               2,        quotedbl, 	       at,	 oneeighth	]	};
    key <AE03> {	[               3,      numbersign,         sterling,             yen	]	};
    key <AE04> {	[               4,        currency, 	   dollar,	      cent	]	};
    key <AE06> {	[               6,       ampersand     	]	};
    key <AE07> {	[               7,           slash, 	      bar,       backslash	]	};
    key <AE08> {	[               8,       parenleft,      bracketleft,       braceleft	]	};
    key <AE09> {	[               9,      parenright,     bracketright,      braceright	]	};
    key <AE10> {	[               0,           equal     	]	};
    key <AE11> {	[            plus,        question      ]	};
    key <AE12> {	[           acute,           grave	]	};
    key <AD11> {	[	    aring,           Aring     	]	};
    key <AD12> {	[       diaeresis,     asciicircum, 	asciitilde			]	};
    key <AC10> {	[      odiaeresis,      Odiaeresis, 	   oslash,	    Ooblique	]	};
    key <AC11> {	[      adiaeresis,      Adiaeresis,               ae,		AE	]	};
    key <BKSL> {	[      apostrophe,        asterisk,               at			]	};
    key <AB08> {	[           comma,       semicolon     	]	};
    key <AB09> {	[          period,           colon     	]	};
    key <AB10> {	[           minus,      underscore     	]	};

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};

// Svdvorak
// This version of Dvorak follows danish and norwegian style in hope for a
// Scandinavian standard.
partial alphanumeric_keys
xkb_symbols "svdvorak" {

   include "se(basic)"

   name[Group1]="Swedish (Svdvorak)";

   key <AD01> { [ aring, Aring, braceleft ] };
   key <AD02> { [ comma, semicolon, bracketleft ] };
   key <AD03> { [ period, colon, bracketright ] };
   key <AD04> { [ p, P, braceright ] };
   key <AD05> { [ y, Y ] };
   key <AD06> { [ f, F ] };
   key <AD07> { [ g, G ] };
   key <AD08> { [ c, C ] };
   key <AD09> { [ r, R ] };
   key <AD10> { [ l, L ] };
   key <AD11> { [ apostrophe, asterisk ] };

   key <AC01> { [ a, A ] };
   key <AC02> { [ o, O, parenleft ] };
   key <AC03> { [ e, E, parenright ] };
   key <AC04> { [ u, U ] };
   key <AC05> { [ i, I ] };
   key <AC06> { [ d, D ] };
   key <AC07> { [ h, H ] };
   key <AC08> { [ t, T ] };
   key <AC09> { [ n, N ] };
   key <AC10> { [ s, S, ssharp, U1E9E ] };
   key <AC11> { [ minus, underscore ] };
   key <BKSL> { [ less, greater, bar ] };

   key <LSGT> { [ odiaeresis, Odiaeresis ] };
   key <AB01> { [ adiaeresis, Adiaeresis ] };
   key <AB02> { [ q, Q ] };
   key <AB03> { [ j, J ] };
   key <AB04> { [ k, K ] };
   key <AB05> { [ x, X ] };
   key <AB06> { [ b, B ] };
   key <AB07> { [ m, M ] };
   key <AB08> { [ w, W ] };
   key <AB09> { [ v, V ] };
   key <AB10> { [ z, Z ] };
};

partial alphanumeric_keys
xkb_symbols "swl" {

//
// Swedish Sign Language
// ISO_639-3 language code: swl
// (called “svenskt teckenspråk” in swedish)
//
// Author: Saašha Metsärantala saasha@acc.umu.se
//
// A sans-serif font is available at
// http://www.acc.umu.se/home/saasha/typsnitt/swl_sans.ttf
//

  include "se(basic)"

  name[Group1]="Swedish Sign Language";

  key <AB01> { [ 0x110c925, 0x110c95f, 0x110c940, 0x110c99a ] };
  key <AB02> { [ 0x110c96b, 0x110c933, 0x110c920, 0x110c98e ] };
  key <AB03> { [ 0x110c949, 0x110c94b, 0x110c921, 0x110c99f ] };
  key <AB04> { [ 0x110c923, 0x110c92d, 0x110c95c, 0x110c96e ] };
  key <AB05> { [ 0x110c93b, 0x110c927, 0x110c908, 0x110c9a6 ] };
  key <AB06> { [ 0x110c93a, 0x110c94c, 0x110c93e, 0x110c9a7 ] };
  key <AB07> { [ 0x110c95b, 0x110c93f, 0x110c907, 0x110c992 ] };
  key <AC01> { [ 0x110c973, 0x110c924, 0x110c93c, 0x110c9a4 ] };
  key <AC02> { [ 0x110c972, 0x110c945, 0x110c91a, 0x110c99c ] };
  key <AC03> { [ 0x110c979, 0x110c929, 0x110c916, 0x110c999 ] };
  key <AC04> { [ 0x110c976, 0x110c975, 0x110c917, 0x110c994 ] };
  key <AC05> { [ 0x110c95a, 0x110c926, 0x110c918, 0x110c996 ] };
  key <AC06> { [ 0x110c96f, 0x110c932, 0x110c915, 0x110c998 ] };
  key <AC07> { [ 0x110c942, 0x110c922, 0x110c913, 0x110c9a2 ] };
  key <AC08> { [ 0x110c985, 0x110c94e, 0x110c914, 0x110c97a ] };
  key <AC09> { [ 0x110c928, 0x110c948, 0x110c919, 0x110c9a5 ] };
  key <AC10> { [ 0x110c970, 0x110c92b, 0x110c905, 0x110c991 ] };
  key <AC11> { [ 0x110c92e, 0x110c944, 0x110c904, VoidSymbol ] };
  key <AD01> { [ 0x110c96c, 0x110c92a, 0x110c900, 0x110c9a1 ] };
  key <AD02> { [ 0x110c971, 0x110c930, 0x110c903, 0x110c99e ] };
  key <AD03> { [ 0x110c987, 0x110c947, 0x110c90c, 0x110c96d ] };
  key <AD04> { [ 0x110c986, 0x110c92c, 0x110c91b, 0x110c993 ] };
  key <AD05> { [ 0x110c939, 0x110c94a, 0x110c911, 0x110c995 ] };
  key <AD06> { [ 0x110c952, 0x110c943, 0x110c912, 0x110c99b ] };
  key <AD07> { [ 0x110c978, 0x110c977, 0x110c95e, 0x110c9a3 ] };
  key <AD08> { [ 0x110c951, 0x110c931, 0x110c91e, 0x110c997 ] };
  key <AD09> { [ 0x110c90e, 0x110c946, 0x110c906, 0x110c9a0 ] };
  key <AD10> { [ 0x110c91f, 0x110c961, 0x110c91c, VoidSymbol ] };
  key <AD11> { [ 0x110c93d, 0x110c92f, 0x110c902, VoidSymbol ] };
  key <AE01> { [ 0x110c953, 0x110c936, 0x110c988, 0x110c962 ] };
  key <AE02> { [ 0x110c954, 0x110c957, 0x110c97d, 0x110c963 ] };
  key <AE03> { [ 0x110c934, 0x110c937, 0x110c97e, 0x110c983 ] };
  key <AE04> { [ 0x110c955, 0x110c958, 0x110c98a, 0x110c984 ] };
  key <AE05> { [ 0x110c935, 0x110c938, 0x110c97f, 0x110c966 ] };
  key <AE06> { [ 0x110c956, 0x110c959, 0x110c980, 0x110c967 ] };
  key <AE07> { [ 0x110c960, 0x110c969, 0x110c982, 0x110c96a ] };
  key <AE08> { [ 0x110c97c, 0x110c90b, 0x110c989, 0x110c964 ] };
  key <AE09> { [ 0x110c97b, 0x110c90a, 0x110c98b, 0x110c965 ] };
  key <AE10> { [ 0x110c974, 0x110c909, 0x110c98c, 0x110c968 ] };
};

partial alphanumeric_keys
xkb_symbols "us" {
    include "us"

    name[Group1]="Swedish (US)";

    key <AC10> { [ NoSymbol, NoSymbol, odiaeresis, Odiaeresis ] };
    key <AC11> { [ NoSymbol, NoSymbol, adiaeresis, Adiaeresis ] };
    key <AD11> { [ NoSymbol, NoSymbol, aring, Aring ] };

    include "level3(ralt_switch)"
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/se(sun_type6)"
};

partial alphanumeric_keys
xkb_symbols "dvorak_a5" {

	include "se(basic)"

	name[Group1]="Swedish (Dvorak A5)";

	key <AE12> { [ dead_acute, dead_grave, plusminus,           none ] };

	key <AD01> { [ aring,      Aring,      braceleft,           none ] };
	key <AD02> { [ adiaeresis, Adiaeresis, braceright,          none ] };
	key <AD03> { [ odiaeresis, Odiaeresis, bracketleft,         none ] };
	key <AD04> { [ p,          P,          bracketright,        none ] };
	key <AD05> { [ y,          Y,          dollar,              none ] };
	key <AD06> { [ f,          F,          quotedbl,            none ] };
	key <AD07> { [ g,          G,          question,            none ] };
	key <AD08> { [ c,          C,          ampersand,           none ] };
	key <AD09> { [ r,          R,          less,                none ] };
	key <AD10> { [ l,          L,          greater,             none ] };
	key <AD11> { [ comma,      semicolon,  dead_cedilla,        none ] };
	key <AD12> { [ dead_diaeresis, dead_circumflex, dead_tilde,	asciicircum	]	};

	key <AC01> { [ a,          A,          semicolon,           none ] };
	key <AC02> { [ o,          O,          slash,               none ] };
	key <AC03> { [ e,          E,          parenleft,           none ] };
	key <AC04> { [ u,          U,          parenright,          none ] };
	key <AC05> { [ i,          I,          bar,                 none ] };
	key <AC06> { [ d,          D,          numbersign,          none ] };
	key <AC07> { [ h,          H,          asciicircum,         none ] };
	key <AC08> { [ t,          T,          numbersign,          none ] };
	key <AC09> { [ n,          N,          quotedbl,            none ] };
	key <AC10> { [ s,          S,          asciitilde,          none ] };
	key <AC11> { [ minus,      underscore, grave,               none ] };

	key <AB01> { [ period,     colon,      colon,               none ] };
	key <AB02> { [ q,          Q,          equal,               none ] };
	key <AB03> { [ j,          J,          at,                  none ] };
	key <AB04> { [ k,          K,          exclam,              none ] };
	key <AB05> { [ x,          X,          backslash,           none ] };
	key <AB06> { [ b,          B,          percent,             none ] };
	key <AB07> { [ m,          M,          grave,               none ] };
	key <AB08> { [ w,          W,          lstroke,             none ] };
	key <AB09> { [ v,          V,          leftdoublequotemark, none ] };
	key <AB10> { [ z,          Z,          guillemotleft,       none ] };

	key <BKSL> { [ apostrophe, asterisk,   asterisk,            none ] };
};

partial alphanumeric_keys
xkb_symbols "ovd" {

    // Adds combining ogonek (U0328) to the basic Swedish layout to facilitate
    // typing of Ą ą Ę ę Į į Ų ų Y̨ y̨ Ą̊ ą̊.
    // The character replaces <dead_diaeresis> which is considered dispensable
    // since ä and ö have their own keys. <dead_diaeresis> is still available
    // via <AltGr> + Å.

    include "se(basic)"

    name[Group1]="Elfdalian (Swedish, with combining ogonek)";

    key <AD12> { [ U0328,  dead_circumflex,  dead_tilde,  dead_caron ] };
};

// us_dvorak
// Author Thomas Lundqvist http://tlundqvist.org/sv_dvorak/

partial alphanumeric_keys
xkb_symbols "us_dvorak" {
  include "us(dvorak-intl)"
  name[Group1]="Swedish (Dvorak, intl.)";

  key <TLDE> { [ apostrophe,  asciitilde,           grave,      dead_tilde ] };
  key <AE02> { [          2,    quotedbl,              at                  ] };
  key <AE06> { [          6, asciicircum, dead_circumflex                  ] };
  key <AD01> { [      aring,       Aring,      dead_acute                  ] };
  key <AC11> { [      minus,  underscore,             bar,     dead_macron ] };
  key <AB01> { [ adiaeresis,  Adiaeresis,      dead_grave,     dead_ogonek ] };
  key <LSGT> { [ odiaeresis,  Odiaeresis,  dead_diaeresis,   dead_belowdot ] };
  key <BKSL> { [  semicolon,       colon,       backslash                  ] };

  include "kpdl(comma)"
  include "level3(ralt_switch)"
};
// These partial variants assign ISO_Level5_Shift to various XKB keycodes
// so that the fifth shift level can be reached.

// The right Ctrl key (while pressed) chooses the fifth shift level.
partial modifier_keys
xkb_symbols "rctrl_switch" {
  key <RCTL> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift ]
  };
  include "level5(modifier_mapping)"
};

// The Less/Greater key (while pressed) chooses the fifth shift level.
partial modifier_keys
xkb_symbols "lsgt_switch" {
  key <LSGT> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift ]
  };
  include "level5(modifier_mapping)"
};

// The right Alt key (while pressed) chooses the fifth shift level.
partial modifier_keys
xkb_symbols "ralt_switch" {
  key <RALT> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift ]
  };
  include "level5(modifier_mapping)"
};

// The CapsLock key (while pressed) chooses the fifth shift level.
partial modifier_keys
xkb_symbols "caps_switch" {
  key <CAPS> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift ]
  };
  include "level5(modifier_mapping)"
};

// Ensure a mapping to a real modifier for LevelFive.
partial modifier_keys
xkb_symbols "modifier_mapping" {
  replace key <MDSW> {
    type[Group1] = "ONE_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift ]
  };
  modifier_map Mod3 { <MDSW> };
};


// This adds the definitions needed to create a level5-lock behaviour, using
// the real modifier NumLock as a lock indicator.
// See also: types/level5 : EIGHT_LEVEL_LEVEL_FIVE_LOCK
// See also: compat/level5(level5_lock)
partial modifier_keys
xkb_symbols "lock" {
  key.type[Group1] = "ONE_LEVEL";
  include "level5(modifier_mapping)"
  replace key <HYPR> {
    vmods = NumLock,
    symbols[Group1] = [ NoSymbol ],
    actions[Group1] = [ SetMods(modifiers=NumLock) ]
  };
  modifier_map Mod2 { <HYPR> };
};

// The following modifier keys are used to switch to the third shift level
// and to set a corresponding lock, implemented as NumLock.

partial modifier_keys
xkb_symbols "lsgt_switch_lock" {
  include "level5(lock)"
  key <LSGT> {
    type[Group1] = "EIGHT_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift,
                        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ]
  };
};

partial modifier_keys
xkb_symbols "lwin_switch_lock" {
  include "level5(lock)"
  key <LWIN> {
    type[Group1] = "EIGHT_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift,
                        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ]
  };
};

partial modifier_keys
xkb_symbols "ralt_switch_lock" {
  include "level5(lock)"
  key <RALT> {
    type[Group1] = "EIGHT_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift,
                        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ]
  };
};

partial modifier_keys
xkb_symbols "rwin_switch_lock" {
  include "level5(lock)"
  key <RWIN> {
    type[Group1] = "EIGHT_LEVEL",
    symbols[Group1] = [ ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift,
                        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ]
  };
};

partial modifier_keys
xkb_symbols "lsgt_switch_lock_cancel" {
  include "level5(lock)"
  key <LSGT> {
    type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK",
    symbols[Group1] = [ ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift,
                        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ]
  };
};

partial modifier_keys
xkb_symbols "lwin_switch_lock_cancel" {
  include "level5(lock)"
  key <LWIN> {
    type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK",
    symbols[Group1] = [ ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift,
                        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ]
  };
};

partial modifier_keys
xkb_symbols "ralt_switch_lock_cancel" {
  include "level5(lock)"
  key <RALT> {
    type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK",
    symbols[Group1] = [ ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift,
                        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ]
  };
};

partial modifier_keys
xkb_symbols "rwin_switch_lock_cancel" {
  include "level5(lock)"
  key <RWIN> {
    type[Group1] = "EIGHT_LEVEL_LEVEL_FIVE_LOCK",
    symbols[Group1] = [ ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift, ISO_Level5_Shift,
                        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock ]
  };
};
// Meta is mapped to second level of Alt.
partial modifier_keys
xkb_symbols "meta_alt" {
    key <LALT> { [ Alt_L, Meta_L ] };
    key <RALT> { type[Group1] = "TWO_LEVEL",
                 symbols[Group1] = [ Alt_R, Meta_R ] };
    modifier_map Mod1 { Alt_L, Alt_R, Meta_L, Meta_R };
//  modifier_map Mod4 {};
};

// Alt is mapped to the Super and the usual Alt.
partial modifier_keys
xkb_symbols "alt_win" {
    key <LWIN> { [ Alt_L ] };
    key <RWIN> { [ Alt_R ] };
    modifier_map Mod1 { <LWIN>, <RWIN> };
};

// Ctrl is mapped to the Super and the usual Ctrl keys.
partial modifier_keys
xkb_symbols "ctrl_win" {
    key <LWIN> { [ Control_L ] };
    key <RWIN> { [ Control_R ] };
    modifier_map Control { <LWIN>, <RWIN> };
};

// Ctrl is mapped to the Alt, Alt to the Super, and Win to the Ctrl keys.
partial modifier_keys
xkb_symbols "ctrl_alt_win" {
    key <LALT> { [ Control_L, Control_L  ] };
    key <RALT> { type[Group1] = "TWO_LEVEL",
                 symbols[Group1] = [ Control_R, Control_R ] };
    key <LWIN> { [ Alt_L, Meta_L ] };
    key <RWIN> { [ Alt_R, Meta_R ] };
    key <LCTL> { [ Super_L ] };
    key <RCTL> { [ Super_R ] };
    modifier_map Control { <RALT>, <LALT> };
    modifier_map Mod1 { <LWIN>, <RWIN> };
    modifier_map Mod4 { <LCTL>, <RCTL> };
};

// Meta is mapped to the Super.
partial modifier_keys
xkb_symbols "meta_win" {
    key <LALT> { [ Alt_L, Alt_L ] };
    key <RALT> { type[Group1] = "TWO_LEVEL",
                 symbols[Group1] = [ Alt_R, Alt_R ] };
    key <LWIN> { [ Meta_L ] };
    key <RWIN> { [ Meta_R ] };
    modifier_map Mod1 { Alt_L, Alt_R };
    modifier_map Mod4 { <META>, Meta_L, Meta_R };
};

// Meta is mapped to the left Win key.
partial modifier_keys
xkb_symbols "left_meta_win" {
    key <LALT> { [ Alt_L, Alt_L ] };
    key <LWIN> { [ Meta_L ] };
    modifier_map Mod1 { Alt_L };
    modifier_map Mod4 { <META>, Meta_L };
};

// Hyper is mapped to the Super.
partial modifier_keys
xkb_symbols "hyper_win" {
    key <LWIN> { [ Hyper_L ] };
    key <RWIN> { [ Hyper_R ] };
    modifier_map Mod4 { Hyper_L, Hyper_R };
};

// Menu is mapped to the Menu key.
partial modifier_keys
xkb_symbols "menu" {
    key <MENU> { [ Menu ] };
};

// Menu is mapped to the right Win key.
partial modifier_keys
xkb_symbols "menu_win" {
    key <MENU> { [ Super_R ] };
};

// Layout for Tux key caps with additional right Alt key
partial modifier_keys
xkb_symbols "alt_super_win" {
    key <LALT> { [ Alt_L, Meta_L ] };
    key <RWIN> { [ Alt_R, Meta_R ] };
    key <LWIN> { [ Super_L ]};
    key <MENU> { [ Super_R ] };
    modifier_map Mod1 { Alt_L, Alt_R, Meta_L, Meta_R };
    modifier_map Mod4 { Super_L, Super_R };
};

// Swap the Alt and Super.
partial modifier_keys
xkb_symbols "swap_alt_win" {
    include "altwin(swap_lalt_lwin)"
    include "altwin(swap_ralt_rwin)"
};

// Swap the left Alt and Super.
partial modifier_keys
xkb_symbols "swap_lalt_lwin" {
    key <LALT> { type[Group1] = "ONE_LEVEL",
                 symbols[Group1] = [ Super_L ] };
    key <LWIN> { [ Alt_L, Meta_L ] };
};

// Swap the right Alt and Super.
hidden partial modifier_keys
xkb_symbols "swap_ralt_rwin" {
    key <RALT> { type[Group1] = "ONE_LEVEL",
                 symbols[Group1] = [ Super_R ] };
    key <RWIN> { [ Alt_R, Meta_R ] };
};

// Win is mapped to the PrtSc key (and the usual Win key).
partial modifier_keys
xkb_symbols "prtsc_rwin" {
    replace key <PRSC> { [ Super_R, Super_R ] };
    modifier_map Mod4 { <PRSC>, <RWIN> };
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin(type2)"

    name[Group1]= "Faroese";

    key <TLDE>	{ [   onehalf,   section, threequarters,    paragraph ]	};
    key <LSGT>	{ [      less,    greater,    backslash,      notsign ]	};
    key <SPCE>	{ [     space,      space, nobreakspace, nobreakspace ] };

    key <AE05>	{ [         5,    percent,     NoSymbol,         cent ] };
    key <AE06>	{ [         6,  ampersand,          yen,     NoSymbol ] };
    key <AE11>	{ [      plus,   question,    plusminus, questiondown ] };
    key <AE12>	{ [dead_acute, dead_grave,          bar,    brokenbar ] };

    key <AB03>	{ [         c,          C,    copyright,     NoSymbol ] };
    key <AB10>	{ [     minus, underscore,       hyphen,       macron ] };

    key <AC03>	{ [         d,          D,          eth,          ETH ] };
    key	<AC10>	{ [        ae,	       AE	] };
    key <AC11>	{ [    oslash,   Ooblique 	] };

    key <AD08>	{ [         i,          I       ] };
    key <AD11>	{ [     aring,      Aring, dead_diaeresis, dead_circumflex ] };
    key <AD12>	{ [       eth,        ETH,   dead_tilde,   dead_caron ] };

    key <BKSL>	{ [apostrophe,   asterisk, dead_doubleacute, multiply ]	};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    include "fo(basic)"

    name[Group1]= "Faroese (no dead keys)";

    key <AE12>	{ [     acute,      grave,          bar,       ogonek ]	};
    key <AD11>	{ [     aring,      Aring,    diaeresis,       degree ]	};
    key <AD12>	{ [ diaeresis, asciicircum,  asciitilde,       macron ]	};
    key <AC10>	{ [        ae,         AE,        acute,  doubleacute ]	};
    key <AC11>	{ [    oslash,   Ooblique,  asciicircum,        caron ]	};
    key <BKSL>	{ [apostrophe,   asterisk,  doubleacute,     multiply ]	};
    key <AB08>	{ [     comma,  semicolon,      cedilla,       ogonek ]	};
    key <AB09>	{ [    period,      colon, periodcentered,   abovedot ]	};
};
default partial alphanumeric_keys 
xkb_symbols "basic" {
    name[Group1]= "Malay (Jawi, Arabic Keyboard)";

//Numbers

    key <AE01> {  [       0x1000661,          exclam, 1      ]       };
    key <AE02> {  [       0x1000662,              at, 2      ]       };
    key <AE03> {  [       0x1000663,      numbersign, 3      ]       };
    key <AE04> {  [       0x1000664,          dollar, 4      ]       };
    key <AE05> {  [       0x1000665,  Arabic_percent, 5      ]       };
    key <AE06> {  [       0x1000666,     asciicircum, 6      ]       };
    key <AE07> {  [       0x1000667,       ampersand, 7      ]       };
    key <AE08> {  [       0x1000668,        asterisk, 8      ]       };
    key <AE09> {  [       0x1000669,      parenright, 9      ]       };
    key <AE10> {  [       0x1000660,       parenleft, 0      ]       };
    key <AE11> {  [           minus,      underscore      ]     };
    key <AE12> {  [           equal,            plus      ]     };

// Alphabets

    key <AD01> {  [      Arabic_dad,     U0686     ]     };
    key <AD02> {  [      Arabic_sad,     U06A0  ]     };
    key <AD03> {  [     Arabic_theh,     U06AC     ]     };
    key <AD04> {  [      Arabic_qaf,     U0640  ]     };
    key <AD05> {  [   Arabic_feh,  0x100fef9, 0x10006a4   ]     };
    key <AD06> {  [   Arabic_ghain, Arabic_hamzaunderalef ]     };
    key <AD07> {  [      Arabic_ain,         grave        ]     };
    key <AD08> {  [       Arabic_ha,        division      ]     };
    key <AD09> {  [     Arabic_khah,       multiply      ]     };
    key <AD10> {  [      U06A9,    Arabic_semicolon  ]     };
    key <AD11> {  [     Arabic_jeem,   less, 0x1000686    ]     };
    key <AD12> {  [      Arabic_dal,        greater       ]     };

    key <AC01> {  [    Arabic_sheen,   U06CF       ]     };
    key <AC02> {  [     Arabic_seen,   U06A8    ]     };
    key <AC03> {  [      Arabic_yeh,       bracketright   ]     };
    key <AC04> {  [   Arabic_beh, bracketleft, 0x100067e  ]     };
    key <AC05> {  [      Arabic_lam,       0x100fef7      ]     };
    key <AC06> {  [     Arabic_alef,   Arabic_hamzaonalef ]     };
    key <AC07> {  [      Arabic_teh,      Arabic_tatweel  ]     };
    key <AC08> {  [     Arabic_noon,      Arabic_comma    ]     };
    key <AC09> {  [     Arabic_meem,         slash        ]     };
    key <AC10> {  [      U06A9,   colon, 0x10006af   ]     };
    key <AC11> {  [      Arabic_tah,        quotedbl      ]     };

    key <LSGT> {  [             bar,      brokenbar	  ]     };
    key <AB01> {  [Arabic_hamzaonyeh, asciitilde, guillemotright  ]     };
    key <AB02> {  [    Arabic_hamza,  U06BD, guillemotleft ]     };
    key <AB03> {  [Arabic_hamzaonwaw,      braceright     ]     };
    key <AB04> {  [       Arabic_ra,       braceleft      ]     };
    key <AB05> {  [       0x100fefb,       0x100fef5      ]     };
    key <AB06> {  [Arabic_alefmaksura, Arabic_maddaonalef ]     };
    key <AB07> {  [Arabic_tehmarbuta,    apostrophe       ]     };
    key <AB08> {  [      Arabic_waw,         U200C, comma        ]     };
    key <AB09> {  [     Arabic_zain,         period       ]     };
    key <AB10> {  [      Arabic_zah, Arabic_question_mark ]     };

//others

   key <ESC>  { [ Escape ] };

    include "level3(ralt_switch)"
};


// symbol names: see /usr/X11R6/include/X11/keysymdef.h (XFree86-devel.rpm)

partial alphanumeric_keys
xkb_symbols "phonetic"
{
        name[Group1] = "Malay (Jawi, phonetic)";

//Numbers

        key <AE01> {  [       0x1000661,          exclam, 1      ]       };
        key <AE02> {  [       0x1000662,    Arabic_hamza, 2      ]       };
        key <AE03> {  [       0x1000663,  Arabic_hamzaonalef, 3  ]       };
        key <AE04> {  [       0x1000664,  Arabic_maddaonalef, 4  ]       };
        key <AE05> {  [       0x1000665, Arabic_hamzaunderalef, 5 ]       };
        key <AE06> {  [       0x1000666, Arabic_hamzaonyeh, 6    ]       };
        key <AE07> {  [       0x1000667, Arabic_hamzaonwaw, 7      ]       };
        key <AE08> {  [       0x1000668,        NoSymbol, 8      ]       };
        key <AE09> {  [       0x1000669,      parenright, 9      ]       };
        key <AE10> {  [       0x1000660,       parenleft, 0      ]       };
        key <AE11> {  [           minus,      underscore      ]     };
        key <AE12> {  [           equal,            plus      ]     };

// Alphabets
        key <LSGT> { [      bar,      brokenbar               ] };
        key <AB01> { [    Arabic_zain, Arabic_thal            ] };
        key <AB02> { [    Arabic_khah, Arabic_hah             ] };
        key <AB03> { [    Arabic_tcheh, UFEB9                 ] };
        key <AB04> { [    U06CF, Arabic_zah                   ] };
        key <AB05> { [    Arabic_beh, Arabic_peh              ] };
        key <AB06> { [    Arabic_noon, U06BD                  ] };
        key <AB07> { [    Arabic_meem, Arabic_maddaonalef     ] };
        key <AB08> { [    Arabic_comma, rightcaret            ] };
        key <AB09> { [    period, leftcaret                   ] };
        key <AB10> { [    slash, Arabic_question_mark         ] };

        key <AC01> { [    Arabic_alef, Arabic_maddaonalef     ] };
        key <AC02> { [    Arabic_seen, Arabic_sheen           ] };
        key <AC03> { [    Arabic_dal, Arabic_dad              ] };
        key <AC04> { [    Arabic_feh, Arabic_veh              ] };
        key <AC05> { [    U06AC, U06A0                        ] };
        key <AC06> { [    Arabic_ha, Arabic_hah               ] };
        key <AC07> { [    Arabic_jeem, Arabic_tcheh           ] };
        key <AC08> { [    Arabic_kaf, Arabic_qaf              ] };
        key <AC09> { [    Arabic_lam, UFEFB                   ] };
        key <AC10> { [      Arabic_semicolon, colon           ] };
        key <AC11> { [      apostrophe,        quotedbl       ] };

        key <AD01> { [     Arabic_qaf, Arabic_veh             ] };
        key <AD02> { [     Arabic_waw, Arabic_shadda          ] }; 
        key <AD03> { [     Arabic_ain, Arabic_ghain           ] };
        key <AD04> { [     Arabic_ra,  Arabic_ghain           ] };
        key <AD05> { [     Arabic_teh, Arabic_tehmarbuta      ] };
        key <AD06> { [     Arabic_yeh, Arabic_alefmaksura     ] };
        key <AD07> { [     Arabic_waw, Arabic_tah             ] };
        key <AD08> { [     Arabic_yeh, U0640                  ] }; // U0640 - tatweel
        key <AD09> { [     Arabic_ain, U200C                  ] }; // U200C - ZWNJ
        key <AD10> { [     Arabic_veh, Arabic_teh             ] };
        key <AD11> { [     bracketright, braceright           ] };
        key <AD12> { [     bracketleft, braceleft             ] };
        key <AD13> { [     backslash,             bar         ] };

//others

   key <ESC>  { [ Escape ] }; 

    include "level3(ralt_switch)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "us"

    name[Group1]= "English (Ghana)";

    key <AE04> { [          4, 0x010020B5,     dollar,       cent ] };
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "akan" {
    include "gh(basic)"

    name[Group1]= "Akan";

    key <AD01> { [ 0x0100025B, 0x01000190,          q,          Q ] };
    key <AB02> { [ 0x01000254, 0x01000186,          x,          X ] };
};

partial alphanumeric_keys
xkb_symbols "ga" {
    include "gh(basic)"

    name[Group1]= "Ga";

    key <AD01> { [ 0x0100025B, 0x01000190,          q,          Q ] };
    key <AB02> { [ 0x01000254, 0x01000186,          x,          X ] };
    key <AB03> { [ 0x0100014B, 0x0100014A,          c,          C ] };
};

partial alphanumeric_keys
xkb_symbols "ewe" {
    include "gh(basic)"

    name[Group1]= "Ewe";

    key <AD01> { [ 0x0100025B, 0x01000190,          q,          Q ] };
    key <AB03> { [ 0x0100014B, 0x0100014A,          c,          C ] };
    key <AD11> { [ 0x01000254, 0x01000186,  braceleft,  braceleft ] };
    key <AD12> { [ 0x0100028B, 0x010001B2, braceright, braceright ] };
    key <BKSL> { [ 0x01000256, 0x01000189,  backslash,  backslash ] };
    key <AC07> { [ 0x01000192, 0x01000191,          j,          J ] };
    key <AC05> { [          g,          G, 0x01000263, 0x01000194 ] };
};

partial alphanumeric_keys
xkb_symbols "fula" {
    include "gh(basic)"

    name[Group1]= "Fula";

    key <AD01> { [ 0x01000071, 0x01000051,          q,          Q ] };
    key <AD02> { [ udiaeresis, Udiaeresis,          w,          W ] };
    key <AD03> { [          e,          E,   EuroSign,	     cent ] };
    key <AD11> { [ 0x010001B4, 0x010001B3,bracketleft,  braceleft ] };
    key <AD12> { [     gcaron,     Gcaron,bracketright, braceright] };
    key <AC03> { [ 0x01000257, 0x0100018A,         d,           D ] };
    key <AC10> { [ 0x01000131, 0x01000130, semicolon,       colon ] };
    key <AC11> { [ 0x010001DD, 0x0100018E,apostrophe,    quotedbl ] };
    key <AB01> { [ 0x01000272, 0x0100019D,         z,           Z ] };
    key <AB07> { [     ntilde,     Ntilde,         m,           M ] };
    key <AB09> { [   ccedilla,   Ccedilla,    period,     greater ] };
    key <AB10> { [   scedilla,   Scedilla,     slash,    question ] };
};

partial alphanumeric_keys
xkb_symbols "hausa" {
    include "gh(fula)"

    name[Group1]= "Hausa (Ghana)";
};

partial alphanumeric_keys
xkb_symbols "generic" {
    include "gh(basic)"

    name[Group1]= "English (Ghana, multilingual)";

    key <AD03> { [          e,	        E, 0x0100025b, 0x01000190 ] };
    key <AB03> { [          c,          C, 0x01000254, 0x01000186 ] };
    key <AC03> { [          d,          D, 0x01000256, 0x01000189 ] };
    key <AC04> { [          f,          F, 0x01000192, 0x01000191 ] };
    key <AC05> { [          g,          G, 0x01000263, 0x01000194 ] };
    key <AB06> { [          n,          N, 0x0100014b, 0x0100014a ] };
    key <AB01> { [          z,          Z, 0x010001B6, 0x010001B5 ] };
    key <AB04> { [          v,          V, 0x0100028B, 0x010001B2 ] };
	key <AE04> { [          4,     dollar, 0x010020B5,       cent ] };
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "avn" {
    include "gh(basic)"

    name[Group1]= "Avatime";

    key <TLDE> { [      grave,     asciitilde,   0x01000300,  0x01000303 ] }; // combining grave; combining tilde
    key <AE04> { [          4,         dollar,         cent,  0x010020B5 ] }; // ¢, ₵
    key <AE11> { [      minus,     underscore,   0x01000304,  0x01000304 ] }; // combining macron
    key <AD01> { [ 0x0100028B,      0x010001B2                           ] }; // ʋ, Ʋ
    key <AD07> { [          u,              U,   0x0100028A,  0x010001B1 ] }; // ʊ, Ʊ
    key <AD08> { [          i,              I,   0x01000269,  0x01000196 ] }; // ɩ, Ɩ
    key <AD11> { [ 0x0100025B,      0x01000190, bracketleft,  braceleft  ] }; // ɛ, Ɛ
    key <AC03> { [          d,              D,   0x01000256,  0x01000189 ] }; // ɖ, Ɖ
    key <AC04> { [          f,              F,   0x01000192,  0x01000191 ] }; // ƒ, Ƒ
    key <AC07> { [ 0x0100014B,      0x0100014A                           ] }; // ŋ, Ŋ
    key <AC11> { [ apostrophe,       quotedbl,   0x01000301,  0x01000301 ] }; // combining acute
    key <AB03> { [ 0x01000254,      0x01000186                           ] }; // ɔ, Ɔ

    include "level3(ralt_switch)"
};

// This keyboard layout fully imitates the 'Ghana Unicode' layout which is used in GILLBT on Windows with Keyman.
// However, in this layout a 3rd level key (R ALT) is used rather than dead keys.
// Also it has three additional features:
// 1) combining macron above: <R ALT> + <SHIFT> + <->
// 2) cent: <R ALT> + <4> or <R ALT> + <SHIFT> + <4>
// 3) ʊ/Ʊ: <R ALT> + <u>/<U>

partial alphanumeric_keys
xkb_symbols "gillbt" {
    include "gh(basic)"

    name[Group1]= "English (Ghana, GILLBT)";

    key <TLDE> { [ grave,      asciitilde,  0x01000300,   0x01000303  ] }; // combining grave; combining tilde
    key <AE04> { [ 4,          dollar,      cent,         0x010020B5  ] }; // ¢, ₵
    key <AE06> { [ 6,          asciicircum, 0x01000302,   0x01000302  ] }; // combining circumflex accent
    key <AE11> { [ minus,      underscore,  0x01000331,   0x01000304  ] }; // combining macron below; combining macron above
    key <AE12> { [ 0x0100014B, 0x0100014A,  equal,        plus        ] }; // ŋ, Ŋ
    key <AD01> { [ 0x0100028B, 0x010001B2,  q,            Q           ] }; // ʋ, Ʋ
    key <AD03> { [ e,          E,           0x010001DD,   0x0100018E  ] }; // ǝ, Ǝ
    key <AD07> { [ u,          U,           0x0100028A,   0x010001B1  ] }; // ʊ, Ʊ
    key <AD11> { [ 0x0100025B, 0x01000190,  bracketleft,  braceleft   ] }; // ɛ, Ɛ
    key <AD12> { [ 0x01000254, 0x01000186,  bracketright, braceright  ] }; // ɔ, Ɔ
    key <AC03> { [ d,          D,           0x01000256,   0x01000189  ] }; // ɖ, Ɖ
    key <AC04> { [ f,          F,           0x01000192,   0x01000191  ] }; // ƒ, Ƒ
    key <AC05> { [ g,          G,           0x01000263,   0x01000194  ] }; // ɣ, Ɣ
    key <AC11> { [ apostrophe, quotedbl,    0x01000301,   0x01000301  ] }; // combining acute
    key <AB01> { [ z,          Z,           0x01000292,   0x010001B7  ] }; // ʒ, Ʒ
    key <AB02> { [ 0x01000269, 0x01000196,  x,            X           ] }; // ɩ, Ɩ
    key <AB03> { [ c,          C,           0x010000E7,   0x010000C7  ] }; // ç, Ç

    include "level3(ralt_switch)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {

    include "us"

    name[Group1]= "English (Nigeria)";
    key <AE04> { [          4, 0x010020A6,     dollar,       cent ] };
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "yoruba" {
    include "ng(basic)"

    name[Group1]= "Yoruba";

    key <AD01> { [ 0x01001EB9, 0x01001EB8,          q,          Q ] };
    key <AB02> { [ 0x01001ECD, 0x01001ECC,          x,          X ] };
    key <AB04> { [ 0x01001E63, 0x01001E62,          v,          V ] };
};

partial alphanumeric_keys
xkb_symbols "igbo" {
    include "ng(basic)"

    name[Group1]= "Igbo";

    key <AD01> { [ 0x01001ECB, 0x01001ECA,          q,          Q ] };
    key <AB02> { [ 0x01001E45, 0x01001E44,          x,          X ] };
    key <AC10> { [ 0x01001EE5, 0x01001EE4,   semicolon,	    colon ] };
    key <AD11> { [ 0x01001ECD, 0x01001ECC, bracketleft, braceleft ] };		 
};

partial alphanumeric_keys
xkb_symbols "hausa" {
    include "ng(basic)"

    name[Group1]= "Hausa (Nigeria)";

    key <AD01> { [ 0x01000071, 0x01000051,          q,          Q ] };
    key <AD02> { [ udiaeresis, Udiaeresis,          w,          W ] };
    key <AD03> { [          e,          E,   EuroSign,       cent ] };
    key <AD11> { [ 0x010001B4, 0x010001B3,bracketleft,  braceleft ] };
    key <AD12> { [     gcaron,     Gcaron,bracketright, braceright] };
    key <AC03> { [ 0x01000257, 0x0100018A,         d,           D ] };
    key <AC10> { [ 0x01000131, 0x01000130, semicolon,       colon ] };
    key <AC11> { [ 0x010001DD, 0x0100018E,apostrophe,    quotedbl ] };
    key <AB01> { [ 0x01000272, 0x0100019D,         z,           Z ] };
    key <AB07> { [     ntilde,     Ntilde,         m,           M ] };
    key <AB09> { [   ccedilla,   Ccedilla,    period,     greater ] };
    key <AB10> { [   scedilla,   Scedilla,     slash,    question ] };
};

partial alphanumeric_keys
xkb_symbols "olpc" {

   include "ng(basic)"

   // OLPC West Africa keyboard layout
   // See: http://wiki.laptop.org/go/Image:Nigeria-B3.png

   key <TLDE> { [     grave, asciitilde,    exclamdown,       exclamdown ] };
   key <AE01> { [         1,     exclam,      sterling,         sterling ] };
   key <AE02> { [         2,         at,      EuroSign,         EuroSign ] };
   key <AE03> { [         3, numbersign,        dollar,          dollar ] };
   key <AE04> { [         4,  0x10020A6,     0x1000301,        0x1000301 ] }; // Naira, combining acute
   key <AE05> { [         5,    percent,     0x1000300,        0x1000300 ] }; // combining grave
   key <AE06> { [         6,asciicircum,     0x100030A,        0x100030A ] }; // combining ring above
   key <AE07> { [         7,  ampersand,     0x1000302,        0x1000302 ] }; // combining circumflex above
   key <AE08> { [         8,   asterisk,     0x1000324,        0x1000324 ] }; // combining caron above
   key <AE09> { [         9,  parenleft,     0x1000307,        0x1000307 ] }; // combining dot above
   key <AE10> { [         0, parenright,     0x1000308,        0x1000308 ] }; // combining diaeresis above
   key <AE11> { [     minus, underscore,     0x1000304,        0x1000304 ] }; // combining macron above
   key <AE12> { [     equal,       plus,     0x1000303,        0x1000303 ] }; // combining tilde above

   key <AD02> { [         w,          W,     0x1001EB9, 0x1001EB8 ] }; // E with dot below
   key <AD03> { [         e,          E,     0x10001DD, 0x100018E ] }; // reversed E
   key <AD04> { [         r,          R,     0x10001B4, 0x10001B3 ] }; // Y with hook
   key <AD05> { [         t,          T,     0x1000327, 0x1000327 ] }; // combining cedilla
   key <AD06> { [         y,          Y,     0x1000325, 0x1000325 ] }; // combining ring below
   key <AD07> { [         u,          U,     0x100032D, 0x100032D ] }; // combining circumflex below
   key <AD08> { [         i,          I,     0x100032C, 0x100032C ] }; // combining caron below
   key <AD09> { [         o,          O,     0x1000323, 0x1000323 ] }; // combining dot below
   key <AD10> { [         p,          P,     0x1000304, 0x1000304 ] }; // combining diaeresis below
   key <AD11> { [ bracketleft,  braceleft,   0x1000331, 0x1000331 ] }; // combining macron below
   key <AD12> { [bracketright, braceright,   0x1000330, 0x1000330 ] }; // combining tilde below

   key <AC01>  { [         a,          A,   Greek_iota,       Greek_IOTA ] };
   key <AC02>  { [        s,          S,    0x1001E63,        0x1001E62 ] }; // S with dot below
   key <AC03>  { [         d,          D,    0x1000257,        0x100018A ] }; // D with hook
   key <AC04>  { [        f,          F,    0x1001E0D,        0x1001E0C ] }; // D with dot below
   key <AC05>  { [         g,          G,    0x1000272,               0x100019D ] }; // N with left hook
   key <AC06>  { [         h,          H,    0x1001EE5,               0x1001EE4 ] }; // U with dot below
   key <AC07>  { [         j,          J,    0x1001ECB,               0x1001ECA ] }; // I with dot below
   key <AC08>  { [         k,          K,    0x1000199,               0x1000198 ] }; // K with hook
   key <AC09>  { [         l,          L,    0x1001E37,        0x1001E36 ] }; // L with dot below
   key <AC10>  { [ semicolon,      colon,    masculine,      ordfeminine ] };
   key <AC11>  { [ apostrophe,  quotedbl,     currency,         currency ] };
   key <BKSL>  { [ backslash,        bar,      section,          section ] };

   key <AB03>  { [         c,          C,    0x1000254,        0x1000186 ] }; // open O
   key <AB04>  { [         v,          V,    0x100028B,        0x10001B2 ] }; // V with hook
   key <AB05>  { [         b,          B,    0x1000253,               0x1000181 ] }; // B with hook
   key <AB06>  { [         n,          N,          eng,                     ENG ] };
   key <AB07>  { [         m,          M,    0x1001E45,        0x1001E44 ] }; // N with dot above
   key <AB08>  { [     comma,     less, guillemotleft,   guillemotleft ] };
   key <AB09>  { [    period, greater, guillemotright,  guillemotright ] };
   key <AB10>  { [     slash,   question, questiondown,     questiondown ] };

   key <I219>  { [  multiply,   division, ISO_Next_Group, ISO_Prev_Group ] };

   include "level3(ralt_switch)"
};
// 
default partial alphanumeric_keys
xkb_symbols "Javanese" {
    name[Group1]= "Indonesian (Javanese)";

    // `
    key <TLDE> { [ UA9DE, UA9DF ] }; // pada tirta tumetes, pada isen-isen
    // 1..=
    key <AE01> { [ UA9D1,     UA9C6              ] }; // PADA WINDU
    key <AE02> { [ UA9D2,     UA9CF              ] }; // JAVANESE DIGIT TWO, PANGRANGKEP
    key <AE03> { [ UA9D3,     UA9C3              ] }; // ANDAP
    key <AE04> { [ UA9D4,     UA9C4              ] }; // MADYA
    key <AE05> { [ UA9D5,     UA9C5              ] }; // LUHUR
    key <AE06> { [ UA9D6,     UA9BF              ] }; // CAKRA (ra)
    key <AE07> { [ UA9D7,     UA9BD              ] }; // KERET (rae)
    key <AE08> { [ UA9D8,     UA9B3              ] }; // CECAK TELU
    key <AE09> { [ UA9D9,     UA9C1              ] }; // LEFT RERENGAN
    key <AE10> { [ UA9D0,     UA9C2              ] }; // RIGHT RERENGAN
    key <AE11> { [ UA98E,     underscore         ] }; // LETER O
    key <AE12> { [ UA989,     UA98B               ] }; // CEREK (rae), LELET RASWADI (loe)

    // Q..]
    key <AD01> { [ UA990,   UA9B0          ] }; // Ka Sasak (qa), SA MAHAPRANA (ssa)
    key <AD02> { [ UA9AE,   UA98D          ] }; // wa, Letter AI
    key <AD03> { [ UA9BC,   UA98C          ] }; // PEPET, Letter E
    key <AD04> { [ UA9AB,   UA9AC          ] }; // ra, RA AGUNG
    key <AD05> { [ UA9A0,   UA9A1          ] }; // ta, TA MURDA
    key <AD06> { [ UA9AA,   UA9BE          ] }; // ya, PENGKAL
    key <AD07> { [ UA9B8,   UA9B9          ] }; // Suku (u), SUKU MENDUT (uu)
    key <AD08> { [ UA9B6,   UA9B7          ] }; // wulu (i), WULU MELIK (ii)
    key <AD09> { [ UA9BA,   UA9B4          ] }; // taling (e), tarung
    key <AD10> { [ UA9A5,   UA9A6          ] }; // pa, PA MURDA
    key <AD11> { [ UA9CA,   UA9CB          ] }; // pada ADEG, PADA ADEG ADEG
    key <AD12> { [ UA9CC,   UA9CD           ] }; // pada piseleh, TURNED PADA PISELEH

    // A..'
    key <AC01> { [ UA9BB, UA984         ] }; // ai, A
    key <AC02> { [ UA9B1, UA9AF         ] }; // sa, SA MURDA
    key <AC03> { [ UA9A2, UA9A3         ] }; // da, DA MAHAPRANA
    key <AC04> { [ UA99D, UA99E         ] }; // dda, DDA MAHAPRANA
    key <AC05> { [ UA992, UA993         ] }; // ga, GA MURDA 
    key <AC06> { [ UA9B2, UA983         ] }; // ha, wignyan
    key <AC07> { [ UA997, UA999         ] }; // ja, JA MAHAPRANA 
    key <AC08> { [ UA98F, UA991         ] }; // ka, KA MURDA
    key <AC09> { [ UA9AD, UA98A         ] }; // la, LELET
    key <AC10> { [ UA9C7, UA988         ] }; // pada pangkat, LETTER U
    key <AC11> { [ UA9B5, quotedbl ] }; // LETTER O, 

    // \ 
    key <BKSL> { [ UA9C0, UA985 ] }; // PANGKON, LETTER I KAWI

    // not exist in US keyboard
    key <LSGT> { [ bar,  brokenbar	 ] };

    // Z../
    key <AB01> { [ UA994,  UA981         ] }; // nga, CECAK (ng)
    key <AB02> { [ UA99A,  UA998         ] }; // nya, NYA MURDA
    key <AB03> { [ UA995,  UA996         ] };  // ca, CA MURDA
    key <AB04> { [ UA99B,  UA99C         ] }; // tta, TTA MAHAPRANA
    key <AB05> { [ UA9A7,  UA9A8         ] }; // ba, BA MURDA
    key <AB06> { [ UA9A4,  UA99F         ] }; // na, NA MURDA
    key <AB07> { [ UA9A9,  UA980         ] }; // ma, CANDRABINDU
    key <AB08> { [ UA9C8,  UA986          ] }; // lingsa, LETTER I
    key <AB09> { [ UA9C9,  UA987       ] }; // lungsi, LETTER II
    key <AB10> { [ UA982,  question ] }; // layar (r)

    include "level3(ralt_switch)"
};
// based on
// belarusian standard keyboard
// Alexander Mikhailian <mikhailian@altern.org>
// Reworked to use winkeys by default and russian keymap as base by Paul Lubetsky <vegeek@gmail.com>
// Added Belarusian-Russian and Russian-Belarusian variants, by Pavel Senchanka <pavel.senchanka@gmail.com>
// See freedesktop.org bug #23604

default partial alphanumeric_keys
xkb_symbols "basic" {
	include "ru(winkeys)"
	name[Group1]= "Belarusian";

	key	<AD09> {	[	Byelorussian_shortu,	Byelorussian_SHORTU	]	};
	key	<AD12> {	[	apostrophe,	apostrophe	]	};
	key	<AB05> {	[	Ukrainian_i,	Ukrainian_I	]	};
};

partial alphanumeric_keys
xkb_symbols "legacy" {
	include "by(basic)"
	name[Group1]= "Belarusian (legacy)";

	key <AE03> {        [               3,      numbersign      ]       };
	key <AE04> {        [               4,        asterisk      ]       };
	key <AE05> {        [               5,           colon      ]       };
	key <AE06> {        [               6,           comma      ]       };
	key <AE07> {        [               7,          period      ]       };
	key <AE08> {        [               8,       semicolon      ]       };
	key <AB10> {        [           slash,        question      ]       };
	key <BKSL> {        [       backslash,             bar      ]       };
};

// based on a keyboard map from an 'xkb/symbols/iso3335-3' file

partial alphanumeric_keys
xkb_symbols "latin" {
	include "latin"
	name[Group1]= "Belarusian (Latin)";

	key <AD02> {        [    w,    W,    scaron,    Scaron    ]       };
	key <AD07> {        [    u,    U,    ubreve,    Ubreve    ]       };
	key <AC02> {        [    s,    S,    sacute,    Sacute    ]       };
	key <AC09> {        [    l,    L,    lstroke,   Lstroke   ]       };
	key <AB01> {        [    z,    Z,    zacute,    Zacute    ]       };
	key <AB02> {        [    x,    X,    zcaron,    Zcaron    ]       };
	key <AB03> {        [    c,    C,    cacute,    Cacute    ]       };
	key <AB04> {        [    v,    V,    ccaron,    Ccaron    ]       };
	key <AB06> {        [    n,    N,    nacute,    Nacute    ]       };

	include "level3(ralt_switch)"
};

// Russian layout with Belarusian symbols on third level.
partial alphanumeric_keys
xkb_symbols "ru" {
	include "ru(winkeys)"
	name[Group1]= "Russian (Belarus)";

	key	<AB05> { [	Cyrillic_i,		Cyrillic_I,		Ukrainian_i,			Ukrainian_I			] };
	key	<AD09> { [	Cyrillic_shcha,		Cyrillic_SHCHA, 	Byelorussian_shortu,		Byelorussian_SHORTU		] };
	key	<AD12> { [	Cyrillic_hardsign,	Cyrillic_HARDSIGN, 	U2019,				apostrophe			] };

	include "level3(ralt_switch)"
};

// Belarusian layout extended with other East Slavic language symbols
// (Russian, Ukrainian).
partial alphanumeric_keys
xkb_symbols "intl" {
	include "by(basic)"
	name[Group1]= "Belarusian (intl.)";

	// Russian
	key	<AB05> { [	Ukrainian_i,		Ukrainian_I,		Cyrillic_i,			Cyrillic_I			] };
	key	<AD09> { [	Byelorussian_shortu,	Byelorussian_SHORTU,	Cyrillic_shcha,			Cyrillic_SHCHA			] };
	key	<AD12> { [	U2019,			apostrophe,		Cyrillic_hardsign,		Cyrillic_HARDSIGN		] };

	// Ukrainian (Yi is usually on <AD12>, but is it taken in our case).
	key <AC11> { [  Cyrillic_e,   Cyrillic_E,   Ukrainian_ie,   Ukrainian_IE    ] };
	key <AD11> { [  Cyrillic_ha,  Cyrillic_HA,  Ukrainian_yi,   Ukrainian_YI  ] };
	key <BKSL> { [  backslash,    bar,    Ukrainian_ghe_with_upturn,    Ukrainian_GHE_WITH_UPTURN  ] };

	include "level3(ralt_switch)"
};
// based on:
// Mongolian standard keyboard
// Author Sanlig Badral <badral@chinggis.com>
// 2002/12/7 Version 1.0

default partial alphanumeric_keys
xkb_symbols "basic" {

  name[Group1]= "Mongolian";

  key <TLDE> { [ equal,       	   plus,  		degree          ] };
  key <AE01> { [ 1,                numerosign,        	multiply        ] };
  key <AE02> { [ 2,                minus,              	division        ] };
  key <AE03> { [ 3,                quotedbl,        	plusminus       ] };
  key <AE04> { [ 4,                U20ae,  		notsign         ] }; // Tugrik sign
  key <AE05> { [ 5,                colon,		NoSymbol       	] };
  key <AE06> { [ 6,                period,              notequal        ] };
  key <AE07> { [ 7,                underscore,          ampersand    	] };
  key <AE08> { [ 8,                comma,            	asterisk        ] };
  key <AE09> { [ 9,                percent,          	bracketleft     ] };
  key <AE10> { [ 0,                question,       	bracketright   	] };
  key <AE11> { [ Cyrillic_ie,      Cyrillic_IE,        	X               ] };
  key <AE12> { [ Cyrillic_shcha,   Cyrillic_SHCHA,   	L       	] };

  key <AD01> { [ Cyrillic_ef,       Cyrillic_EF,       	apostrophe      ] };
  key <AD02> { [ Cyrillic_tse,      Cyrillic_TSE,       grave           ] };
  key <AD03> { [ Cyrillic_u,        Cyrillic_U,        	EuroSign        ] };
  key <AD04> { [ Cyrillic_zhe,      Cyrillic_ZHE,      	registered      ] };
  key <AD05> { [ Cyrillic_e,        Cyrillic_E,        	trademark       ] };
  key <AD06> { [ Cyrillic_en,       Cyrillic_EN,       	yen             ] };
  key <AD07> { [ Cyrillic_ghe,      Cyrillic_GHE,      	doublelowquotemark   ] };
  key <AD08> { [ Cyrillic_sha,      Cyrillic_SHA,      	leftdoublequotemark  ] };
  key <AD09> { [ Cyrillic_u_straight,Cyrillic_U_straight,rightdoublequotemark] };
  key <AD10> { [ Cyrillic_ze,       Cyrillic_ZE,       	NoSymbol        ] };
  key <AD11> { [ Cyrillic_ka,       Cyrillic_KA,      	braceleft       ] };
  key <AD12> { [ Cyrillic_hardsign, Cyrillic_HARDSIGN, 	braceright      ] };

  key <AC01> { [ Cyrillic_shorti,   Cyrillic_SHORTI,   	mu              ] };
  key <AC02> { [ Cyrillic_yeru,     Cyrillic_YERU,     	sterling        ] };
  key <AC03> { [ Cyrillic_be,       Cyrillic_BE,       	dollar          ] };
  key <AC04> { [ Cyrillic_o_bar,    Cyrillic_O_bar,     rightdoublequotemark ] };
  key <AC05> { [ Cyrillic_a,        Cyrillic_A,        	Cyrillic_yeru   ] };
  key <AC06> { [ Cyrillic_ha,       Cyrillic_HA,       	Cyrillic_YERU   ] };
  key <AC07> { [ Cyrillic_er,       Cyrillic_ER,       	Cyrillic_e      ] };
  key <AC08> { [ Cyrillic_o,        Cyrillic_O,       	Cyrillic_E      ] };
  key <AC09> { [ Cyrillic_el,       Cyrillic_EL,       	numerosign      ] };
  key <AC10> { [ Cyrillic_de,       Cyrillic_DE,       	section         ] };
  key <AC11> { [ Cyrillic_pe,       Cyrillic_PE,       	ellipsis        ] };
  key <BKSL> { [ exclam,            bar,     		bar             ] };

  key <LSGT> { [ parenleft,         parenright,         NoSymbol        ] };
  key <AB01> { [ Cyrillic_ya,       Cyrillic_YA,       	emdash          ] };
  key <AB02> { [ Cyrillic_che,      Cyrillic_CHE,      	endash          ] };
  key <AB03> { [ Cyrillic_io,       Cyrillic_IO,       	copyright       ] };
  key <AB04> { [ Cyrillic_es,       Cyrillic_ES,       	NoSymbol        ] };
  key <AB05> { [ Cyrillic_em,       Cyrillic_EM,       	NoSymbol        ] };
  key <AB06> { [ Cyrillic_i,        Cyrillic_I,        	less            ] };
  key <AB07> { [ Cyrillic_te,       Cyrillic_TE,       	greater         ] };
  key <AB08> { [ Cyrillic_softsign, Cyrillic_SOFTSIGN, 	guillemotleft   ] };
  key <AB09> { [ Cyrillic_ve,       Cyrillic_VE,       	guillemotright  ] };
  key <AB10> { [ Cyrillic_yu,       Cyrillic_YU,       	backslash       ] };

  key <SPCE> { [ space,             space,             	nobreakspace    ] };

  include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "olpc" {

// Contact: Walter Bender <walter@laptop.org>

  include "mn(basic)"

  key <AE07> { [ 7,                 semicolon,          ampersand       ] };

  key <BKSL> { [ backslash,         bar,     		exclam          ] };

  include "group(olpc)"
};
// Urdu keymap
// Developed by:
// Zaeem Arshad <zaeem@linux.net.pk>
// Last update: 2004-03-12
// Notice:
// Alt-key combinations are yet to be put in. The unavailable keys are
// those which do not have a corresponding glyph in Unicode.

default partial alphanumeric_keys
xkb_symbols "urd-phonetic" {

   name[Group1]= "Urdu (Pakistan)";

   key <TLDE> {  [     0x100064b  ,       0x100007E, 0x100200C     ]     };
   key <AE01> {  [     0x1000031  ,       0x1000021      ]     };
   key <AE02> {  [     0x1000032  ,       0x1000040      ]     };
   key <AE03> {  [     0x1000033  ,       0x1000023      ]     };
   key <AE04> {  [     0x1000034  ,       0x1000024      ]     };
   key <AE05> {  [     0x1000035  ,       0x1000025      ]     };
   key <AE06> {  [     0x1000036  ,       0x100005E      ]     };
   key <AE07> {  [     0x1000037  ,       0x1000026      ]     };
   key <AE08> {  [     0x1000038  ,       0x100002A      ]     };
   key <AE09> {  [     0x1000039  ,       0x1000029      ]     };
   key <AE10> {  [     0x1000030  ,       0x1000028      ]     };
   key <AE11> {  [     0x100002D  ,       0x100005F      ]     };
   key <AE12> {  [     0x100003D  ,       0x100002B      ]     };
   key <AD01> {  [     0x1000642  ,       0x1000652, 0x100200D     ]     };
   key <AD02> {  [     0x1000648  ,       0x1000624, 0x100200C     ]     };
   key <AD03> {  [     0x1000639  ,       0x1000670      ]     };
   key <AD04> {  [     0x1000631  ,       0x1000691      ]     };
   key <AD05> {  [     0x100062a  ,       0x1000679      ]     };
   key <AD06> {  [     0x10006d2  ,       0x100064E      ]     };
   key <AD07> {  [     0x1000621  ,       0x1000626      ]     };
   key <AD08> {  [     0x10006cc  ,       0x1000650      ]     };
   key <AD09> {  [     0x10006c1  ,       0x10006c3      ]     };
   key <AD10> {  [     0x100067e  ,       0x100064f      ]     };
   key <AD11> {  [     0x100005d  ,       0x100007D      ]     };
   key <AD12> {  [     0x100005b  ,       0x100007B      ]     };

   key <AC01> {  [     0x1000627  ,       0x1000622      ]     };
   key <AC02> {  [     0x1000633  ,       0x1000635      ]     };
   key <AC03> {  [     0x100062f  ,       0x1000688      ]     };
   key <AC04> {  [     0x1000641  ,       0x1000651      ]     };
   key <AC05> {  [     0x10006af  ,       0x100063a      ]     };
   key <AC06> {  [     0x100062D  ,       0x10006BE      ]     };
   key <AC07> {  [     0x100062c  ,       0x1000636      ]     };
   key <AC08> {  [     0x10006a9  ,       0x100062e      ]     };
   key <AC09> {  [     0x1000644  ,       0x1000654      ]     };
   key <AC10> {  [     0x100061b  ,       0x100003a      ]     };
   key <AC11> {  [     0x1000027  ,       0x1000022      ]     };
   key <BKSL> {  [     0x100005C  ,       0x100007C      ]     };

   key <LSGT> {  [           bar  ,       brokenbar      ]     };
   key <AB01> {  [     0x1000632  ,       0x1000630, 0x100200E      ]     };
   key <AB02> {  [     0x1000634  ,       0x1000698, 0x100202A      ]     };
   key <AB03> {  [     0x1000686  ,       0x100062b, 0x100202D      ]     };
   key <AB04> {  [     0x1000637  ,       0x1000638, 0x100202C      ]     };
   key <AB05> {  [     0x1000628  ,       0x100002e, 0x100202E      ]     };
   key <AB06> {  [     0x1000646  ,       0x10006ba, 0x100202B      ]     };
   key <AB07> {  [     0x1000645  ,       0x1000658, 0x100200F      ]     };
   key <AB08> {  [     0x100060c  ,       0x100003c      ]     };
   key <AB09> {  [     0x10006d4  ,       0x100003E      ]     };
   key <AB10> {  [     0x100002f  ,       0x100061f      ]     };

//   key <RALT> {  [ Mode_switch, Multi_key ] };

   include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "urd-crulp" {

   name[Group1]= "Urdu (Pakistan, CRULP)";
// www.crulp.org phonetic v1.1

   key <TLDE> {  [     0x100007E  ,       0x100064B      ]     };
   key <AE01> {  [     0x10006F1  ,       0x1000031, 0x1000021      ]     };
   key <AE02> {  [     0x10006F2  ,       0x1000032, 0x1000040      ]     };
   key <AE03> {  [     0x10006F3  ,       0x1000033, 0x1000023      ]     };
   key <AE04> {  [     0x10006F4  ,       0x1000034      ]     };
   key <AE05> {  [     0x10006F5  ,       0x1000035, 0x100066A      ]     };
   key <AE06> {  [     0x10006F6  ,       0x1000036      ]     };
   key <AE07> {  [     0x10006F7  ,       0x1000037, 0x1000026      ]     };
   key <AE08> {  [     0x10006F8  ,       0x1000038, 0x100002A      ]     };
   key <AE09> {  [     0x10006F9  ,       0x1000039, 0x1000029      ]     };
   key <AE10> {  [     0x10006F0  ,       0x1000030, 0x1000028      ]     };

   key <AE11> {  [     0x100002D  ,       0x100005F      ]     };
   key <AE12> {  [     0x100003D  ,       0x100002B      ]     };
   key <AD01> {  [     0x1000642  ,       0x1000652      ]     };
   key <AD02> {  [     0x1000648  ,       0x1000651, 0x1000602      ]     };
   key <AD03> {  [     0x1000639  ,       0x1000670, 0x1000656      ]     };
   key <AD04> {  [     0x1000631  ,       0x1000691, 0x1000613      ]     };
   key <AD05> {  [     0x100062a  ,       0x1000679, 0x1000614      ]     };
   key <AD06> {  [     0x10006d2  ,       0x100064E, 0x1000601      ]     };
   key <AD07> {  [     0x1000621  ,       0x1000626, 0x1000654      ]     };
   key <AD08> {  [     0x10006cc  ,       0x1000650, 0x1000611      ]     };
   key <AD09> {  [     0x10006c1  ,       0x10006c3      ]     };
   key <AD10> {  [     0x100067e  ,       0x100064f, 0x1000657      ]     };
   key <AD11> {  [     0x100005d  ,       0x100007D      ]     };
   key <AD12> {  [     0x100005b  ,       0x100007B      ]     };

   key <AC01> {  [     0x1000627  ,       0x1000622, 0x100FDF2      ]     };
   key <AC02> {  [     0x1000633  ,       0x1000635, 0x1000610      ]     };
   key <AC03> {  [     0x100062f  ,       0x1000688, 0x100FDFA      ]     };
   key <AC04> {  [     0x1000641  ,       0x1000651      ]     };
   key <AC05> {  [     0x10006af  ,       0x100063a      ]     };
   key <AC06> {  [     0x100062D  ,       0x10006BE, 0x1000612      ]     };
   key <AC07> {  [     0x100062c  ,       0x1000636, 0x100FDFB      ]     };
   key <AC08> {  [     0x10006a9  ,       0x100062e      ]     };
   key <AC09> {  [     0x1000644  ,       0x1000654      ]     };
   key <AC10> {  [     0x100061b  ,       0x100003a      ]     };
   key <AC11> {  [     0x1000027  ,       0x1000022      ]     };
   key <BKSL> {  [     0x100005C  ,       0x100007C      ]     };

   key <LSGT> {  [           bar  ,       brokenbar      ]     };
   key <AB01> {  [     0x1000632  ,       0x1000630, 0x100060F      ]     };
   key <AB02> {  [     0x1000634  ,       0x1000698, 0x100060E      ]     };
   key <AB03> {  [     0x1000686  ,       0x100062b, 0x1000603      ]     };
   key <AB04> {  [     0x1000637  ,       0x1000638      ]     };
   key <AB05> {  [     0x1000628  ,       0x100002e, 0x100FDFD      ]     };
   key <AB06> {  [     0x1000646  ,       0x10006ba, 0x1000600      ]     };
   key <AB07> {  [     0x1000645  ,       0x1000658      ]     };
   key <AB08> {  [     0x100060c  ,       0x100003c, 0x100003C      ]     };
   key <AB09> {  [     0x10006d4  ,       0x100066B, 0x100003E      ]     };
   key <AB10> {  [     0x100002f  ,       0x100061F      ]     };

//   key <RALT> {  [ Mode_switch, Multi_key ] };

   include "level3(ralt_switch)"
};


partial alphanumeric_keys
xkb_symbols "urd-nla" {
   name[Group1]= "Urdu (Pakistan, NLA)";
// www.nla.gov.pk

   key <TLDE> {  [     0x1000060  ,       0x100007E, 0x100200C     ]     };
   key <AE01> {  [     0x1000031  ,       0x1000021      ]     };
   key <AE02> {  [     0x1000032  ,       0x1000040      ]     };
   key <AE03> {  [     0x1000033  ,       0x1000023      ]     };
   key <AE04> {  [     0x1000034  ,       0x1000024      ]     };
   key <AE05> {  [     0x1000035  ,       0x100066A      ]     };
   key <AE06> {  [     0x1000036  ,       0x100005E      ]     };
   key <AE07> {  [     0x1000037  ,       0x10006D6      ]     };
   key <AE08> {  [     0x1000038  ,       0x100066D      ]     };
   key <AE09> {  [     0x1000039  ,       0x1000029      ]     };
   key <AE10> {  [     0x1000030  ,       0x1000028      ]     };
   key <AE11> {  [     0x100002D  ,       0x100005F      ]     };
   key <AE12> {  [     0x100003D  ,       0x100002B      ]     };
   key <AD01> {  [     0x1000637  ,       0x1000638, 0x100200D      ]     };
   key <AD02> {  [     0x1000635  ,       0x1000636, 0x100200C      ]     };
   key <AD03> {  [     0x10006BE  ,       0x1000630      ]     };
   key <AD04> {  [     0x100062F  ,       0x1000688      ]     };
   key <AD05> {  [     0x1000679  ,       0x100062B      ]     };
   key <AD06> {  [     0x100067E  ,       0x1000651      ]     };
   key <AD07> {  [     0x100062A  ,       0x10006C3      ]     };
   key <AD08> {  [     0x1000628  ,       0x1000640      ]     };
   key <AD09> {  [     0x100062C  ,       0x1000686      ]     };
   key <AD10> {  [     0x100062D  ,       0x100062E      ]     };
   key <AD11> {  [     0x100005d  ,       0x100007D      ]     };
   key <AD12> {  [     0x100005b  ,       0x100007B      ]     };

   key <AC01> {  [     0x1000645  ,       0x1000698      ]     };
   key <AC02> {  [     0x1000648  ,       0x1000632      ]     };
   key <AC03> {  [     0x1000631  ,       0x1000691      ]     };
   key <AC04> {  [     0x1000646  ,       0x10006BA      ]     };
   key <AC05> {  [     0x1000644  ,       0x10006C2      ]     };
   key <AC06> {  [     0x10006C1  ,       0x1000621      ]     };
   key <AC07> {  [     0x1000627  ,       0x1000622      ]     };
   key <AC08> {  [     0x10006a9  ,       0x10006AF      ]     };
   key <AC09> {  [     0x10006CC  ,       0x100064A      ]     };
   key <AC10> {  [     0x100061b  ,       0x100003a      ]     };
   key <AC11> {  [     0x1000027  ,       0x1000022      ]     };
   key <BKSL> {  [     0x100005C  ,       0x100007C      ]     };

   key <LSGT> {  [            bar ,       brokenbar      ]     };
   key <AB01> {  [     0x1000642  ,       0x100200D, 0x100200E      ]     };
   key <AB02> {  [     0x1000641  ,       0x100200C, 0x100202A      ]     };
   key <AB03> {  [     0x10006D2  ,       0x10006D3, 0x100202D      ]     };
   key <AB04> {  [     0x1000633  ,       0x100200E, 0x100202C      ]     };
   key <AB05> {  [     0x1000634  ,       0x1000624, 0x100202E      ]     };
   key <AB06> {  [     0x100063A  ,       0x1000626, 0x100202B      ]     };
   key <AB07> {  [     0x1000639  ,       0x100200F, 0x100200F      ]     };
   key <AB08> {  [     0x100060c  ,       0x100003E      ]     };
   key <AB09> {  [     0x10006d4  ,       0x100003C      ]     };
   key <AB10> {  [     0x100002F  ,       0x100061f      ]     };

   include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "snd" {
   name[Group1]= "Sindhi";
// www.bhurgri.com

    key <TLDE> {  [       0x1002019,       0x1002018                 ]       };
    key <AE01> {  [               1,          exclam, 0x1000610      ]       };
    key <AE02> {  [               2,       0x1000670, 0x1000611      ]       };
    key <AE03> {  [               3,       0x1000621, 0x1000613      ]       };
    key <AE04> {  [               4,       0x1000621, 0x1000612      ]       };
    key <AE05> {  [               5,       0x1000621, 0x1002026      ]       };
    key <AE06> {  [               6,       0x1000621, 0x1002022      ]       };
    key <AE07> {  [               7,       0x10006FD                 ]       };
    key <AE08> {  [               8,        asterisk                 ]       };
    key <AE09> {  [               9,      parenright                 ]       };
    key <AE10> {  [               0,       parenleft                 ]       };
    key <AE11> {  [       0x100068F,       0x100005F, 0x100002D      ]       };
    key <AE12> {  [       0x100068C,            plus, 0x100003D      ]       };
    key <BKSL> {  [       0x100068D,       0x100067A, 0x100007C      ]       };

    key <AD01> {  [       0x1000642,       0x100064E, 0x100064B      ]       };
    key <AD02> {  [       0x1000635,       0x1000636, 0x100FDFA      ]       };
    key <AD03> {  [       0x100064A,       0x1000650, 0x1000656      ]       };
    key <AD04> {  [       0x1000631,       0x1000699, 0x100FDE6      ]       };
    key <AD05> {  [       0x100062A,       0x100067D, 0x1000629      ]       };
    key <AD06> {  [       0x100067F,       0x100062B, 0x100FDE5      ]       };
    key <AD07> {  [       0x1000639,       0x100063A, 0x100FDE3      ]       };
    key <AD08> {  [       0x10006B3,       0x10006BE, 0x100FDE4      ]       };
    key <AD09> {  [       0x1000648,       0x100064F, 0x1000657      ]       };
    key <AD10> {  [       0x100067E,       0x10006A6                 ]       };
    key <AD11> {  [       0x1000687,       0x1000683                 ]       };
    key <AD12> {  [       0x1000686,       0x1000684                 ]       };

    key <AC01> {  [       0x1000627,       0x1000622, 0x1000649      ]       };
    key <AC02> {  [       0x1000633,       0x1000634                 ]       };
    key <AC03> {  [       0x100062F,       0x100068A                 ]       };
    key <AC04> {  [       0x1000641,       0x10006A6                 ]       };
    key <AC05> {  [       0x10006AF,       0x10006AF                 ]       };
    key <AC06> {  [       0x1000647,       0x100062D, 0x10006C1      ]       };
    key <AC07> {  [       0x100062C,       0x100062C, 0x100FDFB      ]       };
    key <AC08> {  [       0x10006AA,       0x10006E1                 ]       };
    key <AC09> {  [       0x1000644,       0x100003A                 ]       };
    key <AC10> {  [       0x10006A9,       0x100061B                 ]       };
    key <AC11> {  [       0x10006B1,       0x1000640                 ]       };

    key <AB01> {  [       0x1000632,       0x1000630, 0x1000652      ]       };
    key <AB02> {  [       0x100062E,       0x1000651, 0x100200C      ]       };
    key <AB03> {  [       0x1000637,       0x1000638, 0x100200D      ]       };
    key <AB04> {  [       0x1000680,       0x1000621, 0x1000624      ]       };
    key <AB05> {  [       0x1000628,       0x100067B, 0x100FDE1      ]       };
    key <AB06> {  [       0x1000646,       0x10006BB, 0x100200E      ]       };
    key <AB07> {  [       0x1000645,       0x10006FE, 0x100FDF4      ]       };
    key <AB08> {  [       0x100060C,       0x100201C, 0x100200F      ]       };
    key <AB09> {  [          period,       0x100201D, 0x10006D4      ]       };
    key <AB10> {  [       0x1000626, Arabic_question_mark, 0x100002F ]       };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "ara" {
   name[Group1]= "Arabic (Pakistan)";

// NOTES:
//
// there is also combined shadda diacritis in AltGr position of simple
// diacritics fatha, fathatan, damma, dammatan, kasra and kasratan
// should a third state be added to Group2 ?
//
// How is this different from ara(basic)? --bernie

   key <TLDE> {  [     0x100064d  ,       0x100064b      ]     };
   key <AE01> {  [     0x10006F1  ,       0x1000021      ]     };
   key <AE02> {  [     0x10006F2  ,       0x1000003      ]     };
   key <AE03> {  [     0x10006F3  ,       0x100002f      ]     };
   key <AE04> {  [     0x10006F4  ,       0x1000626      ]     };
   key <AE05> {  [     0x10006F5  ,       0x1000003      ]     };
   key <AE06> {  [     0x10006F6  ,       0x10006d6      ]     };
   key <AE07> {  [     0x10006F7  ,       0x1000654      ]     };
   key <AE08> {  [     0x10006F8  ,       0x100064c      ]     };
   key <AE09> {  [     0x10006F9  ,       0x1000029      ]     };
   key <AE10> {  [     0x10006F0  ,       0x1000028      ]     };
   key <AE11> {  [     0x1000623  ,       0x1000651      ]     };
   key <AE12> {  [     0x1000624  ,       0x1000622      ]     };
   key <AD01> {  [     0x1000642  ,       0x1000652      ]     };
   key <AD02> {  [     0x1000648  ,       0x10000a3      ]     };
   key <AD03> {  [     0x1000639  ,       0x10000a5      ]     };
   key <AD04> {  [     0x1000631  ,       0x1000691      ]     };
   key <AD05> {  [     0x100062a  ,       0x1000679      ]     };
   key <AD06> {  [     0x10006d2  ,       0x1000601      ]     };
   key <AD07> {  [     0x1000621  ,       0x100060c      ]     };
   key <AD08> {  [     0x10006cc  ,       0x1000670      ]     };
   key <AD09> {  [     0x10006c1  ,       0x10006c3      ]     };
   key <AD10> {  [     0x100067e  ,       0x100064f      ]     };
   key <AD11> {  [     0x100005d  ,       0x1000670      ]     };
   key <AD12> {  [     0x100005b  ,       0x1000670      ]     };

   key <AC01> {  [     0x1000627  ,       0x1000653      ]     };
   key <AC02> {  [     0x1000633  ,       0x1000635      ]     };
   key <AC03> {  [     0x100062f  ,       0x1000688      ]     };
   key <AC04> {  [     0x1000641  ,       0x1000003      ]     };
   key <AC05> {  [     0x10006af  ,       0x100063a      ]     };
   key <AC06> {  [     0x10006be  ,       0x100062d      ]     };
   key <AC07> {  [     0x100062c  ,       0x1000636      ]     };
   key <AC08> {  [     0x10006a9  ,       0x100062e      ]     };
   key <AC09> {  [     0x1000644  ,       0x1000613      ]     };
   key <AC10> {  [     0x100061b  ,       0x100003a      ]     };
   key <AC11> {  [     0x1000670  ,       0x1000022      ]     };
   key <BKSL> {  [     0x100060e  ,       0x1000614      ]     };

   key <LSGT> {  [           bar  ,       brokenbar      ]     };
   key <AB01> {  [     0x1000632  ,       0x1000630      ]     };
   key <AB02> {  [     0x1000634  ,       0x1000698      ]     };
   key <AB03> {  [     0x1000686  ,       0x100062b      ]     };
   key <AB04> {  [     0x1000637  ,       0x1000638      ]     };
   key <AB05> {  [     0x1000628  ,       0x1000612      ]     };
   key <AB06> {  [     0x1000646  ,       0x10006ba      ]     };
   key <AB07> {  [     0x1000645  ,       0x1000003      ]     };
   key <AB08> {  [     0x100060c  ,       0x1000650      ]     };
   key <AB09> {  [     0x10006d4  ,       0x100064e      ]     };
   key <AB10> {  [     0x1000003  ,       0x100061f      ]     };
};

partial alphanumeric_keys
xkb_symbols "olpc" {

// Contact: Walter Bender <walter@laptop.org>

   include "pk(ara)"

   name[Group1]= "Urdu (Pakistan)";

   // Keys '~' - '='
   key <TLDE> {  [ 0x1000654, 0x100064B ] };
   key <AE01> {  [ 0x10006F1, 0x1000603 ] };
   key <AE02> {  [ 0x10006F2, 0x1000602 ] };
   key <AE03> {  [ 0x10006F3, 0x1000601 ] };
   key <AE04> {  [ 0x10006F4, 0x1000600 ] };
   key <AE05> {  [ 0x10006F5, 0x100060F ] };
   key <AE06> {  [ 0x10006F6, 0x100060E ] };
   key <AE07> {  [ 0x10006F7, 0x1000614 ] };
   key <AE08> {  [ 0x10006F8, 0x1000612 ] };
   key <AE09> {  [ 0x10006F9, 0x1000611 ] };
   key <AE10> {  [ 0x10006F0, 0x1000613 ] };
   key <AE11> {  [ minus,     0x1000610 ] };
   key <AE12> {  [ equal, plus ] };

   //Keys 'Q' - ']'
   key <AD01> {  [ 0x1000642, 0x1000652 ] };
   key <AD02> {  [ 0x1000648, 0x1000651 ] };
   key <AD03> {  [ 0x1000639, 0x1000670 ] };
   key <AD04> {  [ 0x1000631, 0x1000691 ] };
   key <AD05> {  [ 0x100062A, 0x1000679 ] };
   key <AD06> {  [ 0x10006D2, 0x100064E ] };
   key <AD07> {  [ 0x1000621, 0x1000626 ] };
   key <AD08> {  [ 0x10006CC, 0x1000650 ] };
   key <AD09> {  [ 0x10006C1, 0x10006C3 ] };
   key <AD10> {  [ 0x100067E, 0x100064F ] };
   key <AD12> {  [ 0x100FDFD, 0x100FDFA ] };
   key <AD11> {  [ 0x100FDF2, 0x100FDFB ] };

   // Keys 'A' - '''
   key <AC01> {  [ 0x1000627, 0x1000622 ] };
   key <AC02> {  [ 0x1000633, 0x1000635 ] };
   key <AC03> {  [ 0x100062F, 0x1000688 ] };
   key <AC04> {  [ 0x1000641 ] }; //shift key not available
   key <AC05> {  [ 0x10006AF, 0x100063A ] };
   key <AC06> {  [ 0x100062D, 0x10006BE ] };
   key <AC07> {  [ 0x100062C, 0x1000636 ] };
   key <AC08> {  [ 0x10006A9, 0x100062E ] };
   key <AC09> {  [ 0x1000644, 0x1000656 ] };
   key <AC10> {  [ 0x100061B, colon ] };
   key <AC11> {  [ quote, doublequote  ] };

   key <BKSL> { [  backslash, bar  ] };
   key <SPCE> { [  space  ] };

   // Keys: 'Z' - '/'
   key <AB01> {  [ 0x1000632, 0x1000622 ] };
   key <AB02> {  [ 0x1000634, 0x1000635 ] };
   key <AB03> {  [ 0x1000686, 0x1000688 ] };
   key <AB04> {  [ 0x1000637 ] }; //shift key unavailable
   key <AB05> {  [ 0x1000628, 0x100063A ] };
   key <AB06> {  [ 0x1000646, 0x10006BE ] };
   key <AB07> {  [ 0x1000645, 0x1000636 ] };
   key <AB08> {  [ 0x100060C, 0x100062E ] };
   key <AB09> {  [ 0x10006D4, 0x1000656 ] };
   key <AB10> {  [ slash,     0x100061F ] };

   include "group(olpc)"
};
// These partial variants assign ISO_Level3_Shift to various XKB keycodes
// so that the third shift level can be reached.

// The default behaviour:
// the right Alt key (AltGr) chooses the third symbol engraved on a key.
default partial modifier_keys
xkb_symbols "ralt_switch" {
  key <RALT> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// Ensure a mapping to a real modifier for LevelThree.
partial modifier_keys
xkb_symbols "modifier_mapping" {
  replace key <LVL3> {
    type[Group1] = "ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  modifier_map Mod5 { <LVL3> };
};

// The right Alt key never chooses the third level.
// This option attempts to undo the effect of a layout's inclusion of
// 'ralt_switch'.  You may want to also select another level3 option
// to map the level3 shift to some other key.
partial modifier_keys
xkb_symbols "ralt_alt" {
  key <RALT> {
    type[Group1]="TWO_LEVEL",
    type[Group2]="TWO_LEVEL",
    type[Group3]="TWO_LEVEL",
    type[Group4]="TWO_LEVEL",
    symbols[Group1] = [ Alt_R, Meta_R ],
    symbols[Group2] = [ Alt_R, Meta_R ],
    symbols[Group3] = [ Alt_R, Meta_R ],
    symbols[Group4] = [ Alt_R, Meta_R ]
  };
  modifier_map Mod1 { <RALT> };
};

// The right Alt key (while pressed) chooses the third shift level,
// and Compose is mapped to its second level.
partial modifier_keys
xkb_symbols "ralt_switch_multikey" {
  key <RALT> {
    type[Group1]="TWO_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift, Multi_key ]
  };
  include "level3(modifier_mapping)"
};

// A special case of the right-Alt switch -- for use with grp:alts_toggle.
hidden partial modifier_keys
xkb_symbols "ralt_switch_for_alts_toggle" {
  virtual_modifiers LAlt, AltGr;
  key <LALT> {
    type[Group1]="PC_RALT_LEVEL2",
    symbols[Group1] = [ Alt_L, ISO_Prev_Group, ISO_Prev_Group ],
    virtualMods= LAlt
  };
  key <RALT> {
    type[Group1]="PC_ALT_LEVEL2",
    symbols[Group1] = [ ISO_Level3_Shift, ISO_Next_Group ],
    virtualMods= AltGr
  };
  include "level3(modifier_mapping)"
};

// Either Alt key (while pressed) chooses the third shift level.
// (To be used mostly to imitate Mac OS functionality.)
partial modifier_keys
xkb_symbols "alt_switch" {
  include "level3(lalt_switch)"
  include "level3(ralt_switch)"
};

// The left Alt key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "lalt_switch" {
  key <LALT> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// The right Ctrl key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "switch" {
  key <RCTL> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// The Menu key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "menu_switch" {
  key <MENU> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// Either Win key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "win_switch" {
  include "level3(lwin_switch)"
  include "level3(rwin_switch)"
};

// The left Win key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "lwin_switch" {
  key <LWIN> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// The right Win key (while pressed) chooses the third shift level.
// (When using this map, you should set your keyboard as pc101 or pc102
// instead of pc104 or pc105.)
partial modifier_keys
xkb_symbols "rwin_switch" {
  key <RWIN> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// The Enter key on the kepypad (while pressed) chooses the third shift level.
// (This is especially useful for Mac laptops which miss the right Alt key.)
partial modifier_keys
xkb_symbols "enter_switch" {
  key <KPEN> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// The CapsLock key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "caps_switch" {
  key <CAPS> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// The Backslash key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "bksl_switch" {
  key <BKSL> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// The Less/Greater key (while pressed) chooses the third shift level.
partial modifier_keys
xkb_symbols "lsgt_switch" {
  key <LSGT> {
    type[Group1]="ONE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// The CapsLock key (while pressed) chooses the third shift level,
// and latches when pressed together with another third-level chooser.
partial modifier_keys
xkb_symbols "caps_switch_latch" {
  key <CAPS> {
    type[Group1]="THREE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift, ISO_Level3_Shift, ISO_Level3_Latch ]
  };
  include "level3(modifier_mapping)"
};

// The Backslash key (while pressed) chooses the third shift level,
// and latches when pressed together with another third-level chooser.
partial modifier_keys
xkb_symbols "bksl_switch_latch" {
  key <BKSL> {
    type[Group1]="THREE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift, ISO_Level3_Shift, ISO_Level3_Latch ]
  };
  include "level3(modifier_mapping)"
};

// The Less/Greater key (while pressed) chooses the third shift level,
// and latches when pressed together with another third-level chooser.
partial modifier_keys
xkb_symbols "lsgt_switch_latch" {
  key <LSGT> {
    type[Group1]="THREE_LEVEL",
    symbols[Group1] = [ ISO_Level3_Shift, ISO_Level3_Shift, ISO_Level3_Latch ]
  };
  include "level3(modifier_mapping)"
};

// Number key 4 chooses third shift level when pressed in isolation.
partial modifier_keys
xkb_symbols "4_switch_isolated" {
  override key <AE04> {
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};

// Number key 9 chooses third shift level when pressed in isolation.
partial modifier_keys
xkb_symbols "9_switch_isolated" {
  override key <AE09> {
    symbols[Group1] = [ ISO_Level3_Shift ]
  };
  include "level3(modifier_mapping)"
};
//
// X keyboard maps for Finland
//
// SFS 5966 / Kotoistus keymap created by Troy Korjuslommi
// Classic keymap based on traditional by Marko Myllynen
// Eliminate deadkeys alternative sent by Linus Torvalds
//

default partial alphanumeric_keys
xkb_symbols "kotoistus" {

    // Official keymap for Finland based on SFS 5966:2019 standard
    //
    // This keymap implements all the functionality of Annex 1
    // of the standard and additionally defines the following to
    // allow entering these characters with keyboards without LSGT.
    //
    // AE08+4 : U+003C LESS-THAN SIGN     (less)
    // AE09+4 : U+003E GREATER-THAN SIGN  (greater)
    // AD08+4 : U+007C VERTICAL LINE      (bar)
    //
    // Annex 3 of the standard is implemented in fi_FI.UTF-8/Compose.
    //
    // This keymap implements regular space in position "A-3" of the
    // standard and implements NARROW NO-BREAK SPACE (U+202F) in A-4.
    //
    // The following definitions are also included to allow entering
    // Greek letters and currency symbols with the libX11 sequences.
    //
    // AC08+4 : dead_greek
    // AC09+4 : dead_currency

    name[Group1]="Finnish";

    key <TLDE> { [  section,         onehalf,          dead_stroke,           NoSymbol              ] };
    key <AE01> { [  1,               exclam,           NoSymbol,              exclamdown            ] };
    key <AE02> { [  2,               quotedbl,         at,                    rightdoublequotemark  ] };
    key <AE03> { [  3,               numbersign,       sterling,              guillemotright        ] };
    key <AE04> { [  4,               currency,         dollar,                guillemotleft         ] };
    key <AE05> { [  5,               percent,          permille,              leftdoublequotemark   ] };
    key <AE06> { [  6,               ampersand,        singlelowquotemark,    doublelowquotemark    ] };
    key <AE07> { [  7,               slash,            braceleft,             NoSymbol              ] };
    key <AE08> { [  8,               parenleft,        bracketleft,           less                  ] };
    key <AE09> { [  9,               parenright,       bracketright,          greater               ] };
    key <AE10> { [  0,               equal,            braceright,            degree                ] };
    key <AE11> { [  plus,            question,         backslash,             questiondown          ] };
    key <AE12> { [  dead_acute,      dead_grave,       dead_cedilla,          dead_ogonek           ] };

    key <AD01> { [  q,               Q,                q,                     Q                     ] };
    key <AD02> { [  w,               W,                w,                     W                     ] };
    key <AD03> { [  e,               E,                EuroSign,              NoSymbol              ] };
    key <AD04> { [  r,               R,                r,                     R                     ] };
    key <AD05> { [  t,               T,                thorn,                 THORN                 ] };
    key <AD06> { [  y,               Y,                y,                     Y                     ] };
    key <AD07> { [  u,               U,                u,                     U                     ] };
    key <AD08> { [  i,               I,                idotless,              bar                   ] };
    key <AD09> { [  o,               O,                oe,                    OE                    ] };
    key <AD10> { [  p,               P,                dead_horn,             dead_hook             ] };
    key <AD11> { [  aring,           Aring,            dead_doubleacute,      dead_abovering        ] };
    key <AD12> { [  dead_diaeresis,  dead_circumflex,  dead_tilde,            dead_macron           ] };

    key <AC01> { [  a,               A,                schwa,                 SCHWA                 ] };
    key <AC02> { [  s,               S,                ssharp,                U1E9E                 ] };
    key <AC03> { [  d,               D,                eth,                   ETH                   ] };
    key <AC04> { [  f,               F,                f,                     F                     ] };
    key <AC05> { [  g,               G,                g,                     G                     ] };
    key <AC06> { [  h,               H,                h,                     H                     ] };
    key <AC07> { [  j,               J,                j,                     J                     ] };
    key <AC08> { [  k,               K,                kra,                   dead_greek            ] };
    key <AC09> { [  l,               L,                dead_stroke,           dead_currency         ] };
    key <AC10> { [  odiaeresis,      Odiaeresis,       oslash,                Oslash                ] };
    key <AC11> { [  adiaeresis,      Adiaeresis,       ae,                    AE                    ] };
    key <BKSL> { [  apostrophe,      asterisk,         dead_caron,            dead_breve            ] };

    key <LSGT> { [  less,            greater,          bar,                   NoSymbol              ] };
    key <AB01> { [  z,               Z,                ezh,                   EZH                   ] };
    key <AB02> { [  x,               X,                multiply,              periodcentered        ] };
    key <AB03> { [  c,               C,                c,                     C                     ] };
    key <AB04> { [  v,               V,                v,                     V                     ] };
    key <AB05> { [  b,               B,                b,                     B                     ] };
    key <AB06> { [  n,               N,                eng,                   ENG                   ] };
    key <AB07> { [  m,               M,                mu,                    emdash                ] };
    key <AB08> { [  comma,           semicolon,        rightsinglequotemark,  leftsinglequotemark   ] };
    key <AB09> { [  period,          colon,            dead_belowdot,         dead_abovedot         ] };
    key <AB10> { [  minus,           underscore,       endash,                dead_belowcomma       ] };

    key <SPCE> { [  space,           space,            space,                 U202F                 ] };

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "winkeys" {

    include "fi(kotoistus)"

    name[Group1]="Finnish (Windows)";

    include "eurosign(5)"
};

hidden partial alphanumeric_keys
xkb_symbols "fi" {

    // Classic Finnish keyboard layout with dead keys

    key <TLDE> { [  section,         onehalf,          onequarter,            threequarters         ] };
    key <AE01> { [  1,               exclam,           exclamdown,            onesuperior           ] };
    key <AE02> { [  2,               quotedbl,         at,                    twosuperior           ] };
    key <AE03> { [  3,               numbersign,       sterling,              threesuperior         ] };
    key <AE04> { [  4,               currency,         dollar,                cent                  ] };
    key <AE05> { [  5,               percent,          EuroSign,              masculine             ] };
    key <AE06> { [  6,               ampersand,        yen,                   ordfeminine           ] };
    key <AE07> { [  7,               slash,            braceleft,             plusminus             ] };
    key <AE08> { [  8,               parenleft,        bracketleft,           less                  ] };
    key <AE09> { [  9,               parenright,       bracketright,          greater               ] };
    key <AE10> { [  0,               equal,            braceright,            degree                ] };
    key <AE11> { [  plus,            question,         backslash,             questiondown          ] };
    key <AE12> { [  dead_acute,      dead_grave,       dead_cedilla,          dead_ogonek           ] };

    key <AD01> { [  q,               Q,                q,                     Q                     ] };
    key <AD02> { [  w,               W,                w,                     W                     ] };
    key <AD03> { [  e,               E,                EuroSign,              cent                  ] };
    key <AD04> { [  r,               R,                registered,            NoSymbol              ] };
    key <AD05> { [  t,               T,                thorn,                 THORN                 ] };
    key <AD06> { [  y,               Y,                y,                     Y                     ] };
    key <AD07> { [  u,               U,                u,                     U                     ] };
    key <AD08> { [  i,               I,                idotless,              bar                   ] };
    key <AD09> { [  o,               O,                o,                     O                     ] };
    key <AD10> { [  p,               P,                paragraph,             NoSymbol              ] };
    key <AD11> { [  aring,           Aring,            oe,                    OE                    ] };
    key <AD12> { [  dead_diaeresis,  dead_circumflex,  dead_tilde,            dead_caron            ] };

    key <AC01> { [  a,               A,                schwa,                 SCHWA                 ] };
    key <AC02> { [  s,               S,                scaron,                Scaron                ] };
    key <AC03> { [  d,               D,                eth,                   ETH                   ] };
    key <AC04> { [  f,               F,                f,                     F                     ] };
    key <AC05> { [  g,               G,                eng,                   ENG                   ] };
    key <AC06> { [  h,               H,                h,                     H                     ] };
    key <AC07> { [  j,               J,                j,                     J                     ] };
    key <AC08> { [  k,               K,                kra,                   dead_greek            ] };
    key <AC09> { [  l,               L,                dead_stroke,           dead_currency         ] };
    key <AC10> { [  odiaeresis,      Odiaeresis,       oslash,                Oslash                ] };
    key <AC11> { [  adiaeresis,      Adiaeresis,       ae,                    AE                    ] };
    key <BKSL> { [  apostrophe,      asterisk,         dead_caron,            dead_breve            ] };

    key <LSGT> { [  less,            greater,          bar,                   brokenbar             ] };
    key <AB01> { [  z,               Z,                zcaron,                Zcaron                ] };
    key <AB02> { [  x,               X,                multiply,              division              ] };
    key <AB03> { [  c,               C,                copyright,             cent                  ] };
    key <AB04> { [  v,               V,                v,                     V                     ] };
    key <AB05> { [  b,               B,                ssharp,                U1E9E                 ] };
    key <AB06> { [  n,               N,                ntilde,                Ntilde                ] };
    key <AB07> { [  m,               M,                mu,                    NoSymbol              ] };
    key <AB08> { [  comma,           semicolon,        dead_cedilla,          dead_ogonek           ] };
    key <AB09> { [  period,          colon,            periodcentered,        notsign               ] };
    key <AB10> { [  minus,           underscore,       hyphen,                dead_macron           ] };

    key <SPCE> { [  space,           space,            space,                 U202F                 ] };

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "classic" {

    include "fi(fi)"

    name[Group1]="Finnish (classic)";
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    // Classic Finnish keyboard layout without dead keys

    include "fi(fi)"

    name[Group1]="Finnish (classic, no dead keys)";

    key <AE12> { [  acute,           grave,            cedilla,               ogonek                ] };
    key <AD12> { [  diaeresis,       asciicircum,      asciitilde,            caron                 ] };
    key <AC09> { [  l,               L,                l,                     L                     ] };
    key <BKSL> { [  apostrophe,      asterisk,         caron,                 breve                 ] };
    key <AB08> { [  comma,           semicolon,        cedilla,               ogonek                ] };
    key <AB10> { [  minus,           underscore,       hyphen,                macron                ] };
};

partial alphanumeric_keys
xkb_symbols "smi" {

    // Describes the differences between a Norwegian Northern Sami
    // (keyboard with dead key support) and a Swedish/Finnish Sami
    // keyboard according to the specs at:
    // http://www.hum.uit.no/a/trond/se-lat9-sefi-keys.html

    include "no(smi)"

    name[Group1]="Northern Saami (Finland)";

    key <AC10> { [  odiaeresis,      Odiaeresis,       oslash,                Oslash                ] };
    key <AC11> { [  adiaeresis,      Adiaeresis,       ae,                    AE                    ] };
};

partial alphanumeric_keys
xkb_symbols "mac" {

    // Macintosh keyboard for Finland based on Swedish(Macintosh) keyboard

    include "se(mac)"

    name[Group1]="Finnish (Macintosh)";
};

partial alphanumeric_keys
xkb_symbols "sun_type6" {

    // Sun Type 6/7 keyboard for Finland

    include "sun_vndr/fi(sun_type6)"

    name[Group1]="Finnish (Sun Type 6/7)";
};

partial
xkb_symbols "das" {

    // DAS layout for typing Finnish designed by Cristian Seres (cseres at iki.fi).
    // More information about DAS is available at http://c.seres.fi/DAS_en.html.
    // This xkeyboard layout was created by Joel Lehtonen (joel.lehtonen at iki.fi),
    // and he released it to public domain.

    name[Group1]="Finnish (DAS)";

    key <AE01> { [  1,               exclam,           section                                      ] };
    key <AE02> { [  2,               quotedbl,         twosuperior                                  ] };
    key <AE03> { [  3,               at,               sterling                                     ] };
    key <AE04> { [  4,               EuroSign,         dollar                                       ] };
    key <AE05> { [  5,               percent,          onehalf                                      ] };
    key <AE06> { [  6,               ampersand                                                      ] };
    key <AE07> { [  7,               braceleft                                                      ] };
    key <AE08> { [  8,               parenleft,        bracketleft                                  ] };
    key <AE09> { [  9,               parenright,       bracketright                                 ] };
    key <AE10> { [  0,               braceright,       degree                                       ] };
    key <AE11> { [  plus,            question,         currency                                     ] };
    key <AE12> { [  equal,           numbersign                                                     ] };

    key <AD01> { [  p,               P,                Greek_pi                                     ] };
    key <AD02> { [  h,               H                                                              ] };
    key <AD03> { [  r,               R,                dead_circumflex                              ] };
    key <AD04> { [  k,               K,                dead_caron                                   ] };
    key <AD05> { [  less,            greater                                                        ] };
    key <AD06> { [  apostrophe,      bar                                                            ] };
    key <AD07> { [  w,               W                                                              ] };
    key <AD08> { [  u,               U                                                              ] };
    key <AD09> { [  y,               Y                                                              ] };
    key <AD10> { [  b,               B                                                              ] };
    key <AD11> { [  q,               Q                                                              ] };
    key <AD12> { [  z,               Z,                zcaron,                Zcaron                ] };

    key <AC01> { [  s,               S,                scaron,                Scaron                ] };
    key <AC02> { [  l,               L,                dead_acute                                   ] };
    key <AC03> { [  n,               N,                dead_grave                                   ] };
    key <AC04> { [  t,               T,                dead_diaeresis                               ] };
    key <AC05> { [  v,               V                                                              ] };
    key <AC06> { [  g,               G                                                              ] };
    key <AC07> { [  a,               A                                                              ] };
    key <AC08> { [  i,               I                                                              ] };
    key <AC09> { [  o,               O                                                              ] };
    key <AC10> { [  e,               E                                                              ] };
    key <AC11> { [  c,               C                                                              ] };
    key <TLDE> { [  backslash,       dead_tilde                                                     ] };

    key <BKSL> { [  asterisk,        slash                                                          ] };
    key <LSGT> { [  f,               F                                                              ] };
    key <AB01> { [  x,               X                                                              ] };
    key <AB02> { [  d,               D                                                              ] };
    key <AB03> { [  m,               M,                mu                                           ] };
    key <AB04> { [  j,               J                                                              ] };
    key <AB05> { [  aring,           Aring                                                          ] };
    key <AB06> { [  odiaeresis,      Odiaeresis,       oe,                    OE                    ] };
    key <AB07> { [  adiaeresis,      Adiaeresis,       ae,                    AE                    ] };
    key <AB08> { [  comma,           semicolon                                                      ] };
    key <AB09> { [  period,          colon                                                          ] };
    key <AB10> { [  minus,           underscore,       U2013,                 dead_macron           ] };
    key <SPCE> { [  space,           space,            space,                 nobreakspace          ] };

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "fidvorak" {

    // Dvorak keyboard layout for use with Finnish by Pekka Oinas.
    //
    // Dedicated keys for Ä and Ö by utilizing the extra LSGT key found on Finnish keyboards
    // and by moving colon and semicolon behind shift-modifiers on comma and period.
    // Less and greater than symbols moved behind 3rd level modifiers on comma and period.
    // Includes an assortment of dead keys but was not created with them in mind.

    name[Group1]="Finnish (Dvorak)";

    key <TLDE> { [  grave,           asciitilde,       dead_grave,            dead_tilde            ] };
    key <AE01> { [  1,               exclam,           NoSymbol,              exclamdown            ] };
    key <AE02> { [  2,               at,               cent,                  rightdoublequotemark  ] };
    key <AE03> { [  3,               numbersign,       sterling                                     ] };
    key <AE04> { [  4,               dollar,           currency                                     ] };
    key <AE05> { [  5,               percent,          permille,              leftdoublequotemark   ] };
    key <AE06> { [  6,               asciicircum,      dead_circumflex,       doublelowquotemark    ] };
    key <AE07> { [  7,               ampersand,        section,               singlelowquotemark    ] };
    key <AE08> { [  8,               asterisk                                                       ] };
    key <AE09> { [  9,               parenleft                                                      ] };
    key <AE10> { [  0,               parenright,       degree,                dead_abovering        ] };
    key <AE11> { [  bracketleft,     braceleft                                                      ] };
    key <AE12> { [  bracketright,    braceright                                                     ] };

    key <AD01> { [  apostrophe,      quotedbl,         dead_acute,            dead_doubleacute      ] };
    key <AD02> { [  comma,           semicolon,        less,                  leftsinglequotemark   ] };
    key <AD03> { [  period,          colon,            greater                                      ] };
    key <AD04> { [  p,               P                                                              ] };
    key <AD05> { [  y,               Y,                yen                                          ] };
    key <AD06> { [  f,               F                                                              ] };
    key <AD07> { [  g,               G                                                              ] };
    key <AD08> { [  c,               C                                                              ] };
    key <AD09> { [  r,               R                                                              ] };
    key <AD10> { [  l,               L,                notsign                                      ] };
    key <AD11> { [  slash,           question,         NoSymbol,              questiondown          ] };
    key <AD12> { [  equal,           plus                                                           ] };

    key <AC01> { [  a,               A,                schwa,                 SCHWA                 ] };
    key <AC02> { [  o,               O,                aring,                 Aring                 ] };
    key <AC03> { [  e,               E,                EuroSign                                     ] };
    key <AC04> { [  u,               U,                udiaeresis,            Udiaeresis            ] };
    key <AC05> { [  i,               I,                idotless,              Iabovedot             ] };
    key <AC06> { [  d,               D,                eth,                   ETH                   ] };
    key <AC07> { [  h,               H                                                              ] };
    key <AC08> { [  t,               T,                thorn,                 THORN                 ] };
    key <AC09> { [  n,               N,                eng,                   ENG                   ] };
    key <AC10> { [  s,               S,                ssharp,                U1E9E                 ] };
    key <AC11> { [  minus,           underscore,       endash,                emdash                ] };
    key <BKSL> { [  backslash,       bar,              dead_caron,            dead_breve            ] };

    key <LSGT> { [  adiaeresis,      Adiaeresis,       ae,                    AE                    ] };
    key <AB01> { [  odiaeresis,      Odiaeresis,       dead_diaeresis,        dead_macron           ] };
    key <AB02> { [  q,               Q,                ooblique,              Ooblique              ] };
    key <AB03> { [  j,               J                                                              ] };
    key <AB04> { [  k,               K,                kra                                          ] };
    key <AB05> { [  x,               X,                multiply,              periodcentered        ] };
    key <AB06> { [  b,               B,                hyphen                                       ] };
    key <AB07> { [  m,               M,                mu,                    emdash                ] };
    key <AB08> { [  w,               W                                                              ] };
    key <AB09> { [  v,               V                                                              ] };
    key <AB10> { [  z,               Z,                ezh,                   EZH                   ] };

    include "level3(ralt_switch)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {
    include "ara(basic)"
    name[Group1]= "Arabic (Syria)";
};

partial alphanumeric_keys
xkb_symbols "syc" {
    name[Group1]= "Syriac";

    key <TLDE> {  [  	0x100070F,	0x100032E,	Arabic_shadda		]     };
    key <AE01> {  [  	1,		exclam,		0x1000701		]     };
    key <AE02> {  [  	2,		0x100030A,	0x1000702		]     };
    key <AE03> {  [  	3,		0x1000325,	0x1000703		]     };
    key <AE04> {  [  	4,		0x1000749,	0x1000704		]     };
    key <AE05> {  [  	5,		0x1002670,	0x1000705		]     };
    key <AE06> {  [  	6,		0x1002671,	0x1000708		]     };
    key <AE07> {  [  	7,		0x100070A,	0x1000709		]     };
    key <AE08> {  [  	8,		0x10000BB,	0x100070B		]     };
    key <AE09> {  [  	9,		parenright,	0x100070C		]     };
    key <AE10> {  [  	0,		parenleft,	0x100070D		]     };
    key <AE11> {  [  	minus,		0x10000AB,	0x100250C		]     };
    key <AE12> {  [  	equal,		plus,		0x1002510		]     };

    key <AD01> {  [  	0x1000714,	0x1000730,	Arabic_fatha		]     };
    key <AD02> {  [  	0x1000728,	0x1000733,	Arabic_fathatan		]     };
    key <AD03> {  [  	0x1000716,	0x1000736,	Arabic_damma		]     };
    key <AD04> {  [  	0x1000729,	0x100073A,	Arabic_dammatan		]     };
    key <AD05> {  [  	0x1000726,	0x100073D,	Arabic_madda_above	]     };
    key <AD06> {  [  	0x100071C,	0x1000740,	Arabic_hamza_above	]     };
    key <AD07> {  [  	0x1000725,	0x1000741,	0x1000747		]     };
    key <AD08> {  [  	0x1000717,	0x1000308,	0x1000743		]     };
    key <AD09> {  [  	0x100071E,	0x1000304,	0x1000745		]     };
    key <AD10> {  [  	0x100071A,	0x1000307,	0x100032D		]     };
    key <AD11> {  [  	0x1000713,	0x1000303				]     };
    key <AD12> {  [  	0x1000715,	0x100074A				]     };
    key <BKSL> {  [  	0x1000706,	colon					]     };

    key <AC01> {  [  	0x100072B,	0x1000731,	Arabic_kasra		]     };
    key <AC02> {  [  	0x1000723,	0x1000734,	Arabic_kasratan		]     };
    key <AC03> {  [  	0x100071D,	0x1000737				]     };
    key <AC04> {  [  	0x1000712,	0x100073B,	Arabic_hamza		]     };
    key <AC05> {  [  	0x1000720,	0x100073E,	Arabic_hamza_below	]     };
    key <AC06> {  [  	0x1000710,	0x1000711,	Arabic_superscript_alef	]     };
    key <AC07> {  [  	0x100072C,	Arabic_tatweel,	0x1000748		]     };
    key <AC08> {  [  	0x1000722,	0x1000324,	0x1000744		]     };
    key <AC09> {  [  	0x1000721,	0x1000331,	0x1000746		]     };
    key <AC10> {  [  	0x100071F,	0x1000323				]     };
    key <AC11> {  [  	0x100071B,	0x1000330				]     };

    key <AB01> {  [  	bracketright,	0x1000732,	Arabic_sukun		]     };
    key <AB02> {  [  	bracketleft,	0x1000735				]     };
    key <AB03> {  [  	0x1000724,	0x1000738,	0x100200D		]     };
    key <AB04> {  [  	0x100072A,	0x100073C,	0x100200C		]     };
    key <AB05> {  [  	0x1000727,	0x100073F,	0x100200E		]     };
    key <AB06> {  [  	0x1000700,	0x1000739,	0x100200F		]     };
    key <AB07> {  [  	0x100002E,	0x1000742				]     };
    key <AB08> {  [  	0x1000718,	Arabic_comma				]     };
    key <AB09> {  [  	0x1000719,	Arabic_semicolon			]     };
    key <AB10> {  [  	0x1000707,	Arabic_question_mark			]     };

    // Space plus zero-width non-joiner:
    include "nbsp(zwnj2)"

    modifier_map Shift  { Shift_L, Shift_R };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L, Control_R };
    modifier_map Mod1   { Alt_L, Alt_R };
    modifier_map Mod2   { Mode_switch };
};

partial alphanumeric_keys
xkb_symbols "syc_phonetic" {
    name[Group1]= "Syriac (phonetic)";

    key <TLDE> {  [  	0x100070F,	0x100032E,	Arabic_shadda		]     };
    key <AE01> {  [  	1,		exclam,		0x1000701		]     };
    key <AE02> {  [  	2,		0x100030A,	0x1000702		]     };
    key <AE03> {  [  	3,		0x1000325,	0x1000703		]     };
    key <AE04> {  [  	4,		0x1000749,	0x1000704		]     };
    key <AE05> {  [  	5,		0x1002670,	0x1000705		]     };
    key <AE06> {  [  	6,		0x1002671,	0x1000708		]     };
    key <AE07> {  [  	7,		0x100070A,	0x1000709		]     };
    key <AE08> {  [  	8,		0x10000BB,	0x100070B		]     };
    key <AE09> {  [  	9,		parenright,	0x100070C		]     };
    key <AE10> {  [  	0,		parenleft,	0x100070D		]     };
    key <AE11> {  [  	minus,		0x10000AB,	0x100250C		]     };
    key <AE12> {  [  	equal,		plus,		0x1002510		]     };

    key <AD01> {  [  	0x1000729,	0x1000730,	Arabic_fatha		]     };
    key <AD02> {  [  	0x1000718,	0x1000733,	Arabic_fathatan		]     };
    key <AD03> {  [  	0x1000716,	0x1000736,	Arabic_damma		]     };
    key <AD04> {  [  	0x100072A,	0x100073A,	Arabic_dammatan		]     };
    key <AD05> {  [  	0x100072C,	0x100073D,	Arabic_madda_above	]     };
    key <AD06> {  [  	0x100071D,	0x1000740,	Arabic_hamza_above	]     };
    key <AD07> {  [  	0x100071C,	0x1000741,	0x1000747		]     };
    key <AD08> {  [  	0x1000725,	0x1000308,	0x1000743		]     };
    key <AD09> {  [  	0x1000727,	0x1000304,	0x1000745		]     };
    key <AD10> {  [  	0x1000726,	0x1000307,	0x100032D		]     };
    key <AD11> {  [  	bracketright,	0x1000303				]     };
    key <AD12> {  [  	bracketleft,	0x100074A				]     };
    key <BKSL> {  [  	0x1000706,	colon					]     };

    key <AC01> {  [  	0x1000710,	0x1000731,	Arabic_kasra		]     };
    key <AC02> {  [  	0x1000723,	0x1000734,	Arabic_kasratan		]     };
    key <AC03> {  [  	0x1000715,	0x1000737				]     };
    key <AC04> {  [  	0x1000714,	0x100073B,	Arabic_hamza		]     };
    key <AC05> {  [  	0x1000713,	0x100073E,	Arabic_hamza_below	]     };
    key <AC06> {  [  	0x1000717,	0x1000711,	Arabic_superscript_alef	]     };
    key <AC07> {  [  	0x100071B,	Arabic_tatweel,	0x1000748		]     };
    key <AC08> {  [  	0x100071F,	0x1000324,	0x1000744		]     };
    key <AC09> {  [  	0x1000720,	0x1000331,	0x1000746		]     };
    key <AC10> {  [  	0x100071A,	0x1000323				]     };
    key <AC11> {  [  	0x100071E,	0x1000330				]     };

    key <SPCE> {  [  	space,		0x100200c				]     };
    key <AB01> {  [  	0x1000719,	0x1000732,	Arabic_sukun		]     };
    key <AB02> {  [  	0x1000728,	0x1000735				]     };
    key <AB03> {  [  	0x1000724,	0x1000738,	0x100200D		]     };
    key <AB04> {  [  	0x100072B,	0x100073C,	0x100200C		]     };
    key <AB05> {  [  	0x1000712,	0x100073F,	0x100200E		]     };
    key <AB06> {  [  	0x1000722,	0x1000739,	0x100200F		]     };
    key <AB07> {  [  	0x1000721,	0x1000742				]     };
    key <AB08> {  [  	0x1000700,	Arabic_comma				]     };
    key <AB09> {  [  	0x100002E,	Arabic_semicolon			]     };
    key <AB10> {  [  	0x1000707,	Arabic_question_mark			]     };

    modifier_map Shift  { Shift_L, Shift_R };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L, Control_R };
    modifier_map Mod1   { Alt_L, Alt_R };
    modifier_map Mod2   { Mode_switch };
};

partial alphanumeric_keys
xkb_symbols "ku" {
    include "tr(ku)"
    name[Group1]= "Kurdish (Syria, Latin Q)";
};

partial alphanumeric_keys
xkb_symbols "ku_f" {
    include "tr(ku_f)"
    name[Group1]= "Kurdish (Syria, F)";
};

partial alphanumeric_keys
xkb_symbols "ku_alt" {
    include "tr(ku_alt)"
    name[Group1]= "Kurdish (Syria, Latin Alt-Q)";
};
// based on a keyboard map from an 'xkb/symbols/dk' file

default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin(type2)"

    name[Group1]="Danish";

    key <AE11>	{ [      plus,   question,    plusminus, questiondown ]	};
    key <AE12>	{ [dead_acute, dead_grave,          bar,    brokenbar ]	};


    key <AC10>	{ [        ae,        AE,   dead_acute, dead_doubleacute ] };
    key <AC11>	{ [    oslash,  Ooblique, dead_circumflex, dead_caron ]	};
    key <TLDE>	{ [   onehalf,   section, threequarters,    paragraph ]	};

    key <BKSL>	{ [apostrophe,   asterisk, dead_doubleacute, multiply ]	};

    key <LSGT>	{ [      less,    greater,    backslash,      notsign ]	};

    include "kpdl(comma)"

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {

    include "dk(basic)"

    name[Group1]="Danish (no dead keys)";

    key <AE12>	{ [     acute,      grave,          bar,       ogonek ]	};
    key <AD11>	{ [     aring,      Aring,    diaeresis,       degree ]	};
    key <AD12>	{ [ diaeresis, asciicircum,  asciitilde,       macron ]	};
    key <AC10>	{ [        ae,         AE,        acute,  doubleacute ]	};
    key <AC11>	{ [    oslash,   Ooblique,  asciicircum,        caron ]	};
    key <BKSL>	{ [apostrophe,   asterisk,  doubleacute,     multiply ]	};
    key <AB08>	{ [     comma,  semicolon,      cedilla,       ogonek ]	};
    key <AB09>	{ [    period,      colon, periodcentered,   abovedot ]	};
};

partial alphanumeric_keys
xkb_symbols "winkeys" {

    include "dk(basic)"
    name[Group1] = "Danish (Windows)";
    include "eurosign(5)"
};

// Copied from macintosh_vndr/dk
partial alphanumeric_keys
xkb_symbols "mac" {

    include "dk"
    name[Group1]= "Danish (Macintosh)";

    key <SPCE>	{ [    space,       space, nobreakspace, nobreakspace ]	};
    key <AB10>	{ [    minus,  underscore,       hyphen,       macron ]	};
    include "kpdl(dot)"
};


partial alphanumeric_keys
xkb_symbols "mac_nodeadkeys" {
    include "dk(mac)"
    name[Group1]= "Danish (Macintosh, no dead keys)";

    key <AE12>	{ [    acute,       grave,          bar,       ogonek ]	};
    key <AD12>	{ [diaeresis, asciicircum,   asciitilde,  dead_macron ]	};
};

partial alphanumeric_keys
xkb_symbols "dvorak" {
    include "no(dvorak)"

    name[Group1]= "Danish (Dvorak)";
    key <AD12> { [  asciitilde, asciicircum, dead_diaeresis, dead_tilde ] };
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/dk(sun_type6)"
};
// Bosnian, Croatian, Serbian and Slovenian XKB keyboard mappings.
//
// Derived from "Danube" D.2 from 2003-05-12,
// which is available at http://srpski.org/dunav/.
//
// Original authors:
//  Danilo Segan (Данило Шеган) <danilo@kvota.net>
//  Chusslove Illich (Часлав Илић) <caslav.ilic@gmx.net>
//
// Danilo Segan <danilo@kvota.net>:
// - Modified for inclusion in XFree86.
// - Further modifications on 2005-08-18 to support Bosnian,
//   Croatian and Slovenian in xkeyboard-config.

default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]= "Serbian";

    include "rs(cyrlevel3)"
    include "rs(common)"
    include "rs(cyralpha)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "latin" {

    name[Group1]= "Serbian (Latin)";

    include "latin(type3)"
    include "rs(latalpha)"
    include "rs(latlevel3)"
    include "rs(common)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "yz" {

    include "rs(basic)"
    name[Group1]= "Serbian (Cyrillic, ZE and ZHE swapped)";

    key <AD06> { [ Cyrillic_zhe,    Cyrillic_ZHE ] }; // y
    key <AB01> { [ Cyrillic_ze,     Cyrillic_ZE  ] }; // z
};

hidden partial alphanumeric_keys
xkb_symbols "common" {
    // "Common" keys: keys that are the same
    // for both latin and cyrillic keyboards.

    key <TLDE> { [ grave,          asciitilde    ] };
    key <AE01> { [ 1,              exclam        ] };
    key <AE02> { [ 2,              quotedbl      ] };
    key <AE03> { [ 3,              numbersign    ] };
    key <AE04> { [ 4,              dollar        ] };
    key <AE05> { [ 5,              percent       ] };
    key <AE06> { [ 6,              ampersand     ] };
    key <AE07> { [ 7,              slash         ] };
    key <AE08> { [ 8,              parenleft     ] };
    key <AE09> { [ 9,              parenright    ] };
    key <AE10> { [ 0,              equal         ] };
    key <AE11> { [ apostrophe,     question      ] };
    key <AE12> { [ plus,           asterisk      ] };

    key <AB08> { [ comma,          semicolon     ] };
    key <AB09> { [ period,         colon         ] };
    key <AB10> { [ minus,          underscore    ] };

    include "kpdl(comma)"
};

hidden partial alphanumeric_keys
xkb_symbols "cyralpha" {

    key <AD01> { [ Cyrillic_lje,   Cyrillic_LJE  ] }; // q
    key <AD02> { [ Cyrillic_nje,   Cyrillic_NJE  ] }; // w
    key <AD03> { [ Cyrillic_ie,    Cyrillic_IE   ] }; // e
    key <AD04> { [ Cyrillic_er,    Cyrillic_ER   ] }; // r
    key <AD05> { [ Cyrillic_te,    Cyrillic_TE   ] }; // t
    key <AD06> { [ Cyrillic_ze,    Cyrillic_ZE   ] }; // y
    key <AD07> { [ Cyrillic_u,     Cyrillic_U    ] }; // u
    key <AD08> { [ Cyrillic_i,     Cyrillic_I    ] }; // i
    key <AD09> { [ Cyrillic_o,     Cyrillic_O    ] }; // o
    key <AD10> { [ Cyrillic_pe,    Cyrillic_PE   ] }; // p
    key <AD11> { [ Cyrillic_sha,   Cyrillic_SHA  ] }; // [ {
    key <AD12> { [ Serbian_dje,    Serbian_DJE   ] }; // ] }

    key <AC01> { [ Cyrillic_a,     Cyrillic_A    ] }; // a
    key <AC02> { [ Cyrillic_es,    Cyrillic_ES   ] }; // s
    key <AC03> { [ Cyrillic_de,    Cyrillic_DE   ] }; // d
    key <AC04> { [ Cyrillic_ef,    Cyrillic_EF   ] }; // f
    key <AC05> { [ Cyrillic_ghe,   Cyrillic_GHE  ] }; // g
    key <AC06> { [ Cyrillic_ha,    Cyrillic_HA   ] }; // h
    key <AC07> { [ Cyrillic_je,    Cyrillic_JE   ] }; // j
    key <AC08> { [ Cyrillic_ka,    Cyrillic_KA   ] }; // k
    key <AC09> { [ Cyrillic_el,    Cyrillic_EL   ] }; // l
    key <AC10> { [ Cyrillic_che,   Cyrillic_CHE  ] }; // ; :
    key <AC11> { [ Serbian_tshe,   Serbian_TSHE  ] }; // ' "
    key <BKSL> { [ Cyrillic_zhe,   Cyrillic_ZHE  ] }; // \ |

    key <AB01> { [ Cyrillic_zhe,   Cyrillic_ZHE  ] }; // z
    key <AB02> { [ Cyrillic_dzhe,  Cyrillic_DZHE ] }; // x
    key <AB03> { [ Cyrillic_tse,   Cyrillic_TSE  ] }; // c
    key <AB04> { [ Cyrillic_ve,    Cyrillic_VE   ] }; // v
    key <AB05> { [ Cyrillic_be,    Cyrillic_BE   ] }; // b
    key <AB06> { [ Cyrillic_en,    Cyrillic_EN   ] }; // n
    key <AB07> { [ Cyrillic_em,    Cyrillic_EM   ] }; // m
};


hidden partial alphanumeric_keys
xkb_symbols "latalpha" {

    key <AD11> { [ scaron,         Scaron        ] }; // [ {
    key <AD12> { [ dstroke,        Dstroke       ] }; // ] }

    key <AC10> { [ ccaron,         Ccaron        ] }; // ; :
    key <AC11> { [ cacute,         Cacute        ] }; // ' "
    key <BKSL> { [ zcaron,         Zcaron        ] }; // \ |
};

hidden partial alphanumeric_keys
xkb_symbols "twoletter" {

    // Letters which are written in latin transcription with two characters.
    key <AD01> { type[Group1] = "SEPARATE_CAPS_AND_SHIFT_ALPHABETIC",
               [ U1C9,           U1C8,          any, U1C7 ] }; // q
    key <AD02> { type[Group1] = "SEPARATE_CAPS_AND_SHIFT_ALPHABETIC",
               [ U1CC,           U1CB,          any, U1CA ] }; // w
    key <AB02> { type[Group1] = "SEPARATE_CAPS_AND_SHIFT_ALPHABETIC",
               [ U1C6,           U1C5,          any, U1C4 ] }; // x

    // Also replace letter Y with Zcaron, since Y is of no use any longer.
    key <AB01> { [ zcaron,         Zcaron        ] }; // z
};

hidden partial alphanumeric_keys
xkb_symbols "latlevel3" {
    key <TLDE> { [ any, any,   notsign,             notsign          ] }; // ` ~
    key <AE01> { [ any, any,   dead_tilde,          asciitilde       ] }; // 1 !
    key <AE02> { [ any, any,   dead_caron,          caron            ] }; // 2 @
    key <AE03> { [ any, any,   dead_circumflex,     asciicircum      ] }; // 3 #
    key <AE04> { [ any, any,   dead_breve,          breve            ] }; // 4 $
    key <AE05> { [ any, any,   dead_abovering,      degree           ] }; // 5 %
    key <AE06> { [ any, any,   dead_ogonek,         ogonek           ] }; // 6 ^
    key <AE07> { [ any, any,   dead_grave,          grave            ] }; // 7 &
    key <AE08> { [ any, any,   dead_abovedot,       abovedot         ] }; // 8 *
    key <AE09> { [ any, any,   dead_acute,          apostrophe       ] }; // 9 (
    key <AE10> { [ any, any,   dead_doubleacute,    doubleacute      ] }; // 0 )
    key <AE11> { [ any, any,   dead_diaeresis,      diaeresis        ] }; // - _
    key <AE12> { [ any, any,   dead_cedilla,        cedilla          ] }; // = +

    key <AD01> { [ any, any,   backslash,           Greek_OMEGA      ] }; // q
    key <AD02> { [ any, any,   bar,                 Lstroke          ] }; // w
    key <AD03> { [ any, any,   EuroSign,            EuroSign         ] }; // e
    key <AD04> { [ any, any,   paragraph,           registered       ] }; // r
    key <AD05> { type[Group1] = "FOUR_LEVEL_ALPHABETIC",
                 [ any, any,   tslash,              Tslash           ] }; // t
    key <AD06> { [ any, any,   leftarrow,           yen              ] }; // y
    key <AD07> { [ any, any,   downarrow,           uparrow          ] }; // u
    key <AD08> { [ any, any,   rightarrow,          idotless         ] }; // i
    key <AD09> { type[Group1] = "FOUR_LEVEL_ALPHABETIC",
                 [ any, any,   oslash,              Ooblique         ] }; // o
    key <AD10> { type[Group1] = "FOUR_LEVEL_ALPHABETIC",
                 [ any, any,   thorn,               THORN            ] }; // p
    key <AD11> { [ any, any,   division,            dead_abovering   ] }; // [
    key <AD12> { [ any, any,   multiply,            dead_macron      ] }; // ]

    key <AC01> { type[Group1] = "FOUR_LEVEL_ALPHABETIC",
                 [ any, any,   ae,                  AE               ] }; // a
    key <AC02> { [ any, any,   doublelowquotemark,  guillemotright   ] }; // s
    key <AC03> { [ any, any,   leftdoublequotemark, guillemotleft    ] }; // d
    key <AC04> { [ any, any,   bracketleft,         ordfeminine      ] }; // f
    key <AC05> { [ any, any,   bracketright,        ENG              ] }; // g
    key <AC06> { type[Group1] = "FOUR_LEVEL_ALPHABETIC",
                 [ any, any,   hstroke,             Hstroke          ] }; // h
    key <AC08> { [ any, any,   lstroke,             ampersand        ] }; // k
    key <AC09> { [ any, any,   lstroke,             Lstroke          ] }; // l
    key <AC10> { [ any, any,   dead_acute,          dead_doubleacute ] }; // ;
    key <AC11> { [ any, any,   ssharp,              dead_caron       ] }; // '
    key <BKSL> { [ any, any,   currency,            dead_breve       ] }; // \

    key <AB01> { [ any, any,   leftsinglequotemark, guillemotright   ] }; // z
    key <AB02> { [ any, any,   rightsinglequotemark,guillemotleft    ] }; // x
    key <AB03> { [ any, any,   cent,                copyright        ] }; // c
    key <AB04> { [ any, any,   at,                  grave            ] }; // v
    key <AB05> { [ any, any,   braceleft,           apostrophe       ] }; // b
    key <AB06> { [ any, any,   braceright,          braceright       ] }; // n
    key <AB07> { [ any, any,   section,             masculine        ] }; // m
    key <AB08> { [ any, any,   less,                multiply         ] }; // , <
    key <AB09> { [ any, any,   greater,             division         ] }; // . >
    key <AB10> { [ any, any,   emdash,              endash           ] }; // / ?
};

hidden partial alphanumeric_keys
xkb_symbols "cyrlevel3" {
    key <TLDE> { [ any, any,   degree,              notsign          ] }; // ` ~
    key <AE03> { [ any, any,   dead_circumflex                       ] }; // 3 #
    key <AE07> { [ any, any,   dead_grave                            ] }; // 7 &
    key <AE08> { [ any, any,   dead_doublegrave                      ] }; // 8 *
    key <AE09> { [ any, any,   dead_acute                            ] }; // 9 (
    key <AE10> { [ any, any,   dead_invertedbreve                    ] }; // 0 )
    key <AE11> { [ any, any,   dead_macron                           ] }; // - _

    key <AD01> { [ any, any,   backslash                             ] }; // q
    key <AD02> { [ any, any,   bar                                   ] }; // w
    key <AD03> { [ any, any,   EuroSign,            sterling         ] }; // e
    key <AD04> { [ any, any,   paragraph,           registered       ] }; // r
    key <AD05> { [ any, any,   ellipsis                              ] }; // t
    key <AD06> { [ any, any,   leftarrow,           yen              ] }; // y
    key <AD07> { [ any, any,   downarrow,           uparrow          ] }; // u
    key <AD08> { [ any, any,   rightarrow                            ] }; // i
    key <AD09> { [ any, any,   section                               ] }; // o
    key <AD11> { [ any, any,   division                              ] }; // [
    key <AD12> { [ any, any,   multiply                              ] }; // ]

    key <AC02> { [ any, any,   doublelowquotemark,  guillemotright   ] }; // s
    key <AC03> { [ any, any,   leftdoublequotemark, guillemotleft    ] }; // d
    key <AC04> { [ any, any,   bracketleft                           ] }; // f
    key <AC05> { [ any, any,   bracketright                          ] }; // g
    key <BKSL> { [ any, any,   currency                              ] }; // \

    key <AB01> { [ any, any,   leftsinglequotemark                   ] }; // z
    key <AB02> { [ any, any,   rightsinglequotemark                  ] }; // x
    key <AB03> { [ any, any,   cent,                copyright        ] }; // c
    key <AB04> { [ any, any,   at                                    ] }; // v
    key <AB05> { [ any, any,   braceleft                             ] }; // b
    key <AB06> { [ any, any,   braceright                            ] }; // n
    key <AB07> { [ any, any,   asciicircum                           ] }; // m
    key <AB08> { [ any, any,   less                                  ] }; // , <
    key <AB09> { [ any, any,   greater                               ] }; // . >
    key <AB10> { [ any, any,   emdash,              endash           ] }; // / ?
};

partial alphanumeric_keys
xkb_symbols "latinunicode" {
    // This mapping supports the Unicode characters 0x1c4-0x1cc (dz, lj, and nj
    // as single character). You get the title form with AltGr+Shift.

    include "rs(latin)"
    name[Group1]= "Serbian (Latin, Unicode)";

    include "rs(twoletter)"
};

partial alphanumeric_keys
xkb_symbols "latinyz" {
    // For those who insist on using "english-position" Z and Y.

    include "rs(latin)"
    name[Group1]= "Serbian (Latin, QWERTY)";

    key <AD06> { [ y,              Y             ] }; // y
    key <AB01> { [ z,              Z             ] }; // z
};

partial alphanumeric_keys
xkb_symbols "latinunicodeyz" {
    // Unicode, ZHE and Z swapped.

    include "rs(latinunicode)"
    name[Group1]= "Serbian (Latin, Unicode, QWERTY)";

    key <AD06> { [ zcaron,         Zcaron        ] }; // y
    key <AB01> { [ z,              Z             ] }; // z
};

xkb_symbols "alternatequotes" {
    // Another acceptable »pair of quotes« for Serbian.

    include "rs(basic)"
    name[Group1]= "Serbian (Cyrillic, with guillemets)";

    key <AC02> { [ any, any,   guillemotright    ] }; // s
    key <AC03> { [ any, any,   guillemotleft     ] }; // d
};

xkb_symbols "latinalternatequotes" {
    // Another acceptable »pair of quotes« for Serbian.

    include "rs(latin)"
    name[Group1]= "Serbian (Latin, with guillemets)";

    key <AC02> { [ any, any,   guillemotright    ] }; // s
    key <AC03> { [ any, any,   guillemotleft     ] }; // d
};

xkb_symbols "rue" {
    // Layout for Pannonian Rusyn (spoken mainly in Serbia and Croatia
    // by the Rusyn people), based on Serbian Cyrillic layout.
    // Authors:
    //   Ljubomir J. Papuga (Любомир Я. Папуґа) <papuga@zoho.com>
    //   Mihajlo Hornjak <smeceiotpad@gmail.com>

    include "rs(basic)"
    name[Group1]= "Pannonian Rusyn";

    key <TLDE> { [ Cyrillic_softsign,         Cyrillic_SOFTSIGN         ] }; // `

    key <AD01> { [ Cyrillic_ya,               Cyrillic_YA               ] }; // q
    key <AD02> { [ Ukrainian_ie,              Ukrainian_IE              ] }; // w
    key <AD12> { [ Cyrillic_shcha,            Cyrillic_SHCHA            ] }; // ]

    key <AC05> { [ Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] }; // g
    key <AC07> { [ Cyrillic_shorti,           Cyrillic_SHORTI           ] }; // j
    key <AC11> { [ Cyrillic_ghe,              Cyrillic_GHE              ] }; // '

    key <AB01> { [ Cyrillic_yu,               Cyrillic_YU               ] }; // z
    key <AB02> { [ Ukrainian_yi,              Ukrainian_YI              ] }; // x
};

// EXTRAS:

xkb_symbols "combiningkeys" {
    // Raw combining characters instead of dead keys,
    // especially good for post-accenting texts.

    include "rs(basic)"
    name[Group1]= "Serbian (combining accents instead of dead keys)";

    key <AE03> { [ any, any,   U0302, dead_circumflex ] }; // 3, U0302 = COMBINING CIRCUMFLEX ACCENT
    key <AE07> { [ any, any,   U0300                  ] }; // 7, U0300 = COMBINING GRAVE ACCENT
    key <AE08> { [ any, any,   U030F                  ] }; // 8, U030F = COMBINING DOUBLE GRAVE ACCENT
    key <AE09> { [ any, any,   U0301                  ] }; // 9, U0301 = COMBINING ACUTE ACCENT
    key <AE10> { [ any, any,   U0311                  ] }; // 0, U0311 = COMBINING INVERTED BREVE
    key <AE11> { [ any, any,   U0304                  ] }; // -, U0304 = COMBINING MACRON
};
default partial modifier_keys
xkb_symbols "ctrl_alt_bksp" {
    key <BKSP> {
        type="CTRL+ALT",
        symbols[Group1] = [ NoSymbol, NoSymbol, NoSymbol, NoSymbol, Terminate_Server ]
    };
};
// Uzbek standard keyboard
//
// Mashrab Kuvatov <kmashrab@uni-bremen.de>
//
// History:
//
// Jun 2, 2003. Mashrab Kuvatov <kmashrab@uni-bremen.de>
//
// Created based on the Russian standard keyboard. AEN <aen@logic.ru>
// The following symbols of the Russian standard keyboard were replaced:
// minus (key <AE11>) with Byelorussian_shortu (U045e),
// equal (key <AE12>) with Cyrillic_ka_descender (U049b),
// Cyrillic_ha (key <AD11>) with Cyrillic_ghe_bar (U0493),
// Cyrillic_hardsign (key <AD12>) with Cyrillic_ha_descender (U04b3).
// The following symbols of the Russian standard keyboard were moved:
// Cyrillic_ze       to key <AC02> (English 's'),
// Cyrillic_sha      to key <AD08> (English 'i'),
// Cyrillic_ha       to key <AD09> (English 'o'),
// Cyrillic_hardsign to key <AD10> (English 'p').
//
// Feb 25, 2007. Mashrab Kuvatov <kmashrab@uni-bremen.de>
//
// Made cyrillic and latin variants. Default is cyrillic.
// Cyrillic variant is standard compliant. The standard
// was accepted by the official body of Uzbekistan. See
// http://www.uznet.net/index.php?option=com_content&task=view&id=288&Itemid=58
//
// Latin variant is somewhat experimental, since there is no
// official standard for it. It is a copy of "us" layout, where
// apostrophe is replaced with U02BB.

default partial alphanumeric_keys
xkb_symbols "cyrillic" {

    name[Group1]= "Uzbek";

    key	<AE01> {	[		1,	    exclam	]	};
    key	<AE02> {	[		2,	  quotedbl	]	};
    key	<AE03> {	[		3,	numerosign	]	};
    key	<AE04> {	[		4,	 semicolon	]	};
    key	<AE05> {	[		5,	   percent	]	};
    key	<AE06> {	[		6,	     colon	]	};
    key	<AE07> {	[		7,	  question	]	};
    key	<AE08> {	[		8,	  asterisk	]	};
    key	<AE09> {	[		9,	 parenleft	]	};
    key	<AE10> {	[		0,	parenright	]	};
    key	<BKSL> {	[	backslash,	       bar	]	};
    key	<AB10> {	[	   period,	     comma	]	};
    key	<LSGT> {	[	    slash,	       bar	]	};

    key.type[group1]="ALPHABETIC";

    key	<AE11> {	[Cyrillic_ghe_bar, Cyrillic_GHE_bar	]	};
    key	<AE12> {	[Cyrillic_ha_descender, Cyrillic_HA_descender ]	};
    key	<TLDE> {	[     Cyrillic_io,     Cyrillic_IO	]	};
    key	<AD01> {	[ Cyrillic_shorti, Cyrillic_SHORTI	]	};
    key	<AD02> {	[    Cyrillic_tse,    Cyrillic_TSE	]	};
    key	<AD03> {	[      Cyrillic_u,      Cyrillic_U	]	};
    key	<AD04> {	[     Cyrillic_ka,     Cyrillic_KA	]	};
    key	<AD05> {	[     Cyrillic_ie,     Cyrillic_IE	]	};
    key	<AD06> {	[     Cyrillic_en,     Cyrillic_EN	]	};
    key	<AD07> {	[    Cyrillic_ghe,    Cyrillic_GHE	]	};
    key	<AD08> {	[    Cyrillic_sha,    Cyrillic_SHA	]	};
    key	<AD09> {	[ Byelorussian_shortu, Byelorussian_SHORTU ]	};
    key	<AD10> {	[     Cyrillic_ze,     Cyrillic_ZE	]	};
    key	<AD11> {	[     Cyrillic_ha,     Cyrillic_HA	]	};
    key	<AD12> {	[Cyrillic_hardsign, Cyrillic_HARDSIGN ]	};
    key	<AC01> {	[     Cyrillic_ef,     Cyrillic_EF	]	};
    key	<AC02> {	[Cyrillic_ka_descender, Cyrillic_KA_descender ]	};
    key	<AC03> {	[     Cyrillic_ve,     Cyrillic_VE	]	};
    key	<AC04> {	[      Cyrillic_a,      Cyrillic_A	]	};
    key	<AC05> {	[     Cyrillic_pe,     Cyrillic_PE	]	};
    key	<AC06> {	[     Cyrillic_er,     Cyrillic_ER	]	};
    key	<AC07> {	[      Cyrillic_o,      Cyrillic_O	]	};
    key	<AC08> {	[     Cyrillic_el,     Cyrillic_EL	]	};
    key	<AC09> {	[     Cyrillic_de,     Cyrillic_DE	]	};
    key	<AC10> {	[    Cyrillic_zhe,    Cyrillic_ZHE	]	};
    key	<AC11> {	[      Cyrillic_e,      Cyrillic_E	]	};
    key	<AB01> {	[     Cyrillic_ya,     Cyrillic_YA	]	};
    key	<AB02> {	[    Cyrillic_che,    Cyrillic_CHE	]	};
    key	<AB03> {	[     Cyrillic_es,     Cyrillic_ES	]	};
    key	<AB04> {	[     Cyrillic_em,     Cyrillic_EM	]	};
    key	<AB06> {	[     Cyrillic_te,     Cyrillic_TE	]	};
    key	<AB05> {	[      Cyrillic_i,      Cyrillic_I	]	};
    key	<AB07> {	[Cyrillic_softsign, Cyrillic_SOFTSIGN	]	};
    key	<AB08> {	[     Cyrillic_be,     Cyrillic_BE	]	};
    key	<AB09> {	[     Cyrillic_yu,     Cyrillic_YU	]	};
};

partial alphanumeric_keys
xkb_symbols "latin" {
    include "us"
    name[Group1]= "Uzbek (Latin)";
    key <AC11>  { [0x010002BB, quotedbl] };
};
// based on us_intl keyboard map file and a Sinhala keyboard map
// version 0.3

default partial alphanumeric_keys
xkb_symbols "basic" {

    name[Group1]= "French (Democratic Republic of the Congo)";

    key.type[Group1] = "FOUR_LEVEL";

    // GRAVE, TILDE, COMBINING TILDE
    key <TLDE> { [     grave, asciitilde, 0x01000303                      ] };
    key <AE01> { [ ampersand,          1, numbersign                      ] };
    key <AE02> { [0x01000301,          2, at                              ] };
    key <AE03> { [0x01000300,          3, guillemotleft                   ] };
    key <AE04> { [ parenleft,          4, bracketleft                     ] };
    key <AE05> { [ braceleft,          5, less                            ] };
    key <AE06> { [ braceright,         6, greater                         ] };
    key <AE07> { [parenright,          7, bracketright                    ] };
    key <AE08> { [0x01000302,          8, guillemotright                  ] };
    key <AE09> { [0x0100030c,          9, 0x0100030D                      ] };
    key <AE10> { [0x01000308,          0, at                              ] };
    key <AE11> { [     minus,      underscore,  percent,          degree  ] };
    key <AE12> { [     equal,      plus,       multiply,        division  ] };

    key <AD01> { [	   a,          A,            ae,              AE  ] };
    key <AD02> { [	   z,          Z                                  ] };
    key <AD03> { [	   e,          E,            oe,              OE  ] };
    key <AD04> { [	   r,          R                                  ] };
    key <AD05> { [	   t,          T                                  ] };
    key <AD06> { [	   y,          Y                                  ] };
    key <AD07> { [	   u,          U,    0x01000289,       0x01000244 ] };
    key <AD08> { [	   i,          I,    0x01000268,       0x01000197 ] };
    key <AD09> { [	   o,          O,        oslash,         Ooblique ] };
    key <AD10> { [	   p,          P                                  ] };
    key <AD11> { [0x0100025B, 0x01000190,   asciicircum                   ] };
    key <AD12> { [ asterisk, asciicircum,        dollar                   ] };

    key <AC01> { [	   q,          Q                                  ] };
    key <AC02> { [	   s,          S                                  ] };
    key <AC03> { [	   d,          D                                  ] };
    key <AC04> { [	   f,          F                                  ] };
    key <AC05> { [	   g,          G                                  ] };
    key <AC06> { [	   h,          H                                  ] };
    key <AC07> { [	   j,          J                                  ] };
    key <AC08> { [	   k,          K                                  ] };
    key <AC09> { [	   l,          L                                  ] };
    key <AC10> { [	   m,          M                                  ] };
    key <AC11> { [0x01000254, 0x01000186                                  ] };
    key <LSGT> { [    backslash,     bar                                  ] };

    key <AB01> { [	   w,          W                                  ] };
    key <AB02> { [	   x,          X                                  ] };
    key <AB03> { [	   c,          C                                  ] };
    key <AB04> { [	   v,          V                                  ] };
    key <AB05> { [	   b,          B                                  ] };
    key <AB06> { [	   n,          N,    0x0100014B,       0x0100014A ] };
    key <AB07> { [     comma,   question,    0x01000327                   ] };
    key <AB08> { [ semicolon,     period                                  ] };
    key <AB09> { [     colon,      slash                                  ] };
    key <AB10> { [    exclam,   apostrophe,  0x01002019                   ] };
    key <BKSL> { [  quotedbl,  backslash,           bar                   ] };

    // SPACE, SPACE, NO-BREAK SPACE, NARROW NO_BREAK SPACE
    key <SPCE> { [ space,          space,    nobreakspace,     0x0100202F ] };

    include "level3(ralt_switch)"
};
default partial alphanumeric_keys
xkb_symbols "basic" {
    name[Group1]= "Burmese";

    key <TLDE> { [      U1050,      U100E,        grave,  asciitilde ] };
    key <AE01> { [      U1041,      U100D,            1,      exclam ] };
    key <AE02> { [      U1042,      U1052,            2,          at ] };
    key <AE03> { [      U1043,      U100B,            3,  numbersign ] };
    key <AE04> { [      U1044,      U1053,            4,      dollar ] };
    key <AE05> { [      U1045,      U1054,            5,     percent ] };
    key <AE06> { [      U1046,      U1055,            6, asciicircum ] };
    key <AE07> { [      U1047,      U101B,            7,   ampersand ] };
    key <AE08> { [      U1048,   asterisk,            8,    asterisk ] };
    key <AE09> { [      U1049,  parenleft,            9,   parenleft ] };
    key <AE10> { [      U1040, parenright,            0,  parenright ] };
    key <AE11> { [      minus, underscore,        minus,  underscore ] };
    key <AE12> { [      equal,       plus,        equal,        plus ] };

    key <AD01> { [      U1006,      U1008,            q,           Q ] };
    key <AD02> { [      U1010,      U101D,            w,           W ] };
    key <AD03> { [      U1014,      U1023,            e,           E ] };
    key <AD04> { [      U1019,      U104E,            r,           R ] };
    key <AD05> { [      U1021,      U1024,            t,           T ] };
    key <AD06> { [      U1015,      U104C,            y,           Y ] };
    key <AD07> { [      U1000,      U1025,            u,           U ] };
    key <AD08> { [      U1004,      U104D,            i,           I ] };
    key <AD09> { [      U101E,      U103F,            o,           O ] };
    key <AD10> { [      U1005,      U100F,            p,           P ] };
    key <AD11> { [      U101F,      U1027,  bracketleft,   braceleft ] };
    key <AD12> { [      U1029,      U102A, bracketright,  braceright ] };

    key <AC01> { [      U1031,      U1017,            a,           A ] };
    key <AC02> { [      U103B,      U103E,            s,           S ] };
    key <AC03> { [      U102D,      U102E,            d,           D ] };
    key <AC04> { [      U103A,      U1039,            f,           F ] };
    key <AC05> { [      U102B,      U103D,            g,           G ] };
    key <AC06> { [      U1037,      U1036,            h,           H ] };
    key <AC07> { [      U103C,      U1032,            j,           J ] };
    key <AC08> { [      U102F,      U1012,            k,           K ] };
    key <AC09> { [      U1030,      U1013,            l,           L ] };
    key <AC10> { [      U1038,      U1002,    semicolon,       colon ] };
    key <AC11> { [ apostrophe,    quotedbl                           ] };

    key <AB01> { [      U1016,       U1007,           z,           Z ] };
    key <AB02> { [      U1011,       U100C,           x,           X ] };
    key <AB03> { [      U1001,       U1003,           c,           C ] };
    key <AB04> { [      U101C,       U1020,           v,           V ] };
    key <AB05> { [      U1018,       U101A,           b,           B ] };
    key <AB06> { [      U100A,       U1009,           n,           N ] };
    key <AB07> { [      U102C,       U1026,           m,           M ] };
    key <AB08> { [      comma,        U104A,      comma,        less ] };
    key <AB09> { [     period,        U104B,     period,     greater ] };
    key <AB10> { [      slash,    question                           ] };

    key <BKSL> { [      U104F,       U1051,   backslash,         bar ] };
};

partial alphanumeric_keys
xkb_symbols "zawgyi" {

	name[Group1]="Burmese Zawgyi";
	include "level3(ralt_switch)"

	key <AE01> { [ U1041, U100D, U100E, U106F ] };
	key <AE02> { [ U1042, U1091, U106D ] };
	key <AE03> { [ U1043, U100B, U106C ] };
	key <AE04> { [ U1044, dollar, U104E, U1023 ] };
	key <AE05> { [ U1045, percent, U1029, U102A ] };
	key <AE06> { [ U1046, asciicircum ] };
	key <AE07> { [ U1047, U101B, U1090 ] };
	key <AE08> { [ U1048, U1002, U1062 ] };
	key <AE09> { [ U1049, parenleft, U1026 ] };
	key <AE10> { [ U1040, parenright ] };
	key <AE11> { [ minus, underscore, U1097 ] };
	key <AE12> { [ equal, plus, U106E ] };

	key <AD01> { [ U1006, U103D, U1066, U1067 ] };
	key <AD02> { [ U1010, U107D, U1071, U1072 ] };
	key <AD03> { [ U1014, U108F, U1077, U1096 ] };
	key <AD04> { [ U1019, U107D, U107C ] };
	key <AD05> { [ U1021, U108A, U1024 ] };
	key <AD06> { [ U1015, U1094, U1078, U104C ] };
	key <AD07> { [ U1000, U1095, U1060, U1009 ] };
	key <AD08> { [ U1004, U1088, U104D, U106A ] };
	key <AD09> { [ U101E, U1025, U1086 ] };
	key <AD10> { [ U1005, U100F, U1065, U1070 ] };
	key <AD11> { [ U101F, U1027 ] };
	key <AD12> { [ U104F, U1092 ] };

	key <AC01> { [ U1031, U1017, U1008, U107A ] };
	key <AC02> { [ U103A, U103D ] };
	key <AC03> { [ U102D, U102E, U108E, U108C ] };
	key <AC04> { [ U1039, U1064 ] };
	key <AC05> { [ U102B, U103C ] };
	key <AC06> { [ U1037, U1036 ] };
	key <AC07> { [ U103B, U1032, U1083, U1084 ] };
	key <AC08> { [ U102F, U1033, U1089 ] };
	key <AC09> { [ U1030, U1034, U108D, U108B ] };
	key <AC10> { [ U1038, U105A ] };
	key <AC11> { [ U1012, U1013, U1075, U1076 ] };

	key <AB01> { [ U1016, U1007, U1079, U1068 ] };
	key <AB02> { [ U1011, U100C, U1073, U1074 ] };
	key <AB03> { [ U1001, U1003, U1061, U1063 ] };
	key <AB04> { [ U101C, U1020, U1085 ] };
	key <AB05> { [ U1018, U1080, U1093 ] };
	key <AB06> { [ U100A, U107F, U106B, U1069 ] };
	key <AB07> { [ U102C, U107E, U1081, U1082 ] };
	key <AB08> { [ U101A, U101D ] };
	key <AB09> { [ period, U1008 ] };
	key <AB10> { [ U104B, U104A ] };

	key <BKSL> { [ U104F, U1092 ] };

	include "mm(tilde_switch)"
};

// The following code creates the "Tilde key" phenomenon.

partial modifier_keys
xkb_symbols "tilde_switch" {
	key <TLDE> {
	symbols[Group1] = [ ISO_Level3_Latch,	asciitilde,	grave ]
	};
	modifier_map Mod5	{ ISO_Level3_Latch };
};
default partial alphanumeric_keys
xkb_symbols "tw" {

    include "us(basic)"

    name[Group1]= "Taiwanese";

    key <TLDE> { [     grave, asciitilde,    dead_grave,       dead_tilde ] };
    key <AE01> { [	   1,     exclam,         U030D,       exclamdown ] };
    key <AE02> { [	   2,         at,         U0358,      twosuperior ] };
    key <AE03> { [	   3, numbersign,       section,    threesuperior ] };
    key <AE04> { [	   4,     dollar,           yen,         sterling ] };
    key <AE05> { [	   5,    percent,      EuroSign,             cent ] };
    key <AE06> { [         6,asciicircum, dead_circumflex,     dead_caron ] };
    key <AE07> { [	   7,  ampersand,    dead_acute,         NoSymbol ] };
    key <AE08> { [	   8,   asterisk,  dead_cedilla,        dead_horn ] };
    key <AE09> { [	   9,  parenleft,   dead_ogonek,       dead_breve ] };
    key <AE10> { [	   0, parenright, dead_abovedot,   dead_abovering ] };
    key <AE11> { [     minus, underscore,   dead_macron,        plusminus ] };
    key <AE12> { [     equal,       plus,      multiply,         division ] };

    key <AD01> { [	   q,          Q,     paragraph,           degree ] };
    key <AD03> { [	   e,          E,        eacute,           Eacute ] };
    key <AD04> { [	   r,          R,         U1E5F,            U1E5E ] };
    key <AD05> { [	   t,          T,         U1E6F,            U1E6E ] };
    key <AD06> { [	   y,          Y,         U1E73,            U1E72 ] };
    key <AD07> { [	   u,          U,         U0289,            U0244 ] };
    key <AD08> { [	   i,          I,         U0268,            U0197 ] };
    key <AD09> { [	   o,          O,        oslash,         Ooblique ] };

    key <AC02> { [	   s,          S,        ssharp,            U1E9E ] };
    key <AC03> { [	   d,          D,         U1E0F,            U1E0E ] };
    key <AC05> { [	   g,          G,           eng,              ENG ] };
    key <AC09> { [         l,          L,         U1E3B,            U1E3A ] };
    key <AC10> { [ semicolon,      colon,         U02D0,   dead_diaeresis ] };
    key <AC11> { [apostrophe,   quotedbl,         U02BC, dead_doubleacute ] };

    key <AB03> { [	   c,          C,      ccedilla,         Ccedilla ] };
    key <AB06> { [	   n,          N,         U207F,            U1D3A ] };
    key <AB07> { [	   m,          M,            mu,               mu ] };
    key <AB08> { [     comma,       less, dead_belowcomma,  guillemotleft ] };
    key <AB09> { [    period,    greater, dead_belowdot,   guillemotright ] };
    key <AB10> { [     slash,   question,  questiondown,        dead_hook ] };
    key <BKSL> { [ backslash,        bar,       notsign,        brokenbar ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "indigenous" {

    include "tw(tw)"

    name[Group1]= "Taiwanese (indigenous)";

    key <AC11> { [     U02BC,   quotedbl,    apostrophe, dead_doubleacute ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "saisiyat" {

    include "tw(indigenous)"

    name[Group1]= "Saisiyat (Taiwan)";

    key <AC10> { [     U02D0,      colon,     semicolon,   dead_diaeresis ] };

    include "level3(ralt_switch)"
};

// EXTRAS:

partial alphanumeric_keys
	xkb_symbols "sun_type6" {
	include "sun_vndr/tw(sun_type6)"
};
default partial alphanumeric_keys
xkb_symbols "ipa" {

      name[Group1]="International Phonetic Alphabet";      // also serves extIPA and orientalistic conversions
      key.type[Group1]="EIGHT_LEVEL";

//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\
    key <TLDE> {[    grave, asciitilde,      minutes,               seconds,                U2053,                   NoSymbol,                U2015, asciicircum ]};   // ` ~ ′ ″ SwungDash QuotDash ^
    key <AE01> {[        1,     exclam,      onesuperior,           exclamdown,             U02E5,                   U030B,                   NoSymbol, NoSymbol ]};   // 1 ! ¹ ¡ ˥ ̋◌┎────┒
    key <AE02> {[        2,   quotedbl,      twosuperior,           oneeighth,              U02E6,                   U0301,                   U25CB,    U20DD    ]};   // 2 " ² ⅛ ˦ ́◌┃○ ⃝ ┃
    key <AE03> {[        3,    section,      threesuperior,         sterling,               U02E7,                   U0304,                   NoSymbol, U0348    ]};   // 3 § ³ £ ˧ ̄◌┖─┒◌͆ ┃
    key <AE04> {[        4,     dollar,      onequarter,            currency,               U02E8,                   U0300,                   NoSymbol, U032A    ]};   // 4 $ ¼ ¤ ˨ ̀◌  ┃̪◌ ┃
    key <AE05> {[        5,    percent,      U0331,                 threeeighths,           U02E9,                   U030F,                   NoSymbol, U0347    ]};   // 5 % ̱◌ ⅜ ˩ ̏◌  ┃◌͇ ┃
    key <AE06> {[        6,  ampersand,      U032E,                 fiveeighths,            U0323,                   U0311,                   NoSymbol, U02EC    ]};   // 6 & ̮◌ ⅝ ̣◌ ̑◌  ┃ˬ ┃
    key <AE07> {[        7,      slash,      braceleft,             seveneighths,           U0307,                   U0313,                   NoSymbol, U02ED    ]};   // 7 / { ⅞ ̇◌ ̓◌  ┃˭ ┃  Disordered
    key <AE08> {[        8,  parenleft,      bracketleft,           U2E28,                  U27E8,                   U032D,                   U27EA,    U0354    ]};   // 8 ( [ ⸨ ⟨ ̭◌ ⟪┃◌͔┃  Speech
    key <AE09> {[        9, parenright,      bracketright,          U2E29,                  U27E9,                   NoSymbol,                U27EB,    U0355    ]};   // 9 ) ] ⸩ ⟩   ⟫┃◌͕┃
    key <AE10> {[        0,      equal,      braceright,            degree,                 U02BE,                   notequal,                U2248,    U034E    ]};   // 0 = } ° ʾ ≠ ≈┃◌͎ ┃
                                                                                                                                                                       //              ┃  ┃
    key <AE11> {[    U0294,   question,      backslash,             questiondown,           U0295,                   U02A1,                   U02A2,    U0362    ]};   // ʔ ? \ ¿ ʕ ʡ ʢ┃◌‌͢◌┃
                                                                                                                                                                       //          ┎───┚  ┃
    key <AE12> {[    U2197,      U2198,      UA71C,                 UA71B,                  U02BF,                   asterisk,                U2193,    U2191    ]};   // ↗ ↘ ꜜ ꜛ ʿ┃* ↓ ↑ ┃
//─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────//──────────┸──────┸───────────────\\
    key <AD01> {[        q,      U025C,      at,                    Greek_OMEGA,            U02DE,                   NoSymbol,                U20BD,    Q        ]};   // q ɜ @ Ω ˞   ₽ Q
    key <AD02> {[        w,      U028D,      U0270,                 NoSymbol,               U026F,                   NoSymbol,                U031D,    W        ]};   // w ʍ ɰ   ɯ   ̝◌ W
    key <AD03> {[        e,      schwa,      U025B,                 U025C,                  U0258,                   NoSymbol,                EuroSign, E        ]};   // e ə ɛ ɜ ɘ   € E
    key <AD04> {[        r,      U027E,      U0281,                 U0280,                  U0279,                   U027B,                   U027D,    R        ]};   // r ɾ ʁ ʀ ɹ ɻ ɽ R
    key <AD05> {[        t,Greek_theta,      U0288,                 NoSymbol,               U01C0,                   U01C1,                   U01C2,    T        ]};   // t θ ʈ   ǀ ǁ ǂ T
    key <AD06> {[        z,      U0292,      U0291,                 U0293,                  U0290,                   U026E,                   U261C,    Z        ]};   // z ʒ ʑ ʓ ʐ ɮ ☜ Z
    key <AD07> {[        u,      U028A,      U0289,                 U028C,                  U025E,                   U02AA,                   U261D,    U        ]};   // u ʊ ʉ ʌ ɞ ʪ ☝ U
    key <AD08> {[        i,      U026A,      U0268,                 U0264,                  U0275,                   U02AB,                   U261F,    I        ]};   // i ɪ ɨ ɤ ɵ ʫ ☟ I
    key <AD09> {[        o,      U0254,      oslash,                oe,                     U032A,                   U025E,                   U261E,    O        ]};   // o ɔ ø œ ̪◌ ɞ ☞ O
    key <AD10> {[        p,      U0303,      U031F,                 U2038,                  U033A,                   NoSymbol,                U1D513,   P        ]};   // p ̃◌ ̟◌ ‸ ̻̺◌   𝔓  P
                                                                                                                                                                       //              ┎─┒
    key <AD11> {[    U02E4,      U0330,      U0308,                 U033D,                  U033B,                   U02C0,                   U02C1,    U02AC    ]};   // ˤ ̰◌ ̈◌ ̽◌ ̻◌ ˀ ˁ┃ʬ┃
    key <AD12> {[    U02D0,      U02D1,      U0320,                 U0304,                  U033C,                   NoSymbol,                NoSymbol, U02AD    ]};   // ː ˑ ̠◌ ̄◌ ̼◌    ┃ʭ┃
//─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────//──────────────┸─┸────────────────\\
    key <AC01> {[        a,      U0251,      ae,                    U0252,                  U0250,                   U0276,                   U031E,    A        ]};   // a ɑ æ ɒ ɐ ɶ ̞◌ A
    key <AC02> {[        s,      U0283,      NoSymbol,              U0286,                  U0282,                   U031C,                   U0318,    S        ]};   // s ʃ   ʆ ʂ ̜◌ ̘◌ S
    key <AC03> {[        d,        eth,      U0256,                 U0257,                  U1D91,                   U0339,                   U0319,    D        ]};   // d ð ɖ ɗ ᶑ ̹◌ ̙◌ D
                                                                                                                                                                       //            ┎─┒
    key <AC04> {[        f,      U0278,      NoSymbol,              NoSymbol,               NoSymbol,                NoSymbol,                U02A9,    F        ]};   // f ɸ        ┃ʩ┃F
                                                                                                                                                                       //            ┖─┚
    key <AC05> {[        g,      U0263,      U0262,                 U0260,                  U029B,                   U0261,                   U20B8,    G        ]};   // g ɣ ɢ ɠ ʛ ɡ ₸ G
    key <AC06> {[        h,      U0266,      U0267,                 U029C,                  hstroke,                 NoSymbol,                U20B4,    H        ]};   // h ɦ ɧ ʜ ħ   ₴ H
    key <AC07> {[        j,      U029D,      U025F,                 U0284,                  NoSymbol,                NoSymbol,                NoSymbol, J        ]};   // j ʝ ɟ ʄ       J
    key <AC08> {[        k,      U02B0,      U02B1,                 U029E,                  NoSymbol,                UA78E,                   U2113,    K        ]};   // k ʰ ʱ ʞ   ꞎ ℓ K
    key <AC09> {[        l,      U028E,      U026B,                 U026C,                  U029F,                   U026D,                   U027A,    L        ]};   // l ʎ ɫ ɬ ʟ ɭ ɺ L
                                                                                                                                                                       //            ┎────┒
    key <AC10> {[    U02B2,      U02B7,      U02E0,                 U02B8,                  U207F,                   U02E1,                   U034C,    U034D    ]};   // ʲ ʷ ˠ ʸ ⁿ ˡ┃◌͌ ◌͍ ┃  Disordered
    key <AC11> {[    U032F,      U0325,      U032C,                 U030C,                  U031A,                   U0327,                   U034B,    U0348    ]};   // ̯◌ ̥◌ ̬◌ ̌◌◌̚ ̧◌┃◌͋ ◌͈ ┃  Speech
    key <BKSL> {[    U0329,      U02C8,      U02CC,                 U0306,                  U02BC,                   U0328,                   U034A,    U0349    ]};   // ̩◌ ˈ ˌ ̆◌ ʼ ̨◌┃◌͊ ◌‌͉┃
//─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────//────────────┸────┸───────────────\\
    key <LSGT> {[      bar,      U2016,      U203F,                 U035C,                  U0361,                   NoSymbol,                NoSymbol, NoSymbol ]};   // | ‖ ‿ ◌͜◌ ◌͡◌
    key <AB01> {[        y,      U028F,      guillemotright,        U203A,                  U0265,                   NoSymbol,                U0287,    Y        ]};   // y ʏ » › ɥ   ʇ Y
    key <AB02> {[        x,  Greek_chi,      guillemotleft,         U2039,                  UA725,                   UA724,                   U0297,    X        ]};   // x χ « ‹ ꜥ Ꜥ ʗ X
    key <AB03> {[        c,   ccedilla,      U0255,                 U023C,                  UA723,                   UA722,                   U0296,    C        ]};   // c ç ɕ ȼ ꜣ Ꜣ ʖ C
    key <AB04> {[        v,      U028B,      U2C71,                 U0274,                  doublelowquotemark,      singlelowquotemark,      NoSymbol, V        ]};   // v ʋ ⱱ ɴ „ ‚   V
    key <AB05> {[        b, Greek_beta,      U0299,                 U0253,                  leftdoublequotemark,     leftsinglequotemark,     U0298,    B        ]};   // b β ʙ ɓ “ ‘ ʘ B
    key <AB06> {[        n,        eng,      U0272,                 U0273,                  rightdoublequotemark,    rightsinglequotemark,    U01C3,    N        ]};   // n ŋ ɲ ɳ ” ’ ǃ N
    key <AB07> {[        m,      U0271,      mu,                    U22C5,                  U0298,                   U01C3,                   U20BC,    M        ]};   // m ɱ µ ⋅ ʘ ǃ ₼ M
    key <AB08> {[    comma,  semicolon,      periodcentered,        multiply,               U2020,                   U2021,                   NoSymbol, NoSymbol ]};   // , ; · × † ‡
    key <AB09> {[   period,      colon,      ellipsis,              division,               enfilledcircbullet,      NoSymbol,                NoSymbol, NoSymbol ]};   // . : … ÷ •
    key <AB10> {[    minus, underscore,      endash,                emdash,                 U2011,                   U00AD,                   U2010,    U2212    ]};   // - _ – — NoBrHyphen SHy Hy Minus
//━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\
                                                                                                              //│\\
// Makes <KPDL> return comma instead of dot, as the comma is decimal separator outside the English dominions  //🏵\\
                include "kpdl(comma)"                                                                         //│\\
                                                                                                              //│\\
// Maps Right Alt for reaching the third level                                                                //🏵\\
                include "level3(ralt_switch)"                                                                 //│\\
                                                                                                              //│\\
// Maps <CAPS> for reaching the fifth level                                                                   //🏵\\
                include "level5(caps_switch)"                                                                 //│\\
                                                                                                              //🏵\\
// Offers pressing both shift keys for capslock                                                               //│\\
                include "shift(both_shiftlock)"                                                               //│\\🏵
                                                                                                              //│\│╱🌿
//──────────────────────────────────────────────────────────────────────────────────────────────────────────────┴─┘˝˝

// Note about a bug in XKB: One has to set lv5:rwin_switch_lock or one of the other level 5 locks for the caps switch to work!
// https://bugs.freedesktop.org/show_bug.cgi?id=102189
};
// Maltese keyboard map (based on MSA Standard DMS100)
// by Ramon Casha (ramon.casha@linux.org.mt)

default partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin"

    name[Group1]="Maltese";

    // Copied from GB layout
    key <AE02> { [         2,   quotedbl,  twosuperior,    oneeighth ] };
    key <AE04> { [         4,     dollar,     EuroSign,   onequarter ] };
    key <AC11> { [apostrophe,         at, dead_circumflex, dead_caron] };
    key <BKSL> { [numbersign, asciitilde,   dead_grave,   dead_breve ] };

    // The following four sets are the four additional letters, with the UK
    // equivalents
    key <TLDE>	{ [ cabovedot,  Cabovedot,        grave,      notsign ]	};
    key <AD11>	{ [ gabovedot,  Gabovedot,  bracketleft,    braceleft ]	};
    key <AD12>	{ [   hstroke,    Hstroke, bracketright,   braceright ]	};
    key <LSGT>	{ [ zabovedot,  Zabovedot,    backslash,          bar ]	};

    // Euro symbol
    key <AE03>	{ [         3,   EuroSign,     sterling               ]	};

    // Long accent
    key <AE06>	{ [         6, asciicircum, dead_circumflex, dead_circumflex ]	};

    // Normal accented vowels
    key <AD03>	{ [         e,          E,       egrave,       Egrave ]	};
    key <AD07>	{ [         u,          U,       ugrave,       Ugrave ]	};
    key <AD08>	{ [         i,          I,       igrave,       Igrave ]	};
    key <AD09>	{ [         o,          O,       ograve,       Ograve ]	};
    key <AC01>	{ [         a,          A,       agrave,       Agrave ]	};

    include "level3(ralt_switch)"
};

// Maltese keyboard map (based on MSA Standard DMS100, annex A)
// by Ramon Casha (ramon.casha@linux.org.mt)

partial alphanumeric_keys
xkb_symbols "us" {

    include "latin"

    // Describes the differences between the mt
    // keyboard and a US-based physical keyboard

    name[Group1]="Maltese (US)";

    // The following four sets are the four additional letters, with the US
    // equivalents
    key <TLDE>	{ [ cabovedot,  Cabovedot,        grave,   asciitilde ]	};
    key <AD11>	{ [ gabovedot,  Gabovedot,  bracketleft,    braceleft ]	};
    key <AD12>	{ [   hstroke,    Hstroke, bracketright,   braceright ]	};
    key <LSGT>	{ [ zabovedot,  Zabovedot,    backslash,          bar ]	};
    key <BKSL>	{ [ zabovedot,  Zabovedot,    backslash,          bar ]	};

    // Euro symbol
    key <AE03>	{ [         3,   EuroSign,     numbersign             ]	};

    // Long accent
    key <AE06>	{ [         6, asciicircum, dead_circumflex, dead_circumflex ]	};

    // Normal accented vowels
    key <AD03>	{ [         e,          E,       egrave,       Egrave ]	};
    key <AD07>	{ [         u,          U,       ugrave,       Ugrave ]	};
    key <AD08>	{ [         i,          I,       igrave,       Igrave ]	};
    key <AD09>	{ [         o,          O,       ograve,       Ograve ]	};
    key <AC01>	{ [         a,          A,       agrave,       Agrave ]	};

    include "level3(ralt_switch)"
};

// Alternative Maltese keyboard map (US-based layout using AltGr)
// by Johann A. Briffa (johann.briffa@um.edu.mt)

partial alphanumeric_keys
xkb_symbols "alt-us" {

    include "us(basic)"
    include "level3(ralt_switch)"

    name[Group1]="Maltese (US layout with AltGr overrides)";

    // Currency symbols
    key <AE03>  { [         3,  numbersign,    sterling,     NoSymbol ] };
    key <AE04>  { [         4,     dollar,     EuroSign,     NoSymbol ] };

    // Maltese characters
    key <AC05>  { [         g,          G,    gabovedot,    Gabovedot ] };
    key <AC06>  { [         h,          H,      hstroke,      Hstroke ] };
    key <AB01>  { [         z,          Z,    zabovedot,    Zabovedot ] };
    key <AB03>  { [         c,          C,    cabovedot,    Cabovedot ] };

    // Maltese accented vowels
    key <AD03>  { [         e,          E,       egrave,       Egrave ] };
    key <AD07>  { [         u,          U,       ugrave,       Ugrave ] };
    key <AD08>  { [         i,          I,       igrave,       Igrave ] };
    key <AD09>  { [         o,          O,       ograve,       Ograve ] };
    key <AC01>  { [         a,          A,       agrave,       Agrave ] };

    // Other accents (dead-key)
    key <TLDE>  { [     grave,  asciitilde,  dead_grave,   dead_tilde ] };
    key <AE06>  { [         6, asciicircum,    NoSymbol, dead_circumflex ] };
    key <AC11>  { [ apostrophe,   quotedbl,  dead_acute, dead_diaeresis ] };
};

// Alternative Maltese keyboard map (UK-based layout using AltGr)
// by Johann A. Briffa (johann.briffa@um.edu.mt)

partial alphanumeric_keys
xkb_symbols "alt-gb" {

    include "gb(basic)"
    include "level3(ralt_switch)"

    name[Group1]="Maltese (UK, with AltGr overrides)";

    // Currency symbols
    key <AE03>  { [         3,   sterling,   numbersign,     NoSymbol ] };
    key <AE04>  { [         4,     dollar,     EuroSign,     NoSymbol ] };

    // Maltese characters
    key <AC05>  { [         g,          G,    gabovedot,    Gabovedot ] };
    key <AC06>  { [         h,          H,      hstroke,      Hstroke ] };
    key <AB01>  { [         z,          Z,    zabovedot,    Zabovedot ] };
    key <AB03>  { [         c,          C,    cabovedot,    Cabovedot ] };

    // Maltese accented vowels
    key <AD03>  { [         e,          E,       egrave,       Egrave ] };
    key <AD07>  { [         u,          U,       ugrave,       Ugrave ] };
    key <AD08>  { [         i,          I,       igrave,       Igrave ] };
    key <AD09>  { [         o,          O,       ograve,       Ograve ] };
    key <AC01>  { [         a,          A,       agrave,       Agrave ] };

    // Other accents (dead-key)
    key <TLDE>  { [     grave,     notsign,  dead_grave,     NoSymbol ] };
    key <AE02>  { [         2,    quotedbl,    NoSymbol, dead_diaeresis ] };
    key <AE06>  { [         6, asciicircum,    NoSymbol, dead_circumflex ] };
    key <AC11>  { [ apostrophe,         at,  dead_acute,     NoSymbol ] };
    key <BKSL>  { [numbersign,  asciitilde,    NoSymbol,   dead_tilde ] };
};

// Alternative Maltese keyboard map (US-based layout using AltGr)
// by Johann A. Briffa (johann.briffa@um.edu.mt)

partial alphanumeric_keys
xkb_symbols "alt-us" {

    include "us(basic)"
    include "level3(ralt_switch)"

    name[Group1]="Maltese (US layout with AltGr overrides)";

    // Currency symbols
    key <AE03>  { [         3,  numbersign,    sterling,     NoSymbol ] };
    key <AE04>  { [         4,     dollar,     EuroSign,     NoSymbol ] };

    // Maltese characters
    key <AC05>  { [         g,          G,    gabovedot,    Gabovedot ] };
    key <AC06>  { [         h,          H,      hstroke,      Hstroke ] };
    key <AB01>  { [         z,          Z,    zabovedot,    Zabovedot ] };
    key <AB03>  { [         c,          C,    cabovedot,    Cabovedot ] };

    // Maltese accented vowels
    key <AD03>  { [         e,          E,       egrave,       Egrave ] };
    key <AD07>  { [         u,          U,       ugrave,       Ugrave ] };
    key <AD08>  { [         i,          I,       igrave,       Igrave ] };
    key <AD09>  { [         o,          O,       ograve,       Ograve ] };
    key <AC01>  { [         a,          A,       agrave,       Agrave ] };

    // Other accents (dead-key)
    key <TLDE>  { [     grave,  asciitilde,  dead_grave,   dead_tilde ] };
    key <AE06>  { [         6, asciicircum,    NoSymbol, dead_circumflex ] };
    key <AC11>  { [ apostrophe,   quotedbl,  dead_acute, dead_diaeresis ] };
};

// Alternative Maltese keyboard map (UK-based layout using AltGr)
// by Johann A. Briffa (johann.briffa@um.edu.mt)

partial alphanumeric_keys
xkb_symbols "alt-gb" {

    include "gb(basic)"
    include "level3(ralt_switch)"

    name[Group1]="Maltese (UK, with AltGr overrides)";

    // Currency symbols
    key <AE03>  { [         3,   sterling,   numbersign,     NoSymbol ] };
    key <AE04>  { [         4,     dollar,     EuroSign,     NoSymbol ] };

    // Maltese characters
    key <AC05>  { [         g,          G,    gabovedot,    Gabovedot ] };
    key <AC06>  { [         h,          H,      hstroke,      Hstroke ] };
    key <AB01>  { [         z,          Z,    zabovedot,    Zabovedot ] };
    key <AB03>  { [         c,          C,    cabovedot,    Cabovedot ] };

    // Maltese accented vowels
    key <AD03>  { [         e,          E,       egrave,       Egrave ] };
    key <AD07>  { [         u,          U,       ugrave,       Ugrave ] };
    key <AD08>  { [         i,          I,       igrave,       Igrave ] };
    key <AD09>  { [         o,          O,       ograve,       Ograve ] };
    key <AC01>  { [         a,          A,       agrave,       Agrave ] };

    // Other accents (dead-key)
    key <TLDE>  { [     grave,     notsign,  dead_grave,     NoSymbol ] };
    key <AE02>  { [         2,    quotedbl,    NoSymbol, dead_diaeresis ] };
    key <AE06>  { [         6, asciicircum,    NoSymbol, dead_circumflex ] };
    key <AC11>  { [ apostrophe,         at,  dead_acute,     NoSymbol ] };
    key <BKSL>  { [numbersign,  asciitilde,    NoSymbol,   dead_tilde ] };
};
// ========== Cameroon Keyboards ==========


// ----------------------------------------------------------------------------
// This comment was added by <fotang at mmuock dot org>, on 18-Jun-2016:
//  
// All comments below this one, were in the original cm file;they do not
// apply to the Mmuock keyboard which is defined towards the end of this file.
// ----------------------------------------------------------------------------

// ****** For Instructions, see "Use of Cameroon Keyboards" section	below ******


// The XKB versions of these keyboards were developed by Matthew Lee, Jenni Beadle, and Bruce Cox of SIL Cameroon in association with Going Komputya, Uwe Yung of the Goethe Institute, Yaoundé, and Centre ANACLAC.  

// Cameroon is officially a bilingual country, using French and English, but there are over 270 minority languages.  

// * Cameroon Français is an exact copy of the French France keyboard intended for AZERTY users.
// * Cameroon is an exact copy of the Basic US Keyboard. I can not currently name this "Cameroon English" due to a limitation of XKB.
// * Cameroon QWERTY and Cameroon AZERTY are based largely on SIL Cameroon's Keyman and Microsoft keyboards of the same style already in wide use.  These keyboards are designed to allow the user to type any of Cameroon's 270+ languages and dialects that use the approved orthography.  This Approved Orthography was adopted in 1979 by the National Committee for the Unification and Harmonisation of Alphabets of Camerooninan Languages. 
// * Cameroon Dvorak is described below.

// ===== Use of Cameroon Keyboards =====

// == Fonts ==
// These keyboards are fully Unicode (5.1), so we recommend using a good unicode font for diacritics to position correctly. Recommended fonts are: ttf-sil-charis, ttf-sil-doulos, ttf-sil-gentium and ttf-sil-andika (All of which are free for Linux, Mac, and Windows).


// == Cameroon AZERTY ==
// Cameroon AZERTY uses the French France (AZERTY) layout, as french keyboards are widely used here. While this keyboard is designed for Cameroonian orthography, it still is possible but not recommended, to type French with minimal discomfort using this keyboard.
// Cameroon AZERTY uses the "!" (exclamation) key as the "Cameroon" key. Pressing this key before another key allows you to access the special letters and diacritics needed in Cameroonian orthography.
// For example, press "!" then "a" and get "ɛ" (small epsilon). "!" then "Shift" + "a" (A) will get an "Ɛ" (capital epsilon). Press the "!" key twice to get a "!".
// If you prefer, you can hold the AltGr (and/or Shift) key to access the same letters, but we have found this to be much more awkward in practice. If you really don't like our Cameroon key, simply comment out "include "cm(exclamation_switch)"" and the exclamation key will return to normal.
// All Diacritics (with the exception of French Trema and Circumflex) must be typed (in order of stacking) after the letter.


// == Cameroon QWERTY ==
// Cameroon QWERTY uses the US QWERTY layout, as US keyboards are also widely used here. While this keyboard is designed for Cameroonian orthography, it is possible, but not recommended, to type English with minimal discomfort using this keyboard.
// Cameroon QWERTY uses the ";" (semicolon) key as the "Cameroon" key.	Pressing this key before another key allows you to access the special letters and diacritics needed in Cameroonian orthography.
// For example, press ";" then "a" and get "ɛ" (small epsilon). ";" then "Shift" + "a" (A) will get an "Ɛ" (capital epsilon). Press ";" twice to get a ";", or press Shift + ; (:) twice to get a ":" (colon).
// If you prefer, you can hold the AltGr (and/or Shift) key to access the same letters, but we have found this to be much more awkward in practice. If you really don't like our Cameroon key, simply comment out "include "cm(semicolon_switch)"" and the semicolon key will return to normal.
// All Diacritics must be typed (in order of stacking) after the letter.


// == Cameroon Dvorak ==
// Cameroon Dvorak is uses a similar system to Cameroon QWERTY.

default partial alphanumeric_keys
xkb_symbols "basic" {

	name[Group1]="English (Cameroon)";

	key <TLDE> { [ grave, asciitilde ] };
	key <AE01> { [ 1, exclam ] };
	key <AE02> { [ 2, at ] };
	key <AE03> { [ 3, numbersign ] };
	key <AE04> { [ 4, dollar ] };
	key <AE05> { [ 5, percent ] };
	key <AE06> { [ 6, asciicircum ] };
	key <AE07> { [ 7, ampersand ] };
	key <AE08> { [ 8, asterisk ] };
	key <AE09> { [ 9, parenleft ] };
	key <AE10> { [ 0, parenright ] };
	key <AE11> { [ minus, underscore ] };
	key <AE12> { [ equal, plus ] };

	key <AD01> { [ q, Q ] };
	key <AD02> { [ w, W ] };
	key <AD03> { [ e, E ] };
	key <AD04> { [ r, R ] };
	key <AD05> { [ t, T ] };
	key <AD06> { [ y, Y ] };
	key <AD07> { [ u, U ] };
	key <AD08> { [ i, I ] };
	key <AD09> { [ o, O ] };
	key <AD10> { [ p, P ] };
	key <AD11> { [ bracketleft, braceleft ] };
	key <AD12> { [ bracketright, braceright ] };
	key <AC01> { [ a, A ] };
	key <AC02> { [ s, S ] };
	key <AC03> { [ d, D ] };
	key <AC04> { [ f, F ] };
	key <AC05> { [ g, G ] };
	key <AC06> { [ h, H ] };
	key <AC07> { [ j, J ] };
	key <AC08> { [ k, K ] };
	key <AC09> { [ l, L ] };
	key <AC10> { [ semicolon, colon ] };
	key <AC11> { [ apostrophe, quotedbl ] };

	key <AB01> { [ z, Z ] };
	key <AB02> { [ x, X ] };
	key <AB03> { [ c, C ] };
	key <AB04> { [ v, V ] };
	key <AB05> { [ b, B ] };
	key <AB06> { [ n, N ] };
	key <AB07> { [ m, M ] };
	key <AB08> { [ comma, less ] };
	key <AB09> { [ period, greater ] };
	key <AB10> { [ slash, U003F ] };

	key <BKSL> { [ backslash, bar ] };
};

partial alphanumeric_keys
xkb_symbols "french"
{
	include "latin"
	name[Group1]="French (Cameroon)";

	key <AE01> { [ ampersand, 1, onesuperior, exclamdown ] };
	key <AE02> { [ eacute, 2, asciitilde, oneeighth ] };
	key <AE03> { [ quotedbl, 3, numbersign, sterling ] };
	key <AE04> { [apostrophe, 4, braceleft, dollar ] };
	key <AE05> { [ parenleft, 5, bracketleft, threeeighths ] };
	key <AE06> { [ minus, 6, bar, fiveeighths ] };
	key <AE07> { [ egrave, 7, grave, seveneighths ] };
	key <AE08> { [underscore, 8, backslash, trademark ] };
	key <AE09> { [ ccedilla, 9, asciicircum, plusminus ] };
	key <AE10> { [ agrave, 0, at, degree ] };
	key <AE11> { [parenright, degree, bracketright, questiondown ] };
	key <AE12> { [ equal, plus, braceright, dead_ogonek ] };

	key <AD01> { [ a, A, ae, AE ] };
	key <AD02> { [ z, Z, guillemotleft, less ] };
	key <AD03> { [ e, E, EuroSign, cent ] };
	key <AD11> { [dead_circumflex, dead_diaeresis, dead_diaeresis, dead_abovering ] };
	key <AD12> { [ dollar, sterling, currency, dead_macron ] };

	key <AC01> { [ q, Q, at, Greek_OMEGA ] };
	key <AC10> { [ m, M, mu, masculine ] };
	key <AC11> { [ ugrave, percent, dead_circumflex, dead_caron] };
	key <TLDE> { [twosuperior, asciitilde, notsign, notsign ] };

	key <BKSL> { [ asterisk, mu, dead_grave, dead_breve ] };
	key <AB01> { [ w, W, lstroke, Lstroke ] };
	key <AB07> { [ comma, U003F, dead_acute, dead_doubleacute ] };
	key <AB08> { [ semicolon, period, horizconnector, multiply ] };
	key <AB09> { [ colon, slash, periodcentered, division ] };
	key <AB10> { [ exclam, section, dead_belowdot, dead_abovedot ] };

	include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "azerty"
{
	include "cm(basic)"
	name[Group1] = "Cameroon (AZERTY, intl.)";
	key <AB01> { [ w, W, U1E85, U1E84 ] };	//  SMALL LETTER W,  CAPITAL LETTER W, SMALL LETTER W WITH DIAERESIS, CAPITAL LETTER W WITH DIAERESIS
	key <AB02> { [ x, X, U2039, U203A ] };	// SMALL LETTER X, CAPITAL LETTER X, SINGLE LEFT-POINTING ANGLE QUOTATION MARK, SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
	key <AB03> { [ c, C, U0327, copyright ] };	// SMALL LETTER C, CAPITAL LETTER C, COMBINING CEDILLA, COPYRIGHT SIGN
	key <AB04> { [ v, V, UA78C, UA78B ] };	// SMALL LETTER V, CAPITAL LETTER V, SMALL LETTER GLOTTAL (SALTILLO), CAPITAL LETTER GLOTTAL (SALTILLO)
	key <AB05> { [ b, B, U0253, U0181 ] };	// SMALL LETTER B, CAPITAL LETTER B, SMALL LETTER B WITH HOOK, CAPITAL LETTER B WITH HOOK
	key <AB06> { [ n, N, U014B, U014A ] };	// SMALL LETTER N, CAPITAL LETTER N, SMALL LETTER ENG, CAPITAL LETTER ENG
	key <AB07> { [ U002C, U003F, NoSymbol, U00D7 ] };	// COMMA, QUESTION MARK, , MULTIPLY
	key <AB08> { [ semicolon, period, dead_acute, dead_grave ] };	// SEMICOLON, PERIOD
	key <AB09> { [ colon, slash, U0323 ] };	// COLON, SLASH, COMBINING DOT BELOW
	key <AB10> { [ exclam, U00A7 ] };	// EXCLAMATION MARK, SECTION SIGN
	key <AC01> { [ q, Q, U2014, U2013 ] };	// SMALL LETTER Q, CAPITAL LETTER Q, EM DASH, EN DASH
	key <AC02> { [ s, S, U201C, U201D ] };	// SMALL LETTER S, CAPITAL LETTER S, LEFT DOUBLE QUOTES, RIGHT DOUBLE QUOTES 
	key <AC03> { [ d, D, U0257, U018A ] };	// SMALL LETTER D, CAPITAL LETTER D, SMALL LETTER D WITH HOOK, CAPITAL LETTER D WITH HOOK
	key <AC04> { [ f, F, U00E6, U00C6 ] };	// SMALL LETTER F, CAPITAL LETTER F, SMALL LIGATURE AE, CAPITAL LIGATURE AE
	key <AC05> { [ g, G, U02BC, UA78B ] };	// SMALL LETTER G, CAPITAL LETTER G, CURVED GLOTTAL, CAPITAL LETTER GLOTTAL (SALTILLO)
	key <AC06> { [ h, H, U0251, U2C6D ] };	// SMALL LETTER H, CAPITAL LETTER H, SMALL LETTER ALPHA, CAPITAL LETTER ALPHA
	key <AC07> { [ j, J, leftarrow, U2122 ] };	//SMALL LETTER J, CAPITAL LETTER J, LEFT ARROW, TRADE MARK SIGN
	key <AC08> { [ k, K, downarrow, uparrow ] };	// SMALL LETTER K, CAPITAL LETTER K, DOWN ARROW, UP ARROW
	key <AC09> { [ l, L, rightarrow, U00A3 ] };	// SMALL LETTER L, CAPITAL LETTER L, RIGHT ARROW, POUND STERLING
	key <AC10> { [ m, M, U00F9, U00B5 ] };	// SMALL LETTER M, CAPITAL LETTER M, SMALL LETTER U WITH GRAVE, MICRO SYMBOL
	key <AC11> { [ U0300, U0302, U1DC5, U1DC4 ] };	// COMBINING LOW TONE, COMBINING FALLING TONE, COMBINING LOW-MID TONE, COMBINING MID-HIGH TONE
	key <AD01> { [ a, A, U025B, U0190 ] };	// SMALL LETTER A, CAPITAL LETTER A, SMALL LETTER OPEN E, CAPITAL LETTER OPEN E
	key <AD02> { [ z, Z, U2026, U2020 ] };	// SMALL LETTER Z, CAPITAL LETTER Z, ELLIPSIS, DAGGER
	key <AD03> { [ e, E, U0259, U018F ] };	// SMALL LETTER E, CAPITAL LETTER E, SMALL LETTER SCHWA, CAPITAL LETTER SCHWA
	key <AD04> { [ r, R, U25CC, U00AE ] };	// SMALL LETTER R, CAPITAL LETTER R, PLACEHOLDER SYMBOL, REGISTERED SIGN
	key <AD05> { [ t, T, U0153, U0152 ] };	// SMALL LETTER T, CAPITAL LETTER T, SMALL LIGATURE OE, CAPITAL LIGATURE OE
	key <AD06> { [ y, Y, U01B4, U01B3 ] };	// SMALL LETTER Y, CAPITAL LETTER Y, SMALL LETTER Y WITH HOOK, CAPITAL LETTER Y WITH HOOK
	key <AD07> { [ u, U, U0289, U0244 ] };	// SMALL LETTER U, CAPITAL LETTER U, SMALL LETTER U BAR, CAPITAL LETTER U BAR
	key <AD08> { [ i, I, U0268, U0197 ] };	// SMALL LETTER I, CAPITAL LETTER I, SMALL LETTER I BAR, CAPITAL LETTER I BAR
	key <AD09> { [ o, O, U0254, U0186 ] };	// SMALL LETTER O, CAPITAL LETTER O, SMALL LETTER OPEN O, CAPITAL LETTER OPEN O
	key <AD10> { [ p, P, U00F8, U00D8 ] };	// SMALL LETTER P, CAPITAL LETTER P, SMALL LETTER O BAR, CAPITAL LETTER O BAR
	key <AD11> { [ U0301, U030C, dead_circumflex, dead_diaeresis ] };	// COMBINING HIGH TONE, COMBINING RISING TONE, DEAD CIRCUMFLEX, DEAD DIAERESIS
	key <AD12> { [ U0330, U0303, U0304, U030D ] };	// COMBINING TILDE (NASAL) BELOW, COMBINING TILDE (NASAL), COMBINING MID TONE, COMBINING VERTICAL LINE ABOVE
	key <AE01> { [ U0026, KP_1, U00B9, U2018 ] };	// AMPERSAND, 1, SUPERSCRIPT 1, LEFT SINGLE QUOTE
	key <AE02> { [ eacute, KP_2, asciitilde, U2019 ] };	// SMALL LETTER E WITH ACUTE, 2, TILDE, RIGHT SINGLE QUOTE
	key <AE03> { [ U0022, KP_3, U0025 ] };	// QUOTATION MARK, 3, PERCENT SIGN
	key <AE04> { [ U0027, KP_4, U007B ] };	// APOSTROPHE, 4, LEFT CURLY BRACKET
	key <AE05> { [ U0028, KP_5, U005B, numbersign ] };	// LEFT PARENTHESIS, 5, LEFT SQUARE BRACKET, NUMBER SIGN
	key <AE06> { [ U002D, KP_6, U007C ] };	// HYPHEN/MINUS, 6, BAR
	key <AE07> { [ U00E8, KP_7, U0300 ] };	// SMALL LETTER E WITH GRAVE, 7, COMBINING GRAVE
	key <AE08> { [ underscore, KP_8, backslash, U20D6 ] };	// UNDERSCORE, 8, BACKSLASH, COMBINING LEFT ARROW ABOVE
	key <AE09> { [ ccedilla, KP_9, U005E] };	// SMALL LETTER C WITH CEDILLA, 9, CIRCUMFLEX
	key <AE10> { [ U00E0, KP_0, at, U20D7 ] };	// SMALL LETTER A WITH GRAVE
	key <AE11> { [ U0029, U00B0, U005D ] };	// RIGHT PARENTHESIS, DEGREE, RIGHT SQUARE BRACKET
	key <AE12> { [ U003D, U002B, U007D, U00B1 ] };	// EQUAL SIGN, PLUS SIGN, RIGHT CURLY BRACKET, PLUS-MINUS SIGN
	key <BKSL> { [ U1DC6, U1DC7, KP_Multiply, U00A4 ] };	//  COMBINING MID-LOW, COMBINING HIGH-MID, MULTIPLY, CURRENCY SIGN
	key <LSGT> { [ U003C, U003E, U00AB, U00BB ] };	// LESS THAN, GREATER THAN, LEFT GUILLEMET, RIGHT GUILLEMET
	key <TLDE> { [ U0024, U20AC, U00B2, U00B3 ] };	// DOLLAR, EURO, SUPERSCRIPT 2, SUPERSCRIPT 3
	include "cm(exclamation_switch)"
	include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "qwerty"
{
	include "cm(basic)"
	name[Group1] = "Cameroon Multilingual (QWERTY, intl.)";
	key <AB01> { [ z, Z, U2026, U2020 ] };	// SMALL LETTER Z, CAPITAL LETTER Z, ELLIPSIS, DAGGER
	key <AB02> { [ x, X ] };	// SMALL LETTER X, CAPITAL LETTER X
	key <AB03> { [ c, C, U0327, U00A9 ] };	// SMALL LETTER C, CAPITAL LETTER C, CEDILLA, COPYRIGHT
	key <AB04> { [ v, V, UA78C, UA78B ] };	// SMALL LETTER V, CAPITAL LETTER V, SMALL LETTER GLOTTAL (SALTILLO), CAPITAL LETTER GLOTTAL (SALTILLO)
	key <AB05> { [ b, B, U0253, U0181 ] };	// SMALL LETTER B, CAPITAL LETTER B, SMALL LETTER B WITH HOOK, CAPITAL LETTER B WITH HOOK
	key <AB06> { [ n, N, U014B, U014A ] };	// SMALL LETTER N, CAPITAL LETTER N, SMALL LETTER ENG, CAPITAL LETTER ENG
	key <AB07> { [ m, M, NoSymbol, U2122 ] };	// SMALL LETTER M, CAPITAL LETTER M, , TRADEMARK SIGN
	key <AB08> { [ U002C, U003C, U2039, U00AB ] };	// COMMA, LESS THAN SIGN, LEFT SINGLE GUILLEMET, LEFT DOUBLE GUILLEMET
	key <AB09> { [ U002E, U003E, U203A, U00BB ] };    // PERIOD, GREATER THAN SIGN, RIGHT SINGLE GUILLEMET, RIGHT DOUBLE GUILLEMET
	key <AB10> { [ U002F, U003F, U00F7 ] };    // SLASH, QUESTION MARK, DIVISION SIGN
	key <AC01> { [ a, A, U025B, U0190 ] };	// SMALL LETTER A, CAPITAL LETTER A, SMALL LETTER OPEN E, CAPITAL LETTER OPEN E
	key <AC02> { [ s, S ] };	// SMALL LETTER S, CAPITAL LETTER S
	key <AC03> { [ d, D, U0257, U018A ] };	// SMALL LETTER D, CAPITAL LETTER D, SMALL LETTER D WITH HOOK, CAPITAL LETTER D WITH HOOK
	key <AC04> { [ f, F, U00E6, U00C6 ] };	// SMALL LETTER F, CAPITAL LETTER F, SMALL LIGATURE AE, CAPITAL LIGATURE AE
	key <AC05> { [ g, G, U02BC, UA78B ] };	// SMALL LETTER G, CAPITAL LETTER G, CURVED GLOTTAL, CAPITAL LETTER GLOTTAL (SALTILLO)
	key <AC06> { [ h, H, U0251, U2C6D ] };	// SMALL LETTER H, CAPITAL LETTER H, SMALL LETTER ALPHA, CAPITAL LETTER ALPHA
	key <AC07> { [ j, J, U0330, U0323 ] };	// SMALL LETTER J, CAPITAL LETTER J, COMBINING TILDE (NASAL) BELOW, COMBINING DOT BELOW
	key <AC08> { [ k, K, U1DC5, U1DC7 ] };	// SMALL LETTER K, CAPITAL LETTER K, COMBINING LOW-MID TONE, COMBINING HIGH-MID
	key <AC09> { [ l, L, U1DC6, U1DC4 ] };	// SMALL LETTER L, CAPITAL LETTER L, COMBINING MID-LOW, COMBINING MID-HIGH TONE
	key <AC10> { [ U003B, U003A ] };	// SEMICOLON, COLON
	key <AC11> { [ U0300, U0302, U0027, U0022 ] };	// COMBINING LOW TONE, COMBINING FALLING TONE, APOSTROPHE, QUOTATION MARK
	key <AD01> { [ q, Q, U2014, U2013 ] };	// SMALL LETTER Q, CAPITAL LETTER Q, EM DASH, EN DASH
	key <AD02> { [ w, W, U1E85, U1E84 ] };	// SMALL LETTER W, CAPITAL LETTER W, SMALL LETTER W WITH DIAERESIS, CAPITAL LETTER W WITH DIAERESIS
	key <AD03> { [ e, E, U0259, U018F ] };	// SMALL LETTER E, CAPITAL LETTER E, SMALL LETTER SCHWA, CAPITAL LETTER SCHWA
	key <AD04> { [ r, R, U25CC, U00AE ] };	// SMALL LETTER R, CAPITAL LETTER R, PLACEHOLDER SYMBOL, REGISTERED SIGN
	key <AD05> { [ t, T, U0153, U0152 ] };	// SMALL LETTER T, CAPITAL LETTER T, SMALL LIGATURE OE, CAPITAL LIGATURE OE
	key <AD06> { [ y, Y, U01B4, U01B3 ] };	// SMALL LETTER Y, CAPITAL LETTER Y, SMALL LETTER Y WITH HOOK, CAPITAL LETTER Y WITH HOOK
	key <AD07> { [ u, U, U0289, U0244 ] };	// SMALL LETTER U, CAPITAL LETTER U, SMALL LETTER U BAR, CAPITAL LETTER U BAR
	key <AD08> { [ i, I, U0268, U0197 ] };	// SMALL LETTER I, CAPITAL LETTER I, SMALL LETTER I BAR, CAPITAL LETTER I BAR
	key <AD09> { [ o, O, U0254, U0186 ] };	// SMALL LETTER O, CAPITAL LETTER O, SMALL LETTER OPEN O, CAPITAL LETTER OPEN O
	key <AD10> { [ p, P, U00F8, U00D8 ] };	// SMALL LETTER P, CAPITAL LETTER P, SMALL LETTER O BAR, CAPITAL LETTER O BAR
	key <AD11> { [ U0301, U030C, U005B, U007B ] };	// COMBINING HIGH TONE, COMBINING RISING TONE, LEFT SQUARE BRACKET, LEFT CURLY BRACKET
	key <AD12> { [ U0327, U0308, U005D, U007D ] };	// COMBINING CEDILLA, COMBINING DIAERESIS, RIGHT SQUARE BRACKET, RIGHT CURLY BRACKET
	key <AE01> { [ U0031, U0021, U00BC ] };	// 1, EXCLAMATION POINT, ONE QUARTER
	key <AE02> { [ U0032, U0040, U00BD ] };	//2, AT SYMBOL, ONE HALF
	key <AE03> { [ U0033, U0023, U00BE ] };	// 3, NUMBER SIGN, THREE QUARTERS
	key <AE04> { [ U0034, U0024, NoSymbol, U20AC ] };	// 4, DOLLAR, , EURO SIGN
	key <AE08> { [ U0038, U002A, NoSymbol, U00D7 ] };	// 8, ASTERISK, , MATH MULTIPLY
	key <AE09> { [ U0039, U0028, U2018, U201C ] };	// 9, LEFT PARENTHESIS, LEFT SINGLE QUOTE MARK, LEFT DOUBLE QUOTE MARK
	key <AE10> { [ U0030, U0029, U2019, U201D ] };	// 0, RIGHT PARENTHESIS, RIGHT SINGLE QUOTE MARK, LEFT DOUBLE QUOTE MARK
	key <AE11> { [ U002D, U005F, U0304 ] };	// MINUS, UNDERSCORE, COMBINING MID TONE, COMBINING MID TONE
	key <AE12> { [ U003D, U002B, NoSymbol, U00B1 ] };	// EQUAL, PLUS, , PLUS-MINUS
	key <BKSL> { [ U005C, U007C ] };	// BACKSLASH, BAR
	key <TLDE> { [ U030D, U0303, U0060, U007E ] };	// COMBINING VERTICAL LINE ABOVE, COMBINING TILDE ABOVE, GRAVE ACCENT, TILDE
	include "cm(semicolon_switch)"
	include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "dvorak"
{
	include "us(dvorak)"
	name[Group1] = "Cameroon (Dvorak, intl.)";
	key <AB01> { [ semicolon, colon ] };	// SEMICOLON, COLON
	key <AB02> { [ q, Q, U2014, U2013 ] };	// SMALL LETTER Q, CAPITAL LETTER Q, EM DASH, EN DASH
	key <AB03> { [ j, J, U0330, U0323 ] };	// SMALL LETTER J, CAPITAL LETTER J, COMBINING TILDE (NASAL) BELOW, COMBINING DOT BELOW
	key <AB04> { [ k, K, U1DC5, U1DC7 ] };	// SMALL LETTER K, CAPITAL LETTER K, COMBINING LOW-MID TONE, COMBINING HIGH-MID
	key <AB05> { [ x, X ] };	// SMALL LETTER X, CAPITAL LETTER X
	key <AB06> { [ b, B, U0253, U0181 ] };	// SMALL LETTER B, CAPITAL LETTER B, SMALL LETTER B WITH HOOK, CAPITAL LETTER B WITH HOOK
	key <AB07> { [ m, M, NoSymbol, U2122 ] };	// SMALL LETTER M, CAPITAL LETTER M, , TRADEMARK SIGN
	key <AB08> { [ w, W, U1E85, U1E84 ] };	// SMALL LETTER W, CAPITAL LETTER W, SMALL LETTER W WITH DIAERESIS, CAPITAL LETTER W WITH DIAERESIS
	key <AB09> { [ v, V, UA78C, UA78B ] };	// SMALL LETTER V, CAPITAL LETTER V, SMALL LETTER GLOTTAL (SALTILLO), CAPITAL LETTER GLOTTAL (SALTILLO)
	key <AB10> { [ z, Z, U2026, U2020 ] };	// SMALL LETTER Z, CAPITAL LETTER Z, ELLIPSIS, DAGGER
	key <AC01> { [ a, A, U025B, U0190 ] };	// SMALL LETTER A, CAPITAL LETTER A, SMALL LETTER OPEN E, CAPITAL LETTER OPEN E
	key <AC02> { [ o, O, U0254, U0186 ] };	// SMALL LETTER O, CAPITAL LETTER O, SMALL LETTER OPEN O, CAPITAL LETTER OPEN O
	key <AC03> { [ e, E, U0259, U018F ] };	// SMALL LETTER E, CAPITAL LETTER E, SMALL LETTER SCHWA, CAPITAL LETTER SCHWA
	key <AC04> { [ u, U, U0289, U0244 ] };	// SMALL LETTER U, CAPITAL LETTER U, SMALL LETTER U BAR, CAPITAL LETTER U BAR
	key <AC05> { [ i, I, U0268, U0197 ] };	// SMALL LETTER I, CAPITAL LETTER I, SMALL LETTER I BAR, CAPITAL LETTER I BAR
	key <AC06> { [ d, D, U0257, U018A ] };	// SMALL LETTER D, CAPITAL LETTER D, SMALL LETTER D WITH HOOK, CAPITAL LETTER D WITH HOOK
	key <AC07> { [ h, H, U0251, U2C6D ] };	// SMALL LETTER H, CAPITAL LETTER H, SMALL LETTER ALPHA, CAPITAL LETTER ALPHA
	key <AC08> { [ t, T, U0153, U0152 ] };	// SMALL LETTER T, CAPITAL LETTER T, SMALL LIGATURE OE, CAPITAL LIGATURE OE
	key <AC09> { [ n, N, U014B, U014A ] };	// SMALL LETTER N, CAPITAL LETTER N, SMALL LETTER ENG, CAPITAL LETTER ENG
	key <AC10> { [ s, S ] };	// SMALL LETTER S, CAPITAL LETTER S
	key <AC11> { [ minus, underscore, U0304 ] };	// MINUS, UNDERSCORE, COMBINING MID TONE
	key <AD01> { [ U0300, U0302, U0027, U0022 ] };	// COMBINING LOW TONE, COMBINING FALLING TONE, APOSTROPHE, QUOTATION MARK
	key <AD02> { [ comma, less, U2039, U00AB ] };	// COMMA, LESS THAN SIGN, LEFT SINGLE GUILLEMET, LEFT DOUBLE GUILLEMET
	key <AD03> { [ period, greater, U203A, U00BB ] };	// PERIOD, GREATER THAN SIGN, RIGHT SINGLE GUILLEMET, RIGHT DOUBLE GUILLEMET
	key <AD04> { [ p, P, U00F8, U00D8 ] };	// SMALL LETTER P, CAPITAL LETTER P, SMALL LETTER O BAR, CAPITAL LETTER O BAR
	key <AD05> { [ y, Y, U01B4, U01B3 ] };	// SMALL LETTER Y, CAPITAL LETTER Y, SMALL LETTER Y WITH HOOK, CAPITAL LETTER Y WITH HOOK
	key <AD06> { [ f, F, U00E6, U00C6 ] };	// SMALL LETTER F, CAPITAL LETTER F, SMALL LIGATURE AE, CAPITAL LIGATURE AE
	key <AD07> { [ g, G, U02BC, UA78B ] };	// SMALL LETTER G, CAPITAL LETTER G, CURVED GLOTTAL, CAPITAL LETTER GLOTTAL (SALTILLO)
	key <AD08> { [ c, C, U0327, U00A9 ] };	// SMALL LETTER C, CAPITAL LETTER C, CEDILLA, COPYRIGHT
	key <AD09> { [ r, R, U25CC, U00AE ] };	// SMALL LETTER R, CAPITAL LETTER R, PLACEHOLDER SYMBOL, REGISTERED SIGN
	key <AD10> { [ l, L, U1DC6, U1DC4 ] };	// SMALL LETTER L, CAPITAL LETTER L, COMBINING MID-LOW, COMBINING MID-HIGH TONE
	key <AD11> { [ slash, U003F, U00F7, U0294 ] };	// SLASH, QUESTION MARK, DIVISION SIGN, GLOTTAL STOP
	key <AD12> { [ equal, plus, NoSymbol, plusminus ] };	// EQUAL, PLUS, , PLUS-MINUS
	key <AE01> { [ KP_1, exclam, U00BC ] };	// 1, EXCLAMATION POINT, ONE QUARTER
	key <AE02> { [ KP_2, at, U00BD ] };	// 2, AT SYMBOL, ONE HALF
	key <AE03> { [ KP_3, numbersign, U00BE ] };	// 3, NUMBER SIGN, THREE QUARTERS
	key <AE04> { [ KP_4, dollar, NoSymbol, U20AC ] };	// 4, DOLLAR, , EURO SIGN
	key <AE05> { [ KP_5, percent ] };	// 5, PERCENT
	key <AE06> { [ KP_6, asciicircum ] };	// 6, CARET
	key <AE07> { [ KP_7, ampersand ] };	// 7, AMPERSAND
	key <AE08> { [ KP_8, asterisk, NoSymbol, multiply ] };	// 8, ASTERISK, , MULTIPLY
	key <AE09> { [ KP_9, parenleft, leftsinglequotemark, leftdoublequotemark ] };	// 9, LEFT PARENTHESIS, LEFT SINGLE QUOTE MARK, LEFT DOUBLE QUOTE MARK
	key <AE10> { [ KP_0, parenright, rightsinglequotemark, rightdoublequotemark ] };	// 0, RIGHT PARENTHESIS, RIGHT SINGLE QUOTE MARK, LEFT DOUBLE QUOTE MARK
	key <AE11> { [ U0301, U030C, U005B, U007B ] };	// COMBINING HIGH TONE, COMBINING RISING TONE, LEFT SQUARE BRACKET, LEFT CURLY BRACKET
	key <AE12> { [ U0327, dead_diaeresis, U005D, braceright ] };	// COMBINING CEDILLA, DEAD DIAERESIS, RIGHT SQUARE BRACKET, RIGHT CURLY BRACKET
	key <BKSL> { [ backslash, bar ] };	// BACKSLASH, BAR
	key <TLDE> { [ U030D, U0303, U0060, U007E ] };	// COMBINING VERTICAL LINE ABOVE, COMBINING TILDE ABOVE, GRAVE ACCENT, TILDE
	include "cm(semicolon_switch_dvorak)"
	include "level3(ralt_switch)"
};

// The following code creates the "Cameroon key" phenomenon.

partial modifier_keys
xkb_symbols "semicolon_switch" {
	key <AC10> {
	symbols[Group1] = [ ISO_Level3_Latch,	colon,	semicolon,	colon ]};
	modifier_map Mod5	{ ISO_Level3_Latch };
};

partial modifier_keys
xkb_symbols "exclamation_switch" {
	key <AB10> {
	symbols[Group1] = [ ISO_Level3_Latch,	U00A7,	exclam,	U00A7 ]
	};
	modifier_map Mod5	{ ISO_Level3_Latch };
};

partial modifier_keys
xkb_symbols "semicolon_switch_dvorak" {
	key <AB01> {
	symbols[Group1] = [ ISO_Level3_Latch,	colon,	semicolon,	colon ]
	};
modifier_map Mod5	{ ISO_Level3_Latch };
};


// ------- begin Mmuock alphabet layout ------------------------------------------
//   This layout is used for the Mmuock alphabet as described in the book
//   _The Sound of Mmuock: Orthography (2. ed.)_ [isbn: 978-9956-645-28-1].
//   Mmuock is the language of the Mmuock (local: Muòk) people of Western
//   Cameroon.  
// 
//      Author: Tano Fotang <fotang at mmuock dot org>
//     Created: 2014-06-24
//     Version: 1.2
//
// CHANGES v 1.0:
//	2014-07-06 corrected shifted level3 of <AC11> to quotedbl
// CHANGES v 1.1:
//  2015-05-23 1- added dead_tilde to key <TILDE>; this is needed to produce
//               the letter <ñ> which was totally missing from the keyboard
//             2- added letter <dz> to <AB01>; the letter had been missing.
//             3- if we're not re-defining particular symbols from the included
//               latin layout, then maintain the original latin mappings.
//               Previously, we had set them to NoSymbol. Now, we want to
//               keep the original latin mappings except for those few that we
//               want to overwrite for our own keyboard.
//
// CHANGES v 1.2:
// 2016-06-17  1- added dead keys dead_macron, dead_acute, and dead_grave for
//                tones 1, 3, and 4, for compatibility with the Keyman version.
//             2- rearranged combining diacritics for tones 0 to 5 such that
//                the diacritics are on consequetive keys (AC01 to AC05).
//             3- moved tone 8 to level 3 of AE12.
//             4- moved layout definition out of the EXTRAS section.
//             5- for a cleaner keyboard,
//                replaced ṭhe included latin layout with us(basic).
//
//
// NOTES:
// 0. This map is based on the Latin alphabet layout for the US keyboard.
//
// 1. We use combining diacritical marks to create tone markings. There are 13
//    tones that need to be indicated, although the first 5 are usually enough
//    to represent the rest in simplified orthography.
//
// 2. When composing Mmuock text, about every fourth symbol is for tone. To
//    facilitate easy and fast input, the combining diacritics are placed on
//    the home row (AC). To reduce the number of key strokes required, the
//    unshifted third level is used. Only 5 of the combining diacritics are not
//    on the AC row; they are in the top number row, AE.
//
// 3. Symbols that are used infrequently (`r', `h', `ɛ', `ǝ', etc.) are placed
//    in level3. Additionally, the letter eng (`ŋ'), although commonly used, 
//    is found in level3 because it can alternatively be represented by <ng>.
//    (Indeed, the keyman version of keyboard actually replaces <ng> with `ŋ'.)
//
// 4. The unshifted AB10 key (normally assigned to the slash `/') is used as
//    level 3 switch since the slash is not used in the ordinary course of
//    typing Mmuock text. 
//
// 5. The 'Cameroon Multilingual' keyboards that are defined elsewhere, do not
//    fit our needs because: (a) they are based on a different alphabet, (b) the
//    vast majority of their symbols are not used in Mmuock, and (c) for the few
//    symbols that are used in Mmuock, their placings are not egonomic for 
//    typing Mmuock as the _PRIMARY_ language. The aim of this keyboard, is
//    to give priority to symbols that are actually used in the Mmuock alphabet.
//
// 6. The following fonts have been found to produce the best results with this
//    keyboard:
//         Family                    Accuracy
//      DejaVu (except Sans Mono)        9/10 
//      Linux Libertine                  8/10
//      Ubuntu (except light)            8/10
//      Droid (except sans mono)         7/10
//      Gentium, Gentium Alt           6.5/10
//    In the terminal emulator, the following font variants have been tested:
//      Ubuntu Mono                      9/10
//      Unifont (Medium)                 9/10
//      DejaVu Sans Mono               7.5/10
//      Droid Sans Mono                6.5/10
//   These fonts are all freely available.
// 
// ------the layout-----------
//
//   ┌─────┐
//   │ 2 4 │   2 = Shift,  4 = Level3 + Shift
//   │ 1 3 │   1 = Normal, 3 = Level3
//   └─────┘
//
//   ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
//   │ ~ ~ │ !   │ @   │ #   │ $   │ %   │ ^   │ &   | *   │ (   │ )   │ _ – │ +   ̣┃ ⌫ Back- ┃
// AE│ ` ` │ 1   │ 2   │ 3   │ 4   │ 5   │ 6   ̂│ 7   ̑│ 8   ̍│ 9   ̓│ 0   ̊│ ¯ - │ =   ̋┃  space  ┃
//   ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
//   ┃       ┃ Q   │ W   │ E Ǝ │ Š R │ T   │ Y   │ U Ω │ I Ɛ │ O Φ │ P ∏ │ Ø { │ Σ } ┃ Enter ┃
// AD┃Tab ↹  ┃ q   │ w   │ e ǝ │ š r │ t   │ y   │ u ω │ i ɛ │ o φ │ p π │ ø [ │ σ ] ┃   ⏎   ┃
//   ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
//   ┃        ┃ A   │ S   │ D   │ F   │ G   │  ̇ H │ J   │ K   │ L   │ Œ : │ " ” │ Æ | ┃      ┃
// AC┃Caps ⇬  ┃ a   ̃│ s   ̄| d   ́| f   ̀| g   ̌|  ̣ h │ j   ̆│ k   ̏│ l   ̈│ œ ; │ ' ’ │ æ \ ┃      ┃
//   ┣━━━━━━━━┹────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┬┴────┲┷━━━━━┻━━━━━━┫
//   ┃             │ Z ǲ │ X   │ C   │ V   │ B   │ N ŋ │ M   │ < « │ > » │ ?   ┃             ┃
// AB┃Shift ⇧      │ z ǳ │ x   │ c   │ v   │ b   │ n Ŋ │ m   │ , ‹ │ . › │   / ┃Shift ⇧      ┃
//   ┣━━━━━━━┳━━━━━┷━┳━━━┷━━━┱─┴─────┴─────┴─────┴─────┴─────┴───┲━┷━━━━━╈━━━━━┻━┳━━━━━━━┳━━━┛
//   ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// AA┃Ctrl   ┃Meta   ┃Alt    ┃             Space                 ┃AltGr ⇮┃Menu   ┃Ctrl   ┃
//   ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛
//

partial alphanumeric_keys
xkb_symbols "mmuock" {

   include "us(basic)"
   include "level3(ralt_switch)"

   name[Group1]= "Mmuock";
   key <AE06> { [          6, asciicircum,          U0302                ] }; // tone 10
   key <AE07> { [          7,   ampersand,          U0311                ] }; // tone 12
   key <AE08> { [          8,    asterisk,          U030D                ] }; // tone 13
   key <AE09> { [          9,   parenleft,          U0307                ] }; // tone 7
   key <AE10> { [          0,  parenright,          U030A                ] }; // tone 6
   key <AE11> { [dead_macron,  underscore,          minus,        endash ] };
   key <AE12> { [      equal,        plus,          U030B, dead_belowdot ] }; // U030B = tone 8
   key <AD03> { [          e,           E,          U01DD,         U018E ] }; // U01DD = reversed E
   key <AD04> { [     scaron,      Scaron,              r,             R ] };
   key <AD07> { [          u,           U,    Greek_omega,   Greek_OMEGA ] };
   key <AD08> { [          i,           I,          U025B,         U0190 ] }; // U025B = open E
   key <AD09> { [          o,           O,      Greek_phi,     Greek_PHI ] };
   key <AD10> { [          p,           P,       Greek_pi,      Greek_PI ] };
   key <AD11> { [     oslash,    Ooblique,    bracketleft,     braceleft ] };
   key <AD12> { [Greek_sigma, Greek_SIGMA,   bracketright,    braceright ] }; 
   key <AC01> { [          a,           A,          U0303                ] }; // tone 0
   key <AC02> { [          s,           S,          U0304                ] }; // tone 1
   key <AC03> { [          d,           D,          U0301                ] }; // tone 3
   key <AC04> { [          f,           F,          U0300                ] }; // tone 4
   key <AC05> { [          g,           G,          U030C                ] }; // tone 5
   key <AC06> { [      U0323,       U0307,              h,             H ] }; // COMBINING DOT BELOW, ABOVE
   key <AC07> { [          j,           J,          U0306                ] }; // tone 9
   key <AC08> { [          k,           K,          U030F                ] }; // tone 11
   key <AC09> { [          l,           L,          U0308                ] }; // tone 14
   key <AC10> { [         oe,          OE,      semicolon,         colon ] };
   key <AC11> { [ dead_acute,    quotedbl,     apostrophe                ] };
   key <TLDE> { [ dead_grave,  dead_tilde,          grave,    asciitilde ] };
   key <AB01> { [          z,           Z,          U01F3,         U01F2 ] }; // U01F3 = letter dz
   key <AB06> { [          n,           N,            eng,           ENG ] };
   key <AB08> { [      comma,        less,  guillemotleft,         U2039 ] };
   key <AB09> { [     period,     greater, guillemotright,         U203A ] };
   key <BKSL> { [         ae,          AE,      backslash,           bar ] };

   include "cm(solidus_switch)"
};
// use slash as special key for switching to level3
partial modifier_keys
xkb_symbols "solidus_switch" {
   key <AB10> {
     symbols[Group1] = [ ISO_Level3_Latch, question, slash, dead_abovedot ]
   };
   modifier_map Mod5	{ ISO_Level3_Latch };
};
// ------- end of Mmuock keyboard map --------------------------------------------
xkb_symbols "jp106" {

    name[group1]="Japan/ASCII";

    key <HZTG> {         [ Zenkaku_Hankaku 		    ] };
    key <AE01> {         [               1,          exclam ] };
    key <AE02> {         [               2,        quotedbl ] };
    key <AE03> {         [               3,      numbersign ] };
    key <AE04> {         [               4,          dollar ] };
    key <AE05> {         [               5,         percent ] };
    key <AE06> {         [               6,       ampersand ] };
    key <AE07> {         [               7,      apostrophe ] };
    key <AE08> {         [               8,       parenleft ] };
    key <AE09> {         [               9,      parenright ] };
    key <AE10> {         [               0,      asciitilde ] };
    key <AE11> {         [           minus,           equal ] };
    key <AE12> {         [     asciicircum,         overbar ] };
    key <AE13> {         [             yen,             bar ] };

    // keys <TAB> and <AD01> - <AD10> are identical to US/ASCII keyboard
    key <AD11> {         [              at,           grave ] };
    key <AD12> {         [     bracketleft,       braceleft ] };

    key <CAPS> {         [      Eisu_Shift,       Caps_Lock ] };
    // keys <AC01> - <AC09> are identical to US/ASCII keyboard
    key <AC10> {         [       semicolon,            plus ] };
    key <AC11> {         [           colon,        asterisk ] };
    key <AC12> {         [    bracketright,      braceright ] };

    // keys <LFSH> and <AB01> - <AB10> are identical to US/ASCII keyboard
    key <AB11> {         [       backslash,      underscore ] };

    key <NFER> {         [        Muhenkan ] };
    key <XFER> {         [           Kanji ] };
    key <HKTG> {         [ Hiragana_Katakana ] };
};

xkb_symbols "alternate106" {
    key <AE10> {         [               0,      overbar ] };
    key <AE12> {         [     asciicircum,      asciitilde] };
    key <AE13> {         [       backslash,             bar ] };
    key <AB11> {         [        underbar,      underscore ] };
    augment "sgi/jp(jp106)"
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
// US/ASCII layout for a nwp5461 keyboard
xkb_symbols "nwp5461" {
    include "us(basic)"

    key <LALT> { [ Alt_L, Meta_L ]	};
    key <RTSH> { [ Shift_R	]	};
    key <AB11> { [ NoSymbol	]	};

    // Begin "Function" section
    key <FK01> { [ F1		]	};
    key <FK02> { [ F2		]	};
    key <FK03> { [ F3		]	};
    key <FK04> { [ F4		]	};
    key <FK05> { [ F5		]	};
    key <FK06> { [ F6		]	};
    key <FK07> { [ F7		]	};
    key <FK08> { [ F8		]	};
    key <FK09> { [ F9		]	};
    key <FK10> { [ F10		]	};
    key <FK11> { [ F11		]	};
    key <FK12> { [ F12		]	};
    key <HELP> { [ Help		]	};
    key <STOP> { [ Cancel	]	};
    key <CUT>  { [ Select	]	};
    key <EXEC> { [ Execute	]	};
    key <DELE> { [ Delete	]	};
    key <LEFT> { [ Left		]	};
    key <RGHT> { [ Right	]	};
    key <UP>   { [ Up		]	};
    key <DOWN> { [ Down		]	};
    key <PGUP> { [ Prior	]	};
    key <PGDN> { [ Next		]	};
    key <INS>  { [ Insert	]	};
    key <CLR>  { [ Clear	]	};
    // End "Function" section

    // Begin "Keypad" section
    key <KPMU> { [ KP_Multiply	]	};
    key <KPDV> { [ KP_Divide	]	};
    key <KPAD> { [ KP_Add	]	};

    key  <KP7> { [ KP_7		]	};
    key  <KP8> { [ KP_8		]	};
    key  <KP9> { [ KP_9		]	};
    key <KPSU> { [ KP_Subtract	]	};

    key  <KP4> { [ KP_4		]	};
    key  <KP5> { [ KP_5		]	};
    key  <KP6> { [ KP_6		]	};
    key <KPSP> { [ KP_Separator ]	};

    key  <KP1> { [ KP_1		]	};
    key  <KP2> { [ KP_2		]	};
    key  <KP3> { [ KP_3		]	};
    key <KPEN> { [ KP_Enter	]	}; 

    key  <KP0> { [ KP_0		]	};
    key <KPDC> { [ KP_Decimal	]	};
    key <KPTB> { [ KP_Tab	]	};
    // End "Keypad" section

    modifier_map Shift  	{ Shift_R };
    modifier_map Mod3   	{ Alt_L };
};
//
// 03.01.2003
// Andreas Tobler <a.tobler@schweiz.ch>
// modified for Swiss German Apple Extended Keyboard II

default
partial alphanumeric_keys
xkb_symbols "extended" {
    
    name[Group1]= "Switzerland - German, Mac";

    key <AE01> { [	1,	plus, 		plusminus,	infinity	]	};
    key <AE02> { [	2,	quotedbl, leftdoublequotemark,  rightdoublequotemark ]	};
    key <AE03> { [	3,	asterisk, 	numbersign,	leftcaret	]	};
					// not displayed here
    key <AE04> { [	4,	ccedilla, 	Ccedilla,	slash		]	};
    key <AE05> { [	5,	percent, 	bracketleft			]	};
    key <AE06> { [	6,	ampersand, 	bracketright			]	};
    key <AE07> { [	7,	slash, 		bar,		backslash	]	};
    key <AE08> { [	8,	parenleft, 	braceleft,	Ograve		]	};
    key <AE09> { [	9,	parenright, 	braceright,	Ocircumflex	]	};
    key <AE10> { [	0,	equal, 	notequal,	Uacute			]	};
    key <AE11> { [	apostrophe,	question, 	questiondown, 	NoSymbol ]	};
    key <AE12> { [	dead_circumflex,dead_grave, 	dead_acute,	asciicircum ]	};
    key <AD01> { [	q,	Q, 	oe,		OE			]	};
    key <AD02> { [	w,	W, 	Greek_SIGMA,	Aacute			]	};
    key <AD03> { [ 	e,	E, 	EuroSign,	Ediaeresis		]	};
    key <AD04> { [ 	r,	R, 	registered,	Egrave			]	};
    key <AD05> { [ 	t,	T, 	dagger,		Icircumflex		]	}; 
    key <AD06> { [	z,	Z, 	Greek_OMEGA,	Iacute			]	};
    key <AD07> { [ 	u,	U, 	degree,		Ugrave			]	};
    key <AD08> { [ 	i,	I, 	exclamdown,	idotless		]	};
    key <AD09> { [ 	o,	O, 	oslash,		Ooblique		]	};
    key <AD10> { [ 	p,	P, 	Greek_pi,	Greek_PI		]	};
    key <AD11> { [	udiaeresis,	egrave, 	section,	ydiaeresis ]	};
    key <AD12> { [	dead_diaeresis,	exclam, 	grave,		apostrophe ]	};
    key <AC01> { [ 	a,	A, 	aring,		Aring			]	};
    key <AC02> { [ 	s,	S, 	ssharp, 	U1E9E			]	}; 
					// ligature fl
    key <AC03> { [ 	d,	D, 	Greek_sigma,	NoSymbol		]	};
			// partialderivative is not available here att
    key <AC04> { [ 	f,	F, 	function,	doubledagger		]	};
    key <AC05> { [ 	g,	G, 	at,		comma			]	};
    key <AC06> { [ 	h,	H, 	ordfeminine,	periodcentered		]	};
    key <AC07> { [ 	j,	J,  	masculine,	eth	 		]	};
    key <AC08> { [ 	k,	K, 	Greek_DELTA,	macron			]	};
    key <AC09> { [ 	l,	L, 	notsign,	caret			]	};
    key <AC10> { [	odiaeresis,	eacute, 	cent,		breve	]	};
    key <AC11> { [	adiaeresis,	agrave, 	ae,		AE	]	};
    key <AB01> { [	y,	Y, 	yen,		Ydiaeresis		]	};
    key <AB02> { [ 	x,	X, 	similarequal,	trademark		]	};
    key <AB03> { [ 	c,	C, 	copyright,	NoSymbol		]	};
    key <AB04> { [ 	v,	V, 	radical,	diamond			]	};
    key <AB05> { [ 	b,	B, 	integral,	NoSymbol		]	};  
    key <AB06> { [ 	n,	N, 	dead_tilde, 	enopencircbullet	]       };
					// to be fixed att
    key <AB07> { [ 	m,	M, 	mu,		dead_abovering		]       };
					// not sure att
    key <AB08> { [	comma,	semicolon, 	guillemotleft,	guillemotright	]	};
    key <AB09> { [	period,	colon, 	ellipsis,	division		]	};
    key <AB10> { [	minus,	underscore, 	hyphen,		emdash		]	};
    key <TLDE> { [	section,	degree,   	NoSymbol, 	NoSymbol ]	};
			// ligature fi	// per mille
    key <SPCE> { [	space, 	nobreakspace,	nobreakspace		]	};
    key <LSGT> { [	less,	greater, 	lessthanequal,	greaterthanequal ]  	};
    key <BKSL> { [	dollar,	sterling, 	paragraph,	enfilledcircbullet ]	};

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys 
xkb_symbols "de" {
    include "macintosh_vndr/ch(extended)"
};

partial alphanumeric_keys 
xkb_symbols "fr" {

    include "macintosh_vndr/ch(extended)"
    name[Group1]= "Switzerland - French, Mac";

    override key <AD11> {
	[ egrave,	udiaeresis,  bracketleft	]
    };
    override key <AC10> {
	[ eacute,	odiaeresis	]
    };
    override key <AC11> {
	[ agrave,	adiaeresis,   braceleft		]
    };
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {
    include "macintosh_vndr/ch(fr)" // for consistent naming
};
default
xkb_symbols "extended" {

    name[Group1]= "Italy - Mac";

    key <LSGT> {	[        less,  greater   	]	};
    key <TLDE> {        [        at,    numbersign,    periodcentered              ]	};
    key <AE01> {	[   ampersand,    1, guillemotleft,guillemotright	]	};
    key <AE02> {	[    quotedbl,    2 		]	};
    key <AE03> {	[  apostrophe,    3         	]	};
    key <AE04> {	[   parenleft,    4,    braceleft,    bracketleft	]	};
    key <AE05> {	[    ccedilla,    5,     Ccedilla,    Iacute	]	};
    key <AE06> {	[      egrave,    6,    paragraph,    periodcentered]	};
    key <AE07> {	[  parenright,    7,   braceright,	  bracketright	]	};
    key <AE08> {	[    sterling,    8,   infinity			]	};
    key <AE09> {	[      agrave,    9,        acute,    Ocircumflex	]	};
    key <AE10> {	[      eacute,    0,        grave,    Oacute	]	};
    key <AE11> {	[       minus,    underscore	]	};
    key <AE12> {	[       equal, 	  plus,     notequal,    plusminus	]	};

    key <AD01> {	[           q,  Q 		]	};
    key <AD02> {	[	    z,  Z		]	};
    key <AD03> {	[	    e,  E,     EuroSign		]	};
    key <AD04> {	[	    r,  R,   registered			] 	};
    key <AD05> {	[	    t,  T		]	};
    key <AD06> {	[	    y,  Y,       Uacute,	ydiaeresis      ] 	};
    key <AD07> {	[	    u,  U		]	};
    key <AD08> {	[	    i,  I,  icircumflex,	idiaeresis      ] 	};
    key <AD09> {	[	    o,  O		]	};
    key <AD10> {	[	    p,  P		]	};
    key <AD11> {	[      igrave,  asciicircum     ]	};
    key <AD12> {	[      dollar,	asterisk        ]	};
    key <BKSL> {	[     section,  degree,           at,  numbersign      ]	};

    key <AC01> {	[	  a,	A,      aring,   Aring		] 	};
    key <AC02> {	[	  s,	S,     ssharp,	 U1E9E		]	};
    key <AC03> {	[	  d,	D		]	};
    key <AC04> {	[	  f,	F		]	};
    key <AC05> {	[	  g,	G		]	};
    key <AC06> {	[	  h,	H,     Igrave,    Icircumflex     ]	};
    key <AC07> {	[	  j,	J,  Idiaeresis,   Iacute          ]	};
    key <AC08> {	[	  k,	K,     Egrave,    Ediaeresis      ]	};
    key <AC09> {	[	  l,	L,     ssharp,    bar		]	};
    key <AC10> {	[         m,	M,         mu,    Oacute		]	};
    key <AC11> {	[    ugrave,	percent,         ae,    AE		]	};

    key <AB01> {	[	  w,	W 		]	};
    key <AB02> {	[	  x,	X		]	};
    key <AB03> {	[	  c,	C,  copyright,    copyright	]	};
    key <AB04> {	[	  v,	V		]	};
    key <AB05> {	[	  b,	B		]	};
    key <AB06> {	[	  n,	N,  dead_tilde                    ]       };
    key <AB07> {	[     comma,	question,          questiondown		]	};
    key <AB08> {	[ semicolon,	period          ]	};
    key <AB09> {	[     colon,	slash,        bar,    backslash	]	};
    key <AB10> {	[    ograve,	exclam,     exclamdown			]	};

    include "kpdl(dot)"
    include "level3(ralt_switch)"
};
default partial alphanumeric_keys 
xkb_symbols "basic" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple Norwegian keyboard.

    include "latin"

    name[Group1]= "Norway - Mac";

    key <TLDE> {	[             bar,         section      ]	};
    key <AE02> {	[               2,        quotedbl, 	       at,	 oneeighth	]	};
    key <AE03> {	[               3,	numbersign,      sterling,        sterling	]	};
    key <AE04> {	[	        4,        currency, 	   dollar,	    dollar	]	};
    key <AE06> {	[               6,       ampersand     	]	};
    key <AE07> {	[               7,           slash, 	      bar,       backslash	]  	};
    key <AE08> {	[               8,       parenleft,   bracketleft,	 braceleft	]	};
    key <AE09> {	[               9,      parenright,  bracketright,	braceright	]	};
    key <AE10> {	[               0,           equal     	]	};
    key <AE11> {	[            plus,        question      ]	};
    key <AE12> {	[      dead_grave,      dead_acute, 	    acute,     dead_ogonek 	]	};

    key <AB08> {	[           comma,       semicolon     	]	};
    key <AB09> {	[          period,           colon     	]	};
    key <AB10> {	[           minus,      underscore     	]	};
    key <AC10> {	[	   oslash,        Ooblique,       odiaeresis,   Odiaeresis	]	};
    key <AC11> {	[              ae,              AE 	]	};
    key <AD11> {	[	    aring,           Aring     	]	};
    key <AD12> {	[       diaeresis,     asciicircum,       asciitilde,  dead_macron     	]      	};
    key <BKSL> {	[              at,        asterisk	]	};
    key <LSGT> {	[            less,         greater	]	};

    include "eurosign(e)"
    include "level3(ralt_switch)"
};


partial alphanumeric_keys 
xkb_symbols "nodeadkeys" {

    // Modifies the basic Norwegian layout to no dead keys
    include "macintosh_vndr/no(basic)"
    name[Group1]= "Norway - Mac, no dead keys";

    key <AE12> {	[           grave,           acute, 	    acute,          ogonek 	]	};
    key <AD12> {	[       diaeresis,     asciicircum,    asciitilde,          macron     	]      	};

};
default partial alphanumeric_keys 
xkb_symbols "basic" {

    // Describes the differences between a very simple mac_US
    // keyboard and a very simple Spanish keyboard.

    include "latin"
    name[Group1]= "Latin American - Mac";

    key <TLDE> {	[     bracketleft,    bracketright,        braceleft,      braceright	]	};
    key <LSGT> {	[            less,         greater,      bracketleft,       braceleft	]	};
    key <AE01> {	[               1,      exclamdown 	]	};
    key <AE02> {	[               2,          exclam,               at,       oneeighth	]	};
    key <AE03> {	[               3,      numbersign,    guillemotleft,  guillemotright	]	};
    key <AE04> {	[               4,          dollar,              yen,     Icircumflex	]	};
    key <AE05> {	[               5,         percent	]	};
    key <AE06> {	[               6,           slash,        backslash,      Idiaeresis	]	};
    key <AE07> {	[               7,       ampersand,              bar,          Iacute	]	};
    key <AE08> {	[               8,        asterisk,           degree	]	};
    key <AE09> {	[               9,       parenleft,         sterling,     Ocircumflex	]	};
    key <AE10> {	[               0,      parenright     	]	};
    key <AE11> {	[           minus,      underscore	]	};
    key <AE12> {	[           equal,            plus,        plusminus	]	};
    key <AD11> {	[      dead_grave,          degree 	]	};
    key <AD12> {	[      dead_acute,  dead_diaeresis,              bar	]	};

    key <AB08> {	[           comma,    questiondown   	]	};
    key <AB09> {	[          period,        question     	]	};
    key <AB10> {	[        ccedilla,        Ccedilla     	]	};
    key	<AC10> {	[	   ntilde,          Ntilde,       asciitilde, dead_doubleacute	]	};
    key <AC11> {	[       semicolon,    	     colon 	]	};
    key <BKSL> {	[      apostrophe,        quotedbl	]	};

    include "level3(ralt_switch)"
};
// JIS symbol mapping for Apple Aluminium
// (Damien Ciabrini <damien.ciabrini@gmail.com>)
//
// The JIS version of the Aluminium Keyboard is made of
//   QWERTY-like map for the latin part
//   PC98-like map for the kana part
//   EISU and KANA keys found on other Apple keyboards

default partial alphanumeric_keys
xkb_symbols "usmac" {
    name[Group1]	= "Japan - Macintosh, US map";
    include "jp(common)"

    key <JPCM> { [ KP_Separator ] };
    key <AE13> { [ yen, bar 	] };
    replace key <AE10> { [ 0		] };
    replace key <AB11> { [ underscore	] };
    replace key <CAPS> { [ Caps_Lock ] };
};

partial alphanumeric_keys
xkb_symbols "mac" {
    name[Group1]	= "Japan - Macintosh";
    include "jp(kana)"

    replace key <CAPS> { [ Caps_Lock ] };
};

partial alphanumeric_keys
xkb_symbols "alujiskeys" {
    // On JIS USB keyboard, EISU and KANA replace Hangul and Hanja
    // see keycodes macintosh(jisevdev)
    replace key <HJCV> { [ Hiragana_Katakana ] };
    replace key <HNGL> { [ Eisu_toggle ] };
};
// olh@suse.de   very close to MacOS map

default partial alphanumeric_keys 
xkb_symbols "basic" {

    // Describes the differences between a very simple US/ASCII
    // keyboard and a simple German keyboard.

    include "latin"
    name[Group1]= "Germany - Mac";

    key <TLDE> {	[ dead_circumflex,	degree,    notsign 		]	};
    key <AE01> {	[         1,    exclam,  exclamdown,   at		]	};
    key <AE02> {	[	  2,	quotedbl,  twosuperior			]	};
    key <AE03> {	[	  3,	section,  threesuperior,sterling	]	};
    key <AE04> {	[	  4,	dollar,  onequarter,	currency	]	};
    key <AE05> {	[	  5,	percent,  bracketleft			]	};
    key <AE06> {	[	  6,	ampersand,  bracketright		]	};
    key <AE07> {	[	  7,	slash,        bar,    backslash		]	};
    key <AE08> {	[	  8,	parenleft,  braceleft,    asciitilde	]	};
    key <AE09> {	[	  9,	parenright, braceright			]	};
    key <AE10> {	[	  0,	equal,  braceright,	degree		]	};
    key <AE11> {	[    ssharp,	question,  backslash,	questiondown	]	};
    key <AE12> {	[ dead_acute,	dead_grave,  dead_cedilla		]	};

    key <AD01> {	[	  q,	Q, guillemotleft,guillemotright	]	};
    key <AD03> {	[	  e,	E,   EuroSign			]	};
    key <AD04> {	[         r,    R,  registered			]	};
    key <AD05> {	[	  t,	T		]	};
    key <AD06> {	[	  z,	Z		]	};
    key <AD07> {	[	  u,	U, diaeresis,    Aacute		]	};
    key <AD08> {	[	  i,	I,      slash,    Ucircumflex	]	};
    key <AD09> {	[         o,    O,      oslash,   Ooblique	]	};
    key <AD11> {	[ udiaeresis,	Udiaeresis,  periodcentered, degree	]	};
    key <AD12> {	[      plus,	asterisk,  asciitilde			]	}; 
    key <AC01> {	[         a,    A,      aring,    Aring		]	};
    key <AC04> {	[	  f,	F		]	};
    key <AC05> {	[	  g,	G,  copyright			]	};
    key <AC06> {	[         h,    H,  ordfeminine			]	};
    key <AC09> {	[	  l,    L, 	at			]	};
    key <AC10> {	[ odiaeresis,	Odiaeresis,  dead_acute			]	};
    key <AC11> {	[ adiaeresis,	Adiaeresis,  dead_circumflex		]	};

    key <LSGT> {	[      less,	greater,        bar			]	};
    key <AB01> {	[	  y,	Y,  guillemotleft,less		]	};
    key <AB06> {	[         n,    N, asciitilde			]	};
    key <AB07> {	[	  m,	M, 	 mu			]	};
    key <AB08> {	[     comma,	semicolon	]	};
    key <AB09> {	[    period,	colon,  periodcentered, division	]	};
    key <AB10> {	[     minus,	underscore	]	};
    key <BKSL> {	[ numbersign,	apostrophe,  dead_grave			]	};

    include "kpdl(comma)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys 
xkb_symbols "Sundeadkeys" {
    // modify the default German layout to use Sun dead keys
    include "macintosh_vndr/de(basic)"
    name[Group1]= "Germany - Mac, Sun dead keys";

    key <TLDE> {	[ SunFA_Circum,	degree,      notsign 			]	};
    key <AE12> {	[ SunFA_Acute,	SunFA_Grave, SunFA_Cedilla		]	};
    key <AD11> {	[ udiaeresis,	Udiaeresis,  SunFA_Diaeresis		]	};
    key <AD12> {	[       plus,	asterisk,    SunFA_Tilde,  dead_macron	]	};
    key <AC10> {	[ odiaeresis,	Odiaeresis,  SunFA_Acute		]	};
    key <AC11> {	[ adiaeresis,	Adiaeresis,  SunFA_Circum		]	};

    key <BKSL> {	[ numbersign,	acute,       SunFA_Grave		]	};
};

partial alphanumeric_keys 
xkb_symbols "sundeadkeys" {
    include "macintosh_vndr/de(Sundeadkeys)"
};

partial alphanumeric_keys 
xkb_symbols "nodeadkeys" {
    // modify the default German layout to not have any dead keys
    include "macintosh_vndr/de(basic)"
    name[Group1]= "Germany - Mac, no dead keys";

    key <TLDE> {	[ asciicircum,	degree,    notsign 			]	};
    key <AE12> {	[ acute,	grave,  cedilla				]	};
    key <AD11> {	[ udiaeresis,	Udiaeresis,  diaeresis 			]	};
    key <AD12> {	[      plus,	asterisk,  asciitilde,	macron		]	};
    key <AC10> {	[ odiaeresis,	Odiaeresis,  acute			]	};
    key <AC11> {	[ adiaeresis,	Adiaeresis,  asciicircum		]	};

    key <BKSL> {	[ numbersign,	apostrophe,  grave			]	};
};
// Marc.Shapiro@inria.fr 19-sep-1998
// modifications : Etienne Herlent <eherlent@linux-france.org> june 2000
// adapted to the new input layer :
//        Martin Costabel <costabel@wanadoo.fr> 3-jan-2001
//////////////////////////////////////////////////////////////////
// Petites Modification le juillet 2005 par Bin Zhang <bb.zhang@free.fr> : 
// 1) La ligne 83 : remplacer les deux "VoidSymbol" par oe et OE 
// 2) La ligne 89 : remplacer "VoidSymbol" par "EuroSign"
// ( 1) et 2) fonctionnent sous UTF-8, mais pas sous iso-8859-1. )
// 3) Remplacer la ligne 148 par la ligne 149 pour que la touche Alt_L
// (la touche Apple-Pomme) fonctionne correctement sous Xorg, une idée
// motivée par http://www.linux-france.org/macintosh/clavier_gentoo.html
//////////////////////////////////////////////////////////////////
// This map is an almost-complete mapping of the standard French
// MacIntosh keyboard under Xwindows.  I tried to remain as faithful
// as possible to the Mac meaning of each key.	I did this entirely by
// hand and by intuition, relying on the Clavier (Keyboard?) Desktop
// Accessory for the Mac meaning of keys, and on reading keysymdef.h
// to intuit the corresponding X names.	 Lacking proper documentation,
// I may have made some mistakes.

// Entries marked CHECK are particularly uncertain

// Entries marked MISSING mark Mac characters for which I was unable
// to find a corresponding keysym.  (Some for sure don't: e.g. the
// Apple mark and the oe/OE character; others I may have simply not
// found.)

default
xkb_symbols "extended" {

    name[Group1]= "France - Mac";

    key <ESC>  {	[ Escape			]	};

    key <TLDE> {	[	   at,	  numbersign,	periodcentered,  	Ydiaeresis	]	};
    key <ENTR> {        [    KP_Enter                   ]       };
    key <AE01> {	[   ampersand,	  1,	  	VoidSymbol,	  	dead_acute	]	}; // MISSING: Apple
    key <AE02> {	[      eacute,	  2,		ediaeresis,	  	Eacute	]	};
    key <AE03> {	[    quotedbl,	  3,		leftdoublequotemark, 	rightdoublequotemark	] 	};
    key <AE04> {	[  apostrophe,	  4,		leftsinglequotemark, 	rightsinglequotemark	] 	};
    key <AE05> {	[   parenleft,	  5,		braceleft,	  	bracketleft	]	};
    key <AE06> {	[     section,	  6,		paragraph,	  	aring		]	};
    key <AE07> {	[      egrave,	  7,		guillemotleft,	  	guillemotright]	};
    key <AE08> {	[      exclam,	  8,		exclamdown,	  	Ucircumflex	]	};
    key <AE09> {	[    ccedilla,	  9,		Ccedilla,	  	Aacute	]	};
    key <AE10> {	[      agrave,	  0,		oslash,	  		Oslash	]	};
    key <AE11> {	[  parenright,	  degree,	braceright,	  	bracketright	]	};
    key <AE12> {	[	minus,	  underscore,	emdash,	  		endash	]	};
    key <BKSP> {	[   BackSpace,    VoidSymbol,	Delete,	  		VoidSymbol	]	};

    key	 <TAB> {	[	  Tab,	ISO_Left_Tab	]	};
    key <AD01> {	[	    a,	A,		ae,			AE		]	};
    key <AD02> {	[	    z,	Z,		Acircumflex,		Aring		]	};
    key <AD03> {	[	    e,	E,		ecircumflex,		Ecircumflex	]	};
    key <AD04> {	[	    r,	R,		registered,		currency	]	};
    key <AD05> {	[	    t,	T,		dagger,			trademark	]	};
    key <AD06> {	[	    y,	Y,		Uacute,  		Ydiaeresis	]	};
    key <AD07> {	[	    u,	U,		masculine,		ordfeminine	]	};
    key <AD08> {	[	    i,	I,		icircumflex,		idiaeresis	]	};
    key <AD09> {	[	    o,	O,		oe,			OE		]	};
    key <AD10> {	[	    p,	P,		Greek_pi,  		Greek_PI	]	};
    key <AD11> {	[dead_circumflex,dead_diaeresis,ocircumflex, 		Ocircumflex	]	};
    key <AD12> {	[      dollar,	asterisk,	EuroSign,  		yen   	        ]	};
    key <CAPS> {	[	Caps_Lock		]	};
    key <AC01> {	[	  q,	Q,		doubledagger,		Greek_OMEGA	]	};
    key <AC02> {	[	  s,	S,		Ograve,			Greek_SIGMA	]	};
    key <AC03> {	[         d,	D,		Greek_delta,		Greek_DELTA	]	};
    key <AC04> {	[	  f,	F,		VoidSymbol,		periodcentered	]	};
    key <AC05> {	[	  g,	G,		VoidSymbol,		VoidSymbol	]	}; // MISSING: ligature fi,fl
    key <AC06> {	[	  h,	H,		Igrave,			Icircumflex	]	};
    key <AC07> {	[	  j,	J,		Idiaeresis,		Iacute		]	};
    key <AC08> {	[	  k,	K,		Egrave,			Ediaeresis	]	};
    key <AC09> {	[	  l,	L,		notsign,		bar		]	};
    key <AC10> {	[	  m,	M,		mu,			Oacute		]	};
    key <AC11> {	[    ugrave,	percent,	Ugrave,			0x1002030	]	};
    key <BKSL> {	[ dead_grave,	sterling,	at,			numbersign	]	};
    key <RTRN> {	[    Return			]	};

    key <LSGT> {	[	 less,	  greater,	lessthanequal,		greaterthanequal	]	};
    key <AB01> {	[	  w,	W,		guilsinglleft,		guilsinglright	]	}; // MISSING: half-guillemot (single angle bracket)
    key <AB02> {	[	  x,	X,		VoidSymbol,		VoidSymbol	]	}; // CHECK: similarequal; MISSING: extra-slanted slash
    key <AB03> {	[	  c,	C,		copyright,		cent		]	};
    key <AB04> {	[	  v,	V,		diamond,		radical		]	}; // CHECK diamond
    key <AB05> {	[	  b,	B,		ssharp,    		integral	]	};
    key <AB06> {	[	  n,	N,		dead_tilde,		asciitilde	]	};
    key <AB07> {	[     comma,	question,	infinity,		questiondown	]	};
    key <AB08> {	[ semicolon,	period,		ellipsis,		periodcentered	]	};
    key <AB09> {	[     colon,	slash,		division,		backslash	]	};
    key <AB10> {	[     equal,	plus,		notequal,		plusminus	]	};

    key <SPCE> {	[     space,	space,		nobreakspace,		nobreakspace	]	};

    include "level3(ralt_switch)"
};



xkb_symbols "nodeadkeys" {
include "macintosh_vndr/fr(extended)"
    name[Group1]= "France - Mac, no dead keys";
    
    key <AE01> {	[   ampersand,	  1,	  	VoidSymbol,	  	acute	]	}; // MISSING: Apple
    key <AD11> {	[asciicircum,diaeresis,ocircumflex, 		Ocircumflex	]	};
    key <BKSL> {	[ grave,	sterling,	at,			numbersign	]	};

    key <AB06> {	[	  n,	N,		asciitilde,		dead_tilde	]	};
};
// symbols definition for a Macintosh "Extended" keyboard

default xkb_symbols "extended" {

    name[Group1]= "USA";
    key <ESC>  {	[ Escape			]	};

    key <TLDE> {	[     grave,	asciitilde	]	};
    key <AE01> {	[	  1,	exclam 		]	};
    key <AE02> {	[	  2,	at		]	};
    key <AE03> {	[	  3,	numbersign	]	};
    key <AE04> {	[	  4,	dollar		]	};
    key <AE05> {	[	  5,	percent		]	};
    key <AE06> {	[	  6,	asciicircum	]	};
    key <AE07> {	[	  7,	ampersand	]	};
    key <AE08> {	[	  8,	asterisk	]	};
    key <AE09> {	[	  9,	parenleft	]	};
    key <AE10> {	[	  0,	parenright	]	};
    key <AE11> {	[     minus,	underscore	]	};
    key <AE12> {	[     equal,	plus		]	};

    key <AD01> {	[	  q,	Q 		]	};
    key <AD02> {	[	  w,	W		]	};
    key <AD03> {	[	  e,	E		]	};
    key <AD04> {	[	  r,	R		]	};
    key <AD05> {	[	  t,	T		]	};
    key <AD06> {	[	  y,	Y		]	};
    key <AD07> {	[	  u,	U		]	};
    key <AD08> {	[	  i,	I		]	};
    key <AD09> {	[	  o,	O		]	};
    key <AD10> {	[	  p,	P		]	};
    key <AD11> {	[ bracketleft,	braceleft	]	};
    key <AD12> {	[ bracketright,	braceright	]	};
    key <BKSL> {	[ backslash,	bar		]	};

    key <AC01> {	[	  a,	A 		]	};
    key <AC02> {	[	  s,	S		]	};
    key <AC03> {	[	  d,	D		]	};
    key <AC04> {	[	  f,	F		]	};
    key <AC05> {	[	  g,	G		]	};
    key <AC06> {	[	  h,	H		]	};
    key <AC07> {	[	  j,	J		]	};
    key <AC08> {	[	  k,	K		]	};
    key <AC09> {	[	  l,	L		]	};
    key <AC10> {	[ semicolon,	colon		]	};
    key <AC11> {	[ apostrophe,	quotedbl	]	};

    key <AB01> {	[	  z,	Z 		]	};
    key <AB02> {	[	  x,	X		]	};
    key <AB03> {	[	  c,	C		]	};
    key <AB04> {	[	  v,	V		]	};
    key <AB05> {	[	  b,	B		]	};
    key <AB06> {	[	  n,	N		]	};
    key <AB07> {	[	  m,	M		]	};
    key <AB08> {	[     comma,	less		]	};
    key <AB09> {	[    period,	greater		]	};
    key <AB10> {	[     slash,	question	]	};

    key <SPCE> {	[  space			]	};

    include "eurosign(e)"
    include "keypad(overlay)"

    key <KPEQ> {	[  equal			]	};
};

hidden
xkb_symbols "oldmac" {

    include "macintosh_vndr/us(extended)"

    // Begin "Function" section
    key <FK01> {	[  F1		]	};
    key <FK02> {	[  F2		]	};
    key <FK03> {	[  F3		]	};
    key <FK04> {	[  F4		]	};
    key <FK05> {	[  F5		]	};
    key <FK06> {	[  F6		]	};
    key <FK07> {	[  F7		]	};
    key <FK08> {	[  F8		]	};
    key <FK09> {	[  F9		]	};
    key <FK10> {	[  F10		]	};
    key <FK11> {	[  F11		]	};
    key <FK12> {	[  F12		]	};
    key <FK13> {	[  Print	]	};
    key <FK14> {	[  Scroll_Lock	]	};
    key <FK15> {	[  Pause	]	};
    // End "Function" section

    // Begin "Editing" section
    key  <INS> {	[  Insert	]	};
    key <HOME> {	[  Home		]	};
    key <PGUP> {	[  Prior	]	};
    key <DELE> {	[  Delete	]	};
    key  <END> {	[  End		]	};
    key <PGDN> {	[  Next		]	};

    key   <UP> {	[  Up		]	};
    key <LEFT> {	[  Left		]	};
    key <DOWN> {	[  Down		]	};
    key <RGHT> {	[  Right	]	};
    // End "Editing" section

    key <BKSP> {	[ BackSpace	]	};
    key  <TAB> {	[ Tab,	ISO_Left_Tab ]	};
    key <RTRN> {	[ Return	]	};
    key <CAPS> {	[ Caps_Lock	]	};
    key <NMLK> {	[ Num_Lock, Pointer_EnableKeys ] };

    // Begin "Modifier" section
    key <LFSH> {	[  Shift_L	]	};
    key <RTSH> {	[  Shift_R	]	};
    key <LCTL> {	[  Control_L	]	};
    key <RCTL> {	[  Control_R	]	};
    key <LALT> {	[  Alt_L, Meta_L ]	};
    key <RALT> {	[  Alt_R, Meta_R ]	};
    key <LWIN> {	[  Super_L	]	};
    key <RWIN> {	[  Super_R	]	};
    // End "Modifier" section

    // begin modifier mappings
    modifier_map Shift  { Shift_L, Shift_R };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L, Control_R };
    modifier_map Mod2   { Num_Lock };

    //  Fake keys for virtual<->real modifiers mapping 
    key <LVL3> {	[ ISO_Level3_Shift	]	};
    key <MDSW> {	[ Mode_switch 		]	};
    modifier_map Mod5   { <LVL3>, <MDSW> };

    key <ALT>  {	[ NoSymbol, Alt_L	]	};
    modifier_map Mod1   { <ALT>, <LALT> };

    key <META> {	[ NoSymbol, Meta_L	]	};
    modifier_map Mod1   { <META> };

    key <SUPR> {	[ NoSymbol, Super_L	]	};
    modifier_map Mod4   { <SUPR> };

    key <HYPR> {	[ NoSymbol, Hyper_L	]	};
    modifier_map Mod4   { <HYPR> };
    // end modifier mappings

};
default partial alphanumeric_keys 
xkb_symbols "basic" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple U.K. keyboard layout

    include "macintosh_vndr/us"

    name[Group1]= "United Kingdom - Mac";

    key <AE02> {	[               2,              at,         EuroSign	]	};
    key <AE03> {	[               3,        sterling,       numbersign	]	};
    key <TLDE> {	[         section,       plusminus ]	};
    key <LSGT> {	[           grave,      asciitilde ]	};
    
    include "level3(ralt_switch)"
};
// mac version from Ricardo Cabral <bfe00991@mail.telepac.pt>

default partial alphanumeric_keys 
xkb_symbols "basic" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple Portuguese keyboard.

    include "latin"

    name[Group1]= "Portugal - Mac";

    key <LSGT> {	[	     less,	   greater, 	      bar,       brokenbar	]	};
    key <AE02> {	[               2,	  quotedbl, 	       at,       oneeighth	]	};
    key <AE03> {	[               3,	numbersign,      sterling,        sterling     	]	};
    key <AE04> {	[               4,	    dollar,       section,          dollar	]	};
    key <AE06> {	[               6,       ampersand     	]	};
    key <AE07> {	[               7,           slash     	]	};
    key <AE08> {	[               8,       parenleft,      bracketleft,       braceleft     	]	};
    key <AE09> {	[               9,      parenright,     bracketright,      braceright     	]	};
    key <AE10> {	[               0,           equal      ]	};
    key <AE11> {	[      apostrophe,        question      ]	};
    key <AE12> {	[	     plus,        asterisk,             dead_diaeresis             ]	};
    key <AB08> {	[           comma,       semicolon     	]	};
    key <AB09> {	[          period,           colon      ]	};
    key <AB10> {	[           minus,      underscore      ]	};
    key <AC10> {	[        ccedilla,        Ccedilla      ]	};
    key <AC11> {	[      dead_tilde, dead_circumflex	]	};
    key <AC12> {	[       backslash,	       bar     	]	};
    key <AD11> {	[       masculine,     ordfeminine      ]	};
    key <AD12> {	[      dead_acute,      dead_grave 	]	};

    include "eurosign(e)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys 
xkb_symbols "Sundeadkeys" {
    include "macintosh_vndr/pt(basic)" // for consistent naming
    name[Group1]= "Portugal - Mac, Sun dead keys";
    
    key <AE12> {	[	     plus,        asterisk,  SunFA_Diaeresis, SunFA_Diaeresis      ]	};
    key <AC11> {	[     SunFA_Tilde,    SunFA_Circum	]	};
    key <AD12> {	[     SunFA_Acute,     SunFA_Grave 	]	};
};

partial alphanumeric_keys 
xkb_symbols "sundeadkeys" {
    include "macintosh_vndr/pt(Sundeadkeys)" // for consistent naming
};

partial alphanumeric_keys 
xkb_symbols "nodeadkeys" {
    include "macintosh_vndr/pt(basic)" // for consistent naming
    name[Group1]= "Portugal - Mac, no dead keys";

    key <AE12> {	[	     plus,        asterisk, 	 quotedbl,        quotedbl      ]	};
    key <AC11> {	[      asciitilde,     asciicircum	]	};
    key <AD12> {	[	    acute,           grave 	]	};
};
default partial alphanumeric_keys 
xkb_symbols "basic" {

    include "latin"

    name[Group1]= "Netherlands - Mac";

    include "level3(ralt_switch)"
};
//
// Keyboard modification for Apple keyboards
//

default partial modifier_keys
xkb_symbols "extended" {

    key <KPEQ> { [ KP_Equal ] }; 

// The key in the PC's Insert position is sometimes engraved Help (at least
// in Switzerland and Great Britain), with Insert sometimes above. But in the
// US and Canada, it remains Insert. So this should probably be an XkbOption,
// but I have to do more research.
// Perhaps Help should be the primary symbol with Insert in the 1st shift-level
//    key  <INS> { [ Help, Insert ] };
// The keys next to F12, labeled F13, F14, & F15 generate codes that XFree86
// claims not to generate. I think they should be equivalent to the PC keys
// Print Screen / SysRq, Scroll Lock, and Pause. Linux kernel bug?
//    key <PRSC> { [ F13 ] }; // should be keycode 93 or
//    key <FK13> { [ F13 ] }; // should be keycode 118
//    key <SCLK> { [ F14 ] }; // should be keycode 123 or
//    key <FK14> { [ F14 ] }; // should be keycode 119
//    key <PAUS> { [ F15 ] }; // should be keycode 127 or
//    key <FK15> { [ F15 ] }; // should be keycode 120
};

partial modifier_keys
xkb_symbols "laptop" {

    include "macintosh_vndr/apple(extended)"

    // The real numlock key on the iBook (shared with F5) works internally to
    // the keyboard. It illuminates the Num_Lock led and locks the fn-key to
    // type only the keypad keys on the letter keys (U=4, I=5, O=6, P=*, etc.).
    // The key in the Num_lock position is engraved with Clear.
    override key <NMLK> { [ Clear ] };
    // The key engraved Delete sends BKSP. To get Delete, use Shift-Delete
    override key <BKSP> { [ BackSpace, Delete ] };
    // These keyboards only generate a <RALT> when pressing fn+Alt. This makes
    // it impossible to get to the third shift level on keys that are on
    // the fn-keypad, so use the Enter key (right of <SPC>) for Mode_switch,
    // and use fn+Enter (Apple's code for Menu) for KP_Enter.
    replace key <KPEN> { [ ISO_Level3_Shift ] };
    modifier_map Mod5  { ISO_Level3_Shift };	
    // Linux kernel bug with Menu on macs means this does not work yet
//    replace key <MENU> { [ KP_Enter ] }; // should be keycode 117
};

partial modifier_keys
xkb_symbols "laptop_bad_switch" {
    // Kept for backward compatibility
    include "macintosh_vndr/apple(laptop)"
};

// Long Aluminium Keyboards
partial function_keys
xkb_symbols "alukbd" {
    // The base is a inet PC keyboard
    include "pc"

    // Additional Fxx keys
    key <FK13> { [ F13 ] };
    key <FK14> { [ F14 ] };
    key <FK15> { [ F15 ] };
    key <FK16> { [ F16 ] };
    key <FK17> { [ F17 ] };
    key <FK18> { [ F18 ] };
    key <FK19> { [ F19 ] };

    // On aluminium keyboards, Num_Lock is replace by Clear
    replace key <NMLK> { [ Clear ] };
    // CAPS key is always Caps_Lock, even for JIS keyboards
    replace key <CAPS> { [ Caps_Lock ] };

    // F1..F12 are multimedia keys when used with the 'Fn' key
    // Make those multimedia actions available via ISO_Level3_Shift too,
    // it is useful when the Fn key is remapped to something else (e.g. Insert)
    key <FK01> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, XF86KbdBrightnessDown, NoSymbol, XF86_Switch_VT_1 ]
    };
    key <FK02> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, XF86KbdBrightnessUp, NoSymbol, XF86_Switch_VT_2 ]
    };
    key <FK03> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, NoSymbol, NoSymbol, XF86_Switch_VT_3 ]
    };
    key <FK04> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, NoSymbol, NoSymbol, XF86_Switch_VT_4 ]
    };
    key <FK05> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, NoSymbol, NoSymbol, XF86_Switch_VT_5 ]
    };
    key <FK06> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, NoSymbol, NoSymbol, XF86_Switch_VT_6 ]
    };
    key <FK07> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, XF86AudioPrev, NoSymbol, XF86_Switch_VT_7 ]
    };
    key <FK08> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, XF86AudioPlay, NoSymbol, XF86_Switch_VT_8 ]
    };
    key <FK09> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, XF86AudioNext, NoSymbol, XF86_Switch_VT_9 ]
    };
    key <FK10> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, XF86AudioMute, NoSymbol, XF86_Switch_VT_10 ]
    };
    key <FK11> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, XF86AudioLowerVolume, NoSymbol, XF86_Switch_VT_11 ]
    };
    key <FK12> {
      type= "FOUR_LEVEL_X",
      symbols[Group1]= [ NoSymbol, XF86AudioRaiseVolume, NoSymbol, XF86_Switch_VT_12 ]
    };
};

// Aluminium Keyboard: make F13, F14, F15 PC-ish (Print, Scroll_Lock, Pause)
partial function_keys keypad_keys
xkb_symbols "alupckeys" {
    key <FK13> {
      type= "PC_ALT_LEVEL2",
      symbols[Group1]= [ Print, Sys_Req ]
    };
    key <FK14> { [ Scroll_Lock ] };
    key <FK15> {
      type= "PC_CONTROL_LEVEL2",
      symbols[Group1]= [ Pause, Break ]
    };
    override key <NMLK> { [ Num_Lock, Pointer_EnableKeys ] };
};
//
// This file describes the differences between a Macintosh US Extended
// keymap and an Icelandic keyboard layout in the style of Mac OS and Mac OS X
//
// Copyright (C) 2004, 2006 Ævar Arnfjörð Bjarmason <avarab@gmail.com>
//
// Permission to use, copy, modify, distribute, and sell this software and its
// documentation for any purpose is hereby granted without fee, provided that
// the above copyright notice appear in all copies and that both that
// copyright notice and this permission notice appear in supporting
// documentation.
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
// Except as contained in this notice, the name of a copyright holder shall
// not be used in advertising or otherwise to promote the sale, use or
// other dealings in this Software without prior written authorization of
// the copyright holder.
//
// = HISTORY
// * 2004-09-28:
//   Initial cleanroom writing of the keymap, I just booted Mac OS X, opened
//   TextEdit.app and wrote down what the value produced by each key was when I
//   pressed it, a for a, A for shift + a, å for lalt + a etc and made the
//   keymap from that information
//
// * 2006-01-14:
//   Revised the comments in the file
//
// = NOTES
// * 20 characters in this keymap have no named character defined in
//   include/keysymdef.h and as a result their Unicode code points in
//   hexadecimal are listed here, these can be generated with the following
//   perl command:
//     $ perl -CA -e 'printf "U%x\n", ord shift' Æ
//   and converted back like:
//     $ perl -CO -le '$_=shift;s/[^a-f0-9]//ig;print chr hex' Uc6
// * The Apple logo appears twice on this keymap like the Mac OS and Mac OS X
//   keymaps. In the MacRoman encoding it has the code point 0xF0 (240) but it
//   has no assigned code point in Unicode, the code point Apple uses for it is
//   U+F8FF (63743) which is in the BMP's Private Use Area (U+E000–U+F8FF)
// * This keymap has only been tested on a PowerBook6,5 (iBook G4) but it
//   should work on other Apple laptop models which use the same keyboard
//   layout. It will probably work on standard sized keyboards with little or
//   no modification but it might not support them fully, please report if
//   you're able to get it running with such a keyboard

default partial alphanumeric_keys
xkb_symbols "basic" {
    name[Group1]= "Iceland - Mac";

	//-- Row 5 (E) --//
	key <TLDE> {	[	sterling,	section, 	UF8FF,		apostrophe	]	};
	key <AE01> {	[	1,		exclam, 	exclamdown,	VoidSymbol	]	};
	key <AE02> {	[	2,		quotedbl, 	at,		VoidSymbol	]	};
	key <AE03> {	[	3,		numbersign, 	U2122,		sterling	]	};
	key <AE04> {	[	4,		dollar, 	U00A2,		EuroSign	]	};
	key <AE05> {	[	5,		percent, 	U2030,		infinity	]	};
	key <AE06> {	[	6,		ampersand, 	asciicircum,	U2044		]	};
	key <AE07> {	[	7,		slash, 	backslash,	U00F7		]	};
	key <AE08> {	[	8,		parenleft, 	bracketleft,	braceleft	]	};
	key <AE09> {	[	9,		parenright, 	bracketright,	braceright	]	};
	key <AE10> {	[	0,		equal, 	U2260,		U2248		]	};
	key <AE11> {	[	odiaeresis,	Odiaeresis, 	oslash,		Ooblique	]	};
	key <AE12> {	[	minus,		underscore, 	endash,		emdash		]	};

	
	//-- Row 4 (D) --//
	key <AD01> {	[	q,		Q, 	paragraph,	VoidSymbol	]	};
	key <AD02> {	[	w,		W, 	U2211,		VoidSymbol	]	};
	key <AD03> {	[	e,		E, 	dead_grave,	VoidSymbol	]	};
	key <AD04> {	[	r,		R, 	registered,	VoidSymbol	]	};
	key <AD05> {	[	t,		T, 	degree,		VoidSymbol	]	};
	key <AD06> {	[	y,		Y, 	yen,		VoidSymbol	]	};
	key <AD07> {	[	u,		U, 	dead_diaeresis,	VoidSymbol	]	};
	key <AD08> {	[	i,		I, 	U0131,		U00AA		]	};
	key <AD09> {	[	o,		O, 	dead_circumflex,U00BA		]	};
	key <AD10> {	[	p,		P, 	Greek_pi,	Greek_PI	]	};
	key <AD11> {	[	eth,		Eth, 	U201e,		U201c		]	};
	key <AD12> {	[	apostrophe,	question, 	questiondown,	U00B7		]	};
	
	
	//-- Row 3 (C) --//
	key <AC01> {	[	a,		A, 	aring,		Aring		]	};
	key <AC02> {	[	s,		S, 	ssharp,		abovedot	]	};
	key <AC03> {	[	d,		D, 	U2202,		U2DA		]	};
	key <AC04> {	[	f,		F, 	U192,		macron		]	};
	key <AC05> {	[	g,		G, 	copyright,	breve		]	};
	key <AC06> {	[	h,		H, 	bar,		VoidSymbol	]	};
	key <AC07> {	[	j,		J, 	U2206,		U2dd		]	};
	key <AC08> {	[	k,		K, 	U00AC,		VoidSymbol	]	};
	key <AC09> {	[	l,		L, 	U2026,		caron		]	};
	key <AC10> {	[	ae,		AE, 	oe,		OE		]	};
	key <AC11> {	[	dead_acute,	dead_diaeresis, 	U201A,		U2018		]	};
	key <BKSL> {	[	plus,		asterisk, 	U2022,		plusminus	]	};
	
	
	//-- Row 2  (B) --//
	key <LSGT> {	[	less,		greater, 	section,	UF8FF		]	};
	key <AB01> {	[	z,		Z, 	U3A9,		VoidSymbol	]	};
	key <AB02> {	[	x,		X, 	asciitilde,	VoidSymbol	]	};
	key <AB03> {	[	c,		C, 	ccedilla,	Ccedilla	]	};
	key <AB04> {	[	v,		V, 	U221A,		U25CA		]	};
	key <AB05> {	[	b,		B, 	U222B,		VoidSymbol	]	};
	key <AB06> {	[	n,		N, 	dead_tilde,	VoidSymbol	]	};
	key <AB07> {	[	m,		M, 	U00B5,		VoidSymbol	]	};
	key <AB08> {	[	comma,		semicolon, 	lessthanequal,	guillemotleft	]	};
	key <AB09> {	[	period,		colon, 	greaterthanequal,guillemotright	]	};
	key <AB10> {	[	thorn,		Thorn, 	U2019,		U201d		]	};

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "nodeadkeys" {
    include	"macintosh_vndr/is(basic)" // for consistent naming
    name[Group1]= "Iceland - Mac, no dead keys";
};
default partial alphanumeric_keys 
xkb_symbols "basic" {

    // Describes the differences between a very simple en_US
    // keyboard and a very simple Swedish(Sweden) keyboard.

    include "latin"

    name[Group1]= "Sweden - Mac";

    key <TLDE> {	[         section,         degree	]	};

    key <AE01> {	[               1,          exclam,        copyright,      exclamdown	]	};
    key <AE02> {	[               2,        quotedbl,               at,       oneeighth	]	};
    key <AE03> {	[               3,      numbersign,         sterling,             yen	]	};
    key <AE04> {	[               4,        currency, 	      dollar,	         cent	]	};
    key <AE06> {	[               6,       ampersand     	]	};
    key <AE07> {	[               7,           slash, 	         bar,       backslash	]	};
    key <AE08> {	[               8,       parenleft,      bracketleft,       braceleft	]	};
    key <AE09> {	[               9,      parenright,     bracketright,      braceright	]	};
    key <AB08> {	[           comma,       semicolon     	]	};
    key <AE10> {	[               0,           equal     	]	};
    key <AE11> {	[            plus,        question      ]	};
    key <AE12> {	[           acute,           grave	]	};
    key <AB09> {	[          period,           colon     	]	};
    key <AB10> {	[           minus,      underscore     	]	};
    key <AC10> {	[      odiaeresis,      Odiaeresis, 	   oslash,	     Ooblique	]	};
    key <AC11> {	[      adiaeresis,      Adiaeresis,            ae,		   AE	]	};
    key <AD11> {	[	    aring,           Aring     	]	};
    key <AD12> {	[       diaeresis,     asciicircum, 	asciitilde			]	};
    key <BKSL> {	[      apostrophe,        asterisk,            at			]	};
    key <LSGT> {	[            less,         greater,           bar,       brokenbar      ]       };

    include "kpdl(comma)"
    include "eurosign(e)"
    include "level3(ralt_switch)"
};


partial alphanumeric_keys 
xkb_symbols "nodeadkeys" {
    include "macintosh_vndr/se(basic)" // for consistent naming
    name[Group1]= "Sweden - Mac, no dead keys";
};
default partial alphanumeric_keys 
xkb_symbols "basic" {
    include "macintosh_vndr/se(basic)" // for consistent naming
    name[Group1]= "Finland - Mac";
};

partial alphanumeric_keys 
xkb_symbols "nodeadkeys" {
    include "macintosh_vndr/se(basic)"	// for consistent naming
    name[Group1]= "Finland - Mac, no dead keys";
};
default partial alphanumeric_keys 
xkb_symbols "basic" {

    // Describes the differences between a very simple en_US
    // keyboard and a Danish keyboard with dead key support
    // and all of ISO-8859-1 characters available.

    include "latin"
    name[Group1]= "Denmark - Mac";

    key <TLDE> {	[  onehalf,         section,    threequarters,       paragraph	]};
    key <LSGT> {	[     less,         greater,        backslash,         notsign	]};
    key <SPCE> {	[    space,           space,     nobreakspace,    nobreakspace	]};
    key <AE01> {	[        1,          exclam,       exclamdown,     onesuperior	]};
    key <AE02> {	[        2,        quotedbl,               at,     twosuperior	]};
    key <AE03> {	[        3,      numbersign,         sterling,   threesuperior	]};
    key <AE04> {	[        4,        EuroSign,           dollar,      onequarter	]};
    key <AE05> {	[        5,         percent,         NoSymbol,            cent	]};
    key <AE06> {	[        6,       ampersand,              yen,        NoSymbol	]};
    key <AE07> {	[        7,           slash,        braceleft,        division	]};
    key <AE08> {	[        8,       parenleft,      bracketleft,   guillemotleft	]};
    key <AE09> {	[        9,      parenright,     bracketright,  guillemotright	]};
    key <AE10> {	[        0,           equal,       braceright,          degree	]};
    key <AE11> {	[     plus,        question,        plusminus,    questiondown	]};
    key <AE12> {   	[ dead_acute,    dead_grave,              bar,       brokenbar	]};
    key <AB03> {	[        c,               C,        copyright,        NoSymbol	]};
    key <AB08> {	[    comma,       semicolon,     dead_cedilla,     dead_ogonek	]};
    key <AB09> {	[   period,           colon,   periodcentered,   dead_abovedot	]};
    key <AB10> {	[    minus,      underscore,           hyphen,          macron	]};
    key <AC01> {	[        a,               A,      ordfeminine,       masculine  ]};
    key <AC03> {	[        d,               D,              eth,             ETH  ]};
    key <AC10> {	[	ae,               AE	]};
    key <AC11> {	[   oslash,        Ooblique 	]};
    key <AD03> {	[        e,               E,         EuroSign,            cent  ]};
    key <AD04> {	[        r,               R,       registered,        NoSymbol  ]};
    key <AD05> {	[        t,               T,            thorn,           THORN  ]};
    key <AD08> {	[        i,               I,         NoSymbol,        NoSymbol  ]};
    key <AD09> {	[        o,               O,               oe,              OE  ]};
    key <AD11> {	[    aring,           Aring 	]};
    key <AD12> {	[ dead_diaeresis, dead_circumflex, dead_tilde,      dead_caron	]};
    key <BKSL> {	[ apostrophe,      asterisk, dead_doubleacute,        multiply	]};

    include "eurosign(e)"
    include "level3(ralt_switch)"
};

partial alphanumeric_keys 
xkb_symbols "nodeadkeys" {
    include "macintosh_vndr/dk(basic)"
    name[Group1]= "Denmark - Mac, no dead keys";

    key <AE12> {	[           acute,           grave,              bar,          ogonek	]	};
    key <AD12> {	[       diaeresis,     asciicircum,       asciitilde,     dead_macron	]      	};
};

partial alphanumeric_keys
xkb_symbols "macbookpro" {

    include "level3(win_switch)"
    include "macintosh_vndr/dk(basic)"

    name[Group1]= "Denmark - Mac, MacBook Pro";

    key <BKSL>  { [apostrophe, asterisk,        at,        at ] };
    key <TLDE>  { [    dollar,  section,    dollar,    dollar ] };
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
// US/ASCII layout for a HP non-PC keyboard
xkb_symbols "hil" {
    include "us(basic)"

    // A few alphanumeric keys are different
    key <TLDE> { [ grave,	asciitilde	]};
    key <RTSH> { [ Shift_R	]};
    key <LALT> { [ Meta_L	]};
    key <RALT> { [ Meta_R	]};
    // End alphanumeric section

    // Begin "Function" section
    key <BRK>  { [ Break	]};
    key <STOP> { [ Cancel	]};
    key <FK01> { [ F1	]	};
    key <FK02> { [ F2	]	};
    key <FK03> { [ F3	]	};
    key <FK04> { [ F4	]	};
    key <MENU> { [ Menu	]	};
    key <SYST> { [ hpSystem	]};
    key <FK05> { [ F5	]	};
    key <FK06> { [ F6	]	};
    key <FK07> { [ F7	]	};
    key <FK08> { [ F8	]	};
    key <CLRL> { [ hpClearLine	]};
    key <CLR>  { [ Clear	]};
    key <FK09> { [ F9	]	};
    key <FK10> { [ F10	]	};
    key <FK11> { [ F11	]	};
    key <FK12> { [ F12	]	};
    // End "Function" section

    // Begin "Editing" section
    key <PRSC> { [ Execute, Print	]};
    key <INSL> { [ hpInsertLine	]};
    key <DELL> { [ hpDeleteLine	]};
    key <INSC> { [ hpInsertChar	]};
    key <DELC> { [ hpDeleteChar	]};
    key <HOME> { [ Home	]	};
    key <PGUP> { [ Prior ]	};
    key <PGDN> { [ Next ]	};
    key <SELE> { [ Select ]	};
    key <LEFT> { [ Left	]	};
    key <DOWN> { [ Down	]	};
    key <UP>   { [ Up	]	};
    key <RGHT> { [ Right	]};
    // End "Editing" section

    // Begin "Keypad" section
    key <KPMU> { [ KP_Multiply	]};
    key <KPDV> { [ KP_Divide	]};
    key <KPAD> { [ KP_Add	]};
    key <KPSU> { [ KP_Subtract	]};

    key  <KP7> { [ KP_7	]	};
    key  <KP8> { [ KP_8	]	};
    key  <KP9> { [ KP_9	]	};
    key <KPEN> { [ KP_Enter	]}; 

    key  <KP4> { [ KP_4	]	};
    key  <KP5> { [ KP_5	]	};
    key  <KP6> { [ KP_6	]	};
    key <KPSP> { [ KP_Separator	]};

    key  <KP1> { [ KP_1	]	};
    key  <KP2> { [ KP_2	]	};
    key  <KP3> { [ KP_3	]	};
    key <KPTB> { [ KP_Tab	]}; 

    key  <KP0> { [ KP_0	]	};
    key <KPDL> { [ KP_Decimal ]	};
    // End "Keypad" section

    modifier_map Shift  	{ Shift_R };
    modifier_map Mod1   	{ Meta_L, Meta_R };
    modifier_map Mod2   	{ Alt_L };
    modifier_map Mod3   	{ Mode_switch };
};
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log: lk,v 
// Revision 1.2  1996/06/18  09:10:09  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.2.2  1995/03/10  17:16:52  William_Walker
// 	Rename to avoid name conflicts with XKB stuff
// 	[1995/03/10  17:10:33  William_Walker]
//
// Revision 1.1.2.2  1994/10/31  15:22:00  William_Walker
// 	New experimental version.
// 	[1994/10/31  14:48:37  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: lk,v  Revision: 1.2  (DEC) Date: 1996/01/24 12:14:58
// 
// Symbols common to all the LK-style keyboards.
//
default xkb_symbols "common" {

    // Modifier mappings
    modifier_map Shift  	{ Shift_L, 	Shift_R	  };
    modifier_map Lock   	{ Caps_Lock };
    modifier_map Control	{ Control_L, Control_R };
    modifier_map Mod1		{ Alt_L, Alt_R, Meta_L, Meta_R };
    modifier_map Mod2		{ Num_Lock };
    modifier_map Mod3   	{ Scroll_Lock };

    // Additional alphanumeric keys
    key <LSGT>		{ [ less,	greater		] };
    key <LALT>		{ [ Alt_L,	Meta_L		] };

    // "Function" keys
    key <FK01>		{ [ F1				] };
    key <FK02>		{ [ F2				] };
    key <FK03>		{ [ F3				] };
    key <FK04>		{ [ F4				] };
    key <FK05>		{ [ F5				] };
    key <FK06>		{ [ F6				] };
    key <FK07>		{ [ F7				] };
    key <FK08>		{ [ F8				] };
    key <FK09>		{ [ F9				] };
    key <FK10>		{ [ F10				] };
    key <FK11>		{ [ Escape,	F11		] };
    key <FK12>		{ [ F12				] };
    key <FK13>		{ [ F13				] };
    key <FK14>		{ [ F14				] };
    key <FK17>		{ [ F17				] };
    key <FK18>		{ [ F18				] };
    key <FK19>		{ [ F19				] };
    key <FK20>		{ [ F20				] };

    // "Editing" keys
    key <HELP>		{ [ Help			] };
    key <DO>		{ [ Menu			] };
    key <FIND>		{ [ Find			] };
    key <INS>		{ [ Insert			] };
    key <DELE>		{ [ Delete			] };
    key <SELE>		{ [ Select			] };
    key <PGUP>		{ [ Prior			] };
    key <PGDN>		{ [ Next			] };

    key <UP>		{ [ Up				] };
    key <LEFT>		{ [ Left			] };
    key <DOWN>		{ [ Down			] };
    key <RGHT>		{ [ Right			] };

    // "Keypad" keys
    key <KPF1>		{
				type= "SHIFT+ALT",
				symbols[Group1]=[ KP_F1,Pointer_EnableKeys ]
			};
    key <KPF2>		{ [ KP_F2			] };
    key <KPF3>		{ [ KP_F3			] };
    key <KPF4>		{ [ KP_F4			] };

    key <KPCO>		{ [ KP_Separator		] };
    key <KPSU>		{ [ KP_Subtract			] };

    key <KP7>		{ [ KP_7			] };
    key <KP8>		{ [ KP_8			] };
    key <KP9>		{ [ KP_9			] };

    key <KP4>		{ [ KP_4			] };
    key <KP5>		{ [ KP_5			] };
    key <KP6>		{ [ KP_6			] };

    key <KP1>		{ [ KP_1			] };
    key <KP2>		{ [ KP_2			] };
    key <KP3>		{ [ KP_3			] };
    key <KPEN>		{ [ KP_Enter			] };

    key <KP0>		{ [ KP_0			] };
    key <KPDL>		{ [ KP_Decimal			] };
};

xkb_symbols "lk401" {
    include "symbols/digital_vndr/lk(common)"
    key <RALT>              { [ Alt_R,      Meta_R          ] };
    key <LCMP>              { [ Multi_key                   ] };
    key <RCMP>              { [ Multi_key                   ] };
};
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log
// Revision 1.2  1996/06/18  09:10:19  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.6.2  1995/12/19  19:56:39  William_Walker
// 	Update to XKB 0.65
// 	[1995/12/17  02:37:47  William_Walker]
//
// Revision 1.1.2.5  1995/07/11  21:20:50  William_Walker
// 	Make RALT act as RALT
// 	[1995/07/11  21:18:28  William_Walker]
// 
// Revision 1.1.2.4  1995/06/27  12:18:41  William_Walker
// 	Add LK201 and LK450 support as well as TW and DP variants.
// 	[1995/06/26  20:30:37  William_Walker]
// 
// Revision 1.1.2.3  1995/06/09	 20:55:21  William_Walker
// 	Add VT105 layout support and ISO group support
// 	[1995/06/09  20:43:09  William_Walker]
// 
// Revision 1.1.2.2  1995/06/05	 19:25:04  William_Walker
// 	New file.  I love keymaps.
// 	[1995/06/05  18:17:58  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: vt  Revision: /main/3  (DEC) Date: 1996/01/24 12:15:08 
// 
xkb_symbols "vt105" {

    // Modifier mappings
    //
    modifier_map Shift		{ Shift_L, Shift_R		};
    modifier_map Lock		{ Caps_Lock			};
    modifier_map Control	{ Control_L, Control_R		};
    modifier_map Mod1		{ Alt_L, Alt_R, Meta_L, Meta_R	};
    modifier_map Mod3		{ Mode_switch			};

    // Common keys
    //
    key <BKSP> {       [	  Delete ] };
    key	 <TAB> {       [	     Tab ] };
    key <RTRN> {       [	  Return ] };
    key <LCTL> {       [       Control_L ] };
    key <CAPS> {       [       Caps_Lock ] };
    key <LFSH> {       [	 Shift_L ] };
    key <RTSH> {       [	 Shift_R ] };
    key <LCMP> {       [   Alt_L, Meta_L ] };
    key <SPCE> {       [	   space ] };

    // "Function" keys
    //
    key <FK01> {       [	       F1 ] };
    key <FK02> {       [	       F2 ] };
    key <FK03> {       [	       F3 ] };
    key <FK04> {       [	       F4 ] };
    key <FK05> {       [	       F5 ] };
    key <FK06> {       [	       F6 ] };
    key <FK07> {       [	       F7 ] };
    key <FK08> {       [	       F8 ] };
    key <FK09> {       [	       F9 ] };
    key <FK10> {       [	      F10 ] };
    key <FK11> {       [	   Escape,	      F11 ] };
    key <FK12> {       [	      F12 ] };
    key <FK13> {       [	      F13 ] };
    key <FK14> {       [	      F14 ] };
    key <FK17> {       [	      F17 ] };
    key <FK18> {       [	      F18 ] };
    key <FK19> {       [	      F19 ] };
    key <FK20> {       [	      F20 ] };

    // "Editing" keys
    //
    key <HELP> {       [	    Help ] };
    key	  <DO> {       [	    Menu ] };
    key <FIND> {       [	    Find ] };
    key	 <INS> {       [	  Insert ] };
    key <DELE> {       [       apLineDel ] };
    key <SELE> {       [	  Select ] };
    key <PGUP> {       [	   Prior ] };
    key <PGDN> {       [	    Next ] };

    key	  <UP> {       [	      Up ] };
    key <LEFT> {       [	    Left ] };
    key <DOWN> {       [	    Down ] };
    key <RGHT> {       [	   Right ] };

    // "Keypad" keys
    //
    key <KPF1> {
	type= "SHIFT+ALT",
	symbols[Group1]= [	     KP_F1,Pointer_EnableKeys ]
    };
    key <KPF2> {       [	   KP_F2 ] };
    key <KPF3> {       [	   KP_F3 ] };
    key <KPF4> {       [	   KP_F4 ] };

    key	 <KP7> {       [	    KP_7 ] };
    key	 <KP8> {       [	    KP_8 ] };
    key	 <KP9> {       [	    KP_9 ] };
    key <KPSU> {       [     KP_Subtract ] };

    key	 <KP4> {       [	    KP_4 ] };
    key	 <KP5> {       [	    KP_5 ] };
    key	 <KP6> {       [	    KP_6 ] };
    key <KPCO> {       [    KP_Separator ] };

    key	 <KP1> {       [	    KP_1 ] };
    key	 <KP2> {       [	    KP_2 ] };
    key	 <KP3> {       [	    KP_3 ] };
    key <KPEN> {       [	KP_Enter ] };

    key	 <KP0> {       [	    KP_0 ] };
    key <KPDL> {       [      KP_Decimal ] };

    // Key to support Lock-Down Modifier descriptions for R5
    //
    key	 <LDM> {       [	NoSymbol ] };
};

xkb_symbols "vt108" {

    include "digital_vndr/vt(vt105)"

    replace key <LCMP> { [ Mode_switch ] };

    key <LALT> {       [	   Alt_L,	   Meta_L ] };
    key <RALT> {       [	   Alt_R,	   Meta_R ] };
    key <RCMP> {       [       Multi_key ] };
};
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log
// Revision 1.2  1996/06/18  09:10:12  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.6.4  1995/12/19  19:55:58  William_Walker
// 	Update to XKB 0.65
// 	[1995/12/17  02:37:07  William_Walker]
//
// Revision 1.1.6.3  1995/10/25  21:01:09  William_Walker
// 	Make sure we use DIN 2137 and VT510 Spec for Group Semantics
// 	[1995/10/23  15:49:03  William_Walker]
// 
// Revision 1.1.6.2  1995/08/07  17:40:40  William_Walker
// 	Upgrade XKB to protocol 0.62 (dual submit from decx11)
// 	[1995/08/06  14:06:32  William_Walker]
// 
// Revision 1.1.2.7  1995/08/05  15:25:57  William_Walker
// 	Sync up with Erik's pool.
// 	[1995/08/03  20:17:15  William_Walker]
// 
// Revision 1.1.2.6  1995/06/27  12:18:25  William_Walker
// 	Add LK201 and LK450 support as well as TW and DP variants.
// 	[1995/06/26  20:29:52  William_Walker]
// 
// Revision 1.1.2.5  1995/06/08	 17:10:28  William_Walker
// 	Make RALT default to Mode_switch
// 	[1995/06/08  17:08:50  William_Walker]
// 
// Revision 1.1.2.4  1995/06/05	 19:24:14  William_Walker
// 	New file.  I love keymaps.
// 	[1995/06/05  18:17:03  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: pc  Revision: /main/4  (DEC) Date: 1996/01/24 12:15:02 
// 

// **************************************************************
// *								*
// * The symbols common to all Extended PC layouts.		*
// *								*
// **************************************************************
xkb_symbols "pc" {

    // Modifier mappings
    //
    modifier_map Shift		{ Shift_L, Shift_R		};
    modifier_map Lock		{ Caps_Lock			};
    modifier_map Control	{ Control_L, Control_R		};
    modifier_map Mod1		{ Alt_L, Alt_R, Meta_L, Meta_R	};
    modifier_map Mod3		{ Mode_switch			};
    modifier_map Mod4		{ Num_Lock			};
    modifier_map Mod5		{ Scroll_Lock			};

    // Common keys
    //
    key <BKSP> {       [       BackSpace,	   Delete ] };
    key	 <TAB> {       [	     Tab,    ISO_Left_Tab ] };
    key <CAPS> {       [       Caps_Lock ] };
    key <RTRN> {       [	  Return ] };
    key <LFSH> {       [	 Shift_L ] };
    key <RTSH> {       [	 Shift_R ] };
    key <LCTL> {       [       Control_L ] };
    key <LALT> {       [	   Alt_L,	   Meta_L ] };
    key <SPCE> {       [	   space ] };
    key <RALT> {       [     Mode_switch ] };
    key <RCTL> {       [       Control_R ] };

    // "Function" keys
    //
    key	 <ESC> {       [	  Escape ] };
    key <FK01> {       [	      F1 ] };
    key <FK02> {       [	      F2 ] };
    key <FK03> {       [	      F3 ] };
    key <FK04> {       [	      F4 ] };
    key <FK05> {       [	      F5 ] };
    key <FK06> {       [	      F6 ] };
    key <FK07> {       [	      F7 ] };
    key <FK08> {       [	      F8 ] };
    key <FK09> {       [	      F9 ] };
    key <FK10> {       [	     F10 ] };
    key <FK11> {       [	     F11 ] };
    key <FK12> {       [	     F12 ] };
    key <PRSC> {
	type= "PC_ALT_LEVEL2",
	symbols[Group1]= [	     Print,	    Sys_Req ]
    };
    key <SCLK> {       [     Scroll_Lock ] };
    key <PAUS> {
	type= "PC_CONTROL_LEVEL2",
	symbols[Group1]= [	     Pause,	      Break ]
    };

    // "Editing" keys
    //
    key	 <INS> {       [	  Insert ] };
    key <HOME> {       [	    Home ] };
    key <PGUP> {       [	   Prior ] };
    key <DELE> {       [	  Delete ] };
    key	 <END> {       [	     End ] };
    key <PGDN> {       [	    Next ] };

    key	  <UP> {       [	      Up ] };
    key <LEFT> {       [	    Left ] };
    key <DOWN> {       [	    Down ] };
    key <RGHT> {       [	   Right ] };

    // "Keypad" keys
    //
    key <NMLK> {
	type= "SHIFT+ALT",
	symbols[Group1]= [	  Num_Lock,Pointer_EnableKeys]
    };
    key <KPDV> {       [       KP_Divide ] };
    key <KPMU> {       [     KP_Multiply ] };
    key <KPSU> {       [     KP_Subtract ] };

    key	 <KP7> {       [	 KP_Home,	     KP_7 ] };
    key	 <KP8> {       [	   KP_Up,	     KP_8 ] };
    key	 <KP9> {       [	KP_Prior,	     KP_9 ] };
    key <KPAD> {       [	  KP_Add ] };

    key	 <KP4> {       [	 KP_Left,	     KP_4 ] };
    key	 <KP5> {       [	    KP_5 ] };
    key	 <KP6> {       [	KP_Right,	     KP_6 ] };

    key	 <KP1> {       [	  KP_End,	     KP_1 ] };
    key	 <KP2> {       [	 KP_Down,	     KP_2 ] };
    key	 <KP3> {       [	 KP_Next,	     KP_3 ] };
    key <KPEN> {       [	KP_Enter ] };

    key	 <KP0> {       [       KP_Insert,	     KP_0 ] };
    key <KPDL> {       [       KP_Delete,      KP_Decimal ] };

    // Key to support Lock-Down Modifier descriptions for R5
    //
    key	 <LDM> {       [	NoSymbol ] };
};

xkb_symbols "pc104" {
    include "digital_vndr/pc(pc)"

    replace key <LALT> {       [       Alt_L ] };
    key	<LWIN> {       [	 Meta_L ] };
    key	<RWIN> {       [	 Meta_R ] };
    key	<MENU> {       [	 Menu   ] };
};
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log
// Revision 1.2  1996/06/18  09:10:16  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.6.3  1995/12/19  19:56:37  William_Walker
// 	Update to XKB 0.65
// 	[1995/12/17  02:37:44  William_Walker]
//
// Revision 1.1.6.2  1995/10/25  21:01:25  William_Walker
// 	Add pc104-key support
// 	[1995/10/23  15:46:27  William_Walker]
// 
// Revision 1.1.2.7  1995/06/27  12:18:40  William_Walker
// 	Add LK201 and LK450 support as well as TW and DP variants.
// 	[1995/06/26  20:30:33  William_Walker]
// 
// Revision 1.1.2.6  1995/06/09	 20:55:20  William_Walker
// 	Add VT105 layout support and ISO group support
// 	[1995/06/09  20:43:05  William_Walker]
// 
// Revision 1.1.2.5  1995/06/08	 21:05:49  William_Walker
// 	Use ISO_Next_Group instead of grouplock
// 	[1995/06/08  21:03:56  William_Walker]
// 
// Revision 1.1.2.4  1995/06/05	 19:25:00  William_Walker
// 	New file.  I love keymaps.
// 	[1995/06/05  18:17:54  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: us  Revision: /main/4  (DEC) Date: 1996/01/24 12:15:05 
// 

// **************************************************************
// *								*
// * Symbols for en_US.ISO8859-1 - English for U.S.		*
// *								*
// **************************************************************

xkb_symbols "us" {

    key <AE00> {       [	    grave,     asciitilde ] };
    key <AE01> {       [		1,	   exclam ] };
    key <AE02> {       [		2,	       at ] };
    key <AE03> {       [		3,     numbersign ] };
    key <AE04> {       [		4,	   dollar ] };
    key <AE05> {       [		5,	  percent ] };
    key <AE06> {       [		6,    asciicircum ] };
    key <AE07> {       [		7,	ampersand ] };
    key <AE08> {       [		8,	 asterisk ] };
    key <AE09> {       [		9,	parenleft ] };
    key <AE10> {       [		0,     parenright ] };
    key <AE11> {       [	    minus,     underscore ] };
    key <AE12> {       [	    equal,	     plus ] };

    key <AD01> {       [		q,		Q ] };
    key <AD02> {       [		w,		W ] };
    key <AD03> {       [		e,		E ] };
    key <AD04> {       [		r,		R ] };
    key <AD05> {       [		t,		T ] };
    key <AD06> {       [		y,		Y ] };
    key <AD07> {       [		u,		U ] };
    key <AD08> {       [		i,		I ] };
    key <AD09> {       [		o,		O ] };
    key <AD10> {       [		p,		P ] };
    key <AD11> {       [      bracketleft,	braceleft ] };
    key <AD12> {       [     bracketright,     braceright ] };

    key <AC01> {       [		a,		A ] };
    key <AC02> {       [		s,		S ] };
    key <AC03> {       [		d,		D ] };
    key <AC04> {       [		f,		F ] };
    key <AC05> {       [		g,		G ] };
    key <AC06> {       [		h,		H ] };
    key <AC07> {       [		j,		J ] };
    key <AC08> {       [		k,		K ] };
    key <AC09> {       [		l,		L ] };
    key <AC10> {       [	semicolon,	    colon ] };
    key <AC11> {       [       apostrophe,	 quotedbl ] };
    key <BKSL> {       [	backslash,	      bar ] };

    key <AB01> {       [		z,		Z ] };
    key <AB02> {       [		x,		X ] };
    key <AB03> {       [		c,		C ] };
    key <AB04> {       [		v,		V ] };
    key <AB05> {       [		b,		B ] };
    key <AB06> {       [		n,		N ] };
    key <AB07> {       [		m,		M ] };
    key <AB08> {       [	    comma,	     less ] };
    key <AB09> {       [	   period,	  greater ] };
    key <AB10> {       [	    slash,	 question ] };
};

// **************************************************************
// *								*
// * The VT105 layouts						*
// *								*
// * NOTES: The typewriter (TW) and dataprocessing (DP) keys	*
// *	    for the VT108 layout are identical for the US.	*
// *								*
// **************************************************************
xkb_symbols "vt105-tw" {
    include "digital_vndr/us(us)"
    include "digital_vndr/vt(vt105)"
    override key <AE03> { 
	symbols[Group1]= [ 3, numbersign ],
	symbols[Group2]= [ sterling ]
    };
    key <AB00> {       [	     less,	  greater ] };
};

xkb_symbols "vt105-dp" { include "digital_vndr/us(vt105-tw)" };
xkb_symbols "vt105"    { include "digital_vndr/us(vt105-tw)" };

// **************************************************************
// *								*
// * The VT108 layouts - based upon the LK401-AA		*
// *								*
// * NOTES: The typewriter (TW) and dataprocessing (DP) keys	*
// *	    for the VT108 layout are identical for the US.	*
// *								*
// **************************************************************
xkb_symbols "vt108-tw" {
    include "digital_vndr/us(us)"
    include "digital_vndr/vt(vt108)"
    replace key <LCMP> { [ Multi_key ] };
    override key <AE03> { 
	symbols[Group1]= [ 3, numbersign ],
	symbols[Group2]= [ sterling ]
    };
    key <AB00> {       [	     less,	  greater ] };
};

xkb_symbols "vt108-dp" { include "digital_vndr/us(vt108-tw)" };
xkb_symbols "vt108"    { include "digital_vndr/us(vt108-tw)" };

// **************************************************************
// *								*
// * The "unix" layouts	- based upon the LK421-AA		*
// *								*
// * NOTES: The "unix" keyboard emits the same keycodes as the	*
// *	    LK401, but is a shorter keyboard that uses an	*
// *	    "extend" key.  To make life easier, we map <AE00>	*
// *	    to Escape so users do not have to press Extend+F11	*
// *	    to get Escape.					*
// *								*
// **************************************************************
xkb_symbols "unix" {
    include "digital_vndr/us(vt108)"
    override key <AE00>	{ [ Escape ] };
    override key <AB00>	{ [ grave, asciitilde ] };
};

// **************************************************************
// *								*
// * The "pcxal" layouts					*
// *								*
// * NOTES: The pcxal layouts are pretty much standardized for	*
// *	    the US and use a 101-key keyboard.			*
// *								*
// **************************************************************
xkb_symbols "pcxalga" {
    include "digital_vndr/pc(pc)"
    include "digital_vndr/us(us)"
    replace key <RALT> { [ Alt_R, Meta_R ] };
};

xkb_symbols "pcxal"   { include "digital_vndr/us(pcxalga)" };
xkb_symbols "pcxalaa" { include "digital_vndr/us(pcxalga)" };
xkb_symbols "pcxalfa" { include "digital_vndr/us(pcxalga)" };
xkb_symbols "pcxalka" { include "digital_vndr/us(pcxalga)" };
xkb_symbols "lk44x"   { include "digital_vndr/us(pcxalga)" };

// **************************************************************
// *								*
// * The "pc104" layouts.					*
// *								*
// **************************************************************
xkb_symbols "pc104" {
    include "digital_vndr/pc(pc104)"
    include "digital_vndr/us(us)"
    replace key <RALT> { [ Alt_R ] };
};
default xkb_symbols "us" {

    name[Group1]= "US/ASCII";

    key <ESC>  {	[	Escape			]	};

    // Alphanumeric section
    key <AE01> {	[	  1,	exclam 		]	};
    key <AE02> {	[	  2,	at		]	};
    key <AE03> {	[	  3,	numbersign	]	};
    key <AE04> {	[	  4,	dollar		]	};
    key <AE05> {	[	  5,	percent		]	};
    key <AE06> {	[	  6,	asciicircum	]	};
    key <AE07> {	[	  7,	ampersand	]	};
    key <AE08> {	[	  8,	asterisk	]	};
    key <AE09> {	[	  9,	parenleft	]	};
    key <AE10> {	[	  0,	parenright	]	};
    key <AE11> {	[ minus,	underscore	]	};
    key <AE12> {	[ equal,	plus		]	};
    key <TLDE> {	[ grave,	asciitilde	]	};
    key <BKSP> {	[	BackSpace		]	};

    key  <TAB> {	[	Tab,	ISO_Left_Tab	]	};
    key <AD01> {	[	  q,	Q 		]	};
    key <AD02> {	[	  w,	W		]	};
    key <AD03> {	[	  e,	E		]	};
    key <AD04> {	[	  r,	R		]	};
    key <AD05> {	[	  t,	T		]	};
    key <AD06> {	[	  y,	Y		]	};
    key <AD07> {	[	  u,	U		]	};
    key <AD08> {	[	  i,	I		]	};
    key <AD09> {	[	  o,	O		]	};
    key <AD10> {	[	  p,	P		]	};
    key <AD11> {	[ bracketleft,	braceleft	]	};
    key <AD12> {	[ bracketright,	braceright	]	};
    key <RTRN> {	[	Return			]	};
    key <DELE> {	[	Delete			]	};

    key <LCTL> {	[	Control_L		]	};
    key <AC01> {	[	  a,	A 		]	};
    key <AC02> {	[	  s,	S		]	};
    key <AC03> {	[	  d,	D		]	};
    key <AC04> {	[	  f,	F		]	};
    key <AC05> {	[	  g,	G		]	};
    key <AC06> {	[	  h,	H		]	};
    key <AC07> {	[	  j,	J		]	};
    key <AC08> {	[	  k,	K		]	};
    key <AC09> {	[	  l,	L		]	};
    key <AC10> {	[ semicolon,	colon		]	};
    key <AC11> {	[ apostrophe,	quotedbl	]	};
    key <BKSL> {	[ backslash,	bar		]	};

    key <LFSH> {	[ 	 Shift_L		]	};
    key <AB01> {	[	  z,	Z 		]	};
    key <AB02> {	[	  x,	X		]	};
    key <AB03> {	[	  c,	C		]	};
    key <AB04> {	[	  v,	V		]	};
    key <AB05> {	[	  b,	B		]	};
    key <AB06> {	[	  n,	N		]	};
    key <AB07> {	[	  m,	M		]	};
    key <AB08> {	[ comma,	less		]	};
    key <AB09> {	[ period,	greater		]	};
    key <AB10> {	[ slash,	question	]	};
    key <RTSH> {	[	 Shift_R		]	};

    key <ALT>  {	[	 Meta_L			]	};
    key <SPCE> {	[	 space			]	};
    key <CAPS> {	[	 Caps_Lock		]	};
    // End alphanumeric section

    // Begin "Function" section
    key <FK01> {	[	F1		]	};
    key <FK02> {	[	F2		]	};
    key <FK03> {	[	F3		]	};
    key <FK04> {	[	F4		]	};
    key <FK05> {	[	F5		]	};
    key <FK06> {	[	F6		]	};
    key <FK07> {	[	F7		]	};
    key <FK08> {	[	F8		]	};
    key <FK09> {	[	F9		]	};
    key <FK10> {	[	F10		]	};
    // End "Function" section

    // Begin "Editing" section
    key <HELP> {	[	Help		]	};
    key <UNDO> {	[	Undo		]	};
    key <INS>  {	[	Insert		]	};
    key <UP>   {	[	Up		]	};
    key <HOME> {	[	Home,	Clear	]	};
    key <LEFT> {	[	Left		]	};
    key <DOWN> {	[	Down		]	};
    key <RGHT> {	[	Right		]	};
    // End "Editing" section

    // Begin "Keypad" section
    key <KPLP> {	[	KP_F1		]	};
    key <KPRP> {	[	KP_F2		]	};
    key <KPDV> {	[	KP_Divide	]	};
    key <KPMU> {	[	KP_Multiply	]	};
    key <KP7>  {	[	KP_7		]	};
    key <KP8>  {	[	KP_8		]	};
    key <KP9>  {	[	KP_9		]	};
    key <KPSU> {	[	KP_Subtract	]	};
    key <KP4>  {	[	KP_4		]	};
    key <KP5>  {	[	KP_5		]	};
    key <KP6>  {	[	KP_6		]	};
    key <KPAD> {	[	KP_Add		]	};
    key <KP1>  {	[	KP_1		]	};
    key <KP2>  {	[	KP_2		]	};
    key <KP3>  {	[	KP_3		]	};
    key <KP0>  {	[	KP_0		]	};
    key <KPDC> {	[	KP_Decimal	]	};
    key <KPEN> {	[	KP_Enter	]	};
    // End "Keypad" section

    modifier_map Shift  { Shift_L, Shift_R };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L };
    modifier_map Mod1	{ Meta_L };
};

xkb_symbols "de" {
    include "ataritt(us)"

    name[Group1]= "German";

    key <AE02> {	[	  2,	quotedbl	]	};
    key <AE03> {	[	  3,	section		]	};
    key <AE06> {	[	  6,	ampersand	]	};
    key <AE07> {	[	  7,	slash		]	};
    key <AE08> {	[	  8,	parenleft	]	};
    key <AE09> {	[	  9,	parenright	]	};
    key <AE10> {	[	  0,	equal		]	};
    key <AE11> {	[    ssharp,	question	]	};
    key <AE12> {	[ apostrophe,	grave		]	};
    key <TLDE> {	[ numbersign,	asciicircum	]	};

    key <AD06> {	[	  z,	Z		]	};
    key <AD11> {	[ udiaeresis,	Udiaeresis	],
			[        at,	backslash	]	};
    key <AD12> {	[      plus,	asterisk	]	};

    key <AC10> {	[ odiaeresis,	Odiaeresis	],
			[ bracketleft,	braceleft	]	};
    key <AC11> {	[ adiaeresis,	Adiaeresis	],
			[ bracketright,	braceright	]	};
    key <BKSL> {	[ asciitilde,	bar		]	};

    key <LSGT> {	[      less,	greater		]	};
    key <AB01> {	[	  y,	Y 		]	};
    key <AB08> {	[     comma,	semicolon	]	};
    key <AB09> {	[    period,	colon		]	};
    key <AB10> {	[     minus,	underscore	]	};
};
default xkb_symbols "usa1" {

    name[Group1]= "usa1";
    key <ESC>  {	[	 Escape			]	};

    // Begin "Function" section
    key <FK01> {	[	 F1			]	};
    key <FK02> {	[	 F2			]	};
    key <FK03> {	[	 F3			]	};
    key <FK04> {	[	 F4			]	};
    key <FK05> {	[	 F5			]	};
    key <FK06> {	[	 F6			]	};
    key <FK07> {	[	 F7			]	};
    key <FK08> {	[	 F8			]	};
    key <FK09> {	[	 F9			]	};
    key <FK10> {	[	 F10			]	};
    // End "Function" section

    // Alphanumeric section
    key <TLDE> {	[     grave,	asciitilde	]	};
    key <AE01> {	[	  1,	exclam 		]	};
    key <AE02> {	[	  2,	at		]	};
    key <AE03> {	[	  3,	numbersign	]	};
    key <AE04> {	[	  4,	dollar		]	};
    key <AE05> {	[	  5,	percent		]	};
    key <AE06> {	[	  6,	asciicircum	]	};
    key <AE07> {	[	  7,	ampersand	]	};
    key <AE08> {	[	  8,	asterisk	]	};
    key <AE09> {	[	  9,	parenleft	]	};
    key <AE10> {	[	  0,	parenright	]	};
    key <AE11> {	[ minus,	underscore	]	};
    key <AE12> {	[ equal,	plus		]	};
    key <BKSL> {	[ backslash,	bar		]	};
    key <BKSP> {	[	BackSpace		]	};

    key  <TAB> {	[	Tab,	ISO_Left_Tab	]	};
    key <AD01> {	[	  q,	Q 		]	};
    key <AD02> {	[	  w,	W		]	};
    key <AD03> {	[	  e,	E		]	};
    key <AD04> {	[	  r,	R		]	};
    key <AD05> {	[	  t,	T		]	};
    key <AD06> {	[	  y,	Y		]	};
    key <AD07> {	[	  u,	U		]	};
    key <AD08> {	[	  i,	I		]	};
    key <AD09> {	[	  o,	O		]	};
    key <AD10> {	[	  p,	P		]	};
    key <AD11> {	[ bracketleft,	braceleft	]	};
    key <AD12> {	[ bracketright,	braceright	]	};
    key <RTRN> {	[	 Return			]	};

    key <LCTL> {	[	 Control_L		]	};
    key <CAPS> {	[	 Caps_Lock		]	};
    key <AC01> {	[	  a,	A 		]	};
    key <AC02> {	[	  s,	S		]	};
    key <AC03> {	[	  d,	D		]	};
    key <AC04> {	[	  f,	F		]	};
    key <AC05> {	[	  g,	G		]	};
    key <AC06> {	[	  h,	H		]	};
    key <AC07> {	[	  j,	J		]	};
    key <AC08> {	[	  k,	K		]	};
    key <AC09> {	[	  l,	L		]	};
    key <AC10> {	[ semicolon,	colon		]	};
    key <AC11> {	[ apostrophe,	quotedbl	]	};

    key <LFSH> {	[ 	 Shift_L		]	};
    key <AB01> {	[	  z,	Z 		]	};
    key <AB02> {	[	  x,	X		]	};
    key <AB03> {	[	  c,	C		]	};
    key <AB04> {	[	  v,	V		]	};
    key <AB05> {	[	  b,	B		]	};
    key <AB06> {	[	  n,	N		]	};
    key <AB07> {	[	  m,	M		]	};
    key <AB08> {	[ comma,	less		]	};
    key <AB09> {	[ period,	greater		]	};
    key <AB10> {	[ slash,	question	]	};
    key <RTSH> {	[	 Shift_R		]	};

    key <LALT> {	[ Alt_L,	Meta_L 		]	};
    key <LAMI>  {	[	 Mode_switch		]	};
    key <SPCE> {	[	 space			]	};
    key <RAMI>  {	[	 Multi_key		]	};
    key <RALT> {	[ Alt_R,	Meta_R		]	};
    // End alphanumeric section

    // Begin "Editing" section
    key <DELE> {	[	 Delete		]	};
    key <HELP> {	[	 Help		]	};
    key <UP>   {	[	 Up		]	};
    key <LEFT> {	[	 Left		]	};
    key <DOWN> {	[	 Down		]	};
    key <RGHT> {	[	 Right		]	};
    // End "Editing" section

    // Begin "Keypad" section
    key <KPLP> {	[	 Num_Lock		]	};
    key <KPRP> {	[	 Scroll_Lock		]	};
    key <KPDV> {	[	 KP_Divide		]	};
    key <KPMU> {	[ KP_Multiply,	Print		]	};

    key <KP7>  {	[ KP_7,		KP_Home		]	};
    key <KP8>  {	[ KP_8,		KP_Up		]	};
    key <KP9>  {	[ KP_9,		KP_Prior	]	};
    key <KPSU> {	[	 KP_Subtract		]	};

    key <KP4>  {	[ KP_4,		KP_Left		]	};
    key <KP5>  {	[	 KP_5			]	};
    key <KP6>  {	[ KP_6,		KP_Right	]	};
    key <KPAD> {	[	 KP_Add			]	};

    key <KP1>  {	[ KP_1,		KP_End		]	};
    key <KP2>  {	[ KP_2,		KP_Down		]	};
    key <KP3>  {	[ KP_3,		KP_Next		]	};

    key <KP0>  {	[ KP_0,		KP_Insert	]	};
    key <KPDC> {	[ KP_Decimal,	KP_Delete	]	};
    key <KPEN> {	[	 KP_Enter		]	};
    // End "Keypad" section

    modifier_map Shift  { Shift_L, Shift_R };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L };
    modifier_map Mod1	{ Alt_L, Alt_R };
    modifier_map Mod2	{ Mode_switch };
    modifier_map Mod3	{ Meta_L, Meta_R };
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
// Japanese for a Fujitsu 140 key keyboard

xkb_symbols "basic" {
    override "fujitsu_vndr/us"
    augment key <AE01> { [],			[ kana_NU	] 	};
	    key <AE02> { [ 2, quotedbl	],	[ kana_FU	]	};
	    key <AE03> { [ 3, numbersign ],	[ kana_A, kana_a ]	};
	    key <AE04> { [ 4, dollar	],	[ kana_U, kana_u ]	};
    augment key <AE05> { [],		[ kana_E, kana_e ]	};
	    key <AE06> { [ 6, ampersand	],	[ kana_O, kana_o ]	};
	    key <AE07> { [ 7, apostrophe ],	[ kana_YA, kana_ya ]	};
	    key <AE08> { [ 8, parenleft	],	[ kana_YU, kana_yu ]	};
	    key <AE09> { [ 9, parenright ],	[ kana_YO, kana_yo ]	};
    replace key <AE10> { [ 0	],		[ kana_WA, kana_WO ]	};
	    key <AE11> { [ minus, equal	],	[ kana_HO	]	};
	    key <AE12> { [ asciicircum, asciitilde ], [ kana_HE ]	};
	    key <BKSL> { [ backslash, bar ],	[ prolongedsound]	};
    augment key <AD01> { [],			[ kana_TA	]	};
    augment key <AD02> { [],			[ kana_TE	]	};
    augment key <AD03> { [],			[ kana_I, kana_i ]	};
    augment key <AD04> { [],			[ kana_SU	]	};
    augment key <AD05> { [],			[ kana_KA	]	};
    augment key <AD06> { [],			[ kana_N	]	};
    augment key <AD07> { [],			[ kana_NA	]	};
    augment key <AD08> { [],			[ kana_NI	]	};
    augment key <AD09> { [],			[ kana_RA	]	};
    augment key <AD10> { [],			[ kana_SE	]	};
	    key <AD11> { [ at, grave	],	[ voicedsound	]	};
	    key <AD12> { [ bracketleft, braceleft ], [ semivoicedsound, kana_openingbracket ]	};
    augment key <AC01> { [],			[ kana_CHI	]	};
    augment key <AC02> { [],			[ kana_TO	]	};
    augment key <AC03> { [],			[ kana_SHI	]	};
    augment key <AC04> { [],			[ kana_HA	]	};
    augment key <AC05> { [],			[ kana_KI	]	};
    augment key <AC06> { [],			[ kana_KU	]	};
    augment key <AC07> { [],			[ kana_MA	]	};
    augment key <AC08> { [],			[ kana_NO	]	};
    augment key <AC09> { [],			[ kana_RI	]	};
	    key <AC10> { [ semicolon, plus ],	[ kana_RE	]	};
	    key <AC11> { [ colon, asterisk ],	[ kana_KE	]	};
	    key <TLDE> { [ bracketright, braceright ], [ kana_MU, kana_closingbracket ] };
    augment key <AB01> { [],			[ kana_TSU, kana_tsu ]	};
    augment key <AB02> { [],			[ kana_SA	]	};
    augment key <AB03> { [],			[ kana_SO	]	};
    augment key <AB04> { [],			[ kana_HI	]	};
    augment key <AB05> { [],			[ kana_KO	]	};
    augment key <AB06> { [],			[ kana_MI	]	};
    augment key <AB07> { [],			[ kana_MO	]	};
    augment key <AB08> { [],			[ kana_NE, kana_comma ]	};
    augment key <AB09> { [],			[ kana_RU, kana_fullstop ] };
    augment key <AB10> { [],			[ kana_ME, kana_conjunctive ] };
	    key <AB11> { [ underscore	],	[ kana_RO	]	};
	    key <UNK0> { [ Select	]	}; 
	    key <UNK1> { [ Massyo	]	}; 
	    key <UNK2> { [ Touroku	]	}; 
	    key <UNK3> { [ Zenkaku_Hankaku ]	}; 
	    key <UNK4> { [ Eisu_Shift	]	};
	    key <UNK5> { [ Mode_switch	]	};
	    key <UNK6> { [ Cancel	]	};
	    key <UNK7> { [ Muhenkan	]	};
	    key <UNK8> { [ Henkan	]	};
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
// US/ASCII layout for a Fujitsu 138 key keyboard
xkb_symbols "basic" {
    include "us(basic)"

    // A few alphanumeric keys are different
    key <TLDE> { [ grave, asciitilde ]	};
    key <BKSP> { [ BackSpace	]	};
    key <BKSL> { [ backslash, bar ]	};
    key <AB11> { [		]	};

    key <RTSH> { [ Shift_R	]	};

    key <LALT> { [ Alt_L	]	};
    key <RALT> { [ Alt_R	]	};
    key <LMTA> { [ Meta_L	]	};
    key <RMTA> { [ Meta_R	]	};
    key <LNFD> { [ Linefeed	]	};
    key <COMP> { [ Multi_key	]	};
    // End alphanumeric section

    // Begin "Function" section
    key <BREA> { [ Break	]	};
    key <PRSC> { [ Print	]	};
    key <KNJI> { [ Kanji	]	};
    key <PAUS> { [ Pause	]	};

    key <FK01> { [ F1		]	};
    key <FK02> { [ F2		]	};
    key <FK03> { [ F3		]	};
    key <FK04> { [ F4		]	};
    key <FK05> { [ F5		]	};
    key <FK06> { [ F6		]	};
    key <FK07> { [ F7		]	};
    key <FK08> { [ F8		]	};
    key <FK09> { [ F9		]	};
    key <FK10> { [ F10		]	};
    key <FK11> { [ F11		]	};
    key <FK12> { [ F12		]	};
    key <FK13> { [ F13		]	};
    key <FK14> { [ F14		]	};
    key <FK15> { [ F15		]	};
    key <FK16> { [ F16		]	};
    key <FK17> { [ F17		]	};
    key <FK18> { [ F18		]	};
    key <FK19> { [ F19		]	};
    key <FK20> { [ F20		]	};
    key <FK21> { [ F21		]	};
    key <FK22> { [ F22		]	};
    key <FK23> { [ F23		]	};
    key <FK24> { [ F24		]	};
    key <FK25> { [ F25		]	};
    key <FK26> { [ F26		]	};
    key <FK27> { [ F27		]	};
    key <FK28> { [ F28		]	};
    key <FK29> { [ F29		]	};
    key <FK30> { [ F30		]	};
    key <FK31> { [ F31		]	};
    key <FK32> { [ F32		]	};
    // End "Function" section

    // Begin "Editing" section
    key <UNDO> { [ Undo		]	};
    key <COPY> { [ F33		]	};
    key <PAST> { [ F34		]	};
    key <CUT>  { [ F35		]	};
    key <HELP> { [ Help		]	};
    // End "Editing" section

    // Begin "Cursor" section
    key <UNK0> { [ 		]	}; 
    key <UNK1> { [ 		]	}; 
    key <UNK2> { [ 		]	}; 
    key <PGUP> { [ Prior	]	}; 
    key <HOME> { [ Home		]	};
    key <PGDN> { [ Next		]	}; 
    key <UNK3> { [ 		]	}; 
    key <DEL>  { [ Delete	]	}; 
    key <INS>  { [ Insert	]	}; 
    key <LEFT> { [ Left		]	};
    key <RGHT> { [ Right	]	};
    key <UP>   { [ Up		]	};
    key <DOWN> { [ Down		]	};
    key <EXEC> { [ Execute	]	};
    // End "Cursor" section

    // Begin "Keypad" section
    key <KPMU> { [ KP_Multiply	]	};
    key <KPDV> { [ KP_Divide	]	};
    key <KPAD> { [ KP_Add	]	};
    key <KPSU> { [ KP_Subtract	]	};

    key  <KP7> { [  KP_7	]	};
    key  <KP8> { [  KP_8	]	};
    key  <KP9> { [  KP_9	]	};
    key <KPEQ> { [ KP_Equal 	]	};

    key  <KP4> { [  KP_4	]	};
    key  <KP5> { [  KP_5	]	};
    key  <KP6> { [  KP_6	]	};
    key <KPDC> { [  KP_Decimal	]	};

    key  <KP1> { [  KP_1	]	};
    key  <KP2> { [  KP_2	]	};
    key  <KP3> { [  KP_3	]	};
    key <KPEN> { [  KP_Enter	]	}; 

    key  <KP0> { [  KP_0	]	};
    key <KP00> { [  KP_0	]	};
    // End "Keypad" section

    modifier_map Shift  	{ Shift_R };
    modifier_map Mod1   	{ Meta_L, Meta_R };
    modifier_map Mod2   	{ Mode_switch };
    modifier_map Mod3   	{ Alt_L };
    modifier_map Mod4   	{ Num_Lock };
    modifier_map Mod5   	{ F13, F18, F20 };
};
// $NetBSD: ws011sh,v 1.2 2010/05/30 10:10:20 nonaka Exp $

default partial alphanumeric_keys
xkb_symbols "basic" {
	name[Group1]= "Sharp WS011SH";

	key <HZTG> {
		type[Group1] = "THREE_LEVEL",
		symbols[Group1] = [ Zenkaku_Hankaku, Zenkaku_Hankaku, exclam ]
	};

	key <AD01> { [ q, Q, quotedbl ] };
	key <AD02> { [ w, W, numbersign ] };
	key <AD03> { [ e, E, dollar ] };
	key <AD04> { [ r, R, percent ] };
	key <AD05> { [ t, T, ampersand ] };
	key <AD06> { [ y, Y, 1 ] };
	key <AD07> { [ u, U, 2 ] };
	key <AD08> { [ i, I, 3 ] };
	key <AD09> { [ o, O, underscore ] };
	key <AD10> { [ p, P, at ] };
	key <BKSP> { [ BackSpace, BackSpace, Delete ] };
	
	key <TAB> { [ Tab, Tab, Escape ] };
	key <AC01> { [ a, A, bracketleft ] };
	key <AC02> { [ s, S, apostrophe ] };
	key <AC03> { [ d, D, parenleft ] };
	key <AC04> { [ f, F, parenright ] };
	key <AC05> { [ g, G, asterisk ] };
	key <AC06> { [ h, H, 4 ] };
	key <AC07> { [ j, J, 5 ] };
	key <AC08> { [ k, K, 6 ] };
	key <AC09> { [ l, L, plus ] };
	key <AE11> { [ minus, equal, backslash ] };
	key <AE02> { [ grave, braceleft, braceright ] };

	key <LFSH> { [ Shift_L ] };
	key <AB01> { [ z, Z, bracketright ] };
	key <AB02> { [ x, X, asciicircum ] };
	key <AB03> { [ c, C, asciitilde ] };
	key <AB04> { [ v, V, bar ] };
	key <AB05> { [ b, B, 7 ] };
	key <AB06> { [ n, N, 8 ] };
	key <AB07> { [ m, M, 9 ] };
	key <AB08> { [ comma, less, semicolon ] };
	key <AB09> { [ period, greater, colon ] };
	key <AB10> { [ slash, question, 0 ] };
	key <RTSH> { [ Shift_R ] };
	key <RTRN> { [ Return ] };

	key <RALT> { [ ISO_Level3_Shift ] };

	key <LCTL> { [ Control_L ] };
	key <SPCE> { [ space ] };
	
	key <UP> { [ Up, Up, Prior ] };
	key <LEFT> { [ Left, Left, Home ] };
	key <DOWN> { [ Down, Down, Next ] };
	key <RGHT> { [ Right, Right, End ] };

	key <ESC> { [ Escape ] };

	key <KP1> { [ 1 ] };
	key <KP2> { [ 2 ] };
	key <KP3> { [ 3 ] };
	key <KP4> { [ 4 ] };
	key <KP5> { [ 5 ] };
	key <KP6> { [ 6 ] };
	key <KP7> { [ 7 ] };
	key <KP8> { [ 8 ] };
	key <KP9> { [ 9 ] };
	key <KP0> { [ 0 ] };

	include "level3(ralt_switch)"
};
// $NetBSD: ws007sh,v 1.1 2010/05/15 15:33:30 nonaka Exp $

default partial alphanumeric_keys
xkb_symbols "basic" {
	name[Group1]= "Sharp WS007SH";

	key <AE01> { [ 1, exclam ] };
	key <AE02> { [ 2, quotedbl ] };
	key <AE03> { [ 3, numbersign ] };
	key <AE04> { [ 4, dollar ] };
	key <AE05> { [ 5, percent ] };
	key <AE06> { [ 6, ampersand ] };
	key <AE07> { [ 7, apostrophe, grave ] };
	key <AE08> { [ 8, parenleft, braceleft ] };
	key <AE09> { [ 9, parenright, braceright ] };
	key <AE10> { [ 0 ] };
	key <AE11> { [ minus, equal, backslash ] };
	key <BKSP> { [ BackSpace, BackSpace, Delete ] };

	key <AD01> { [ q, Q ] };
	key <AD02> { [ w, W, asciicircum ] };
	key <AD03> { [ e, E, asciitilde ] };
	key <AD04> { [ r, R, bar ] };
	key <AD05> { [ t, T ] };
	key <AD06> { [ y, Y ] };
	key <AD07> { [ u, U, bracketleft ] };
	key <AD08> { [ i, I, bracketright ] };
	key <AD09> { [ o, O, underscore ] };
	key <AD10> { [ p, P, at ] };
	
	key <TAB> { [ Tab, Tab, Escape ] };

	key <AC01> { [ a, A ] };
	key <AC02> { [ s, S ] };
	key <AC03> { [ d, D ] };
	key <AC04> { [ f, F ] };
	key <AC05> { [ g, G ] };
	key <AC06> { [ h, H ] };
	key <AC07> { [ j, J ] };
	key <AC08> { [ k, K, plus ] };
	key <AC09> { [ l, L, asterisk ] };

	key <LFSH> { [ Shift_L ] };
	key <AB01> { [ z, Z ] };
	key <AB02> { [ x, X ] };
	key <AB03> { [ c, C ] };
	key <AB04> { [ v, V ] };
	key <AB05> { [ b, B ] };
	key <AB06> { [ n, N ] };
	key <AB07> { [ m, M ] };
	key <AB08> { [ comma, semicolon, less ] };
	key <AB09> { [ period, colon, greater ] };
	key <AB10> { [ slash, question ] };
	key <RTSH> { [ Shift_R ] };
	key <RTRN> { [ Return ] };

	key <RALT> { [ ISO_Level3_Shift ] };

	key <LCTL> { [ Control_L ] };
	key <SPCE> { [ space ] };
	
	key <UP> { [ Up, Up, Prior ] };
	key <LEFT> { [ Left, Left, Home ] };
	key <DOWN> { [ Down, Down, Next ] };
	key <RGHT> { [ Right, Right, End ] };

	key <ESC> { [ Escape ] };

	include "level3(ralt_switch)"
};
// $NetBSD: ws020sh,v 1.1 2010/05/25 13:12:51 nonaka Exp $

default partial alphanumeric_keys
xkb_symbols "basic" {
	name[Group1]= "Sharp WS020SH";

	key <HZTG> {
		type[Group1]="THREE_LEVEL",
		symbols[Group1]= [ Zenkaku_Hankaku, Zenkaku_Hankaku, exclam ]
	};

	key <AD01> { [ q, Q, quotedbl ] };
	key <AD02> { [ w, W, numbersign ] };
	key <AD03> { [ e, E, dollar ] };
	key <AD04> { [ r, R, percent ] };
	key <AD05> { [ t, T, ampersand ] };
	key <AD06> { [ y, Y, underscore ] };
	key <AD07> { [ u, U, 1 ] };
	key <AD08> { [ i, I, 2 ] };
	key <AD09> { [ o, O, 3 ] };
	key <AD10> { [ p, P, at ] };
	key <BKSP> { [ BackSpace, BackSpace, Delete ] };
	
	key <TAB> { [ Tab, Tab, Escape ] };
	key <AC01> { [ a, A, bracketleft ] };
	key <AC02> { [ s, S, apostrophe ] };
	key <AC03> { [ d, D, parenleft ] };
	key <AC04> { [ f, F, parenright ] };
	key <AC05> { [ g, G, asterisk ] };
	key <AC06> { [ h, H, 4 ] };
	key <AC07> { [ j, J, 5 ] };
	key <AC08> { [ k, K, 6 ] };
	key <AC09> { [ l, L, plus ] };
	key <AE11> { [ minus, equal, backslash ] };
	key <AE02> { [ grave, braceleft, braceright ] };

	key <LFSH> { [ Shift_L ] };
	key <AB01> { [ z, Z, bracketright ] };
	key <AB02> { [ x, X, asciicircum ] };
	key <AB03> { [ c, C, asciitilde ] };
	key <AB04> { [ v, V, bar ] };
	key <AB05> { [ b, B, 7 ] };
	key <AB06> { [ n, N, 8 ] };
	key <AB07> { [ m, M, 9 ] };
	key <AB08> { [ comma, less, semicolon ] };
	key <AB09> { [ period, greater, colon ] };
	key <AB10> { [ slash, question, 0 ] };
	key <RTSH> { [ Shift_R ] };
	key <RTRN> { [ Return ] };

	key <RALT> { [ ISO_Level3_Shift ] };

	key <LCTL> { [ Control_L ] };
	key <SPCE> { [ space ] };
	
	key <UP> { [ Up, Up, Prior ] };
	key <LEFT> { [ Left, Left, Home ] };
	key <DOWN> { [ Down, Down, Next ] };
	key <RGHT> { [ Right, Right, End ] };

	key <ESC> { [ Escape ] };

	include "level3(ralt_switch)"
};
// $NetBSD: sl-c3x00,v 1.1 2009/12/13 04:54:51 nonaka Exp $
// $OpenBSD: zaurus,v 1.2 2008/03/05 17:24:55 matthieu Exp $

default partial alphanumeric_keys
xkb_symbols "basic" {
	name[Group1]= "Sharp SL-C3x00";

	key <AE01> { [ 1, exclam ] };
	key <AE02> { [ 2, quotedbl ] };
	key <AE03> { [ 3, numbersign ] };
	key <AE04> { [ 4, dollar ] };
	key <AE05> { [ 5, percent ] };
	key <AE06> { [ 6, ampersand ] };
	key <AE07> { [ 7, apostrophe ] };
	key <AE08> { [ 8, parenleft ] };
	key <AE09> { [ 9, parenright ] };
	key <AE10> { [ 0, asciitilde ] };
	key <BKSP> { type="CTRL+ALT",
		symbols[Group1]= [ BackSpace, Terminate_Server ] };

	key <AD01> { [ q, Q ] };
	key <AD02> { [ w, W, asciicircum ] };
	key <AD03> { [ e, E, equal ] };
	key <AD04> { [ r, R, plus ] };
	key <AD05> { [ t, T, bracketleft ] };
	key <AD06> { [ y, Y, bracketright ] };
	key <AD07> { [ u, U, braceleft ] };
	key <AD08> { [ i, I, braceright ] };
	key <AD09> { [ o, O ] };
	key <AD10> { [ p, P ] };
	
	key <TAB> { [ Tab, ISO_Left_Tab, Caps_Lock ] };

	key <AC01> { [ a, A ] };
	key <AC02> { [ s, S ] };
	key <AC03> { [ d, D, grave ] };
	key <AC04> { [ f, F, backslash ] };
	key <AC05> { [ g, G, semicolon ] };
	key <AC06> { [ h, H, colon ] };
	key <AC07> { [ j, J, asterisk ] };
	key <AC08> { [ k, K, yen ] };
	key <AC09> { [ l, L, bar ] };

	key <LFSH> { [ Shift_L ] };
	key <AB01> { [ z, Z ] };
	key <AB02> { [ x, X, SunCut ] };
	key <AB03> { [ c, C, SunCopy ] };
	key <AB04> { [ v, V, SunPaste ] };
	key <AB05> { [ b, B, underscore ] };
	key <AB06> { [ n, N ] };
	key <AB07> { [ m, M ] };
	key <RTSH> { [ Shift_R ] };
	key <RTRN> { [ Return ] };
	
	key <RALT> { [ ISO_Level3_Shift ] };

	key <LCTL> { [ Control_L ] };
	key <AE11> { [ minus, minus, at ] };
	key <SPCE> { [ space ] };
	key <AB08> { [ comma, slash, less ] };
	key <AB09> { [ period, question, greater ] };
	
	key <UP> { [ Up, Up, Prior ] };
	key <LEFT> { [ Left, Left, Home ] };
	key <DOWN> { [ Down, Down, Next ] };
	key <RGHT> { [ Right, Right, End ] };

	key <ESC> { [ Escape ] };

	include "level3(ralt_switch)"
};
// $NetBSD: ws003sh,v 1.1 2010/05/15 15:33:30 nonaka Exp $

default partial alphanumeric_keys
xkb_symbols "basic" {
	name[Group1]= "Sharp WS003SH";

	key <AE01> { [ 1, exclam ] };
	key <AE02> { [ 2, quotedbl ] };
	key <AE03> { [ 3, numbersign ] };
	key <AE04> { [ 4, dollar ] };
	key <AE05> { [ 5, percent ] };
	key <AE06> { [ 6, ampersand ] };
	key <AE07> { [ 7, apostrophe, grave ] };
	key <AE08> { [ 8, parenleft, braceleft ] };
	key <AE09> { [ 9, parenright, braceright ] };
	key <AE10> { [ 0 ] };
	key <AE11> { [ minus, equal, backslash ] };
	key <BKSP> { [ BackSpace, BackSpace, Delete ] };

	key <AD01> { [ q, Q ] };
	key <AD02> { [ w, W, asciicircum ] };
	key <AD03> { [ e, E, asciitilde ] };
	key <AD04> { [ r, R, bar ] };
	key <AD05> { [ t, T ] };
	key <AD06> { [ y, Y ] };
	key <AD07> { [ u, U, bracketleft ] };
	key <AD08> { [ i, I, bracketright ] };
	key <AD09> { [ o, O, underscore ] };
	key <AD10> { [ p, P, at ] };
	
	key <TAB> { [ Tab, Tab, Escape ] };

	key <AC01> { [ a, A ] };
	key <AC02> { [ s, S ] };
	key <AC03> { [ d, D ] };
	key <AC04> { [ f, F ] };
	key <AC05> { [ g, G ] };
	key <AC06> { [ h, H ] };
	key <AC07> { [ j, J ] };
	key <AC08> { [ k, K, plus ] };
	key <AC09> { [ l, L, asterisk ] };

	key <LFSH> { [ Shift_L ] };
	key <AB01> { [ z, Z ] };
	key <AB02> { [ x, X ] };
	key <AB03> { [ c, C ] };
	key <AB04> { [ v, V ] };
	key <AB05> { [ b, B ] };
	key <AB06> { [ n, N ] };
	key <AB07> { [ m, M ] };
	key <AB08> { [ comma, semicolon, less ] };
	key <AB09> { [ period, colon, greater ] };
	key <AB10> { [ slash, question ] };
	key <RTSH> { [ Shift_R ] };
	key <RTRN> { [ Return ] };

	key <RALT> { [ ISO_Level3_Shift ] };

	key <LCTL> { [ Control_L ] };
	key <SPCE> { [ space ] };
	
	key <UP> { [ Up, Up, Prior ] };
	key <LEFT> { [ Left, Left, Home ] };
	key <DOWN> { [ Down, Down, Next ] };
	key <RGHT> { [ Right, Right, End ] };

	key <ESC> { [ Escape ] };

	include "level3(ralt_switch)"
};
partial alphanumeric_keys default
xkb_symbols "no" {
    name[Group1]= "Norwegian/Danish";

    include "nokia_vndr/su-8w(base)"

    key <AE01> { [ 1,            exclam,         dead_circumflex                       ] };
    key <AE02> { [ 2,            quotedbl,       at                                    ] };
    key <AE03> { [ 3,            numbersign,     EuroSign                              ] };
    key <AE04> { [ 4,            currency,       dollar                                ] };
    key <AE05> { [ 5,            percent,        sterling                              ] };
    key <AE06> { [ 6,            ampersand                                             ] };
    key <AE07> { [ 7,            slash,          braceleft                             ] };
    key <AE08> { [ 8,            parenleft,      bracketleft                           ] };
    key <AE09> { [ 9,            parenright,     bracketright                          ] };
    key <AE10> { [ 0,            equal,          braceright                            ] };
    key <AE11> { [ plus,         question                                              ] };
    key <AE12> { [ dead_acute,   dead_grave,     backslash                             ] };

    key <AD01> { [ q,            Q,              dead_circumflex                       ] };
    key <AD02> { [ w,            W,              at                                    ] };
    key <AD03> { [ e,            E,              EuroSign                              ] };
    key <AD04> { [ r,            R,              dollar                                ] };
    key <AD05> { [ t,            T,              sterling                              ] };
    key <AD06> { [ y,            Y                                                     ] };
    key <AD07> { [ u,            U,              braceleft                             ] };
    key <AD08> { [ i,            I,              bracketleft                           ] };
    key <AD09> { [ o,            O,              bracketright                          ] };
    key <AD10> { [ p,            P,              braceright                            ] };
    key <AD11> { [ aring,        Aring                                                 ] };
    key <AD12> { [ ssharp,       U1E9E,          backslash                             ] };

    key <AC01> { [ a,            A                                                     ] };
    key <AC02> { [ s,            S                                                     ] };
    key <AC03> { [ d,            D                                                     ] };
    key <AC04> { [ f,            F                                                     ] };
    key <AC05> { [ g,            G                                                     ] };
    key <AC06> { [ h,            H                                                     ] };
    key <AC07> { [ j,            J                                                     ] };
    key <AC08> { [ k,            K                                                     ] };
    key <AC09> { [ l,            L                                                     ] };
    key <AC10> { [ oslash,       Ooblique                                              ] };
    key <AC11> { [ ae,           AE                                                    ] };

    key <AB01> { [ z,            Z                                                     ] };
    key <AB02> { [ x,            X                                                     ] };
    key <AB03> { [ c,            C                                                     ] };
    key <AB04> { [ v,            V                                                     ] };
    key <AB05> { [ b,            B                                                     ] };
    key <AB06> { [ n,            N                                                     ] };
    key <AB07> { [ m,            M                                                     ] };
    key <AB08> { [ comma,        semicolon,      less                                  ] };
    key <AB09> { [ period,       colon,          greater                               ] };
    key <AB10> { [ minus,        underscore,     dead_diaeresis                        ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "no_nodeadkeys" {
    name[Group1] = "Norwegian/Danish (no dead keys)";

    include "nokia_vndr/su-8w(no)"

    key <AE01> { [ 1,            exclam,         asciicircum                           ] };
    key <AE12> { [ acute,        grave,          backslash                             ] };
    key <AD01> { [ q,            Q,              asciicircum                           ] };
};

partial alphanumeric_keys default
xkb_symbols "dk" {
    include "nokia_vndr/su-8w(no)"
};

partial alphanumeric_keys default
xkb_symbols "dk_nodeadkeys" {
    include "nokia_vndr/su-8w(no_nodeadkeys)"
};



partial alphanumeric_keys default
xkb_symbols "de" {
    name[Group1]= "German";
    include "nokia_vndr/su-8w(base)"

    key <AE01> { [ 1,            exclam,         dead_circumflex                       ] };
    key <AE02> { [ 2,            quotedbl,       at                                    ] };
    key <AE03> { [ 3,            numbersign,     EuroSign                              ] };
    key <AE04> { [ 4,            currency,       dollar                                ] };
    key <AE05> { [ 5,            percent,        sterling                              ] };
    key <AE06> { [ 6,            ampersand                                             ] };
    key <AE07> { [ 7,            slash,          braceleft                             ] };
    key <AE08> { [ 8,            parenleft,      bracketleft                           ] };
    key <AE09> { [ 9,            parenright,     bracketright                          ] };
    key <AE10> { [ 0,            equal,          braceright                            ] };
    key <AE11> { [ plus,         question                                              ] };
    key <AE12> { [ dead_acute,   dead_grave,     backslash                             ] };

    key <AD01> { [ q,            Q,              dead_circumflex                       ] };
    key <AD02> { [ w,            W,              at                                    ] };
    key <AD03> { [ e,            E,              EuroSign                              ] };
    key <AD04> { [ r,            R,              dollar                                ] };
    key <AD05> { [ t,            T,              sterling                              ] };
    key <AD06> { [ z,            Z                                                     ] };
    key <AD07> { [ u,            U,              braceleft                             ] };
    key <AD08> { [ i,            I,              bracketleft                           ] };
    key <AD09> { [ o,            O,              bracketright                          ] };
    key <AD10> { [ p,            P,              braceright                            ] };
    key <AD11> { [ udiaeresis,   Udiaeresis                                            ] };
    key <AD12> { [ ssharp,       U1E9E,          backslash                             ] };

    key <AC01> { [ a,            A                                                     ] };
    key <AC02> { [ s,            S                                                     ] };
    key <AC03> { [ d,            D                                                     ] };
    key <AC04> { [ f,            F                                                     ] };
    key <AC05> { [ g,            G                                                     ] };
    key <AC06> { [ h,            H                                                     ] };
    key <AC07> { [ j,            J                                                     ] };
    key <AC08> { [ k,            K                                                     ] };
    key <AC09> { [ l,            L                                                     ] };
    key <AC10> { [ odiaeresis,   Odiaeresis                                            ] };
    key <AC11> { [ adiaeresis,   Adiaeresis                                            ] };

    key <AB01> { [ y,            Y                                                     ] };
    key <AB02> { [ x,            X                                                     ] };
    key <AB03> { [ c,            C                                                     ] };
    key <AB04> { [ v,            V                                                     ] };
    key <AB05> { [ b,            B                                                     ] };
    key <AB06> { [ n,            N                                                     ] };
    key <AB07> { [ m,            M                                                     ] };
    key <AB08> { [ comma,        semicolon,      less                                  ] };
    key <AB09> { [ period,       colon,          greater                               ] };
    // XXX Inexplicably, the diaeresis is dead on other layouts, but not
    //     German.  Go figure.
    key <AB10> { [ minus,        underscore,     diaeresis                             ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "de_nodeadkeys" {
    name[Group1] = "German (no dead keys)";

    include "nokia_vndr/su-8w(de)"

    key <AE01> { [ 1,            exclam,         asciicircum                           ] };
    key <AE12> { [ acute,        grave,          backslash                             ] };
    key <AD01> { [ q,            Q,              asciicircum                           ] };
};



partial alphanumeric_keys default
xkb_symbols "se" {
    name[Group1]= "Finnish/Swedish";

    include "nokia_vndr/su-8w(base)"

    key <AE01> { [ 1,            exclam,         dead_circumflex                       ] };
    key <AE02> { [ 2,            quotedbl,       at                                    ] };
    key <AE03> { [ 3,            numbersign,     EuroSign                              ] };
    key <AE04> { [ 4,            currency,       dollar                                ] };
    key <AE05> { [ 5,            percent,        sterling                              ] };
    key <AE06> { [ 6,            ampersand                                             ] };
    key <AE07> { [ 7,            slash,          braceleft                             ] };
    key <AE08> { [ 8,            parenleft,      bracketleft                           ] };
    key <AE09> { [ 9,            parenright,     bracketright                          ] };
    key <AE10> { [ 0,            equal,          braceright                            ] };
    key <AE11> { [ plus,         question                                              ] };
    key <AE12> { [ dead_acute,   dead_grave,     backslash                             ] };

    key <AD01> { [ q,            Q,              dead_circumflex                       ] };
    key <AD02> { [ w,            W,              at                                    ] };
    key <AD03> { [ e,            E,              EuroSign                              ] };
    key <AD04> { [ r,            R,              dollar                                ] };
    key <AD05> { [ t,            T,              sterling                              ] };
    key <AD06> { [ y,            Y                                                     ] };
    key <AD07> { [ u,            U,              braceleft                             ] };
    key <AD08> { [ i,            I,              bracketleft                           ] };
    key <AD09> { [ o,            O,              bracketright                          ] };
    key <AD10> { [ p,            P,              braceright                            ] };
    key <AD11> { [ aring,        Aring                                                 ] };
    key <AD12> { [ ssharp,       U1E9E,          backslash                             ] };

    key <AC01> { [ a,            A                                                     ] };
    key <AC02> { [ s,            S                                                     ] };
    key <AC03> { [ d,            D                                                     ] };
    key <AC04> { [ f,            F                                                     ] };
    key <AC05> { [ g,            G                                                     ] };
    key <AC06> { [ h,            H                                                     ] };
    key <AC07> { [ j,            J                                                     ] };
    key <AC08> { [ k,            K                                                     ] };
    key <AC09> { [ l,            L                                                     ] };
    key <AC10> { [ odiaeresis,   Odiaeresis                                            ] };
    key <AC11> { [ adiaeresis,   Adiaeresis                                            ] };

    key <AB01> { [ z,            Z                                                     ] };
    key <AB02> { [ x,            X                                                     ] };
    key <AB03> { [ c,            C                                                     ] };
    key <AB04> { [ v,            V                                                     ] };
    key <AB05> { [ b,            B                                                     ] };
    key <AB06> { [ n,            N                                                     ] };
    key <AB07> { [ m,            M                                                     ] };
    key <AB08> { [ comma,        semicolon,      less                                  ] };
    key <AB09> { [ period,       colon,          greater                               ] };
    key <AB10> { [ minus,        underscore,     dead_diaeresis                        ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "se_nodeadkeys" {
    name[Group1] = "Finnish/Swedish (no dead keys)";

    include "nokia_vndr/su-8w(se)"

    key <AE01> { [ 1,            exclam,         asciicircum                           ] };
    key <AE12> { [ acute,        grave,          backslash                             ] };
    key <AD01> { [ q,            Q,              asciicircum                           ] };
    key <AB10> { [ minus,        underscore,     diaeresis                             ] };
};

partial alphanumeric_keys default
xkb_symbols "fi" {
    include "nokia_vndr/su-8w(se)"
};

xkb_symbols "fi_nodeadkeys" {
    include "nokia_vndr/su-8w(se_nodeadkeys)"
};



// Russian layout on first two levels, US layout on third and fourth.
partial alphanumeric_keys default
xkb_symbols "ru" {
    name[Group1]= "Russian";

    include "nokia_vndr/su-8w(base)"

    // XXX Would be nice if this actually generated a tilde.
    key <TLDE> { [ Cyrillic_io,          Cyrillic_IO,          grave                        ] };
    key <AE01> { [ 1,                    exclam,               exclam,        exclam        ] };
    key <AE02> { [ 2,                    at,                   quotedbl,      at            ] };
    key <AE03> { [ 3,                    numbersign,           numbersign,    numbersign    ] };
    key <AE04> { [ 4,                    dollar,               currency,      dollar        ] };
    key <AE05> { [ 5,                    percent,              percent,       percent       ] };
    key <AE06> { [ 6,                    dead_circumflex,      ampersand,     asciicircum   ] };
    key <AE07> { [ 7,                    ampersand,            slash,         ampersand     ] };
    key <AE08> { [ 8,                    asterisk,             parenleft,     asterisk      ] };
    key <AE09> { [ 9,                    parenleft,            parenright,    parenleft     ] };
    key <AE10> { [ 0,                    parenright,           equal,         parenright    ] };
    key <AE11> { [ minus,                underscore,           plus,          question      ] };
    key <AE12> { [ equal,                plus,                 equal,         plus          ] };

    key <AD01> { [ Cyrillic_shorti,      Cyrillic_SHORTI,      q,             Q             ] };
    key <AD02> { [ Cyrillic_tse,         Cyrillic_TSE,         w,             W             ] };
    key <AD03> { [ Cyrillic_u,           Cyrillic_U,           e,             E             ] };
    key <AD04> { [ Cyrillic_ka,          Cyrillic_KA,          r,             R             ] };
    key <AD05> { [ Cyrillic_ie,          Cyrillic_IE,          t,             T             ] };
    key <AD06> { [ Cyrillic_en,          Cyrillic_EN,          y,             Y             ] };
    key <AD07> { [ Cyrillic_ghe,         Cyrillic_GHE,         u,             U             ] };
    key <AD08> { [ Cyrillic_sha,         Cyrillic_SHA,         i,             I             ] };
    key <AD09> { [ Cyrillic_shcha,       Cyrillic_SHCHA,       o,             O             ] };
    key <AD10> { [ Cyrillic_ze,          Cyrillic_ZE,          p,             P             ] };
    key <AD11> { [ Cyrillic_ha,          Cyrillic_HA,          bracketleft,   braceleft     ] };
    key <AD12> { [ Cyrillic_hardsign,    Cyrillic_HARDSIGN,    bracketright,  braceright    ] };

    key <AC01> { [ Cyrillic_ef,          Cyrillic_EF,          a,             A             ] };
    key <AC02> { [ Cyrillic_yeru,        Cyrillic_YERU,        s,             S             ] };
    key <AC03> { [ Cyrillic_ve,          Cyrillic_VE,          d,             D             ] };
    key <AC04> { [ Cyrillic_a,           Cyrillic_A,           f,             F             ] };
    key <AC05> { [ Cyrillic_pe,          Cyrillic_PE,          g,             G             ] };
    key <AC06> { [ Cyrillic_er,          Cyrillic_ER,          h,             H             ] };
    key <AC07> { [ Cyrillic_o,           Cyrillic_O,           j,             J             ] };
    key <AC08> { [ Cyrillic_el,          Cyrillic_EL,          k,             K             ] };
    key <AC09> { [ Cyrillic_de,          Cyrillic_DE,          l,             L             ] };
    key <AC10> { [ Cyrillic_zhe,         Cyrillic_ZHE,         semicolon,     colon         ] };
    key <AC11> { [ Cyrillic_e,           Cyrillic_E,           apostrophe,    quotedbl      ] };

    key <AB01> { [ Cyrillic_ya,          Cyrillic_YA,          z,             Z             ] };
    key <AB02> { [ Cyrillic_che,         Cyrillic_CHE,         x,             X             ] };
    key <AB03> { [ Cyrillic_es,          Cyrillic_ES,          c,             C             ] };
    key <AB04> { [ Cyrillic_em,          Cyrillic_EM,          v,             V             ] };
    key <AB05> { [ Cyrillic_i,           Cyrillic_I,           b,             B             ] };
    key <AB06> { [ Cyrillic_te,          Cyrillic_TE,          n,             N             ] };
    key <AB07> { [ Cyrillic_softsign,    Cyrillic_SOFTSIGN,    m,             M             ] };
    key <AB08> { [ Cyrillic_be,          Cyrillic_BE,          comma,         less          ] };
    key <AB09> { [ Cyrillic_yu,          Cyrillic_YU,          period,        greater       ] };
    key <AB10> { [ slash,                question,             slash,         question      ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "ru_nodeadkeys" {
    name[Group1] = "Russian - no dead keys";

    include "nokia_vndr/su-8w(ru)"

    key <AE06> { [ 6,                    asciicircum,          ampersand,     asciicircum   ] };
};



partial alphanumeric_keys default
xkb_symbols "us" {
    name[Group1]= "U.S. English - International";
    
    include "nokia_vndr/su-8w(base)"

    // I can't believe it's not us(intl).
    key <AE01> { [ 1,            exclam,         exclamdown                            ] };
    key <AE02> { [ 2,            at,             twosuperior                           ] };
    key <AE03> { [ 3,            numbersign                                            ] };
    key <AE04> { [ 4,            dollar,         currency                              ] };
    key <AE05> { [ 5,            percent,        EuroSign                              ] };
    key <AE06> { [ 6,            asciicircum,    onequarter                            ] };
    key <AE07> { [ 7,            ampersand,      onehalf                               ] };
    key <AE08> { [ 8,            asterisk,       threequarters                         ] };
    key <AE09> { [ 9,            parenleft,      leftsinglequotemark                   ] };
    key <AE10> { [ 0,            parenright,     rightsinglequotemark                  ] };
    key <AE11> { [ minus,        underscore,     yen                                   ] };
    key <AE12> { [ equal,        plus,           multiply                              ] };

    key <AD01> { [ q,            Q,              adiaeresis,           Adiaeresis      ] };
    key <AD02> { [ w,            W,              aring,                Aring           ] };
    key <AD03> { [ e,            E,              eacute,               Eacute          ] };
    key <AD04> { [ r,            R,              registered                            ] };
    key <AD05> { [ t,            T,              thorn,                THORN           ] };
    key <AD06> { [ y,            Y,              udiaeresis,           Udiaeresis      ] };
    key <AD07> { [ u,            U,              uacute,               Uacute          ] };
    key <AD08> { [ i,            I,              iacute,               Iacute          ] };
    key <AD09> { [ o,            O,              oacute,               Oacute          ] };
    key <AD10> { [ p,            P,              odiaeresis,           Odiaeresis      ] };
    key <AD11> { [ bracketleft,  braceleft,      guillemotleft                         ] };
    key <AD12> { [ bracketright, braceright,     guillemotright                        ] };

    key <AC01> { [ a,            A,              aacute,               Aacute          ] };
    key <AC02> { [ s,            S,              ssharp,               section         ] };
    key <AC03> { [ d,            D,              eth,                  ETH             ] };
    key <AC04> { [ f,            F                                                     ] };
    key <AC05> { [ g,            G                                                     ] };
    key <AC06> { [ h,            H                                                     ] };
    key <AC07> { [ j,            J                                                     ] };
    key <AC08> { [ k,            K                                                     ] };
    key <AC09> { [ l,            L,              oslash,               Ooblique        ] };
    key <AC10> { [ semicolon,    colon,          paragraph,            degree          ] };
    // XXX Not entirely sure if fourth level is quotedbl or diaeresis.
    //     The former makes a lot more sense.
    key <AC11> { [ dead_acute,   dead_diaeresis, apostrophe,           quotedbl        ] };

    key <AB01> { [ z,            Z,              ae,                   AE              ] };
    key <AB02> { [ x,            X                                                     ] };
    key <AB03> { [ c,            C,              copyright                             ] };
    key <AB04> { [ v,            V                                                     ] };
    key <AB05> { [ b,            B                                                     ] };
    key <AB06> { [ n,            N,              ntilde,               Ntilde          ] };
    key <AB07> { [ m,            M,              mu                                    ] };
    key <AB08> { [ comma,        less,           ccedilla,             Ccedilla        ] };
    key <AB09> { [ period,       greater                                               ] };
    key <AB10> { [ slash,        question,       questiondown                          ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
xkb_symbols "us_nodeadkeys" {
    name[Group1] = "U.S. English - no dead keys";

    include "nokia_vndr/su-8w(us_intl)"

    // XXX Not entirely sure if second level is quotedbl or diaeresis.
    //     The former makes a lot more sense.
    key <AC10> { [ apostrophe,    quotedbl,       dead_acute,           dead_diaeresis ] };
};



default partial alphanumeric_keys
xkb_symbols "base" {
    // forked from from pc(pc105); madness.
    key <ESC>  {	[ Escape			]	};

    // the extra key on most European keyboards
    key <LSGT> {	[      less,    greater,          bar,    brokenbar ]	};

    // these keys are common to all layouts
    key <BKSL> {	[ backslash,	bar		]	};
    key <SPCE> {	[ 	 space			]	};

    key <BKSP> { [ BackSpace ] };

    key  <TAB> {	[ Tab,	ISO_Left_Tab	]	};
    key <RTRN> {	[ Return	]	};
    // we don't ever generate this key, but the VKB needs it always.
    key <KPEN> {        [ KP_Enter      ]       };
    // generated from the headset, must always be in the map.
    key <I29>  {        [ XF86Phone     ]       };

    key <CAPS> {	[ Caps_Lock	]	};

    key <NMLK> {	[ Num_Lock, Pointer_EnableKeys		]	};

    key <LFSH> {	[ Shift_L	]	};
    key <LCTL> {	[ Control_L	]	};
    key <LALT> {	[ Alt_L,	Meta_L		]	};
    key <LWIN> {	[ Super_L			]	};

    key <RTSH> {	[ Shift_R	]	};
    key <RCTL> {	[ Control_R	]	};
    key <RALT> {	[ Alt_R,	Meta_R		]	};
    key <RWIN> {	[ Super_R			]	};

    key <MENU> {	[ Menu			]	};

    key <FK01> { [ F1 ] };
    key <FK02> { [ F2 ] };
    key <FK03> { [ F3 ] };
    key <FK04> { [ F4 ] };
    key <FK05> { [ F5 ] };
    key <FK06> { [ F6 ] };
    key <FK07> { [ F7 ] };
    key <FK08> { [ F8 ] };
    key <FK09> { [ F9 ] };
    key <FK10> { [ F11 ] };
    key <FK11> { [ F10 ] };
    key <FK12> { [ F12 ] };

    // Begin modifier mappings
    modifier_map Shift  { Shift_L, Shift_R };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L, Control_R };
    modifier_map Mod2   { Num_Lock };

    // Fake keys for virtual<->real modifiers mapping:
    key <LVL3> {	[ ISO_Level3_Shift	]	};
    key <MDSW> {	[ Mode_switch 		]	};
    modifier_map Mod5   { <LVL3>, <MDSW> };

    key <ALT>  {	[ NoSymbol, Alt_L	]	};
    modifier_map Mod1   { <ALT>, <LALT> };

    key <META> {	[ NoSymbol, Meta_L	]	};
    modifier_map Mod1   { <META> };

    key <SUPR> {	[ NoSymbol, Super_L	]	};
    modifier_map Mod4   { <SUPR> };

    key <HYPR> {	[ NoSymbol, Hyper_L	]	};
    modifier_map Mod4   { <HYPR> };
    // End modifier mappings

    key  <INS> {        [  Insert               ]       };
    key <DELE> {        [  Delete               ]       };
    key  <END> {        [  End                  ]       };
    key   <UP> {	[  Up			]	};
    key <LEFT> {	[  Left			]	};
    key <DOWN> {	[  Down			]	};
    key <RGHT> {	[  Right		]	};

    // True for all layouts (except for ru).
    key <TLDE> { [ grave, asterisk, asciitilde ] };

    // SU-8W uses 140 for Home, not the normal keycode.  Very useful.
    key <HOME> {        [       NoSymbol                ]       };
    // Ditto LWIN/RWIN and Page Up/Page Down.
    key <PGUP> {        [       none                ]       };
    key <PGDN> {        [       NoSymbol                ]       };

    // The LWIN & RWIN keys correspond to the 'select left' and
    // 'select right' keys.
    key <LWIN> {	[	Prior		]	};
    key <RWIN> {	[	Next		]	};

    // <FRNT> = 140 ~ <I140>
    key <FRNT> {	[	Home			]	};
    // <PROP> = 138 ~ <I138>
    key <PROP> {	[	Menu			]	};
    key <I163> {	[	XF86Mail		]	};

    // Power button.
    key <I5E> {         [       Execute                 ]       };
};
default partial alphanumeric_keys
xkb_symbols "common" {
    include "nokia_vndr/rx-51(common_keys)"
    include "nokia_vndr/rx-51(modifiers)"

	key <BKSP>	{ [	BackSpace,	Delete,		BackSpace,	Delete		] };
	
    // This section should not be included by any other section.
    // It's referenced only once by rule file to allow multiple layout configurations.

    // More than one layout at the same time could be set for instance as follows:
    // setxkbmap -rules evdev \
    //           -model nokiarx51 \
    //           -option grp:ctrl_shift_toggle \
    //           -layout us,cz \
    //           -variant ",qwerty"

    // Notice the similarity:
    //   "pc+us+cz(qwerty):2+grp:XYZ" vs.
    //   "nokia_vndr/rx-51(common)+nokia_vndr/rx-51(us)+nokia_vndr/rx-51(cz_qwerty):2+grp:XYZ"
    // where XYZ is one of xkb_symbols section usually located in file symbols/group.

    // Bear in mind that option XYZ could replace current keys configuration!!!

    // For instance using symbols/group(ctrl_shift_toggle) redefines LCTL and LFSH keys
    // which may disallow opening of virtual symbol table (Multi_key).
    // Fortunately the Multi_key is defined in 3rd and 4th level a ctrl_shift_toggle
    // redefines first two levels only. But RX-51 has not right Ctrl nor Shift therefore
    // pressing Ctrl+Shift will switch to previous layout, not to the next one.

    // For RX-51 device there is a lot of restrictions if more than one layout is
    // is configured at the same time because some modifiers and special cases are
    // handled by hildon layer (especially with eight-level layout):
    //  - settings may be done from terminal only (GUI does not and won't support it)
    //  - virtual symbol table is not updated according to current layout
    //  - for unknown reasons the eight-level layout (nordic,ru) works properly
    //    only if it's configured as first layout (e.g. "ru,us,cz" not "us,cz,ru")
    //    otherwise it's not possible to access levels 5-8
    //  - Ctrl+Space related problems:
    //     - If eight-level layout is used as first layout one of eight-level layouts has to
    //       be also chosen in GUI - otherwise the Ctrl+Space "switch" is disabled
    //     - Ctrl+Space has no effect if only four-level layouts are chosen
    //       (don't forget the layout configured in GUI - despite of it's not reachable)
    //     - a few keys in 2nd layer could be mixed with other layouts when Ctrl+Space is "turned on" (why?)
    //       in case eight- and four-level layouts are configured simultaneously
    //     - Ctrl+Space is "turned on" by default and has to be "turned off" for four-level layouts
    //       in case eight- and four-level layouts are configured simultaneously
    //     - four-level layout on first place does not work at all when Ctrl+Space is "turned on"
    //       in case the 2nd, 3rd or 4th layout is eight-level layout
};

////////////////////////////////////////////////////////////////////////////////

partial alphanumeric_keys
xkb_symbols "us" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
};



partial alphanumeric_keys
xkb_symbols "pl" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "Polish";
};



partial alphanumeric_keys
xkb_symbols "fise" {
    include "nokia_vndr/rx-51(nordic_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Finnish/Swedish";

    // 2. row
    key <AB09>	{ [	odiaeresis,	Odiaeresis,	exclam,		exclam		] };
    key <UP>	{ [	adiaeresis,	Adiaeresis,	question,	question	] };
};



partial alphanumeric_keys
xkb_symbols "dano" {
    include "nokia_vndr/rx-51(nordic_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Danish/Norwegian";

    // 2. row
    key <AB09>	{ [	oslash,		Oslash,		exclam,		exclam		] };
    key <UP>	{ [	ae,		AE,		question,	question	] };
};



partial alphanumeric_keys
xkb_symbols "nordic" {
    include "nokia_vndr/rx-51(nordic_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Danish/Finnish/Norwegian/Swedish";

    key.type[Group1] = "EIGHT_LEVEL_SEMIALPHABETIC";

    // 2. row
    key <AB09>	{ [	odiaeresis,	Odiaeresis,	exclam,		exclam,		oslash,		Oslash,		exclam,		exclam		] };
    key <UP>	{ [	adiaeresis,	Adiaeresis,	question,	question,	ae,		AE,		question,	question	] };
};



partial alphanumeric_keys
xkb_symbols "ptes" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Portuguese/Spanish";

    // 1. row
    key <AB08>	{ [	dead_acute,	dead_acute,	dead_grave,	dead_grave	] };

    // 2. row
    key <AC05>	{ [	g,		G,		exclamdown,	exclamdown	] };
    key <AC06>	{ [	h,		H,		exclam,		exclam		] };
    key <AC07>	{ [	j,		J,		questiondown,	questiondown	] };
    key <AC08>	{ [	k,		K,		question,	question	] };
    key <AC09>	{ [	l,		L,		dead_diaeresis,	dead_diaeresis	] };
    key <AB09>	{ [	ntilde,		Ntilde,		dead_tilde,	dead_tilde	] };
    key <UP>	{ [	ccedilla,	Ccedilla,	dead_circumflex,dead_circumflex	] };

    // 3. row
    key <AB01>	{ [	z,		Z,		parenleft,	parenleft	] };
    key <AB02>	{ [	x,		X,		parenright,	parenright 	] };
    key <AB03>	{ [	c,		C,		slash,		slash		] };
    key <AB04>	{ [	v,		V,		quotedbl,	quotedbl	] };
    key <AB05>	{ [	b,		B,		apostrophe,	apostrophe	] };
    key <AB06>	{ [	n,		N,		colon,		colon		] };
    key <AB07>	{ [	m,		M,		semicolon,	semicolon	] };
    key <LEFT>	{ [	period,		comma,		comma,		comma		] };
};



partial alphanumeric_keys
xkb_symbols "fr" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "French";

    // 1. row
    key <AD01>	{ [	a,		A,		1,		1		] };
    key <AD02>	{ [	z,		Z,		2,		2		] };
    key <AB08>	{ [	agrave,		Agrave,		ccedilla,	Ccedilla	] };

    // 2. row
    key <AC01>	{ [	q,		Q,		asterisk,	asterisk	] };
    key <AC02>	{ [	s,		S,		plus,		plus		] };
    key <AC03>	{ [	d,		D,		numbersign,	numbersign	] };
    key <AC04>	{ [	f,		F,		minus,  	minus		] };
    key <AC05>	{ [	g,		G,		underscore,	underscore	] };
    key <AC06>	{ [	h,		H,		exclam,		exclam		] };
    key <AC07>	{ [	j,		J,		question,	question	] };
    key <AC08>	{ [	k,		K,		colon,		colon		] };
    key <AC09>	{ [	l,		L,		dead_circumflex,dead_circumflex	] };
    key <AB09>	{ [	m,		M,		ugrave,		Ugrave		] };
    key <UP>	{ [	eacute,		Eacute,		egrave,		Egrave		] };

    // 3. row
    key <AB01>	{ [	w,		W,		EuroSign,       EuroSign	] };
    key <AB03>	{ [	c,		C,		parenleft,	parenleft	] };
    key <AB04>	{ [	v,		V,		parenright,	parenright	] };
    key <AB05>	{ [	b,		B,		slash,		slash		] };
    key <AB07>	{ [	comma,		comma,		apostrophe,	apostrophe	] };
    key <LEFT>	{ [	semicolon,	period,		period,		period		] };
};



partial alphanumeric_keys
xkb_symbols "de" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "German";

    // 1. row
    key <AD06>	{ [	z,		Z,		6,		6		] };
    key <AB08>	{ [	udiaeresis,	Udiaeresis,	ssharp,		U1E9E		] };

    // 2. row
    key <AC08>	{ [	k,		K,		semicolon,	semicolon	] };
    key <AC09>	{ [	l,		L,		colon,		colon		] };
    key <AB09>	{ [	odiaeresis,	Odiaeresis,	exclam,		exclam		] };
    key <UP>	{ [	adiaeresis,	Adiaeresis,	question,	question	] };

    // 3. row
    key <AB01>	{ [	y,		Y,		EuroSign,	EuroSign	] };
    key <AB03>	{ [	c,		C,		equal,		equal		] };
    key <LEFT>	{ [	period,		comma,		comma,		comma		] };
};



partial alphanumeric_keys
xkb_symbols "ch" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Swiss";

    // 1. row
    key <AD06>	{ [	z,		Z,		6,		6		] };
    key <AB08>	{ [	udiaeresis,	Udiaeresis,	egrave,		Egrave		] };

    // 2. row
    key <AC06>	{ [	h,		H,		equal,		equal		] };
    key <AC07>	{ [	j,		J,		parenleft,	parenleft	] };
    key <AC08>	{ [	k,		K,		parenright,	parenright	] };
    key <AC09>	{ [	l,		L,		colon,		colon		] };
    key <AB09>	{ [	odiaeresis,	Odiaeresis,	eacute,		Aacute		] };
    key <UP>	{ [	adiaeresis,	Adiaeresis,	agrave,		Agrave		] };

    // 3. row
    key <AB01>	{ [	y,		Y,		question,	question	] };
    key <AB02>	{ [	x,		X,		exclam,		exclam		] };
    key <AB03>	{ [	c,		C,		ccedilla,	Ccedilla	] };
    key <LEFT>	{ [	period,		comma,		comma,		comma		] };
};



// Levels 5-8 are Russian, levels 1-4 US English, for shortcut reasons.
partial alphanumeric_keys
xkb_symbols "ru" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Russian";

    key.type[Group1] = "EIGHT_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ [	q,		Q,		1,			1,			Cyrillic_shorti,	Cyrillic_SHORTI,	1,			1			] };
    key <AD02>	{ [	w,		W,		2,			2,			Cyrillic_tse,		Cyrillic_TSE,		2,			2			] };
    key <AD03>	{ [	e,		E,		3,			3,			Cyrillic_u,		Cyrillic_U,		3,			3			] };
    key <AD04>	{ [	r,		R,		4,			4,			Cyrillic_ka,		Cyrillic_KA,		4,			4			] };
    key <AD05>	{ [	t,		T,		5,			5,			Cyrillic_ie,		Cyrillic_IE,		5,			5			] };
    key <AD06>	{ [	y,		Y,		6,			6,			Cyrillic_en,		Cyrillic_EN,		6,			6			] };
    key <AD07>	{ [	u,		U,		7,			7,			Cyrillic_ghe,		Cyrillic_GHE,		7,			7			] };
    key <AD08>	{ [	i,		I,		8,			8,			Cyrillic_sha,		Cyrillic_SHA,		8,			8			] };
    key <AD09>	{ [	o,		O,		9,			9,			Cyrillic_shcha,		Cyrillic_SHCHA,		9,			9			] };
    key <AD10>	{ [	p,		P,		0,			0,			Cyrillic_ze,		Cyrillic_ZE,		0,			0			] };
    key <AB08>  { [	Cyrillic_ha,	Cyrillic_HA,	Cyrillic_hardsign,	Cyrillic_HARDSIGN,	Cyrillic_ha,		Cyrillic_HA,		Cyrillic_hardsign,	Cyrillic_HARDSIGN	] };

    // 2. row
    key <AC01>	{ [	a,		A,		asterisk,		asterisk,		Cyrillic_ef,		Cyrillic_EF,		asterisk,		asterisk		] };
    key <AC02>	{ [	s,		S,		plus,			plus,			Cyrillic_yeru,		Cyrillic_YERU,		plus,			plus			] };
    key <AC03>	{ [	d,		D,		numbersign,		numbersign,		Cyrillic_ve,		Cyrillic_VE,		numbersign,		numbersign		] };
    key <AC04>	{ [	f,		F,		minus,			minus,			Cyrillic_a,		Cyrillic_A,		minus,			minus			] };
    key <AC05>	{ [	g,		G,		underscore,		underscore,		Cyrillic_pe,		Cyrillic_PE,		underscore,		underscore		] };
    key <AC06>	{ [	h,		H,		exclam,			exclam,			Cyrillic_er,		Cyrillic_ER,		exclam,			exclam			] };
    key <AC07>	{ [	j,		J,		question,		question,		Cyrillic_o,		Cyrillic_O,		question,		question		] };
    key <AC08>	{ [	k,		K,		semicolon,		semicolon,		Cyrillic_el,		Cyrillic_EL,		semicolon,		semicolon		] };
    key <AC09>	{ [	l,		L,		colon,			colon,			Cyrillic_de,		Cyrillic_DE,		colon,			colon			] };
    key <AB09>	{ [	comma,		comma,		comma,			comma,			Cyrillic_zhe,		Cyrillic_ZHE,		comma,			comma			] };
    key <UP>	{ [	period,		period,		period,			period,			Cyrillic_e,		Cyrillic_E,		period,			period			] };

    // 3. row
    key <AB01>	{ [	z,		Z,		dollar,			dollar,			Cyrillic_ya,		Cyrillic_YA,		dollar,			dollar			] };
    key <AB02>	{ [	x,		X,		EuroSign,		EuroSign,		Cyrillic_che,		Cyrillic_CHE,		EuroSign,		EuroSign		] };
    key <AB03>	{ [	c,		C,		slash,			slash,			Cyrillic_es,		Cyrillic_ES,		slash,			slash			] };
    key <AB04>	{ [	v,		V,		parenleft,		parenleft,		Cyrillic_em,		Cyrillic_EM,		parenleft,		parenleft		] };
    key <AB05>	{ [	b,		B,		parenright,		parenright,		Cyrillic_i,		Cyrillic_I,		parenright,		parenright		] };
    key <AB06>	{ [	n,		N,		quotedbl,		quotedbl,		Cyrillic_te,		Cyrillic_TE,		quotedbl,		quotedbl		] };
    key <AB07>	{ [	m,		M,		apostrophe,		apostrophe,		Cyrillic_softsign,	Cyrillic_SOFTSIGN,	apostrophe,		apostrophe		] };
    key <LEFT>	{ [	Cyrillic_be,	Cyrillic_BE,	Cyrillic_yu,		Cyrillic_YU,		Cyrillic_be,		Cyrillic_BE,		Cyrillic_yu,		Cyrillic_YU		] };
};



partial alphanumeric_keys
xkb_symbols "it" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Italian";

    // 1. row
    key <AB08>	{ [	egrave,		Egrave,		eacute,		Eacute		] };

    // 2. row
    key <AC06>	{ [	h,		H,		semicolon,	semicolon	] };
    key <AC07>	{ [	j,		J,		colon,		colon		] };
    key <AC08>	{ [	k,		K,		exclam,		exclam		] };
    key <AC09>	{ [	l,		L,		question,	question	] };
    key <AB09>	{ [	ograve,		Ograve,		igrave,		Igrave		] };
    key <UP>	{ [	agrave,		Agrave,		ugrave,		Ugrave		] };

    // 3. row
    key <AB01>	{ [	z,		Z,		EuroSign,	EuroSign	] };
    key <AB02>	{ [	x,		X,		parenleft,	parenleft	] };
    key <AB03>	{ [	c,		C,		parenright,	parenright	] };
    key <LEFT>	{ [	period,		comma,		comma,		comma		] };
};



partial alphanumeric_keys
xkb_symbols "cz" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Czech";

    // 1. row
    key <AD06>	{ [	z,		Z,		6,		6		] };
    key <AB08>	{ [	dead_acute,	dead_acute,	sterling,	sterling	] };

    // 2. row
    key <AC08>	{ [	k,		K,		semicolon,	semicolon	] };
    key <AC09>	{ [	l,		L,		colon,		colon		] };
    key <AB09>	{ [	uring,		Uring,		EuroSign,	EuroSign	] };
    key <UP>	{ [	dead_caron,	dead_caron,	dollar,		dollar		] };

    // 3. row
    key <AB01>	{ [	y,		Y,		equal,		equal		] };
    key <AB02>	{ [	x,		X,		slash,		slash		] };
    key <AB03>	{ [	c,		C,		backslash,	backslash	] };
    key <AB04>	{ [	v,		V,		apostrophe,	apostrophe	] };
    key <AB05>	{ [	b,		B,		quotedbl,	quotedbl	] };
    key <AB06>	{ [	n,		N,		exclam,		exclam		] };
    key <AB07>	{ [	m,		M,		question,	question	] };
    key <LEFT>	{ [	period,		comma,		comma,		comma		] };
};

partial alphanumeric_keys
xkb_symbols "cz_qwerty" {
    include "nokia_vndr/rx-51(cz)"

    name[Group1] = "Czech - qwerty";

    // Do not use the layout "cz_qwerty" directly if it is the only layout and compat rules enabled.
    // There is one compat rule that converts "cz_qwerty" to "pc+cz(qwerty)" which is not correct for RX-51.
    // Use either the layout "cz(qwerty)" or the general "cz" with variant "qwerty".

    // 1. row
    key <AD06>	{ [	y,		Y,		6,		6		] };

    // 3. row
    key <AB01>	{ [	z,		Z,		percent,	percent		] };
};



////////////////////////////////////////////////////////////////////////////////

partial hidden alphanumeric_keys
xkb_symbols "nordic_base" {
    include "nokia_vndr/rx-51(english_base)"

    // 1. row
    key <AB08>	{ [	aring,		Aring,		equal,		equal		] };

    // 2. row
    key <AC08>	{ [	k,		K,		semicolon,	semicolon	] };
    key <AC09>	{ [	l,		L,		colon,		colon		] };

    // 3. row
    key <AB01>	{ [	z,		Z,		EuroSign,	EuroSign	] };
    key <AB03>	{ [	c,		C,		sterling,	sterling	] };
    key <LEFT>	{ [	period,		comma,		comma,		comma		] };
};

partial hidden alphanumeric_keys
xkb_symbols "english_base" {

    // 1. row
    key <AD01>	{ [	q,		Q,		1,		1		] };
    key <AD02>	{ [	w,		W,		2,		2		] };
    key <AD03>	{ [	e,		E,		3,		3		] };
    key <AD04>	{ [	r,		R,		4,		4		] };
    key <AD05>	{ [	t,		T,		5,		5		] };
    key <AD06>	{ [	y,		Y,		6,		6		] };
    key <AD07>	{ [	u,		U,		7,		7		] };
    key <AD08>	{ [	i,		I,		8,		8		] };
    key <AD09>	{ [	o,		O,		9,		9		] };
    key <AD10>	{ [	p,		P,		0,		0		] };
    key <AB08>	{ [	comma,		semicolon,	equal,		equal		] };

    // 2. row
    key <AC01>	{ [	a,		A,		asterisk,	asterisk	] };
    key <AC02>	{ [	s,		S,		plus,		plus		] };
    key <AC03>	{ [	d,		D,		numbersign,	numbersign	] };
    key <AC04>	{ [	f,		F,		minus,		minus		] };
    key <AC05>	{ [	g,		G,		underscore,	underscore	] };
    key <AC06>	{ [	h,		H,		parenleft,	parenleft	] };
    key <AC07>	{ [	j,		J,		parenright,	parenright	] };
    key <AC08>	{ [	k,		K,		ampersand,	ampersand	] };
    key <AC09>	{ [	l,		L,		exclam,		exclam		] };
    key <AB09>	{ [	period,		colon,		question,	question	] };

    // 3. row
    key <AB01>	{ [	z,		Z,		sterling,	sterling	] };
    key <AB02>	{ [	x,		X,		dollar,		dollar		] };
    key <AB03>	{ [	c,		C,		EuroSign,	EuroSign	] };
    key <AB04>	{ [	v,		V,		slash,		slash		] };
    key <AB05>	{ [	b,		B,		backslash,	backslash	] };
    key <AB06>	{ [	n,		N,		quotedbl,	quotedbl	] };
    key <AB07>	{ [	m,		M,		apostrophe,	apostrophe	] };
    key <SPCE>	{ [	space,		space,		at,		at		] };
};

partial hidden alphanumeric_keys
xkb_symbols "common_keys" {
    // all other common keys

    key <BKSP>	{ [	BackSpace	] };
    key <TAB>	{ [	Tab		] };

    // broken UI spec.
    key <RTRN>	{ [	KP_Enter	] };

    key <KPEN>	{ [	Return		] };
    key <ESC>	{ [	Escape		] };

    key <FK01>	{ [	F1	] };
    key <FK02>	{ [	F2	] };
    key <FK03>	{ [	F3	] };
    key <FK04>	{ [	F4	] };
    key <FK05>	{ [	F5	] };
    key <FK06>	{ [	F6	] };

    // Swap +/- keys intentionally. The VOL+/VOL- keys are located physically
    // on left/right and up/down in landscape/portrait orientation. This does
    // not feel natural for the user and therefore we want the VOL+/VOL- keys
    // map to -/+.
    //
    // The only exception is an active call in portrait mode where we want to
    // use the real meanings of the keys. This special case and management of
    // +/- keys in general is handled in maemo-statusmenu-volume.
    key <FK07>	{ [	F8	] };
    key <FK08>	{ [	F7	] };

    key <FK09>	{ [	F9	] };
    key <FK10>	{ [	F10	] };
    key <FK11>	{ [	F11	] };
};

partial hidden alphanumeric_keys modifier_keys
xkb_symbols "modifiers" {
    // Shift switches between current level and level+1
    key <LFSH>	{
	type[Group1] = "ONE_LEVEL",
	symbols[Group1] = [	Shift_L	]
    };
    modifier_map Shift { Shift_L };

    // Fn+Ctrl virtual symbol table (Multi_key)
    // Ctrl+Space switches between 1st and 5th level (hardcoded in hildon)
    key <LCTL>	{
	type[Group1] = "FOUR_LEVEL",
	symbols[Group1] = [	Control_L,	Control_L,	Multi_key,	Multi_key	]
    };
    modifier_map Control { Control_L };

    // Fn key (right alt) switches to 3rd level
    include "level3(ralt_switch)"
};

partial hidden alphanumeric_keys
xkb_symbols "arrows_2btns" {
    // rx-51 specific arrows mapping
    // normal 2nd level must not be enumerated to allow text selection with Shift key
    key <DOWN>	{ type[Group1] = "PC_FN_LEVEL2", symbols[Group1] = [	Left,	Up	] };
    key <RGHT>	{ type[Group1] = "PC_FN_LEVEL2", symbols[Group1] = [	Right,	Down	] };
};

partial hidden alphanumeric_keys
xkb_symbols "arrows_4btns" {
    // standard arrows mapping
    // normal 2nd level must not be enumerated to allow text selection with Shift key
    key <UP>	{ type[Group1] = "ONE_LEVEL", symbols[Group1] = [	Up	] };
    key <LEFT>	{ type[Group1] = "ONE_LEVEL", symbols[Group1] = [	Left	] };
    key <DOWN>	{ type[Group1] = "ONE_LEVEL", symbols[Group1] = [	Down	] };
    key <RGHT>	{ type[Group1] = "ONE_LEVEL", symbols[Group1] = [	Right	] };
};

// author: Roman Moravcik
xkb_symbols "sk" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Slovak QWERTZ (CZ HW)";

    // 1. row
    key <AD06>	{ [	z,		Z,		6,		6		] };
    key <AB08>	{ [	dead_acute,	dead_acute,	sterling,	sterling	] };

    // 2. row
    key <AC08>	{ [	k,		K,		semicolon,	semicolon	] };
    key <AC09>	{ [	l,		L,		colon,		colon		] };
    key <AB09>	{ [	ocircumflex,	adiaeresis,	EuroSign,	EuroSign	] };
    key <UP>	{ [	dead_caron,	bar,		dollar,		dollar		] };

    // 3. row
    key <AB01>	{ [	y,		Y,		equal,		equal		] };
    key <AB02>	{ [	x,		X,		slash,		slash		] };
    key <AB03>	{ [	c,		C,		backslash,	backslash	] };
    key <AB04>	{ [	v,		V,		apostrophe,	apostrophe	] };
    key <AB05>	{ [	b,		B,		quotedbl,	quotedbl	] };
    key <AB06>	{ [	n,		N,		exclam,		exclam		] };
    key <AB07>	{ [	m,		M,		question,	question	] };
    key <LEFT>	{ [	period,		Tab,		comma,		comma		] };
};

xkb_symbols "sk_qwerty" {
    include "nokia_vndr/rx-51(sk)"

    name[Group1] = "Slovak QWERTY (CZ hw)";

    // 1. row
    key <AD06>	{ [	y,		Y,		6,		6		] };

    // 3. row
    key <AB01>	{ [	z,		Z,		equal,		equal		] };
};

// author: Roman Moravcik
partial alphanumeric_keys
xkb_symbols "aren" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Arabic";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	Arabic_dad,		Arabic_fatha,		0x1000661,		0x1000661		] };
    key <AD02>	{ symbols[Group2] = [	Arabic_sad,		Arabic_fathatan,	0x1000662,		0x1000662		] };
    key <AD03>	{ symbols[Group2] = [	Arabic_theh,		Arabic_damma,		0x1000663,		0x1000663		] };
    key <AD04>	{ symbols[Group2] = [	Arabic_qaf,		Arabic_dammatan,	0x1000664,		0x1000664		] };
    key <AD05>	{ symbols[Group2] = [	Arabic_feh,		0x100fef9,		0x1000665,		0x1000665		] };
    key <AD06>	{ symbols[Group2] = [	Arabic_ghain,		Arabic_hamzaunderalef,	0x1000666,		0x1000666		] };
    key <AD07>	{ symbols[Group2] = [	Arabic_ain,		rightsinglequotemark,	0x1000667,		0x1000667		] };
    key <AD08>	{ symbols[Group2] = [	Arabic_ha,		Arabic_tehmarbuta,	0x1000668,		0x1000668		] };
    key <AD09>	{ symbols[Group2] = [	Arabic_khah,		division,		0x1000669,		0x1000669		] };
    key <AD10>	{ symbols[Group2] = [	Arabic_hah,		multiply,		0x1000660,		0x1000660		] };
    key <AB08>	{ symbols[Group2] = [	Arabic_jeem,		period,			equal,			equal			] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	Arabic_sheen,		Arabic_kasra,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	Arabic_seen,		Arabic_kasratan,	plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	Arabic_yeh,		Arabic_alefmaksura,	numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	Arabic_beh,		Arabic_hamzaonyeh,	minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	Arabic_lam,		0x100fef7,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	Arabic_alef,		Arabic_hamzaonalef,	parenright,		parenright		] };
    key <AC07>	{ symbols[Group2] = [	Arabic_teh,		Arabic_tatweel,		parenleft,		parenleft		] };
    key <AC08>	{ symbols[Group2] = [	Arabic_noon,		Arabic_comma,		ampersand,		ampersand		] };
    key <AC09>	{ symbols[Group2] = [	Arabic_meem,		Arabic_semicolon,	exclam,			exclam			] };
    key <AB09>	{ symbols[Group2] = [	Arabic_kaf,		colon,			Arabic_question_mark,	Arabic_question_mark	] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	Arabic_thal,		Arabic_shadda,		sterling,		sterling		] };
    key <AB02>	{ symbols[Group2] = [	Arabic_dal,		Arabic_sukun,		dollar,			dollar			] };
    key <AB03>	{ symbols[Group2] = [	Arabic_waw,		Arabic_hamzaonwaw,	EuroSign,		EuroSign		] };
    key <AB04>	{ symbols[Group2] = [	Arabic_ra,		0x100fef5,		slash,			slash			] };
    key <AB05>	{ symbols[Group2] = [	Arabic_zain,		0x100fefb,		backslash,		backslash		] };
    key <AB06>	{ symbols[Group2] = [	Arabic_tah,		Arabic_maddaonalef,	quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	Arabic_zah,		Arabic_hamza,		apostrophe,		apostrophe		] };
};

// author: Hessam Farhang
partial alphanumeric_keys
xkb_symbols "faen" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Persian";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	Arabic_dad,		Arabic_sukun,		0x10006f1,		0x1000661		] };
    key <AD02>	{ symbols[Group2] = [	Arabic_sad,		Arabic_dammatan,	0x10006f2,		0x1000662		] };
    key <AD03>	{ symbols[Group2] = [	Arabic_theh,		Arabic_kasratan,	0x10006f3,		0x1000663		] };
    key <AD04>	{ symbols[Group2] = [	Arabic_qaf,		Arabic_fathatan,	0x10006f4,		0x1000664		] };
    key <AD05>	{ symbols[Group2] = [	Arabic_feh,		Arabic_damma,		0x10006f5,		0x1000665		] };
    key <AD06>	{ symbols[Group2] = [	Arabic_ghain,		Arabic_kasra,		0x10006f6,		0x1000666		] };
    key <AD07>	{ symbols[Group2] = [	Arabic_ain,		Arabic_fatha,		0x10006f7,		0x1000667		] };
    key <AD08>	{ symbols[Group2] = [	Arabic_heh,		Arabic_shadda,		0x10006f8,		0x1000668		] };
    key <AD09>	{ symbols[Group2] = [	Arabic_khah,		0x10006af,		0x10006f9,		0x1000669		] };
    key <AD10>	{ symbols[Group2] = [	Arabic_hah,		0x1000686,		0x10006f0,		0x1000660		] };
    key <AB08>	{ symbols[Group2] = [	Arabic_jeem,		Arabic_comma,		comma,			Arabic_semicolon	] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	Arabic_sheen,		Arabic_hamzaonwaw,	asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	Arabic_seen,		Arabic_hamzaonyeh,	plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	0x10006cc,		period,			numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	Arabic_beh,		colon,			minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	Arabic_lam,		Arabic_hamzaonalef,	underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	Arabic_alef,		Arabic_maddaonalef,	parenleft,		parenleft		] };
    key <AC07>	{ symbols[Group2] = [	Arabic_teh,		Arabic_tehmarbuta,	parenright,		parenright		] };
    key <AC08>	{ symbols[Group2] = [	Arabic_noon,		guillemotright,		ampersand,		ampersand		] };
    key <AC09>	{ symbols[Group2] = [	Arabic_meem,		guillemotleft,		exclam,			exclam			] };
    key <AB09>	{ symbols[Group2] = [	0x10006a9,		Arabic_waw,		Arabic_question_mark,	colon			] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	Arabic_zah,		Arabic_kaf,		sterling,		period			] };
    key <AB02>	{ symbols[Group2] = [	Arabic_tah,		0x1000653,		dollar,			dollar			] };
    key <AB03>	{ symbols[Group2] = [	Arabic_zain,		0x1000698,		EuroSign,		EuroSign		] };
    key <AB04>	{ symbols[Group2] = [	Arabic_ra,		0x1000670,		slash,			slash			] };
    key <AB05>	{ symbols[Group2] = [	Arabic_thal,		0x100200c,		backslash,		backslash		] };
    key <AB06>	{ symbols[Group2] = [	Arabic_dal,		0x1000654,		quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	0x100067e,		Arabic_hamza,		apostrophe,		apostrophe		] };
};

// author: Jaroslav Poriz
xkb_symbols "dv" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "Dvorak";

    // 1. row
    key <AD01>	{ [	colon,		semicolon,	1,		1		] };
    key <AD02>	{ [	w,		W,		2,		2		] };
    key <AD03>	{ [	v,		V,		3,		3		] };
    key <AD04>	{ [	p,		P,		4,		4		] };
    key <AD05>	{ [	y,		Y,		5,		5		] };
    key <AD06>	{ [	f,		F,		6,		6		] };
    key <AD07>	{ [	g,		G,		7,		7		] };
    key <AD08>	{ [	c,		C,		8,		8		] };
    key <AD09>	{ [	r,		R,		9,		9		] };
    key <AD10>	{ [	l,		L,		0,		0		] };
    key <AB08>	{ [	period,		comma,		equal,		equal		] };

    // 2. row
    key <AC01>	{ [	a,		A,		asterisk,	asterisk	] };
    key <AC02>	{ [	o,		O,		plus,		plus		] };
    key <AC03>	{ [	e,		E,		numbersign,	numbersign	] };
    key <AC04>	{ [	u,		U,		minus,		minus		] };
    key <AC05>	{ [	i,		I,		underscore,	underscore	] };
    key <AC06>	{ [	d,		D,		exclam,		parenleft	] };
    key <AC07>	{ [	h,		H,		question,	parenright	] };
    key <AC08>	{ [	t,		T,		ampersand,	ampersand	] };
    key <AC09>	{ [	n,		N,		less,		exclam		] };
    key <AB09>	{ [	s,		S,		greater,	question	] };

    // 3. row
    key <AB01>	{ [	z,		Z,		asciitilde,	asciitilde	] };
    key <AB02>	{ [	q,		Q,		dollar,		dollar		] };
    key <AB03>	{ [	j,		J,		backslash,	bar		] };
    key <AB04>	{ [	k,		K,		grave,		slash		] };
    key <AB05>	{ [	x,		X,		parenleft,	backslash	] };
    key <AB06>	{ [	b,		B,		parenright,	quotedbl	] };
    key <AB07>	{ [	m,		M,		apostrophe,	apostrophe	] };
    key <SPCE>	{ [	space,		slash,		at,		at		] };
};

// author: Porfyras <porfyras@gmail.com>
// author: Roman Moravcik
// author: Faidon Liambotis
partial alphanumeric_keys
xkb_symbols "gr" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Greek";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	period,			colon,			1,			1		] };
    key <AD02>	{ symbols[Group2] = [	Greek_finalsmallsigma,	Greek_SIGMA,		2,			2		] };
    key <AD03>	{ symbols[Group2] = [	Greek_epsilon,		Greek_EPSILON,		3,			3		] };
    key <AD04>	{ symbols[Group2] = [	Greek_rho,		Greek_RHO,		4,			4		] };
    key <AD05>	{ symbols[Group2] = [	Greek_tau,		Greek_TAU,		5,			5		] };
    key <AD06>	{ symbols[Group2] = [	Greek_upsilon,		Greek_UPSILON,		6,			6		] };
    key <AD07>	{ symbols[Group2] = [	Greek_theta,		Greek_THETA,		7,			7		] };
    key <AD08>	{ symbols[Group2] = [	Greek_iota,		Greek_IOTA,		8,			8		] };
    key <AD09>	{ symbols[Group2] = [	Greek_omicron,		Greek_OMICRON,		9,			9		] };
    key <AD10>	{ symbols[Group2] = [	Greek_pi,		Greek_PI,		0,			0		] };
    key <AB08>	{ symbols[Group2] = [	comma,			semicolon,		equal,			equal		] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	Greek_alpha,		Greek_ALPHA,		asterisk,		asterisk	] };
    key <AC02>	{ symbols[Group2] = [	Greek_sigma,		Greek_SIGMA,		plus,			plus		] };
    key <AC03>	{ symbols[Group2] = [	Greek_delta,		Greek_DELTA,		numbersign,		numbersign	] };
    key <AC04>	{ symbols[Group2] = [	Greek_phi,		Greek_PHI,		minus,			minus		] };
    key <AC05>	{ symbols[Group2] = [	Greek_gamma,		Greek_GAMMA,		underscore,		underscore	] };
    key <AC06>	{ symbols[Group2] = [	Greek_eta,		Greek_ETA,		parenleft,		parenleft	] };
    key <AC07>	{ symbols[Group2] = [	Greek_xi,		Greek_XI,		parenright,		parenright	] };
    key <AC08>	{ symbols[Group2] = [	Greek_kappa,		Greek_KAPPA,		ampersand,		ampersand	] };
    key <AC09>	{ symbols[Group2] = [	Greek_lamda,		Greek_LAMDA,		exclam,			exclam		] };
    key <AB09>	{ symbols[Group2] = [	dead_acute,		dead_diaeresis,		question,		question	] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	Greek_zeta,		Greek_ZETA,		sterling,		sterling	] };
    key <AB02>	{ symbols[Group2] = [	Greek_chi,		Greek_CHI,		dollar,			dollar		] };
    key <AB03>	{ symbols[Group2] = [	Greek_psi,		Greek_PSI,		EuroSign,		EuroSign	] };
    key <AB04>	{ symbols[Group2] = [	Greek_omega,		Greek_OMEGA,		slash,			slash		] };
    key <AB05>	{ symbols[Group2] = [	Greek_beta,		Greek_BETA,		backslash,		backslash	] };
    key <AB06>	{ symbols[Group2] = [	Greek_nu,		Greek_NU,		quotedbl,		quotedbl	] };
    key <AB07>	{ symbols[Group2] = [	Greek_mu,		Greek_MU,		apostrophe,		apostrophe	] };
};

// author: Ognian Samokovliyski
// author: Kostadin Bashev
// author: Roman Moravcik
partial alphanumeric_keys
xkb_symbols "bg_phonetic" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Bulgarian - Phonetic";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	Cyrillic_ya,		Cyrillic_YA,		1,			1			] };
    key <AD02>	{ symbols[Group2] = [	Cyrillic_ve,		Cyrillic_VE,		2,			2			] };
    key <AD03>	{ symbols[Group2] = [	Cyrillic_ie,		Cyrillic_IE,		3,			3			] };
    key <AD04>	{ symbols[Group2] = [	Cyrillic_er,		Cyrillic_ER,		4,			4			] };
    key <AD05>	{ symbols[Group2] = [	Cyrillic_te,		Cyrillic_TE,		5,			5			] };
    key <AD06>	{ symbols[Group2] = [	Cyrillic_hardsign,	Cyrillic_HARDSIGN,	6,			6			] };
    key <AD07>	{ symbols[Group2] = [	Cyrillic_u,		Cyrillic_U,		7,			7			] };
    key <AD08>	{ symbols[Group2] = [	Cyrillic_i,		Cyrillic_I,		8,			8			] };
    key <AD09>	{ symbols[Group2] = [	Cyrillic_o,		Cyrillic_O,		9,			9			] };
    key <AD10>	{ symbols[Group2] = [	Cyrillic_pe,		Cyrillic_PE,		0,			0			] };
    key <AB08>	{ symbols[Group2] = [	comma,			semicolon,		equal,			equal			] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	Cyrillic_a,		Cyrillic_A,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	Cyrillic_es,		Cyrillic_ES,		plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	Cyrillic_de,		Cyrillic_DE,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	Cyrillic_ef,		Cyrillic_EF,		minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	Cyrillic_ghe,		Cyrillic_GHE,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	Cyrillic_ha,		Cyrillic_HA,		parenleft,		parenleft		] };
    key <AC07>	{ symbols[Group2] = [	Cyrillic_shorti,	Cyrillic_SHORTI,	parenright,		parenright		] };
    key <AC08>	{ symbols[Group2] = [	Cyrillic_ka,		Cyrillic_KA,		ampersand,		ampersand		] };
    key <AC09>	{ symbols[Group2] = [	Cyrillic_el,		Cyrillic_EL,		exclam,			exclam			] };
    key <AB09>	{ symbols[Group2] = [	period,			colon,			question,		question		] };
    key <UP>	{ symbols[Group2] = [	Cyrillic_yu,		Cyrillic_YU,		Up,			Up			] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	Cyrillic_ze,		Cyrillic_ZE,		sterling,		sterling		] };
    key <AB02>	{ symbols[Group2] = [	Cyrillic_softsign,	Cyrillic_SOFTSIGN,	dollar,			dollar			] };
    key <AB03>	{ symbols[Group2] = [	Cyrillic_tse,		Cyrillic_TSE,		EuroSign,		EuroSign		] };
    key <AB04>	{ symbols[Group2] = [	Cyrillic_zhe,		Cyrillic_ZHE,		slash,			slash			] };
    key <AB05>	{ symbols[Group2] = [	Cyrillic_be,		Cyrillic_BE,		backslash,		backslash		] };
    key <AB06>	{ symbols[Group2] = [	Cyrillic_en,		Cyrillic_EN,		quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	Cyrillic_em,		Cyrillic_EM,		apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group2] = [	Cyrillic_sha,		Cyrillic_SHA,		Left,			Left			] };
    key <DOWN>	{ symbols[Group2] = [	Cyrillic_shcha,		Cyrillic_SHCHA,		Down,			Down			] };
    key <RGHT>	{ symbols[Group2] = [	Cyrillic_che,		Cyrillic_CHE,		Right,			Right			] };
};

// author: Nikola Kovachevski
partial alphanumeric_keys
xkb_symbols "mk" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Macedonian";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	Cyrillic_lje,		Cyrillic_LJE,		1,			1			] };
    key <AD02>	{ symbols[Group2] = [	Cyrillic_nje,		Cyrillic_NJE,		2,			2			] };
    key <AD03>	{ symbols[Group2] = [	Cyrillic_ie,		Cyrillic_IE,		3,			3			] };
    key <AD04>	{ symbols[Group2] = [	Cyrillic_er,		Cyrillic_ER,		4,			4			] };
    key <AD05>	{ symbols[Group2] = [	Cyrillic_te,		Cyrillic_TE,		5,			5			] };
    key <AD06>	{ symbols[Group2] = [	Macedonia_dse,		Macedonia_DSE,		6,			6			] };
    key <AD07>	{ symbols[Group2] = [	Cyrillic_u,		Cyrillic_U,		7,			7			] };
    key <AD08>	{ symbols[Group2] = [	Cyrillic_i,		Cyrillic_I,		8,			8			] };
    key <AD09>	{ symbols[Group2] = [	Cyrillic_o,		Cyrillic_O,		9,			9			] };
    key <AD10>	{ symbols[Group2] = [	Cyrillic_pe,		Cyrillic_PE,		0,			0			] };
    key <AB08>	{ symbols[Group2] = [	Cyrillic_sha,		Cyrillic_SHA,		equal,			equal			] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	Cyrillic_a,		Cyrillic_A,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	Cyrillic_es,		Cyrillic_ES,		plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	Cyrillic_de,		Cyrillic_DE,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	Cyrillic_ef,		Cyrillic_EF,		minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	Cyrillic_ghe,		Cyrillic_GHE,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	Cyrillic_ha,		Cyrillic_HA,		parenleft,		parenleft		] };
    key <AC07>	{ symbols[Group2] = [	Cyrillic_je,		Cyrillic_JE,		parenright,		parenright		] };
    key <AC08>	{ symbols[Group2] = [	Cyrillic_ka,		Cyrillic_KA,		ampersand,		ampersand		] };
    key <AC09>	{ symbols[Group2] = [	Cyrillic_el,		Cyrillic_EL,		exclam,			exclam			] };
    key <AB09>	{ symbols[Group2] = [	period,			comma,			question,		question		] };
    key <UP>	{ symbols[Group2] = [	Cyrillic_che,		Cyrillic_CHE,		Up,			Up			] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	Cyrillic_ze,		Cyrillic_ZE,		colon,			colon			] };
    key <AB02>	{ symbols[Group2] = [	Cyrillic_dzhe,		Cyrillic_DZHE,		semicolon,		semicolon		] };
    key <AB03>	{ symbols[Group2] = [	Cyrillic_tse,		Cyrillic_TSE,		EuroSign,		EuroSign		] };
    key <AB04>	{ symbols[Group2] = [	Cyrillic_ve,		Cyrillic_VE,		slash,			slash			] };
    key <AB05>	{ symbols[Group2] = [	Cyrillic_be,		Cyrillic_BE,		backslash,		backslash		] };
    key <AB06>	{ symbols[Group2] = [	Cyrillic_en,		Cyrillic_EN,		quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	Cyrillic_em,		Cyrillic_EM,		apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group2] = [	Macedonia_kje,		Macedonia_KJE,		Left,			Left			] };
    key <DOWN>	{ symbols[Group2] = [	Cyrillic_zhe,		Cyrillic_ZHE,		Down,			Down			] };
    key <RGHT>	{ symbols[Group2] = [	Macedonia_gje,		Macedonia_GJE,		Right,			Right			] };
};

// author: Roman Moravcik
partial alphanumeric_keys
xkb_symbols "ru_phonetic" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "Russian - Phonetic";
    name[Group2] = "U.S. English";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group1] = [	Cyrillic_ya,		Cyrillic_YA,		1,			1			] };
    key <AD02>	{ symbols[Group1] = [	Cyrillic_ve,		Cyrillic_VE,		2,			2			] };
    key <AD03>	{ symbols[Group1] = [	Cyrillic_ie,		Cyrillic_IE,		3,			3			] };
    key <AD04>	{ symbols[Group1] = [	Cyrillic_er,		Cyrillic_ER,		4,			4			] };
    key <AD05>	{ symbols[Group1] = [	Cyrillic_te,		Cyrillic_TE,		5,			5			] };
    key <AD06>	{ symbols[Group1] = [	Cyrillic_yeru,		Cyrillic_YERU,		6,			6			] };
    key <AD07>	{ symbols[Group1] = [	Cyrillic_u,		Cyrillic_U,		7,			7			] };
    key <AD08>	{ symbols[Group1] = [	Cyrillic_i,		Cyrillic_I,		8,			8			] };
    key <AD09>	{ symbols[Group1] = [	Cyrillic_o,		Cyrillic_O,		9,			9			] };
    key <AD10>	{ symbols[Group1] = [	Cyrillic_pe,		Cyrillic_PE,		0,			0			] };
    key <AB08>  { symbols[Group1] = [	Cyrillic_sha,		Cyrillic_SHA,		Cyrillic_shcha,		Cyrillic_SHCHA		] };

    key <AD01>	{ symbols[Group2] = [	q,			Q,			1,			1			] };
    key <AD02>	{ symbols[Group2] = [	w,			W,			2,			2			] };
    key <AD03>	{ symbols[Group2] = [	e,			E,			3,			3			] };
    key <AD04>	{ symbols[Group2] = [	r,			R,			4,			4			] };
    key <AD05>	{ symbols[Group2] = [	t,			T,			5,			5			] };
    key <AD06>	{ symbols[Group2] = [	y,			Y,			6,			6			] };
    key <AD07>	{ symbols[Group2] = [	u,			U,			7,			7			] };
    key <AD08>	{ symbols[Group2] = [	i,			I,			8,			8			] };
    key <AD09>	{ symbols[Group2] = [	o,			O,			9,			9			] };
    key <AD10>	{ symbols[Group2] = [	p,			P,			0,			0			] };
    key <AB08>  { symbols[Group2] = [	Cyrillic_sha,		Cyrillic_SHA,		Cyrillic_shcha,		Cyrillic_SHCHA		] };

    // 2. row
    key <AC01>	{ symbols[Group1] = [	Cyrillic_a,		Cyrillic_A,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group1] = [	Cyrillic_es,		Cyrillic_ES,		plus,			plus			] };
    key <AC03>	{ symbols[Group1] = [	Cyrillic_de,		Cyrillic_DE,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group1] = [	Cyrillic_ef,		Cyrillic_EF,		minus,			minus			] };
    key <AC05>	{ symbols[Group1] = [	Cyrillic_ghe,		Cyrillic_GHE,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group1] = [	Cyrillic_ha,		Cyrillic_HA,		exclam,			exclam			] };
    key <AC07>	{ symbols[Group1] = [	Cyrillic_shorti,	Cyrillic_SHORTI,	question,		question		] };
    key <AC08>	{ symbols[Group1] = [	Cyrillic_ka,		Cyrillic_KA,		semicolon,		semicolon		] };
    key <AC09>	{ symbols[Group1] = [	Cyrillic_el,		Cyrillic_EL,		colon,			colon			] };
    key <AB09>	{ symbols[Group1] = [	Cyrillic_yu,		Cyrillic_YU,		comma,			comma			] };
    key <UP>	{ symbols[Group1] = [	Cyrillic_e,		Cyrillic_E,		period,			period			] };

    key <AC01>	{ symbols[Group2] = [	a,			A,			asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	s,			S,			plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	d,			D,			numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	f,			F,			minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	g,			G,			underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	h,			H,			exclam,			exclam			] };
    key <AC07>	{ symbols[Group2] = [	j,			J,			question,		question		] };
    key <AC08>	{ symbols[Group2] = [	k,			K,			semicolon,		semicolon		] };
    key <AC09>	{ symbols[Group2] = [	l,			L,			colon,			colon			] };
    key <AB09>	{ symbols[Group2] = [	comma,			comma,			comma,			comma			] };
    key <UP>	{ symbols[Group2] = [	period,			period,			period,			period			] };

    // 3. row
    key <AB01>	{ symbols[Group1] = [	Cyrillic_ze,		Cyrillic_ZE,		dollar,			dollar			] };
    key <AB02>	{ symbols[Group1] = [	Cyrillic_softsign,	Cyrillic_SOFTSIGN,	EuroSign,		EuroSign		] };
    key <AB03>	{ symbols[Group1] = [	Cyrillic_tse,		Cyrillic_TSE,		slash,			slash			] };
    key <AB04>	{ symbols[Group1] = [	Cyrillic_zhe,		Cyrillic_ZHE,		parenleft,		parenleft		] };
    key <AB05>	{ symbols[Group1] = [	Cyrillic_be,		Cyrillic_BE,		parenright,		parenright		] };
    key <AB06>	{ symbols[Group1] = [	Cyrillic_en,		Cyrillic_EN,		quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group1] = [	Cyrillic_em,		Cyrillic_EM,		apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group1] = [	Cyrillic_che,		Cyrillic_CHE,		Cyrillic_hardsign,	Cyrillic_HARDSIGN	] };

    key <AB01>	{ symbols[Group2] = [	z,			Z,			dollar,			dollar			] };
    key <AB02>	{ symbols[Group2] = [	x,			X,			EuroSign,		EuroSign		] };
    key <AB03>	{ symbols[Group2] = [	c,			C,			slash,			slash			] };
    key <AB04>	{ symbols[Group2] = [	v,			V,			parenleft,		parenleft		] };
    key <AB05>	{ symbols[Group2] = [	b,			B,			parenright,		parenright		] };
    key <AB06>	{ symbols[Group2] = [	n,			N,			quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	m,			M,			apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group2] = [	Cyrillic_che,		Cyrillic_CHE,		Cyrillic_hardsign,	Cyrillic_HARDSIGN	] };
};

// author: Roman Moravcik
partial alphanumeric_keys
xkb_symbols "he_phonetic" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Hebrew - Phonetic";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	hebrew_qoph,		hebrew_qoph,		1,			1			] };
    key <AD02>	{ symbols[Group2] = [	hebrew_waw,		hebrew_waw,		2,			2			] };
    key <AD03>	{ symbols[Group2] = [	hebrew_aleph,		hebrew_aleph,		3,			3			] };
    key <AD04>	{ symbols[Group2] = [	hebrew_resh,		hebrew_resh,		4,			4			] };
    key <AD05>	{ symbols[Group2] = [	hebrew_taw,		hebrew_tet,		5,			5			] };
    key <AD06>	{ symbols[Group2] = [	hebrew_ayin,		hebrew_ayin,		6,			6			] };
    key <AD07>	{ symbols[Group2] = [	hebrew_waw,		hebrew_waw,		7,			7			] };
    key <AD08>	{ symbols[Group2] = [	hebrew_yod,		hebrew_yod,		8,			8			] };
    key <AD09>	{ symbols[Group2] = [	hebrew_samech,		hebrew_samech,		9,			9			] };
    key <AD10>	{ symbols[Group2] = [	hebrew_pe,		hebrew_finalpe,		0,			0			] };
    key <AB08>	{ symbols[Group2] = [	comma,          	semicolon,		equal,			equal			] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	hebrew_aleph,		hebrew_aleph,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	hebrew_shin,		hebrew_shin,		plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	hebrew_dalet,		hebrew_dalet,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	hebrew_pe,		hebrew_finalpe,		minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	hebrew_gimel,		hebrew_gimel,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	hebrew_he,		hebrew_he,		parenleft,		parenleft		] };
    key <AC07>	{ symbols[Group2] = [	hebrew_yod,		hebrew_yod,		parenright,		parenright		] };
    key <AC08>	{ symbols[Group2] = [	hebrew_kaph,		hebrew_finalkaph,	ampersand,		ampersand		] };
    key <AC09>	{ symbols[Group2] = [	hebrew_lamed,		hebrew_lamed,		exclam,			exclam			] };
    key <AB09>	{ symbols[Group2] = [	period,			colon,			question,		question		] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	hebrew_zain,		hebrew_zain,		sterling,       	sterling		] };
    key <AB02>	{ symbols[Group2] = [	hebrew_chet,		hebrew_chet,		dollar,         	dollar			] };
    key <AB03>	{ symbols[Group2] = [	hebrew_zade,		hebrew_finalzade,	EuroSign,		EuroSign		] };
    key <AB04>	{ symbols[Group2] = [	hebrew_waw,		hebrew_waw,		slash,			slash			] };
    key <AB05>	{ symbols[Group2] = [	hebrew_bet,		hebrew_bet,		backslash,		backslash		] };
    key <AB06>	{ symbols[Group2] = [	hebrew_nun,		hebrew_finalnun,	quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	hebrew_mem,		hebrew_finalmem,	apostrophe,		apostrophe		] };
};

// author: Roman Moravcik
partial alphanumeric_keys
xkb_symbols "he" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Hebrew";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	hebrew_taw,		hebrew_taw,		1,			1			] };
    key <AD02>	{ symbols[Group2] = [	hebrew_finalzade,	hebrew_finalzade,	2,			2			] };
    key <AD03>	{ symbols[Group2] = [	hebrew_qoph,		hebrew_qoph,		3,			3			] };
    key <AD04>	{ symbols[Group2] = [	hebrew_resh,		hebrew_resh,		4,			4			] };
    key <AD05>	{ symbols[Group2] = [	hebrew_aleph,		hebrew_aleph,		5,			5			] };
    key <AD06>	{ symbols[Group2] = [	hebrew_tet,		hebrew_tet,		6,			6			] };
    key <AD07>	{ symbols[Group2] = [	hebrew_waw,		hebrew_waw,		7,			7			] };
    key <AD08>	{ symbols[Group2] = [	hebrew_finalnun,	hebrew_finalnun,	8,			8			] };
    key <AD09>	{ symbols[Group2] = [	hebrew_finalmem,	hebrew_finalmem,	9,			9			] };
    key <AD10>	{ symbols[Group2] = [	hebrew_pe,		hebrew_pe,		0,			0			] };
    key <AB08>	{ symbols[Group2] = [	comma,			semicolon,		equal,			equal			] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	hebrew_shin,		hebrew_shin,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	hebrew_dalet,		hebrew_dalet,		plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	hebrew_gimel,		hebrew_gimel,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	hebrew_kaph,		hebrew_kaph,		minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	hebrew_ayin,		hebrew_ayin,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	hebrew_yod,		hebrew_yod,		parenleft,		parenleft		] };
    key <AC07>	{ symbols[Group2] = [	hebrew_chet,		hebrew_chet,		parenright,		parenright		] };
    key <AC08>	{ symbols[Group2] = [	hebrew_lamed,		hebrew_lamed,		ampersand,		ampersand		] };
    key <AC09>	{ symbols[Group2] = [	hebrew_finalkaph,	period,			exclam,			exclam			] };
    key <AB09>	{ symbols[Group2] = [	hebrew_finalpe,		colon,			question,		question		] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	hebrew_zain,		hebrew_zain,		sterling,		sterling		] };
    key <AB02>	{ symbols[Group2] = [	hebrew_samech,		hebrew_samech,		dollar,			dollar			] };
    key <AB03>	{ symbols[Group2] = [	hebrew_bet,		hebrew_bet,		EuroSign,		EuroSign		] };
    key <AB04>	{ symbols[Group2] = [	hebrew_he,		hebrew_he,		slash,			slash			] };
    key <AB05>	{ symbols[Group2] = [	hebrew_nun,		hebrew_nun,		backslash,		backslash		] };
    key <AB06>	{ symbols[Group2] = [	hebrew_mem,		hebrew_mem,		quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	hebrew_zade,		hebrew_zade,		apostrophe,		apostrophe		] };
};

// author: David Gegechkori
partial alphanumeric_keys
xkb_symbols "ge" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Georgian - Latin";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
   key <AD01> { symbols[Group2] = [ 0x010010e5,		Q,		1,		1		] };
   key <AD02> { symbols[Group2] = [ 0x010010ec, 	0x010010ed, 	2,		2		] };
   key <AD03> { symbols[Group2] = [ 0x010010d4,		E,		3,		3		] };
   key <AD04> { symbols[Group2] = [ 0x010010e0,		0x010010e6,	4,		4		] };
   key <AD05> { symbols[Group2] = [ 0x010010e2,		0x010010d7,	5,		5		] };
   key <AD06> { symbols[Group2] = [ 0x010010e7,		Y,		6,		6		] };
   key <AD07> { symbols[Group2] = [ 0x010010e3,		U,		7,		7		] };
   key <AD08> { symbols[Group2] = [ 0x010010d8,		I,		8,		8		] };
   key <AD09> { symbols[Group2] = [ 0x010010dd,		O,		9,		9		] };
   key <AD10> { symbols[Group2] = [ 0x010010de,		P,		0,		0		] };
   key <AB08> { symbols[Group2] = [ comma,		semicolon,	equal,		equal		] };

    // 2. row
   key <AC01> { symbols[Group2] = [ 0x010010d0,		A,		asterisk,	asterisk	] };
   key <AC02> { symbols[Group2] = [ 0x010010e1,		0x010010e8,	plus,		plus		] };
   key <AC03> { symbols[Group2] = [ 0x010010d3,		D,		numbersign,	numbersign	] };
   key <AC04> { symbols[Group2] = [ 0x010010e4,		F,		minus,		minus   	] };
   key <AC05> { symbols[Group2] = [ 0x010010d2,		G,		underscore,	underscore   	] };
   key <AC06> { symbols[Group2] = [ 0x010010f0,		H,		parenleft,	parenleft 	] };
   key <AC07> { symbols[Group2] = [ 0x010010ef,		0x010010df,	parenright,	parenright 	] };
   key <AC08> { symbols[Group2] = [ 0x010010d9,		K,		ampersand,	ampersand	] };
   key <AC09> { symbols[Group2] = [ 0x010010da,		L,		exclam,		exclam		] };
   key <AB09> { symbols[Group2] = [	period,		colon,		question,	question	] };

    // 3. row
   key <AB01> { symbols[Group2] = [ 0x010010d6,		0x010010eb,	sterling,	sterling	] };
   key <AB02> { symbols[Group2] = [ 0x010010ee,		X,		dollar,		dollar 		] };
   key <AB03> { symbols[Group2] = [ 0x010010ea,		0x010010e9,	EuroSign,	EuroSign 	] };
   key <AB04> { symbols[Group2] = [ 0x010010d5,		V,		slash,		slash   	] };
   key <AB05> { symbols[Group2] = [ 0x010010d1,		B,		backslash,	backslash	] };
   key <AB06> { symbols[Group2] = [ 0x010010dc,		N,		quotedbl,	quotedbl	] };
   key <AB07> { symbols[Group2] = [ 0x010010db,		M,		apostrophe,	apostrophe	] };
};

// author: Eriks Jansons
partial alphanumeric_keys
xkb_symbols "lv" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Latvian";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>  { symbols[Group2] = [   q,                      Q,                      1,                      1                       ] };
    key <AD02>  { symbols[Group2] = [   w,                      W,                      2,                      2                       ] };
    key <AD03>  { symbols[Group2] = [   emacron,                Emacron,                3,                      3                       ] };
    key <AD04>  { symbols[Group2] = [   rcedilla,               Rcedilla,               4,                      4                       ] };
    key <AD05>  { symbols[Group2] = [   t,                      T,                      5,                      5                       ] };
    key <AD06>  { symbols[Group2] = [   y,                      Y,                      6,                      6                       ] };
    key <AD07>  { symbols[Group2] = [   umacron,                Umacron,                7,                      7                       ] };
    key <AD08>  { symbols[Group2] = [   imacron,                Imacron,                8,                      8                       ] };
    key <AD09>  { symbols[Group2] = [   omacron,                Omacron,                9,                      9                       ] };
    key <AD10>  { symbols[Group2] = [   p,                      P,                      0,                      0                       ] };
    key <AB08>  { symbols[Group1] = [   ISO_Group_Latch,        semicolon,              equal,                  equal], 
                  symbols[Group2] = [   comma,                  semicolon,              equal,                  equal                   ] };

    // 2. row
    key <AC01>  { symbols[Group2] = [   amacron,                Amacron,                asterisk,               asterisk                ] };
    key <AC02>  { symbols[Group2] = [   scaron,                 Scaron,                 plus,                   plus                    ] };
    key <AC03>  { symbols[Group2] = [   d,                      D,                      numbersign,             numbersign              ] };
    key <AC04>  { symbols[Group2] = [   f,                      F,                      minus,                  minus                   ] };
    key <AC05>  { symbols[Group2] = [   gcedilla,               Gcedilla,               underscore,             underscore              ] };
    key <AC06>  { symbols[Group2] = [   h,                      H,                      parenleft,              parenleft               ] };
    key <AC07>  { symbols[Group2] = [   j,                      J,                      parenright,             parenright              ] };
    key <AC08>  { symbols[Group2] = [   kcedilla,               Kcedilla,               ampersand,              ampersand               ] };
    key <AC09>  { symbols[Group2] = [   lcedilla,               Lcedilla,               exclam,                 exclam                  ] };
    key <AB09>  { symbols[Group2] = [   period,                 colon,                  question,               question                ] };

    // 3. row
    key <AB01>  { symbols[Group2] = [   zcaron,                 Zcaron,                 sterling,               sterling                ] };
    key <AB02>  { symbols[Group2] = [   x,                      X,                      dollar,                 dollar                  ] };
    key <AB03>  { symbols[Group2] = [   ccaron,                 Ccaron,                 EuroSign,               EuroSign                ] };
    key <AB04>  { symbols[Group2] = [   v,                      V,                      slash,                  slash                   ] };
    key <AB05>  { symbols[Group2] = [   b,                      B,                      backslash,              backslash               ] };
    key <AB06>  { symbols[Group2] = [   ncedilla,               Ncedilla,               quotedbl,               quotedbl                ] };
    key <AB07>  { symbols[Group2] = [   m,                      M,                      apostrophe,             apostrophe              ] };
};

// author: Aleksandar Urosevic
partial alphanumeric_keys
xkb_symbols "sr_cyrillic" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Serbian - Cyrillic";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	Cyrillic_lje,		Cyrillic_LJE,		1,			1			] };
    key <AD02>	{ symbols[Group2] = [	Cyrillic_nje,		Cyrillic_NJE,		2,			2			] };
    key <AD03>	{ symbols[Group2] = [	Cyrillic_ie,		Cyrillic_IE,		3,			3			] };
    key <AD04>	{ symbols[Group2] = [	Cyrillic_er,		Cyrillic_ER,		4,			4			] };
    key <AD05>	{ symbols[Group2] = [	Cyrillic_te,		Cyrillic_TE,		5,			5			] };
    key <AD06>	{ symbols[Group2] = [	Cyrillic_ze,		Cyrillic_ZE,		6,			6			] };
    key <AD07>	{ symbols[Group2] = [	Cyrillic_u,		Cyrillic_U,		7,			7			] };
    key <AD08>	{ symbols[Group2] = [	Cyrillic_i,		Cyrillic_I,		8,			8			] };
    key <AD09>	{ symbols[Group2] = [	Cyrillic_o,		Cyrillic_O,		9,			9			] };
    key <AD10>	{ symbols[Group2] = [	Cyrillic_pe,		Cyrillic_PE,		0,			0			] };
    key <AB08>	{ symbols[Group2] = [	Cyrillic_sha,		Cyrillic_SHA,		equal,			equal			] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	Cyrillic_a,		Cyrillic_A,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	Cyrillic_es,		Cyrillic_ES,		plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	Cyrillic_de,		Cyrillic_DE,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	Cyrillic_ef,		Cyrillic_EF,		minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	Cyrillic_ghe,		Cyrillic_GHE,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	Cyrillic_ha,		Cyrillic_HA,		parenleft,		parenleft		] };
    key <AC07>	{ symbols[Group2] = [	Cyrillic_je,		Cyrillic_JE,		parenright,		parenright		] };
    key <AC08>	{ symbols[Group2] = [	Cyrillic_ka,		Cyrillic_KA,		ampersand,		ampersand		] };
    key <AC09>	{ symbols[Group2] = [	Cyrillic_el,		Cyrillic_EL,		exclam,			exclam			] };
    key <AB09>	{ symbols[Group2] = [	period,			comma,			question,		question		] };
    key <UP>	{ symbols[Group2] = [	Serbian_dje,		Serbian_DJE,		Up,			Up			] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	Cyrillic_ze,		Cyrillic_ZE,		colon,			colon			] };
    key <AB02>	{ symbols[Group2] = [	Cyrillic_dzhe,		Cyrillic_DZHE,		semicolon,		semicolon		] };
    key <AB03>	{ symbols[Group2] = [	Cyrillic_tse,		Cyrillic_TSE,		EuroSign,		EuroSign		] };
    key <AB04>	{ symbols[Group2] = [	Cyrillic_ve,		Cyrillic_VE,		slash,			slash			] };
    key <AB05>	{ symbols[Group2] = [	Cyrillic_be,		Cyrillic_BE,		backslash,		backslash		] };
    key <AB06>	{ symbols[Group2] = [	Cyrillic_en,		Cyrillic_EN,		quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	Cyrillic_em,		Cyrillic_EM,		apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group2] = [	Cyrillic_che,		Cyrillic_CHE,		Left,			Left			] };
    key <DOWN>	{ symbols[Group2] = [	Serbian_tshe,		Serbian_TSHE,		Down,			Down			] };
    key <RGHT>	{ symbols[Group2] = [	Cyrillic_zhe,		Cyrillic_ZHE,		Right,			Right			] };
};

// author: Roman Moravcik
// author: Tarick
partial alphanumeric_keys
xkb_symbols "ua_phonetic" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Ukrainian - Phonetic";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group1] = [	q,			Q,			1,			1			] };
    key <AD02>	{ symbols[Group1] = [	w,			W,			2,			2			] };
    key <AD03>	{ symbols[Group1] = [	e,			E,			3,			3			] };
    key <AD04>	{ symbols[Group1] = [	r,			R,			4,			4			] };
    key <AD05>	{ symbols[Group1] = [	t,			T,			5,			5			] };
    key <AD06>	{ symbols[Group1] = [	y,			Y,			6,			6			] };
    key <AD07>	{ symbols[Group1] = [	u,			U,			7,			7			] };
    key <AD08>	{ symbols[Group1] = [	i,			I,			8,			8			] };
    key <AD09>	{ symbols[Group1] = [	o,			O,			9,			9			] };
    key <AD10>	{ symbols[Group1] = [	p,			P,			0,			0			] };
    key <AB08>  { symbols[Group1] = [	Cyrillic_sha,		Cyrillic_SHA,		Cyrillic_shcha,		Cyrillic_SHCHA		] };

    key <AD01>	{ symbols[Group2] = [	Cyrillic_ya,		Cyrillic_YA,		1,			1			] };
    key <AD02>	{ symbols[Group2] = [	Cyrillic_ve,		Cyrillic_VE,		2,			2			] };
    key <AD03>	{ symbols[Group2] = [	Cyrillic_ie,		Cyrillic_IE,		3,			3			] };
    key <AD04>	{ symbols[Group2] = [	Cyrillic_er,		Cyrillic_ER,		4,			4			] };
    key <AD05>	{ symbols[Group2] = [	Cyrillic_te,		Cyrillic_TE,		5,			5			] };
    key <AD06>	{ symbols[Group2] = [	Cyrillic_i,		Cyrillic_I,		6,			6			] };
    key <AD07>	{ symbols[Group2] = [	Cyrillic_u,		Cyrillic_U,		7,			7			] };
    key <AD08>	{ symbols[Group2] = [	Ukrainian_i,		Ukrainian_I,		8,			8			] };
    key <AD09>	{ symbols[Group2] = [	Cyrillic_o,		Cyrillic_O,		9,			9			] };
    key <AD10>	{ symbols[Group2] = [	Cyrillic_pe,		Cyrillic_PE,		0,			0			] };
    key <AB08>  { symbols[Group2] = [	Cyrillic_sha,		Cyrillic_SHA,		Cyrillic_shcha,		Cyrillic_SHCHA		] };

    // 2. row
    key <AC01>	{ symbols[Group1] = [	a,			A,			asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group1] = [	s,			S,			plus,			plus			] };
    key <AC03>	{ symbols[Group1] = [	d,			D,			numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group1] = [	f,			F,			minus,			minus			] };
    key <AC05>	{ symbols[Group1] = [	g,			G,			underscore,		underscore		] };
    key <AC06>	{ symbols[Group1] = [	h,			H,			exclam,			exclam			] };
    key <AC07>	{ symbols[Group1] = [	j,			J,			question,		question		] };
    key <AC08>	{ symbols[Group1] = [	k,			K,			semicolon,		semicolon		] };
    key <AC09>	{ symbols[Group1] = [	l,			L,			colon,			colon			] };
    key <AB09>	{ symbols[Group1] = [	comma,			comma,			comma,			comma			] };
    key <UP>	{ symbols[Group1] = [	period,			period,			period,			period			] };

    key <AC01>	{ symbols[Group2] = [	Cyrillic_a,		Cyrillic_A,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	Cyrillic_es,		Cyrillic_ES,		plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	Cyrillic_de,		Cyrillic_DE,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	Cyrillic_ef,		Cyrillic_EF,		minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	Cyrillic_ghe,		Cyrillic_GHE,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	Cyrillic_ha,		Cyrillic_HA,		exclam,			exclam			] };
    key <AC07>	{ symbols[Group2] = [	Cyrillic_shorti,	Cyrillic_SHORTI,	question,		question		] };
    key <AC08>	{ symbols[Group2] = [	Cyrillic_ka,		Cyrillic_KA,		semicolon,		semicolon		] };
    key <AC09>	{ symbols[Group2] = [	Cyrillic_el,		Cyrillic_EL,		colon,			colon			] };
    key <AB09>	{ symbols[Group2] = [	Cyrillic_yu,		Cyrillic_YU,		comma,			comma			] };
    key <UP>	{ symbols[Group2] = [	Ukrainin_ie,		Ukrainian_IE,		period,			period			] };

    // 3. row
    key <AB01>	{ symbols[Group1] = [	z,			Z,			dollar,			dollar			] };
    key <AB02>	{ symbols[Group1] = [	x,			X,			EuroSign,		EuroSign		] };
    key <AB03>	{ symbols[Group1] = [	c,			C,			slash,			slash			] };
    key <AB04>	{ symbols[Group1] = [	v,			V,			parenleft,		parenleft		] };
    key <AB05>	{ symbols[Group1] = [	b,			B,			parenright,		parenright		] };
    key <AB06>	{ symbols[Group1] = [	n,			N,			quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group1] = [	m,			M,			apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group1] = [	Cyrillic_che,		Cyrillic_CHE,		Ukrainian_yi,		Ukrainian_YI		] };

    key <AB01>	{ symbols[Group2] = [	Cyrillic_ze,		Cyrillic_ZE,		dollar,			dollar			] };
    key <AB02>	{ symbols[Group2] = [	Cyrillic_softsign,	Cyrillic_SOFTSIGN,	EuroSign,		EuroSign		] };
    key <AB03>	{ symbols[Group2] = [	Cyrillic_tse,		Cyrillic_TSE,		slash,			slash			] };
    key <AB04>	{ symbols[Group2] = [	Cyrillic_zhe,		Cyrillic_ZHE,		parenleft,		parenleft		] };
    key <AB05>	{ symbols[Group2] = [	Cyrillic_be,		Cyrillic_BE,		parenright,		parenright		] };
    key <AB06>	{ symbols[Group2] = [	Cyrillic_en,		Cyrillic_EN,		quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	Cyrillic_em,		Cyrillic_EM,		apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group2] = [	Cyrillic_che,		Cyrillic_CHE,		Ukrainian_yi,		Ukrainian_YI		] };
};


// author: Roman Moravcik
// author: Tarick
partial alphanumeric_keys
xkb_symbols "ua" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_2btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Ukrainian";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };
    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

     // 1. row
    key <AD01>	{ symbols[Group1] = [	q,			Q,			1,			1			] };
    key <AD02>	{ symbols[Group1] = [	w,			W,			2,			2			] };
    key <AD03>	{ symbols[Group1] = [	e,			E,			3,			3			] };
    key <AD04>	{ symbols[Group1] = [	r,			R,			4,			4			] };
    key <AD05>	{ symbols[Group1] = [	t,			T,			5,			5			] };
    key <AD06>	{ symbols[Group1] = [	y,			Y,			6,			6			] };
    key <AD07>	{ symbols[Group1] = [	u,			U,			7,			7			] };
    key <AD08>	{ symbols[Group1] = [	i,			I,			8,			8			] };
    key <AD09>	{ symbols[Group1] = [	o,			O,			9,			9			] };
    key <AD10>	{ symbols[Group1] = [	p,			P,			0,			0			] };
    key <AB08>	{ symbols[Group1] = [	Cyrillic_ha,		Cyrillic_HA,		Ukrainian_yi,		Ukrainian_YI		] };

    key <AD01>	{ symbols[Group2] = [	Cyrillic_shorti,	Cyrillic_SHORTI,	1,			1			] };
    key <AD02>	{ symbols[Group2] = [	Cyrillic_tse,		Cyrillic_TSE,		2,			2			] };
    key <AD03>	{ symbols[Group2] = [	Cyrillic_u,		Cyrillic_U,		3,			3			] };
    key <AD04>	{ symbols[Group2] = [	Cyrillic_ka,		Cyrillic_KA,		4,			4			] };
    key <AD05>	{ symbols[Group2] = [	Cyrillic_ie,		Cyrillic_IE,		5,			5			] };
    key <AD06>	{ symbols[Group2] = [	Cyrillic_en,		Cyrillic_EN,		6,			6			] };
    key <AD07>	{ symbols[Group2] = [	Cyrillic_ghe,		Cyrillic_GHE,		7,			7			] };
    key <AD08>	{ symbols[Group2] = [	Cyrillic_sha,		Cyrillic_SHA,		8,			8			] };
    key <AD09>	{ symbols[Group2] = [	Cyrillic_shcha,		Cyrillic_SHCHA,		9,			9			] };
    key <AD10>	{ symbols[Group2] = [	Cyrillic_ze,		Cyrillic_ZE,		0,			0			] };
    key <AB08>	{ symbols[Group2] = [	Cyrillic_ha,		Cyrillic_HA,		Ukrainian_yi,		Ukrainian_YI		] };

    // 2. row
    key <AC01>	{ symbols[Group1] = [	a,			A,			asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group1] = [	s,			S,			plus,			plus			] };
    key <AC03>	{ symbols[Group1] = [	d,			D,			numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group1] = [	f,			F,			minus,			minus			] };
    key <AC05>	{ symbols[Group1] = [	g,			G,			underscore,		underscore		] };
    key <AC06>	{ symbols[Group1] = [	h,			H,			exclam,			exclam			] };
    key <AC07>	{ symbols[Group1] = [	j,			J,			question,		question		] };
    key <AC08>	{ symbols[Group1] = [	k,			K,			semicolon,		semicolon		] };
    key <AC09>	{ symbols[Group1] = [	l,			L,			colon,			colon			] };
    key <AB09>	{ symbols[Group1] = [	comma,			comma,			comma,			comma			] };
    key <UP>	{ symbols[Group1] = [	period,			period,			period,			period			] };

    key <AC01>	{ symbols[Group2] = [	Cyrillic_ef,		Cyrillic_EF,		asterisk,		asterisk		] };
    key <AC02>	{ symbols[Group2] = [	Ukrainian_i,		Ukrainian_I,		plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	Cyrillic_ve,		Cyrillic_VE,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	Cyrillic_a,		Cyrillic_A,		minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	Cyrillic_pe,		Cyrillic_PE,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	Cyrillic_er,		Cyrillic_ER,		exclam,			exclam			] };
    key <AC07>	{ symbols[Group2] = [	Cyrillic_o,		Cyrillic_O,		question,		question		] };
    key <AC08>	{ symbols[Group2] = [	Cyrillic_el,		Cyrillic_EL,		semicolon,		semicolon		] };
    key <AC09>	{ symbols[Group2] = [	Cyrillic_de,		Cyrillic_DE,		colon,			colon			] };
    key <AB09>	{ symbols[Group2] = [	Cyrillic_zhe,		Cyrillic_ZHE,		comma,			comma			] };
    key <UP>	{ symbols[Group2] = [	Ukrainian_ie,		Ukrainian_IE,		period,			period			] };

    // 3. row
    key <AB01>	{ symbols[Group1] = [	z,			Z,			dollar,			dollar			] };
    key <AB02>	{ symbols[Group1] = [	x,			X,			EuroSign,		EuroSign		] };
    key <AB03>	{ symbols[Group1] = [	c,			C,			slash,			slash			] };
    key <AB04>	{ symbols[Group1] = [	v,			V,			parenleft,		parenleft		] };
    key <AB05>	{ symbols[Group1] = [	b,			B,			parenright,		parenright		] };
    key <AB06>	{ symbols[Group1] = [	n,			N,			quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group1] = [	m,			M,			apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group1] = [	Cyrillic_be,		Cyrillic_BE,		Cyrillic_yu,		Cyrillic_YU		] };

    key <AB01>	{ symbols[Group2] = [	Cyrillic_ya,		Cyrillic_YA,		dollar,			dollar			] };
    key <AB02>	{ symbols[Group2] = [	Cyrillic_che,		Cyrillic_CHE,		EuroSign,		EuroSign		] };
    key <AB03>	{ symbols[Group2] = [	Cyrillic_es,		Cyrillic_ES,		slash,			slash			] };
    key <AB04>	{ symbols[Group2] = [	Cyrillic_em,		Cyrillic_EM,		parenleft,		parenleft		] };
    key <AB05>	{ symbols[Group2] = [	Cyrillic_i,		Cyrillic_I,		parenright,		parenright		] };
    key <AB06>	{ symbols[Group2] = [	Cyrillic_te,		Cyrillic_TE,		quotedbl,		quotedbl		] };
    key <AB07>	{ symbols[Group2] = [	Cyrillic_softsign,	Cyrillic_SOFTSIGN,	apostrophe,		apostrophe		] };
    key <LEFT>	{ symbols[Group2] = [	Cyrillic_be,		Cyrillic_BE,		Cyrillic_yu,		Cyrillic_YU		] };
};

// author: Mihai C.
// created on 2010-10-31
partial alphanumeric_keys
xkb_symbols "ro" {
    include "nokia_vndr/rx-51(english_base)"

    name[Group1] = "Romanian";

    key <UP>    { type[Group1] = "PC_FN_LEVEL2", symbols[Group1] = [ Up, abreve ] };
    key <LEFT>  { type[Group1] = "PC_FN_LEVEL2", symbols[Group1] = [ Left, 0x1000219 ] };
    key <DOWN>  { type[Group1] = "PC_FN_LEVEL2", symbols[Group1] = [ Down, 0x100021b ] };
    key <RGHT>  { type[Group1] = "PC_FN_LEVEL2", symbols[Group1] = [ Right, acircumflex ] };

    key <AB01>	{ [	z,		Z,		icircumflex,	Icircumflex] };
};

// author: Thanawit Lertruengpanya
partial alphanumeric_keys
xkb_symbols "th" {
    include "nokia_vndr/rx-51(english_base)"
    include "nokia_vndr/rx-51(arrows_4btns)"

    name[Group1] = "U.S. English";
    name[Group2] = "Thai Kedmanee";

    key <SPCE>	{ type[Group1] = "PC_FN_LEVEL2_BREAK", [ space, at, ISO_Prev_Group, at ] };

    key.type[Group2] = "FOUR_LEVEL_SEMIALPHABETIC";

    // 1. row
    key <AD01>	{ symbols[Group2] = [	Thai_maiyamok,		Thai_leksun,		Thai_lakkhangyao,	plus			] };
    key <AD02>	{ symbols[Group2] = [	Thai_saraaimaimalai,	quotedbl,		slash,			Thai_leknung		] };
    key <AD03>	{ symbols[Group2] = [	Thai_saraam,		Thai_dochada,		minus,			Thai_leksong		] };
    key <AD04>	{ symbols[Group2] = [	Thai_phophan,		Thai_thonangmontho,	Thai_phosamphao,	Thai_leksam		] };
    key <AD05>	{ symbols[Group2] = [	Thai_saraa,		Thai_thothong,		Thai_thothung,		Thai_leksi		] };
    key <AD06>	{ symbols[Group2] = [	Thai_maihanakat,	Thai_nikhahit,		Thai_sarau,		Thai_sarauu		] };
    key <AD07>	{ symbols[Group2] = [	Thai_saraii,		Thai_maitri,		Thai_saraue,		Thai_baht		] };
    key <AD08>	{ symbols[Group2] = [	Thai_rorua,		Thai_nonen,		Thai_khokhwai,		Thai_lekha		] };
    key <AD09>	{ symbols[Group2] = [	Thai_nonu,		Thai_paiyannoi,		Thai_totao,		Thai_lekhok		] };
    key <AD10>	{ symbols[Group2] = [	Thai_yoyak,		Thai_yoying,		Thai_chochan,		Thai_lekchet		] };
    key <AB08>	{ symbols[Group2] = [	Thai_bobaimai,		Thai_thothan,		Thai_khokhai,		Thai_lekpaet		] };

    // 2. row
    key <AC01>	{ symbols[Group2] = [	Thai_fofan,		Thai_ru,		Thai_chochang,		Thai_lekkao		] };
    key <AC02>	{ symbols[Group2] = [	Thai_hohip,		Thai_khorakhang,	plus,			plus			] };
    key <AC03>	{ symbols[Group2] = [	Thai_kokai,		Thai_topatak,		numbersign,		numbersign		] };
    key <AC04>	{ symbols[Group2] = [	Thai_dodek,		Thai_sarao,		minus,			minus			] };
    key <AC05>	{ symbols[Group2] = [	Thai_sarae,		Thai_chochoe,		underscore,		underscore		] };
    key <AC06>	{ symbols[Group2] = [	Thai_maitho,		Thai_maitaikhu,		Thai_ngongu,		period			] };
    key <AC07>	{ symbols[Group2] = [	Thai_maiek,		Thai_maichattawa,	Thai_loling,		comma			] };
    key <AC08>	{ symbols[Group2] = [	Thai_saraaa,		Thai_sorusi,		ampersand,		ampersand		] };
    key <AC09>	{ symbols[Group2] = [	Thai_sosua,		Thai_sosala,		exclam,			exclam			] };
    key <AB09>	{ symbols[Group2] = [	Thai_wowaen,		Thai_soso,		question,		question		] };

    // 3. row
    key <AB01>	{ symbols[Group2] = [	Thai_phophung,		parenleft,		Thai_moma,		Thai_thophuthao		] };
    key <AB02>	{ symbols[Group2] = [	Thai_popla,		parenright,		Thai_saraaimaimuan,	Thai_lochula		] };
    key <AB03>	{ symbols[Group2] = [	Thai_saraae,		Thai_choching,		Thai_fofa,		Thai_lu			] };
    key <AB04>	{ symbols[Group2] = [	Thai_oang,		Thai_honokhuk,		slash,			slash			] };
    key <AB05>	{ symbols[Group2] = [	Thai_sarai,		Thai_phinthu,		backslash,		backslash		] };
    key <AB06>	{ symbols[Group2] = [	Thai_sarauee,		Thai_thanthakhat,	Thai_khokhuat,		Thai_khokhon		] };
    key <AB07>	{ symbols[Group2] = [	Thai_thothahan,		question,		apostrophe,		apostrophe		] };
};
partial alphanumeric_keys
xkb_symbols "us" {
    name[Group1] = "U.S. English";
    
    include "nokia_vndr/rx-44(base)"

    key <AC01>	{	[	a,		A,		exclam,		exclam		]	};
    key <AC02>	{	[	s,		S,		quotedbl,	quotedbl	]	};
    key <AC03>	{	[	d,		D,		at,		at		]	};
    key <AC04>	{	[	f,		F,		numbersign,	numbersign	]	};
    key <AC05>	{	[	g,		G,		backslash,	backslash	]	};
    key <AC06>	{	[	h,		H,		slash,		slash		]	};
    key <AC07>	{	[	j,		J,		parenleft,	parenleft	]	};
    key <AC08>	{	[	k,		K,		parenright,	parenright	]	};
    key <AC09>	{	[	l,		L,		asterisk,	asterisk	]	};
    key <AC11>  {       [       apostrophe,     question,       question,	question	]	};

    key <AB01>	{	[	z,		Z,		yen,		yen		]	};
    key <AB02>	{	[	x,		X,		asciicircum,	asciicircum	]	};
    key <AB03>	{	[	c,		C,		asciitilde,	asciitilde	]	};
    key <AB04>	{	[	v,		V,		percent,	percent		]	};
    key <AB05>	{	[	b,		B,		ampersand,	ampersand	]	};
    key <AB06>	{	[	n,		N,		dollar,		dollar		]	};
    key <AB07>	{	[	m,		M,		EuroSign,	EuroSign	]	};
    key <AC10>  {       [       semicolon,      colon,          sterling,	sterling	]	};
    key <AE11>  {       [       minus,          underscore,     underscore,	underscore	]	};
    key <AE12>  {       [       plus,           equal,          equal,		equal		]	};

    key <AB08>  {       [       comma,          less,           comma,		less		]	};
    key <AB09>  {       [       period,         greater,        period,		greater		]	};
};



partial alphanumeric_keys
xkb_symbols "fisenoda" {
    name[Group1] = "Finnish/Swedish/Norwegian/Danish";

    include "nokia_vndr/rx-44(base)"

    key <AC01>	{	[	a,		A,		exclam,		exclam		]	};
    key <AC02>	{	[	s,		S,		quotedbl,	quotedbl	]	};
    key <AC03>	{	[	d,		D,		at,		at		]	};
    key <AC04>	{	[	f,		F,		numbersign,	numbersign	]	};
    key <AC05>	{	[	g,		G,		asterisk,	asterisk	]	};
    key <AC06>	{	[	h,		H,		backslash,	backslash	]	};
    key <AC07>	{	[	j,		J,		slash,		slash		]	};
    key <AC08>	{	[	k,		K,		parenleft,	parenleft	]	};
    key <AC09>	{	[	l,		L,		parenright,	parenright	]	};
    key <AC11>  {       [       aring,          Aring,          question,	question	]	};

    key <AB01>	{	[	z,		Z,		EuroSign,	EuroSign	]	};
    key <AB02>	{	[	x,		X,		asciitilde,	asciitilde	]	};
    key <AB03>	{	[	c,		C,		percent,	percent		]	};
    key <AB04>	{	[	v,		V,		ampersand,	ampersand	]	};
    key <AB05>	{	[	b,		B,		plus,		plus		]	};
    key <AB06>	{	[	n,		N,		less,		less		]	};
    key <AB07>	{	[	m,		M,		greater,	greater		]	};
    key <AC10>  {       type="EIGHT_LEVEL", [       oslash,     Oslash,		equal,		equal,		odiaeresis,		Odiaeresis,	equal,		equal		]       };
    key <AE11>  {       type="EIGHT_LEVEL", [       ae,		AE,		apostrophe,	apostrophe,	adiaeresis,		Adiaeresis,	apostrophe,	apostrophe	]       };
    key <AE12>  {       [       minus,          underscore,     underscore,	underscore	]       };

    key <AB08>  {       [       comma,          semicolon,      comma,		semicolon	]       };
    key <AB09>  {       [       period,         colon,          period,		colon		]       };
};



partial alphanumeric_keys
xkb_symbols "ptes" {
    name[Group1] = "Portuguese/Spanish";

    include "nokia_vndr/rx-44(base)"

    key <AC01>	{	[	a,		A,		exclam,		exclam		]	};
    key <AC02>	{	[	s,		S,		quotedbl,	quotedbl	]	};
    key <AC03>	{	[	d,		D,		at,		at		]	};
    key <AC04>	{	[	f,		F,		numbersign,	numbersign	]	};
    key <AC05>	{	[	g,		G,		asterisk,	asterisk	]	};
    key <AC06>	{	[	h,		H,		backslash,	backslash	]	};
    key <AC07>	{	[	j,		J,		slash,		slash		]	};
    key <AC08>	{	[	k,		K,		parenleft,	parenleft	]	};
    key <AC09>	{	[	l,		L,		parenright,	parenright	]	};
    key <AC11>  {       [       dead_acute,     dead_grave,     dead_diaeresis,	dead_diaeresis	]	};

    key <AB01>	{	[	z,		Z,		EuroSign,	EuroSign	]	};
    key <AB02>	{	[	x,		X,		percent,	percent 	]	};
    key <AB03>	{	[	c,		C,		ampersand,	ampersand	]	};
    key <AB04>	{	[	v,		V,		exclamdown,	exclamdown	]	};
    key <AB05>	{	[	b,		B,		apostrophe,	apostrophe	]	};
    key <AB06>	{	[	n,		N,		plus,		plus		]	};
    key <AB07>	{	[	m,		M,		equal,		equal		]	};
    key <AC10>  {       [       ccedilla,       Ccedilla,       questiondown,	questiondown	]	};
    key <AE11>  {       [       ntilde,         Ntilde,         question,	question	]	};
    key <AE12>  {       [       dead_tilde,     dead_circumflex, dead_circumflex, dead_circumflex ]	};

    key <AB08>  {       [	comma,		semicolon,	minus,		minus		]	};
    key <AB09>  {       [	period,		colon,		underscore,	underscore	]	};
};



partial alphanumeric_keys
xkb_symbols "fr" {
    name[Group1] = "French";

    include "nokia_vndr/rx-44(base)"

    key <AD01>	{	[	a,		A,		1,              1               ]	};
    key <AD02>	{	[	z,		Z,		2,              2               ]	};

    key <AC01>	{	[	q,		Q,		at,             at              ]	};
    key <AC02>	{	[	s,		S,		percent,        percent         ]	};
    key <AC03>	{	[	d,		D,		ecircumflex,    Ecircumflex	]	};
    key <AC04>	{	[	f,		F,		eacute,  	Eacute          ]	};
    key <AC05>	{	[	g,		G,		egrave,    	Egrave          ]	};
    key <AC06>	{	[	h,		H,		oe,             OE      	]	};
    key <AC07>	{	[	j,		J,		parenleft,      parenleft   	]	};
    key <AC08>	{	[	k,		K,		parenright,     parenright	]	};
    key <AC09>	{	[	l,		L,		agrave,         Agrave      	]	};
    key <AC11>  {       [       m,              M,              ugrave,         Ugrave          ]       };

    key <AB01>	{	[	w,		w,		EuroSign,       EuroSign	]	};
    key <AB02>	{	[	x,		X,		numbersign,     numbersign 	]	};
    key <AB03>	{	[	c,		C,		ccedilla,       Ccedilla	]	};
    key <AB04>	{	[	v,		V,		plus,           plus	        ]	};
    key <AB05>	{	[	b,		B,		equal,          equal   	]	};
    key <AB06>	{	[	n,		N,		quotedbl,       quotedbl	]	};
    key <AB07>	{	[	comma,		question,       backslash,      backslash	]	};
    key <AC10>  {       [       semicolon,      period,         minus,          minus           ]       };
    key <AE11>  {       [       colon,          slash,          underscore,     underscore      ]       };
    key <AE12>  {       [       apostrophe,     apostrophe,     mu,             mu              ]       };

    key <AB08>  {       [       less,		greater,	less,		greater		]	};
    key <AB09>  {       [       exclam,		section,	asterisk,	asterisk        ]       };
};



partial alphanumeric_keys
xkb_symbols "de" {
    name[Group1] = "German";

    include "nokia_vndr/rx-44(base)"

    key <AD06>	{	[	z,		Z,		6,		6		]	};

    key <AC01>	{	[	a,		A,		exclam,		exclam		]	};
    key <AC02>	{	[	s,		S,		quotedbl,	quotedbl	]	};
    key <AC03>	{	[	d,		D,		at,		at		]	};
    key <AC04>	{	[	f,		F,		numbersign,	numbersign	]	};
    key <AC05>	{	[	g,		G,		percent,	percent    	]	};
    key <AC06>	{	[	h,		H,		backslash,	backslash	]	};
    key <AC07>	{	[	j,		J,		slash,		slash	  	]	};
    key <AC08>	{	[	k,		K,		parenleft,	parenleft	]	};
    key <AC09>	{	[	l,		L,		parenright,	parenright	]	};
    key <AC11>  {	[       udiaeresis,     Udiaeresis,     question,	question	]       };

    key <AB01>	{	[	y,		Y,		EuroSign,	EuroSign	]	};
    key <AB02>	{	[	x,		X,		asciitilde,	asciitilde	]	};
    key <AB03>	{	[	c,		C,		asterisk,	asterisk	]	};
    key <AB04>	{	[	v,		V,		ampersand,	ampersand	]	};
    key <AB05>	{	[	b,		B,		plus,		plus		]	};
    key <AB06>	{	[	n,		N,		less,		less		]	};
    key <AB07>	{	[	m,		M,		greater,	greater		]	};
    key <AC10>  {	[       odiaeresis,     Odiaeresis,     equal,		equal		]       };
    key <AE11>  {	[       adiaeresis,     Adiaeresis,     apostrophe,	apostrophe	]       };
    key <AE12>  {	[       minus,          underscore,     ssharp,		U1E9E		]       };

    key <AB08>  {       [       comma,          semicolon,      comma,		semicolon	]	};
    key <AB09>  {       [       period,         colon,          period,		colon		]	};
};


// Levels 5-8 are Russian, levels 1-4 US English, for shortcut reasons.
partial alphanumeric_keys
xkb_symbols "ru" {
    name[Group1] = "Russian";

    include "nokia_vndr/rx-44(base)"

    key <AD01>	{	type="EIGHT_LEVEL", [	q,			Q,			1,			1,			Cyrillic_shorti,	Cyrillic_SHORTI,	1,			1			]	};
    key <AD02>	{	type="EIGHT_LEVEL", [	w,			W,			2,			2,			Cyrillic_tse,	Cyrillic_TSE,	2,			2			]	};
    key <AD03>	{	type="EIGHT_LEVEL", [	e,			E,			3,			3,			Cyrillic_u,	Cyrillic_U,	3,			3			]	};
    key <AD04>	{	type="EIGHT_LEVEL", [	r,			R,			4,			4,			Cyrillic_ka,	Cyrillic_KA,	4,			4			]	};
    key <AD05>	{	type="EIGHT_LEVEL", [	t,			T,			5,			5,			Cyrillic_ie,	Cyrillic_IE,	5,			5			]	};
    key <AD06>	{	type="EIGHT_LEVEL", [	y,			Y,			6,			6,			Cyrillic_en,	Cyrillic_EN,	6,			6			]	};
    key <AD07>	{	type="EIGHT_LEVEL", [	u,			U,			7,			7,			Cyrillic_ghe,	Cyrillic_GHE,	7,			7			]	};
    key <AD08>	{	type="EIGHT_LEVEL", [	i,			I,			8,			8,			Cyrillic_sha,	Cyrillic_SHA,	8,			8			]	};
    key <AD09>	{	type="EIGHT_LEVEL", [	o,			O,			9,			9,			Cyrillic_shcha,	Cyrillic_SHCHA,	9,			9			]	};
    key <AD10>	{	type="EIGHT_LEVEL", [	p,			P,			0,			0,			Cyrillic_ze,	Cyrillic_ZE,	0,			0			]	};

    key <AC01>	{	type="EIGHT_LEVEL", [	a,			A,			exclam,			exclam,			Cyrillic_ef,	Cyrillic_EF,	exclam,			exclam			]	};
    key <AC02>	{	type="EIGHT_LEVEL", [	s,			S,			quotedbl,		quotedbl,		Cyrillic_yeru,	Cyrillic_YERU,	quotedbl,		quotedbl		]	};
    key <AC03>	{	type="EIGHT_LEVEL", [	d,			D,			at,			at,			Cyrillic_ve,	Cyrillic_VE,	at,			at			]	};
    key <AC04>	{	type="EIGHT_LEVEL", [	f,			F,			numbersign,		numbersign,		Cyrillic_a,	Cyrillic_A,	numbersign,		numbersign		]	};
    key <AC05>	{	type="EIGHT_LEVEL", [	g,			G,			backslash,		backslash,		Cyrillic_pe,	Cyrillic_PE,	backslash,		backslash		]	};
    key <AC06>	{	type="EIGHT_LEVEL", [	h,			H,			slash,			slash,			Cyrillic_er,	Cyrillic_ER,	slash,			slash			]	};
    key <AC07>	{	type="EIGHT_LEVEL", [	j,			J,			parenleft,		parenleft,		Cyrillic_o,	Cyrillic_O,	parenleft,		parenleft		]	};
    key <AC08>	{	type="EIGHT_LEVEL", [	k,			K,			parenright,		parenright,		Cyrillic_el,	Cyrillic_EL,	parenright,		parenright		]	};
    key <AC09>	{	type="EIGHT_LEVEL", [	l,			L,			colon,			colon,			Cyrillic_de,	Cyrillic_DE,	colon,			colon			]	};
    key <AC11>	{	type="EIGHT_LEVEL", [	NoSymbol,		NoSymbol,		semicolon,		semicolon,		Cyrillic_zhe,	Cyrillic_ZHE,	semicolon,		semicolon		]	};

    key <AB01>	{	type="EIGHT_LEVEL", [	z,			Z,			underscore,		underscore,		Cyrillic_ya,	Cyrillic_YA,	minus,			minus			]	};
    key <AB02>	{	type="EIGHT_LEVEL", [	x,			X,			percent,		percent,		Cyrillic_che,	Cyrillic_CHE,	percent,		percent			]	};
    key <AB03>	{	type="EIGHT_LEVEL", [	c,			C,			0x1002116,		0x1002116,		Cyrillic_es,	Cyrillic_ES,	0x1002116,		0x1002116		]	};
    key <AB04>	{	type="EIGHT_LEVEL", [	v,			V,			equal,			equal,			Cyrillic_em,	Cyrillic_EM,	equal,			equal			]	};
    key <AB05>	{	type="EIGHT_LEVEL", [	b,			B,			ampersand,		ampersand,		Cyrillic_i,	Cyrillic_I,	ampersand,		ampersand		]	};
    key <AB06>	{	type="EIGHT_LEVEL", [	n,			N,			asterisk,		asterisk,		Cyrillic_te,	Cyrillic_TE,	asterisk,		asterisk		]	};
    key <AB07>	{	type="EIGHT_LEVEL", [	m,			M,			apostrophe,		apostrophe,		Cyrillic_softsign,	Cyrillic_SOFTSIGN,	apostrophe,		apostrophe		]	};
    key <AC10>	{	type="EIGHT_LEVEL", [	NoSymbol,		NoSymbol,		minus,			minus,			Cyrillic_be,	Cyrillic_BE,	minus,			minus			]	};
    key <AE11>	{	type="EIGHT_LEVEL", [	NoSymbol,		NoSymbol,		question,		question,		Cyrillic_yu,	Cyrillic_YU,	question,		question		]	};
    key <AE12>	{	type="EIGHT_LEVEL", [	NoSymbol,		NoSymbol,		Cyrillic_hardsign,	Cyrillic_HARDSIGN,	Cyrillic_ha,	Cyrillic_HA,	Cyrillic_hardsign,	Cyrillic_HARDSIGN	]	};

    key <AB08>	{	type="EIGHT_LEVEL", [	period,			comma,			period,			comma,			period,		comma,		period,			comma			]	};
    key <AB09>	{	type="EIGHT_LEVEL", [	NoSymbol,		NoSymbol,		Cyrillic_io,		Cyrillic_IO,		Cyrillic_e,	Cyrillic_E,	Cyrillic_io,		Cyrillic_IO		]	};
};



partial alphanumeric_keys
xkb_symbols "it" {
    name[Group1] = "Italian";

    include "nokia_vndr/rx-44(base)"

    key <AC01>	{	[	a,		A,		exclam,		exclam		]	};
    key <AC02>	{	[	s,		S,		quotedbl,	quotedbl	]	};
    key <AC03>	{	[	d,		D,		at,		at		]	};
    key <AC04>	{	[	f,		F,		numbersign,	numbersign	]	};
    key <AC05>	{	[	g,		G,		asterisk,	asterisk	]	};
    key <AC06>	{	[	h,		H,		backslash,	backslash	]	};
    key <AC07>	{	[	j,		J,		slash,		slash		]	};
    key <AC08>	{	[	k,		K,		parenleft,	parenleft	]	};
    key <AC09>	{	[	l,		L,		parenright,	parenright	]	};
    key <AC11>  {       [       apostrophe,     question,       igrave,         Igrave		]       };

    key <AB01>	{	[	z,		Z,		EuroSign,	EuroSign	]	};
    key <AB02>	{	[	x,		X,		asciitilde,	asciitilde	]	};
    key <AB03>	{	[	c,		C,		ampersand,	ampersand	]	};
    key <AB04>	{	[	v,		V,		equal,		equal		]	};
    key <AB05>	{	[	b,		B,		less,		less		]	};
    key <AB06>	{	[	n,		N,		greater,	greater		]	};
    key <AB07>	{	[	m,		M,		plus,		plus		]	};
    key <AC10>  {       [       eacute,         Eacute,         ograve,         Ograve          ]       };
    key <AE11>  {       [       egrave,         Egrave,         agrave,         Agrave          ]       };
    key <AE12>  {       [       minus,          underscore,     ugrave,         Ugrave          ]       };

    key <AB08>  {       [       comma,          semicolon,      comma,		semicolon	]       };
    key <AB09>  {       [       period,         colon,          period,		colon		]       };
};

default partial alphanumeric_keys
xkb_symbols "base" {
    key <AD01>	{	[	q,			Q,			1,			1			]	};
    key <AD02>	{	[	w,			W,			2,			2			]	};
    key <AD03>	{	[	e,			E,			3,			3			]	};
    key <AD04>	{	[	r,			R,			4,			4			]	};
    key <AD05>	{	[	t,			T,			5,			5			]	};
    key <AD06>	{	[	y,			Y,			6,			6			]	};
    key <AD07>	{	[	u,			U,			7,			7			]	};
    key <AD08>	{	[	i,			I,			8,			8			]	};
    key <AD09>	{	[	o,			O,			9,			9			]	};
    key <AD10>	{	[	p,			P,			0,			0			]	};
    key <BKSP>	{	[	BackSpace,		BackSpace,		BackSpace,		BackSpace		]	};

    // broken UI spec.
    key <RTRN>	{	[	KP_Enter,		KP_Enter,		KP_Enter,		KP_Enter		]	};

    key <COMP>	{	[	Multi_key,		Multi_key,		Multi_key,		Multi_key		]	};
    key <LFSH>	{	[	Shift_L,		Shift_L,		Shift_L,		Shift_L			]	};
    key <FN>	{	[	ISO_Level3_Shift,	ISO_Level3_Shift,	ISO_Level3_Shift,	ISO_Level3_Shift	]	};
    key <SPCE>	{	[	space,			space,			space,			space			]	};
    key <RCTL>	{	[	Control_R,		Control_R,		Control_R,		Control_R		]	};
    key <TAB>	{	[	Tab,			Tab,			Tab,			Tab			]	};

    modifier_map Shift { Shift_L };
    modifier_map Mod5 { ISO_Level3_Shift };
    modifier_map Control { Control_R };

    key <KPEN>	{	[	Return		]	};
    key <UP>	{	[	Up		]	};
    key <DOWN>	{	[	Down		]	};
    key <LEFT>	{	[	Left		]	};
    key <RGHT>	{	[	Right		]	};

    key <ESC>	{	[	Escape		]	};
    key <FK01>	{	[	F1		]	};
    key <FK02>	{	[	F2		]	};
    key <FK03>	{	[	F3		]	};
    key <FK04>	{	[	F4		]	};
    key <FK05>	{	[	F5		]	};
    key <FK06>	{	[	F6		]	};
    key <FK07>	{	[	F7		]	};
    key <FK08>	{	[	F8		]	};
    key <FK09>	{	[	F9		]	};
    key <FK10>	{	[	F10		]	};
    key <FK11>	{	[	F11		]	};
    key <FK12>	{	[	F12		]	};

    // generated from the headset, must always be in the map.
    key <I29>  {	[	XF86Phone	]	};
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]= "Arabic (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [ Arabic_thal, Arabic_shadda, grave,  asciitilde ] };
    key <AE01> { [   0x1000661,        exclam, 1,          exclam ] };
    key <AE02> { [   0x1000662,            at, 2,              at ] };
    key <AE03> { [   0x1000663,    numbersign, 3,      numbersign ] };
    key <AE04> { [   0x1000664,        dollar, 4,          dollar ] };
    key <AE05> { [   0x1000665,       percent, 5,         percent ] };
    key <AE06> { [   0x1000666,   asciicircum, 6,     asciicircum ] };
    key <AE07> { [   0x1000667,     ampersand, 7,       ampersand ] };
    key <AE08> { [   0x1000668,      asterisk, 8,        asterisk ] };
    key <AE09> { [   0x1000669,    parenright, 9,      parenright ] };
    key <AE10> { [   0x1000660,     parenleft, 0,       parenleft ] };
    key <AE11> { [       minus,    underscore, minus,  underscore ] };
    key <AE12> { [       equal,          plus, equal,        plus ] };
						
    key <AD01> { [   Arabic_dad, Arabic_fatha,          q,            Q          ] };
    key <AD02> { [   Arabic_sad, Arabic_fathatan,       w,            W          ] };
    key <AD03> { [  Arabic_theh, Arabic_damma,          e,            E          ] };
    key <AD04> { [   Arabic_qaf, Arabic_dammatan,       r,            R          ] };
    key <AD05> { [   Arabic_feh, 0x100fef9,             t,            T          ] };
    key <AD06> { [ Arabic_ghain, Arabic_hamzaunderalef, y,            Y          ] };
    key <AD07> { [   Arabic_ain, grave,                 u,            U          ] };
    key <AD08> { [    Arabic_ha, division,              i,            I          ] };
    key <AD09> { [  Arabic_khah, multiply,              o,            O          ] };
    key <AD10> { [   Arabic_hah, Arabic_semicolon,      p,            P          ] };
    key <AD11> { [  Arabic_jeem, greater,               bracketleft,  braceleft  ] };
    key <AD12> { [   Arabic_dal, less,                  bracketright, braceright ] };

    key <AC01> { [ Arabic_sheen, Arabic_kasra,       a,          A        ] };
    key <AC02> { [  Arabic_seen, Arabic_kasratan,    s,          S        ] };
    key <AC03> { [   Arabic_yeh, bracketright,       d,          D        ] };
    key <AC04> { [   Arabic_beh, bracketleft,        f,          F        ] };
    key <AC05> { [   Arabic_lam, 0x100fef7,          g,          G        ] };
    key <AC06> { [  Arabic_alef, Arabic_hamzaonalef, h,          H        ] };
    key <AC07> { [   Arabic_teh, Arabic_tatweel,     j,          J        ] };
    key <AC08> { [  Arabic_noon, Arabic_comma,       k,          K        ] };
    key <AC09> { [  Arabic_meem, slash,              l,          L        ] };
    key <AC10> { [   Arabic_kaf, colon,              semicolon,  colon    ] };
    key <AC11> { [   Arabic_tah, quotedbl,           apostrophe, quotedbl ] };
    key <BKSL> { [    backslash, bar,                backslash,  bar      ] };

    key <LSGT> { [                bar,            brokenbar,    bar, brokenbar ] };
    key <AB01> { [  Arabic_hamzaonyeh,           asciitilde,      z, Z         ] };
    key <AB02> { [       Arabic_hamza,         Arabic_sukun,      x, X         ] };
    key <AB03> { [  Arabic_hamzaonwaw,           braceright,      c, C         ] };
    key <AB04> { [          Arabic_ra,            braceleft,      v, V         ] };
    key <AB05> { [          0x100fefb,            0x100fef5,      b, B         ] };
    key <AB06> { [ Arabic_alefmaksura,   Arabic_maddaonalef,      n, N         ] };
    key <AB07> { [  Arabic_tehmarbuta,           apostrophe,      m, M         ] };
    key <AB08> { [         Arabic_waw,                comma,  comma, less      ] };
    key <AB09> { [        Arabic_zain,               period, period, greater   ] };
    key <AB10> { [         Arabic_zah, Arabic_question_mark,  slash, question  ] };

	include "level3(ralt_switch)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/ara(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "qwerty" {
	include "ara(qwerty)"
};

partial alphanumeric_keys
	xkb_symbols "azerty" {
	include "ara(azerty)"
};

partial alphanumeric_keys
	xkb_symbols "digits" {
	include "ara(digits)"
};

partial alphanumeric_keys
	xkb_symbols "qwerty_digits" {
	include "ara(qwerty_digits)"
};

partial alphanumeric_keys
	xkb_symbols "azerty_digits" {
	include "ara(azerty_digits)"
};

partial alphanumeric_keys
	xkb_symbols "buckwalter" {
	include "ara(buckwalter)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "ara(olpc)"
};
//
// Copyright (c) 2009, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Estonian (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

   key <TLDE> { [     dead_caron,    dead_tilde,	notsign,       notsign ] };
   key <AE01> { [              1,        exclam,	onesuperior,    exclamdown ] };
   key <AE02> { [              2,      quotedbl,	at,     oneeighth ] };
   key <AE03> { [              3,    numbersign,	sterling,      sterling ] };
   key <AE04> { [              4,      currency,	dollar,        dollar ] };
   key <AE05> { [              5,       percent,	onehalf,  threeeighths ] };
   key <AE06> { [              6,     ampersand,	notsign,   fiveeighths ] };
   key <AE07> { [              7,         slash,	braceleft,  seveneighths ] };
   key <AE08> { [              8,     parenleft,	bracketleft,     trademark ] };
   key <AE09> { [              9,    parenright,	bracketright,     plusminus ] };
   key <AE10> { [              0,         equal,	braceright,        degree ] };
   key <AE11> { [           plus,      question,	backslash,  questiondown ] };
   key <AE12> { [     dead_acute,    dead_grave,	grave,    apostrophe ] };

   key <AD01> { [              q,             Q,	at,   Greek_OMEGA ] };
   key <AD02> { [              w,             W,	lstroke,       Lstroke ] };
   key <AD03> { [              e,             E,	EuroSign,          cent ] };
   key <AD04> { [              r,             R,	paragraph,    registered ] };
   key <AD05> { [              t,             T,	tslash,        Tslash ] };
   key <AD06> { [              y,             Y,	leftarrow,           yen ] };
   key <AD07> { [              u,             U,	downarrow,       uparrow ] };
   key <AD08> { [              i,             I,	rightarrow,      idotless ] };
   key <AD09> { [              o,             O,	oslash,      Ooblique ] };
   key <AD10> { [              p,             P,	thorn,         THORN ] };
   key <AD11> { [     udiaeresis,    Udiaeresis,	dead_diaeresis,dead_abovering ] };
   key <AD12> { [         otilde,        Otilde,	section,   dead_macron ] };

   key <AC01> { [              a,             A,	ae,            AE ] };
   key <AC02> { [              s,             S,	ssharp,       section ] };
   key <AC03> { [              d,             D,	eth,           ETH ] };
   key <AC04> { [              f,             F,	dstroke,   ordfeminine ] };
   key <AC05> { [              g,             G,	eng,           ENG ] };
   key <AC06> { [              h,             H,	hstroke,       Hstroke ] };
   key <AC07> { [              j,             J,	j,             J ] };
   key <AC08> { [              k,             K,	kra,     ampersand ] };
   key <AC09> { [              l,             L,	lstroke,       Lstroke ] };
   key <AC10> { [     odiaeresis,    Odiaeresis,	dead_acute, dead_doubleacute ] };
   key <AC11> { [     adiaeresis,    Adiaeresis,	asciicircum,    dead_caron ] };
   key <LSGT> { [      backslash,           bar,	degree,     brokenbar ] };

   key <BKSL> { [     apostrophe,      asterisk,	onehalf,    dead_breve ] };
   key <AB01> { [              z,             Z,	zcaron,        Zcaron ] };
   key <AB02> { [              x,             X,	guillemotright,       greater ] };
   key <AB03> { [              c,             C,	cent,     copyright ] };
   key <AB04> { [              v,             V,	leftdoublequotemark, leftsinglequotemark ] };
   key <AB05> { [              b,             B,	rightdoublequotemark, rightsinglequotemark ] };
   key <AB06> { [              n,             N,	ncedilla,      Ncedilla ] };
   key <AB07> { [              m,             M,	mu,     masculine ] };
   key <AB08> { [          comma,     semicolon,	less,      multiply ] };
   key <AB09> { [         period,         colon,	greater,      division ] };
   key <AB10> { [          minus,    underscore,	dead_belowdot, dead_abovedot ] };

	include "level3(ralt_switch)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/ee(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "ee(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "ee(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "us" {
	include "ee(us)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default alphanumeric_keys
xkb_symbols "sun_type6" {

   name[Group1]="Multilingual (Canada, Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

   key <TLDE> { [           slash, bar,             backslash                  ]};
   key <AE01> { [               1, exclam,          plusminus                  ]};
   key <AE02> { [               2, at                                          ]};
   key <AE03> { [               3, numbersign,      sterling                   ]};
   key <AE04> { [               4, dollar,          cent                       ]};
   key <AE05> { [               5, percent,         currency                   ]};
   key <AE06> { [               6, question,        notsign	               ]};
   key <AE07> { [               7, ampersand,       braceleft                  ]};
   key <AE08> { [               8, asterisk,        braceright                 ]};
   key <AE09> { [               9, parenleft,       bracketleft                ]};
   key <AE10> { [               0, parenright,      bracketright               ]};
   key <AE11> { [           minus, underscore,      onehalf	               ]};
   key <AE12> { [           equal, plus,            notsign                    ]};
  
   key <AD03> { [               e, E,               EuroSign		       ]};
   key <AD09> { [               o, O,               section		       ]};
   key <AD10> { [               p, P,               paragraph                  ]};
   key <AD11> { [ dead_circumflex, dead_diaeresis,  dead_grave                 ]};
   key <AD12> { [        ccedilla, Ccedilla,        asciitilde                 ]};

   key <AC10> { [       semicolon, colon,           degree                     ]};
   key <AC11> { [          egrave, Egrave,          braceleft                  ]};
   key <AC12> { [          agrave, Agrave,          braceright                 ]};
   key <BKSL> { [          agrave, Agrave,          braceright                 ]};

   key <LSGT> { [          uacute, Uacute                                      ]};
   key <AB01> { [               z, Z,               guillemotleft              ]};
   key <AB02> { [               x, X,               guillemotright             ]};
   key <AB07> { [               m, M,               mu                         ]};
   key <AB08> { [           comma, apostrophe,      less                       ]};
   key <AB09> { [          period, quotedbl,        greater                    ]};
   key <AB10> { [          eacute, Eacute,          grave                      ]};
   
	include "level3(ralt_switch)"

};

alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/ca(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "fr" {
	include "ca(fr)"
};

partial alphanumeric_keys
	xkb_symbols "fr-dvorak" {
	include "ca(fr-dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "fr-legacy" {
	include "ca(fr-legacy)"
};

partial alphanumeric_keys
	xkb_symbols "multi" {
	include "ca(multi)"
};

partial alphanumeric_keys
	xkb_symbols "multi-2gr" {
	include "ca(multi-2gr)"
};

partial alphanumeric_keys
	xkb_symbols "ike" {
	include "ca(ike)"
};

partial alphanumeric_keys
	xkb_symbols "multix" {
	include "ca(multix)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "ca(olpc)"
};

partial alphanumeric_keys
	xkb_symbols "eng" {
	include "ca(eng)"
};

partial alphanumeric_keys
	xkb_symbols "kut" {
	include "ca(kut)"
};

partial alphanumeric_keys
	xkb_symbols "shs" {
	include "ca(shs)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6_de" {

    name[Group1]= "German (Switzerland, Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [    section,     degree                           ] };
    key <AE01> { [          1,       plus,          bar             ] };
    key <AE02> { [          2,   quotedbl,           at             ] };
    key <AE03> { [          3,   asterisk,   numbersign             ] };
    key <AE04> { [          4,   ccedilla,  asciicircum             ] };
    key <AE05> { [          5,    percent,   asciitilde             ] };
    key <AE06> { [          6,  ampersand,      notsign             ] };
    key <AE07> { [          7,      slash,    brokenbar             ] };
    key <AE08> { [          8,  parenleft,         cent             ] };
    key <AE09> { [          9, parenright                           ] };
    key <AE10> { [          0,      equal,        grave             ] };
    key <AE11> { [ apostrophe,   question,   dead_acute             ] };
    key <AE12> { [ dead_circumflex, dead_grave, dead_tilde          ] };

    key <AD03> { [          e,          E,     EuroSign             ] };
    key <AD06> { [          z,          Z                           ] };
    key <AD11> { [ udiaeresis,     egrave,  bracketleft             ] };
    key <AD12> { [ dead_diaeresis, exclam, bracketright             ] };

    key <AC10> { [ odiaeresis,     eacute                           ] };
    key <AC11> { [ adiaeresis,     agrave,    braceleft             ] };
    key <BKSL> { [     dollar,   sterling,   braceright             ] };

    key <LSGT> { [       less,    greater,    backslash             ] };
    key <AB01> { [          y,          Y                           ] };
    key <AB08> { [      comma,  semicolon                           ] };
    key <AB09> { [     period,      colon                           ] };
    key <AB10> { [      minus, underscore                           ] };

	include "level3(ralt_switch)"

};

partial alphanumeric_keys 
xkb_symbols "sun_type6_fr" {

    name[Group1]= "French (Switzerland, Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [    section,     degree                           ] };
    key <AE01> { [          1,       plus,          bar             ] };
    key <AE02> { [          2,   quotedbl,           at             ] };
    key <AE03> { [          3,   asterisk,   numbersign             ] };
    key <AE04> { [          4,   ccedilla,  asciicircum             ] };
    key <AE05> { [          5,    percent,   asciitilde             ] };
    key <AE06> { [          6,  ampersand,      notsign             ] };
    key <AE07> { [          7,      slash,    brokenbar             ] };
    key <AE08> { [          8,  parenleft,         cent             ] };
    key <AE09> { [          9, parenright                           ] };
    key <AE10> { [          0,      equal,        grave             ] };
    key <AE11> { [ apostrophe,   question,   dead_acute             ] };
    key <AE12> { [ dead_circumflex, dead_grave, dead_tilde          ] };

    key <AD03> { [          e,          E,     EuroSign             ] };
    key <AD06> { [          z,          Z                           ] };
    key <AD11> { [     egrave, udiaeresis,  bracketleft             ] };
    key <AD12> { [ dead_diaeresis, exclam, bracketright             ] };

    key <AC10> { [     eacute, odiaeresis                           ] };
    key <AC11> { [     agrave, adiaeresis,    braceleft             ] };
    key <BKSL> { [     dollar,   sterling,   braceright             ] };

    key <LSGT> { [       less,    greater,    backslash             ] };
    key <AB01> { [          y,          Y                           ] };
    key <AB08> { [      comma,  semicolon                           ] };
    key <AB09> { [     period,      colon                           ] };
    key <AB10> { [      minus, underscore                           ] };
	
	include "level3(ralt_switch)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/ch(sun_type6_de)"
};

partial alphanumeric_keys
	xkb_symbols "legacy" {
	include "ch(legacy)"
};

partial alphanumeric_keys
	xkb_symbols "de" {
	include "ch(de)"
};

partial alphanumeric_keys
	xkb_symbols "de_Sundeadkeys" {
	include "ch(de_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "de_sundeadkeys" {
	include "ch(de_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "de_nodeadkeys" {
	include "ch(de_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "fr" {
	include "ch(fr)"
};

partial alphanumeric_keys
	xkb_symbols "fr_Sundeadkeys" {
	include "ch(fr_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "fr_sundeadkeys" {
	include "ch(fr_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "fr_nodeadkeys" {
	include "ch(fr_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "de_mac" {
	include "ch(de_mac)"
};

partial alphanumeric_keys
	xkb_symbols "fr_mac" {
	include "ch(fr_mac)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Greek (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

	key <TLDE> { [                 grave,     asciitilde,	onehalf ] };
	key <AE01> { [                     1,         exclam ] };
	key <AE02> { [                     2,             at ] };
	key <AE03> { [                     3,     numbersign,	sterling ] };
	key <AE04> { [                     4,         dollar,	EuroSign ] };
	key <AE05> { [                     5,        percent,	EuroSign ] };
	key <AE06> { [                     6,    asciicircum,	notsign ] };
	key <AE07> { [                     7,      ampersand ] };
	key <AE08> { [                     8,       asterisk ] };
	key <AE09> { [                     9,      parenleft ] };
	key <AE10> { [                     0,     parenright,	degree ] };
	key <AE11> { [                 minus,     underscore,	plusminus ] };
	key <AE12> { [                 equal,           plus ] };

	key <AD01> { [             semicolon,          colon,	periodcentered ] };
	key <AD02> { [ Greek_finalsmallsigma, periodcentered,	Greek_SIGMA ] };
	key <AD03> { [         Greek_epsilon,  Greek_EPSILON,	EuroSign ] };
	key <AD04> { [             Greek_rho,      Greek_RHO,	registered ] };
	key <AD05> { [             Greek_tau,      Greek_TAU ] };
	key <AD06> { [         Greek_upsilon,  Greek_UPSILON ] };
	key <AD07> { [           Greek_theta,    Greek_THETA ] };
	key <AD08> { [            Greek_iota,     Greek_IOTA ] };
	key <AD09> { [         Greek_omicron,  Greek_OMICRON ] };
	key <AD10> { [              Greek_pi,       Greek_PI ] };
	key <AD11> { [           bracketleft,      braceleft,	guillemotleft ] };
	key <AD12> { [          bracketright,     braceright,	guillemotright ] };

	key <AC01> { [           Greek_alpha,    Greek_ALPHA ] };
	key <AC02> { [           Greek_sigma,    Greek_SIGMA ] };
	key <AC03> { [           Greek_delta,    Greek_DELTA ] };
	key <AC04> { [             Greek_phi,      Greek_PHI ] };
	key <AC05> { [           Greek_gamma,    Greek_GAMMA ] };
	key <AC06> { [             Greek_eta,      Greek_ETA ] };
	key <AC07> { [              Greek_xi,       Greek_XI ] };
	key <AC08> { [           Greek_kappa,    Greek_KAPPA ] };
	key <AC09> { [           Greek_lamda,    Greek_LAMDA ] };
	key <AC10> { [            dead_acute, dead_diaeresis ] };
	key <AC11> { [            apostrophe,       quotedbl ] };
	key <BKSL> { [             backslash,            bar,	brokenbar ] };

	key <LSGT> { [         guillemotleft, guillemotright,	brokenbar ] };
	key <AB01> { [            Greek_zeta,     Greek_ZETA ] };
	key <AB02> { [             Greek_chi,      Greek_CHI ] };
	key <AB03> { [             Greek_psi,      Greek_PSI,	copyright ] };
	key <AB04> { [           Greek_omega,    Greek_OMEGA ] };
	key <AB05> { [            Greek_beta,     Greek_BETA ] };
	key <AB06> { [              Greek_nu,       Greek_NU ] };
	key <AB07> { [              Greek_mu,       Greek_MU ] };
	key <AB08> { [                 comma,           less,	guillemotleft ] };
	key <AB09> { [                period,        greater,	guillemotright ] };
	key <AB10> { [                 slash,       question ] };

	include "level3(ralt_switch)"
};

alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/gr(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "simple" {
	include "gr(simple)"
};

partial alphanumeric_keys
	xkb_symbols "bare" {
	include "gr(bare)"
};

partial alphanumeric_keys
	xkb_symbols "extended" {
	include "gr(extended)"
};

partial alphanumeric_keys
	xkb_symbols "polytonic" {
	include "gr(polytonic)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "gr(nodeadkeys)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]= "Italian (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <LSGT> { [            less,         greater                                ] };
    key <TLDE> { [       backslash,             bar                                ] };
    key <AE02> { [               2,        quotedbl                                ] };
    key <AE03> { [               3,        sterling                                ] };
    key <AE06> { [               6,       ampersand                                ] };
    key <AE07> { [               7,           slash                                ] };
    key <AE08> { [               8,       parenleft,    braceleft                  ] };     
    key <AE09> { [               9,      parenright,   braceright                  ] };     
    key <AE10> { [               0,           equal                                ] };
    key <AE11> { [      apostrophe,        question,        grave                  ] };     
    key <AE12> { [          igrave,     asciicircum                                ] };
    key <AD03> { [               e,               E,     EuroSign                  ] };
    key <AD11> { [          egrave,          eacute,  bracketleft,  dead_abovering ] };
    key <AD12> { [            plus,        asterisk, bracketright                  ] };      
    key <BKSL> { [          ugrave,         section,   asciitilde                  ] };
    key <AC10> { [          ograve,        ccedilla,           at                  ] };      
    key <AC11> { [          agrave,          degree,   numbersign                  ] };
    key <AB08> { [           comma,       semicolon                                ] };
    key <AB09> { [          period,           colon                                ] };
    key <AB10> { [           minus,      underscore                                ] };

        include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/it(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "it(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "it(mac)"
};

partial alphanumeric_keys
	xkb_symbols "geo" {
	include "it(geo)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "it(olpc)"
};

partial alphanumeric_keys
	xkb_symbols "us" {
	include "it(us)"
};

partial alphanumeric_keys
	xkb_symbols "ibm" {
	include "it(ibm)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Latvian (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

   key <TLDE> { [          grave,    asciitilde,	acute,    asciitilde ] };
   key <AE01> { [              1,        exclam,	onesuperior,    exclamdown ] };
   key <AE02> { [              2,            at,	twosuperior,     oneeighth ] };
   key <AE03> { [              3,    numbersign,	threesuperior,      sterling ] };
   key <AE04> { [              4,        dollar,	EuroSign,          cent ] };
   key <AE05> { [              5,       percent,	onehalf,  threeeighths ] };
   key <AE06> { [              6,   asciicircum,	threequarters,   fiveeighths ] };
   key <AE07> { [              7,     ampersand,	braceleft,  seveneighths ] };
   key <AE08> { [              8,      asterisk,	bracketleft,     trademark ] };
   key <AE09> { [              9,     parenleft,	bracketright,     plusminus ] };
   key <AE10> { [              0,    parenright,	braceright,        degree ] };
   key <AE11> { [          minus,    underscore,	backslash,  questiondown ] };
   key <AE12> { [          equal,          plus,	endash,        emdash ] };

   key <AD01> { [              q,             Q,	q,             Q ] };
   key <AD02> { [              w,             W,	w,             W ] };
   key <AD03> { [              e,             E,	emacron,       Emacron ] };
   key <AD04> { [              r,             R,	rcedilla,      Rcedilla ] };
   key <AD05> { [              t,             T,	t,             T ] };
   key <AD06> { [              y,             Y,	y,             Y ] };
   key <AD07> { [              u,             U,	umacron,       Umacron ] };
   key <AD08> { [              i,             I,	imacron,       Imacron ] };
   key <AD09> { [              o,             O,	omacron,       Omacron ] };
   key <AD10> { [              p,             P,	p,             P ] };
   key <AD11> { [    bracketleft,     braceleft,	guillemotleft, leftdoublequotemark ] };
   key <AD12> { [   bracketright,    braceright,	guillemotright, rightdoublequotemark ] };

   key <AC01> { [              a,             A,	amacron,       Amacron ] };
   key <AC02> { [              s,             S,	scaron,        Scaron ] };
   key <AC03> { [              d,             D,	d,             D ] };
   key <AC04> { [              f,             F,	f,             F ] };
   key <AC05> { [              g,             G,	gcedilla,      Gcedilla ] };
   key <AC06> { [              h,             H,	h,             H ] };
   key <AC07> { [              j,             J,	j,             J ] };
   key <AC08> { [              k,             K,	kcedilla,      Kcedilla ] };
   key <AC09> { [              l,             L,	lcedilla,      Lcedilla ] };
   key <AC10> { [      semicolon,         colon,	semicolon,         colon ] };
   key <AC11> { [     apostrophe,      quotedbl,	leftdoublequotemark, doublelowquotemark ] };
   key <LSGT> { [      backslash,           bar,	degree,     brokenbar ] };

   key <BKSL> { [      backslash,           bar,	grave,         breve ] };
   key <AB01> { [              z,             Z,	zcaron,        Zcaron ] };
   key <AB02> { [              x,             X,	x,             X ] };
   key <AB03> { [              c,             C,	ccaron,        Ccaron ] };
   key <AB04> { [              v,             V,	v,             V ] };
   key <AB05> { [              b,             B,	b,             B ] };
   key <AB06> { [              n,             N,	ncedilla,      Ncedilla ] };
   key <AB07> { [              m,             M,	m,             M ] };
   key <AB08> { [          comma,          less,	horizconnector,      multiply ] };
   key <AB09> { [         period,       greater,	periodcentered,      division ] };
   key <AB10> { [          slash,      question,	slash,      abovedot ] };

	include "level3(ralt_switch)"
};

alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/lv(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "apostrophe" {
	include "lv(apostrophe)"
};

partial alphanumeric_keys
	xkb_symbols "tilde" {
	include "lv(tilde)"
};

partial alphanumeric_keys
	xkb_symbols "fkey" {
	include "lv(fkey)"
};

partial alphanumeric_keys
	xkb_symbols "adapted" {
	include "lv(adapted)"
};

partial alphanumeric_keys
	xkb_symbols "ergonomic" {
	include "lv(ergonomic)"
};

partial alphanumeric_keys
	xkb_symbols "modern" {
	include "lv(modern)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "lv(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "ykeydvorak" {
	include "lv(ykeydvorak)"
};

partial alphanumeric_keys
	xkb_symbols "minuskeydvorak" {
	include "lv(minuskeydvorak)"
};

partial alphanumeric_keys
	xkb_symbols "dvorakprogr" {
	include "lv(dvorakprogr)"
};

partial alphanumeric_keys
	xkb_symbols "ykeydvorakprogr" {
	include "lv(ykeydvorakprogr)"
};

partial alphanumeric_keys
	xkb_symbols "minuskeydvorakprogr" {
	include "lv(minuskeydvorakprogr)"
};

partial alphanumeric_keys
	xkb_symbols "colemak" {
	include "lv(colemak)"
};

partial alphanumeric_keys
	xkb_symbols "apostrophecolemak" {
	include "lv(apostrophecolemak)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Norwegian (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [             bar,         section                ] };
    key <LSGT> { [            less,         greater                ] };
    key <BKSL> { [      apostrophe,        asterisk,  grave        ] };
    key <AE02> { [               2,        quotedbl,  at           ] };
    key <AE03> { [               3,      numbersign,  sterling     ] };
    key <AE04> { [               4,        currency,  dollar       ] };
    key <AE05> { [               5,         percent,  asciitilde   ] };
    key <AE06> { [               6,       ampersand,  asciicircum  ] };
    key <AE07> { [               7,           slash,  braceleft    ] };
    key <AE08> { [               8,       parenleft,  bracketleft  ] };
    key <AE09> { [               9,      parenright,  bracketright ] };
    key <AE10> { [               0,           equal,  braceright   ] };
    key <AE11> { [            plus,        question                ] };
    key <AE12> { [       backslash,      dead_grave,  dead_acute   ] };
    key <AD03> { [               e,               E,  EuroSign     ] };
    key <AD11> { [           aring,           Aring                ] };
    key <AD12> { [  dead_diaeresis, dead_circumflex,  dead_tilde   ] };
    key <AC10> { [          oslash,          Oslash                ] }; 
    key <AC11> { [              ae,              AE                ] };
    key <AB08> { [           comma,       semicolon                ] };
    key <AB09> { [          period,           colon                ] };
    key <AB10> { [           minus,      underscore                ] };

        include "level3(ralt_switch)"
        include "kpdl(comma)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/no(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "no(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "no(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "smi" {
	include "no(smi)"
};

partial alphanumeric_keys
	xkb_symbols "smi_nodeadkeys" {
	include "no(smi_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "no(mac)"
};

partial alphanumeric_keys
	xkb_symbols "mac_nodeadkeys" {
	include "no(mac_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "colemak" {
	include "no(colemak)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

	name[Group1]= "Korean (Sun Type 6/7)";

	include "sun_vndr/us(sunbasic)"

    // A few keys are different
    key <ALGR> { [ Hangul                       ] };
    key <COMP> { [ Hangul_Hanja                 ] };
    key <KANA> { [ Hangul                       ] };
    key <EISU> { [ Hangul_Hanja                 ] };
    key <BKSL> { [ backslash, bar,  brokenbar   ] };

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/kr(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "kr106" {
	include "kr(kr106)"
};

partial alphanumeric_keys
	xkb_symbols "kr104" {
	include "kr(kr104)"
};

partial function_keys
	xkb_symbols "hw_keys" {
	include "kr(hw_keys)"
};

partial function_keys
	xkb_symbols "ralt_hangul" {
	include "kr(ralt_hangul)"
};

partial function_keys
	xkb_symbols "rctrl_hangul" {
	include "kr(rctrl_hangul)"
};

partial function_keys
	xkb_symbols "ralt_hanja" {
	include "kr(ralt_hanja)"
};

partial function_keys
	xkb_symbols "rctrl_hanja" {
	include "kr(rctrl_hanja)"
};

//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//


default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Czech (Sun Type 6/7";

	include "sun_vndr/us(sun_type6)"

    key <TLDE>	{ [ semicolon, dead_abovering,	grave,          asciitilde 	]	};
    key <AE01>	{ [      plus,          1,	exclam,     asciitilde	 	]	};
    key <AE02>	{ [    ecaron,          2,	at,     dead_caron 		]	};
    key <AE03>	{ [    scaron,          3,	numbersign,  dead_circumflex 	] 	};
    key <AE04>	{ [    ccaron,          4,	dollar,     dead_breve 		]	};
    key <AE05>	{ [    rcaron,          5,	percent, dead_abovering 	] 	};
    key <AE06>	{ [    zcaron,          6,	asciicircum,  dead_ogonek 	]	};
    key <AE07>	{ [    yacute,          7,	ampersand,          grave 	]	};
    key <AE08>	{ [    aacute,          8,	asterisk,  dead_abovedot	]	};
    key <AE09>	{ [    iacute,          9,	parenleft,    dead_acute    	]	};
    key <AE10>	{ [    eacute,          0,	parenright, dead_doubleacute	]	};
    key <AE11>	{ [     equal,    percent,	dead_diaeresis, backslash 	]	};
    key <AE12>	{ [ dead_acute, dead_caron,	dead_cedilla, minus 		]	};

    key <AD01>	{ [         q,          Q,	backslash 		]	};
    key <AD02>	{ [         w,          W,	bar 			]	};
    key <AD03>	{ [         e,          E,	EuroSign 		]	};
    key <AD06>	{ [         z,          Z 				]	};
    key <AD11>	{ [    uacute,      slash,	division 		]	};
    key <AD12>	{ [parenright,  parenleft,	multiply 		]	};

    key <AC02>	{ [         s,          S,	dstroke			]	};
    key <AC03>	{ [         d,          D,	Dstroke 		]	};
    key <AC04>	{ [         f,          F,	bracketleft 		]	};
    key <AC05>	{ [         g,          G,	bracketright 		]	};
    key <AC08>	{ [         k,          K,	lstroke 		]	};
    key <AC09>	{ [         l,          L,	Lstroke 		]	};              
    key <AC10>	{ [      uring,       quotedbl,	dollar 			]	};
    key <AC11>	{ [    section,         exclam,	ssharp,       currency	]	};
    key <BKSL>	{ [ dead_diaeresis, apostrophe,	backslash,         bar	]	};

    key <LSGT>	{ [  backslash,       asterisk,	slash,	     brokenbar	]	};
    key <AB01>	{ [          y,          Y,	less	 		]	};
    key <AB02>	{ [          x,          X,	greater,    numbersign  ]	};
    key <AB04>	{ [          v,          V,	at 			]	};
    key <AB05>	{ [          b,          B,	braceleft 		]	};
    key <AB06>	{ [          n,          N,	braceright	 	]	};
    key <AB08>	{ [      comma,       question,	less			]	};
    key <AB09>	{ [     period,          colon,	greater			]	};
    key <AB10>	{ [      minus,     underscore                   	]	};

	include "level3(ralt_switch)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/cz(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "bksl" {
	include "cz(bksl)"
};

partial alphanumeric_keys
	xkb_symbols "qwerty" {
	include "cz(qwerty)"
};

partial alphanumeric_keys
	xkb_symbols "qwerty_bksl" {
	include "cz(qwerty_bksl)"
};

partial alphanumeric_keys
	xkb_symbols "ucw" {
	include "cz(ucw)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak-ucw" {
	include "cz(dvorak-ucw)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Lithuanian (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE>  { [     grave,   asciitilde,	notsign,   brokenbar ]    };
    key <AE01>  { [   aogonek,      Aogonek,	1,      exclam ]    };
    key <AE02>  { [    ccaron,       Ccaron,	2,          at ]    };
    key <AE03>  { [   eogonek,      Eogonek,	3,  numbersign ]    };
    key <AE04>  { [ eabovedot,    Eabovedot,	4,      dollar ]    };
    key <AE05>  { [   iogonek,      Iogonek,	5,     percent ]    };
    key <AE06>  { [    scaron,       Scaron,	6, asciicircum ]    };
    key <AE07>  { [   uogonek,      Uogonek,	7,   ampersand ]    };
    key <AE08>  { [   umacron,      Umacron,	8,    asterisk ]    };
    key <AE09>  { [  doublelowquotemark,  parenleft,	9,  parenleft ]    };
    key <AE10>  { [ leftdoublequotemark, parenright,	0, parenright ]    };
    key <AE11>  { [     minus,   underscore,	backslash, questiondown ]  };
    key <AE12>  { [    zcaron,       Zcaron,	equal,         plus ]  };

    key <AD01>  { [         q,          Q,	at,  Greek_OMEGA ] };
    key <AD02>  { [         w,          W,	lstroke,      Lstroke ] };
    key <AD03>  { [         e,          E,	EuroSign               ] };
    key <AD04>  { [         r,          R,	paragraph,   registered ] };
    key <AD05>  { [         t,          T,	tslash,       Tslash ] };
    key <AD06>  { [         y,          Y,	leftarrow,          yen ] };
    key <AD07>  { [         u,          U,	downarrow,      uparrow ] };
    key <AD08>  { [         i,          I,	rightarrow,     idotless ] };
    key <AD09>  { [         o,          O,	oslash,     Ooblique ] };
    key <AD10>  { [         p,          P,	thorn,        THORN ] };
    key <AD11>  { [  bracketleft,  braceleft,	dead_diaeresis, dead_abovering ] };
    key <AD12>  { [ bracketright, braceright,	dead_tilde,    dead_macron ] };

    key <AC01>  { [         a,          A,	ae,           AE ] };
    key <AC02>  { [         s,          S,	ssharp,      section ] };
    key <AC03>  { [         d,          D,	eth,          ETH ] };
    key <AC04>  { [         f,          F,	dstroke,  ordfeminine ] };
    key <AC05>  { [         g,          G,	eng,          ENG ] };
    key <AC06>  { [         h,          H,	hstroke,      Hstroke ] };
    key <AC07>  { [         j,          J ] 				    };
    key <AC08>  { [         k,          K,	kra,    ampersand ] };
    key <AC09>  { [         l,          L,	lstroke,      Lstroke ] };
    key <AC10>  { [  semicolon,     colon,	dead_acute, dead_doubleacute ] };
    key <AC11>  { [ apostrophe,  quotedbl,	dead_circumflex,  dead_caron ] };
    key <LSGT>  { [  backslash,       bar,	dead_grave,   dead_breve ] };

    key <BKSL>  { [ backslash,        bar,	dead_grave,   dead_breve ] };
    key <AB01>  { [         z,          Z,	guillemotleft,        less ] };
    key <AB02>  { [         x,          X,	guillemotright,    greater ] };
    key <AB03>  { [         c,          C,	cent,    copyright ] };
    key <AB04>  { [         v,          V,	leftdoublequotemark, leftsinglequotemark ]   };
    key <AB05>  { [         b,          B,	rightdoublequotemark, rightsinglequotemark ] };
    key <AB06>  { [         n,          N ]     };
    key <AB07>  { [         m,          M,	mu,    masculine ] };
    key <AB08>  { [     comma,       less,	ampersand,     multiply ] };
    key <AB09>  { [    period,    greater,	periodcentered,   division ] };
    key <AB10>  { [     slash,   question,	dead_belowdot, dead_abovedot ] };

	include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/lt(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "us" {
	include "lt(us)"
};

partial alphanumeric_keys
	xkb_symbols "std" {
	include "lt(std)"
};

partial alphanumeric_keys
	xkb_symbols "ibm" {
	include "lt(ibm)"
};

partial alphanumeric_keys
	xkb_symbols "lekp" {
	include "lt(lekp)"
};

partial alphanumeric_keys
	xkb_symbols "lekpa" {
	include "lt(lekpa)"
};

partial alphanumeric_keys
	xkb_symbols "us_dvorak" {
	include "lt(us_dvorak)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

partial
xkb_symbols "defaults_common" {

    key <MUTE> { [ XF86AudioMute         ] };
    key <VOL-> { [ XF86AudioLowerVolume  ] };
    key <VOL+> { [ XF86AudioRaiseVolume  ] };
    key <POWR> { [ XF86PowerOff          ] };
    key <STOP> { [ Cancel                ] };
    key <AGAI> { [ Redo                  ] };
    key <PROP> { [ SunProps              ] };
    key <UNDO> { [ Undo                  ] };
    key <FRNT> { [ SunFront              ] };
    key <COPY> { [ XF86Copy              ] };
    key <OPEN> { [ SunOpen               ] };
    key <PAST> { [ XF86Paste             ] };
    key <FIND> { [ Find                  ] };
    key <CUT>  { [ XF86Cut               ] };
    key <HELP> { [ Help                  ] };
    key <LNFD> { [ Linefeed              ] };

    key <LALT> { [	Alt_L,  Alt_L	] };
    key <LWIN> { [	Meta_L	        ] };
    key <RWIN> { [	Meta_R			] };

// The following is needed for virtual hotkeys

    key <I150> { [ XF86Sleep             ] };
    key <I160> { [ XF86ScreenSaver       ] };
    key <I235> { [ XF86Display           ] };

// Common Sun Modifiers

    modifier_map Shift	{ Shift_R, Shift_L };
    modifier_map Mod2	{ Num_Lock };
    modifier_map Mod4   { Meta_L, Meta_R };

};

default partial
xkb_symbols "defaults" {

    include "sun_vndr/solaris(defaults_common)"

    modifier_map Mod1   { Alt_L };

};

partial
xkb_symbols "defaults_type7jp" {

    include "sun_vndr/solaris(defaults_common)"

    modifier_map Mod1  { Alt_L, Alt_R   };

};

partial
xkb_symbols "sun_compat" {

	key <STOP> { [ L1,        L1,  SunStop    ]       };
	key <AGAI> { [ L2,        L2,  SunAgain   ]       };
	key <PROP> { [ L3,        L3,  SunProps   ]       };
	key <UNDO> { [ L4,        L4,  SunUndo    ]       };
	key <FRNT> { [ L5,        L5,  SunFront   ]       };
	key <COPY> { [ L6,        L6,  SunCopy    ]       };
	key <OPEN> { [ L7,        L7,  SunOpen    ]       };
	key <PAST> { [ L8,        L8,  SunPaste   ]       };
	key <FIND> { [ L9,        L9,  SunFind    ]       };
	key <CUT>  { [ L10,       L10, SunCut     ]       };

// F11 & F12 are mapped to SunF36 and SunF37 since they were added
// after F11-F35 were already assigned on Sun keyboards
	key <FK11> { [ SunF36               ], [ F11                ] };
	key <FK12> { [ SunF37               ], [ F12                ] };

// These were added to the keyboard much later and simply got mapped
// to their logical names
	key <HELP> { [  Help						] };
	key <MUTE> { [  SunAudioMute,        SunVideoDegauss		] };
	key <VOL-> { [  SunAudioLowerVolume, SunVideoLowerBrightness	] };
	key <VOL+> { [  SunAudioRaiseVolume, SunVideoRaiseBrightness	] };
	key <POWR> { [  XF86Sleep,           XF86Hibernate		] };
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys modifier_keys
xkb_symbols "sun_type6_suncompat" {

	include "inet(evdev)"
	include "sun_vndr/us(sunbasic)"

    key <AE13> { [ backslash, bar       ], [ prolongedsound     ]       };
    key <AE01> { [ 1, exclam       ], [ kana_NU        ]   };
    key <AE02> { [ 2, quotedbl     ], [ kana_FU        ]   };
    key <AE03> { [ 3, numbersign   ], [ kana_A, kana_a ]   };
    key <AE04> { [ 4, dollar       ], [ kana_U, kana_u ]   };
    key <AE05> { [ 5, percent      ], [ kana_E, kana_e ]   };
    key <AE06> { [ 6, ampersand        ], [ kana_O, kana_o ]   };
    key <AE07> { [ 7, apostrophe   ], [ kana_YA, kana_ya   ]   };
    key <AE08> { [ 8, parenleft        ], [ kana_YU, kana_yu   ]   };
    key <AE09> { [ 9, parenright   ], [ kana_YO, kana_yo   ]   };
    key <AE10> { [ 0           ], [ kana_WA, kana_WO   ]   };
    key <AE11> { [ minus, equal        ], [ kana_HO        ]   };
    key <AE12> { [ asciicircum,    asciitilde], [ kana_HE      ]   };

    key <AD01> { [ q, Q            ], [ kana_TA        ]   };
    key <AD02> { [ w, W            ], [ kana_TE        ]   };
    key <AD03> { [ e, E            ], [ kana_I, kana_i ]   };
    key <AD04> { [ r, R            ], [ kana_SU        ]   };
    key <AD05> { [ t, T            ], [ kana_KA        ]   };
    key <AD06> { [ y, Y            ], [ kana_N     ]   };
    key <AD07> { [ u, U            ], [ kana_NA        ]   };
    key <AD08> { [ i, I            ], [ kana_NI        ]   };
    key <AD09> { [ o, O            ], [ kana_RA        ]   };
    key <AD10> { [ p, P            ], [ kana_SE        ]   };
    key <AD11> { [ at, grave       ], [ voicedsound    ]   };
    key <AD12> { [ bracketleft,    braceleft ], [ semivoicedsound, kana_openingbracket ] };

    key <AC01> { [ a, A            ], [ kana_CHI       ]   };
    key <AC02> { [ s, S            ], [ kana_TO        ]   };
    key <AC03> { [ d, D            ], [ kana_SHI       ]   };
    key <AC04> { [ f, F            ], [ kana_HA        ]   };
    key <AC05> { [ g, G            ], [ kana_KI        ]   };
    key <AC06> { [ h, H            ], [ kana_KU        ]   };
    key <AC07> { [ j, J            ], [ kana_MA        ]   };
    key <AC08> { [ k, K            ], [ kana_NO        ]   };
    key <AC09> { [ l, L            ], [ kana_RI        ]   };
    key <AC10> { [ semicolon, plus ], [ kana_RE        ]   };
    key <AC11> { [ colon, asterisk ], [ kana_KE        ]   };
    key <BKSL> { [ bracketright, braceright ], [ kana_MU, kana_closingbracket ] };

    key <AB01> { [ z, Z            ], [ kana_TSU, kana_tsu ]   };
    key <AB02> { [ x, X            ], [ kana_SA        ]   };
    key <AB03> { [ c, C            ], [ kana_SO        ]   };
    key <AB04> { [ v, V            ], [ kana_HI        ]   };
    key <AB05> { [ b, B            ], [ kana_KO        ]   };
    key <AB06> { [ n, N            ], [ kana_MI        ]   };
    key <AB07> { [ m, M            ], [ kana_MO        ]   };
    key <AB08> { [ comma, less     ], [ kana_NE, kana_comma ]  };
    key <AB09> { [ period, greater ], [ kana_RU, kana_fullstop ]   };
    key <AB10> { [ slash, question ], [ kana_ME, kana_conjunctive ]};
    key <AB11> { [ backslash, underscore], [ kana_RO       ]   };
    key <UNDR> { [ backslash, underscore], [ kana_RO       ]   };

    key <EXEC> { [ Execute		            ]	};
    key <KANJ> { [ Kanji		            ]	};
    key <HENK> { [ Henkan_Mode		        ]	};
    key <ALGR> { [ Kana_Lock, Mode_switch   ]	};

	key <COMP> { [ Multi_key				]	};
	key <SYRQ> { [ SunSys_Req				]	};

	modifier_map Mod3 { Kana_Lock };

};

partial alphanumeric_keys
xkb_symbols "sun_type6" {

    // include "jp"
    // type6 based on "jp" should be provided later

    include "sun_vndr/jp(sun_type6_suncompat)"

};

partial alphanumeric_keys
xkb_symbols "sun_type7_suncompat" {

    include "sun_vndr/jp(sun_type6_suncompat)"

    key <AE10> { [ 0, asciitilde, kana_WA, kana_WO      ]   };
    key <TLDE> { [ Henkan_Mode                          ]   };
    key <HENK> { [ Kana_Lock, Mode_switch               ]   };
    key <ALGR> { [ Alt_R, Alt_R                         ]   };

};

partial alphanumeric_keys
xkb_symbols "suncompat" {

    include "sun_vndr/jp(sun_type7_suncompat)"
};

partial alphanumeric_keys
xkb_symbols "sun_type7" {

    include "jp"

};

partial alphanumeric_keys
	xkb_symbols "106" {
	include "jp(106)"
};

partial alphanumeric_keys
	xkb_symbols "common" {
	include "jp(common)"
};

partial alphanumeric_keys
	xkb_symbols "OADG109A" {
	include "jp(OADG109A)"
};

partial alphanumeric_keys
	xkb_symbols "kana86" {
	include "jp(kana86)"
};

partial alphanumeric_keys
	xkb_symbols "kana" {
	include "jp(kana)"
};

partial alphanumeric_keys
	xkb_symbols "nicola_f_bs" {
	include "jp(nicola_f_bs)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "jp(mac)"
};

partial alphanumeric_keys
	xkb_symbols "hztg_escape" {
	include "jp(hztg_escape)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "jp(dvorak)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Ukrainian (Sun Type 6)";

	include "sun_vndr/us(sun_type6)"

    key	<TLDE> {	[	    grave,	asciitilde,	apostrophe,	asciitilde	]	};
    key	<AE01> {	[		1,	    exclam,	1,	    exclam 	]	};
    key	<AE02> {	[		2,		at,	2,        quotedbl	]	};
    key	<AE03> {	[		3,	numbersign,	3,      numbersign	]	};
    key	<AE04> {	[		4,	    dollar,	4,        asterisk	]	};
    key	<AE05> {	[		5,	   percent,	5,	     colon	]	};
    key	<AE06> {	[		6,     asciicircum,	6,	     comma	]	};
    key	<AE07> {	[		7,	 ampersand,	7,	    period	]	};
    key	<AE08> {	[		8,	  asterisk,	8,	 semicolon	]	};
    key	<AE09> {	[		9,	 parenleft,	9,	 parenleft	]	};
    key	<AE10> {	[		0,	parenright,	0,	parenright	]	};
    key	<AE11> {	[	    minus,	underscore,	minus,	underscore	]	};
    key	<AE12> {	[	    equal,	      plus,	equal,	      plus	]	};

    key	<AD01> {	[		q,		 Q,	Cyrillic_shorti, Cyrillic_SHORTI	]	};
    key	<AD02> {	[		w,		 W,	Cyrillic_tse,    Cyrillic_TSE	]	};
    key	<AD03> {	[		e,		 E,	Cyrillic_u,	Cyrillic_U	]	};
    key	<AD04> {	[		r,		 R,	Cyrillic_ka,     Cyrillic_KA	]	};
    key	<AD05> {	[		t,		 T,	Cyrillic_ie,     Cyrillic_IE	]	};
    key	<AD06> {	[		y,		 Y,	Cyrillic_en,     Cyrillic_EN	]	};
    key	<AD07> {	[		u,		 U,	Cyrillic_ghe,    Cyrillic_GHE	]	};
    key	<AD08> {	[		i,		 I,	Cyrillic_sha,    Cyrillic_SHA	]	};
    key	<AD09> {	[		o,		 O,	Cyrillic_shcha,  Cyrillic_SHCHA	]	};
    key	<AD10> {	[		p,		 P,	Cyrillic_ze,     Cyrillic_ZE	]	};
    key	<AD11> {	[     bracketleft,	 braceleft,	Cyrillic_ha,     Cyrillic_HA	]	};
    key	<AD12> {	[    bracketright,	braceright,	Ukrainian_yi,    Ukrainian_YI	]	};

    key	<AC01> {	[		a,		 A,	Cyrillic_ef,     Cyrillic_EF	]	};
    key	<AC02> {	[		s,		 S,	Ukrainian_i,     Ukrainian_I	]	};
    key	<AC03> {	[		d,		 D,	Cyrillic_ve,     Cyrillic_VE	]	};
    key	<AC04> {	[		f,		 F,	Cyrillic_a,	Cyrillic_A	]	};
    key	<AC05> {	[		g,		 G,	Cyrillic_pe,     Cyrillic_PE	]	};
    key	<AC06> {	[		h,		 H,	Cyrillic_er,     Cyrillic_ER	]	};
    key	<AC07> {	[		j,		 J,	Cyrillic_o,	Cyrillic_O	]	};
    key	<AC08> {	[		k,		 K,	Cyrillic_el,     Cyrillic_EL	]	};
    key	<AC09> {	[		l,		 L,	Cyrillic_de,     Cyrillic_DE	]	};
    key	<AC10> {	[	semicolon,	     colon,	Cyrillic_zhe,    Cyrillic_ZHE	]	};
    key	<AC11> {	[      apostrophe,	  quotedbl,	Ukrainian_ie,    Ukrainian_IE	]	};
    key <BKSL> {        [       backslash,             bar,     Ukrainian_ghe_with_upturn, Ukrainian_GHE_WITH_UPTURN ] };

    key <LSGT> {        [            less,         greater,     slash,           bar            ]       };
    key	<AB01> {	[		z,		 Z,	Cyrillic_ya,     Cyrillic_YA	]	};
    key	<AB02> {	[		x,		 X,	Cyrillic_che,    Cyrillic_CHE	]	};
    key	<AB03> {	[		c,		 C,	Cyrillic_es,     Cyrillic_ES	]	};
    key	<AB04> {	[		v,		 V,	Cyrillic_em,     Cyrillic_EM	]	};
    key	<AB06> {	[		n,		 N,	Cyrillic_te,     Cyrillic_TE	]	};
    key	<AB05> {	[		b,		 B,	Cyrillic_i,	Cyrillic_I	]	};
    key	<AB07> {	[		m,		 M,	Cyrillic_softsign,Cyrillic_SOFTSIGN	]	};
    key	<AB08> {	[	    comma,	      less,	Cyrillic_be,     Cyrillic_BE	]	};
    key	<AB09> {	[	   period,	   greater,	Cyrillic_yu,     Cyrillic_YU	]	};
    key	<AB10> {	[	    slash,	  question,	slash,	  question	        ]	};

	include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/ua(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "unicode" {
	include "ua(unicode)"
};

partial alphanumeric_keys
	xkb_symbols "legacy" {
	include "ua(legacy)"
};

partial alphanumeric_keys
	xkb_symbols "winkeys" {
	include "ua(winkeys)"
};

partial alphanumeric_keys
	xkb_symbols "typewriter" {
	include "ua(typewriter)"
};

partial alphanumeric_keys
	xkb_symbols "phonetic" {
	include "ua(phonetic)"
};

partial alphanumeric_keys
	xkb_symbols "rstu" {
	include "ua(rstu)"
};

partial alphanumeric_keys
	xkb_symbols "rstu_ru" {
	include "ua(rstu_ru)"
};

partial alphanumeric_keys
	xkb_symbols "homophonic" {
	include "ua(homophonic)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]= "Portuguese (Brazil, Sun Type 6/7)";
 
	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [      apostrophe,        quotedbl,	notsign		               ] };
    key <AE01> { [               1,          exclam,	onesuperior,        exclamdown ] };
    key <AE02> { [               2,              at,	twosuperior,           onehalf ] };
    key <AE03> { [               3,      numbersign,	threesuperior,   threequarters ] };
    key <AE04> { [               4,          dollar,	sterling,           onequarter ] };
    key <AE05> { [               5,         percent,	cent                           ] };
    key <AE06> { [               6,  dead_diaeresis,	notsign,             diaeresis ] };
    key <AE07> { [               7,       ampersand,	braceleft                      ] };
    key <AE08> { [               8,        asterisk,	bracketleft                    ] };
    key <AE09> { [               9,       parenleft,	bracketright                   ] };
    key <AE10> { [               0,      parenright,	braceright                     ] };
    key <AE11> { [           minus,      underscore,	backslash                      ] };
    key <AE12> { [           equal,            plus,	section                        ] };

    key <AD03> { [               e,               E,	EuroSign                       ] };
    key <AD04> { [               r,               R,	registered                     ] };
    key <AD11> { [      dead_acute,      dead_grave,	acute,                   grave ] };
    key <AD12> { [     bracketleft,       braceleft,	ordfeminine                    ] };

    key <AC10> { [        ccedilla,        Ccedilla,	exclamdown		       ] };
    key <AC11> { [      dead_tilde, dead_circumflex,	asciitilde,        asciicircum ] };
    key <AC12> { [    bracketright,      braceright,	masculine                      ] };
    key <BKSL> { [   bracketright,       braceright,    masculine                      ] };

    key <LSGT> { [          slash,              bar,    degree                         ] };
    key <AB01> { [               z,               Z,	guillemotleft 		       ] };
    key <AB02> { [               x,               X,	guillemotright                 ] };
    key <AB03> { [               c,               C,	copyright                      ] };
    key <AB07> { [               m,               M,	mu                             ] };
    key <AB08> { [           comma,            less,	question                       ] };
    key <AB09> { [          period,         greater,	questiondown                   ] };
    key <AB10> { [       semicolon,           colon                                    ] };
    key <AB11> { [           slash,        question,	degree,           questiondown ] };

    key <KPPT> { [      KP_Decimal                                                     ] };
    key <KPDL> { [       KP_Delete,           comma                                    ] };

	include "level3(ralt_switch)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/br(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "abnt2" {
	include "br(abnt2)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "br(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "thinkpad" {
	include "br(thinkpad)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "br(olpc)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "br(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "nativo" {
	include "br(nativo)"
};

partial alphanumeric_keys
	xkb_symbols "nativo-us" {
	include "br(nativo-us)"
};

partial alphanumeric_keys
	xkb_symbols "nativo-epo" {
	include "br(nativo-epo)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Belgium (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE>  { [twosuperior, threesuperior                         ] };
    key <AE01>  { [ ampersand,          1,          bar               ] };
    key <AE02>  { [    eacute,          2,           at               ] };
    key <AE03>  { [  quotedbl,          3,   numbersign               ] };
    key <AE04>  { [apostrophe,          4                             ] };
    key <AE05>  { [ parenleft,          5                             ] };
    key <AE06>  { [   section,          6,  asciicircum               ] };
    key <AE07>  { [    egrave,          7                             ] };
    key <AE08>  { [    exclam,          8                             ] };
    key <AE09>  { [  ccedilla,          9,    braceleft               ] };
    key <AE10>  { [    agrave,          0,   braceright               ] };
    key <AE11>  { [parenright,     degree                             ] };
    key <AE12>  { [     minus, underscore                             ] };

    key <AD01>  { [         a,          A                             ] };
    key <AD02>  { [         z,          Z                             ] };
    key <AD03>  { [         e,          E,     EuroSign               ] };
    key <AD09>  { [         o,          O                             ] };
    key <AD11>  { [dead_circumflex, dead_diaeresis,  bracketleft      ] };
    key <AD12>  { [    dollar,   asterisk, bracketright               ] };

    key <AC01>  { [         q,          Q                             ] };
    key <AC10>  { [         m,          M                             ] };
    key <AC11>  { [    ugrave,    percent,   dead_acute               ] };
    key <BKSL>  { [        mu,   sterling,   dead_grave               ] };

    key <LSGT>  { [      less,    greater,    backslash               ] };
    key <AB01>  { [         w,          W                             ] };
    key <AB07>  { [     comma,   question                             ] };
    key <AB08>  { [ semicolon,     period                             ] };
    key <AB09>  { [     colon,      slash                             ] };
    key <AB10>  { [     equal,       plus,   dead_tilde               ] };

	include "level3(ralt_switch)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/be(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "oss" {
	include "be(oss)"
};

partial alphanumeric_keys
	xkb_symbols "oss_frbe" {
	include "be(oss_frbe)"
};

partial alphanumeric_keys
	xkb_symbols "oss_latin9" {
	include "be(oss_latin9)"
};

partial alphanumeric_keys
	xkb_symbols "oss_Sundeadkeys" {
	include "be(oss_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "oss_sundeadkeys" {
	include "be(oss_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "iso-alternate" {
	include "be(iso-alternate)"
};

partial alphanumeric_keys
	xkb_symbols "Sundeadkeys" {
	include "be(sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "sundeadkeys" {
	include "be(sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "be(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "wang" {
	include "be(wang)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

	name[Group1]= "Russian (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

	key.type[group1]="FOUR_LEVEL";

    key	<AE01> { [		1,	    exclam, 1,          exclam 	] };
    key	<AE02> { [		2,        quotedbl, 2, at	] };
    key	<AE03> { [		3,      numerosign, 3,  numbersign	] };
    key	<AE04> { [		4,       percent, 4,      dollar 	] };
    key	<AE05> { [		5,	     colon, 5, percent	] };
    key	<AE06> { [		6,	     comma, 6, asciicircum	] };
    key	<AE07> { [		7,	    period, 7, ampersand	] };
    key	<AE08> { [		8,	 semicolon, 8, asterisk 	] };
    key	<BKSL> { [           slash,        question, backslash,             bar	] };
    key	<AB10> { [      ediaeresis,      Ediaeresis,	    slash,	  question 	] };
    key <LSGT> { [       backslash,             bar, backslash,             bar ] };

    key	<AD01> { [ Cyrillic_shorti, Cyrillic_SHORTI, q, Q	] };
    key	<AD02> { [    Cyrillic_tse,    Cyrillic_TSE, w, W	] };
    key	<AD03> { [      Cyrillic_u,	Cyrillic_U, e, E	] };
    key	<AD04> { [     Cyrillic_ka,     Cyrillic_KA, r, R	] };
    key	<AD05> { [     Cyrillic_ie,     Cyrillic_IE, t, T	] };
    key	<AD06> { [     Cyrillic_en,     Cyrillic_EN, y, Y	] };
    key	<AD07> { [    Cyrillic_ghe,    Cyrillic_GHE, u, U	] };
    key	<AD08> { [    Cyrillic_sha,    Cyrillic_SHA, i, I	] };
    key	<AD09> { [  Cyrillic_shcha,  Cyrillic_SHCHA, o, O	] };
    key	<AD10> { [     Cyrillic_ze,     Cyrillic_ZE, p, P	] };
    key	<AD11> { [     Cyrillic_ha,     Cyrillic_HA, bracketleft,       braceleft	] };
    key	<AD12> { [Cyrillic_hardsign,Cyrillic_HARDSIGN, bracketright,      braceright	] };
    key	<AC01> { [     Cyrillic_ef,     Cyrillic_EF, a, A	] };
    key	<AC02> { [   Cyrillic_yeru,   Cyrillic_YERU, s, S	] };
    key	<AC03> { [     Cyrillic_ve,     Cyrillic_VE, d, D	] };
    key	<AC04> { [      Cyrillic_a,	Cyrillic_A, f, F	] };
    key	<AC05> { [     Cyrillic_pe,     Cyrillic_PE, g, G	] };
    key	<AC06> { [     Cyrillic_er,     Cyrillic_ER, h, H	] };
    key	<AC07> { [      Cyrillic_o,	Cyrillic_O, j, J	] };
    key	<AC08> { [     Cyrillic_el,     Cyrillic_EL, k, K	] };
    key	<AC09> { [     Cyrillic_de,     Cyrillic_DE, l, L	] };
    key	<AC10> { [    Cyrillic_zhe,    Cyrillic_ZHE, semicolon,           colon	] };
    key	<AC11> { [      Cyrillic_e,	Cyrillic_E, apostrophe,        quotedbl	] };
    key	<AB01> { [     Cyrillic_ya,     Cyrillic_YA, z, Z	] };
    key	<AB02> { [    Cyrillic_che,    Cyrillic_CHE, x, X	] };
    key	<AB03> { [     Cyrillic_es,     Cyrillic_ES, c, C	] };
    key	<AB04> { [     Cyrillic_em,     Cyrillic_EM, v, V	] };
    key	<AB05> { [      Cyrillic_i,	Cyrillic_I, b, B	] };
    key	<AB06> { [     Cyrillic_te,     Cyrillic_TE, n, N	] };
    key	<AB07> { [Cyrillic_softsign,Cyrillic_SOFTSIGN, m, M	] };
    key	<AB08> { [     Cyrillic_be,     Cyrillic_BE, comma,            less	] };
    key	<AB09> { [     Cyrillic_yu,     Cyrillic_YU, period,         greater	] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/ru(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "winkeys" {
	include "ru(winkeys)"
};

partial alphanumeric_keys
	xkb_symbols "common" {
	include "ru(common)"
};

partial alphanumeric_keys
	xkb_symbols "legacy" {
	include "ru(legacy)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "ru(olpc)"
};

partial alphanumeric_keys
	xkb_symbols "typewriter" {
	include "ru(typewriter)"
};

partial alphanumeric_keys
	xkb_symbols "typewriter-legacy" {
	include "ru(typewriter-legacy)"
};

partial alphanumeric_keys
	xkb_symbols "phonetic" {
	include "ru(phonetic)"
};

partial alphanumeric_keys
	xkb_symbols "phonetic_winkeys" {
	include "ru(phonetic_winkeys)"
};

partial alphanumeric_keys
	xkb_symbols "tt" {
	include "ru(tt)"
};

partial alphanumeric_keys
	xkb_symbols "os_legacy" {
	include "ru(os_legacy)"
};

partial alphanumeric_keys
	xkb_symbols "os_winkeys" {
	include "ru(os_winkeys)"
};

partial alphanumeric_keys
	xkb_symbols "cv" {
	include "ru(cv)"
};

partial alphanumeric_keys
	xkb_symbols "udm" {
	include "ru(udm)"
};

partial alphanumeric_keys
	xkb_symbols "cv_latin" {
	include "ru(cv_latin)"
};

partial alphanumeric_keys
	xkb_symbols "kom" {
	include "ru(kom)"
};

partial alphanumeric_keys
	xkb_symbols "sah" {
	include "ru(sah)"
};

partial alphanumeric_keys
	xkb_symbols "xal" {
	include "ru(xal)"
};

partial alphanumeric_keys
	xkb_symbols "dos" {
	include "ru(dos)"
};

partial alphanumeric_keys
	xkb_symbols "bak" {
	include "ru(bak)"
};

partial alphanumeric_keys
	xkb_symbols "srp" {
	include "ru(srp)"
};

partial alphanumeric_keys
	xkb_symbols "chm" {
	include "ru(chm)"
};

partial alphanumeric_keys
	xkb_symbols "chu" {
	include "ru(chu)"
};

partial alphanumeric_keys
	xkb_symbols "ruu" {
	include "ru(ruu)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="German (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [     asciicircum,           degree                   ] };
    key <AE02> { [               2,         quotedbl,     twosuperior  ] }; 
    key <AE03> { [               3,          section,   threesuperior  ] };
    key <AE04> { [               4,           dollar                   ] };
    key <AE06> { [               6,        ampersand,         section  ] };
    key <AE07> { [               7,            slash,       braceleft  ] };
    key <AE08> { [               8,        parenleft,     bracketleft  ] };
    key <AE09> { [               9,       parenright,    bracketright  ] };
    key <AE10> { [               0,            equal,      braceright  ] };
    key <AE11> { [          ssharp,         question,       backslash  ] };
    key <AE12> { [      dead_acute,       dead_grave                   ] };
    key <AD01> { [               q,                Q,              at  ] };
    key <AD03> { [               e,                E,        EuroSign  ] };
    key <AD06> { [               z,                Z                   ] };
    key <AD11> { [      udiaeresis,       Udiaeresis                   ] };
    key <AD12> { [            plus,         asterisk,      asciitilde  ] };
    key <AC10> { [      odiaeresis,       Odiaeresis                   ] };
    key <AC11> { [      adiaeresis,       Adiaeresis                   ] };
    key <AB01> { [               y,                Y                   ] };
    key <AB07> { [               m,                M,              mu  ] };
    key <AB08> { [           comma,        semicolon                   ] };
    key <AB09> { [          period,            colon                   ] };
    key <AB10> { [           minus,       underscore                   ] };
    key <BKSL> { [      numbersign,       apostrophe,           grave  ] };
    key <LSGT> { [            less,          greater,             bar  ] };

        include "level3(ralt_switch)"
        include "kpdl(comma)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/de(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "legacy" {
	include "de(legacy)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "de(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "deadgraveacute" {
	include "de(deadgraveacute)"
};

partial alphanumeric_keys
	xkb_symbols "deadacute" {
	include "de(deadacute)"
};

partial alphanumeric_keys
	xkb_symbols "ro" {
	include "de(ro)"
};

partial alphanumeric_keys
	xkb_symbols "ro_nodeadkeys" {
	include "de(ro_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "de(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "Sundeadkeys" {
	include "de(basic)"
};

partial alphanumeric_keys
	xkb_symbols "sundeadkeys" {
	include "de(basic)"
};

partial alphanumeric_keys
	xkb_symbols "neo_base" {
	include "de(neo_base)"
};

partial alphanumeric_keys
	xkb_symbols "adnw" {
	include "de(adnw)"
};

partial alphanumeric_keys
	xkb_symbols "adnw_base" {
	include "de(adnw_base)"
};

partial alphanumeric_keys
	xkb_symbols "neo" {
	include "de(neo)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "de(mac)"
};

partial alphanumeric_keys
	xkb_symbols "mac_nodeadkeys" {
	include "de(mac_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "dsb" {
	include "de(dsb)"
};

partial alphanumeric_keys
	xkb_symbols "dsb_qwertz" {
	include "de(dsb_qwertz)"
};

partial alphanumeric_keys
	xkb_symbols "qwerty" {
	include "de(qwerty)"
};

partial alphanumeric_keys
	xkb_symbols "ru" {
	include "de(ru)"
};

partial alphanumeric_keys
	xkb_symbols "us" {
	include "de(us)"
};

partial alphanumeric_keys
	xkb_symbols "hu" {
	include "de(hu)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="French (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE>  { [     twosuperior                              ] };
    key <AE01>	{ [       ampersand,          1                  ] };
    key <AE02>	{ [          eacute,          2,   asciitilde    ] };
    key <AE03>	{ [        quotedbl,          3,   numbersign    ] };
    key <AE04>	{ [      apostrophe,          4,    braceleft    ] };
    key <AE05>	{ [       parenleft,          5,  bracketleft    ] };
    key <AE06>	{ [           minus,          6,          bar    ] };
    key <AE07>	{ [          egrave,          7,        grave    ] };
    key <AE08>	{ [      underscore,          8,    backslash    ] };
    key <AE09>	{ [        ccedilla,          9,  asciicircum    ] };
    key <AE10>	{ [          agrave,          0,           at    ] };
    key <AE11>	{ [      parenright,     degree, bracketright    ] };
    key <AE12>	{ [           equal,       plus,   braceright    ] };

    key <AD01>	{ [               a,          A                  ] };
    key <AD02>	{ [               z,          Z                  ] };
    key <AD03>	{ [               e,          E,     EuroSign    ] };
    key <AD11>	{ [ dead_circumflex, dead_diaeresis              ] };
    key <AD12>	{ [          dollar,   sterling,     currency    ] };

    key <AC01>	{ [               q,          Q                  ] };
    key <AC10>	{ [               m,          M                  ] };
    key <AC11>	{ [          ugrave,    percent                  ] };
    key <BKSL>	{ [        asterisk,         mu                  ] };

    key <LSGT>  { [            less,    greater                  ] };
    key <AB01>	{ [               w,          W                  ] };
    key <AB07>	{ [           comma,   question                  ] };
    key <AB08>	{ [       semicolon,     period                  ] };
    key <AB09>	{ [           colon,      slash                  ] };
    key <AB10>	{ [          exclam,    section                  ] };

	include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/fr(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "fr(olpc)"
};

partial alphanumeric_keys
	xkb_symbols "Sundeadkeys" {
	include "fr(sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "sundeadkeys" {
	include "fr(sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "fr(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "oss" {
	include "fr(oss)"
};

partial alphanumeric_keys
	xkb_symbols "oss_latin9" {
	include "fr(oss_latin9)"
};

partial alphanumeric_keys
	xkb_symbols "oss_Sundeadkeys" {
	include "fr(oss_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "oss_sundeadkeys" {
	include "fr(oss_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "oss_nodeadkeys" {
	include "fr(oss_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "latin9" {
	include "fr(latin9)"
};

partial alphanumeric_keys
	xkb_symbols "latin9_Sundeadkeys" {
	include "fr(latin9_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "latin9_sundeadkeys" {
	include "fr(latin9_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "latin9_nodeadkeys" {
	include "fr(latin9_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "bepo" {
	include "fr(bepo)"
};

partial alphanumeric_keys
	xkb_symbols "bepo_latin9" {
	include "fr(bepo_latin9)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "fr(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "bre" {
	include "fr(bre)"
};

partial alphanumeric_keys
	xkb_symbols "oci" {
	include "fr(oci)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "fr(mac)"
};

partial alphanumeric_keys
	xkb_symbols "geo" {
	include "fr(geo)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Romanian (Sun Type 6/7)";

    include "sun_vndr/us(sun_type6)"

    key <AE01> { [            1,      exclam,       dead_tilde              ] };
    key <AE02> { [            2,          at,       dead_caron              ] };
    key <AE03> { [            3,  numbersign,  dead_circumflex              ] };
    key <AE04> { [            4,      dollar,       dead_breve              ] };
    key <AE05> { [            5,     percent,   dead_abovering              ] };
    key <AE06> { [            6, asciicircum,      dead_ogonek              ] };
    key <AE07> { [            7,   ampersand,       dead_grave              ] };
    key <AE08> { [            8,    asterisk,    dead_abovedot              ] };
    key <AE09> { [            9,   parenleft,       dead_acute              ] };
    key <AE10> { [            0,  parenright, dead_doubleacute              ] };
    key <AE11> { [        minus,  underscore,   dead_diaeresis,      endash ] };
    key <AE12> { [        equal,        plus,     dead_cedilla,   plusminus ] };
    key <AD01> { [            q,           Q,      acircumflex, Acircumflex ] };
    key <AD02> { [            w,           W,           ssharp,       U1e9e ] };
    key <AD03> { [            e,           E,         EuroSign              ] };
    key <AD05> { [            t,           T,            U021b,       U021a ] };
    key <AD08> { [            i,           I,      icircumflex, Icircumflex ] };
    key <AD10> { [            p,           P,          section              ] };
    key <AD11> { [  bracketleft,   braceleft, doublelowquotemark            ] };
    key <AD12> { [ bracketright,  braceright, rightdoublequotemark          ] };
    key <AC01> { [            a,           A,           abreve,      Abreve ] };
    key <AC02> { [            s,           S,            U0219,       U0218 ] };
    key <AC03> { [            d,           D,          dstroke,     Dstroke ] };
    key <AC09> { [            l,           L,          lstroke,     Lstroke ] };
    key <LSGT> { [    backslash,         bar                                ] };
    key <AB03> { [            c,           C,        copyright              ] };
    key <AB08> { [        comma,        less,    guillemotleft              ] };
    key <AB09> { [       period,     greater,   guillemotright              ] };

    key <KPDL> { [    KP_Delete,  KP_Decimal,    KP_Separator, KP_Separator ] };

    include "level3(ralt_switch)"
};

partial alphanumeric_keys
    xkb_symbols "basic" {
    include "sun_vndr/ro(sun_type6)"
};

partial alphanumeric_keys
    xkb_symbols "std" {
    include "ro(std)"
};

partial alphanumeric_keys
    xkb_symbols "winkeys" {
    include "ro(winkeys)"
};

partial alphanumeric_keys
    xkb_symbols "crh_dobruja" {
    include "ro(crh_dobruja)"
};

partial alphanumeric_keys
    xkb_symbols "ergonomic" {
    include "ro(ergonomic)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sunbasic" {

    include "us(basic)"
    include "capslock(capslock)"
    include "srvr_ctrl(xfree86)"

};

partial alphanumeric_keys
xkb_symbols "sun_type6" {

	name[Group1]= "English (US, Sun Type 6/7)";

    include "sun_vndr/us(sunbasic)"
    include "eurosign(4)"
    include "level3(ralt_switch)"

    key <COMP> { [		Multi_key			] };
    key <SYRQ> { [		SunSys_Req			] };
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/us(sunbasic)"
};

partial alphanumeric_keys
	xkb_symbols "euro" {
	include "us(euro)"
};

partial alphanumeric_keys
	xkb_symbols "ibm238l" {
	include "us(ibm238l)"
};

partial alphanumeric_keys
	xkb_symbols "intl" {
	include "us(intl)"
};

partial alphanumeric_keys
	xkb_symbols "alt-intl" {
	include "us(alt-intl)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "us(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak-intl" {
	include "us(dvorak-intl)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak-alt-intl" {
	include "us(dvorak-alt-intl)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak-l" {
	include "us(dvorak-l)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak-r" {
	include "us(dvorak-r)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak-classic" {
	include "us(dvorak-classic)"
};

partial alphanumeric_keys
	xkb_symbols "dvp" {
	include "us(dvp)"
};

partial alphanumeric_keys
	xkb_symbols "rus" {
	include "us(rus)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "us(mac)"
};

partial alphanumeric_keys
	xkb_symbols "colemak" {
	include "us(colemak)"
};

partial alphanumeric_keys
	xkb_symbols "altgr-intl" {
	include "us(altgr-intl)"
};

partial alphanumeric_keys
	xkb_symbols "classmate" {
	include "us(classmate)"
};

partial alphanumeric_keys
	xkb_symbols "classmate-intl" {
	include "us(classmate-intl)"
};

partial alphanumeric_keys
	xkb_symbols "classmate-alt-intl" {
	include "us(classmate-alt-intl)"
};

partial alphanumeric_keys
	xkb_symbols "classmate-altgr-intl" {
	include "us(classmate-altgr-intl)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "us(olpc)"
};

partial alphanumeric_keys
	xkb_symbols "olpc2" {
	include "us(olpc2)"
};

partial alphanumeric_keys
	xkb_symbols "olpcm" {
	include "us(olpcm)"
};

partial alphanumeric_keys
	xkb_symbols "chr" {
	include "us(chr)"
};

partial alphanumeric_keys
	xkb_symbols "hbs" {
	include "us(hbs)"
};

partial alphanumeric_keys
	xkb_symbols "workman" {
	include "us(workman)"
};

partial alphanumeric_keys
	xkb_symbols "workman-intl" {
	include "us(workman-intl)"
};

partial alphanumeric_keys
	xkb_symbols "norman" {
	include "us(norman)"
};

partial alphanumeric_keys
	xkb_symbols "carpalx" {
	include "us(carpalx)"
};

partial alphanumeric_keys
	xkb_symbols "carpalx-intl" {
	include "us(carpalx-intl)"
};

partial alphanumeric_keys
	xkb_symbols "carpalx-altgr-intl" {
	include "us(carpalx-altgr-intl)"
};

partial alphanumeric_keys
	xkb_symbols "carpalx-full" {
	include "us(carpalx-full)"
};

partial alphanumeric_keys
	xkb_symbols "carpalx-full-intl" {
	include "us(carpalx-full-intl)"
};

partial alphanumeric_keys
	xkb_symbols "carpalx-full-altgr-intl" {
	include "us(carpalx-full-altgr-intl)"
};

partial alphanumeric_keys
	xkb_symbols "cz_sk_de" {
	include "us(cz_sk_de)"
};

partial alphanumeric_keys
	xkb_symbols "scn" {
	include "us(scn)"
};

partial alphanumeric_keys
	xkb_symbols "intl-unicode" {
	include "us(intl-unicode)"
};

partial alphanumeric_keys
	xkb_symbols "alt-intl-unicode" {
	include "us(alt-intl-unicode)"
};

partial alphanumeric_keys
	xkb_symbols "ats" {
	include "us(ats)"
};

partial alphanumeric_keys
	xkb_symbols "crd" {
	include "us(crd)"
};

partial alphanumeric_keys
	xkb_symbols "3l" {
	include "us(3l)"
};

partial alphanumeric_keys
	xkb_symbols "3l-cros" {
	include "us(3l-cros)"
};

partial alphanumeric_keys
	xkb_symbols "3l-emacs" {
	include "us(3l-emacs)"
};

partial alphanumeric_keys
	xkb_symbols "drix" {
	include "us(drix)"
};

partial alphanumeric_keys
	xkb_symbols "de_se_fi" {
	include "us(de_se_fi)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="English (UK, Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [      grave,    notsign,  brokenbar ] };

    key <AE02> { [          2,   quotedbl             ] };
    key <AE03> { [          3,   sterling             ] };
    key <AE04> { [          4,     dollar,   EuroSign ] };
    key <BKSL> { [ numbersign, asciitilde             ] };
    key <AC11> { [ apostrophe,         at             ] };
    key <LSGT> { [  backslash,        bar             ] };

	include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/gb(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "intl" {
	include "gb(intl)"
};

partial alphanumeric_keys
	xkb_symbols "extd" {
	include "gb(extd)"
};

partial alphanumeric_keys
	xkb_symbols "colemak" {
	include "gb(colemak)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "gb(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "dvorakukp" {
	include "gb(dvorakukp)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "gb(mac)"
};

partial alphanumeric_keys
	xkb_symbols "mac_intl" {
	include "gb(mac_intl)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Spanish (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [       masculine,     ordfeminine,     backslash ] };
    key <LSGT> { [            less,         greater                ] };
    key <AE01> { [               1,          exclam,           bar ] };
    key <AE02> { [               2,        quotedbl,            at ] };
    key <AE03> { [               3,  periodcentered,    numbersign ] };
    key <AE04> { [               4,          dollar,   asciicircum ] };
    key <AE05> { [               5,         percent,    asciitilde ] };
    key <AE06> { [               6,       ampersand,       notsign ] };
    key <AE07> { [               7,           slash                ] };
    key <AE08> { [               8,       parenleft                ] };
    key <AE09> { [               9,      parenright                ] }; 
    key <AE10> { [               0,           equal                ] };
    key <AE11> { [      apostrophe,        question,         grave ] };
    key <AE12> { [      exclamdown,    questiondown                ] };
    key <AD03> { [               e,               E,      EuroSign ] };
    key <AD11> { [      dead_grave, dead_circumflex,   bracketleft ] };
    key <AD12> { [            plus,        asterisk,  bracketright ] };
    key <AC10> { [          ntilde,          Ntilde                ] };
    key <AC11> { [      dead_acute,  dead_diaeresis,     braceleft ] };
    key <BKSL> { [        ccedilla,        Ccedilla,    braceright ] };
    key <AB08> { [           comma,       semicolon                ] };
    key <AB09> { [          period,           colon                ] };
    key <AB10> { [           minus,      underscore                ] };
   
        include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/es(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "Sundeadkeys" {
	include "es(sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "sundeadkeys" {
	include "es(sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "es(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "es(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "cat" {
	include "es(cat)"
};

partial alphanumeric_keys
	xkb_symbols "ast" {
	include "es(ast)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "es(mac)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "es(olpc)"
};

partial alphanumeric_keys
	xkb_symbols "deadtilde" {
	include "es(deadtilde)"
};

partial alphanumeric_keys
	xkb_symbols "olpc2" {
	include "es(olpc2)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]= "Portuguese (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <LSGT> { [            less,          greater                  ] };
    key <TLDE> { [       backslash,              bar                  ] };
    key <AE02> { [               2,         quotedbl,              at ] };
    key <AE03> { [               3,       numbersign,        sterling ] };
    key <AE04> { [               4,           dollar,         section ] };
    key <AE05> { [               5,          percent,      asciitilde ] };
    key <AE06> { [               6,        ampersand,     asciicircum ] };
    key <AE07> { [               7,            slash,       braceleft ] };
    key <AE08> { [               8,        parenleft,     bracketleft ] };
    key <AE09> { [               9,       parenright,    bracketright ] };
    key <AE10> { [               0,            equal,      braceright ] };
    key <AE11> { [      apostrophe,         question,           grave ] };
    key <AE12> { [   guillemotleft,   guillemotright                  ] };
    key <AD03> { [               e,                E,        EuroSign ] };
    key <AD11> { [            plus,         asterisk,  dead_diaeresis ] }; 
    key <AD12> { [      dead_acute,       dead_grave                  ] };
    key <BKSL> { [      dead_tilde,  dead_circumflex                  ] };
    key <AC10> { [        ccedilla,         Ccedilla                  ] };
    key <AC11> { [       masculine,      ordfeminine                  ] };
    key <AB08> { [           comma,        semicolon                  ] };
    key <AB09> { [          period,            colon                  ] };
    key <AB10> { [           minus,       underscore                  ] };

        include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/pt(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "Sundeadkeys" {
	include "pt(sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "sundeadkeys" {
	include "pt(sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "pt(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "pt(mac)"
};

partial alphanumeric_keys
	xkb_symbols "mac_sundeadkeys" {
	include "pt(mac_sundeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "mac_nodeadkeys" {
	include "pt(mac_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "nativo" {
	include "pt(nativo)"
};

partial alphanumeric_keys
	xkb_symbols "nativo-us" {
	include "pt(nativo-us)"
};

partial alphanumeric_keys
	xkb_symbols "nativo-epo" {
	include "pt(nativo-epo)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Dutch (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE>  { [        at,    section,      notsign ] };
    key <AE01>  { [         1,     exclam,  onesuperior ] };
    key <AE02>  { [         2,   quotedbl,  twosuperior ] };
    key <AE03>  { [         3,    numbersign, threesuperior ] };
    key <AE04>  { [         4,    dollar,  onequarter ] };
    key <AE05>  { [         5,    percent,   onehalf ] };
    key <AE06>  { [         6,  ampersand, threequarters ] };
    key <AE07>  { [         7, underscore,     sterling ] };
    key <AE08>  { [         8,  parenleft,    braceleft ] };
    key <AE09>  { [         9, parenright,   braceright ] };
    key <AE10>  { [         0, apostrophe,        grave ] };
    key <AE11>  { [     slash,   question,    backslash ] };
    key <AE12>  { [    degree, dead_tilde, dead_cedilla ] };

    key <AD03>  { [         e,          E,     EuroSign ] };
    key <AD05>  { [         t,          T ] };
    key <AD06>  { [         y,          Y ] };
    key <AD07>  { [         u,          U ] };
    key <AD08>  { [         i,          I ] };
    key <AD09>  { [         o,          O ] };
    key <AD10>  { [         p,          P ] };
    key <AD11>  { [dead_diaeresis, dead_circumflex ]    };
    key <AD12>  { [  asterisk,        bar,  asciitilde ] };

    key <AC01>  { [         a,          A ] };
    key <AC02>  { [         s,    S, ssharp, U1E9E ] };
    key <AC04>  { [         f,          F ] };
    key <AC10>  { [      plus,  plusminus ] };
    key <AC11>  { [dead_acute, dead_grave ] };
    key <BKSL>  { [      less,    greater,   asciicircum ] };

    key <LSGT>  { [bracketright, bracketleft,       brokenbar ] };
    key <AB01>  { [         z,    Z, guillemotleft ] };
    key <AB02>  { [         x,    X, guillemotright ] };
    key <AB03>  { [         c,    C, cent                     ] };
    key <AB06>  { [         n,          N ] };
    key <AB07>  { [         m,          M,     mu ] };
    key <AB08>  { [     comma,  semicolon ] };
    key <AB09>  { [    period,      colon ] };
    key <AB10>  { [     minus,      equal ] };

        include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/nl(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "std" {
	include "nl(std)"
};

partial alphanumeric_keys
	xkb_symbols "Sundeadkeys" {
	include "nl(basic)"
};

partial alphanumeric_keys
	xkb_symbols "sundeadkeys" {
	include "nl(basic)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "nl(mac)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Turkish (Sun Type 6)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE>  { [  quotedbl,     eacute                ] };
    key <AE01>	{ [         1,     exclam                ] };
    key <AE02>	{ [         2, apostrophe                ] };
    key <AE03>	{ [        3, asciicircum,    numbersign ] };
    key <AE04>	{ [         4,       plus,        dollar ] };
    key <AE06>	{ [         6,  ampersand                ] };
    key <AE07>	{ [         7,      slash,     braceleft ] };
    key <AE08>	{ [         8,  parenleft,   bracketleft ] };
    key <AE09>	{ [         9, parenright,  bracketright ] };
    key <AE10>	{ [         0,      equal,    braceright ] };
    key <AE11>	{ [  asterisk,   question,     backslash ] };
    key <AE12>	{ [     minus, underscore                ] };

    key <AD01>  { [         q,          Q,           at ] };
    key <AD03>	{ [         e,          E,     EuroSign ] };
    key <AD08>	{ [  idotless,          I               ] };
    key <AD11>	{ [    gbreve,     Gbreve               ] };
    key <AD12>	{ [udiaeresis, Udiaeresis,   asciitilde ] };

    key <AC10>	{ [  scedilla,   Scedilla,        acute ] };
    key <AC11>	{ [         i,  Iabovedot               ] }; 
    key <BKSL>	{ [     comma,  semicolon,        grave ] };

    key <LSGT>	{ [      less,    greater,          bar ] };
    key <AB08>	{ [odiaeresis, Odiaeresis               ] };
    key <AB09>	{ [  ccedilla,   Ccedilla               ] };
    key <AB10>	{ [    period,      colon               ] };

	include "level3(ralt_switch)"
};

partial alphanumeric_keys
        xkb_symbols "basic" {
        include "sun_vndr/tr(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "f" {
	include "tr(f)"
};

partial alphanumeric_keys
	xkb_symbols "alt" {
	include "tr(alt)"
};

partial alphanumeric_keys
	xkb_symbols "Sundeadkeys" {
	include "tr(basic)"
};

partial alphanumeric_keys
	xkb_symbols "sundeadkeys" {
	include "tr(basic)"
};

partial alphanumeric_keys
	xkb_symbols "ku" {
	include "tr(ku)"
};

partial alphanumeric_keys
	xkb_symbols "ku_f" {
	include "tr(ku_f)"
};

partial alphanumeric_keys
	xkb_symbols "ku_alt" {
	include "tr(ku_alt)"
};

partial alphanumeric_keys
	xkb_symbols "intl" {
	include "tr(intl)"
};

partial alphanumeric_keys
	xkb_symbols "olpc" {
	include "tr(olpc)"
};

partial alphanumeric_keys
	xkb_symbols "crh" {
	include "tr(crh)"
};

partial alphanumeric_keys
	xkb_symbols "crh_f" {
	include "tr(crh_f)"
};

partial alphanumeric_keys
	xkb_symbols "crh_alt" {
	include "tr(crh_alt)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Polish (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [ grave, 	 asciitilde					] };
    key <AE01> { [ 1,		 exclam						] };
    key <AE02> { [ 2,		 at						] };
    key <AE03> { [ 3,		 numbersign 					] };
    key <AE04> { [ 4,		 dollar	 					] };
    key <AE05> { [ 5,		 percent 					] };
    key <AE06> { [ 6,		 asciicircum					] };
    key <AE07> { [ 7,		 ampersand					] };
    key <AE08> { [ 8,		 asterisk					] };
    key <AE09> { [ 9,		 parenleft					] };
    key <AE10> { [ 0,		 parenright					] };
    key <AE11> { [ minus,	 underscore 					] };
    key <AE12> { [ equal,	 plus	 					] };

    key <AD03> { [ e,		 E,		eogonek,	Eogonek		] };       
    key <AD07> { [ u,		 U,		EuroSign			] };
    key <AD09> { [ o,		 O,		oacute,		Oacute		] };
    key <AD11> { [ bracketleft,  braceleft					] };
    key <AD12> { [ bracketright, braceright					] };

    key <AC01> { [ a,		 A,		aogonek,	Aogonek		] };
    key <AC02> { [ s,		 S,		sacute,		Sacute		] };
    key <AC09> { [ l,		 L,		lstroke,        Lstroke		] };
    key <AC10> { [ semicolon,	 colon						] };
    key <AC11> { [ apostrophe,	 quotedbl 					] };
    key <BKSL> { [ backslash,	 bar,		brokenbar			] };

    key <LSGT> { [ less,         greater,       bar,            brokenbar	] };
    key <AB01> { [ z, 		 Z,		zabovedot,	Zabovedot	] };
    key <AB02> { [ x,		 X,		zacute,		Zacute		] };
    key <AB03> { [ c,		 C,		cacute,		Cacute		] };
    key <AB06> { [ n,		 N,		nacute,		Nacute		] };
    key <AB08> { [ comma,	 less 						] };
    key <AB09> { [ period,	 greater				 	] };
    key <AB10> { [ slash,	 question					] };

	include "level3(ralt_switch)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/pl(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "legacy" {
	include "pl(legacy)"
};

partial alphanumeric_keys
	xkb_symbols "qwertz" {
	include "pl(qwertz)"
};

partial alphanumeric_keys
	xkb_symbols "intl" {
	include "pl(intl)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "pl(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak_quotes" {
	include "pl(dvorak_quotes)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak_altquotes" {
	include "pl(dvorak_altquotes)"
};

partial alphanumeric_keys
	xkb_symbols "dvp" {
	include "pl(dvp)"
};

partial alphanumeric_keys
	xkb_symbols "szl" {
	include "pl(szl)"
};

partial alphanumeric_keys
	xkb_symbols "csb" {
	include "pl(csb)"
};

partial alphanumeric_keys
	xkb_symbols "ru_phonetic_dvorak" {
	include "pl(ru_phonetic_dvorak)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Slovak (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE>  { 	[       semicolon, dead_abovering, grave,             asciitilde  ]	};
    key <AE01>  { 	[	     plus,         1,	exclam,               asciitilde  ]	};
    key <AE02>  {	[	   lcaron,         2,	at,                   dead_caron  ]	};
    key <AE03>  {	[	   scaron,         3,	numbersign,      dead_circumflex  ]	};
    key <AE04>  {	[          ccaron,         4,	dollar,               dead_breve  ]	};
    key <AE05>  {	[	   tcaron,         5,	percent,          dead_abovering  ]	};
    key <AE06>  {	[	   zcaron,         6,	asciicircum,         dead_ogonek  ]	};
    key <AE07>  {	[	   yacute,         7,	ampersand,                 grave  ]	};
    key <AE08>  {	[	   aacute,         8,	asterisk,          dead_abovedot  ]	};
    key <AE09>  {	[	   iacute,         9,	parenleft,            apostrophe  ]	};
    key <AE10>  {	[	   eacute,         0,	parenright,     dead_doubleacute  ]	};
    key <AE11>  {	[	    equal,   percent,	dead_diaeresis,        backslash  ]	};
    key <AE12>  {	[      dead_acute, dead_caron,	dead_cedilla,              minus  ]	};

    key <AD01>  {	[ 		q,         Q,	backslash		          ]	};
    key <AD02>  {	[	        w,         W,	bar	                          ]	};
    key <AD03>  {	[	        e,         E,	EuroSign 		          ]	};
    key <AD06>  {       [               z,         Z                                      ]     };
    key <AD10>  {       [               p,         P,	apostrophe   		          ]	};
    key <AD11>  {	[	   uacute,     slash,	division		          ]	};
    key <AD12>  {	[      adiaeresis, parenleft,	multiply      		          ]	};

    key <AC02>  {	[	        s,         S,	dstroke		       		  ]	};
    key <AC03>  {	[	        d,         D,	Dstroke			          ]	};
    key <AC04>  {	[	        f,         F,	bracketleft		          ]	};
    key <AC05>  {	[	        g,         G,	bracketright		          ]	};
    key <AC08>  {	[		k,         K,	lstroke 		       	  ]	};
    key <AC09>  {	[	        l,         L,	Lstroke		                  ]	};
    key <AC10>  {	[     ocircumflex,  quotedbl,	dollar		                  ]	};
    key <AC11>  {	[         section,    exclam,	ssharp,  		   U1E9E  ]	};
    key <AC12>  {	[          ncaron, parenright,	currency,               currency  ]	};
    key <BKSL>  {	[          ncaron, parenright,	backslash,                   bar  ]	};

    key <LSGT>  { 	[       backslash,       bar,	slash,                 brokenbar  ]     };
    key <AB01>  {       [               y,        Y,	less  	                          ]	};
    key <AB02>  {	[	        x,        X,	greater,              numbersign  ]	};
    key <AB03>  {	[		c,        C,	ampersand	 	          ]	};
    key <AB04>  {	[	        v,        V,	at 		                  ]	};
    key <AB05>  {	[	        b,        B,	braceleft              	          ]	};
    key <AB06>  {	[        	n,        N,	braceright              	  ]	};
    key <AB08>  {	[  	    comma, question,	less 		                  ]	};
    key <AB09>  {	[	   period,    colon,	greater		                  ]	};
    key <AB10>  {	[ 	    minus, underscore,	asterisk 			  ]	};

	include "level3(ralt_switch)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/sk(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "bksl" {
	include "sk(bksl)"
};

partial alphanumeric_keys
	xkb_symbols "qwerty" {
	include "sk(qwerty)"
};

partial alphanumeric_keys
	xkb_symbols "qwerty_bksl" {
	include "sk(qwerty_bksl)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Swedish (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [         section,         onehalf                ] };
    key <LSGT> { [            less,         greater,           bar ] };
    key <AE02> { [               2,        quotedbl,            at ] };
    key <AE03> { [               3,      numbersign,      sterling ] };
    key <AE04> { [               4,        currency,        dollar ] };
    key <AE06> { [               6,       ampersand                ] };
    key <AE07> { [               7,           slash,     braceleft ] };
    key <AE08> { [               8,       parenleft,   bracketleft ] };
    key <AE09> { [               9,      parenright,  bracketright ] };
    key <AE10> { [               0,           equal,    braceright ] };
    key <AE11> { [            plus,        question,     backslash ] };
    key <AE12> { [      dead_acute,      dead_grave                ] };
    key <AD03> { [               e,               E,      EuroSign ] };
    key <AD11> { [           aring,           Aring                ] };
    key <AD12> { [  dead_diaeresis,     asciicircum,    asciitilde ] };
    key <AC10> { [      odiaeresis,      Odiaeresis                ] };
    key <AC11> { [      adiaeresis,      Adiaeresis                ] };
    key <BKSL> { [      apostrophe,        asterisk,         grave ] };
    key <AB08> { [           comma,       semicolon                ] };
    key <AB09> { [          period,           colon                ] };
    key <AB10> { [           minus,      underscore                ] };

        include "level3(ralt_switch)"
        include "kpdl(comma)"
};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/se(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "se" {
	include "se(se)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "se(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "se(dvorak)"
};

partial alphanumeric_keys
	xkb_symbols "rus" {
	include "se(rus)"
};

partial alphanumeric_keys
	xkb_symbols "rus_nodeadkeys" {
	include "se(rus_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "smi" {
	include "se(smi)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "se(mac)"
};

partial alphanumeric_keys
	xkb_symbols "svdvorak" {
	include "se(svdvorak)"
};

partial alphanumeric_keys
	xkb_symbols "swl" {
	include "se(swl)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    include "sun_vndr/us(sun_type6)"

    name[Group1]="Finnish (Sun Type 6/7)";

    key <TLDE> { [  section,         onehalf                                  ] };
    key <AE01> { [  1,               exclam                                   ] };
    key <AE02> { [  2,               quotedbl,         at                     ] };
    key <AE03> { [  3,               numbersign,       sterling               ] };
    key <AE04> { [  4,               currency,         dollar                 ] };
    key <AE05> { [  5,               percent                                  ] };
    key <AE06> { [  6,               ampersand                                ] };
    key <AE07> { [  7,               slash,            braceleft              ] };
    key <AE08> { [  8,               parenleft,        bracketleft            ] };
    key <AE09> { [  9,               parenright,       bracketright           ] };
    key <AE10> { [  0,               equal,            braceright             ] };
    key <AE11> { [  plus,            question,         backslash              ] };
    key <AE12> { [  dead_acute,      dead_grave                               ] };
    key <AD03> { [  e,               E,                EuroSign               ] };
    key <AD11> { [  aring,           Aring                                    ] };
    key <AD12> { [  dead_diaeresis,  asciicircum,      asciitilde             ] };
    key <AC10> { [  odiaeresis,      Odiaeresis                               ] };
    key <AC11> { [  adiaeresis,      Adiaeresis                               ] };
    key <BKSL> { [  apostrophe,      asterisk,         grave                  ] };
    key <LSGT> { [  less,            greater,          bar                    ] };
    key <AB08> { [  comma,           semicolon                                ] };
    key <AB09> { [  period,          colon                                    ] };
    key <AB10> { [  minus,           underscore                               ] };

    include "level3(ralt_switch)"
    include "kpdl(comma)"
};

partial alphanumeric_keys
    xkb_symbols "basic" {
    include "sun_vndr/fi(sun_type6)"
};

partial alphanumeric_keys
    xkb_symbols "kotoistus" {
    include "fi(kotoistus)"
};

partial alphanumeric_keys
    xkb_symbols "winkeys" {
    include "fi(winkeys)"
};

partial alphanumeric_keys
    xkb_symbols "classic" {
    include "fi(fi)"
};

partial alphanumeric_keys
    xkb_symbols "nodeadkeys" {
    include "fi(nodeadkeys)"
};

partial alphanumeric_keys
    xkb_symbols "smi" {
    include "fi(smi)"
};

partial alphanumeric_keys
    xkb_symbols "mac" {
    include "fi(mac)"
};

partial alphanumeric_keys
    xkb_symbols "das" {
    include "fi(das)"
};

partial alphanumeric_keys
    xkb_symbols "fidvorak" {
    include "fi(fidvorak)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

    name[Group1]="Danish (Sun Type 6/7)";

	include "sun_vndr/us(sun_type6)"

    key <TLDE> { [         onehalf,         section                ] };
    key <AE02> { [               2,        quotedbl,            at ] };
    key <AE03> { [               3,      numbersign,      sterling ] };
    key <AE04> { [               4,        currency,        dollar ] };
    key <AE05> { [               5,         percent,    asciitilde ] };
    key <AE06> { [               6,       ampersand,   asciicircum ] };
    key <AE07> { [               7,           slash,     braceleft ] };
    key <AE08> { [               8,       parenleft,   bracketleft ] };
    key <AE09> { [               9,      parenright,  bracketright ] };
    key <AE10> { [               0,           equal,    braceright ] };
    key <AE11> { [            plus,        question                ] };
    key <AE12> { [      dead_acute,      dead_grave,           bar ] }; 
    key <AD03> { [               e,               E,      EuroSign ] }; 
    key <AD11> { [           aring,           Aring                ] };
    key <AD12> { [  dead_diaeresis, dead_circumflex,    dead_tilde ] };
    key <BKSL> { [      apostrophe,        asterisk,         grave ] };
    key <AC10> { [              ae,              AE                ] };
    key <AC11> { [          oslash,        Ooblique                ] };
    key <AB08> { [           comma,       semicolon                ] };
    key <AB09> { [          period,           colon                ] };
    key <AB10> { [           minus,      underscore                ] };
    key <LSGT> { [            less,         greater,     backslash ] };

        include "level3(ralt_switch)"
        include "kpdl(comma)"

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/dk(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "nodeadkeys" {
	include "dk(nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "mac" {
	include "dk(mac)"
};

partial alphanumeric_keys
	xkb_symbols "mac_nodeadkeys" {
	include "dk(mac_nodeadkeys)"
};

partial alphanumeric_keys
	xkb_symbols "dvorak" {
	include "dk(dvorak)"
};
//
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, provided that the above
// copyright notice(s) and this permission notice appear in all copies of
// the Software and that both the above copyright notice(s) and this
// permission notice appear in supporting documentation.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
// OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
// INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
// FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
// NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
// WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// 
// Except as contained in this notice, the name of a copyright holder
// shall not be used in advertising or otherwise to promote the sale, use
// or other dealings in this Software without prior written authorization
// of the copyright holder.
//

default partial alphanumeric_keys
xkb_symbols "sun_type6" {

	name[Group1]= "Taiwanese (Sun Type 6/7)";

	include "sun_vndr/us(sunbasic)"

    key <ALGR> { [ Henkan_Mode          ]                       };
    key <BKSL> { [ backslash, bar,  brokenbar   ]               };

};

partial alphanumeric_keys
	xkb_symbols "basic" {
	include "sun_vndr/tw(sun_type6)"
};

partial alphanumeric_keys
	xkb_symbols "tw" {
	include "tw(tw)"
};

partial alphanumeric_keys
	xkb_symbols "indigenous" {
	include "tw(indigenous)"
};

partial alphanumeric_keys
	xkb_symbols "saisiyat" {
	include "tw(saisiyat)"
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
// symbols for a NEC PC98 keyboard
default xkb_symbols "pc98" {

    key <ESC>  { [ Escape		]	};

    // Alphanumeric section
    key <AE01> { [ 1, exclam 		], [ kana_NU		]	};
    key <AE02> { [ 2, quotedbl		], [ kana_FU		]	};
    key <AE03> { [ 3, numbersign	], [ kana_A, kana_a	]	};
    key <AE04> { [ 4, dollar		], [ kana_U, kana_u	]	};
    key <AE05> { [ 5, percent		], [ kana_E, kana_e	]	};
    key <AE06> { [ 6, ampersand		], [ kana_O, kana_o	]	};
    key <AE07> { [ 7, apostrophe	], [ kana_YA, kana_ya	]	};
    key <AE08> { [ 8, parenleft		], [ kana_YU, kana_yu	]	};
    key <AE09> { [ 9, parenright	], [ kana_YO, kana_yo	]	};
    key <AE10> { [ 0 			], [ kana_WA, kana_WO	]	};
    key <AE11> { [ minus, equal		], [ kana_HO		]	};
    key <AE12> { [ asciicircum, grave 	], [ kana_HE		]	};
    key <BKSL> { [ backslash, bar 	], [ prolongedsound	]	};
    key <BKSP> { [ BackSpace		]	};

    key  <TAB> { [ Tab,	ISO_Left_Tab	]	};
    key <AD01> { [ q, Q 		], [ kana_TA		]	};
    key <AD02> { [ w, W			], [ kana_TE		]	};
    key <AD03> { [ e, E			], [ kana_I, kana_i	]	};
    key <AD04> { [ r, R			], [ kana_SU		]	};
    key <AD05> { [ t, T			], [ kana_KA		]	};
    key <AD06> { [ y, Y			], [ kana_N		]	};
    key <AD07> { [ u, U			], [ kana_NA		]	};
    key <AD08> { [ i, I			], [ kana_NI		]	};
    key <AD09> { [ o, O			], [ kana_RA		]	};
    key <AD10> { [ p, P			], [ kana_SE		]	};
    key <AD11> { [ at, asciitilde	], [ voicedsound	]	};
    key <AD12> { [ bracketleft,	braceleft ], [ semivoicedsound, kana_openingbracket ] };
    key <RTRN> { [ Return		]	};

    key <LCTL> { [ Control_L		]	};
    key <CAPS> { [ Caps_Lock		]	};
    key <AC01> { [ a, A 		], [ kana_CHI		]	};
    key <AC02> { [ s, S			], [ kana_TO		]	};
    key <AC03> { [ d, D			], [ kana_SHI		]	};
    key <AC04> { [ f, F			], [ kana_HA		]	};
    key <AC05> { [ g, G			], [ kana_KI		]	};
    key <AC06> { [ h, H			], [ kana_KU		]	};
    key <AC07> { [ j, J			], [ kana_MA		]	};
    key <AC08> { [ k, K			], [ kana_NO		]	};
    key <AC09> { [ l, L			], [ kana_RI		]	};
    key <AC10> { [ semicolon, plus	], [ kana_RE		]	};
    key <AC11> { [ colon, asterisk	], [ kana_KE		]	};
    key <AC12> { [ bracketright, braceright ], [ kana_MU, kana_closingbracket ] };

    key <LFSH> { [ Shift_L		]	};
    key <AB01> { [ z, Z 		], [ kana_TSU, kana_tsu	]	};
    key <AB02> { [ x, X			], [ kana_SA		]	};
    key <AB03> { [ c, C			], [ kana_SO		]	};
    key <AB04> { [ v, V			], [ kana_HI		]	};
    key <AB05> { [ b, B			], [ kana_KO		]	};
    key <AB06> { [ n, N			], [ kana_MI		]	};
    key <AB07> { [ m, M			], [ kana_MO		]	};
    key <AB08> { [ comma, less		], [ kana_NE, kana_comma ]	};
    key <AB09> { [ period, greater	], [ kana_RU, kana_fullstop ]	};
    key <AB10> { [ slash, question	], [ kana_ME, kana_middledot ]	};
    key <AB11> { [ NoSymbol, underscore	], [ kana_RO		]	};
//    key <RTSH> { [ Shift_R		]	};

    key <ALGR> { [ Mode_switch		]	};
    key <LALT> { [ Alt_L		]	};
    key <NFER> { [ Muhenkan		]	};
    key <SPCE> { [ space		]	};
    key <XFER> { [ Henkan, Kanji	]	};
    // End alphanumeric section

    // Begin "Function" section
    key <BRK>  { [ Break		]	};
    key <PRSC> { [ Print		]	};
    key <FK01> { [ F1			]	};
    key <FK02> { [ F2			]	};
    key <FK03> { [ F3			]	};
    key <FK04> { [ F4			]	};
    key <FK05> { [ F5			]	};
    key <FK06> { [ F6			]	};
    key <FK07> { [ F7			]	};
    key <FK08> { [ F8			]	};
    key <FK09> { [ F9			]	};
    key <FK10> { [ F10			]	};
    key <FK11> { [ F11			]	};
    key <FK12> { [ F12			]	};
    key <FK13> { [ F13			]	};
    key <FK14> { [ F14			]	};
    key <FK15> { [ F15			]	};
    // End "Function" section

    // Begin "Editing" section
    key <INS>  { [ Insert		]	};
    key <DELE> { [ Delete		]	};
    key <PGUP> { [ Prior		]	};
    key <PGDN> { [ Next			]	};
    key <UP>   { [ Up			]	};
    key <LEFT> { [ Left			]	};
    key <RGHT> { [ Right		]	};
    key <DOWN> { [ Down			]	};
    // End "Editing" section

    // Begin "Keypad" section
    key <HOME> { [ Clear, Home		]	 };
    key <HELP> { [ Help			]	};
    key <KPSU> { [ KP_Subtract		]	};
    key <KPDV> { [ KP_Divide		]	};

    key  <KP7> { [ KP_7			]	};
    key  <KP8> { [ KP_8			]	};
    key  <KP9> { [ KP_9			]	};
    key <KPMU> { [ KP_Multiply		]	};

    key  <KP4> { [ KP_4			]	};
    key  <KP5> { [ KP_5			]	};
    key  <KP6> { [ KP_6			]	};
    key <KPAD> { [ KP_Add		]	};

    key  <KP1> { [ KP_1			]	};
    key  <KP2> { [ KP_2			]	};
    key  <KP3> { [ KP_3			]	};
    key <KPEQ> { [ KP_Equal 		]	};

    key  <KP0> { [ KP_0			]	};
    key <KPSP> { [ KP_Separator		]	};
    key <KPDC> { [ KP_Decimal		]	};
//    key <KPEN> { [ KP_Enter		]	}; 
    // End "Keypad" section

    modifier_map Shift  { Shift_L };
    modifier_map Lock   { Caps_Lock };
    modifier_map Control{ Control_L };
    modifier_map Mod1   { Alt_L };
    modifier_map Mod2   { Mode_switch };
};
// Instructions
//
// 1. Set basic layout by:
//    setxkbmap -rules evdev -model jollasbj -layout cz
//
// 2. Set variant by:
//    setxkbmap -rules evdev -model jollasbj -layout cz -variant qwerty
//    In practice this is equivalent to:
//    setxkbmap -rules evdev -model jollasbj -layout cz_qwerty
//    However, the latter form isn't portable so always use the -variant option.
//
// 3. Set multilayout by:
//    setxkbmap -rules evdev -model jollasbj -layout "us,cz" -variant ",qwerty" -option grp:ctrl_shift_toggle
//    This sets the basic us layout active. You can switch to qwerty
//    variant of cz layout by pressing ctrl+shift.
//
// Pitfalls
//
// 1. Many to one mappings
//
// Higher level input method components don't necessarily handle many to
// one mappings correctly. They may assume that there exists only a one
// to one mapping between a hardware key and a symbol. Therefore you
// should take care not to introduce many to one mappings for keys that
// are going to be reverse mapped from a symbol to a hardware key.
//
// Currently at least the modifier keys are affected. Clients may set
// states, such as autorepeat, for hardware keys by reverse mapping a
// modifier symbol to a hardware key and then setting the state for the
// first hardware key that maps to the symbol. The correct way would be
// to modify the state of all hardware keys mapping to a given symbol.
//
// We are nice and keep the mappings one to one for clients that don't
// choose to handle many to one mappings.



default partial alphanumeric_keys
xkb_symbols "common" {
    include "pc(pc105)"
    include "jolla_vndr/sbj(common-keys)"

    // This section should not be included by any other section. It's
    // referenced only once by rule file to allow multiple layout
    // configurations.
};

partial hidden alphanumeric_keys
xkb_symbols "common-keys" {

    // These keycodes are beyond the X11 255 limit value so it would
    // only be valid for the use with SW which supports extended keycodes,
    // like xkbcommon.

    // generated from the headset, must always be in the map.
    key <I264>	{ [	XF86Phone							] };
};
default xkb_compatibility "complete" {
    include "basic"
    augment "iso9995"
    augment "mousekeys"
    augment "accessx(full)"
    augment "misc"
    augment "xfree86"
    augment "level5"
    augment "caps(caps_lock)"
};
// Use the Num Lock LED to show either
// Num Lock, Group, or Shift Lock state.

default partial xkb_compatibility "num_lock" {
    indicator "Num Lock" {
	!allowExplicit;
	whichModState= Locked;
	modifiers= NumLock;
    };
};

partial xkb_compatibility "group_lock" {
    indicator "Num Lock" {
	modifiers= None;
	groups=All-group1;
    };
};

partial xkb_compatibility "shift_lock" {
    indicator "Num Lock" {
	whichModState= Locked;
	modifiers= Shift;
    };
};
// Use the Caps Lock LED to show either
// Caps Lock, Group, or Shift Lock state.

default partial xkb_compatibility "caps_lock" {
    indicator "Caps Lock" {
	!allowExplicit;
	whichModState= Locked;
	modifiers= Lock;
    };
};

partial xkb_compatibility "group_lock" {
    indicator "Caps Lock" {
	modifiers= None;
	groups=All-group1;
    };
};

partial xkb_compatibility "shift_lock" {
    indicator "Caps Lock" {
	whichModState= Locked;
	modifiers= Shift;
    };
};
default partial xkb_compatibility "basic" {
    interpret AccessX_Enable {
	action= LockControls(controls=AccessXKeys);
    };
};

partial xkb_compatibility "full" {

    interpret AccessX_Enable {
	action= LockControls(controls=AccessXKeys);
    };

    interpret AccessX_Feedback_Enable {
	action= LockControls(controls=AccessXFeedback);
    };

    interpret RepeatKeys_Enable {
	action= LockControls(controls=RepeatKeys);
    };

    interpret SlowKeys_Enable {
	action= LockControls(controls=SlowKeys);
    };

    interpret BounceKeys_Enable {
	action= LockControls(controls=BounceKeys);
    };

    interpret StickyKeys_Enable {
	action= LockControls(controls=StickyKeys);
    };

    interpret MouseKeys_Enable {
	action= LockControls(controls=MouseKeys);
    };

    interpret MouseKeys_Accel_Enable {
	action= LockControls(controls=MouseKeysAccel);
    };

    interpret Overlay1_Enable {
	action= LockControls(controls=Overlay1);
    };

    interpret Overlay2_Enable {
	action= LockControls(controls=Overlay2);
    };

    interpret AudibleBell_Enable {
	action= LockControls(controls=AudibleBell);
    };
};
// Use the Scroll Lock LED to show either
// Scroll Lock, Group, or Shift Lock state.

default partial xkb_compatibility "scroll_lock" {
    indicator "Scroll Lock" {
	allowExplicit;
	whichModState= Locked;
	modifiers= ScrollLock;
    };
};

partial xkb_compatibility "group_lock" {
    indicator "Scroll Lock" {
	modifiers= None;
	groups=All-group1;
    };
};

partial xkb_compatibility "shift_lock" {
    indicator "Scroll Lock" {
	whichModState= Locked;
	modifiers= Shift;
    };
};

default partial xkb_compatibility "compose"  {

    virtual_modifiers   Compose;

    interpret Multi_key+Any {
	virtualModifier= Compose;
	action = LatchMods(modifiers=modMapMods);
    };

   indicator "Compose" {
       allowExplicit;
       whichModState= Latched;
       modifiers= Compose;
   };
};
default xkb_compatibility "xtest" {

    // Minimal set of symbol interpretations to provide
    // reasonable behavior for testing.
    // The X Test Suite assumes that it can set any modifier
    // by simulating a KeyPress and clear it by simulating a
    // KeyRelease.  Because of the way that XKB implements
    // locking/latching modifiers, this approach fails in
    // some cases (typically the Lock or NumLock modifiers).
    // These symbol interpretations make all modifier keys
    // just set the corresponding modifier so that xtest
    // will see the behavior it expects.

    virtual_modifiers  NumLock,AltGr;

    interpret.repeat= False;
    setMods.clearLocks= True;
    latchMods.clearLocks= True;
    latchMods.latchToLock= False;

    interpret Shift_Lock+AnyOf(Shift+Lock) {
	action= SetMods(modifiers=Shift);
    };

    interpret Num_Lock+Any {
	virtualModifier= NumLock;
	action= SetMods(modifiers=NumLock);
    };

    interpret Mode_switch {
	useModMapMods= level1;
	virtualModifier= AltGr;
	action= SetGroup(group=2);
    };

    interpret Any + Any {
	action= SetMods(modifiers=modMapMods);
    };

    group 2 = AltGr;
    group 3 = AltGr;
    group 4 = AltGr;

    indicator.allowExplicit= False;
    indicator "Caps Lock" {
	modifiers= Lock;
    };
    indicator "Num Lock" {
	modifiers= NumLock;
    };
    indicator "Shift Lock" {
	whichModState= Locked;
	modifiers= Shift;
    };
    indicator.allowExplicit= True;
};
default partial xkb_compatibility "misc" {

    virtual_modifiers  Alt,Meta,Super,Hyper,ScrollLock;

    // Interpretations for some other useful keys.

    interpret Terminate_Server {
	action = Terminate();
    };

    setMods.clearLocks= True;

    // Sets the "Alt" virtual modifier.

    interpret Alt_L+Any {
        //useModMapMods= level1;
	virtualModifier= Alt;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Alt_L {
	action = SetMods(modifiers=Alt);
    };

    interpret Alt_R+Any {
        //useModMapMods= level1;
	virtualModifier= Alt;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Alt_R {
	action = SetMods(modifiers=Alt);
    };

    // Sets the "Meta" virtual modifier.

    interpret Meta_L+Any {
        //useModMapMods= level1;
	virtualModifier= Meta;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Meta_L {
	action = SetMods(modifiers=Meta);
    };

    interpret Meta_R+Any {
        //useModMapMods= level1;
	virtualModifier= Meta;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Meta_R {
	action = SetMods(modifiers=Meta);
    };

    // Sets the "Super" virtual modifier.

    interpret Super_L+Any {
        //useModMapMods= level1;
	virtualModifier= Super;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Super_L {
	action = SetMods(modifiers=Super);
    };

    interpret Super_R+Any {
        //useModMapMods= level1;
	virtualModifier= Super;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Super_R {
	action = SetMods(modifiers=Super);
    };

    // Sets the "Hyper" virtual modifier.

    interpret Hyper_L+Any {
        //useModMapMods= level1;
	virtualModifier= Hyper;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Hyper_L {
	action = SetMods(modifiers=Hyper);
    };

    interpret Hyper_R+Any {
        //useModMapMods= level1;
	virtualModifier= Hyper;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Hyper_R {
	action = SetMods(modifiers=Hyper);
    };

    // Sets the "ScrollLock" virtual modifier and
    // makes it actually lock when pressed.  Sets
    // up a map for the scroll lock indicator.
    interpret Scroll_Lock+Any {
	virtualModifier= ScrollLock;
	action = LockMods(modifiers=modMapMods);
    };

    include "ledscroll"

    include "misc(assign_shift_left_action)"
};

partial xkb_compatibility "assign_shift_left_action" {
    // Because of the irrevertable modifier mapping in symbols/pc,
    // <LFSH> is getting bound to the Lock modifier when using
    // symbols/shift(both_capslock), creating unwanted behaviour.
    // This is a quirk, to circumvent the problem.
    interpret Shift_L {
	action = SetMods(modifiers = Shift);
    };
};
default partial xkb_compatibility "pc" {

    // Sets the "Alt" virtual modifier.

    virtual_modifiers  Alt;

    setMods.clearLocks= True;
    interpret Alt_L+Any {
	virtualModifier= Alt;
	action = SetMods(modifiers=modMapMods);
    };

    interpret Alt_R+Any {
	virtualModifier= Alt;
	action = SetMods(modifiers=modMapMods);
    };
};
// XFree86 special keysyms.

default partial xkb_compatibility "basic" {

    interpret.repeat= True;

    interpret  XF86_Switch_VT_1 {
        action = SwitchScreen(Screen=1, !SameServer);
    };
    interpret  XF86_Switch_VT_2 {
        action = SwitchScreen(Screen=2, !SameServer);
    };
    interpret  XF86_Switch_VT_3 {
        action = SwitchScreen(Screen=3, !SameServer);
    };
    interpret  XF86_Switch_VT_4 {
        action = SwitchScreen(Screen=4, !SameServer);
    };
    interpret  XF86_Switch_VT_5 {
        action = SwitchScreen(Screen=5, !SameServer);
    };
    interpret  XF86_Switch_VT_6 {
        action = SwitchScreen(Screen=6, !SameServer);
    };
    interpret  XF86_Switch_VT_7 {
        action = SwitchScreen(Screen=7, !SameServer);
    };
    interpret  XF86_Switch_VT_8 {
        action = SwitchScreen(Screen=8, !SameServer);
    };
    interpret  XF86_Switch_VT_9 {
        action = SwitchScreen(Screen=9, !SameServer);
    };
    interpret  XF86_Switch_VT_10 {
        action = SwitchScreen(Screen=10, !SameServer);
    };
    interpret  XF86_Switch_VT_11 {
        action = SwitchScreen(Screen=11, !SameServer);
    };
    interpret  XF86_Switch_VT_12 {
        action = SwitchScreen(Screen=12, !SameServer);
    };

    interpret XF86LogGrabInfo {
        action = Private(type=0x86, data="PrGrbs");
    };
    interpret XF86LogWindowTree {
        action = Private(type=0x86, data="PrWins");
    };

    interpret XF86_Next_VMode {
        action = Private(type=0x86, data="+VMode");
    };
    interpret XF86_Prev_VMode {
        action = Private(type=0x86, data="-VMode");
    };
};

partial xkb_compatibility "grab_break" {
    interpret XF86_Ungrab {
        action = Private(type=0x86, data="Ungrab");
    };
    interpret XF86_ClearGrab {
        action = Private(type=0x86, data="ClsGrb");
    };
};
partial xkb_compatibility "caps_lock" {
    // Keysym Caps_Lock locks the Lock modifier.
    // With this definition, the keysym Caps_Lock can be used without binding
    // the whole key to a real modifier.  This is essential when you don't
    // want to use Caps_Lock on the first level.
    // This should not have any compatibility issues when used together with
    // other layouts which don't utilize this capability.
    interpret Caps_Lock {
        action = LockMods(modifiers = Lock);
    };
};
// Interpretations for arrow keys and a bunch of
// other common keysyms which make it possible to
// bind "mouse" keys using xmodmap and activate or
// deactivate them from the keyboard.

default partial xkb_compatibility "mousekeys" {

    // Keypad actions.

    interpret.repeat= True;

    interpret KP_1 {
	action = MovePtr(x=-1,y= +1);
    };
    interpret KP_End {
	action = MovePtr(x=-1,y= +1);
    };

    interpret KP_2 {
	action = MovePtr(x=+0,y= +1);
    };
    interpret KP_Down {
	action = MovePtr(x=+0,y= +1);
    };

    interpret KP_3 {
	action = MovePtr(x=+1,y=+1);
    };
    interpret KP_Next {
	action = MovePtr(x=+1,y=+1);
    };

    interpret KP_4 {
	action = MovePtr(x=-1,y=+0);
    };
    interpret KP_Left {
	action = MovePtr(x=-1,y=+0);
    };

    interpret KP_6 {
	action = MovePtr(x=+1,y=+0);
    };
    interpret KP_Right {
	action = MovePtr(x=+1,y=+0);
    };

    interpret KP_7 {
	action = MovePtr(x=-1,y=-1);
    };
    interpret KP_Home {
	action = MovePtr(x=-1,y=-1);
    };

    interpret KP_8 {
	action = MovePtr(x=+0,y=-1);
    };
    interpret KP_Up {
	action = MovePtr(x=+0,y=-1);
    };

    interpret KP_9 {
	action = MovePtr(x=+1,y=-1);
    };
    interpret KP_Prior {
	action = MovePtr(x=+1,y=-1);
    };

    interpret KP_5 {
	action = PointerButton(button=default);
    };
    interpret KP_Begin {
	action = PointerButton(button=default);
    };

    interpret KP_F2 {
	action = SetPtrDflt(affect=defaultButton,button=1);
    };
    interpret KP_Divide {
	action = SetPtrDflt(affect=defaultButton,button=1);
    };

    interpret KP_F3 {
	action = SetPtrDflt(affect=defaultButton,button=2);
    };
    interpret KP_Multiply {
	action = SetPtrDflt(affect=defaultButton,button=2);
    };

    interpret KP_F4 {
	action = SetPtrDflt(affect=defaultButton,button=3);
    };
    interpret KP_Subtract {
	action = SetPtrDflt(affect=defaultButton,button=3);
    };

    interpret KP_Separator {
	action = PointerButton(button=default,count=2);
    };
    interpret KP_Add {
	action = PointerButton(button=default,count=2);
    };

    interpret KP_0 {
	action = LockPointerButton(button=default,affect=lock);
    };
    interpret KP_Insert {
	action = LockPointerButton(button=default,affect=lock);
    };

    interpret KP_Decimal {
	action = LockPointerButton(button=default,affect=unlock);
    };
    interpret KP_Delete {
	action = LockPointerButton(button=default,affect=unlock);
    };

    // Additional mappings for Solaris keypad compatibility.

    interpret F25 { // aka KP_Divide
	action = SetPtrDflt(affect=defaultButton,button=1);
    };
    interpret F26 { // aka KP_Multiply
	action = SetPtrDflt(affect=defaultButton,button=2);
    };
    interpret F27 { // aka KP_Home
	action = MovePtr(x=-1,y=-1);
    };
    interpret F29 { // aka KP_Prior
	action = MovePtr(x=+1,y=-1);
    };
    interpret F31 { // aka KP_Begin
	action = PointerButton(button=default);
    };
    interpret F33 { // aka KP_End
	action = MovePtr(x=-1,y= +1);
    };
    interpret F35 { // aka KP_Next
	action = MovePtr(x=+1,y=+1);
    };

    interpret.repeat= False;

    // New keysym actions.

    interpret Pointer_Button_Dflt {
	action= PointerButton(button=default);
    };
    interpret Pointer_Button1 {
	action= PointerButton(button=1);
    };
    interpret Pointer_Button2 {
	action= PointerButton(button=2);
    };
    interpret Pointer_Button3 {
	action= PointerButton(button=3);
    };
    interpret Pointer_DblClick_Dflt {
	action= PointerButton(button=default,count=2);
    };
    interpret Pointer_DblClick1 {
	action= PointerButton(button=1,count=2);
    };
    interpret Pointer_DblClick2 {
	action= PointerButton(button=2,count=2);
    };
    interpret Pointer_DblClick3 {
	action= PointerButton(button=3,count=2);
    };
    interpret Pointer_Drag_Dflt {
	action= LockPointerButton(button=default);
    };
    interpret Pointer_Drag1 {
	action= LockPointerButton(button=1);
    };
    interpret Pointer_Drag2 {
	action= LockPointerButton(button=2);
    };
    interpret Pointer_Drag3 {
	action= LockPointerButton(button=3);
    };

    interpret Pointer_EnableKeys {
	action= LockControls(controls=MouseKeys);
    };
    interpret Pointer_Accelerate {
	action= LockControls(controls=MouseKeysAccel);
    };
    interpret Pointer_DfltBtnNext {
	action= SetPtrDflt(affect=defaultButton,button= +1);
    };
    interpret Pointer_DfltBtnPrev {
	action= SetPtrDflt(affect=defaultButton,button= -1);
    };

    // Allow an indicator for MouseKeys.
    indicator "Mouse Keys" {
        //!allowExplicit;
	indicatorDrivesKeyboard;
	controls= MouseKeys;
    };
};
// Japanese keyboards need the Eisu and Kana Shift
// and Lock keys, which are typically bound to the
// second shift level of some other modifier key.
// These interpretations disable the default
// interpretation (which would have these keys set
// to the same modifier as the level one symbol).

default partial xkb_compatibility "japan" {

    interpret.repeat= False;

    interpret Eisu_Shift+Lock {
	action= NoAction();
    };

    interpret Eisu_toggle+Lock {
	action= NoAction();
    };

    interpret Kana_Shift+Lock {
	action= NoAction();
    };

    interpret Kana_Lock+Lock {
	action= NoAction();
    };
};

// Some Japanese keyboards have an explict
// Kana Lock key and matching LED.
partial xkb_compatibility "kana_lock" {

    virtual_modifiers  Kana_Lock;

    interpret Kana_Lock+AnyOfOrNone(all) {
	virtualModifier= Kana_Lock;
	useModMapMods=level1;
	action= LockGroup(group=+1);
    };

    indicator "Kana" {
        !allowExplicit;
	groups= All-Group1;
    };
};
// Minimal set of symbol interpretations to provide
// reasonable default behavior (Num lock, Shift lock,
// and Mode switch) and set up the automatic updating
// of common keyboard LEDs.

default xkb_compatibility "basic" {

    virtual_modifiers  NumLock,AltGr;

    interpret.repeat= False;
    setMods.clearLocks= True;
    latchMods.clearLocks= True;
    latchMods.latchToLock= True;

    interpret Shift_Lock+AnyOf(Shift+Lock) {
	action= LockMods(modifiers=Shift);
    };

//    interpret Any+Lock {
//	action= LockMods(modifiers=Lock);
//    };

    interpret Num_Lock+Any {
	virtualModifier= NumLock;
	action= LockMods(modifiers=NumLock);
    };

    interpret Mode_switch {
	useModMapMods= level1;
	virtualModifier= AltGr;
	action= SetGroup(group=2,clearLocks);
    };

    interpret Any + Any {
	action= SetMods(modifiers=modMapMods);
    };

    group 2 = AltGr;
    group 3 = AltGr;
    group 4 = AltGr;

    indicator.allowExplicit= False;
    indicator "Caps Lock" {
	whichModState= Locked;
	modifiers= Lock;
    };
    indicator "Num Lock" {
	whichModState= Locked;
	modifiers= NumLock;
    };
    indicator "Shift Lock" {
	whichModState= Locked;
	modifiers= Shift;
    };
    indicator.allowExplicit= True;
};
//
// Map the OLPC game keys to virtual modifiers.
//
// Created by Bernardo Innocenti <bernie@codewiz.org>
//

default xkb_compatibility "olpc" {
    include "complete"

    virtual_modifiers  Square,Cross,Triangle,Circle;

    interpret KP_Home+Any {
        //useModMapMods= level1;
        virtualModifier= Square;
        action = SetMods(modifiers=modMapMods);
    };

    interpret KP_Home {
        action = SetMods(modifiers=Square);
    };

    interpret KP_Next+Any {
        //useModMapMods= level1;
        virtualModifier= Cross;
        action = SetMods(modifiers=modMapMods);
    };

    interpret KP_Next {
        action = SetMods(modifiers=Cross);
    };

    interpret KP_End+Any {
        //useModMapMods= level1;
        virtualModifier= Circle;
        action = SetMods(modifiers=modMapMods);
    };

    interpret KP_End {
        action = SetMods(modifiers=Circle);
    };

    interpret KP_Prior+Any {
        //useModMapMods= level1;
        virtualModifier= Triangle;
        action = SetMods(modifiers=modMapMods);
    };

    interpret KP_Prior {
        action = SetMods(modifiers=Triangle);
    };
};
// Minimal set of symbol interpretations to provide
// reasonable default behavior (Num lock, Shift lock,
// Caps lock, and Mode switch) and set up the
// automatic updating of common keyboard LEDs.

default xkb_compatibility "basic" {

    virtual_modifiers  NumLock,AltGr;

    interpret.repeat= False;
    setMods.clearLocks= True;
    latchMods.clearLocks= True;
    latchMods.latchToLock= True;

    interpret Shift_Lock+AnyOf(Shift+Lock) {
	action= LockMods(modifiers=Shift);
    };

    interpret Any+Lock {
	action= LockMods(modifiers=Lock);
    };

    interpret Num_Lock+Any {
	virtualModifier= NumLock;
	action= LockMods(modifiers=NumLock);
    };

    interpret Mode_switch {
	useModMapMods= level1;
	virtualModifier= AltGr;
	action= SetGroup(group=+1);
    };

    interpret Any + Any {
	action= SetMods(modifiers=modMapMods);
    };

    group 2 = AltGr;
    group 3 = AltGr;
    group 4 = AltGr;

    include "ledcaps"
    include "lednum"
    indicator "Shift Lock" {
	!allowExplicit;
	whichModState= Locked;
	modifiers= Shift;
    };
};
The core protocol interpretation of keyboard modifiers does not include direct
support for multiple keyboard groups, so XKB reports the effective keyboard
group to XKB-aware clients using some of the reserved bits in the state field
of some core protocol events. This modified state field would not be interpreted
correctly by XKB-unaware clients, so XKB provides a group compatibility mapping
which remaps the keyboard group into a core modifier mask that has similar
effects, when possible.

XKB maintains three compatibility state components that are used to make
XKB-unaware clients(*) work as well as possible:
- The compatibility state which corresponds to the effective modifier and
  effective group state.
- The compatibility lookup state which is the core-protocol equivalent of the
  lookup state.
- The compatibility grab state which is the nearest core-protocol equivalent
  of the grab state.

Compatibility states are essentially the corresponding XKB states, but with
the keyboard group possibly encoded as one or more modifiers.

Modifiers that correspond to each keyboard group are described in this
group compatibility map.


----
(*) The implementation of XKB invisibly extends the X library to use the
keyboard extension if it is present. That means, clients that use library or
toolkit routines to interpret keyboard events automatically use all of XKB's
features; clients that directly interpret the state field of core-protocol
events or the keymap directly may be affected by some of the XKB differences.
Thus most clients can take all advantages without modification but it also
means that XKB state can be reported to clients that have not explicitly
requested the keyboard extension.
// Fairly complete set of symbol interpretations
// to provide reasonable default behavior.

default partial xkb_compatibility "default" {

    virtual_modifiers  LevelFive;

    interpret.repeat= False;
    setMods.clearLocks= True;
    latchMods.clearLocks= True;
    latchMods.latchToLock= True;

    interpret ISO_Level5_Shift+Any {
	useModMapMods= level1;
	virtualModifier= LevelFive;
	action= SetMods(modifiers=LevelFive);
    };

    interpret ISO_Level5_Shift {
	action= SetMods(modifiers=LevelFive);
    };

    interpret ISO_Level5_Latch+Any {
	useModMapMods= level1;
	virtualModifier= LevelFive;
	action= LatchMods(modifiers=LevelFive);
    };

    interpret ISO_Level5_Latch {
	action= LatchMods(modifiers=LevelFive);
    };

    interpret ISO_Level5_Lock+Any {
	useModMapMods= level1;
	virtualModifier= LevelFive;
	action= LockMods(modifiers=LevelFive);
    };

    interpret ISO_Level5_Lock {
	action= LockMods(modifiers=LevelFive);
    };
};

partial xkb_compatibility "level5_lock" {
    // This defines a Level5-Lock using the NumLock real modifier
    // in order to create arbitrary level-behaviour, which would
    // not be possible with the virtual modifier.
    // See also: types/level5 : EIGHT_LEVEL_LEVEL_FIVE_LOCK
    // See also: symbols/level5(lock)

    virtual_modifiers  NumLock;

    interpret ISO_Level5_Lock {
	action = LockMods(modifiers = NumLock);
    };
};
// Fairly complete set of symbol interpretations
// to provide reasonable default behavior.

default partial xkb_compatibility "default" {

    virtual_modifiers  LevelThree,AltGr;

    interpret.repeat= False;
    setMods.clearLocks= True;
    latchMods.clearLocks= True;
    latchMods.latchToLock= True;

    interpret ISO_Level2_Latch+Shift {
	useModMapMods= level1;
	action= LatchMods(modifiers=Shift);
    };

    interpret ISO_Level3_Shift+Any {
	useModMapMods= level1;
	virtualModifier= LevelThree;
	action= SetMods(modifiers=LevelThree);
    };

    interpret ISO_Level3_Shift {
	action= SetMods(modifiers=LevelThree);
    };

    interpret ISO_Level3_Latch+Any {
	useModMapMods= level1;
	virtualModifier= LevelThree;
	action= LatchMods(modifiers=LevelThree);
    };

    interpret ISO_Level3_Latch {
	action= LatchMods(modifiers=LevelThree);
    };

    interpret ISO_Level3_Lock+Any {
	useModMapMods= level1;
	virtualModifier= LevelThree;
	action= LockMods(modifiers=LevelThree);
    };

    interpret ISO_Level3_Lock {
	action= LockMods(modifiers=LevelThree);
    };

    interpret ISO_Group_Latch {
	useModMapMods= level1;
	virtualModifier= AltGr;
	action= LatchGroup(group=2);
    };

    interpret ISO_Next_Group {
	useModMapMods= level1;
	virtualModifier= AltGr;
	action= LockGroup(group=+1);
    };

    interpret ISO_Prev_Group {
	useModMapMods= level1;
	virtualModifier= AltGr;
	action= LockGroup(group=-1);
    };
    interpret ISO_First_Group {
	action= LockGroup(group=1);
    };

    interpret ISO_Last_Group {
	action= LockGroup(group=2);
    };

    indicator "Group 2" {
	!allowExplicit;
	groups= All-Group1;
    };
};
// DO NOT EDIT THIS FILE - IT WAS AUTOGENERATED BY merge.py FROM rules/*.part
//
//
//  Rules for resolving XKB components for use with XFree86
//  Copyright 1996 by Joseph Moss
//
//  2002 Modifier: Ivan Pascal      The XFree86 Project
//

// If you want non-latin layouts implicitly include the en_US layout
// uncomment lines below
//! $nonlatin = am ara ben bd bg bt by cs deva ge gh gr guj guru il \
//              in ir iku jp kan kh kr la lao lk mk mm mn mv mal olck \
//              ori pk ru scc sy syr tel th tj tam ua uz

// PC models
! $pcmodels = pc86 pc101 pc102 pc104 pc104alt pc105

// Jolla devices and keyboards
! $jollamodels = jollasbj

// Microsoft models (using MS geometry)
! $msmodels = microsoft microsoft4000 microsoft7000 microsoftpro microsoftprousb microsoftprose microsoftsurface

// Nokia devices and keyboards
! $nokiamodels = nokiasu8w nokiarx44 nokiarx51

// TypeMatrix geometries
! $tmgeometries = tm2020 tm2030PS2 tm2030USB tm2030USB-102 tm2030USB-106

// Layouts that provide further specializations for the OLPC
! $olpclayouts = af am ara br ca es et fr it kh kz in mn np ru th tr us 

! $macbooks = macbook78 macbook79
! $maclaptop = ibook powerbook macbook78 macbook79
! $applealu = applealu_ansi applealu_iso applealu_jis
! $macs = macintosh macintosh_old ibook powerbook macbook78 macbook79

! $macvendorlayouts = ch de dk fi fr gb is it latam nl no pt se us

! $azerty = be fr
! $qwertz = al cz de hr hu ro si sk 


// all layouts with 3rd and 4th groups
! $threelevellayouts = al az \
              be br bt \
              ca ch cs cz \
              de dk \
              ee es \
              fi fo fr \
              gb gr \
              hu \
              ie ir is it \
              latam \
              lk lt \
              mn mt \
              nl no \
              pl pt \
              ro \
              se sk \
              tr \
              us \
              vn \
              za

! $thinkpads = thinkpad thinkpad60 thinkpadz60

! $sun = sun_type6_jp sun_type6_usb sun_type6_euro_usb \
         sun_type6_jp_usb sun_type6_unix_usb sun_type7_jp_usb \
         sun_type7_usb sun_type7_euro_usb sun_type7_unix_usb

! $sun_jp = sun_type6_jp sun_type6_jp_usb sun_type7_jp_usb

// Sun Type_6_7 keyboards with custom layouts
! $sun_custom = ara be br ca ch cz de dk \
                ee es fi fr gb gr it jp \
                kr lt lv nl no pl pt ro \
                ru se sk tr tw ua us

! $sun_var =  sun_type6 sun_type6_suncompat sun_type6_de sun_type6_fr \
              sun_type7 sun_type7_suncompat suncompat

! $sun_compat = sun_type6 sun_type6_suncompat sun_type7_suncompat suncompat


! $inetkbds = acer_c300 acer_ferrari4k acer_laptop \
              airkey \
              apple armada azonaRF2300 \
              benqx brother \
              btc5113rf btc9000 btc9000a btc9001ah btc5090 btc9019u \
              cherryblue cherrybluea cherryblueb \
              cherrycyboard cherrycmexpert \
              chicony chicony0108 chicony0420 chicony9885 \
              compalfl90 \
              compaqeak8 compaqik7 compaqik13 compaqik18 \
              creativedw7000 \
              cymotionlinux \
              dell dellm65 inspiron dellusbmm \
              emachines ennyah_dkb1008 evdev \
              genius geniuscomfy2 \
              gyration honeywell_euroboard \
              hp250x hp5xx hp500fa hpdv5 \
              hpi6 hpxe3gc hpxe3gf hpxe4xxx hpxt1000 hpzt11xx \
              ibm_spacesaver ipaq inspiron intel \
              logiaccess logicda logicink \
              logiex110 logiclx300 \
              logiinkse logiinkseusb logiitc logiik \
              logitech_base itouch logiultrax \
              logitech_g15 \
              logidinovo logidinovoedge \
              microsoft4000 microsoft7000 microsoftinet microsoftprousb microsoftprooem microsoftprose \
              microsoftoffice microsoftmult \
              mx1998 mx2500 mx2750 \
              oretec \
              pc105 \
              presario propeller \
              qtronix \
              rapidaccess rapidaccess2 thinkpad60 \
              samsung4500 samsung4510 \
              silvercrest \
              sk1300 sk2500 sk6200 sk7100 \
              sven sven303 symplon \
              teck227 teck229 \
              toshiba_s3000 trust trustda \
              unitekkb1925 yahoo \
              apex300

! $inetmediakbds = acer_ferrari4k acer_laptop btc5090 btc9019u cherryblueb \
		cherrybluea herrycyboard chicony042 compaqik13 compaqik18 \
		armada presario dellm65 inspiron dellusbmm diamond \
		ennyah_dkb1008 genius geniuscomfy2 hpi6 hpxe3gc hpxe3gf \
		hpxt1000 hpzt11xx hpdv5 hpxe4xxx hp5xx thinkpad60 ogitech_base \
		logidinovo logidinovoedge logitech_g15 mx1998 mx2500 mx2750 \
		microsoft4000 microsoft7000 microsoftprooem microsoftmult \
		propeller samsung4500 samsung4510 sk1300 sk2500 sk7100 \
		toshiba_s3000 trust trustda cymotionlinux silvercrest \
		emachines benqx unitekkb1925 creativedw7000 compalfl90 \
		pc105 a4techKB21 a4techKBS8 a4_rfkb23 asus_laptop btc6301urf \
		dexxa dtk2000 fscaa1667g geniuskb19e geniuscomfy latitude \
		microsoftpro precision_m scorpius sp_inet targa_v811 thinkpad \
		tm2030USB-102 tm2030USB-106 trust_slimline

! $dvoraklayouts = br ca de ee es fr gb no pl se us

! model		=	keycodes
  amiga		=	amiga(de)
  ataritt	=	ataritt(de)
  empty         =       empty
 $sun_jp	=	sun(type6_jp_usb)
 $sun		=	sun(type6_usb)
  pc98		=	xfree98(pc98)
 $applealu	=	macintosh(alukbd)
  macintosh_hhk	=	macintosh(hhk)
  macintosh_old	=	macintosh(old)
 $macs   	=	macintosh
  thinkpadz60	=	xfree86(thinkpadz60)
  *		=	xfree86

! layout[1]	=	keycodes
  $azerty       =       +aliases(azerty)
  $qwertz       =       +aliases(qwertz)
  *             =       +aliases(qwerty)

! layout	=	keycodes
  $azerty       =       +aliases(azerty)
  $qwertz       =       +aliases(qwertz)
  *             =       +aliases(qwerty)

! option	=	keycodes

! model		layout	=	geometry
  thinkpad     us              =       thinkpad(us)

! model		=	geometry
  microsoftelite	=	microsoft(elite)
 $msmodels	=	microsoft(natural)
  dell101	=	dell(dell101)
  dellm65	=	dell(dellm65)
  latitude	=	dell(latitude)
  flexpro	=	keytronic(FlexPro)
  hp6000	=	hp(omnibook)
  hpmini110	=	hp(mini110)
  hpdv5		=	hp(dv5)
  omnikey101	=	northgate(omnikey101)
  sanwaskbkg3	=	sanwa(sanwaskbkg3)
 $pcmodels	=	pc(%m)
  everex	=	everex(STEPnote)
  thinkpad	=	thinkpad(intl)
  thinkpad60	=	thinkpad(60)
  thinkpadz60	=	thinkpad(60)
  apex300	=	steelseries(apex300)
 $tmgeometries	=	typematrix(%m)
  winbook	=	winbook(XP5)
  pc98		=	nec(pc98)
 $applealu	=	macintosh(%m)
 $macbooks      =       macintosh(%m)
 $macs		=	macintosh(macintosh)
  hhk		=	hhk(basic)
  kinesis	=	kinesis(model100)
 $nokiamodels	=	nokia(%m)
  sun_type6_jp          =   sun(type6jp)
  sun_type6_usb         =   sun(type6)
  sun_type6_euro_usb    =   sun(type6tuv)
  sun_type6_jp_usb      =   sun(type6jp)
  sun_type6_unix_usb    =   sun(type6unix)
  sun_type7_jp_usb      =   sun(type6jp)
  sun_type7_usb         =   sun(type7)
  sun_type7_euro_usb    =   sun(type7tuv)
  sun_type7_unix_usb    =   sun(type7unix)
  *		=       pc(pc104)

! model		layout		variant		=	symbols
  *		ben		basic		=	pc+in(ben)
  *		ben		probhat		=	pc+in(ben_probhat)
  *		dev		basic		=	pc+in(deva)
  *		dvorak		$dvoraklayouts		=	pc+%v(dvorak)
  *		dvorak		basic		=	pc+us(dvorak)
  *		dvorak		pl_basic		=	pc+pl(dvorak)
  *		dvorak		pl		=	pc+pl(dvorak_quotes)
  *		dvorak		pl_altquotes		=	pc+pl(dvorak_altquotes)
  *		dzdwi		basic		=	pc+bt(basic)
  *		fi		basic		=	pc+fi(classic)
  *		ge		azerty_tskapo		=	pc+fr(geo)
  *		guj		basic		=	pc+in(guj)
  *		gur		basic		=	pc+in(guru)
  *		ie		laptop		=	pc+ie(basic)
  *		ie		CloGaelachLaptop		=	pc+ie(CloGaelach)
  *		in		urd		=	pc+in(urd-phonetic)
  *		iu		basic		=	pc+ca(ike)
  *		lo		basic		=	pc+la(basic)
  *		kan		basic		=	pc+in(kan)
  *		mal		basic		=	pc+in(mal)
  *		mal		mlplusnum		=	pc+in(mal)
  *		ogham		basic		=	pc+ie(ogam)
  *		ogham		laptop		=	pc+ie(ogam)
  *		ogham		is434		=	pc+ie(ogam_is434)
  *		ogham		is434laptop		=	pc+ie(ogam_is434)
  *		ori		basic		=	pc+in(ori)
  *		ro		de		=	pc+ro(winkeys)
  *		ro		us		=	pc+ro(std)
  *		ro		academic		=	pc+ro(std)
  *		ro		std_comma		=	pc+ro(std)
  *		ro		comma		=	pc+ro(basic)
  *		ru		os		=	pc+ru(os_legacy)
  *		pk		urd		=	pc+pk(urd-phonetic)
  *		sapmi		basic		=	pc+no(smi)
  *		sapmi		nodeadkeys		=	pc+no(smi_nodeadkeys)
  *		sapmi		sefi		=	pc+fi(smi)
  *		sin		phonetic-static		=	pc+in(sin_phonetic)
  *		syr		basic		=	pc+sy(syc)
  *		syr		phonetic		=	pc+sy(syc_phonetic)
  *		tam		INSCRIPT		=	pc+in(tam)
  *		tam		UNI		=	pc+in(tam_unicode)
  *		tam		NUMERAL-KEYBOARD		=	pc+in(tam_keyboard_with_numerals)
  *		tam		TAB		=	pc+in(tam_TAB)
  *		tam		TSCII		=	pc+in(tam_TSCII)
  *		tel		basic		=	pc+in(tel)
  *		yu		basic		=	pc+srp(latin)
  *		yu		unicode		=	pc+srp(latinunicode)
  *		yu		yz		=	pc+srp(latinyz)
  *		yu		unicodeyz		=	pc+srp(latinunicodeyz)
  classmate	us		intl		=	pc+us(classmate-intl)
  classmate	us		alt-intl	=	pc+us(classmate-alt-intl)
  classmate	us		altgr-intl	=	pc+us(classmate-altgr-intl)
  nokiarx51	cz		qwerty		=	nokia_vndr/rx-51(cz_qwerty)
  *			$sun_custom	$sun_var	=	pc+sun_vndr/%l%(v)

! model		layout				=	symbols
  *		ar			=	pc+ara
  *		ben			=	pc+in(ben)
  *		bs			=	pc+ba
  *		cs			=	pc+rs
  *		cz_qwerty			=	pc+cz(qwerty)
  *		dev			=	pc+in(deva)
  *		dvorak			=	pc+us(dvorak)
  *		dzdwi			=	pc+bt
  *		el			=	pc+gr
  *		en_US			=	pc+latin
  *		guj			=	pc+in(guj)
  *		gur			=	pc+in(guru)
  *		iu			=	pc+ca(ike)
  *		lo			=	pc+la
  *		kan			=	pc+in(kan)
  *		mi			=	pc+mao
  *		ogham			=	pc+ie(ogam)
  *		ori			=	pc+ie(ori)
  *		sapmi			=	pc+no(smi)
  *		sr			=	pc+srp
  *		syr			=	pc+sy(syc)
  *		tel			=	pc+in(tel)
  *		tml			=	pc+in(tam)
  *		yu			=	pc+srp
  *		fr-latin9			=	pc+fr(latin9)
  *		us_intl			=	pc+us(alt-intl)
  *		ben(basic)			=	pc+in(ben)
  *		ben(probhat)			=	pc+in(ben_probhat)
  *		dev(basic)			=	pc+in(deva)
  *		dvorak($dvoraklayouts)			=	pc+%v(dvorak)
  *		dvorak(basic)			=	pc+us(dvorak)
  *		dvorak(pl_basic)			=	pc+pl(dvorak)
  *		dvorak(pl)			=	pc+pl(dvorak_quotes)
  *		dvorak(pl_altquotes)			=	pc+pl(dvorak_altquotes)
  *		dzdwi(basic)			=	pc+bt(basic)
  *		fi(basic)			=	pc+fi(classic)
  *		ge(azerty_tskapo)			=	pc+fr(geo)
  *		guj(basic)			=	pc+in(guj)
  *		gur(basic)			=	pc+in(guru)
  *		ie(laptop)			=	pc+ie(basic)
  *		ie(CloGaelachLaptop)			=	pc+ie(CloGaelach)
  *		in(urd)			=	pc+in(urd-phonetic)
  *		iu(basic)			=	pc+ca(ike)
  *		lo(basic)			=	pc+la(basic)
  *		kan(basic)			=	pc+in(kan)
  *		mal(basic)			=	pc+in(mal)
  *		mal(mlplusnum)			=	pc+in(mal)
  *		ogham(basic)			=	pc+ie(ogam)
  *		ogham(laptop)			=	pc+ie(ogam)
  *		ogham(is434)			=	pc+ie(ogam_is434)
  *		ogham(is434laptop)			=	pc+ie(ogam_is434)
  *		ori(basic)			=	pc+in(ori)
  *		ro(de)			=	pc+ro(winkeys)
  *		ro(us)			=	pc+ro(std)
  *		ro(academic)			=	pc+ro(std)
  *		ro(std_comma)			=	pc+ro(std)
  *		ro(comma)			=	pc+ro(basic)
  *		ru(os)			=	pc+ru(os_legacy)
  *		pk(urd)			=	pc+pk(urd-phonetic)
  *		sapmi(basic)			=	pc+no(smi)
  *		sapmi(nodeadkeys)			=	pc+no(smi_nodeadkeys)
  *		sapmi(sefi)			=	pc+fi(smi)
  *		sin(phonetic-static)			=	pc+in(sin_phonetic)
  *		syr(basic)			=	pc+sy(syc)
  *		syr(phonetic)			=	pc+sy(syc_phonetic)
  *		tam(INSCRIPT)			=	pc+in(tam)
  *		tam(UNI)			=	pc+in(tam_unicode)
  *		tam(NUMERAL-KEYBOARD)			=	pc+in(tam_keyboard_with_numerals)
  *		tam(TAB)			=	pc+in(tam_TAB)
  *		tam(TSCII)			=	pc+in(tam_TSCII)
  *		tel(basic)			=	pc+in(tel)
  *		yu(basic)			=	pc+srp(latin)
  *		yu(unicode)			=	pc+srp(latinunicode)
  *		yu(yz)			=	pc+srp(latinyz)
  *		yu(unicodeyz)			=	pc+srp(latinunicodeyz)
  ataritt	$nonlatin		=	xfree68_vndr/ataritt(us)+%l%(v):2
  ataritt	*			=	xfree68_vndr/ataritt(us)+%l%(v)
  amiga		$nonlatin		=	xfree68_vndr/amiga(usa1)+%l%(v):2
  amiga		*			=	xfree68_vndr/amiga(usa1)+%l%(v)
  classmate	us			=	pc+%l(classmate)
  empty         *                       =       empty(basic)
  *             empty                   =       empty(basic)
  jollasbj 	$nonlatin		=	jolla_vndr/sbj(common)+us+%l%(v):2
  jollasbj	*			=	jolla_vndr/sbj(common)+%l%(v)
 $sun		$sun_custom		=	pc+sun_vndr/%l%(v)
  pc98		nec_vndr/jp		=	nec_vndr/jp(pc98)
  macintosh_old	us			=	macintosh_vndr/us(oldmac)
  macintosh_old	en_US			=	macintosh_vndr/us(oldmac)
  macintosh_old	$macvendorlayouts	=	macintosh_vndr/us(oldmac)+macintosh_vndr/%l%(v)
  macintosh_old	$nonlatin		=	macintosh_vndr/us(oldmac)+%l%(v):2
  macintosh_old	*			=	macintosh_vndr/us(oldmac)+%l%(v)
  applealu_jis	jp			=	macintosh_vndr/apple(alukbd)+macintosh_vndr/jp(usmac)+macintosh_vndr/jp(mac):2
  applealu_jis	*			=	macintosh_vndr/apple(alukbd)+%l%(v)+macintosh_vndr/jp(mac):2
 $applealu	$macvendorlayouts	=	macintosh_vndr/apple(alukbd)+macintosh_vndr/%l%(v)
 $applealu	*			=	macintosh_vndr/apple(alukbd)+%l%(v)
 $macs		en_US			=	pc+macintosh_vndr/us(extended)
 $macs		$macvendorlayouts	=	pc+macintosh_vndr/%l%(v)
  nokiarx44	*			=	nokia_vndr/rx-44(%l)
  nokiarx51	cz(qwerty)		=	nokia_vndr/rx-51(common)+nokia_vndr/rx-51(cz_qwerty)
  nokiarx51	*			=	nokia_vndr/rx-51(common)+nokia_vndr/rx-51(%l%_v)
  nokiasu8w	*			=	nokia_vndr/su-8w(%l)
  olpc		$olpclayouts		=	olpc+%l%(m)
  olpc		*			=	olpc+%l%(v)
  olpcm		$olpclayouts		=	olpc+%l%(m)
  olpcm		*			=	olpc+%l%(v)
 $thinkpads   	br			=	pc+br(thinkpad)
  sl-c3x00	*			=	pc+sharp_vndr/sl-c3x00(basic)
  ws003sh	*			=	pc+sharp_vndr/ws003sh(basic)
  ws007sh	*			=	pc+sharp_vndr/ws007sh(basic)
  ws011sh	*			=	pc+sharp_vndr/ws011sh(basic)
  ws020sh	*			=	pc+sharp_vndr/ws020sh(basic)
  *	   	$nonlatin		=	pc+us+%l%(v):2
  *		*			=	pc+%l%(v)

! model		layout[1]	=	symbols
  *		ar		=	pc+ara%(v[1])
  *		ben		=	pc+in(ben)
  *		bs		=	pc+ba%(v[1])
  *		cs		=	pc+rs%(v[1])
  *		cz_qwerty		=	pc+cz(qwerty)
  *		dev		=	pc+in(deva)
  *		dvorak		=	pc+us(dvorak)
  *		dzdwi		=	pc+bt%(v[1])
  *		el		=	pc+gr%(v[1])
  *		en_US		=	pc+latin%(v[1])
  *		guj		=	pc+in(guj)
  *		gur		=	pc+in(guru)
  *		iu		=	pc+ca(ike)
  *		lo		=	pc+la%(v[1])
  *		kan		=	pc+in(kan)
  *		mi		=	pc+mao%(v[1])
  *		ogham		=	pc+ie(ogam)
  *		ori		=	pc+ie(ori)
  *		sapmi		=	pc+no(smi)
  *		sr		=	pc+srp%(v[1])
  *		syr		=	pc+sy(syc)
  *		tel		=	pc+in(tel)
  *		tml		=	pc+in(tam)
  *		yu		=	pc+srp%(v[1])
  *		fr-latin9		=	pc+fr(latin9)
  *		us_intl		=	pc+us(alt-intl)
  *		ben(basic)		=	pc+in(ben)
  *		ben(probhat)		=	pc+in(ben_probhat)
  *		dev(basic)		=	pc+in(deva)
  *		dvorak($dvoraklayouts)		=	pc+%v(dvorak)
  *		dvorak(basic)		=	pc+us(dvorak)
  *		dvorak(pl_basic)		=	pc+pl(dvorak)
  *		dvorak(pl)		=	pc+pl(dvorak_quotes)
  *		dvorak(pl_altquotes)		=	pc+pl(dvorak_altquotes)
  *		dzdwi(basic)		=	pc+bt(basic)
  *		fi(basic)		=	pc+fi(classic)
  *		ge(azerty_tskapo)		=	pc+fr(geo)
  *		guj(basic)		=	pc+in(guj)
  *		gur(basic)		=	pc+in(guru)
  *		ie(laptop)		=	pc+ie(basic)
  *		ie(CloGaelachLaptop)		=	pc+ie(CloGaelach)
  *		in(urd)		=	pc+in(urd-phonetic)
  *		iu(basic)		=	pc+ca(ike)
  *		lo(basic)		=	pc+la(basic)
  *		kan(basic)		=	pc+in(kan)
  *		mal(basic)		=	pc+in(mal)
  *		mal(mlplusnum)		=	pc+in(mal)
  *		ogham(basic)		=	pc+ie(ogam)
  *		ogham(laptop)		=	pc+ie(ogam)
  *		ogham(is434)		=	pc+ie(ogam_is434)
  *		ogham(is434laptop)		=	pc+ie(ogam_is434)
  *		ori(basic)		=	pc+in(ori)
  *		ro(de)		=	pc+ro(winkeys)
  *		ro(us)		=	pc+ro(std)
  *		ro(academic)		=	pc+ro(std)
  *		ro(std_comma)		=	pc+ro(std)
  *		ro(comma)		=	pc+ro(basic)
  *		ru(os)		=	pc+ru(os_legacy)
  *		pk(urd)		=	pc+pk(urd-phonetic)
  *		sapmi(basic)		=	pc+no(smi)
  *		sapmi(nodeadkeys)		=	pc+no(smi_nodeadkeys)
  *		sapmi(sefi)		=	pc+fi(smi)
  *		sin(phonetic-static)		=	pc+in(sin_phonetic)
  *		syr(basic)		=	pc+sy(syc)
  *		syr(phonetic)		=	pc+sy(syc_phonetic)
  *		tam(INSCRIPT)		=	pc+in(tam)
  *		tam(UNI)		=	pc+in(tam_unicode)
  *		tam(NUMERAL-KEYBOARD)		=	pc+in(tam_keyboard_with_numerals)
  *		tam(TAB)		=	pc+in(tam_TAB)
  *		tam(TSCII)		=	pc+in(tam_TSCII)
  *		tel(basic)		=	pc+in(tel)
  *		yu(basic)		=	pc+srp(latin)
  *		yu(unicode)		=	pc+srp(latinunicode)
  *		yu(yz)		=	pc+srp(latinyz)
  *		yu(unicodeyz)		=	pc+srp(latinunicodeyz)
  ataritt	*			=	xfree68_vndr/ataritt(us)+%l[1]%(v[1])
  amiga		*			=	xfree68_vndr/amiga(usa1)+%l[1]%(v[1])
  jollasbj	*			=	jolla_vndr/sbj(common)+%l[1]%(v[1])
 $sun		$sun_custom	=	pc+sun_vndr/%l[1]%(v[1])
  macintosh_old	us			=	macintosh_vndr/us(oldmac)
  macintosh_old	$macvendorlayouts	=	macintosh_vndr/us(oldmac)+macintosh_vndr/%l[1]%(v[1])
  macintosh_old	*			=	macintosh_vndr/us(oldmac)+%l[1]%(v[1])
  applealu_jis	us			=	macintosh_vndr/apple(alukbd)+macintosh_vndr/jp(usmac)
 $applealu	$macvendorlayouts	=	macintosh_vndr/apple(alukbd)+macintosh_vndr/%l[1]%(v[1])
 $applealu	*			=	macintosh_vndr/apple(alukbd)+%l[1]%(v[1])
 $macs		$macvendorlayouts	=	pc+macintosh_vndr/%l[1]%(v[1])
  nokiarx51	cz(qwerty)		=	nokia_vndr/rx-51(common)+nokia_vndr/rx-51(cz_qwerty)
  nokiarx51	*			=	nokia_vndr/rx-51(common)+nokia_vndr/rx-51(%l[1]%_v[1])
 $thinkpads	br			=	pc+%l[1](thinkpad)
  *		*			=	pc+%l[1]%(v[1])

! model		layout[1]	variant[1]	=	symbols
  *		ben		basic	=	pc+in(ben)
  *		ben		probhat	=	pc+in(ben_probhat)
  *		dev		basic	=	pc+in(deva)
  *		dvorak		$dvoraklayouts	=	pc+%v(dvorak)
  *		dvorak		basic	=	pc+us(dvorak)
  *		dvorak		pl_basic	=	pc+pl(dvorak)
  *		dvorak		pl	=	pc+pl(dvorak_quotes)
  *		dvorak		pl_altquotes	=	pc+pl(dvorak_altquotes)
  *		dzdwi		basic	=	pc+bt(basic)
  *		fi		basic	=	pc+fi(classic)
  *		ge		azerty_tskapo	=	pc+fr(geo)
  *		guj		basic	=	pc+in(guj)
  *		gur		basic	=	pc+in(guru)
  *		ie		laptop	=	pc+ie(basic)
  *		ie		CloGaelachLaptop	=	pc+ie(CloGaelach)
  *		in		urd	=	pc+in(urd-phonetic)
  *		iu		basic	=	pc+ca(ike)
  *		lo		basic	=	pc+la(basic)
  *		kan		basic	=	pc+in(kan)
  *		mal		basic	=	pc+in(mal)
  *		mal		mlplusnum	=	pc+in(mal)
  *		ogham		basic	=	pc+ie(ogam)
  *		ogham		laptop	=	pc+ie(ogam)
  *		ogham		is434	=	pc+ie(ogam_is434)
  *		ogham		is434laptop	=	pc+ie(ogam_is434)
  *		ori		basic	=	pc+in(ori)
  *		ro		de	=	pc+ro(winkeys)
  *		ro		us	=	pc+ro(std)
  *		ro		academic	=	pc+ro(std)
  *		ro		std_comma	=	pc+ro(std)
  *		ro		comma	=	pc+ro(basic)
  *		ru		os	=	pc+ru(os_legacy)
  *		pk		urd	=	pc+pk(urd-phonetic)
  *		sapmi		basic	=	pc+no(smi)
  *		sapmi		nodeadkeys	=	pc+no(smi_nodeadkeys)
  *		sapmi		sefi	=	pc+fi(smi)
  *		sin		phonetic-static	=	pc+in(sin_phonetic)
  *		syr		basic	=	pc+sy(syc)
  *		syr		phonetic	=	pc+sy(syc_phonetic)
  *		tam		INSCRIPT	=	pc+in(tam)
  *		tam		UNI	=	pc+in(tam_unicode)
  *		tam		NUMERAL-KEYBOARD	=	pc+in(tam_keyboard_with_numerals)
  *		tam		TAB	=	pc+in(tam_TAB)
  *		tam		TSCII	=	pc+in(tam_TSCII)
  *		tel		basic	=	pc+in(tel)
  *		yu		basic	=	pc+srp(latin)
  *		yu		unicode	=	pc+srp(latinunicode)
  *		yu		yz	=	pc+srp(latinyz)
  *		yu		unicodeyz	=	pc+srp(latinunicodeyz)

! model		layout[2]	=	symbols
  *		ar		=	+ara%(v[2]):2
  *		ben		=	+in(ben):2
  *		bs		=	+ba%(v[2]):2
  *		cs		=	+rs%(v[2]):2
  *		cz_qwerty		=	+cz(qwerty):2
  *		dev		=	+in(deva):2
  *		dvorak		=	+us(dvorak):2
  *		dzdwi		=	+bt%(v[2]):2
  *		el		=	+gr%(v[2]):2
  *		en_US		=	+latin%(v[2]):2
  *		guj		=	+in(guj):2
  *		gur		=	+in(guru):2
  *		iu		=	+ca(ike):2
  *		lo		=	+la%(v[2]):2
  *		kan		=	+in(kan):2
  *		mi		=	+mao%(v[2]):2
  *		ogham		=	+ie(ogam):2
  *		ori		=	+ie(ori):2
  *		sapmi		=	+no(smi):2
  *		sr		=	+srp%(v[2]):2
  *		syr		=	+sy(syc):2
  *		tel		=	+in(tel):2
  *		tml		=	+in(tam):2
  *		yu		=	+srp%(v[2]):2
  *		fr-latin9		=	+fr(latin9):2
  *		us_intl		=	+us(alt-intl):2
  *		ben(basic)		=	+in(ben):2
  *		ben(probhat)		=	+in(ben_probhat):2
  *		dev(basic)		=	+in(deva):2
  *		dvorak($dvoraklayouts)		=	+%v(dvorak):2
  *		dvorak(basic)		=	+us(dvorak):2
  *		dvorak(pl_basic)		=	+pl(dvorak):2
  *		dvorak(pl)		=	+pl(dvorak_quotes):2
  *		dvorak(pl_altquotes)		=	+pl(dvorak_altquotes):2
  *		dzdwi(basic)		=	+bt(basic):2
  *		fi(basic)		=	+fi(classic):2
  *		ge(azerty_tskapo)		=	+fr(geo):2
  *		guj(basic)		=	+in(guj):2
  *		gur(basic)		=	+in(guru):2
  *		ie(laptop)		=	+ie(basic):2
  *		ie(CloGaelachLaptop)		=	+ie(CloGaelach):2
  *		in(urd)		=	+in(urd-phonetic):2
  *		iu(basic)		=	+ca(ike):2
  *		lo(basic)		=	+la(basic):2
  *		kan(basic)		=	+in(kan):2
  *		mal(basic)		=	+in(mal):2
  *		mal(mlplusnum)		=	+in(mal):2
  *		ogham(basic)		=	+ie(ogam):2
  *		ogham(laptop)		=	+ie(ogam):2
  *		ogham(is434)		=	+ie(ogam_is434):2
  *		ogham(is434laptop)		=	+ie(ogam_is434):2
  *		ori(basic)		=	+in(ori):2
  *		ro(de)		=	+ro(winkeys):2
  *		ro(us)		=	+ro(std):2
  *		ro(academic)		=	+ro(std):2
  *		ro(std_comma)		=	+ro(std):2
  *		ro(comma)		=	+ro(basic):2
  *		ru(os)		=	+ru(os_legacy):2
  *		pk(urd)		=	+pk(urd-phonetic):2
  *		sapmi(basic)		=	+no(smi):2
  *		sapmi(nodeadkeys)		=	+no(smi_nodeadkeys):2
  *		sapmi(sefi)		=	+fi(smi):2
  *		sin(phonetic-static)		=	+in(sin_phonetic):2
  *		syr(basic)		=	+sy(syc):2
  *		syr(phonetic)		=	+sy(syc_phonetic):2
  *		tam(INSCRIPT)		=	+in(tam):2
  *		tam(UNI)		=	+in(tam_unicode):2
  *		tam(NUMERAL-KEYBOARD)		=	+in(tam_keyboard_with_numerals):2
  *		tam(TAB)		=	+in(tam_TAB):2
  *		tam(TSCII)		=	+in(tam_TSCII):2
  *		tel(basic)		=	+in(tel):2
  *		yu(basic)		=	+srp(latin):2
  *		yu(unicode)		=	+srp(latinunicode):2
  *		yu(yz)		=	+srp(latinyz):2
  *		yu(unicodeyz)		=	+srp(latinunicodeyz):2
  nokiarx51	cz(qwerty)	=	+nokia_vndr/rx-51(cz_qwerty):2
  nokiarx51	*		=	+nokia_vndr/rx-51(%l[2]%_v[2]):2
 $sun	$sun_custom	=	+sun_vndr/%l[2]%(v[2]):2
  *		*		=	+%l[2]%(v[2]):2

! model		layout[3]	=	symbols
  *		ar		=	+ara%(v[3]):3
  *		ben		=	+in(ben):3
  *		bs		=	+ba%(v[3]):3
  *		cs		=	+rs%(v[3]):3
  *		cz_qwerty		=	+cz(qwerty):3
  *		dev		=	+in(deva):3
  *		dvorak		=	+us(dvorak):3
  *		dzdwi		=	+bt%(v[3]):3
  *		el		=	+gr%(v[3]):3
  *		en_US		=	+latin%(v[3]):3
  *		guj		=	+in(guj):3
  *		gur		=	+in(guru):3
  *		iu		=	+ca(ike):3
  *		lo		=	+la%(v[3]):3
  *		kan		=	+in(kan):3
  *		mi		=	+mao%(v[3]):3
  *		ogham		=	+ie(ogam):3
  *		ori		=	+ie(ori):3
  *		sapmi		=	+no(smi):3
  *		sr		=	+srp%(v[3]):3
  *		syr		=	+sy(syc):3
  *		tel		=	+in(tel):3
  *		tml		=	+in(tam):3
  *		yu		=	+srp%(v[3]):3
  *		fr-latin9		=	+fr(latin9):3
  *		us_intl		=	+us(alt-intl):3
  *		ben(basic)		=	+in(ben):3
  *		ben(probhat)		=	+in(ben_probhat):3
  *		dev(basic)		=	+in(deva):3
  *		dvorak($dvoraklayouts)		=	+%v(dvorak):3
  *		dvorak(basic)		=	+us(dvorak):3
  *		dvorak(pl_basic)		=	+pl(dvorak):3
  *		dvorak(pl)		=	+pl(dvorak_quotes):3
  *		dvorak(pl_altquotes)		=	+pl(dvorak_altquotes):3
  *		dzdwi(basic)		=	+bt(basic):3
  *		fi(basic)		=	+fi(classic):3
  *		ge(azerty_tskapo)		=	+fr(geo):3
  *		guj(basic)		=	+in(guj):3
  *		gur(basic)		=	+in(guru):3
  *		ie(laptop)		=	+ie(basic):3
  *		ie(CloGaelachLaptop)		=	+ie(CloGaelach):3
  *		in(urd)		=	+in(urd-phonetic):3
  *		iu(basic)		=	+ca(ike):3
  *		lo(basic)		=	+la(basic):3
  *		kan(basic)		=	+in(kan):3
  *		mal(basic)		=	+in(mal):3
  *		mal(mlplusnum)		=	+in(mal):3
  *		ogham(basic)		=	+ie(ogam):3
  *		ogham(laptop)		=	+ie(ogam):3
  *		ogham(is434)		=	+ie(ogam_is434):3
  *		ogham(is434laptop)		=	+ie(ogam_is434):3
  *		ori(basic)		=	+in(ori):3
  *		ro(de)		=	+ro(winkeys):3
  *		ro(us)		=	+ro(std):3
  *		ro(academic)		=	+ro(std):3
  *		ro(std_comma)		=	+ro(std):3
  *		ro(comma)		=	+ro(basic):3
  *		ru(os)		=	+ru(os_legacy):3
  *		pk(urd)		=	+pk(urd-phonetic):3
  *		sapmi(basic)		=	+no(smi):3
  *		sapmi(nodeadkeys)		=	+no(smi_nodeadkeys):3
  *		sapmi(sefi)		=	+fi(smi):3
  *		sin(phonetic-static)		=	+in(sin_phonetic):3
  *		syr(basic)		=	+sy(syc):3
  *		syr(phonetic)		=	+sy(syc_phonetic):3
  *		tam(INSCRIPT)		=	+in(tam):3
  *		tam(UNI)		=	+in(tam_unicode):3
  *		tam(NUMERAL-KEYBOARD)		=	+in(tam_keyboard_with_numerals):3
  *		tam(TAB)		=	+in(tam_TAB):3
  *		tam(TSCII)		=	+in(tam_TSCII):3
  *		tel(basic)		=	+in(tel):3
  *		yu(basic)		=	+srp(latin):3
  *		yu(unicode)		=	+srp(latinunicode):3
  *		yu(yz)		=	+srp(latinyz):3
  *		yu(unicodeyz)		=	+srp(latinunicodeyz):3
  nokiarx51	cz(qwerty)	=	+nokia_vndr/rx-51(cz_qwerty):3
  nokiarx51	*		=	+nokia_vndr/rx-51(%l[3]%_v[3]):3
 $sun	$sun_custom	=	+sun_vndr/%l[3]%(v[3]):3
  *		*		=	+%l[3]%(v[3]):3

! model		layout[4]	=	symbols
  *		ar		=	+ara%(v[4]):4
  *		ben		=	+in(ben):4
  *		bs		=	+ba%(v[4]):4
  *		cs		=	+rs%(v[4]):4
  *		cz_qwerty		=	+cz(qwerty):4
  *		dev		=	+in(deva):4
  *		dvorak		=	+us(dvorak):4
  *		dzdwi		=	+bt%(v[4]):4
  *		el		=	+gr%(v[4]):4
  *		en_US		=	+latin%(v[4]):4
  *		guj		=	+in(guj):4
  *		gur		=	+in(guru):4
  *		iu		=	+ca(ike):4
  *		lo		=	+la%(v[4]):4
  *		kan		=	+in(kan):4
  *		mi		=	+mao%(v[4]):4
  *		ogham		=	+ie(ogam):4
  *		ori		=	+ie(ori):4
  *		sapmi		=	+no(smi):4
  *		sr		=	+srp%(v[4]):4
  *		syr		=	+sy(syc):4
  *		tel		=	+in(tel):4
  *		tml		=	+in(tam):4
  *		yu		=	+srp%(v[4]):4
  *		fr-latin9		=	+fr(latin9):4
  *		us_intl		=	+us(alt-intl):4
  *		ben(basic)		=	+in(ben):4
  *		ben(probhat)		=	+in(ben_probhat):4
  *		dev(basic)		=	+in(deva):4
  *		dvorak($dvoraklayouts)		=	+%v(dvorak):4
  *		dvorak(basic)		=	+us(dvorak):4
  *		dvorak(pl_basic)		=	+pl(dvorak):4
  *		dvorak(pl)		=	+pl(dvorak_quotes):4
  *		dvorak(pl_altquotes)		=	+pl(dvorak_altquotes):4
  *		dzdwi(basic)		=	+bt(basic):4
  *		fi(basic)		=	+fi(classic):4
  *		ge(azerty_tskapo)		=	+fr(geo):4
  *		guj(basic)		=	+in(guj):4
  *		gur(basic)		=	+in(guru):4
  *		ie(laptop)		=	+ie(basic):4
  *		ie(CloGaelachLaptop)		=	+ie(CloGaelach):4
  *		in(urd)		=	+in(urd-phonetic):4
  *		iu(basic)		=	+ca(ike):4
  *		lo(basic)		=	+la(basic):4
  *		kan(basic)		=	+in(kan):4
  *		mal(basic)		=	+in(mal):4
  *		mal(mlplusnum)		=	+in(mal):4
  *		ogham(basic)		=	+ie(ogam):4
  *		ogham(laptop)		=	+ie(ogam):4
  *		ogham(is434)		=	+ie(ogam_is434):4
  *		ogham(is434laptop)		=	+ie(ogam_is434):4
  *		ori(basic)		=	+in(ori):4
  *		ro(de)		=	+ro(winkeys):4
  *		ro(us)		=	+ro(std):4
  *		ro(academic)		=	+ro(std):4
  *		ro(std_comma)		=	+ro(std):4
  *		ro(comma)		=	+ro(basic):4
  *		ru(os)		=	+ru(os_legacy):4
  *		pk(urd)		=	+pk(urd-phonetic):4
  *		sapmi(basic)		=	+no(smi):4
  *		sapmi(nodeadkeys)		=	+no(smi_nodeadkeys):4
  *		sapmi(sefi)		=	+fi(smi):4
  *		sin(phonetic-static)		=	+in(sin_phonetic):4
  *		syr(basic)		=	+sy(syc):4
  *		syr(phonetic)		=	+sy(syc_phonetic):4
  *		tam(INSCRIPT)		=	+in(tam):4
  *		tam(UNI)		=	+in(tam_unicode):4
  *		tam(NUMERAL-KEYBOARD)		=	+in(tam_keyboard_with_numerals):4
  *		tam(TAB)		=	+in(tam_TAB):4
  *		tam(TSCII)		=	+in(tam_TSCII):4
  *		tel(basic)		=	+in(tel):4
  *		yu(basic)		=	+srp(latin):4
  *		yu(unicode)		=	+srp(latinunicode):4
  *		yu(yz)		=	+srp(latinyz):4
  *		yu(unicodeyz)		=	+srp(latinunicodeyz):4
  nokiarx51	cz(qwerty)	=	+nokia_vndr/rx-51(cz_qwerty):4
  nokiarx51	*		=	+nokia_vndr/rx-51(%l[4]%_v[4]):4
 $sun	$sun_custom	=	+sun_vndr/%l[4]%(v[4]):4
  *		*		=	+%l[4]%(v[4]):4

! model		layout[2]	variant[2]	=	symbols
  *		ben		basic	=	+in(ben):2
  *		ben		probhat	=	+in(ben_probhat):2
  *		dev		basic	=	+in(deva):2
  *		dvorak		$dvoraklayouts	=	+%v(dvorak):2
  *		dvorak		basic	=	+us(dvorak):2
  *		dvorak		pl_basic	=	+pl(dvorak):2
  *		dvorak		pl	=	+pl(dvorak_quotes):2
  *		dvorak		pl_altquotes	=	+pl(dvorak_altquotes):2
  *		dzdwi		basic	=	+bt(basic):2
  *		fi		basic	=	+fi(classic):2
  *		ge		azerty_tskapo	=	+fr(geo):2
  *		guj		basic	=	+in(guj):2
  *		gur		basic	=	+in(guru):2
  *		ie		laptop	=	+ie(basic):2
  *		ie		CloGaelachLaptop	=	+ie(CloGaelach):2
  *		in		urd	=	+in(urd-phonetic):2
  *		iu		basic	=	+ca(ike):2
  *		lo		basic	=	+la(basic):2
  *		kan		basic	=	+in(kan):2
  *		mal		basic	=	+in(mal):2
  *		mal		mlplusnum	=	+in(mal):2
  *		ogham		basic	=	+ie(ogam):2
  *		ogham		laptop	=	+ie(ogam):2
  *		ogham		is434	=	+ie(ogam_is434):2
  *		ogham		is434laptop	=	+ie(ogam_is434):2
  *		ori		basic	=	+in(ori):2
  *		ro		de	=	+ro(winkeys):2
  *		ro		us	=	+ro(std):2
  *		ro		academic	=	+ro(std):2
  *		ro		std_comma	=	+ro(std):2
  *		ro		comma	=	+ro(basic):2
  *		ru		os	=	+ru(os_legacy):2
  *		pk		urd	=	+pk(urd-phonetic):2
  *		sapmi		basic	=	+no(smi):2
  *		sapmi		nodeadkeys	=	+no(smi_nodeadkeys):2
  *		sapmi		sefi	=	+fi(smi):2
  *		sin		phonetic-static	=	+in(sin_phonetic):2
  *		syr		basic	=	+sy(syc):2
  *		syr		phonetic	=	+sy(syc_phonetic):2
  *		tam		INSCRIPT	=	+in(tam):2
  *		tam		UNI	=	+in(tam_unicode):2
  *		tam		NUMERAL-KEYBOARD	=	+in(tam_keyboard_with_numerals):2
  *		tam		TAB	=	+in(tam_TAB):2
  *		tam		TSCII	=	+in(tam_TSCII):2
  *		tel		basic	=	+in(tel):2
  *		yu		basic	=	+srp(latin):2
  *		yu		unicode	=	+srp(latinunicode):2
  *		yu		yz	=	+srp(latinyz):2
  *		yu		unicodeyz	=	+srp(latinunicodeyz):2

! model		layout[3]	variant[3]	=	symbols
  *		ben		basic	=	+in(ben):3
  *		ben		probhat	=	+in(ben_probhat):3
  *		dev		basic	=	+in(deva):3
  *		dvorak		$dvoraklayouts	=	+%v(dvorak):3
  *		dvorak		basic	=	+us(dvorak):3
  *		dvorak		pl_basic	=	+pl(dvorak):3
  *		dvorak		pl	=	+pl(dvorak_quotes):3
  *		dvorak		pl_altquotes	=	+pl(dvorak_altquotes):3
  *		dzdwi		basic	=	+bt(basic):3
  *		fi		basic	=	+fi(classic):3
  *		ge		azerty_tskapo	=	+fr(geo):3
  *		guj		basic	=	+in(guj):3
  *		gur		basic	=	+in(guru):3
  *		ie		laptop	=	+ie(basic):3
  *		ie		CloGaelachLaptop	=	+ie(CloGaelach):3
  *		in		urd	=	+in(urd-phonetic):3
  *		iu		basic	=	+ca(ike):3
  *		lo		basic	=	+la(basic):3
  *		kan		basic	=	+in(kan):3
  *		mal		basic	=	+in(mal):3
  *		mal		mlplusnum	=	+in(mal):3
  *		ogham		basic	=	+ie(ogam):3
  *		ogham		laptop	=	+ie(ogam):3
  *		ogham		is434	=	+ie(ogam_is434):3
  *		ogham		is434laptop	=	+ie(ogam_is434):3
  *		ori		basic	=	+in(ori):3
  *		ro		de	=	+ro(winkeys):3
  *		ro		us	=	+ro(std):3
  *		ro		academic	=	+ro(std):3
  *		ro		std_comma	=	+ro(std):3
  *		ro		comma	=	+ro(basic):3
  *		ru		os	=	+ru(os_legacy):3
  *		pk		urd	=	+pk(urd-phonetic):3
  *		sapmi		basic	=	+no(smi):3
  *		sapmi		nodeadkeys	=	+no(smi_nodeadkeys):3
  *		sapmi		sefi	=	+fi(smi):3
  *		sin		phonetic-static	=	+in(sin_phonetic):3
  *		syr		basic	=	+sy(syc):3
  *		syr		phonetic	=	+sy(syc_phonetic):3
  *		tam		INSCRIPT	=	+in(tam):3
  *		tam		UNI	=	+in(tam_unicode):3
  *		tam		NUMERAL-KEYBOARD	=	+in(tam_keyboard_with_numerals):3
  *		tam		TAB	=	+in(tam_TAB):3
  *		tam		TSCII	=	+in(tam_TSCII):3
  *		tel		basic	=	+in(tel):3
  *		yu		basic	=	+srp(latin):3
  *		yu		unicode	=	+srp(latinunicode):3
  *		yu		yz	=	+srp(latinyz):3
  *		yu		unicodeyz	=	+srp(latinunicodeyz):3

! model		layout[4]	variant[4]	=	symbols
  *		ben		basic	=	+in(ben):4
  *		ben		probhat	=	+in(ben_probhat):4
  *		dev		basic	=	+in(deva):4
  *		dvorak		$dvoraklayouts	=	+%v(dvorak):4
  *		dvorak		basic	=	+us(dvorak):4
  *		dvorak		pl_basic	=	+pl(dvorak):4
  *		dvorak		pl	=	+pl(dvorak_quotes):4
  *		dvorak		pl_altquotes	=	+pl(dvorak_altquotes):4
  *		dzdwi		basic	=	+bt(basic):4
  *		fi		basic	=	+fi(classic):4
  *		ge		azerty_tskapo	=	+fr(geo):4
  *		guj		basic	=	+in(guj):4
  *		gur		basic	=	+in(guru):4
  *		ie		laptop	=	+ie(basic):4
  *		ie		CloGaelachLaptop	=	+ie(CloGaelach):4
  *		in		urd	=	+in(urd-phonetic):4
  *		iu		basic	=	+ca(ike):4
  *		lo		basic	=	+la(basic):4
  *		kan		basic	=	+in(kan):4
  *		mal		basic	=	+in(mal):4
  *		mal		mlplusnum	=	+in(mal):4
  *		ogham		basic	=	+ie(ogam):4
  *		ogham		laptop	=	+ie(ogam):4
  *		ogham		is434	=	+ie(ogam_is434):4
  *		ogham		is434laptop	=	+ie(ogam_is434):4
  *		ori		basic	=	+in(ori):4
  *		ro		de	=	+ro(winkeys):4
  *		ro		us	=	+ro(std):4
  *		ro		academic	=	+ro(std):4
  *		ro		std_comma	=	+ro(std):4
  *		ro		comma	=	+ro(basic):4
  *		ru		os	=	+ru(os_legacy):4
  *		pk		urd	=	+pk(urd-phonetic):4
  *		sapmi		basic	=	+no(smi):4
  *		sapmi		nodeadkeys	=	+no(smi_nodeadkeys):4
  *		sapmi		sefi	=	+fi(smi):4
  *		sin		phonetic-static	=	+in(sin_phonetic):4
  *		syr		basic	=	+sy(syc):4
  *		syr		phonetic	=	+sy(syc_phonetic):4
  *		tam		INSCRIPT	=	+in(tam):4
  *		tam		UNI	=	+in(tam_unicode):4
  *		tam		NUMERAL-KEYBOARD	=	+in(tam_keyboard_with_numerals):4
  *		tam		TAB	=	+in(tam_TAB):4
  *		tam		TSCII	=	+in(tam_TSCII):4
  *		tel		basic	=	+in(tel):4
  *		yu		basic	=	+srp(latin):4
  *		yu		unicode	=	+srp(latinunicode):4
  *		yu		yz	=	+srp(latinyz):4
  *		yu		unicodeyz	=	+srp(latinunicodeyz):4

! model		=	symbols
  a4techKB21    =       +inet(media_nav_common)
  a4techKBS8    =       +inet(media_nav_acpi_common)
  a4_rfkb23     =       +inet(media_nav_acpi_common)
  asus_laptop   =       +inet(media_common)
  acer_tm_800   =       +inet(acer_laptop)
  benqx730      =       +inet(benqx)
  benqx800      =       +inet(benqx)
  btc5126t      =       +inet(nav_acpi_common)
  btc9116u      =       +inet(btc9019u)
  btc6301urf    =       +inet(media_nav_acpi_common)
  chromebook    =       +inet(chromebook)
  dellsk8125    =       +inet(dell)
  dellsk8135    =       +inet(dell)
  cherrybunlim  =       +inet(nav_common)
  dexxa         =       +inet(media_nav_common)
  dtk2000       =       +inet(media_nav_acpi_common)
  fscaa1667g    =       +inet(media_nav_common)
  geniuskb19e   =       +inet(media_nav_acpi_common)
  geniuscomfy   =       +inet(media_nav_acpi_common)
  geniuskkb2050hs =     +inet(dellusbmm)
  hpnx9020      =       +inet(hpi6)
  latitude      =       +inet(media_common)
  logicd        =       +inet(logitech_base)
  logicd_it     =       +inet(logitech_base)
  logicd_nav    =       +inet(logitech_base)
  logicd_opt    =       +inet(logitech_base)
  logiultrax    =       +inet(logitech_base)
  logiclx300    =       +inet(logiex110)
  logii350      =       +inet(logiex110)
  logimel       =       +inet(logiex110)
  logicdit      =       +inet(logicd)
  logicdo       =       +inet(logicd)
  logicdp       =       +inet(logicd)
  logicdpa      =       +inet(logicda)
  logiciink     =       +inet(logicink)
  ltcd          =       +inet(logicda)
  microsoftccurve2k =   +inet(microsoftprooem)
  microsoftpro  =       +inet(media_nav_acpi_common)
  precision_m   =       +inet(media_nav_common)
  scorpius      =       +inet(media_nav_acpi_common)
  sp_inet       =       +inet(media_nav_acpi_common)
  targa_v811    =       +inet(media_nav_acpi_common)
  thinkpad      =       +inet(media_nav_common)
  thinkpadz60   =       +inet(thinkpad60)
  tm2030USB-102 =       +inet(media_nav_acpi_common)
  tm2030USB-106 =       +inet(media_nav_acpi_common)
  trust_slimline =      +inet(media_nav_acpi_common)
  vsonku306     =       +inet(microsoftprooem)
  $inetkbds     =       +inet(%m)
  $maclaptop    =       +inet(apple)+level3(enter_switch)
  $applealu     =       +inet(apple)
  $macs	        =       +inet(apple)
  sun_type7_jp_usb	=	+sun_vndr/solaris(defaults_type7jp)
  $sun			=		+sun_vndr/solaris(defaults)

! model		layout		=	symbols
 $inetmediakbds	jp	=	+jp(henkan)

! layout	variant		=	compat
  de		neo			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		adnw			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		koy			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone_eszett_home			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwertz			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwerty			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  jp        $sun_compat =   complete+japan(kana_lock)
  de		neo			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		adnw			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		koy			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone_eszett_home			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwertz			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwerty			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  jp        $sun_compat =   complete+japan(kana_lock)

! layout[1]	variant[1]	=	compat
  de		neo			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		adnw			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		koy			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone_eszett_home			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwertz			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwerty			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  jp       $sun_compat =   complete+japan(kana_lock)
  de		neo			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		adnw			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		koy			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone_eszett_home			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwertz			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwerty			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  jp       $sun_compat =   complete+japan(kana_lock)

! layout[2]	variant[2]	=	compat
  de		neo			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		adnw			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		koy			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		bone			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		bone_eszett_home			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		neo_qwertz			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		neo_qwerty			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  jp       $sun_compat  =   +complete+japan(kana_lock):2
  de		neo			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		adnw			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		koy			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		bone			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		bone_eszett_home			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		neo_qwertz			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		neo_qwerty			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  jp       $sun_compat  =   +complete+japan(kana_lock):2

! layout[3]	variant[3]	=	compat
  de		neo			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		adnw			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		koy			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		bone			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		bone_eszett_home			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		neo_qwertz			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		neo_qwerty			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  jp       $sun_compat  =   +complete+japan(kana_lock):3
  de		neo			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		adnw			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		koy			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		bone			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		bone_eszett_home			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		neo_qwertz			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		neo_qwerty			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  jp       $sun_compat  =   +complete+japan(kana_lock):3

! layout[4]	variant[4]	=	compat
  de		neo			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		adnw			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		koy			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		bone			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		bone_eszett_home			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		neo_qwertz			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		neo_qwerty			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  jp       $sun_compat  =   +complete+japan(kana_lock):4
  de		neo			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		adnw			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		koy			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		bone			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		bone_eszett_home			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		neo_qwertz			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		neo_qwerty			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  jp       $sun_compat  =   +complete+japan(kana_lock):4

! model		layout		=	compat
  pc98		nec_vndr/jp	=	pc98(basic)
  *		jp		=	complete+japan
  olpc          *               =       olpc
  olpcm         *               =       olpc
  *		*		=	complete

! model		layout[1]	=	compat
  *		*		=	complete

! model		=	types
  $macs		=	complete+numpad(mac)
  $applealu	=	complete+numpad(mac)
  $nokiamodels	=	complete+nokia
  *		=	complete

! layout	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle)
  *			misc:typo 	= +typo(base)
  *			misc:apl	= +apl(level3)

! layout[1]	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle):1
  *			misc:typo 	= +typo(base):1
  *			misc:apl	= +apl(level3):1

! layout[2]	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle):2
  *			misc:typo 	= +typo(base):2
  *			misc:apl	= +apl(level3):2

! layout[3]	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle):3
  *			misc:typo 	= +typo(base):3
  *			misc:apl	= +apl(level3):3

! layout[4]	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle):4
  *			misc:typo 	= +typo(base):4
  *			misc:apl	= +apl(level3):4

! option	=	symbols
  grp:shift_toggle	=	+group(shifts_toggle)
  grp:shift_toggle	=	+group(shifts_toggle)
  altwin:menu		=	+altwin(menu)
  altwin:menu_win	=	+altwin(menu_win)
  altwin:meta_alt	=	+altwin(meta_alt)
  altwin:alt_win	=	+altwin(alt_win)
  altwin:ctrl_win	=	+altwin(ctrl_win)
  altwin:ctrl_alt_win	=	+altwin(ctrl_alt_win)
  altwin:meta_win	=	+altwin(meta_win)
  altwin:left_meta_win	=	+altwin(left_meta_win)
  altwin:hyper_win	=	+altwin(hyper_win)
  altwin:alt_super_win	=	+altwin(alt_super_win)
  altwin:swap_lalt_lwin	=	+altwin(swap_lalt_lwin)
  altwin:swap_alt_win	=	+altwin(swap_alt_win)
  altwin:prtsc_rwin	=	+altwin(prtsc_rwin)
  grab:debug		=	+srvr_ctrl(grab_debug)
  grp:switch		=	+group(switch)
  grp:lswitch		=	+group(lswitch)
  grp:win_switch	=	+group(win_switch)
  grp:lwin_switch	=	+group(lwin_switch)
  grp:rwin_switch	=	+group(rwin_switch)
  grp:menu_switch	=	+group(menu_switch)
  grp:toggle		=	+group(toggle)
  grp:shifts_toggle	=	+group(shifts_toggle)
  grp:ctrls_toggle	=	+group(ctrls_toggle)
  grp:alts_toggle	=	+group(alts_toggle)
  grp:caps_toggle	=	+capslock(grouplock)
  grp:caps_switch       =       +capslock(groupshift)
  grp:shift_caps_toggle	=	+group(shift_caps_toggle)
  grp:shift_caps_switch	=	+group(shift_caps_switch)
  grp:win_space_toggle	=	+group(win_space_toggle)
  grp:win_menu_switch	=	+group(win_menu_switch)
  grp:alt_caps_toggle   =       +group(alt_caps_toggle)
  grp:alt_space_toggle	=	+group(alt_space_toggle)
  grp:menu_toggle	=	+group(menu_toggle)
  grp:lwin_toggle	=	+group(lwin_toggle)
  grp:rwin_toggle	=	+group(rwin_toggle)
  grp:lshift_toggle	=	+group(lshift_toggle)
  grp:rshift_toggle	=	+group(rshift_toggle)
  grp:rctrl_switch	=	+group(rctrl_switch)
  grp:lctrl_toggle	=	+group(lctrl_toggle)
  grp:rctrl_toggle	=	+group(rctrl_toggle)
  grp:lalt_toggle	=	+group(lalt_toggle)
  grp:sclk_toggle	=	+group(sclk_toggle)
  grp:lctrl_rctrl_switch	=	+group(lctrl_rctrl_switch)
  grp:lctrl_lwin_rctrl_menu	=	+group(lctrl_lwin_rctrl_menu)
  grp:lctrl_lalt_toggle	=	+group(lctrl_lalt_toggle)
  grp:rctrl_ralt_toggle	=	+group(rctrl_ralt_toggle)
  grp:ctrl_alt_toggle	=	+group(ctrl_alt_toggle)
  grp:ctrl_alt_toggle_bidir	=	+group(ctrl_alt_toggle_bidir)
  grp:lctrl_lshift_toggle	=	+group(lctrl_lshift_toggle)
  grp:rctrl_rshift_toggle	=	+group(rctrl_rshift_toggle)
  grp:ctrl_shift_toggle	=	+group(ctrl_shift_toggle)
  grp:ctrl_shift_toggle_bidir	=	+group(ctrl_shift_toggle_bidir)
  grp:lalt_lshift_toggle	=	+group(lalt_lshift_toggle)
  grp:ralt_rshift_toggle	=	+group(ralt_rshift_toggle)
  grp:alt_shift_toggle	=	+group(alt_shift_toggle)
  grp:alt_shift_toggle_bidir	=	+group(alt_shift_toggle_bidir)
  grp:lctrl_lwin_toggle	=	+group(lctrl_lwin_toggle)
  lv3:switch		=	+level3(switch)
  lv3:ralt_switch	=	+level3(ralt_switch)
  lv3:ralt_switch_multikey	=	+level3(ralt_switch_multikey)
  lv3:ralt_alt		=	+level3(ralt_alt)
  lv3:lalt_switch	=	+level3(lalt_switch)
  lv3:alt_switch	=	+level3(alt_switch)
  lv3:menu_switch	=	+level3(menu_switch)
  lv3:win_switch	=	+level3(win_switch)
  lv3:lwin_switch	=	+level3(lwin_switch)
  lv3:rwin_switch	=	+level3(rwin_switch)
  lv3:enter_switch	=	+level3(enter_switch)
  lv3:4_switch_isolated	=	+level3(4_switch_isolated)
  lv3:9_switch_isolated	=	+level3(9_switch_isolated)
  caps:capslock		=	+capslock(capslock)
  caps:numlock		=	+capslock(numlock)
  caps:shiftlock	=	+capslock(shiftlock)
  caps:swapescape	=	+capslock(swapescape)
  caps:escape		=	+capslock(escape)
  caps:escape_shifted_capslock	=	+capslock(escape_shifted_capslock)
  caps:backspace	=	+capslock(backspace)
  caps:super		=	+capslock(super)
  caps:hyper		=	+capslock(hyper)
  caps:menu		=	+capslock(menu)
  caps:none		=	+capslock(none)
  caps:ctrl_modifier	=	+capslock(ctrl_modifier)
  ctrl:nocaps		=	+ctrl(nocaps)
  ctrl:lctrl_meta	=	+ctrl(lctrl_meta)
  ctrl:swapcaps		=	+ctrl(swapcaps)
  ctrl:swapcaps_hyper	=	+ctrl(swapcaps_hyper)
  ctrl:swapcaps_and_switch_layout	=	+ctrl(swapcaps_and_switch_layout)
  ctrl:ac_ctrl		=	+ctrl(ac_ctrl)
  ctrl:aa_ctrl		=	+ctrl(aa_ctrl)
  ctrl:rctrl_ralt	=	+ctrl(rctrl_ralt)
  ctrl:menu_rctrl	=	+ctrl(menu_rctrl)
  ctrl:ralt_rctrl	=	+ctrl(ralt_rctrl)
  ctrl:swap_lalt_lctl	=	+ctrl(swap_lalt_lctl)
  ctrl:swap_lwin_lctl	=	+ctrl(swap_lwin_lctl)
  ctrl:swap_rwin_rctl	=	+ctrl(swap_rwin_rctl)
  ctrl:swap_lalt_lctl_lwin  =	+ctrl(swap_lalt_lctl_lwin)
  compose:ralt		=	+compose(ralt)
  compose:lwin		=	+compose(lwin)
  compose:lwin-altgr	=	+compose(lwin-altgr)
  compose:rwin		=	+compose(rwin)
  compose:rwin-altgr	=	+compose(rwin-altgr)
  compose:menu		=	+compose(menu)
  compose:menu-altgr	=	+compose(menu-altgr)
  compose:lctrl		=	+compose(lctrl)
  compose:lctrl-altgr	=	+compose(lctrl-altgr)
  compose:rctrl		=	+compose(rctrl)
  compose:rctrl-altgr	=	+compose(rctrl-altgr)
  compose:caps		=	+compose(caps)
  compose:caps-altgr	=	+compose(caps-altgr)
  compose:102		=	+compose(102)
  compose:102-altgr	=	+compose(102-altgr)
  compose:paus		=	+compose(paus)
  compose:prsc		=	+compose(prsc)
  compose:sclk		=	+compose(sclk)
  srvrkeys:none		=	+srvr_ctrl(no_srvr_keys)
  eurosign:e		=	+eurosign(e)
  eurosign:2		=	+eurosign(2)
  eurosign:4		=	+eurosign(4)
  eurosign:5		=	+eurosign(5)
  rupeesign:4           =       +rupeesign(4)
  keypad:oss            =       +keypad(oss)
  keypad:legacy         =	+keypad(legacy)
  keypad:legacy_wang    =	+keypad(legacy_wang)
  keypad:oss_wang       =	+keypad(oss_wang)
  keypad:future         =	+keypad(future)
  keypad:future_wang    =	+keypad(future_wang)
  keypad:hex            =	+keypad(ops)+keypad(hex)
  keypad:atm            =	+keypad(ops)+keypad(hex)+keypad(atm)  
  nbsp:none             =	+nbsp(none)
  nbsp:level2           =	+nbsp(level2)
  nbsp:level3           =	+nbsp(level3)
  nbsp:level3s          =	+nbsp(level3s)
  nbsp:level3n          =	+nbsp(level3n)
  nbsp:level4           =	+nbsp(level4)
  nbsp:level4n          =	+nbsp(level4n)
  nbsp:level4nl         =	+nbsp(level4nl)
  nbsp:zwnj2            =	+nbsp(zwnj2)
  nbsp:zwnj2zwj3        =	+nbsp(zwnj2zwj3)
  nbsp:zwnj2zwj3nb4     =	+nbsp(zwnj2zwj3nb4)
  nbsp:zwnj2nb3         =	+nbsp(zwnj2nb3)
  nbsp:zwnj2nb3s        =	+nbsp(zwnj2nb3s)
  nbsp:zwnj2nb3zwj4     =	+nbsp(zwnj2nb3zwj4)
  nbsp:zwnj2nb3nnb4     =	+nbsp(zwnj2nb3nnb4)
  nbsp:zwnj3zwj4        =	+nbsp(zwnj3zwj4)
  japan:nicola_f_bs     =	+jp(nicola_f_bs)
  japan:hztg_escape     =	+jp(hztg_escape)
  korean:ralt_hangul	=	+kr(ralt_hangul)
  korean:rctrl_hangul	=	+kr(rctrl_hangul)
  korean:ralt_hanja	=	+kr(ralt_hanja)
  korean:rctrl_hanja	=	+kr(rctrl_hanja)
  kpdl:dot              =	+kpdl(dot)
  kpdl:comma            =	+kpdl(comma)
  kpdl:dotoss           =	+kpdl(dotoss)
  kpdl:dotoss_latin9    =	+kpdl(dotoss_latin9)
  kpdl:commaoss         =	+kpdl(commaoss)
  kpdl:momayyezoss      =	+kpdl(momayyezoss)
  kpdl:kposs            =	+kpdl(kposs)
  kpdl:semi             =	+kpdl(semi)
  shift:breaks_caps     =	+shift(breaks_caps)
  esperanto:qwerty      =	+epo(qwerty)
  esperanto:dvorak      =	+epo(dvorak)
  esperanto:colemak     =	+epo(colemak)
  terminate:ctrl_alt_bksp =	+terminate(ctrl_alt_bksp)
  keypad:pointerkeys	=	+keypad(pointerkeys)
  apple:alupckeys	=	+macintosh_vndr/apple(alupckeys)
  shift:both_capslock                =       +shift(both_capslock)
  shift:lshift_both_capslock         =       +shift(lshift_both_capslock)
  shift:rshift_both_capslock         =       +shift(rshift_both_capslock)
  shift:both_capslock_cancel         =       +shift(both_capslock_cancel)
  shift:lshift_both_capslock_cancel  =       +shift(lshift_both_capslock_cancel)
  shift:rshift_both_capslock_cancel  =       +shift(rshift_both_capslock_cancel)
  shift:both_shiftlock               =       +shift(both_shiftlock)
  shift:lshift_both_shiftlock        =       +shift(lshift_both_shiftlock)
  shift:rshift_both_shiftlock        =       +shift(rshift_both_shiftlock)
  solaris:sun_compat				 =		 +sun_vndr/solaris(sun_compat)
  lv2:lsgt_switch                    =       +level2(lsgt_switch)
  lv3:caps_switch                    =       +level3(caps_switch)
  lv3:bksl_switch                    =       +level3(bksl_switch)
  lv3:lsgt_switch                    =       +level3(lsgt_switch)
  lv3:caps_switch_latch              =       +level3(caps_switch_latch)
  lv3:bksl_switch_latch              =       +level3(bksl_switch_latch)
  lv3:lsgt_switch_latch              =       +level3(lsgt_switch_latch)
  lv5:lsgt_switch                 =       +level5(lsgt_switch)
  lv5:ralt_switch                 =       +level5(ralt_switch)
  lv5:lsgt_switch_lock            =       +level5(lsgt_switch_lock)
  lv5:ralt_switch_lock            =       +level5(ralt_switch_lock)
  lv5:lwin_switch_lock            =       +level5(lwin_switch_lock)
  lv5:rwin_switch_lock            =       +level5(rwin_switch_lock)
  lv5:lsgt_switch_lock_cancel     =       +level5(lsgt_switch_lock_cancel)
  lv5:ralt_switch_lock_cancel     =       +level5(ralt_switch_lock_cancel)
  lv5:lwin_switch_lock_cancel     =       +level5(lwin_switch_lock_cancel)
  lv5:rwin_switch_lock_cancel     =       +level5(rwin_switch_lock_cancel)
  parens:swap_brackets   =   +parens(swap_brackets)


! option	=	compat
  grp_led:num		=	+lednum(group_lock)
  grp_led:caps		=	+ledcaps(group_lock)
  grp_led:scroll	=	+ledscroll(group_lock)
  mod_led:compose	=	+ledcompose(compose)
  japan:kana_lock	=	+japan(kana_lock)
  caps:shiftlock	=	+ledcaps(shift_lock)
  grab:break_actions    =       +xfree86(grab_break)


! option	=	types
  caps:internal			=	+caps(internal)
  caps:internal_nocancel	=	+caps(internal_nocancel)
  caps:shift			=	+caps(shift)
  caps:shift_nocancel		=	+caps(shift_nocancel)
  numpad:pc			=	+numpad(pc)
  numpad:mac			=	+numpad(mac)
  numpad:microsoft		=	+numpad(microsoft)
  numpad:shift3       		=	+numpad(shift3)
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xkbConfigRegistry SYSTEM "xkb.dtd">
<xkbConfigRegistry version="1.1">
  <modelList>
    <model>
      <configItem>
        <name>pc86</name>
        <description>Generic 86-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc101</name>
        <description>Generic 101-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc102</name>
        <description>Generic 102-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc104</name>
        <description>Generic 104-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc104alt</name>
        <description>Generic 104-key PC with L-shaped Enter key</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc105</name>
        <description>Generic 105-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dell101</name>
        <description>Dell 101-key PC</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>latitude</name>
        <description>Dell Latitude laptop</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dellm65</name>
        <description>Dell Precision M65 laptop</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>everex</name>
        <description>Everex STEPnote</description>
        <vendor>Everex</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>flexpro</name>
        <description>Keytronic FlexPro</description>
        <vendor>Keytronic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoft</name>
        <description>Microsoft Natural</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>omnikey101</name>
        <description>Northgate OmniKey 101</description>
        <vendor>Northgate</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>winbook</name>
        <description>Winbook Model XP5</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc98</name>
        <description>PC-98</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>a4techKB21</name>
        <description>A4Tech KB-21</description>
        <vendor>A4Tech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>a4techKBS8</name>
        <description>A4Tech KBS-8</description>
        <vendor>A4Tech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>a4_rfkb23</name>
        <description>A4Tech Wireless Desktop RFKB-23</description>
        <vendor>A4Tech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>airkey</name>
        <description>Acer AirKey V</description>
        <vendor>Acer</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>azonaRF2300</name>
        <description>Azona RF2300 wireless Internet</description>
        <vendor>Azona</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>scorpius</name>
        <description>Advance Scorpius KI</description>
        <vendor>Scorpius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>brother</name>
        <description>Brother Internet</description>
        <vendor>Brother</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc5113rf</name>
        <description>BTC 5113RF Multimedia</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc5126t</name>
        <description>BTC 5126T</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc6301urf</name>
        <description>BTC 6301URF</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9000</name>
        <description>BTC 9000</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9000a</name>
        <description>BTC 9000A</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9001ah</name>
        <description>BTC 9001AH</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc5090</name>
        <description>BTC 5090</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9019u</name>
        <description>BTC 9019U</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9116u</name>
        <description>BTC 9116U Mini Wireless Internet and Gaming</description>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherryblue</name>
        <description>Cherry Blue Line CyBo@rd</description>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherryblueb</name>
        <description>Cherry CyMotion Master XPress</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherrybluea</name>
        <description>Cherry Blue Line CyBo@rd (alt.)</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherrycyboard</name>
        <description>Cherry CyBo@rd USB-Hub</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherrycmexpert</name>
        <description>Cherry CyMotion Expert</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherrybunlim</name>
        <description>Cherry B.UNLIMITED</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>chicony</name>
        <description>Chicony Internet</description>
        <vendor>Chicony</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>chicony0108</name>
        <description>Chicony KU-0108</description>
        <vendor>Chicony</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>chicony0420</name>
        <description>Chicony KU-0420</description>
        <vendor>Chicony</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>chicony9885</name>
        <description>Chicony KB-9885</description>
        <vendor>Chicony</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compaqeak8</name>
        <description>Compaq Easy Access</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compaqik7</name>
        <description>Compaq Internet (7 keys)</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compaqik13</name>
        <description>Compaq Internet (13 keys)</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compaqik18</name>
        <description>Compaq Internet (18 keys)</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cymotionlinux</name>
        <description>Cherry CyMotion Master Linux</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>armada</name>
        <description>Compaq Armada laptop</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>presario</name>
        <description>Compaq Presario laptop</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>ipaq</name>
        <description>Compaq iPaq</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dell</name>
        <description>Dell</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dellsk8125</name>
        <description>Dell SK-8125</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dellsk8135</name>
        <description>Dell SK-8135</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dellusbmm</name>
        <description>Dell USB Multimedia</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>inspiron</name>
        <description>Dell Inspiron 6000/8000 laptop</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>precision_m</name>
        <description>Dell Precision M laptop</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dexxa</name>
        <description>Dexxa Wireless Desktop</description>
        <vendor>Dexxa</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>diamond</name>
        <description>Diamond 9801/9802</description>
        <vendor>Diamond</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dtk2000</name>
        <description>DTK2000</description>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>ennyah_dkb1008</name>
        <description>Ennyah DKB-1008</description>
        <vendor>Ennyah</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>fscaa1667g</name>
        <description>Fujitsu-Siemens Amilo laptop</description>
        <vendor>Fujitsu-Siemens</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>genius</name>
        <description>Genius Comfy KB-16M/Multimedia KWD-910</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>geniuscomfy</name>
        <description>Genius Comfy KB-12e</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>geniuscomfy2</name>
        <description>Genius Comfy KB-21e-Scroll</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>geniuskb19e</name>
        <description>Genius KB-19e NB</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>geniuskkb2050hs</name>
        <description>Genius KKB-2050HS</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>gyration</name>
        <description>Gyration</description>
        <vendor>Gyration</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>kinesis</name>
        <description>Kinesis</description>
        <vendor>Kinesis</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logitech_base</name>
        <description>Logitech</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logitech_g15</name>
        <description>Logitech G15 extra keys via G15daemon</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpi6</name>
        <description>Hewlett-Packard Internet</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hp250x</name>
        <description>Hewlett-Packard NEC SK-2500 Multimedia</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpxe3gc</name>
        <description>Hewlett-Packard Omnibook XE3 GC</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpxe3gf</name>
        <description>Hewlett-Packard Omnibook XE3 GF</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpxt1000</name>
        <description>Hewlett-Packard Omnibook XT1000</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpdv5</name>
        <description>Hewlett-Packard Pavilion dv5</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpzt11xx</name>
        <description>Hewlett-Packard Pavilion ZT1100</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hp500fa</name>
        <description>Hewlett-Packard Omnibook 500 FA</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hp5xx</name>
        <description>Hewlett-Packard Omnibook 500</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpnx9020</name>
        <description>Hewlett-Packard nx9020</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hp6000</name>
        <description>Hewlett-Packard Omnibook 6000/6100</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>honeywell_euroboard</name>
        <description>Honeywell Euroboard</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpmini110</name>
        <description>Hewlett-Packard Mini 110 laptop</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>rapidaccess</name>
        <description>IBM Rapid Access</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>rapidaccess2</name>
        <description>IBM Rapid Access II</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>thinkpad</name>
        <description>IBM ThinkPad 560Z/600/600E/A22E</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>thinkpad60</name>
        <description>IBM ThinkPad R60/T60/R61/T61</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>thinkpadz60</name>
        <description>IBM ThinkPad Z60m/Z60t/Z61m/Z61t</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>ibm_spacesaver</name>
        <description>IBM Space Saver</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiaccess</name>
        <description>Logitech Access</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiclx300</name>
        <description>Logitech Cordless Desktop LX-300</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logii350</name>
        <description>Logitech Internet 350</description>
        <vendor>Logitech</vendor>
        <hwList> <hwId>046d:c313</hwId></hwList>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logimel</name>
        <description>Logitech Internet 350</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicd</name>
        <description>Logitech Cordless Desktop</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicd_it</name>
        <description>Logitech Cordless Desktop iTouch</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicd_nav</name>
        <description>Logitech Cordless Desktop Navigator</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicd_opt</name>
        <description>Logitech Cordless Desktop Optical</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicda</name>
        <description>Logitech Cordless Desktop (alt.)</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicdpa2</name>
        <description>Logitech Cordless Desktop Pro (2nd alt.)</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicfn</name>
        <description>Logitech Cordless Freedom/Desktop Navigator</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicdn</name>
        <description>Logitech Cordless Desktop Navigator</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiitc</name>
        <description>Logitech iTouch Cordless Y-RB6</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiik</name>
        <description>Logitech Internet</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>itouch</name>
        <description>Logitech iTouch</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicink</name>
        <description>Logitech Internet Navigator</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiex110</name>
        <description>Logitech Cordless Desktop EX110</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiinkse</name>
        <description>Logitech iTouch Internet Navigator SE</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiinkseusb</name>
        <description>Logitech iTouch Internet Navigator SE USB</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiultrax</name>
        <description>Logitech Ultra-X</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiultraxc</name>
        <description>Logitech Ultra-X Cordless Media Desktop</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logidinovo</name>
        <description>Logitech diNovo</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logidinovoedge</name>
        <description>Logitech diNovo Edge</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>mx1998</name>
        <description>Memorex MX1998</description>
        <vendor>Memorex</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>mx2500</name>
        <description>Memorex MX2500 EZ-Access</description>
        <vendor>Memorex</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>mx2750</name>
        <description>Memorex MX2750</description>
        <vendor>Memorex</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoft4000</name>
        <description>Microsoft Natural Ergonomic 4000</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoft7000</name>
        <description>Microsoft Natural Wireless Ergonomic 7000</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftinet</name>
        <description>Microsoft Internet</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftpro</name>
        <description>Microsoft Natural Pro/Internet Pro</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftprousb</name>
        <description>Microsoft Natural Pro USB/Internet Pro</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftprooem</name>
        <description>Microsoft Natural Pro OEM</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>vsonku306</name>
        <description>ViewSonic KU-306 Internet</description>
        <vendor>ViewSonic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftprose</name>
        <description>Microsoft Internet Pro (Swedish)</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftoffice</name>
        <description>Microsoft Office Keyboard</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftmult</name>
        <description>Microsoft Wireless Multimedia 1.0A</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftsurface</name>
        <description>Microsoft Surface</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftelite</name>
        <description>Microsoft Natural Elite</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftccurve2k</name>
        <description>Microsoft Comfort Curve 2000</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>oretec</name>
        <description>Ortek Multimedia/Internet MCK-800</description>
        <vendor>Ortek</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>propeller</name>
        <description>Propeller Voyager KTEZ-1000</description>
        <vendor>KeyTronic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>qtronix</name>
        <description>QTronix Scorpius 98N+</description>
        <vendor>QTronix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>samsung4500</name>
        <description>Samsung SDM 4500P</description>
        <vendor>Samsung</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>samsung4510</name>
        <description>Samsung SDM 4510P</description>
        <vendor>Samsung</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sanwaskbkg3</name>
        <description>Sanwa Supply SKB-KG3</description>
        <vendor>Sanwa Supply Inc.</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sk1300</name>
        <description>NEC SK-1300</description>
        <vendor>NEC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sk2500</name>
        <description>NEC SK-2500</description>
        <vendor>NEC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sk6200</name>
        <description>NEC SK-6200</description>
        <vendor>NEC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sk7100</name>
        <description>NEC SK-7100</description>
        <vendor>NEC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sp_inet</name>
        <description>Super Power Multimedia</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sven</name>
        <description>SVEN Ergonomic 2500</description>
        <vendor>SVEN</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sven303</name>
        <description>SVEN Slim 303</description>
        <vendor>SVEN</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>symplon</name>
        <description>Symplon PaceBook tablet</description>
        <vendor>Symplon</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>toshiba_s3000</name>
        <description>Toshiba Satellite S3000</description>
        <vendor>Toshiba</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>trust</name>
        <description>Trust Wireless Classic</description>
        <vendor>Trust</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>trustda</name>
        <description>Trust Direct Access</description>
        <vendor>Trust</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>trust_slimline</name>
        <description>Trust Slimline</description>
        <vendor>Trust</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2020</name>
        <description>TypeMatrix EZ-Reach 2020</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2030PS2</name>
        <description>TypeMatrix EZ-Reach 2030 PS2</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2030USB</name>
        <description>TypeMatrix EZ-Reach 2030 USB</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2030USB-102</name>
        <description>TypeMatrix EZ-Reach 2030 USB (102/105:EU mode)</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2030USB-106</name>
        <description>TypeMatrix EZ-Reach 2030 USB (106:JP mode)</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>yahoo</name>
        <description>Yahoo! Internet</description>
        <vendor>Yahoo!</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macbook78</name>
        <description>MacBook/MacBook Pro</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macbook79</name>
        <description>MacBook/MacBook Pro (intl.)</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macintosh</name>
        <description>Macintosh</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macintosh_old</name>
        <description>Macintosh Old</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macintosh_hhk</name>
        <description>Happy Hacking for Mac</description>
        <vendor>Fujitsu</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>acer_c300</name>
        <description>Acer C300</description>
        <vendor>Acer</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>acer_ferrari4k</name>
        <description>Acer Ferrari 4000</description>
        <vendor>Acer</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>acer_laptop</name>
        <description>Acer laptop</description>
        <vendor>Acer</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>asus_laptop</name>
        <description>Asus laptop</description>
        <vendor>Asus</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>apple</name>
        <description>Apple</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>apple_laptop</name>
        <description>Apple laptop</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>applealu_ansi</name>
        <description>Apple Aluminium (ANSI)</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>applealu_iso</name>
        <description>Apple Aluminium (ISO)</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>applealu_jis</name>
        <description>Apple Aluminium (JIS)</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>silvercrest</name>
        <description>Silvercrest Multimedia Wireless</description>
        <vendor>Silvercrest</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>emachines</name>
        <description>eMachines m6800 laptop</description>
        <vendor>eMachines</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>benqx</name>
        <description>BenQ X-Touch</description>
        <vendor>BenQ</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>benqx730</name>
        <description>BenQ X-Touch 730</description>
        <vendor>BenQ</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>benqx800</name>
        <description>BenQ X-Touch 800</description>
        <vendor>BenQ</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hhk</name>
        <description>Happy Hacking</description>
        <vendor>Fujitsu</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>classmate</name>
        <description>Classmate PC</description>
        <vendor>Intel</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>olpc</name>
        <description>OLPC</description>
        <vendor>OLPC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type7_usb</name>
        <description>Sun Type 7 USB</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type7_euro_usb</name>
        <description>Sun Type 7 USB (European)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type7_unix_usb</name>
        <description>Sun Type 7 USB (Unix)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type7_jp_usb</name>
        <description>Sun Type 7 USB (Japanese)/Japanese 106-key</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_usb</name>
        <description>Sun Type 6/7 USB</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_euro_usb</name>
        <description>Sun Type 6/7 USB (European)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_unix_usb</name>
        <description>Sun Type 6 USB (Unix)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_jp_usb</name>
        <description>Sun Type 6 USB (Japanese)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_jp</name>
        <description>Sun Type 6 (Japanese)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>targa_v811</name>
        <description>Targa Visionary 811</description>
        <vendor>Targa</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>unitekkb1925</name>
        <description>Unitek KB-1925</description>
        <vendor>Unitek Group</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compalfl90</name>
        <description>FL90</description>
        <vendor>Compal Electronics</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>creativedw7000</name>
        <description>Creative Desktop Wireless 7000</description>
        <vendor>Creative</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
       <name>teck227</name>
       <description>Truly Ergonomic 227</description>
       <vendor>Truly Ergonomic</vendor>
     </configItem>
    </model>
    <model>
      <configItem>
       <name>teck229</name>
       <description>Truly Ergonomic 229</description>
       <vendor>Truly Ergonomic</vendor>
     </configItem>
    </model>
    <model>
      <configItem>
       <name>apex300</name>
       <description>SteelSeries Apex 300 (Apex RAW)</description>
       <vendor>SteelSeries</vendor>
     </configItem>
    </model>
    <model>
      <configItem>
       <name>chromebook</name>
       <description>Chromebook</description>
       <vendor>Google</vendor>
     </configItem>
    </model>
  </modelList>
  <layoutList>
    <layout>
      <configItem>
        <name>us</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (US)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>chr</name>
            <!-- Keyboard indicator for Cherokee layouts -->
            <shortDescription>chr</shortDescription>
            <description>Cherokee</description>
            <languageList>
              <iso639Id>chr</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>haw</name>
            <shortDescription>haw</shortDescription>
            <description>Hawaiian</description>
            <languageList>
              <iso639Id>haw</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>euro</name>
            <description>English (US, euro on 5)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>English (US, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alt-intl</name>
            <description>English (US, alt. intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>English (Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>English (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-intl</name>
            <description>English (Dvorak, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-alt-intl</name>
            <description>English (Dvorak, alt. intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-l</name>
            <description>English (Dvorak, left-handed)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-r</name>
            <description>English (Dvorak, right-handed)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-classic</name>
            <description>English (classic Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvp</name>
            <description>English (programmer Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>symbolic</name>
            <description>English (US, Symbolic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rus</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (US, phonetic)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>English (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>altgr-intl</name>
            <description>English (intl., with AltGr dead keys)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>fra</iso639Id>
              <iso639Id>deu</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>olpc2</name>
            <description>English (the divide/multiply toggle the layout)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hbs</name>
            <description>Serbo-Croatian (US)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>bos</iso639Id>
              <iso639Id>hbs</iso639Id>
              <iso639Id>hrv</iso639Id>
              <iso639Id>srp</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>norman</name>
            <description>English (Norman)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>workman</name>
            <description>English (Workman)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>workman-intl</name>
            <description>English (Workman, intl., with dead keys)</description>
           </configItem>
         </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>af</name>
        <!-- Keyboard indicator for Afghani layouts -->
        <shortDescription>fa</shortDescription>
        <description>Afghani</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ps</name>
            <!-- Keyboard indicator for Pashto layouts -->
            <shortDescription>ps</shortDescription>
            <description>Pashto</description>
            <languageList>
              <iso639Id>pus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>uz</name>
            <!-- Keyboard indicator for Uzbek layouts -->
            <shortDescription>uz</shortDescription>
            <description>Uzbek (Afghanistan)</description>
            <languageList>
              <iso639Id>uzb</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>olpc-ps</name>
            <!-- Keyboard indicator for Pashto layouts -->
            <shortDescription>ps</shortDescription>
            <description>Pashto (Afghanistan, OLPC)</description>
            <languageList>
              <iso639Id>pus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fa-olpc</name>
            <!-- Keyboard indicator for Persian layouts -->
            <shortDescription>fa</shortDescription>
            <description>Persian (Afghanistan, Dari OLPC)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>uz-olpc</name>
            <!-- Keyboard indicator for Uzbek layouts -->
            <shortDescription>uz</shortDescription>
            <description>Uzbek (Afghanistan, OLPC)</description>
            <languageList>
              <iso639Id>uzb</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ara</name>
        <!-- Keyboard indicator for Arabic layouts -->
        <shortDescription>ar</shortDescription>
        <description>Arabic</description>
        <countryList>
          <iso3166Id>AE</iso3166Id>
          <iso3166Id>BH</iso3166Id>
          <iso3166Id>DZ</iso3166Id>
          <iso3166Id>EG</iso3166Id>
          <iso3166Id>EH</iso3166Id>
          <iso3166Id>JO</iso3166Id>
          <iso3166Id>KW</iso3166Id>
          <iso3166Id>LB</iso3166Id>
          <iso3166Id>LY</iso3166Id>
          <iso3166Id>MA</iso3166Id>
          <iso3166Id>MR</iso3166Id>
          <iso3166Id>OM</iso3166Id>
          <iso3166Id>PS</iso3166Id>
          <iso3166Id>QA</iso3166Id>
          <iso3166Id>SA</iso3166Id>
          <iso3166Id>SD</iso3166Id>
          <iso3166Id>SY</iso3166Id>
          <iso3166Id>TN</iso3166Id>
          <iso3166Id>YE</iso3166Id>
        </countryList>
        <languageList>
          <iso639Id>ara</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>azerty</name>
            <description>Arabic (AZERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>azerty_digits</name>
            <description>Arabic (AZERTY, Eastern Arabic numerals)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>digits</name>
            <description>Arabic (Eastern Arabic numerals)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Arabic (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty_digits</name>
            <description>Arabic (QWERTY, Eastern Arabic numerals)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>buckwalter</name>
            <description>Arabic (Buckwalter)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>olpc</name>
            <description>Arabic (OLPC)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Arabic (Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>al</name>
        <!-- Keyboard indicator for Albanian layouts -->
        <shortDescription>sq</shortDescription>
        <description>Albanian</description>
        <languageList>
          <iso639Id>sqi</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>plisi</name>
            <description>Albanian (Plisi)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>veqilharxhi</name>
            <description>Albanian (Veqilharxhi)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>am</name>
        <!-- Keyboard indicator for Armenian layouts -->
        <shortDescription>hy</shortDescription>
        <description>Armenian</description>
        <languageList>
          <iso639Id>hye</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Armenian (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic-alt</name>
            <description>Armenian (alt. phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eastern</name>
            <description>Armenian (eastern)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>western</name>
            <description>Armenian (western)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eastern-alt</name>
            <description>Armenian (alt. eastern)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>at</name>
        <!-- Keyboard indicator for German layouts -->
        <shortDescription>de</shortDescription>
        <description>German (Austria)</description>
        <languageList>
          <iso639Id>deu</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>German (Austria, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>German (Austria, Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>au</name>
        <!-- Keyboard indicator for Australian layouts -->
        <shortDescription>en</shortDescription>
        <description>English (Australian)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>az</name>
        <!-- Keyboard indicator for Azerbaijani layouts -->
        <shortDescription>az</shortDescription>
        <description>Azerbaijani</description>
        <languageList>
          <iso639Id>aze</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>cyrillic</name>
            <description>Azerbaijani (Cyrillic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>by</name>
        <!-- Keyboard indicator for Belarusian layouts -->
        <shortDescription>by</shortDescription>
        <description>Belarusian</description>
        <languageList>
          <iso639Id>bel</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Belarusian (legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin</name>
            <description>Belarusian (Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ru</name>
            <description>Russian (Belarus)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>Belarusian (intl.)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>be</name>
        <!-- Keyboard indicator for Belgian layouts -->
        <shortDescription>be</shortDescription>
        <description>Belgian</description>
        <languageList>
          <iso639Id>deu</iso639Id>
          <iso639Id>nld</iso639Id>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>oss</name>
            <description>Belgian (alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_latin9</name>
            <description>Belgian (Latin-9 only, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_sundeadkeys</name>
            <description>Belgian (Sun dead keys, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>iso-alternate</name>
            <description>Belgian (ISO, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Belgian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>Belgian (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>wang</name>
            <description>Belgian (Wang 724 AZERTY)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>bd</name>
        <!-- Keyboard indicator for Bangla layouts -->
        <shortDescription>bn</shortDescription>
        <description>Bangla</description>
        <languageList>
          <iso639Id>ben</iso639Id>
          <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
          <iso639Id>sat</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>probhat</name>
            <description>Bangla (Probhat)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>in</name>
        <!-- Keyboard indicator for Indian layouts -->
        <shortDescription>in</shortDescription>
        <description>Indian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ben</name>
            <!-- Keyboard indicator for Bangla layouts -->
            <shortDescription>bn</shortDescription>
            <description>Bangla (India)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ben_probhat</name>
            <!-- Keyboard indicator for Bangla layouts -->
            <shortDescription>bn</shortDescription>
            <description>Bangla (India, Probhat)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ben_baishakhi</name>
            <description>Bangla (India, Baishakhi)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ben_bornona</name>
            <description>Bangla (India, Bornona)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
         <variant>
          <configItem>
            <name>ben_gitanjali</name>
            <description>Bangla (India, Gitanjali)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ben_inscript</name>
            <description>Bangla (India, Baishakhi Inscript)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eeyek</name>
            <description>Manipuri (Eeyek)</description>
            <languageList>
              <iso639Id>mni</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>guj</name>
            <!-- Keyboard indicator for Gujarati layouts -->
            <shortDescription>gu</shortDescription>
            <description>Gujarati</description>
            <languageList>
              <iso639Id>guj</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>guru</name>
            <!-- Keyboard indicator for Punjabi layouts -->
            <shortDescription>pa</shortDescription>
            <description>Punjabi (Gurmukhi)</description>
            <languageList>
              <iso639Id>pan</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>jhelum</name>
            <!-- Keyboard indicator for Punjabi layouts -->
            <shortDescription>pa</shortDescription>
            <description>Punjabi (Gurmukhi Jhelum)</description>
            <languageList>
              <iso639Id>pan</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kan</name>
            <!-- Keyboard indicator for Kannada layouts -->
            <shortDescription>kn</shortDescription>
            <description>Kannada</description>
            <languageList>
              <iso639Id>kan</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kan-kagapa</name>
            <!-- Keyboard indicator for Kannada layouts -->
            <shortDescription>kn</shortDescription>
            <description>Kannada (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>kan</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mal</name>
            <!-- Keyboard indicator for Malayalam layouts -->
            <shortDescription>ml</shortDescription>
            <description>Malayalam</description>
            <languageList>
              <iso639Id>mal</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mal_lalitha</name>
            <!-- Keyboard indicator for Malayalam layouts -->
            <shortDescription>ml</shortDescription>
            <description>Malayalam (Lalitha)</description>
            <languageList>
              <iso639Id>mal</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mal_enhanced</name>
            <!-- Keyboard indicator for Malayalam layouts -->
            <shortDescription>ml</shortDescription>
            <description>Malayalam (enhanced Inscript, with rupee)</description>
            <languageList>
              <iso639Id>mal</iso639Id>
            </languageList>
          </configItem>
         </variant>
         <variant>
           <configItem>
            <name>ori</name>
            <!-- Keyboard indicator for Oriya layouts -->
            <shortDescription>or</shortDescription>
            <description>Oriya</description>
            <languageList>
              <iso639Id>ori</iso639Id>
              <!-- sat-Orya: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
           <configItem>
            <name>olck</name>
            <!-- Keyboard indicator for Ol Chiki layouts -->
            <shortDescription>sat</shortDescription>
            <description>Ol Chiki</description>
            <languageList>
              <!-- sat-Olck: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_tamilnet</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (TamilNet '99)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_tamilnet_with_tam_nums</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (TamilNet '99 with Tamil numerals)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_tamilnet_TAB</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (TamilNet '99, TAB encoding)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_tamilnet_TSCII</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (TamilNet '99, TSCII encoding)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (Inscript)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tel</name>
            <!-- Keyboard indicator for Telugu layouts -->
            <shortDescription>te</shortDescription>
            <description>Telugu</description>
            <languageList>
              <iso639Id>tel</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tel-kagapa</name>
            <!-- Keyboard indicator for Telugu layouts -->
            <shortDescription>te</shortDescription>
            <description>Telugu (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>tel</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tel-sarala</name>
            <!-- Keyboard indicator for Telugu layouts -->
            <shortDescription>te</shortDescription>
            <description>Telugu (Sarala)</description>
            <languageList>
              <iso639Id>tel</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>urd-phonetic</name>
            <!-- Keyboard indicator for Urdu layouts -->
            <shortDescription>ur</shortDescription>
            <description>Urdu (phonetic)</description>
            <languageList>
              <iso639Id>urd</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>urd-phonetic3</name>
            <!-- Keyboard indicator for Urdu layouts -->
            <shortDescription>ur</shortDescription>
            <description>Urdu (alt. phonetic)</description>
            <languageList>
              <iso639Id>urd</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>urd-winkeys</name>
            <!-- Keyboard indicator for Urdu layouts -->
            <shortDescription>ur</shortDescription>
            <description>Urdu (Windows)</description>
            <languageList>
              <iso639Id>urd</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bolnagri</name>
            <!-- Keyboard indicator for Hindi layouts -->
            <shortDescription>hi</shortDescription>
            <description>Hindi (Bolnagri)</description>
            <languageList>
              <iso639Id>hin</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hin-wx</name>
            <!-- Keyboard indicator for Hindi layouts -->
            <shortDescription>hi</shortDescription>
            <description>Hindi (Wx)</description>
            <languageList>
              <iso639Id>hin</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hin-kagapa</name>
            <!-- Keyboard indicator for Hindi layouts -->
            <shortDescription>hi</shortDescription>
            <description>Hindi (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>hin</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>san-kagapa</name>
            <!-- Keyboard indicator for Sanskrit layouts -->
            <shortDescription>sa</shortDescription>
            <description>Sanskrit (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>san</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mar-kagapa</name>
            <!-- Keyboard indicator for Marathi layouts -->
            <shortDescription>mr</shortDescription>
            <description>Marathi (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>mar</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eng</name>
            <!-- Keyboard indicator for English layouts -->
            <shortDescription>en</shortDescription>
            <description>English (India, with rupee)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>iipa</name>
            <description>Indic IPA</description>
            <languageList>
              <iso639Id>inc</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>marathi</name>
            <description>Marathi (enhanced Inscript)</description>
            <languageList>
              <iso639Id>mar</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ba</name>
        <!-- Keyboard indicator for Bosnian layouts -->
        <shortDescription>bs</shortDescription>
        <description>Bosnian</description>
        <languageList>
          <iso639Id>bos</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alternatequotes</name>
            <description>Bosnian (with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>unicode</name>
            <description>Bosnian (with Bosnian digraphs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>unicodeus</name>
            <description>Bosnian (US, with Bosnian digraphs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Bosnian (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>br</name>
        <!-- Keyboard indicator for Portuguese layouts -->
        <shortDescription>pt</shortDescription>
        <description>Portuguese (Brazil)</description>
        <languageList>
          <iso639Id>por</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Portuguese (Brazil, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Portuguese (Brazil, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo</name>
            <description>Portuguese (Brazil, Nativo)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo-us</name>
            <description>Portuguese (Brazil, Nativo for US keyboards)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo-epo</name>
            <description>Esperanto (Brazil, Nativo)</description>
            <languageList>
              <iso639Id>epo</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>thinkpad</name>
            <description>Portuguese (Brazil, IBM/Lenovo ThinkPad)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>bg</name>
        <!-- Keyboard indicator for Bulgarian layouts -->
        <shortDescription>bg</shortDescription>
        <description>Bulgarian</description>
        <languageList>
          <iso639Id>bul</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Bulgarian (traditional phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bas_phonetic</name>
            <description>Bulgarian (new phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bekl</name>
            <description>Bulgarian (enhanced)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>dz</name>
        <shortDescription>kab</shortDescription>
        <description>Kabyle (azerty layout, no dead keys)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>azerty-deadkeys</name>
            <shortDescription>kab</shortDescription>
            <description>Kabyle (azerty layout, with dead keys)</description>
            <languageList>
              <iso639Id>kab</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty-gb-deadkeys</name>
            <shortDescription>kab</shortDescription>
            <description>Kabyle (qwerty-gb layout, with dead keys)</description>
            <languageList>
              <iso639Id>kab</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty-us-deadkeys</name>
            <shortDescription>kab</shortDescription>
            <description>Kabyle (qwerty-us layout, with dead keys)</description>
            <languageList>
              <iso639Id>kab</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ber</name>
            <shortDescription>kab</shortDescription>
            <description>Kabyle (Algeria, Tifinagh)</description>
            <languageList>
              <iso639Id>kab</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ar</name>
            <shortDescription>ar</shortDescription>
            <description>Arabic (Algeria)</description>
            <languageList>
              <iso639Id>ara</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ma</name>
        <!-- Keyboard indicator for Arabic layouts -->
        <shortDescription>ar</shortDescription>
        <description>Arabic (Morocco)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>french</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Morocco)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-alt</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh alt.)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-alt-phonetic</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh phonetic, alt.)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-extended</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh extended)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-phonetic</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh phonetic)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-extended-phonetic</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh extended phonetic)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>cm</name>
        <!-- Keyboard indicator for Cameroon layouts -->
        <shortDescription>cm</shortDescription>
        <description>English (Cameroon)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>french</name>
            <description>French (Cameroon)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Cameroon Multilingual (QWERTY, intl.)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>bas</iso639Id>
              <iso639Id>nmg</iso639Id>
              <iso639Id>fub</iso639Id>
              <iso639Id>ewo</iso639Id>
              <iso639Id>xmd</iso639Id>
              <iso639Id>mfh</iso639Id>
              <iso639Id>bkm</iso639Id>
              <iso639Id>ozm</iso639Id>
              <iso639Id>lns</iso639Id>
              <iso639Id>sox</iso639Id>
              <iso639Id>pny</iso639Id>
              <iso639Id>wes</iso639Id>
              <iso639Id>lem</iso639Id>
              <iso639Id>nyj</iso639Id>
              <iso639Id>mfk</iso639Id>
              <iso639Id>mcp</iso639Id>
              <iso639Id>ass</iso639Id>
              <iso639Id>xed</iso639Id>
              <iso639Id>dua</iso639Id>
              <iso639Id>anv</iso639Id>
              <iso639Id>bum</iso639Id>
              <iso639Id>btb</iso639Id>
              <iso639Id>bfd</iso639Id>
              <iso639Id>azo</iso639Id>
              <iso639Id>ken</iso639Id>
              <iso639Id>yam</iso639Id>
              <iso639Id>yat</iso639Id>
              <iso639Id>yas</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>azerty</name>
            <description>Cameroon (AZERTY, intl.)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
              <iso639Id>bas</iso639Id>
              <iso639Id>nmg</iso639Id>
              <iso639Id>fub</iso639Id>
              <iso639Id>ewo</iso639Id>
              <iso639Id>xmd</iso639Id>
              <iso639Id>mfh</iso639Id>
              <iso639Id>bkm</iso639Id>
              <iso639Id>ozm</iso639Id>
              <iso639Id>lns</iso639Id>
              <iso639Id>sox</iso639Id>
              <iso639Id>pny</iso639Id>
              <iso639Id>wes</iso639Id>
              <iso639Id>lem</iso639Id>
              <iso639Id>nyj</iso639Id>
              <iso639Id>mfk</iso639Id>
              <iso639Id>mcp</iso639Id>
              <iso639Id>ass</iso639Id>
              <iso639Id>xed</iso639Id>
              <iso639Id>dua</iso639Id>
              <iso639Id>anv</iso639Id>
              <iso639Id>bum</iso639Id>
              <iso639Id>btb</iso639Id>
              <iso639Id>bfd</iso639Id>
              <iso639Id>azo</iso639Id>
              <iso639Id>ken</iso639Id>
              <iso639Id>yam</iso639Id>
              <iso639Id>yat</iso639Id>
              <iso639Id>yas</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Cameroon (Dvorak, intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mmuock</name>
            <description>Mmuock</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mm</name>
        <!-- Keyboard indicator for Burmese layouts -->
        <shortDescription>my</shortDescription>
        <description>Burmese</description>
        <languageList>
          <iso639Id>mya</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>zawgyi</name>
            <shortDescription>zg</shortDescription>
            <description>Burmese Zawgyi</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ca</name>
        <!-- Keyboard indicator for French layouts -->
        <shortDescription>fr</shortDescription>
        <description>French (Canada)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>fr-dvorak</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Canada, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr-legacy</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Canada, legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>multix</name>
            <description>Canadian (intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>multi</name>
            <description>Canadian (intl., 1st part)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>multi-2gr</name>
            <description>Canadian (intl., 2nd part)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ike</name>
            <!-- Keyboard indicator for Inuktikut layouts -->
            <shortDescription>ike</shortDescription>
            <description>Inuktitut</description>
            <languageList>
              <iso639Id>iku</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eng</name>
            <!-- Keyboard indicator for English layouts -->
            <shortDescription>en</shortDescription>
            <description>English (Canada)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>cd</name>
        <!-- Keyboard indicator for French layouts -->
        <shortDescription>fr</shortDescription>
        <description>French (Democratic Republic of the Congo)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>cn</name>
        <!-- Keyboard indicator for Chinese layouts -->
        <shortDescription>zh</shortDescription>
        <description>Chinese</description>
        <languageList>
          <iso639Id>zho</iso639Id>
        </languageList>
      </configItem>
      <variantList>

        <variant>
          <configItem>
            <name>mon_trad</name>
            <description>Mongolian (Bichig)</description>
            <languageList>
              <iso639Id>mvf</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_trad_todo</name>
            <description>Mongolian (Todo)</description>
            <languageList>
              <iso639Id>mvf</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_trad_xibe</name>
            <description>Mongolian (Xibe)</description>
            <languageList>
              <iso639Id>sjo</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_trad_manchu</name>
            <description>Mongolian (Manchu)</description>
            <languageList>
              <iso639Id>mnc</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_trad_galik</name>
            <description>Mongolian (Galik)</description>
            <languageList>
              <iso639Id>mvf</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_todo_galik</name>
            <description>Mongolian (Todo Galik)</description>
            <languageList>
              <iso639Id>mvf</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_manchu_galik</name>
            <description>Mongolian (Manchu Galik)</description>
            <languageList>
              <iso639Id>mnc</iso639Id>
            </languageList>
          </configItem>
        </variant>

        <variant>
          <configItem>
            <name>tib</name>
            <description>Tibetan</description>
            <languageList>
              <iso639Id>tib</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tib_asciinum</name>
            <description>Tibetan (with ASCII numerals)</description>
            <languageList>
              <iso639Id>tib</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ug</name>
            <shortDescription>ug</shortDescription>
            <description>Uyghur</description>
            <languageList>
              <iso639Id>uig</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>altgr-pinyin</name>
            <description>Hanyu Pinyin (with AltGr dead keys)</description>
            <languageList>
              <iso639Id>zho</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>hr</name>
        <!-- Keyboard indicator for Croatian layouts -->
        <shortDescription>hr</shortDescription>
        <description>Croatian</description>
        <languageList>
          <iso639Id>hrv</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alternatequotes</name>
            <description>Croatian (with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>unicode</name>
            <description>Croatian (with Croatian digraphs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>unicodeus</name>
            <description>Croatian (US, with Croatian digraphs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Croatian (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>cz</name>
        <!-- Keyboard indicator for Chech layouts -->
        <shortDescription>cs</shortDescription>
        <description>Czech</description>
        <languageList>
          <iso639Id>ces</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>bksl</name>
            <description>Czech (with &lt;\|&gt; key)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Czech (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty_bksl</name>
            <description>Czech (QWERTY, extended backslash)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty-mac</name>
            <description>Czech (QWERTY, Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ucw</name>
            <description>Czech (UCW, only accented letters)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-ucw</name>
            <description>Czech (US, Dvorak, UCW support)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rus</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Czech, phonetic)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>dk</name>
        <!-- Keyboard indicator for Danish layouts -->
        <shortDescription>da</shortDescription>
        <description>Danish</description>
        <languageList>
          <iso639Id>dan</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Danish (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Danish (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Danish (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_nodeadkeys</name>
            <description>Danish (Macintosh, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Danish (Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>nl</name>
        <!-- Keyboard indicator for Dutch layouts -->
        <shortDescription>nl</shortDescription>
        <description>Dutch</description>
        <languageList>
          <iso639Id>nld</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Dutch (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>std</name>
            <description>Dutch (standard)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>bt</name>
        <!-- Keyboard indicator for Dzongkha layouts -->
        <shortDescription>dz</shortDescription>
        <description>Dzongkha</description>
        <languageList>
          <iso639Id>dzo</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ee</name>
        <!-- Keyboard indicator for Estonian layouts -->
        <shortDescription>et</shortDescription>
        <description>Estonian</description>
        <languageList>
          <iso639Id>est</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Estonian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Estonian (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Estonian (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ir</name>
        <!-- Keyboard indicator for Persian layouts -->
        <shortDescription>fa</shortDescription>
        <description>Persian</description>
        <languageList>
          <iso639Id>fas</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>pes_keypad</name>
            <description>Persian (with Persian keypad)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iran, Latin Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_f</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iran, F)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_alt</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iran, Latin Alt-Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_ara</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iran, Arabic-Latin)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>iq</name>
        <!-- Keyboard indicator for Iraqi layouts -->
        <shortDescription>ar</shortDescription>
        <description>Iraqi</description>
        <languageList>
          <iso639Id>ara</iso639Id>
          <iso639Id>kur</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ku</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iraq, Latin Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_f</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iraq, F)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_alt</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iraq, Latin Alt-Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_ara</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iraq, Arabic-Latin)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>fo</name>
        <!-- Keyboard indicator for Faroese layouts -->
        <shortDescription>fo</shortDescription>
        <description>Faroese</description>
        <languageList>
          <iso639Id>fao</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Faroese (no dead keys)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>fi</name>
        <!-- Keyboard indicator for Finnish layouts -->
        <shortDescription>fi</shortDescription>
        <description>Finnish</description>
        <languageList>
          <iso639Id>fin</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Finnish (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>classic</name>
            <description>Finnish (classic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Finnish (classic, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>smi</name>
            <description>Northern Saami (Finland)</description>
            <languageList>
              <iso639Id>sme</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Finnish (Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>fr</name>
        <!-- Keyboard indicator for French layouts -->
        <shortDescription>fr</shortDescription>
        <description>French</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>French (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>French (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss</name>
            <description>French (alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_latin9</name>
            <description>French (alt., Latin-9 only)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_nodeadkeys</name>
            <description>French (alt., no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_sundeadkeys</name>
            <description>French (alt., Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin9</name>
            <description>French (legacy, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin9_nodeadkeys</name>
            <description>French (legacy, alt., no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin9_sundeadkeys</name>
            <description>French (legacy, alt., Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bepo</name>
            <description>French (BEPO)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bepo_latin9</name>
            <description>French (BEPO, Latin-9 only)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bepo_afnor</name>
            <description>French (BEPO, AFNOR)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>French (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>French (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>azerty</name>
            <description>French (AZERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>afnor</name>
            <description>French (AZERTY, AFNOR)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bre</name>
            <description>French (Breton)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oci</name>
            <description>Occitan</description>
            <languageList>
              <iso639Id>oci</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>geo</name>
            <description>Georgian (France, AZERTY Tskapo)</description>
            <languageList>
              <iso639Id>kat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>French (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>gh</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (Ghana)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>generic</name>
            <description>English (Ghana, multilingual)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>akan</name>
            <!-- Keyboard indicator for Akan layouts -->
            <shortDescription>ak</shortDescription>
            <description>Akan</description>
            <languageList>
              <iso639Id>aka</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ewe</name>
            <!-- Keyboard indicator for Ewe layouts -->
            <shortDescription>ee</shortDescription>
            <description>Ewe</description>
            <languageList>
              <iso639Id>ewe</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fula</name>
            <!-- Keyboard indicator for Fula layouts -->
            <shortDescription>ff</shortDescription>
            <description>Fula</description>
            <languageList>
              <iso639Id>ful</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ga</name>
            <!-- Keyboard indicator for Ga layouts -->
            <shortDescription>gaa</shortDescription>
            <description>Ga</description>
            <languageList>
              <iso639Id>gaa</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hausa</name>
            <!-- Keyboard indicator for Hausa layouts -->
            <shortDescription>ha</shortDescription>
            <description>Hausa (Ghana)</description>
            <languageList>
              <iso639Id>hau</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>avn</name>
            <!-- Keyboard indicator for Avatime layouts -->
            <shortDescription>avn</shortDescription>
            <description>Avatime</description>
            <languageList>
              <iso639Id>avn</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>gillbt</name>
            <description>English (Ghana, GILLBT)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>gn</name>
        <!-- Keyboard indicator for French layouts -->
        <shortDescription>fr</shortDescription>
        <description>French (Guinea)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>ge</name>
        <!-- Keyboard indicator for Georgian layouts -->
        <shortDescription>ka</shortDescription>
        <description>Georgian</description>
        <languageList>
          <iso639Id>kat</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ergonomic</name>
            <description>Georgian (ergonomic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mess</name>
            <description>Georgian (MESS)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ru</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Georgia)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>os</name>
            <description>Ossetian (Georgia)</description>
            <languageList>
              <iso639Id>oss</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>de</name>
        <!-- Keyboard indicator for German layouts -->
        <shortDescription>de</shortDescription>
        <description>German</description>
        <languageList>
          <iso639Id>deu</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>deadacute</name>
            <description>German (dead acute)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>deadgraveacute</name>
            <description>German (dead grave acute)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>German (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>e1</name>
            <description>German (E1)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>e2</name>
            <description>German (E2)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>T3</name>
            <description>German (T3)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>German (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ro</name>
            <description>Romanian (Germany)</description>
            <languageList>
              <iso639Id>ron</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ro_nodeadkeys</name>
            <description>Romanian (Germany, no dead keys)</description>
            <languageList>
              <iso639Id>ron</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>German (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>neo</name>
            <description>German (Neo 2)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>German (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_nodeadkeys</name>
            <description>German (Macintosh, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dsb</name>
            <description>Lower Sorbian</description>
            <languageList>
              <iso639Id>dsb</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dsb_qwertz</name>
            <description>Lower Sorbian (QWERTZ)</description>
            <languageList>
              <iso639Id>dsb</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>German (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tr</name>
            <description>Turkish (Germany)</description>
            <languageList>
              <iso639Id>tr</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ru</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Germany, phonetic)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>deadtilde</name>
            <description>German (dead tilde)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>gr</name>
        <!-- Keyboard indicator for Greek layouts -->
        <shortDescription>gr</shortDescription>
        <description>Greek</description>
        <languageList>
          <iso639Id>ell</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>simple</name>
            <description>Greek (simple)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>extended</name>
            <description>Greek (extended)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Greek (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>polytonic</name>
            <description>Greek (polytonic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>hu</name>
        <!-- Keyboard indicator for Hungarian layouts -->
        <shortDescription>hu</shortDescription>
        <description>Hungarian</description>
        <languageList>
          <iso639Id>hun</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>standard</name>
            <description>Hungarian (standard)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Hungarian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Hungarian (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwertz_comma_dead</name>
            <description>Hungarian (QWERTZ, 101-key, comma, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwertz_comma_nodead</name>
            <description>Hungarian (QWERTZ, 101-key, comma, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwertz_dot_dead</name>
            <description>Hungarian (QWERTZ, 101-key, dot, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwertz_dot_nodead</name>
            <description>Hungarian (QWERTZ, 101-key, dot, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwerty_comma_dead</name>
            <description>Hungarian (QWERTY, 101-key, comma, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwerty_comma_nodead</name>
            <description>Hungarian (QWERTY, 101-key, comma, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwerty_dot_dead</name>
            <description>Hungarian (QWERTY, 101-key, dot, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwerty_dot_nodead</name>
            <description>Hungarian (QWERTY, 101-key, dot, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwertz_comma_dead</name>
            <description>Hungarian (QWERTZ, 102-key, comma, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwertz_comma_nodead</name>
            <description>Hungarian (QWERTZ, 102-key, comma, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwertz_dot_dead</name>
            <description>Hungarian (QWERTZ, 102-key, dot, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwertz_dot_nodead</name>
            <description>Hungarian (QWERTZ, 102-key, dot, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwerty_comma_dead</name>
            <description>Hungarian (QWERTY, 102-key, comma, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwerty_comma_nodead</name>
            <description>Hungarian (QWERTY, 102-key, comma, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwerty_dot_dead</name>
            <description>Hungarian (QWERTY, 102-key, dot, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwerty_dot_nodead</name>
            <description>Hungarian (QWERTY, 102-key, dot, no dead keys)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>is</name>
        <!-- Keyboard indicator for Icelandic layouts -->
        <shortDescription>is</shortDescription>
        <description>Icelandic</description>
        <languageList>
          <iso639Id>isl</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>Sundeadkeys</name>
            <description>Icelandic (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Icelandic (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_legacy</name>
            <description>Icelandic (Macintosh, legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Icelandic (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Icelandic (Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>il</name>
        <!-- Keyboard indicator for Hebrew layouts -->
        <shortDescription>he</shortDescription>
        <description>Hebrew</description>
        <languageList>
          <iso639Id>heb</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>lyx</name>
            <description>Hebrew (lyx)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Hebrew (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>biblical</name>
            <description>Hebrew (Biblical, Tiro)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>it</name>
        <!-- Keyboard indicator for Italian layouts -->
        <shortDescription>it</shortDescription>
        <description>Italian</description>
        <languageList>
          <iso639Id>ita</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Italian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Italian (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Italian (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Italian (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>geo</name>
            <description>Georgian (Italy)</description>
            <languageList>
              <iso639Id>kat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ibm</name>
            <description>Italian (IBM 142)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>Italian (intl., with dead keys)</description>
            <languageList>
              <iso639Id>deu</iso639Id>
              <iso639Id>fra</iso639Id>
              <iso639Id>ita</iso639Id>
              <iso639Id>slk</iso639Id>
              <iso639Id>srd</iso639Id>
              <iso639Id>nap</iso639Id>
              <iso639Id>scn</iso639Id>
              <iso639Id>fur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>scn</name>
            <description>Sicilian</description>
            <languageList>
              <iso639Id>ita</iso639Id>
              <iso639Id>scn</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fur</name>
            <description>Friulian (Italy)</description>
            <languageList>
              <iso639Id>fur</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>jp</name>
        <!-- Keyboard indicator for Japaneses -->
        <shortDescription>ja</shortDescription>
        <description>Japanese</description>
        <languageList>
          <iso639Id>jpn</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>kana</name>
            <description>Japanese (Kana)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kana86</name>
            <description>Japanese (Kana 86)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>OADG109A</name>
            <description>Japanese (OADG 109A)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Japanese (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Japanese (Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>kg</name>
        <!-- Keyboard indicator for Kyrgyz layouts -->
        <shortDescription>ki</shortDescription>
        <description>Kyrgyz</description>
        <languageList>
          <iso639Id>kir</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Kyrgyz (phonetic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>kh</name>
        <!-- Keyboard indicator for Khmer layouts -->
        <shortDescription>km</shortDescription>
        <description>Khmer (Cambodia)</description>
        <languageList>
          <iso639Id>khm</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>kz</name>
        <!-- Keyboard indicator for Kazakh layouts -->
        <shortDescription>kk</shortDescription>
        <description>Kazakh</description>
        <languageList>
          <iso639Id>kaz</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ruskaz</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Kazakhstan, with Kazakh)</description>
            <languageList>
              <iso639Id>kaz</iso639Id>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kazrus</name>
            <description>Kazakh (with Russian)</description>
            <languageList>
              <iso639Id>kaz</iso639Id>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ext</name>
            <description>Kazakh (extended)</description>
            <languageList>
              <iso639Id>kaz</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin</name>
            <description>Kazakh (Latin)</description>
            <languageList>
              <iso639Id>kaz</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>la</name>
        <!-- Keyboard indicator for Lao layouts -->
        <shortDescription>lo</shortDescription>
        <description>Lao</description>
        <languageList>
          <iso639Id>lao</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>stea</name>
            <description>Lao (STEA)</description>
            <languageList>
              <iso639Id>lao</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>latam</name>
        <!-- Keyboard indicator for Spanish layouts -->
        <shortDescription>es</shortDescription>
        <description>Spanish (Latin American)</description>
        <countryList>
          <iso3166Id>AR</iso3166Id>
          <iso3166Id>BO</iso3166Id>
          <iso3166Id>CL</iso3166Id>
          <iso3166Id>CO</iso3166Id>
          <iso3166Id>CR</iso3166Id>
          <iso3166Id>CU</iso3166Id>
          <iso3166Id>DO</iso3166Id>
          <iso3166Id>EC</iso3166Id>
          <iso3166Id>GT</iso3166Id>
          <iso3166Id>HN</iso3166Id>
          <iso3166Id>HT</iso3166Id>
          <iso3166Id>MX</iso3166Id>
          <iso3166Id>NI</iso3166Id>
          <iso3166Id>PA</iso3166Id>
          <iso3166Id>PE</iso3166Id>
          <iso3166Id>PR</iso3166Id>
          <iso3166Id>PY</iso3166Id>
          <iso3166Id>SV</iso3166Id>
          <iso3166Id>US</iso3166Id>
          <iso3166Id>UY</iso3166Id>
          <iso3166Id>VE</iso3166Id>
        </countryList>
        <languageList>
          <iso639Id>spa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Spanish (Latin American, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>deadtilde</name>
            <description>Spanish (Latin American, dead tilde)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>Spanish (Latin American, Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Spanish (Latin American, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>Spanish (Latin American, Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak-gaming</name>
            <description>Spanish (Latin American, Colemak for gaming)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>lt</name>
        <!-- Keyboard indicator for Lithuanian layouts -->
        <shortDescription>lt</shortDescription>
        <description>Lithuanian</description>
        <languageList>
          <iso639Id>lit</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>std</name>
            <description>Lithuanian (standard)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Lithuanian (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ibm</name>
            <description>Lithuanian (IBM LST 1205-92)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>lekp</name>
            <description>Lithuanian (LEKP)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>lekpa</name>
            <description>Lithuanian (LEKPa)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sgs</name>
            <description>Samogitian</description>
            <languageList>
              <iso639Id>sgs</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>lv</name>
        <!-- Keyboard indicator for Latvian layouts -->
        <shortDescription>lv</shortDescription>
        <description>Latvian</description>
        <languageList>
          <iso639Id>lav</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>apostrophe</name>
            <description>Latvian (apostrophe)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tilde</name>
            <description>Latvian (tilde)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fkey</name>
            <description>Latvian (F)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>modern</name>
            <description>Latvian (modern)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ergonomic</name>
            <description>Latvian (ergonomic, ŪGJRMV)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>adapted</name>
            <description>Latvian (adapted)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mao</name>
        <!-- Keyboard indicator for Maori layouts -->
        <shortDescription>mi</shortDescription>
        <description>Maori</description>
        <languageList>
          <iso639Id>mri</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>me</name>
        <!-- Keyboard indicator for Montenegrin layouts -->
        <shortDescription>sr</shortDescription>
        <description>Montenegrin</description>
        <languageList>
          <iso639Id>srp</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>cyrillic</name>
            <description>Montenegrin (Cyrillic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cyrillicyz</name>
            <description>Montenegrin (Cyrillic, ZE and ZHE swapped)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinunicode</name>
            <description>Montenegrin (Latin, Unicode)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinyz</name>
            <description>Montenegrin (Latin, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinunicodeyz</name>
            <description>Montenegrin (Latin, Unicode, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cyrillicalternatequotes</name>
            <description>Montenegrin (Cyrillic, with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinalternatequotes</name>
            <description>Montenegrin (Latin, with guillemets)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mk</name>
        <!-- Keyboard indicator for Macedonian layouts -->
        <shortDescription>mk</shortDescription>
        <description>Macedonian</description>
        <languageList>
          <iso639Id>mkd</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Macedonian (no dead keys)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mt</name>
        <!-- Keyboard indicator for Maltese layouts -->
        <shortDescription>mt</shortDescription>
        <description>Maltese</description>
        <languageList>
          <iso639Id>mlt</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>us</name>
            <description>Maltese (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alt-us</name>
            <description>Maltese (US layout with AltGr overrides)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alt-gb</name>
            <description>Maltese (UK, with AltGr overrides)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mn</name>
        <!-- Keyboard indicator for Mongolian layouts -->
        <shortDescription>mn</shortDescription>
        <description>Mongolian</description>
        <languageList>
          <iso639Id>mon</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>no</name>
        <!-- Keyboard indicator for Norwegian layouts -->
        <shortDescription>no</shortDescription>
        <description>Norwegian</description>
        <languageList>
          <iso639Id>nor</iso639Id>
          <iso639Id>nob</iso639Id>
          <iso639Id>nno</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Norwegian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Norwegian (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Norwegian (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>smi</name>
            <description>Northern Saami (Norway)</description>
            <languageList>
              <iso639Id>sme</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>smi_nodeadkeys</name>
            <description>Northern Saami (Norway, no dead keys)</description>
            <languageList>
              <iso639Id>sme</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Norwegian (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_nodeadkeys</name>
            <description>Norwegian (Macintosh, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>Norwegian (Colemak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>pl</name>
        <!-- Keyboard indicator for Polish layouts -->
        <shortDescription>pl</shortDescription>
        <description>Polish</description>
        <languageList>
          <iso639Id>pol</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Polish (legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwertz</name>
            <description>Polish (QWERTZ)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Polish (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak_quotes</name>
            <description>Polish (Dvorak, with Polish quotes on quotemark key)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak_altquotes</name>
            <description>Polish (Dvorak, with Polish quotes on key 1)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>csb</name>
            <description>Kashubian</description>
            <languageList>
              <iso639Id>csb</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>szl</name>
            <description>Silesian</description>
            <languageList>
              <iso639Id>szl</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ru_phonetic_dvorak</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Poland, phonetic Dvorak)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvp</name>
            <description>Polish (programmer Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>pt</name>
        <!-- Keyboard indicator for Portuguese layouts -->
        <shortDescription>pt</shortDescription>
        <description>Portuguese</description>
        <languageList>
          <iso639Id>por</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Portuguese (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>Portuguese (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Portuguese (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_nodeadkeys</name>
            <description>Portuguese (Macintosh, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_sundeadkeys</name>
            <description>Portuguese (Macintosh, Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo</name>
            <description>Portuguese (Nativo)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo-us</name>
            <description>Portuguese (Nativo for US keyboards)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo-epo</name>
            <description>Esperanto (Portugal, Nativo)</description>
            <languageList>
              <iso639Id>epo</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ro</name>
        <!-- Keyboard indicator for Romanian layouts -->
        <shortDescription>ro</shortDescription>
        <description>Romanian</description>
        <languageList>
          <iso639Id>ron</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>std</name>
            <description>Romanian (standard)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Romanian (Windows)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ru</name>
        <!-- Keyboard indicator for Russian layouts -->
        <shortDescription>ru</shortDescription>
        <description>Russian</description>
        <languageList>
          <iso639Id>rus</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Russian (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_winkeys</name>
            <description>Russian (phonetic, Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_YAZHERTY</name>
            <description>Russian (phonetic, YAZHERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>typewriter</name>
            <description>Russian (typewriter)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Russian (legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>typewriter-legacy</name>
            <description>Russian (typewriter, legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tt</name>
            <description>Tatar</description>
            <languageList>
              <iso639Id>tat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>os_legacy</name>
            <description>Ossetian (legacy)</description>
            <languageList>
              <iso639Id>oss</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>os_winkeys</name>
            <description>Ossetian (Windows)</description>
            <languageList>
              <iso639Id>oss</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cv</name>
            <description>Chuvash</description>
            <languageList>
              <iso639Id>chv</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cv_latin</name>
            <description>Chuvash (Latin)</description>
            <languageList>
              <iso639Id>chv</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>udm</name>
            <description>Udmurt</description>
            <languageList>
              <iso639Id>udm</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kom</name>
            <description>Komi</description>
            <languageList>
              <iso639Id>kom</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sah</name>
            <description>Yakut</description>
            <languageList>
              <iso639Id>sah</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>xal</name>
            <description>Kalmyk</description>
            <languageList>
              <iso639Id>xal</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dos</name>
            <description>Russian (DOS)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Russian (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>srp</name>
            <description>Serbian (Russia)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
              <iso639Id>srp</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bak</name>
            <description>Bashkirian</description>
            <languageList>
              <iso639Id>bak</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>chm</name>
            <description>Mari</description>
            <languageList>
              <iso639Id>chm</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_azerty</name>
            <description>Russian (phonetic, AZERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_dvorak</name>
            <description>Russian (phonetic, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_fr</name>
            <description>Russian (phonetic, French)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>rs</name>
        <!-- Keyboard indicator for Serbian layouts -->
        <shortDescription>sr</shortDescription>
        <description>Serbian</description>
        <languageList>
          <iso639Id>srp</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>yz</name>
            <description>Serbian (Cyrillic, ZE and ZHE swapped)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin</name>
            <description>Serbian (Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinunicode</name>
            <description>Serbian (Latin, Unicode)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinyz</name>
            <description>Serbian (Latin, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinunicodeyz</name>
            <description>Serbian (Latin, Unicode, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alternatequotes</name>
            <description>Serbian (Cyrillic, with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinalternatequotes</name>
            <description>Serbian (Latin, with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rue</name>
            <description>Pannonian Rusyn</description>
            <languageList>
              <iso639Id>rue</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>si</name>
        <!-- Keyboard indicator for Slovenian layouts -->
        <shortDescription>sl</shortDescription>
        <description>Slovenian</description>
        <languageList>
          <iso639Id>slv</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alternatequotes</name>
            <description>Slovenian (with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Slovenian (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>sk</name>
        <!-- Keyboard indicator for Slovak layouts -->
        <shortDescription>sk</shortDescription>
        <description>Slovak</description>
        <languageList>
          <iso639Id>slk</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>bksl</name>
            <description>Slovak (extended backslash)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Slovak (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty_bksl</name>
            <description>Slovak (QWERTY, extended backslash)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>es</name>
        <!-- Keyboard indicator for Spanish layouts -->
        <shortDescription>es</shortDescription>
        <description>Spanish</description>
        <languageList>
          <iso639Id>spa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Spanish (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Spanish (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>deadtilde</name>
            <description>Spanish (dead tilde)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>Spanish (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Spanish (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ast</name>
            <shortDescription>ast</shortDescription>
            <description>Asturian (Spain, with bottom-dot H and L)</description>
            <languageList>
              <iso639Id>ast</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cat</name>
            <shortDescription>ca</shortDescription>
            <description>Catalan (Spain, with middle-dot L)</description>
            <languageList>
              <iso639Id>cat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Spanish (Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>se</name>
        <!-- Keyboard indicator for Swedish layouts -->
        <shortDescription>sv</shortDescription>
        <description>Swedish</description>
        <languageList>
          <iso639Id>swe</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Swedish (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Swedish (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rus</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Sweden, phonetic)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rus_nodeadkeys</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Sweden, phonetic, no dead keys)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>smi</name>
            <description>Northern Saami (Sweden)</description>
            <languageList>
              <iso639Id>sme</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Swedish (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>svdvorak</name>
            <description>Swedish (Svdvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us_dvorak</name>
            <description>Swedish (Dvorak, intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Swedish (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>swl</name>
            <description>Swedish Sign Language</description>
            <languageList>
              <iso639Id>swl</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ch</name>
        <!-- Keyboard indicator for German layouts -->
        <shortDescription>de</shortDescription>
        <description>German (Switzerland)</description>
        <languageList>
          <iso639Id>deu</iso639Id>
          <iso639Id>gsw</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>German (Switzerland, legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>de_nodeadkeys</name>
            <!-- Keyboard indicator for German layouts -->
            <shortDescription>de</shortDescription>
            <description>German (Switzerland, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>de_sundeadkeys</name>
            <!-- Keyboard indicator for German layouts -->
            <shortDescription>de</shortDescription>
            <description>German (Switzerland, Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Switzerland)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr_nodeadkeys</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Switzerland, no dead keys)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr_sundeadkeys</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Switzerland, Sun dead keys)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr_mac</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Switzerland, Macintosh)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>de_mac</name>
            <!-- Keyboard indicator for German layouts -->
            <shortDescription>de</shortDescription>
            <description>German (Switzerland, Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>sy</name>
        <!-- Keyboard indicator for Arabic layouts -->
        <shortDescription>ar</shortDescription>
        <description>Arabic (Syria)</description>
        <languageList>
          <iso639Id>syr</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>syc</name>
            <!-- Keyboard indicator for Syriac layouts -->
            <shortDescription>syc</shortDescription>
            <description>Syriac</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>syc_phonetic</name>
            <!-- Keyboard indicator for Syriac layouts -->
            <shortDescription>syc</shortDescription>
            <description>Syriac (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Syria, Latin Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_f</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Syria, F)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_alt</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Syria, Latin Alt-Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tj</name>
        <!-- Keyboard indicator for Tajik layouts -->
        <shortDescription>tg</shortDescription>
        <description>Tajik</description>
        <languageList>
          <iso639Id>tgk</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Tajik (legacy)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>lk</name>
        <!-- Keyboard indicator for Sinhala layouts -->
        <shortDescription>si</shortDescription>
        <description>Sinhala (phonetic)</description>
        <languageList>
          <iso639Id>sin</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>tam_unicode</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (Sri Lanka, TamilNet '99)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_TAB</name>
            <description>Tamil (Sri Lanka, TamilNet '99, TAB encoding)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <!-- Keyboard indicator for US layouts -->
            <shortDescription>us</shortDescription>
            <description>Sinhala (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>th</name>
        <!-- Keyboard indicator for Thai layouts -->
        <shortDescription>th</shortDescription>
        <description>Thai</description>
        <languageList>
          <iso639Id>tha</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>tis</name>
            <description>Thai (TIS-820.2538)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>pat</name>
            <description>Thai (Pattachote)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tr</name>
        <!-- Keyboard indicator for Turkish layouts -->
        <shortDescription>tr</shortDescription>
        <description>Turkish</description>
        <languageList>
          <iso639Id>tur</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>f</name>
            <description>Turkish (F)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alt</name>
            <description>Turkish (Alt-Q)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Turkey, Latin Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_f</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Turkey, F)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_alt</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Turkey, Latin Alt-Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>Turkish (intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>crh</name>
            <!-- Keyboard indicator for Crimean Tatar layouts -->
            <shortDescription>crh</shortDescription>
            <description>Crimean Tatar (Turkish Q)</description>
            <languageList>
              <iso639Id>crh</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>crh_f</name>
            <!-- Keyboard indicator for Crimean Tatar layouts -->
            <shortDescription>crh</shortDescription>
            <description>Crimean Tatar (Turkish F)</description>
            <languageList>
              <iso639Id>crh</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>crh_alt</name>
            <!-- Keyboard indicator for Crimean Tatar layouts -->
            <shortDescription>crh</shortDescription>
            <description>Crimean Tatar (Turkish Alt-Q)</description>
            <languageList>
              <iso639Id>crh</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tw</name>
        <!-- Keyboard indicator for Taiwanese layouts -->
        <shortDescription>zh</shortDescription>
        <description>Taiwanese</description>
        <languageList>
          <iso639Id>fox</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>indigenous</name>
            <description>Taiwanese (indigenous)</description>
            <languageList>
              <iso639Id>ami</iso639Id>
              <iso639Id>tay</iso639Id>
              <iso639Id>bnn</iso639Id>
              <iso639Id>ckv</iso639Id>
              <iso639Id>pwn</iso639Id>
              <iso639Id>pyu</iso639Id>
              <iso639Id>dru</iso639Id>
              <iso639Id>ais</iso639Id>
              <iso639Id>ssf</iso639Id>
              <iso639Id>tao</iso639Id>
              <iso639Id>tsu</iso639Id>
              <iso639Id>trv</iso639Id>
              <iso639Id>xnb</iso639Id>
              <iso639Id>sxr</iso639Id>
              <iso639Id>uun</iso639Id>
              <iso639Id>fos</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>saisiyat</name>
            <!-- Keyboard indicator for Saisiyat layouts -->
            <shortDescription>xsy</shortDescription>
            <description>Saisiyat (Taiwan)</description>
            <languageList>
              <iso639Id>xsy</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ua</name>
        <!-- Keyboard indicator for Ukranian layouts -->
        <shortDescription>uk</shortDescription>
        <description>Ukrainian</description>
        <languageList>
          <iso639Id>ukr</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Ukrainian (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>typewriter</name>
            <description>Ukrainian (typewriter)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Ukrainian (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Ukrainian (legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rstu</name>
            <description>Ukrainian (standard RSTU)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rstu_ru</name>
            <description>Russian (Ukraine, standard RSTU)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>homophonic</name>
            <description>Ukrainian (homophonic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>gb</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (UK)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>extd</name>
            <description>English (UK, extended, Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>English (UK, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>English (UK, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorakukp</name>
            <description>English (UK, Dvorak, with UK punctuation)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>English (UK, Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_intl</name>
            <description>English (UK, Macintosh, intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>English (UK, Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>pl</name>
            <!-- Keyboard indicator for Polish layouts -->
            <shortDescription>pl</shortDescription>
            <description>Polish (British keyboard)</description>
            <languageList>
              <iso639Id>pol</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>uz</name>
        <!-- Keyboard indicator for Uzbek layouts -->
        <shortDescription>uz</shortDescription>
        <description>Uzbek</description>
        <languageList>
          <iso639Id>uzb</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>latin</name>
            <description>Uzbek (Latin)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>vn</name>
        <!-- Keyboard indicator for Vietnamese layouts -->
        <shortDescription>vi</shortDescription>
        <description>Vietnamese</description>
        <languageList>
          <iso639Id>vie</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>us</name>
            <description>Vietnamese (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr</name>
            <description>Vietnamese (French)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>kr</name>
        <!-- Keyboard indicator for Korean layouts -->
        <shortDescription>ko</shortDescription>
        <description>Korean</description>
        <languageList>
          <iso639Id>kor</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>kr104</name>
            <description>Korean (101/104-key compatible)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>nec_vndr/jp</name>
        <!-- Keyboard indicator for Japaneses -->
        <shortDescription>ja</shortDescription>
        <description>Japanese (PC-98)</description>
        <countryList>
          <iso3166Id>JP</iso3166Id>
        </countryList>
        <languageList>
          <iso639Id>jpn</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ie</name>
        <!-- Keyboard indicator for Irish layouts -->
        <shortDescription>ie</shortDescription>
        <description>Irish</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>CloGaelach</name>
            <description>CloGaelach</description>
            <languageList>
              <iso639Id>gle</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>UnicodeExpert</name>
            <description>Irish (UnicodeExpert)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ogam</name>
            <description>Ogham</description>
            <languageList>
              <iso639Id>sga</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ogam_is434</name>
            <description>Ogham (IS434)</description>
            <languageList>
              <iso639Id>sga</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>pk</name>
        <!-- Keyboard indicator for Urdu layouts -->
        <shortDescription>ur</shortDescription>
        <description>Urdu (Pakistan)</description>
        <languageList>
          <iso639Id>urd</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>urd-crulp</name>
            <description>Urdu (Pakistan, CRULP)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>urd-nla</name>
            <description>Urdu (Pakistan, NLA)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ara</name>
            <shortDescription>ar</shortDescription>
            <description>Arabic (Pakistan)</description>
            <languageList>
              <iso639Id>ara</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>snd</name>
            <!-- Keyboard indicator for Sindhi layouts -->
            <shortDescription>sd</shortDescription>
            <description>Sindhi</description>
            <languageList>
              <iso639Id>snd</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mv</name>
        <!-- Keyboard indicator for Dhivehi layouts -->
        <shortDescription>dv</shortDescription>
        <description>Dhivehi</description>
        <languageList>
          <iso639Id>div</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>za</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (South Africa)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>epo</name>
        <!-- Keyboard indicator for Esperanto layouts -->
        <shortDescription>eo</shortDescription>
        <description>Esperanto</description>
        <languageList>
          <iso639Id>epo</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Esperanto (legacy)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>np</name>
        <!-- Keyboard indicator for Nepali layouts -->
        <shortDescription>ne</shortDescription>
        <description>Nepali</description>
        <languageList>
          <iso639Id>nep</iso639Id>
          <!-- sat-Deva used in Nepal: http://www.ethnologue.com/language/sat -->
          <iso639Id>sat</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ng</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (Nigeria)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>igbo</name>
            <!-- Keyboard indicator for Igbo layouts -->
            <shortDescription>ig</shortDescription>
            <description>Igbo</description>
            <languageList>
              <iso639Id>ibo</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>yoruba</name>
            <!-- Keyboard indicator for Yoruba layouts -->
            <shortDescription>yo</shortDescription>
            <description>Yoruba</description>
            <languageList>
              <iso639Id>yor</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hausa</name>
            <!-- Keyboard indicator for Hausa layouts -->
            <shortDescription>ha</shortDescription>
            <description>Hausa (Nigeria)</description>
            <languageList>
              <iso639Id>hau</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>et</name>
        <!-- Keyboard indicator for Amharic layouts -->
        <shortDescription>am</shortDescription>
        <description>Amharic</description>
        <languageList>
          <iso639Id>amh</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>sn</name>
        <!-- Keyboard indicator for Wolof layouts -->
        <shortDescription>wo</shortDescription>
        <description>Wolof</description>
        <languageList>
          <iso639Id>wol</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>brai</name>
        <!-- Keyboard indicator for Braille layouts -->
        <shortDescription>brl</shortDescription>
        <description>Braille</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>left_hand</name>
            <description>Braille (left-handed)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>left_hand_invert</name>
            <description>Braille (left-handed inverted thumb)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>right_hand</name>
            <description>Braille (right-handed)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>right_hand_invert</name>
            <description>Braille (right-handed inverted thumb)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tm</name>
        <!-- Keyboard indicator for Turkmen layouts -->
        <shortDescription>tk</shortDescription>
        <description>Turkmen</description>
        <languageList>
          <iso639Id>tuk</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alt</name>
            <description>Turkmen (Alt-Q)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ml</name>
        <!-- Keyboard indicator for Bambara layouts -->
        <shortDescription>bm</shortDescription>
        <description>Bambara</description>
        <languageList>
          <iso639Id>bam</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>fr-oss</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Mali, alt.)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us-mac</name>
            <!-- Keyboard indicator for English layouts -->
            <shortDescription>en</shortDescription>
            <description>English (Mali, US, Macintosh)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us-intl</name>
            <!-- Keyboard indicator for English layouts -->
            <shortDescription>en</shortDescription>
            <description>English (Mali, US, intl.)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tz</name>
        <!-- Keyboard indicator for Swahili layouts -->
        <shortDescription>sw</shortDescription>
        <description>Swahili (Tanzania)</description>
        <languageList>
          <iso639Id>swa</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>tg</name>
        <shortDescription>fr-tg</shortDescription>
        <description>French (Togo)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
          <iso639Id>ajg</iso639Id>
          <iso639Id>blo</iso639Id>
          <iso639Id>kpo</iso639Id>
          <iso639Id>ewe</iso639Id>
          <iso639Id>fon</iso639Id>
          <iso639Id>fue</iso639Id>
          <iso639Id>gej</iso639Id>
          <iso639Id>ife</iso639Id>
          <iso639Id>kbp</iso639Id>
          <iso639Id>las</iso639Id>
          <iso639Id>dop</iso639Id>
          <iso639Id>mfg</iso639Id>
          <iso639Id>nmz</iso639Id>
          <iso639Id>bud</iso639Id>
          <iso639Id>gng</iso639Id>
          <iso639Id>kdh</iso639Id>
          <iso639Id>soy</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ke</name>
        <!-- Keyboard indicator for Swahili layouts -->
        <shortDescription>sw</shortDescription>
        <description>Swahili (Kenya)</description>
        <languageList>
          <iso639Id>swa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>kik</name>
            <!-- Keyboard indicator for Kikuyu layouts -->
            <shortDescription>ki</shortDescription>
            <description>Kikuyu</description>
            <languageList>
              <iso639Id>kik</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>bw</name>
        <!-- Keyboard indicator for Tswana layouts -->
        <shortDescription>tn</shortDescription>
        <description>Tswana</description>
        <languageList>
          <iso639Id>tsn</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ph</name>
        <!-- Keyboard indicator for Filipino layouts -->
        <shortDescription>ph</shortDescription>
        <description>Filipino</description>
        <languageList>
          <iso639Id>eng</iso639Id>
          <iso639Id>bik</iso639Id>
          <iso639Id>ceb</iso639Id>
          <iso639Id>fil</iso639Id>
          <iso639Id>hil</iso639Id>
          <iso639Id>ilo</iso639Id>
          <iso639Id>pam</iso639Id>
          <iso639Id>pag</iso639Id>
          <iso639Id>phi</iso639Id>
          <iso639Id>tgl</iso639Id>
          <iso639Id>war</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>qwerty-bay</name>
            <description>Filipino (QWERTY, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>capewell-dvorak</name>
            <description>Filipino (Capewell-Dvorak, Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>capewell-dvorak-bay</name>
            <description>Filipino (Capewell-Dvorak, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>capewell-qwerf2k6</name>
            <description>Filipino (Capewell-QWERF 2006, Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>capewell-qwerf2k6-bay</name>
            <description>Filipino (Capewell-QWERF 2006, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>Filipino (Colemak, Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak-bay</name>
            <description>Filipino (Colemak, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Filipino (Dvorak, Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-bay</name>
            <description>Filipino (Dvorak, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>md</name>
        <shortDescription>md</shortDescription>
        <description>Moldavian</description>
        <languageList>
          <iso639Id>ron</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>gag</name>
            <shortDescription>gag</shortDescription>
            <description>Moldavian (Gagauz)</description>
            <languageList>
              <iso639Id>gag</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>id</name>
        <shortDescription>id</shortDescription>
        <description>Indonesian (Arab Melayu, phonetic)</description>
        <languageList>
          <iso639Id>ind</iso639Id>
          <iso639Id>msa</iso639Id>
          <iso639Id>min</iso639Id>
          <iso639Id>ace</iso639Id>
          <iso639Id>bjn</iso639Id>
          <iso639Id>tsg</iso639Id>
          <iso639Id>mfa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
       <variant>
         <configItem>
          <name>phoneticx</name>
            <description>Indonesian (Arab Melayu, extended phonetic)</description>
         </configItem>
       </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>jv</name>
        <shortDescription>jv</shortDescription>
        <description>Indonesian (Javanese)</description>
        <languageList>
          <iso639Id>jv</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>my</name>
        <shortDescription>ms</shortDescription>
        <description>Malay (Jawi, Arabic Keyboard)</description>
        <languageList>
          <iso639Id>ind</iso639Id>
          <iso639Id>msa</iso639Id>
          <iso639Id>min</iso639Id>
          <iso639Id>ace</iso639Id>
          <iso639Id>bjn</iso639Id>
          <iso639Id>tsg</iso639Id>
          <iso639Id>mfa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
       <variant>
         <configItem>
          <name>phonetic</name>
            <description>Malay (Jawi, phonetic)</description>
         </configItem>
       </variant>
      </variantList>
    </layout>
  </layoutList>
  <optionList>
    <group allowMultipleSelection="true">
      <!-- The key combination used to switch between groups -->
      <configItem>
        <name>grp</name>
        <description>Switching to another layout</description>
      </configItem>
      <option>
        <configItem>
          <name>grp:switch</name>
          <description>Right Alt (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lswitch</name>
          <description>Left Alt (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lwin_switch</name>
          <description>Left Win (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rwin_switch</name>
          <description>Right Win (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:win_switch</name>
          <description>Any Win (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:menu_switch</name>
          <description>Menu (while pressed), Shift+Menu for Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:caps_switch</name>
          <description>Caps Lock (while pressed), Alt+Caps Lock for the original Caps Lock action</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rctrl_switch</name>
          <description>Right Ctrl (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:toggle</name>
          <description>Right Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lalt_toggle</name>
          <description>Left Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:caps_toggle</name>
          <description>Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:shift_caps_toggle</name>
          <description>Shift+Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:shift_caps_switch</name>
          <description>Caps Lock to first layout; Shift+Caps Lock to last layout</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:win_menu_switch</name>
          <description>Left Win to first layout; Right Win/Menu to last layout</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_rctrl_switch</name>
          <description>Left Ctrl to first layout; Right Ctrl to last layout</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:alt_caps_toggle</name>
          <description>Alt+Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:shifts_toggle</name>
          <description>Both Shift together</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:alts_toggle</name>
          <description>Both Alt together</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:ctrls_toggle</name>
          <description>Both Ctrl together</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:ctrl_shift_toggle</name>
          <description>Ctrl+Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_lshift_toggle</name>
          <description>Left Ctrl+Left Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rctrl_rshift_toggle</name>
          <description>Right Ctrl+Right Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:ctrl_alt_toggle</name>
          <description>Alt+Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:alt_shift_toggle</name>
          <description>Alt+Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lalt_lshift_toggle</name>
          <description>Left Alt+Left Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:alt_space_toggle</name>
          <description>Alt+Space</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:menu_toggle</name>
          <description>Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lwin_toggle</name>
          <description>Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:win_space_toggle</name>
          <description>Win+Space</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rwin_toggle</name>
          <description>Right Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lshift_toggle</name>
          <description>Left Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rshift_toggle</name>
          <description>Right Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_toggle</name>
          <description>Left Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rctrl_toggle</name>
          <description>Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:sclk_toggle</name>
          <description>Scroll Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_lwin_rctrl_menu</name>
          <description>Left Ctrl+Left Win to first layout; Right Ctrl+Menu to second layout</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_lwin_toggle</name>
          <description>Left Ctrl+Left Win</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- The key combination used to choose the 2nd level of symbols -->
      <configItem>
        <name>lv2</name>
        <description>Key to choose the 2nd level</description>
      </configItem>
      <option>
        <configItem>
          <name>lv2:lsgt_switch</name>
          <description>The "&lt; &gt;" key</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- The key combination used to choose the 3rd (and 4th, together with Shift)
           level of symbols -->
      <configItem>
        <name>lv3</name>
        <description>Key to choose the 3rd level</description>
      </configItem>
      <option>
        <configItem>
          <name>lv3:switch</name>
          <description>Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:menu_switch</name>
          <description>Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:win_switch</name>
          <description>Any Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:lwin_switch</name>
          <description>Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:rwin_switch</name>
          <description>Right Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:alt_switch</name>
          <description>Any Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:lalt_switch</name>
          <description>Left Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:ralt_switch</name>
          <description>Right Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:ralt_switch_multikey</name>
          <description>Right Alt; Shift+Right Alt as Compose</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:ralt_alt</name>
          <description>Right Alt never chooses 3rd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:enter_switch</name>
          <description>Enter on keypad</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:caps_switch</name>
          <description>Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:bksl_switch</name>
          <description>Backslash</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:lsgt_switch</name>
          <description>The "&lt; &gt;" key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:caps_switch_latch</name>
          <description>Caps Lock; acts as onetime lock when pressed together with another 3rd-level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:bksl_switch_latch</name>
          <description>Backslash; acts as onetime lock when pressed together with another 3rd level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:lsgt_switch_latch</name>
          <description>The "&lt; &gt;" key; acts as onetime lock when pressed together with another 3rd level chooser</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Tweaking the position of the "Ctrl" key -->
      <configItem>
        <name>ctrl</name>
        <description>Ctrl position</description>
      </configItem>
      <option>
        <configItem>
          <name>ctrl:nocaps</name>
          <description>Caps Lock as Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:lctrl_meta</name>
          <description>Left Ctrl as Meta</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swapcaps</name>
          <description>Swap Ctrl and Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swapcaps_hyper</name>
          <description>Caps Lock as Ctrl, Ctrl as Hyper</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:ac_ctrl</name>
          <description>To the left of "A"</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:aa_ctrl</name>
          <description>At the bottom left</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:rctrl_ralt</name>
          <description>Right Ctrl as Right Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:menu_rctrl</name>
          <description>Menu as Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swap_lalt_lctl</name>
          <description>Swap Left Alt with Left Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swap_lwin_lctl</name>
          <description>Swap Left Win with Left Ctrl</description>
        </configItem>
      </option><option>
        <configItem>
          <name>ctrl:swap_rwin_rctl</name>
          <description>Swap Right Win with Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swap_lalt_lctl_lwin</name>
          <description>Left Alt as Ctrl, Left Ctrl as Win, Left Win as Left Alt</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Using startard LEDs to indicate the alternative (not first) group(s) -->
      <configItem>
        <name>grp_led</name>
        <description>Use keyboard LED to show alternative layout</description>
      </configItem>
      <option>
        <configItem>
          <name>grp_led:num</name>
          <description>Num Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp_led:caps</name>
          <description>Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp_led:scroll</name>
          <description>Scroll Lock</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Using LEDs to indicate modifiers -->
      <configItem>
        <name>mod_led</name>
        <description>Use keyboard LED to indicate modifiers</description>
      </configItem>
      <option>
        <configItem>
          <name>mod_led:compose</name>
          <description>Compose</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="false">
      <!-- Select a keypad type -->
      <configItem>
        <name>keypad</name>
        <description>Layout of numeric keypad</description>
      </configItem>
      <option>
        <configItem>
          <name>keypad:legacy</name>
          <description>Legacy</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:oss</name>
          <description>Unicode arrows and math operators</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:future</name>
          <description>Unicode arrows and math operators on default level</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:legacy_wang</name>
          <description>Legacy Wang 724</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:oss_wang</name>
          <description>Wang 724 keypad with Unicode arrows and math operators</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:future_wang</name>
          <description>Wang 724 keypad with Unicode arrows and math operators on default level</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:hex</name>
          <description>Hexadecimal</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:atm</name>
          <description>Phone and ATM style</description>
       </configItem>
      </option>
    </group>
    <!-- This option should override the KPDL key defined in keypad; I hope it's declared in the right place -->
    <group allowMultipleSelection="false">
      <!-- Select a keypad KPDL variant -->
      <configItem>
        <name>kpdl</name>
        <description>Numeric keypad Delete behavior</description>
      </configItem>
      <option>
        <configItem>
          <!-- Actually, with KP_DECIMAL, as the old keypad(dot) -->
          <name>kpdl:dot</name>
          <description>Legacy key with dot</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:comma</name>
          <!-- Actually, with KP_SEPARATOR, as the old keypad(comma) -->
          <description>Legacy key with comma</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:dotoss</name>
          <description>Four-level key with dot</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:dotoss_latin9</name>
          <description>Four-level key with dot, Latin-9 only</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:commaoss</name>
          <description>Four-level key with comma</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:momayyezoss</name>
          <description>Four-level key with momayyez</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:kposs</name>
          <!-- This assumes the KP_ abstract symbols are actually useful for some apps
               The description needs to be rewritten -->
          <description>Four-level key with abstract separators</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:semi</name>
          <description>Semicolon on third level</description>
       </configItem>
      </option>
    </group>
    <group allowMultipleSelection="false">
      <!-- Caps Lock tweaks.
           "Internal" capitalization means capitalization using some internal tables.
           Otherwise "as Shift" - means using next group. -->
      <configItem>
        <name>caps</name>
        <description>Caps Lock behavior</description>
      </configItem>
      <option>
        <configItem>
          <name>caps:internal</name>
          <description>Caps Lock uses internal capitalization; Shift "pauses" Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:internal_nocancel</name>
          <description>Caps Lock uses internal capitalization; Shift does not affect Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:shift</name>
          <description>Caps Lock acts as Shift with locking; Shift "pauses" Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:shift_nocancel</name>
          <description>Caps Lock acts as Shift with locking; Shift does not affect Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:capslock</name>
          <description>Caps Lock toggles normal capitalization of alphabetic characters</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:shiftlock</name>
          <description>Caps Lock toggles Shift Lock (affects all keys)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:swapescape</name>
          <description>Swap Esc and Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:escape</name>
          <description>Make Caps Lock an additional Esc</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:escape_shifted_capslock</name>
          <description>Make Caps Lock an additional Esc, but Shift + Caps Lock is the regular Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:backspace</name>
          <description>Make Caps Lock an additional Backspace</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:super</name>
          <description>Make Caps Lock an additional Super</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:hyper</name>
          <description>Make Caps Lock an additional Hyper</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:menu</name>
          <description>Make Caps Lock an additional Menu key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:numlock</name>
          <description>Make Caps Lock an additional Num Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:ctrl_modifier</name>
          <description>Caps Lock is also a Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:none</name>
          <description>Caps Lock is disabled</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="false">
      <!-- Using special PC keys (Win, Menu) to work as standard X keys (Super, Hyper, etc.) -->
      <configItem>
        <name>altwin</name>
        <description>Alt and Win behavior</description>
      </configItem>
      <option>
        <configItem>
          <name>altwin:menu</name>
          <description>Add the standard behavior to Menu key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:menu_win</name>
          <description>Menu is mapped to Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:meta_alt</name>
          <description>Alt and Meta are on Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:alt_win</name>
          <description>Alt is mapped to Win and the usual Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:ctrl_win</name>
          <description>Ctrl is mapped to Win and the usual Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:ctrl_alt_win</name>
          <description>Ctrl is mapped to Alt, Alt to Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:meta_win</name>
          <description>Meta is mapped to Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:left_meta_win</name>
          <description>Meta is mapped to Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:hyper_win</name>
          <description>Hyper is mapped to Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:alt_super_win</name>
          <description>Alt is mapped to Right Win, Super to Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:swap_lalt_lwin</name>
          <description>Left Alt is swapped with Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:swap_alt_win</name>
          <description>Alt is swapped with Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:prtsc_rwin</name>
          <description>Win is mapped to PrtSc and the usual Win</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Tweaking the position of the "Compose" key: mapping to existing PC keys -->
      <configItem>
        <name>Compose key</name>
        <description>Position of Compose key</description>
      </configItem>
      <option>
        <configItem>
          <name>compose:ralt</name>
          <description>Right Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:lwin</name>
          <description>Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:lwin-altgr</name>
          <description>3rd level of Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:rwin</name>
          <description>Right Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:rwin-altgr</name>
          <description>3rd level of Right Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:menu</name>
          <description>Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:menu-altgr</name>
          <description>3rd level of Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:lctrl</name>
          <description>Left Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:lctrl-altgr</name>
          <description>3rd level of Left Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:rctrl</name>
          <description>Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:rctrl-altgr</name>
          <description>3rd level of Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:caps</name>
          <description>Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:caps-altgr</name>
          <description>3rd level of Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:102</name>
          <description>The "&lt; &gt;" key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:102-altgr</name>
          <description>3rd level of the "&lt; &gt;" key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:paus</name>
          <description>Pause</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:prsc</name>
          <description>PrtSc</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:sclk</name>
          <description>Scroll Lock</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>compat</name>
        <description>Compatibility options</description>
      </configItem>
      <option>
        <configItem>
          <name>numpad:pc</name>
          <description>Default numeric keypad keys</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>numpad:mac</name>
          <description>Numeric keypad always enters digits (as in macOS)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>numpad:microsoft</name>
          <description>Num Lock on: digits; Shift for arrows. Num Lock off: arrows (as in Windows)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>numpad:shift3</name>
          <description>Shift does not cancel Num Lock, chooses 3rd level instead</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>srvrkeys:none</name>
          <description>Special keys (Ctrl+Alt+&lt;key&gt;) handled in a server</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>apple:alupckeys</name>
          <description>Apple Aluminium emulates Pause, PrtSc, Scroll Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>shift:breaks_caps</name>
          <description>Shift cancels Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>misc:typo</name>
          <description>Enable extra typographic characters</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>misc:apl</name>
          <description>Enable APL overlay characters</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>shift:both_capslock</name>
          <description>Both Shift together enable Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>shift:both_capslock_cancel</name>
          <description>Both Shift together enable Caps Lock; one Shift key disables it</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>shift:both_shiftlock</name>
          <description>Both Shift together enable Shift Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:pointerkeys</name>
          <description>Shift + Num Lock enables PointerKeys</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grab:break_actions</name>
          <description>Allow breaking grabs with keyboard actions (warning: security risk)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grab:debug</name>
          <description>Allow grab and window tree logging</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Special shortcuts for the Euro character -->
      <configItem>
        <name>currencysign</name>
        <description>Currency signs</description>
      </configItem>
      <option>
        <configItem>
          <name>eurosign:e</name>
          <description>Euro on E</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>eurosign:2</name>
          <description>Euro on 2</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>eurosign:4</name>
          <description>Euro on 4</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>eurosign:5</name>
          <description>Euro on 5</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>rupeesign:4</name>
          <description>Rupee on 4</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>lv5</name>
        <description>Key to choose 5th level</description>
      </configItem>
      <option>
        <configItem>
          <name>lv5:lsgt_switch</name>
          <description>The "&lt; &gt;" key chooses 5th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:ralt_switch</name>
          <description>Right Alt chooses 5th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:lsgt_switch_lock</name>
          <description>The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:ralt_switch_lock</name>
          <description>Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:lwin_switch_lock</name>
          <description>Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:rwin_switch_lock</name>
          <description>Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
<!--
      <option>
        <configItem>
          <name>lv5:lsgt_switch_lock_cancel</name>
          <description>The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:ralt_switch_lock_cancel</name>
          <description>Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:lwin_switch_lock_cancel</name>
          <description>Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:rwin_switch_lock_cancel</name>
          <description>Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:lsgt_switch_lock_cancel</name>
          <description>The "&lt; &gt;" key chooses 5th level; acts as onetime lock lock when pressed together with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:ralt_switch_lock_cancel</name>
          <description>Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
-->
    </group>
    <group allowMultipleSelection="false">
      <!-- Let space output NBSP, NNBSP, ZWNJ, and ZWJ for the desired level -->
      <configItem>
        <name>nbsp</name>
        <description>Non-breaking space input</description>
      </configItem>
      <option>
        <configItem>
          <name>nbsp:none</name>
          <description>Usual space at any level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level2</name>
          <description>Non-breaking space at the 2nd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level3</name>
          <description>Non-breaking space at the 3rd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level3s</name>
          <description>Non-breaking space at the 3rd level, nothing at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level3n</name>
          <description>Non-breaking space at the 3rd level, thin non-breaking space at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level4</name>
          <description>Non-breaking space at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level4n</name>
          <description>Non-breaking space at the 4th level, thin non-breaking space at the 6th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level4nl</name>
          <description>Non-breaking space at the 4th level, thin non-breaking space at the 6th level (via Ctrl+Shift)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2</name>
          <description>Zero-width non-joiner at the 2nd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2zwj3</name>
          <description>Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2zwj3nb4</name>
          <description>Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level, non-breaking space at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2nb3</name>
          <description>Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2nb3s</name>
          <description>Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, nothing at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2nb3zwj4</name>
          <description>Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, zero-width joiner at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2nb3nnb4</name>
          <description>Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, thin non-breaking space at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj3zwj4</name>
          <description>Zero-width non-joiner at the 3rd level, zero-width joiner at the 4th level</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>japan</name>
        <description>Japanese keyboard options</description>
      </configItem>
      <option>
        <configItem>
          <name>japan:kana_lock</name>
          <description>Kana Lock key is locking</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>japan:nicola_f_bs</name>
          <description>NICOLA-F style Backspace</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>japan:hztg_escape</name>
          <description>Make Zenkaku Hankaku an additional Esc</description>
       </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>korean</name>
        <description>Korean Hangul/Hanja keys</description>
      </configItem>
      <option>
        <configItem>
          <name>korean:ralt_hangul</name>
          <description>Make right Alt a Hangul key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>korean:rctrl_hangul</name>
          <description>Make right Ctrl a Hangul key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>korean:ralt_hanja</name>
          <description>Make right Alt a Hanja key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>korean:rctrl_hanja</name>
          <description>Make right Ctrl a Hanja key</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="false">
      <configItem>
        <name>esperanto</name>
        <description>Esperanto letters with superscripts</description>
      </configItem>
      <option>
        <configItem>
          <name>esperanto:qwerty</name>
          <description>At the corresponding key in a QWERTY layout</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>esperanto:dvorak</name>
          <description>At the corresponding key in a Dvorak layout</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>esperanto:colemak</name>
          <description>At the corresponding key in a Colemak layout</description>
       </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>solaris</name>
        <description>Old Solaris keycodes compatibility</description>
      </configItem>
      <option>
        <configItem>
          <name>solaris:sun_compat</name>
          <description>Sun key compatibility</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>terminate</name>
        <description>Key sequence to kill the X server</description>
      </configItem>
      <option>
        <configItem>
          <name>terminate:ctrl_alt_bksp</name>
          <description>Ctrl+Alt+Backspace</description>
        </configItem>
      </option>
    </group>
  </optionList>
</xkbConfigRegistry>
<?xml version="1.0" encoding="UTF-8"?>

<!--

  Description: XKB configuration file DTD
  Author: Sergey V. Udaltsov

-->

<!ELEMENT xkbConfigRegistry (modelList,layoutList,optionList)>

<!ATTLIST xkbConfigRegistry 
          version CDATA "1.1">

<!ELEMENT modelList (model*)>

<!ELEMENT model (configItem)>

<!ELEMENT layoutList (layout*)>

<!ELEMENT layout (configItem,variantList?)>

<!ELEMENT optionList (group*)>

<!ELEMENT variantList (variant*)>

<!ELEMENT variant (configItem)>

<!ELEMENT group (configItem,option*)>
<!ATTLIST group
          allowMultipleSelection (true|false) "false">

<!ELEMENT option (configItem)>

<!ELEMENT configItem (name,shortDescription?,description?,vendor?,countryList?,languageList?,hwList?)>

<!ATTLIST configItem
          popularity (standard|exotic) "standard">

<!ELEMENT name (#PCDATA)>

<!ELEMENT shortDescription (#PCDATA)>

<!ELEMENT description (#PCDATA)>

<!ELEMENT vendor (#PCDATA)>

<!ELEMENT countryList (iso3166Id+)>

<!ELEMENT iso3166Id (#PCDATA)>

<!ELEMENT languageList (iso639Id+)>

<!ELEMENT iso639Id (#PCDATA)>

<!ELEMENT hwList (hwId+)>

<!ELEMENT hwId (#PCDATA)>
! model
  pc86            Generic 86-key PC
  pc101           Generic 101-key PC
  pc102           Generic 102-key PC
  pc104           Generic 104-key PC
  pc104alt        Generic 104-key PC with L-shaped Enter key
  pc105           Generic 105-key PC
  dell101         Dell 101-key PC
  latitude        Dell Latitude laptop
  dellm65         Dell Precision M65 laptop
  everex          Everex STEPnote
  flexpro         Keytronic FlexPro
  microsoft       Microsoft Natural
  omnikey101      Northgate OmniKey 101
  winbook         Winbook Model XP5
  pc98            PC-98
  a4techKB21      A4Tech KB-21
  a4techKBS8      A4Tech KBS-8
  a4_rfkb23       A4Tech Wireless Desktop RFKB-23
  airkey          Acer AirKey V
  azonaRF2300     Azona RF2300 wireless Internet
  scorpius        Advance Scorpius KI
  brother         Brother Internet
  btc5113rf       BTC 5113RF Multimedia
  btc5126t        BTC 5126T
  btc6301urf      BTC 6301URF
  btc9000         BTC 9000
  btc9000a        BTC 9000A
  btc9001ah       BTC 9001AH
  btc5090         BTC 5090
  btc9019u        BTC 9019U
  btc9116u        BTC 9116U Mini Wireless Internet and Gaming
  cherryblue      Cherry Blue Line CyBo@rd
  cherryblueb     Cherry CyMotion Master XPress
  cherrybluea     Cherry Blue Line CyBo@rd (alt.)
  cherrycyboard   Cherry CyBo@rd USB-Hub
  cherrycmexpert  Cherry CyMotion Expert
  cherrybunlim    Cherry B.UNLIMITED
  chicony         Chicony Internet
  chicony0108     Chicony KU-0108
  chicony0420     Chicony KU-0420
  chicony9885     Chicony KB-9885
  compaqeak8      Compaq Easy Access
  compaqik7       Compaq Internet (7 keys)
  compaqik13      Compaq Internet (13 keys)
  compaqik18      Compaq Internet (18 keys)
  cymotionlinux   Cherry CyMotion Master Linux
  armada          Compaq Armada laptop
  presario        Compaq Presario laptop
  ipaq            Compaq iPaq
  dell            Dell
  dellsk8125      Dell SK-8125
  dellsk8135      Dell SK-8135
  dellusbmm       Dell USB Multimedia
  inspiron        Dell Inspiron 6000/8000 laptop
  precision_m     Dell Precision M laptop
  dexxa           Dexxa Wireless Desktop
  diamond         Diamond 9801/9802
  dtk2000         DTK2000
  ennyah_dkb1008  Ennyah DKB-1008
  fscaa1667g      Fujitsu-Siemens Amilo laptop
  genius          Genius Comfy KB-16M/Multimedia KWD-910
  geniuscomfy     Genius Comfy KB-12e
  geniuscomfy2    Genius Comfy KB-21e-Scroll
  geniuskb19e     Genius KB-19e NB
  geniuskkb2050hs Genius KKB-2050HS
  gyration        Gyration
  kinesis         Kinesis
  logitech_base   Logitech
  logitech_g15    Logitech G15 extra keys via G15daemon
  hpi6            Hewlett-Packard Internet
  hp250x          Hewlett-Packard NEC SK-2500 Multimedia
  hpxe3gc         Hewlett-Packard Omnibook XE3 GC
  hpxe3gf         Hewlett-Packard Omnibook XE3 GF
  hpxt1000        Hewlett-Packard Omnibook XT1000
  hpdv5           Hewlett-Packard Pavilion dv5
  hpzt11xx        Hewlett-Packard Pavilion ZT1100
  hp500fa         Hewlett-Packard Omnibook 500 FA
  hp5xx           Hewlett-Packard Omnibook 500
  hpnx9020        Hewlett-Packard nx9020
  hp6000          Hewlett-Packard Omnibook 6000/6100
  honeywell_euroboard Honeywell Euroboard
  hpmini110       Hewlett-Packard Mini 110 laptop
  rapidaccess     IBM Rapid Access
  rapidaccess2    IBM Rapid Access II
  thinkpad        IBM ThinkPad 560Z/600/600E/A22E
  thinkpad60      IBM ThinkPad R60/T60/R61/T61
  thinkpadz60     IBM ThinkPad Z60m/Z60t/Z61m/Z61t
  ibm_spacesaver  IBM Space Saver
  logiaccess      Logitech Access
  logiclx300      Logitech Cordless Desktop LX-300
  logii350        Logitech Internet 350
  logimel         Logitech Internet 350
  logicd          Logitech Cordless Desktop
  logicd_it       Logitech Cordless Desktop iTouch
  logicd_nav      Logitech Cordless Desktop Navigator
  logicd_opt      Logitech Cordless Desktop Optical
  logicda         Logitech Cordless Desktop (alt.)
  logicdpa2       Logitech Cordless Desktop Pro (2nd alt.)
  logicfn         Logitech Cordless Freedom/Desktop Navigator
  logicdn         Logitech Cordless Desktop Navigator
  logiitc         Logitech iTouch Cordless Y-RB6
  logiik          Logitech Internet
  itouch          Logitech iTouch
  logicink        Logitech Internet Navigator
  logiex110       Logitech Cordless Desktop EX110
  logiinkse       Logitech iTouch Internet Navigator SE
  logiinkseusb    Logitech iTouch Internet Navigator SE USB
  logiultrax      Logitech Ultra-X
  logiultraxc     Logitech Ultra-X Cordless Media Desktop
  logidinovo      Logitech diNovo
  logidinovoedge  Logitech diNovo Edge
  mx1998          Memorex MX1998
  mx2500          Memorex MX2500 EZ-Access
  mx2750          Memorex MX2750
  microsoft4000   Microsoft Natural Ergonomic 4000
  microsoft7000   Microsoft Natural Wireless Ergonomic 7000
  microsoftinet   Microsoft Internet
  microsoftpro    Microsoft Natural Pro/Internet Pro
  microsoftprousb Microsoft Natural Pro USB/Internet Pro
  microsoftprooem Microsoft Natural Pro OEM
  vsonku306       ViewSonic KU-306 Internet
  microsoftprose  Microsoft Internet Pro (Swedish)
  microsoftoffice Microsoft Office Keyboard
  microsoftmult   Microsoft Wireless Multimedia 1.0A
  microsoftsurface Microsoft Surface
  microsoftelite  Microsoft Natural Elite
  microsoftccurve2k Microsoft Comfort Curve 2000
  oretec          Ortek Multimedia/Internet MCK-800
  propeller       Propeller Voyager KTEZ-1000
  qtronix         QTronix Scorpius 98N+
  samsung4500     Samsung SDM 4500P
  samsung4510     Samsung SDM 4510P
  sanwaskbkg3     Sanwa Supply SKB-KG3
  sk1300          NEC SK-1300
  sk2500          NEC SK-2500
  sk6200          NEC SK-6200
  sk7100          NEC SK-7100
  sp_inet         Super Power Multimedia
  sven            SVEN Ergonomic 2500
  sven303         SVEN Slim 303
  symplon         Symplon PaceBook tablet
  toshiba_s3000   Toshiba Satellite S3000
  trust           Trust Wireless Classic
  trustda         Trust Direct Access
  trust_slimline  Trust Slimline
  tm2020          TypeMatrix EZ-Reach 2020
  tm2030PS2       TypeMatrix EZ-Reach 2030 PS2
  tm2030USB       TypeMatrix EZ-Reach 2030 USB
  tm2030USB-102   TypeMatrix EZ-Reach 2030 USB (102/105:EU mode)
  tm2030USB-106   TypeMatrix EZ-Reach 2030 USB (106:JP mode)
  yahoo           Yahoo! Internet
  macbook78       MacBook/MacBook Pro
  macbook79       MacBook/MacBook Pro (intl.)
  macintosh       Macintosh
  macintosh_old   Macintosh Old
  macintosh_hhk   Happy Hacking for Mac
  acer_c300       Acer C300
  acer_ferrari4k  Acer Ferrari 4000
  acer_laptop     Acer laptop
  asus_laptop     Asus laptop
  apple           Apple
  apple_laptop    Apple laptop
  applealu_ansi   Apple Aluminium (ANSI)
  applealu_iso    Apple Aluminium (ISO)
  applealu_jis    Apple Aluminium (JIS)
  silvercrest     Silvercrest Multimedia Wireless
  emachines       eMachines m6800 laptop
  benqx           BenQ X-Touch
  benqx730        BenQ X-Touch 730
  benqx800        BenQ X-Touch 800
  hhk             Happy Hacking
  classmate       Classmate PC
  olpc            OLPC
  sun_type7_usb   Sun Type 7 USB
  sun_type7_euro_usb Sun Type 7 USB (European)
  sun_type7_unix_usb Sun Type 7 USB (Unix)
  sun_type7_jp_usb Sun Type 7 USB (Japanese)/Japanese 106-key
  sun_type6_usb   Sun Type 6/7 USB
  sun_type6_euro_usb Sun Type 6/7 USB (European)
  sun_type6_unix_usb Sun Type 6 USB (Unix)
  sun_type6_jp_usb Sun Type 6 USB (Japanese)
  sun_type6_jp    Sun Type 6 (Japanese)
  targa_v811      Targa Visionary 811
  unitekkb1925    Unitek KB-1925
  compalfl90      FL90
  creativedw7000  Creative Desktop Wireless 7000
  teck227         Truly Ergonomic 227
  teck229         Truly Ergonomic 229
  apex300         SteelSeries Apex 300 (Apex RAW)
  chromebook      Chromebook

! layout
  us              English (US)
  af              Afghani
  ara             Arabic
  al              Albanian
  am              Armenian
  at              German (Austria)
  au              English (Australian)
  az              Azerbaijani
  by              Belarusian
  be              Belgian
  bd              Bangla
  in              Indian
  ba              Bosnian
  br              Portuguese (Brazil)
  bg              Bulgarian
  dz              Kabyle (azerty layout, no dead keys)
  ma              Arabic (Morocco)
  cm              English (Cameroon)
  mm              Burmese
  ca              French (Canada)
  cd              French (Democratic Republic of the Congo)
  cn              Chinese
  hr              Croatian
  cz              Czech
  dk              Danish
  nl              Dutch
  bt              Dzongkha
  ee              Estonian
  ir              Persian
  iq              Iraqi
  fo              Faroese
  fi              Finnish
  fr              French
  gh              English (Ghana)
  gn              French (Guinea)
  ge              Georgian
  de              German
  gr              Greek
  hu              Hungarian
  is              Icelandic
  il              Hebrew
  it              Italian
  jp              Japanese
  kg              Kyrgyz
  kh              Khmer (Cambodia)
  kz              Kazakh
  la              Lao
  latam           Spanish (Latin American)
  lt              Lithuanian
  lv              Latvian
  mao             Maori
  me              Montenegrin
  mk              Macedonian
  mt              Maltese
  mn              Mongolian
  no              Norwegian
  pl              Polish
  pt              Portuguese
  ro              Romanian
  ru              Russian
  rs              Serbian
  si              Slovenian
  sk              Slovak
  es              Spanish
  se              Swedish
  ch              German (Switzerland)
  sy              Arabic (Syria)
  tj              Tajik
  lk              Sinhala (phonetic)
  th              Thai
  tr              Turkish
  tw              Taiwanese
  ua              Ukrainian
  gb              English (UK)
  uz              Uzbek
  vn              Vietnamese
  kr              Korean
  nec_vndr/jp     Japanese (PC-98)
  ie              Irish
  pk              Urdu (Pakistan)
  mv              Dhivehi
  za              English (South Africa)
  epo             Esperanto
  np              Nepali
  ng              English (Nigeria)
  et              Amharic
  sn              Wolof
  brai            Braille
  tm              Turkmen
  ml              Bambara
  tz              Swahili (Tanzania)
  tg              French (Togo)
  ke              Swahili (Kenya)
  bw              Tswana
  ph              Filipino
  md              Moldavian
  id              Indonesian (Arab Melayu, phonetic)
  jv              Indonesian (Javanese)
  my              Malay (Jawi, Arabic Keyboard)

! variant
  chr             us: Cherokee
  haw             us: Hawaiian
  euro            us: English (US, euro on 5)
  intl            us: English (US, intl., with dead keys)
  alt-intl        us: English (US, alt. intl.)
  colemak         us: English (Colemak)
  dvorak          us: English (Dvorak)
  dvorak-intl     us: English (Dvorak, intl., with dead keys)
  dvorak-alt-intl us: English (Dvorak, alt. intl.)
  dvorak-l        us: English (Dvorak, left-handed)
  dvorak-r        us: English (Dvorak, right-handed)
  dvorak-classic  us: English (classic Dvorak)
  dvp             us: English (programmer Dvorak)
  symbolic        us: English (US, Symbolic)
  rus             us: Russian (US, phonetic)
  mac             us: English (Macintosh)
  altgr-intl      us: English (intl., with AltGr dead keys)
  olpc2           us: English (the divide/multiply toggle the layout)
  hbs             us: Serbo-Croatian (US)
  norman          us: English (Norman)
  workman         us: English (Workman)
  workman-intl    us: English (Workman, intl., with dead keys)
  ps              af: Pashto
  uz              af: Uzbek (Afghanistan)
  olpc-ps         af: Pashto (Afghanistan, OLPC)
  fa-olpc         af: Persian (Afghanistan, Dari OLPC)
  uz-olpc         af: Uzbek (Afghanistan, OLPC)
  azerty          ara: Arabic (AZERTY)
  azerty_digits   ara: Arabic (AZERTY, Eastern Arabic numerals)
  digits          ara: Arabic (Eastern Arabic numerals)
  qwerty          ara: Arabic (QWERTY)
  qwerty_digits   ara: Arabic (QWERTY, Eastern Arabic numerals)
  buckwalter      ara: Arabic (Buckwalter)
  olpc            ara: Arabic (OLPC)
  mac             ara: Arabic (Macintosh)
  plisi           al: Albanian (Plisi)
  veqilharxhi     al: Albanian (Veqilharxhi)
  phonetic        am: Armenian (phonetic)
  phonetic-alt    am: Armenian (alt. phonetic)
  eastern         am: Armenian (eastern)
  western         am: Armenian (western)
  eastern-alt     am: Armenian (alt. eastern)
  nodeadkeys      at: German (Austria, no dead keys)
  mac             at: German (Austria, Macintosh)
  cyrillic        az: Azerbaijani (Cyrillic)
  legacy          by: Belarusian (legacy)
  latin           by: Belarusian (Latin)
  ru              by: Russian (Belarus)
  intl            by: Belarusian (intl.)
  oss             be: Belgian (alt.)
  oss_latin9      be: Belgian (Latin-9 only, alt.)
  oss_sundeadkeys be: Belgian (Sun dead keys, alt.)
  iso-alternate   be: Belgian (ISO, alt.)
  nodeadkeys      be: Belgian (no dead keys)
  sundeadkeys     be: Belgian (Sun dead keys)
  wang            be: Belgian (Wang 724 AZERTY)
  probhat         bd: Bangla (Probhat)
  ben             in: Bangla (India)
  ben_probhat     in: Bangla (India, Probhat)
  ben_baishakhi   in: Bangla (India, Baishakhi)
  ben_bornona     in: Bangla (India, Bornona)
  ben_gitanjali   in: Bangla (India, Gitanjali)
  ben_inscript    in: Bangla (India, Baishakhi Inscript)
  eeyek           in: Manipuri (Eeyek)
  guj             in: Gujarati
  guru            in: Punjabi (Gurmukhi)
  jhelum          in: Punjabi (Gurmukhi Jhelum)
  kan             in: Kannada
  kan-kagapa      in: Kannada (KaGaPa, phonetic)
  mal             in: Malayalam
  mal_lalitha     in: Malayalam (Lalitha)
  mal_enhanced    in: Malayalam (enhanced Inscript, with rupee)
  ori             in: Oriya
  olck            in: Ol Chiki
  tam_tamilnet    in: Tamil (TamilNet '99)
  tam_tamilnet_with_tam_nums in: Tamil (TamilNet '99 with Tamil numerals)
  tam_tamilnet_TAB in: Tamil (TamilNet '99, TAB encoding)
  tam_tamilnet_TSCII in: Tamil (TamilNet '99, TSCII encoding)
  tam             in: Tamil (Inscript)
  tel             in: Telugu
  tel-kagapa      in: Telugu (KaGaPa, phonetic)
  tel-sarala      in: Telugu (Sarala)
  urd-phonetic    in: Urdu (phonetic)
  urd-phonetic3   in: Urdu (alt. phonetic)
  urd-winkeys     in: Urdu (Windows)
  bolnagri        in: Hindi (Bolnagri)
  hin-wx          in: Hindi (Wx)
  hin-kagapa      in: Hindi (KaGaPa, phonetic)
  san-kagapa      in: Sanskrit (KaGaPa, phonetic)
  mar-kagapa      in: Marathi (KaGaPa, phonetic)
  eng             in: English (India, with rupee)
  iipa            in: Indic IPA
  marathi         in: Marathi (enhanced Inscript)
  alternatequotes ba: Bosnian (with guillemets)
  unicode         ba: Bosnian (with Bosnian digraphs)
  unicodeus       ba: Bosnian (US, with Bosnian digraphs)
  us              ba: Bosnian (US)
  nodeadkeys      br: Portuguese (Brazil, no dead keys)
  dvorak          br: Portuguese (Brazil, Dvorak)
  nativo          br: Portuguese (Brazil, Nativo)
  nativo-us       br: Portuguese (Brazil, Nativo for US keyboards)
  nativo-epo      br: Esperanto (Brazil, Nativo)
  thinkpad        br: Portuguese (Brazil, IBM/Lenovo ThinkPad)
  phonetic        bg: Bulgarian (traditional phonetic)
  bas_phonetic    bg: Bulgarian (new phonetic)
  bekl            bg: Bulgarian (enhanced)
  azerty-deadkeys dz: Kabyle (azerty layout, with dead keys)
  qwerty-gb-deadkeys dz: Kabyle (qwerty-gb layout, with dead keys)
  qwerty-us-deadkeys dz: Kabyle (qwerty-us layout, with dead keys)
  ber             dz: Kabyle (Algeria, Tifinagh)
  ar              dz: Arabic (Algeria)
  french          ma: French (Morocco)
  tifinagh        ma: Berber (Morocco, Tifinagh)
  tifinagh-alt    ma: Berber (Morocco, Tifinagh alt.)
  tifinagh-alt-phonetic ma: Berber (Morocco, Tifinagh phonetic, alt.)
  tifinagh-extended ma: Berber (Morocco, Tifinagh extended)
  tifinagh-phonetic ma: Berber (Morocco, Tifinagh phonetic)
  tifinagh-extended-phonetic ma: Berber (Morocco, Tifinagh extended phonetic)
  french          cm: French (Cameroon)
  qwerty          cm: Cameroon Multilingual (QWERTY, intl.)
  azerty          cm: Cameroon (AZERTY, intl.)
  dvorak          cm: Cameroon (Dvorak, intl.)
  mmuock          cm: Mmuock
  zawgyi          mm: Burmese Zawgyi
  fr-dvorak       ca: French (Canada, Dvorak)
  fr-legacy       ca: French (Canada, legacy)
  multix          ca: Canadian (intl.)
  multi           ca: Canadian (intl., 1st part)
  multi-2gr       ca: Canadian (intl., 2nd part)
  ike             ca: Inuktitut
  eng             ca: English (Canada)
  mon_trad        cn: Mongolian (Bichig)
  mon_trad_todo   cn: Mongolian (Todo)
  mon_trad_xibe   cn: Mongolian (Xibe)
  mon_trad_manchu cn: Mongolian (Manchu)
  mon_trad_galik  cn: Mongolian (Galik)
  mon_todo_galik  cn: Mongolian (Todo Galik)
  mon_manchu_galik cn: Mongolian (Manchu Galik)
  tib             cn: Tibetan
  tib_asciinum    cn: Tibetan (with ASCII numerals)
  ug              cn: Uyghur
  altgr-pinyin    cn: Hanyu Pinyin (with AltGr dead keys)
  alternatequotes hr: Croatian (with guillemets)
  unicode         hr: Croatian (with Croatian digraphs)
  unicodeus       hr: Croatian (US, with Croatian digraphs)
  us              hr: Croatian (US)
  bksl            cz: Czech (with &lt;\|&gt; key)
  qwerty          cz: Czech (QWERTY)
  qwerty_bksl     cz: Czech (QWERTY, extended backslash)
  qwerty-mac      cz: Czech (QWERTY, Macintosh)
  ucw             cz: Czech (UCW, only accented letters)
  dvorak-ucw      cz: Czech (US, Dvorak, UCW support)
  rus             cz: Russian (Czech, phonetic)
  nodeadkeys      dk: Danish (no dead keys)
  winkeys         dk: Danish (Windows)
  mac             dk: Danish (Macintosh)
  mac_nodeadkeys  dk: Danish (Macintosh, no dead keys)
  dvorak          dk: Danish (Dvorak)
  mac             nl: Dutch (Macintosh)
  std             nl: Dutch (standard)
  nodeadkeys      ee: Estonian (no dead keys)
  dvorak          ee: Estonian (Dvorak)
  us              ee: Estonian (US)
  pes_keypad      ir: Persian (with Persian keypad)
  ku              ir: Kurdish (Iran, Latin Q)
  ku_f            ir: Kurdish (Iran, F)
  ku_alt          ir: Kurdish (Iran, Latin Alt-Q)
  ku_ara          ir: Kurdish (Iran, Arabic-Latin)
  ku              iq: Kurdish (Iraq, Latin Q)
  ku_f            iq: Kurdish (Iraq, F)
  ku_alt          iq: Kurdish (Iraq, Latin Alt-Q)
  ku_ara          iq: Kurdish (Iraq, Arabic-Latin)
  nodeadkeys      fo: Faroese (no dead keys)
  winkeys         fi: Finnish (Windows)
  classic         fi: Finnish (classic)
  nodeadkeys      fi: Finnish (classic, no dead keys)
  smi             fi: Northern Saami (Finland)
  mac             fi: Finnish (Macintosh)
  nodeadkeys      fr: French (no dead keys)
  sundeadkeys     fr: French (Sun dead keys)
  oss             fr: French (alt.)
  oss_latin9      fr: French (alt., Latin-9 only)
  oss_nodeadkeys  fr: French (alt., no dead keys)
  oss_sundeadkeys fr: French (alt., Sun dead keys)
  latin9          fr: French (legacy, alt.)
  latin9_nodeadkeys fr: French (legacy, alt., no dead keys)
  latin9_sundeadkeys fr: French (legacy, alt., Sun dead keys)
  bepo            fr: French (BEPO)
  bepo_latin9     fr: French (BEPO, Latin-9 only)
  bepo_afnor      fr: French (BEPO, AFNOR)
  dvorak          fr: French (Dvorak)
  mac             fr: French (Macintosh)
  azerty          fr: French (AZERTY)
  afnor           fr: French (AZERTY, AFNOR)
  bre             fr: French (Breton)
  oci             fr: Occitan
  geo             fr: Georgian (France, AZERTY Tskapo)
  us              fr: French (US)
  generic         gh: English (Ghana, multilingual)
  akan            gh: Akan
  ewe             gh: Ewe
  fula            gh: Fula
  ga              gh: Ga
  hausa           gh: Hausa (Ghana)
  avn             gh: Avatime
  gillbt          gh: English (Ghana, GILLBT)
  ergonomic       ge: Georgian (ergonomic)
  mess            ge: Georgian (MESS)
  ru              ge: Russian (Georgia)
  os              ge: Ossetian (Georgia)
  deadacute       de: German (dead acute)
  deadgraveacute  de: German (dead grave acute)
  nodeadkeys      de: German (no dead keys)
  e1              de: German (E1)
  e2              de: German (E2)
  T3              de: German (T3)
  us              de: German (US)
  ro              de: Romanian (Germany)
  ro_nodeadkeys   de: Romanian (Germany, no dead keys)
  dvorak          de: German (Dvorak)
  neo             de: German (Neo 2)
  mac             de: German (Macintosh)
  mac_nodeadkeys  de: German (Macintosh, no dead keys)
  dsb             de: Lower Sorbian
  dsb_qwertz      de: Lower Sorbian (QWERTZ)
  qwerty          de: German (QWERTY)
  tr              de: Turkish (Germany)
  ru              de: Russian (Germany, phonetic)
  deadtilde       de: German (dead tilde)
  simple          gr: Greek (simple)
  extended        gr: Greek (extended)
  nodeadkeys      gr: Greek (no dead keys)
  polytonic       gr: Greek (polytonic)
  standard        hu: Hungarian (standard)
  nodeadkeys      hu: Hungarian (no dead keys)
  qwerty          hu: Hungarian (QWERTY)
  101_qwertz_comma_dead hu: Hungarian (QWERTZ, 101-key, comma, dead keys)
  101_qwertz_comma_nodead hu: Hungarian (QWERTZ, 101-key, comma, no dead keys)
  101_qwertz_dot_dead hu: Hungarian (QWERTZ, 101-key, dot, dead keys)
  101_qwertz_dot_nodead hu: Hungarian (QWERTZ, 101-key, dot, no dead keys)
  101_qwerty_comma_dead hu: Hungarian (QWERTY, 101-key, comma, dead keys)
  101_qwerty_comma_nodead hu: Hungarian (QWERTY, 101-key, comma, no dead keys)
  101_qwerty_dot_dead hu: Hungarian (QWERTY, 101-key, dot, dead keys)
  101_qwerty_dot_nodead hu: Hungarian (QWERTY, 101-key, dot, no dead keys)
  102_qwertz_comma_dead hu: Hungarian (QWERTZ, 102-key, comma, dead keys)
  102_qwertz_comma_nodead hu: Hungarian (QWERTZ, 102-key, comma, no dead keys)
  102_qwertz_dot_dead hu: Hungarian (QWERTZ, 102-key, dot, dead keys)
  102_qwertz_dot_nodead hu: Hungarian (QWERTZ, 102-key, dot, no dead keys)
  102_qwerty_comma_dead hu: Hungarian (QWERTY, 102-key, comma, dead keys)
  102_qwerty_comma_nodead hu: Hungarian (QWERTY, 102-key, comma, no dead keys)
  102_qwerty_dot_dead hu: Hungarian (QWERTY, 102-key, dot, dead keys)
  102_qwerty_dot_nodead hu: Hungarian (QWERTY, 102-key, dot, no dead keys)
  Sundeadkeys     is: Icelandic (Sun dead keys)
  nodeadkeys      is: Icelandic (no dead keys)
  mac_legacy      is: Icelandic (Macintosh, legacy)
  mac             is: Icelandic (Macintosh)
  dvorak          is: Icelandic (Dvorak)
  lyx             il: Hebrew (lyx)
  phonetic        il: Hebrew (phonetic)
  biblical        il: Hebrew (Biblical, Tiro)
  nodeadkeys      it: Italian (no dead keys)
  winkeys         it: Italian (Windows)
  mac             it: Italian (Macintosh)
  us              it: Italian (US)
  geo             it: Georgian (Italy)
  ibm             it: Italian (IBM 142)
  intl            it: Italian (intl., with dead keys)
  scn             it: Sicilian
  fur             it: Friulian (Italy)
  kana            jp: Japanese (Kana)
  kana86          jp: Japanese (Kana 86)
  OADG109A        jp: Japanese (OADG 109A)
  mac             jp: Japanese (Macintosh)
  dvorak          jp: Japanese (Dvorak)
  phonetic        kg: Kyrgyz (phonetic)
  ruskaz          kz: Russian (Kazakhstan, with Kazakh)
  kazrus          kz: Kazakh (with Russian)
  ext             kz: Kazakh (extended)
  latin           kz: Kazakh (Latin)
  stea            la: Lao (STEA)
  nodeadkeys      latam: Spanish (Latin American, no dead keys)
  deadtilde       latam: Spanish (Latin American, dead tilde)
  sundeadkeys     latam: Spanish (Latin American, Sun dead keys)
  dvorak          latam: Spanish (Latin American, Dvorak)
  colemak         latam: Spanish (Latin American, Colemak)
  colemak-gaming  latam: Spanish (Latin American, Colemak for gaming)
  std             lt: Lithuanian (standard)
  us              lt: Lithuanian (US)
  ibm             lt: Lithuanian (IBM LST 1205-92)
  lekp            lt: Lithuanian (LEKP)
  lekpa           lt: Lithuanian (LEKPa)
  sgs             lt: Samogitian
  apostrophe      lv: Latvian (apostrophe)
  tilde           lv: Latvian (tilde)
  fkey            lv: Latvian (F)
  modern          lv: Latvian (modern)
  ergonomic       lv: Latvian (ergonomic, ŪGJRMV)
  adapted         lv: Latvian (adapted)
  cyrillic        me: Montenegrin (Cyrillic)
  cyrillicyz      me: Montenegrin (Cyrillic, ZE and ZHE swapped)
  latinunicode    me: Montenegrin (Latin, Unicode)
  latinyz         me: Montenegrin (Latin, QWERTY)
  latinunicodeyz  me: Montenegrin (Latin, Unicode, QWERTY)
  cyrillicalternatequotes me: Montenegrin (Cyrillic, with guillemets)
  latinalternatequotes me: Montenegrin (Latin, with guillemets)
  nodeadkeys      mk: Macedonian (no dead keys)
  us              mt: Maltese (US)
  alt-us          mt: Maltese (US layout with AltGr overrides)
  alt-gb          mt: Maltese (UK, with AltGr overrides)
  nodeadkeys      no: Norwegian (no dead keys)
  winkeys         no: Norwegian (Windows)
  dvorak          no: Norwegian (Dvorak)
  smi             no: Northern Saami (Norway)
  smi_nodeadkeys  no: Northern Saami (Norway, no dead keys)
  mac             no: Norwegian (Macintosh)
  mac_nodeadkeys  no: Norwegian (Macintosh, no dead keys)
  colemak         no: Norwegian (Colemak)
  legacy          pl: Polish (legacy)
  qwertz          pl: Polish (QWERTZ)
  dvorak          pl: Polish (Dvorak)
  dvorak_quotes   pl: Polish (Dvorak, with Polish quotes on quotemark key)
  dvorak_altquotes pl: Polish (Dvorak, with Polish quotes on key 1)
  csb             pl: Kashubian
  szl             pl: Silesian
  ru_phonetic_dvorak pl: Russian (Poland, phonetic Dvorak)
  dvp             pl: Polish (programmer Dvorak)
  nodeadkeys      pt: Portuguese (no dead keys)
  sundeadkeys     pt: Portuguese (Sun dead keys)
  mac             pt: Portuguese (Macintosh)
  mac_nodeadkeys  pt: Portuguese (Macintosh, no dead keys)
  mac_sundeadkeys pt: Portuguese (Macintosh, Sun dead keys)
  nativo          pt: Portuguese (Nativo)
  nativo-us       pt: Portuguese (Nativo for US keyboards)
  nativo-epo      pt: Esperanto (Portugal, Nativo)
  std             ro: Romanian (standard)
  winkeys         ro: Romanian (Windows)
  phonetic        ru: Russian (phonetic)
  phonetic_winkeys ru: Russian (phonetic, Windows)
  phonetic_YAZHERTY ru: Russian (phonetic, YAZHERTY)
  typewriter      ru: Russian (typewriter)
  legacy          ru: Russian (legacy)
  typewriter-legacy ru: Russian (typewriter, legacy)
  tt              ru: Tatar
  os_legacy       ru: Ossetian (legacy)
  os_winkeys      ru: Ossetian (Windows)
  cv              ru: Chuvash
  cv_latin        ru: Chuvash (Latin)
  udm             ru: Udmurt
  kom             ru: Komi
  sah             ru: Yakut
  xal             ru: Kalmyk
  dos             ru: Russian (DOS)
  mac             ru: Russian (Macintosh)
  srp             ru: Serbian (Russia)
  bak             ru: Bashkirian
  chm             ru: Mari
  phonetic_azerty ru: Russian (phonetic, AZERTY)
  phonetic_dvorak ru: Russian (phonetic, Dvorak)
  phonetic_fr     ru: Russian (phonetic, French)
  yz              rs: Serbian (Cyrillic, ZE and ZHE swapped)
  latin           rs: Serbian (Latin)
  latinunicode    rs: Serbian (Latin, Unicode)
  latinyz         rs: Serbian (Latin, QWERTY)
  latinunicodeyz  rs: Serbian (Latin, Unicode, QWERTY)
  alternatequotes rs: Serbian (Cyrillic, with guillemets)
  latinalternatequotes rs: Serbian (Latin, with guillemets)
  rue             rs: Pannonian Rusyn
  alternatequotes si: Slovenian (with guillemets)
  us              si: Slovenian (US)
  bksl            sk: Slovak (extended backslash)
  qwerty          sk: Slovak (QWERTY)
  qwerty_bksl     sk: Slovak (QWERTY, extended backslash)
  nodeadkeys      es: Spanish (no dead keys)
  winkeys         es: Spanish (Windows)
  deadtilde       es: Spanish (dead tilde)
  sundeadkeys     es: Spanish (Sun dead keys)
  dvorak          es: Spanish (Dvorak)
  ast             es: Asturian (Spain, with bottom-dot H and L)
  cat             es: Catalan (Spain, with middle-dot L)
  mac             es: Spanish (Macintosh)
  nodeadkeys      se: Swedish (no dead keys)
  dvorak          se: Swedish (Dvorak)
  rus             se: Russian (Sweden, phonetic)
  rus_nodeadkeys  se: Russian (Sweden, phonetic, no dead keys)
  smi             se: Northern Saami (Sweden)
  mac             se: Swedish (Macintosh)
  svdvorak        se: Swedish (Svdvorak)
  us_dvorak       se: Swedish (Dvorak, intl.)
  us              se: Swedish (US)
  swl             se: Swedish Sign Language
  legacy          ch: German (Switzerland, legacy)
  de_nodeadkeys   ch: German (Switzerland, no dead keys)
  de_sundeadkeys  ch: German (Switzerland, Sun dead keys)
  fr              ch: French (Switzerland)
  fr_nodeadkeys   ch: French (Switzerland, no dead keys)
  fr_sundeadkeys  ch: French (Switzerland, Sun dead keys)
  fr_mac          ch: French (Switzerland, Macintosh)
  de_mac          ch: German (Switzerland, Macintosh)
  syc             sy: Syriac
  syc_phonetic    sy: Syriac (phonetic)
  ku              sy: Kurdish (Syria, Latin Q)
  ku_f            sy: Kurdish (Syria, F)
  ku_alt          sy: Kurdish (Syria, Latin Alt-Q)
  legacy          tj: Tajik (legacy)
  tam_unicode     lk: Tamil (Sri Lanka, TamilNet '99)
  tam_TAB         lk: Tamil (Sri Lanka, TamilNet '99, TAB encoding)
  us              lk: Sinhala (US)
  tis             th: Thai (TIS-820.2538)
  pat             th: Thai (Pattachote)
  f               tr: Turkish (F)
  alt             tr: Turkish (Alt-Q)
  ku              tr: Kurdish (Turkey, Latin Q)
  ku_f            tr: Kurdish (Turkey, F)
  ku_alt          tr: Kurdish (Turkey, Latin Alt-Q)
  intl            tr: Turkish (intl., with dead keys)
  crh             tr: Crimean Tatar (Turkish Q)
  crh_f           tr: Crimean Tatar (Turkish F)
  crh_alt         tr: Crimean Tatar (Turkish Alt-Q)
  indigenous      tw: Taiwanese (indigenous)
  saisiyat        tw: Saisiyat (Taiwan)
  phonetic        ua: Ukrainian (phonetic)
  typewriter      ua: Ukrainian (typewriter)
  winkeys         ua: Ukrainian (Windows)
  legacy          ua: Ukrainian (legacy)
  rstu            ua: Ukrainian (standard RSTU)
  rstu_ru         ua: Russian (Ukraine, standard RSTU)
  homophonic      ua: Ukrainian (homophonic)
  extd            gb: English (UK, extended, Windows)
  intl            gb: English (UK, intl., with dead keys)
  dvorak          gb: English (UK, Dvorak)
  dvorakukp       gb: English (UK, Dvorak, with UK punctuation)
  mac             gb: English (UK, Macintosh)
  mac_intl        gb: English (UK, Macintosh, intl.)
  colemak         gb: English (UK, Colemak)
  pl              gb: Polish (British keyboard)
  latin           uz: Uzbek (Latin)
  us              vn: Vietnamese (US)
  fr              vn: Vietnamese (French)
  kr104           kr: Korean (101/104-key compatible)
  CloGaelach      ie: CloGaelach
  UnicodeExpert   ie: Irish (UnicodeExpert)
  ogam            ie: Ogham
  ogam_is434      ie: Ogham (IS434)
  urd-crulp       pk: Urdu (Pakistan, CRULP)
  urd-nla         pk: Urdu (Pakistan, NLA)
  ara             pk: Arabic (Pakistan)
  snd             pk: Sindhi
  legacy          epo: Esperanto (legacy)
  igbo            ng: Igbo
  yoruba          ng: Yoruba
  hausa           ng: Hausa (Nigeria)
  left_hand       brai: Braille (left-handed)
  left_hand_invert brai: Braille (left-handed inverted thumb)
  right_hand      brai: Braille (right-handed)
  right_hand_invert brai: Braille (right-handed inverted thumb)
  alt             tm: Turkmen (Alt-Q)
  fr-oss          ml: French (Mali, alt.)
  us-mac          ml: English (Mali, US, Macintosh)
  us-intl         ml: English (Mali, US, intl.)
  kik             ke: Kikuyu
  qwerty-bay      ph: Filipino (QWERTY, Baybayin)
  capewell-dvorak ph: Filipino (Capewell-Dvorak, Latin)
  capewell-dvorak-bay ph: Filipino (Capewell-Dvorak, Baybayin)
  capewell-qwerf2k6 ph: Filipino (Capewell-QWERF 2006, Latin)
  capewell-qwerf2k6-bay ph: Filipino (Capewell-QWERF 2006, Baybayin)
  colemak         ph: Filipino (Colemak, Latin)
  colemak-bay     ph: Filipino (Colemak, Baybayin)
  dvorak          ph: Filipino (Dvorak, Latin)
  dvorak-bay      ph: Filipino (Dvorak, Baybayin)
  gag             md: Moldavian (Gagauz)
  phoneticx       id: Indonesian (Arab Melayu, extended phonetic)
  phonetic        my: Malay (Jawi, phonetic)

! option
  grp                  Switching to another layout
  grp:switch           Right Alt (while pressed)
  grp:lswitch          Left Alt (while pressed)
  grp:lwin_switch      Left Win (while pressed)
  grp:rwin_switch      Right Win (while pressed)
  grp:win_switch       Any Win (while pressed)
  grp:menu_switch      Menu (while pressed), Shift+Menu for Menu
  grp:caps_switch      Caps Lock (while pressed), Alt+Caps Lock for the original Caps Lock action
  grp:rctrl_switch     Right Ctrl (while pressed)
  grp:toggle           Right Alt
  grp:lalt_toggle      Left Alt
  grp:caps_toggle      Caps Lock
  grp:shift_caps_toggle Shift+Caps Lock
  grp:shift_caps_switch Caps Lock to first layout; Shift+Caps Lock to last layout
  grp:win_menu_switch  Left Win to first layout; Right Win/Menu to last layout
  grp:lctrl_rctrl_switch Left Ctrl to first layout; Right Ctrl to last layout
  grp:alt_caps_toggle  Alt+Caps Lock
  grp:shifts_toggle    Both Shift together
  grp:alts_toggle      Both Alt together
  grp:ctrls_toggle     Both Ctrl together
  grp:ctrl_shift_toggle Ctrl+Shift
  grp:lctrl_lshift_toggle Left Ctrl+Left Shift
  grp:rctrl_rshift_toggle Right Ctrl+Right Shift
  grp:ctrl_alt_toggle  Alt+Ctrl
  grp:alt_shift_toggle Alt+Shift
  grp:lalt_lshift_toggle Left Alt+Left Shift
  grp:alt_space_toggle Alt+Space
  grp:menu_toggle      Menu
  grp:lwin_toggle      Left Win
  grp:win_space_toggle Win+Space
  grp:rwin_toggle      Right Win
  grp:lshift_toggle    Left Shift
  grp:rshift_toggle    Right Shift
  grp:lctrl_toggle     Left Ctrl
  grp:rctrl_toggle     Right Ctrl
  grp:sclk_toggle      Scroll Lock
  grp:lctrl_lwin_rctrl_menu Left Ctrl+Left Win to first layout; Right Ctrl+Menu to second layout
  grp:lctrl_lwin_toggle Left Ctrl+Left Win
  lv2                  Key to choose the 2nd level
  lv2:lsgt_switch      The "&lt; &gt;" key
  lv3                  Key to choose the 3rd level
  lv3:switch           Right Ctrl
  lv3:menu_switch      Menu
  lv3:win_switch       Any Win
  lv3:lwin_switch      Left Win
  lv3:rwin_switch      Right Win
  lv3:alt_switch       Any Alt
  lv3:lalt_switch      Left Alt
  lv3:ralt_switch      Right Alt
  lv3:ralt_switch_multikey Right Alt; Shift+Right Alt as Compose
  lv3:ralt_alt         Right Alt never chooses 3rd level
  lv3:enter_switch     Enter on keypad
  lv3:caps_switch      Caps Lock
  lv3:bksl_switch      Backslash
  lv3:lsgt_switch      The "&lt; &gt;" key
  lv3:caps_switch_latch Caps Lock; acts as onetime lock when pressed together with another 3rd-level chooser
  lv3:bksl_switch_latch Backslash; acts as onetime lock when pressed together with another 3rd level chooser
  lv3:lsgt_switch_latch The "&lt; &gt;" key; acts as onetime lock when pressed together with another 3rd level chooser
  ctrl                 Ctrl position
  ctrl:nocaps          Caps Lock as Ctrl
  ctrl:lctrl_meta      Left Ctrl as Meta
  ctrl:swapcaps        Swap Ctrl and Caps Lock
  ctrl:swapcaps_hyper  Caps Lock as Ctrl, Ctrl as Hyper
  ctrl:ac_ctrl         To the left of "A"
  ctrl:aa_ctrl         At the bottom left
  ctrl:rctrl_ralt      Right Ctrl as Right Alt
  ctrl:menu_rctrl      Menu as Right Ctrl
  ctrl:swap_lalt_lctl  Swap Left Alt with Left Ctrl
  ctrl:swap_lwin_lctl  Swap Left Win with Left Ctrl
  ctrl:swap_rwin_rctl  Swap Right Win with Right Ctrl
  ctrl:swap_lalt_lctl_lwin Left Alt as Ctrl, Left Ctrl as Win, Left Win as Left Alt
  grp_led              Use keyboard LED to show alternative layout
  grp_led:num          Num Lock
  grp_led:caps         Caps Lock
  grp_led:scroll       Scroll Lock
  mod_led              Use keyboard LED to indicate modifiers
  mod_led:compose      Compose
  keypad               Layout of numeric keypad
  keypad:legacy        Legacy
  keypad:oss           Unicode arrows and math operators
  keypad:future        Unicode arrows and math operators on default level
  keypad:legacy_wang   Legacy Wang 724
  keypad:oss_wang      Wang 724 keypad with Unicode arrows and math operators
  keypad:future_wang   Wang 724 keypad with Unicode arrows and math operators on default level
  keypad:hex           Hexadecimal
  keypad:atm           Phone and ATM style
  kpdl                 Numeric keypad Delete behavior
  kpdl:dot             Legacy key with dot
  kpdl:comma           Legacy key with comma
  kpdl:dotoss          Four-level key with dot
  kpdl:dotoss_latin9   Four-level key with dot, Latin-9 only
  kpdl:commaoss        Four-level key with comma
  kpdl:momayyezoss     Four-level key with momayyez
  kpdl:kposs           Four-level key with abstract separators
  kpdl:semi            Semicolon on third level
  caps                 Caps Lock behavior
  caps:internal        Caps Lock uses internal capitalization; Shift "pauses" Caps Lock
  caps:internal_nocancel Caps Lock uses internal capitalization; Shift does not affect Caps Lock
  caps:shift           Caps Lock acts as Shift with locking; Shift "pauses" Caps Lock
  caps:shift_nocancel  Caps Lock acts as Shift with locking; Shift does not affect Caps Lock
  caps:capslock        Caps Lock toggles normal capitalization of alphabetic characters
  caps:shiftlock       Caps Lock toggles Shift Lock (affects all keys)
  caps:swapescape      Swap Esc and Caps Lock
  caps:escape          Make Caps Lock an additional Esc
  caps:escape_shifted_capslock Make Caps Lock an additional Esc, but Shift + Caps Lock is the regular Caps Lock
  caps:backspace       Make Caps Lock an additional Backspace
  caps:super           Make Caps Lock an additional Super
  caps:hyper           Make Caps Lock an additional Hyper
  caps:menu            Make Caps Lock an additional Menu key
  caps:numlock         Make Caps Lock an additional Num Lock
  caps:ctrl_modifier   Caps Lock is also a Ctrl
  caps:none            Caps Lock is disabled
  altwin               Alt and Win behavior
  altwin:menu          Add the standard behavior to Menu key
  altwin:menu_win      Menu is mapped to Win
  altwin:meta_alt      Alt and Meta are on Alt
  altwin:alt_win       Alt is mapped to Win and the usual Alt
  altwin:ctrl_win      Ctrl is mapped to Win and the usual Ctrl
  altwin:ctrl_alt_win  Ctrl is mapped to Alt, Alt to Win
  altwin:meta_win      Meta is mapped to Win
  altwin:left_meta_win Meta is mapped to Left Win
  altwin:hyper_win     Hyper is mapped to Win
  altwin:alt_super_win Alt is mapped to Right Win, Super to Menu
  altwin:swap_lalt_lwin Left Alt is swapped with Left Win
  altwin:swap_alt_win  Alt is swapped with Win
  altwin:prtsc_rwin    Win is mapped to PrtSc and the usual Win
  Compose key          Position of Compose key
  compose:ralt         Right Alt
  compose:lwin         Left Win
  compose:lwin-altgr   3rd level of Left Win
  compose:rwin         Right Win
  compose:rwin-altgr   3rd level of Right Win
  compose:menu         Menu
  compose:menu-altgr   3rd level of Menu
  compose:lctrl        Left Ctrl
  compose:lctrl-altgr  3rd level of Left Ctrl
  compose:rctrl        Right Ctrl
  compose:rctrl-altgr  3rd level of Right Ctrl
  compose:caps         Caps Lock
  compose:caps-altgr   3rd level of Caps Lock
  compose:102          The "&lt; &gt;" key
  compose:102-altgr    3rd level of the "&lt; &gt;" key
  compose:paus         Pause
  compose:prsc         PrtSc
  compose:sclk         Scroll Lock
  compat               Compatibility options
  numpad:pc            Default numeric keypad keys
  numpad:mac           Numeric keypad always enters digits (as in macOS)
  numpad:microsoft     Num Lock on: digits; Shift for arrows. Num Lock off: arrows (as in Windows)
  numpad:shift3        Shift does not cancel Num Lock, chooses 3rd level instead
  srvrkeys:none        Special keys (Ctrl+Alt+&lt;key&gt;) handled in a server
  apple:alupckeys      Apple Aluminium emulates Pause, PrtSc, Scroll Lock
  shift:breaks_caps    Shift cancels Caps Lock
  misc:typo            Enable extra typographic characters
  misc:apl             Enable APL overlay characters
  shift:both_capslock  Both Shift together enable Caps Lock
  shift:both_capslock_cancel Both Shift together enable Caps Lock; one Shift key disables it
  shift:both_shiftlock Both Shift together enable Shift Lock
  keypad:pointerkeys   Shift + Num Lock enables PointerKeys
  grab:break_actions   Allow breaking grabs with keyboard actions (warning: security risk)
  grab:debug           Allow grab and window tree logging
  currencysign         Currency signs
  eurosign:e           Euro on E
  eurosign:2           Euro on 2
  eurosign:4           Euro on 4
  eurosign:5           Euro on 5
  rupeesign:4          Rupee on 4
  lv5                  Key to choose 5th level
  lv5:lsgt_switch      The "&lt; &gt;" key chooses 5th level
  lv5:ralt_switch      Right Alt chooses 5th level
  lv5:lsgt_switch_lock The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:ralt_switch_lock Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:lwin_switch_lock Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:rwin_switch_lock Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:lsgt_switch_lock_cancel The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:lsgt_switch      The "&lt; &gt;" key chooses 5th level
  lv5:ralt_switch      Right Alt chooses 5th level
  lv5:lsgt_switch_lock The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:ralt_switch_lock Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:lwin_switch_lock Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:rwin_switch_lock Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  nbsp                 Non-breaking space input
  nbsp:none            Usual space at any level
  nbsp:level2          Non-breaking space at the 2nd level
  nbsp:level3          Non-breaking space at the 3rd level
  nbsp:level3s         Non-breaking space at the 3rd level, nothing at the 4th level
  nbsp:level3n         Non-breaking space at the 3rd level, thin non-breaking space at the 4th level
  nbsp:level4          Non-breaking space at the 4th level
  nbsp:level4n         Non-breaking space at the 4th level, thin non-breaking space at the 6th level
  nbsp:level4nl        Non-breaking space at the 4th level, thin non-breaking space at the 6th level (via Ctrl+Shift)
  nbsp:zwnj2           Zero-width non-joiner at the 2nd level
  nbsp:zwnj2zwj3       Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level
  nbsp:zwnj2zwj3nb4    Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level, non-breaking space at the 4th level
  nbsp:zwnj2nb3        Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level
  nbsp:zwnj2nb3s       Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, nothing at the 4th level
  nbsp:zwnj2nb3zwj4    Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, zero-width joiner at the 4th level
  nbsp:zwnj2nb3nnb4    Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, thin non-breaking space at the 4th level
  nbsp:zwnj3zwj4       Zero-width non-joiner at the 3rd level, zero-width joiner at the 4th level
  japan                Japanese keyboard options
  japan:kana_lock      Kana Lock key is locking
  japan:nicola_f_bs    NICOLA-F style Backspace
  japan:hztg_escape    Make Zenkaku Hankaku an additional Esc
  korean               Korean Hangul/Hanja keys
  korean:ralt_hangul   Make right Alt a Hangul key
  korean:rctrl_hangul  Make right Ctrl a Hangul key
  korean:ralt_hanja    Make right Alt a Hanja key
  korean:rctrl_hanja   Make right Ctrl a Hanja key
  esperanto            Esperanto letters with superscripts
  esperanto:qwerty     At the corresponding key in a QWERTY layout
  esperanto:dvorak     At the corresponding key in a Dvorak layout
  esperanto:colemak    At the corresponding key in a Colemak layout
  solaris              Old Solaris keycodes compatibility
  solaris:sun_compat   Sun key compatibility
  terminate            Key sequence to kill the X server
  terminate:ctrl_alt_bksp Ctrl+Alt+Backspace
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE xkbConfigRegistry SYSTEM "xkb.dtd">
<xkbConfigRegistry>
  <modelList/>
  <layoutList>
    <layout>
      <configItem popularity="exotic">
        <name>apl</name>
        <shortDescription>apl</shortDescription>
        <description>APL</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>dyalog</name>
            <shortDescription>dlg</shortDescription>
            <description>APL symbols (Dyalog APL)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sax</name>
            <shortDescription>sax</shortDescription>
            <description>APL symbols (SAX, Sharp APL for Unix)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>unified</name>
            <shortDescription>ufd</shortDescription>
            <description>APL symbols (unified)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>apl2</name>
            <shortDescription>apl2</shortDescription>
            <description>APL symbols (IBM APL2)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>aplplusII</name>
            <shortDescription>aplII</shortDescription>
            <description>APL symbols (Manugistics APL*PLUS II)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>aplx</name>
            <shortDescription>aplx</shortDescription>
            <description>APL symbols (APLX unified)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ca</name>
        <shortDescription>fr</shortDescription>
        <description>French (Canada)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>kut</name>
            <shortDescription>kut</shortDescription>
            <description>Kutenai</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>shs</name>
            <shortDescription>shs</shortDescription>
            <description>Secwepemctsin</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Multilingual (Canada, Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>de</name>
        <shortDescription>de</shortDescription>
        <description>German</description>
        <languageList>
          <iso639Id>ger</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>hu</name>
            <description>German (with Hungarian letters, no dead keys)</description>
            <languageList>
              <iso639Id>ger</iso639Id>
              <iso639Id>hun</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>pl</name>
            <description>Polish (Germany, no dead keys)</description>
            <languageList>
              <iso639Id>ger</iso639Id>
              <iso639Id>pol</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>German (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>adnw</name>
            <description>German (Aus der Neo-Welt)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>koy</name>
            <description>German (KOY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>bone</name>
            <description>German (Bone)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>bone_eszett_home</name>
            <description>German (Bone, eszett in the home row)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>neo_qwertz</name>
            <description>German (Neo, QWERTZ)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>neo_qwerty</name>
            <description>German (Neo, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ru-recom</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Germany, recommended)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ru-translit</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Germany, transliteration)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>lld</name>
            <shortDescription>de_lld</shortDescription>
            <description>German (Ladin)</description>
            <languageList>
              <iso639Id>ger</iso639Id>
              <iso639Id>lld</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>eg</name>
        <description>Coptic</description>
        <languageList>
          <iso639Id>cop</iso639Id>
          <iso639Id>egy</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>hu</name>
        <description>Hungarian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>oldhun</name>
            <shortDescription>oldhun</shortDescription>
            <description>Old Hungarian</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>oldhunlig</name>
            <shortDescription>oldhun(lig)</shortDescription>
            <description>Old Hungarian (for ligatures)</description>
          </configItem>
        </variant>

      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ir</name>
        <shortDescription>fa</shortDescription>
        <description>Persian</description>
        <languageList>
          <iso639Id>per</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>ave</name>
            <description>Avestan</description>
            <languageList>
              <iso639Id>ave</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>lt</name>
        <shortDescription>lt</shortDescription>
        <description>Lithuanian</description>
        <languageList>
          <iso639Id>lit</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>us_dvorak</name>
            <description>Lithuanian (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Lithuanian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>lv</name>
        <shortDescription>lv</shortDescription>
        <description>Latvian</description>
        <languageList>
          <iso639Id>lav</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>dvorak</name>
            <description>Latvian (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ykeydvorak</name>
            <description>Latvian (Dvorak, with Y)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>minuskeydvorak</name>
            <description>Latvian (Dvorak, with minus)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>dvorakprogr</name>
            <description>Latvian (programmer Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ykeydvorakprogr</name>
            <description>Latvian (programmer Dvorak, with Y)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>minuskeydvorakprogr</name>
            <description>Latvian (programmer Dvorak, with minus)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>colemak</name>
            <description>Latvian (Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>apostrophecolemak</name>
            <description>Latvian (Colemak, with apostrophe)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Latvian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>us</name>
        <shortDescription>en</shortDescription>
        <description>English (US)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>intl-unicode</name>
            <description>English (US, intl., AltGr Unicode combining)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>alt-intl-unicode</name>
            <description>English (US, intl., AltGr Unicode combining, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ats</name>
            <description>Atsina</description>
            <!-- No ISO code in ISO639-2, only draft ISO693-3 -->
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>crd</name>
            <description>Coeur d'Alene Salish</description>
            <languageList>
              <iso639Id>crd</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>cz_sk_de</name>
            <description>Czech Slovak and German (US)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>cze</iso639Id>
              <iso639Id>slo</iso639Id>
              <iso639Id>ger</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>drix</name>
            <description>English (Drix)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>de_se_fi</name>
            <description>German, Swedish and Finnish (US)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>ger</iso639Id>
              <iso639Id>swe</iso639Id>
              <iso639Id>fin</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ibm238l</name>
            <description>English (US, IBM Arabic 238_L)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>English (US, Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx</name>
            <description>English (Carpalx)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-intl</name>
            <description>English (Carpalx, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-altgr-intl</name>
            <description>English (Carpalx, intl., with AltGr dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-full</name>
            <description>English (Carpalx, full optimization)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-full-intl</name>
            <description>English (Carpalx, full optimization, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-full-altgr-intl</name>
            <description>English (Carpalx, full optimization, intl., with AltGr dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>3l</name>
            <description>English (3l)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>3l-cros</name>
            <description>English (3l, Chromebook)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>3l-emacs</name>
            <description>English (3l, emacs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>scn</name>
            <description>Sicilian (US keyboard)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>ita</iso639Id>
              <iso639Id>scn</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>pl</name>
        <shortDescription>pl</shortDescription>
        <description>Polish</description>
        <languageList>
          <iso639Id>pol</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>intl</name>
            <description>Polish (intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>colemak</name>
            <description>Polish (Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Polish (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>glagolica</name>
            <description>Polish (Glagolica)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ro</name>
        <shortDescription>ro</shortDescription>
        <description>Romanian</description>
        <languageList>
          <iso639Id>rum</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>crh_dobruja</name>
            <shortDescription>crh</shortDescription>
            <description>Crimean Tatar (Dobruja Q)</description>
            <languageList>
              <iso639Id>crh</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ergonomic</name>
            <description>Romanian (ergonomic Touchtype)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Romanian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>rs</name>
        <shortDescription>sr</shortDescription>
        <description>Serbian</description>
        <languageList>
          <iso639Id>srp</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>combiningkeys</name>
            <description>Serbian (combining accents instead of dead keys)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ru</name>
        <shortDescription>ru</shortDescription>
        <description>Russian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>chu</name>
            <description>Church Slavonic</description>
            <languageList>
              <iso639Id>chu</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ruu</name>
            <shortDescription>ru</shortDescription>
            <description>Russian (with Ukrainian-Belorussian layout)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
              <iso639Id>ukr</iso639Id>
              <iso639Id>bel</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>rulemak</name>
            <description>Russian (Rulemak, phonetic Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>phonetic_mac</name>
            <description>Russian (phonetic Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Russian (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>unipunct</name>
            <description>Russian (with US punctuation)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>prxn</name>
            <shortDescription>ru</shortDescription>
            <description>Russian (Polyglot and Reactionary)</description>
            <countryList>
              <iso3166Id>RU</iso3166Id>
              <iso3166Id>RS</iso3166Id>
              <iso3166Id>BA</iso3166Id>
              <iso3166Id>ME</iso3166Id>
              <iso3166Id>MK</iso3166Id>
              <iso3166Id>BG</iso3166Id>
              <iso3166Id>MD</iso3166Id>
              <iso3166Id>UA</iso3166Id>
              <iso3166Id>BY</iso3166Id>
              <iso3166Id>KZ</iso3166Id>
              <iso3166Id>MN</iso3166Id>
              <iso3166Id>KG</iso3166Id>
              <iso3166Id>TJ</iso3166Id>
              <iso3166Id>UZ</iso3166Id>
              <iso3166Id>TM</iso3166Id>
              <iso3166Id>AZ</iso3166Id>
            </countryList>
            <languageList>
              <iso639Id>rus</iso639Id>
              <iso639Id>rus-petr1708</iso639Id>
              <iso639Id>ukr</iso639Id>
              <iso639Id>bel</iso639Id>
              <iso639Id>srp</iso639Id>
              <iso639Id>mkd</iso639Id>
              <iso639Id>bul</iso639Id>
              <iso639Id>chu</iso639Id>
              <iso639Id>rum-Cyrl</iso639Id>
              <iso639Id>kaz</iso639Id>
              <iso639Id>kir</iso639Id>
              <iso639Id>uzb</iso639Id>
              <iso639Id>bak</iso639Id>
              <iso639Id>aze</iso639Id>
              <iso639Id>tat</iso639Id>
              <iso639Id>uig</iso639Id>
              <iso639Id>kdr</iso639Id>
              <iso639Id>tyv</iso639Id>
              <iso639Id>kjh</iso639Id>
              <iso639Id>crh</iso639Id>
              <iso639Id>tgk</iso639Id>
              <iso639Id>abk</iso639Id>
              <iso639Id>sah</iso639Id>
              <iso639Id>mon</iso639Id>
              <iso639Id>kal</iso639Id>
              <iso639Id>sjd</iso639Id>
              <iso639Id>chv</iso639Id>
              <iso639Id>oss</iso639Id>
              <iso639Id>krl</iso639Id>
              <iso639Id>ale</iso639Id>
              <iso639Id>wbl</iso639Id>
              <iso639Id>kur</iso639Id>
              <iso639Id>niv</iso639Id>
              <iso639Id>dng</iso639Id>
              <iso639Id>kom</iso639Id>
              <iso639Id>udm</iso639Id>
              <iso639Id>sel</iso639Id>
              <iso639Id>ulc</iso639Id>
              <iso639Id>ude</iso639Id>
              <iso639Id>oac</iso639Id>
              <iso639Id>oaa</iso639Id>
              <iso639Id>gld</iso639Id>
              <iso639Id>eve</iso639Id>
              <iso639Id>evn</iso639Id>
              <iso639Id>kca</iso639Id>
              <iso639Id>itl</iso639Id>
              <iso639Id>yrk</iso639Id>
              <iso639Id>neg</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>am</name>
        <shortDescription>hy</shortDescription>
        <description>Armenian</description>
        <languageList>
          <iso639Id>hye</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>olpc-phonetic</name>
            <description>Armenian (OLPC, phonetic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>il</name>
        <shortDescription>he</shortDescription>
        <description>Hebrew</description>
        <languageList>
          <iso639Id>heb</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>biblicalSIL</name>
            <description>Hebrew (Biblical, SIL phonetic)</description>
            <languageList>
              <iso639Id>heb</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ara</name>
        <shortDescription>ar</shortDescription>
        <description>Arabic</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Arabic (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>basic_ext</name>
            <description>Arabic (Arabic numerals, extensions in the 4th level)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>basic_ext_digits</name>
            <description>Arabic (Eastern Arabic numerals, extensions in the 4th level)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>uga</name>
            <description>Ugaritic instead of Arabic</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>be</name>
        <shortDescription>be</shortDescription>
        <description>Belgian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Belgian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>br</name>
        <shortDescription>pt</shortDescription>
        <description>Portuguese (Brazil)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Portuguese (Brazil, Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>cz</name>
        <shortDescription>cs</shortDescription>
        <description>Czech</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Czech (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>prog</name>
            <description>Czech (programming)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>typo</name>
            <description>Czech (typographic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>coder</name>
            <description>Czech (coder)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>prog_typo</name>
            <description>Czech (programming, typographic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>dk</name>
        <shortDescription>da</shortDescription>
        <description>Danish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Danish (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>nl</name>
        <shortDescription>nl</shortDescription>
        <description>Dutch</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Dutch (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ee</name>
        <shortDescription>et</shortDescription>
        <description>Estonian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Estonian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>fi</name>
        <shortDescription>fi</shortDescription>
        <description>Finnish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Finnish (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>das</name>
            <description>Finnish (DAS)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>fidvorak</name>
            <description>Finnish (Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>fr</name>
        <shortDescription>fr</shortDescription>
        <description>French</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>French (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>us-alt</name>
            <description>French (US with dead keys, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>us-azerty</name>
            <description>French (US, AZERTY)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>gr</name>
        <shortDescription>gr</shortDescription>
        <description>Greek</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Greek (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>colemak</name>
            <description>Greek (Colemak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>it</name>
        <shortDescription>it</shortDescription>
        <description>Italian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Italian (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>lld</name>
            <shortDescription>it_lld</shortDescription>
            <description>Italian (Ladin)</description>
            <languageList>
              <iso639Id>it</iso639Id>
              <iso639Id>lld</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>jp</name>
        <shortDescription>ja</shortDescription>
        <description>Japanese</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Japanese (Sun Type 6)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type7</name>
            <description>Japanese (Sun Type 7, PC-compatible)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type7_suncompat</name>
            <description>Japanese (Sun Type 7, Sun-compatible)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>no</name>
        <shortDescription>no</shortDescription>
        <description>Norwegian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Norwegian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>pt</name>
        <shortDescription>pt</shortDescription>
        <description>Portuguese</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Portuguese (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>colemak</name>
            <description>Portuguese (Colemak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>sk</name>
        <shortDescription>sk</shortDescription>
        <description>Slovak</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>acc</name>
            <description>Slovak (ACC layout, only accented letters)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Slovak (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>es</name>
        <shortDescription>es</shortDescription>
        <description>Spanish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Spanish (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>se</name>
        <shortDescription>sv</shortDescription>
        <description>Swedish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>dvorak_a5</name>
            <description>Swedish (Dvorak A5)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Swedish (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ovd</name>
            <description>Elfdalian (Swedish, with combining ogonek)</description>
            <languageList>
              <iso639Id>ovd</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ch</name>
        <shortDescription>de</shortDescription>
        <description>German (Switzerland)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6_de</name>
            <description>German (Switzerland, Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6_fr</name>
            <description>French (Switzerland, Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>tr</name>
        <shortDescription>tr</shortDescription>
        <description>Turkish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Turkish (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>otk</name>
            <description>Old Turkic</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ua</name>
        <shortDescription>uk</shortDescription>
        <description>Ukrainian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Ukrainian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>gb</name>
        <shortDescription>en</shortDescription>
        <description>English (UK)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>English (UK, Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>kr</name>
        <shortDescription>ko</shortDescription>
        <description>Korean</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Korean (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>vn</name>
        <!-- Keyboard indicator for Vietnamese layouts -->
        <shortDescription>vi</shortDescription>
        <description>Vietnamese</description>
        <languageList>
          <iso639Id>vie</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>aderty</name>
            <description>Vietnamese (AÐERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>qderty</name>
            <description>Vietnamese (QĐERTY)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>eu</name>
        <!-- Keyboard indicator for European layouts -->
        <shortDescription>eu</shortDescription>
        <description>EurKEY (US)</description>
        <languageList>
          <iso639Id>cat</iso639Id>
          <iso639Id>dan</iso639Id>
          <iso639Id>eng</iso639Id>
          <iso639Id>est</iso639Id>
          <iso639Id>fao</iso639Id>
          <iso639Id>fin</iso639Id>
          <iso639Id>ger</iso639Id>
          <iso639Id>gre</iso639Id>
          <iso639Id>gsw</iso639Id>
          <iso639Id>ita</iso639Id>
          <iso639Id>lav</iso639Id>
          <iso639Id>lit</iso639Id>
          <iso639Id>nld</iso639Id>
          <iso639Id>nor</iso639Id>
          <iso639Id>por</iso639Id>
          <iso639Id>spa</iso639Id>
          <iso639Id>swe</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>cm</name>
        <shortDescription>cm</shortDescription>
        <description>English (Cameroon)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>mmuock</name>
            <description>Mmuock</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>trans</name>
        <!-- Keyboard layouts for transcription and transliteration systems -->
        <description>International Phonetic Alphabet</description>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>in</name>
        <!-- Keyboard indicator for Indian layouts -->
        <shortDescription>in</shortDescription>
        <description>Indian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>modi-kagapa</name>
            <shortDescription>mr</shortDescription>
            <description>Modi (KaGaPa phonetic)</description>
            <languageList>
              <iso639Id>mar</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>san-misc</name>
            <shortDescription>sas</shortDescription>
            <description>Sanskrit symbols</description>
            <languageList>
              <iso639Id>san</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
  </layoutList>
  <optionList>
    <group allowMultipleSelection="true">
      <!-- The key combination used to choose the 3rd (and 4th, together with Shift)
           level of symbols -->
      <configItem popularity="exotic">
        <name>lv3</name>
        <description>Key to choose the 3rd level</description>
      </configItem>
      <option>
        <configItem popularity="exotic">
          <name>lv3:4_switch_isolated</name>
          <description>Number key 4 when pressed in isolation</description>
        </configItem>
      </option>
      <option>
        <configItem popularity="exotic">
          <name>lv3:9_switch_isolated</name>
          <description>Number key 9 when pressed in isolation</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Tweaking the position of the "(" and ")" keys -->
      <configItem popularity="exotic">
        <name>parens</name>
        <description>Parentheses position</description>
      </configItem>
      <option>
        <configItem popularity="exotic">
          <name>parens:swap_brackets</name>
          <description>Swap with square brackets</description>
        </configItem>
      </option>
    </group>
  </optionList>
</xkbConfigRegistry>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xkbConfigRegistry SYSTEM "xkb.dtd">
<xkbConfigRegistry version="1.1">
  <modelList>
    <model>
      <configItem>
        <name>pc86</name>
        <description>Generic 86-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc101</name>
        <description>Generic 101-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc102</name>
        <description>Generic 102-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc104</name>
        <description>Generic 104-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc104alt</name>
        <description>Generic 104-key PC with L-shaped Enter key</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc105</name>
        <description>Generic 105-key PC</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dell101</name>
        <description>Dell 101-key PC</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>latitude</name>
        <description>Dell Latitude laptop</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dellm65</name>
        <description>Dell Precision M65 laptop</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>everex</name>
        <description>Everex STEPnote</description>
        <vendor>Everex</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>flexpro</name>
        <description>Keytronic FlexPro</description>
        <vendor>Keytronic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoft</name>
        <description>Microsoft Natural</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>omnikey101</name>
        <description>Northgate OmniKey 101</description>
        <vendor>Northgate</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>winbook</name>
        <description>Winbook Model XP5</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>pc98</name>
        <description>PC-98</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>a4techKB21</name>
        <description>A4Tech KB-21</description>
        <vendor>A4Tech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>a4techKBS8</name>
        <description>A4Tech KBS-8</description>
        <vendor>A4Tech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>a4_rfkb23</name>
        <description>A4Tech Wireless Desktop RFKB-23</description>
        <vendor>A4Tech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>airkey</name>
        <description>Acer AirKey V</description>
        <vendor>Acer</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>azonaRF2300</name>
        <description>Azona RF2300 wireless Internet</description>
        <vendor>Azona</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>scorpius</name>
        <description>Advance Scorpius KI</description>
        <vendor>Scorpius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>brother</name>
        <description>Brother Internet</description>
        <vendor>Brother</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc5113rf</name>
        <description>BTC 5113RF Multimedia</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc5126t</name>
        <description>BTC 5126T</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc6301urf</name>
        <description>BTC 6301URF</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9000</name>
        <description>BTC 9000</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9000a</name>
        <description>BTC 9000A</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9001ah</name>
        <description>BTC 9001AH</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc5090</name>
        <description>BTC 5090</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9019u</name>
        <description>BTC 9019U</description>
        <vendor>BTC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>btc9116u</name>
        <description>BTC 9116U Mini Wireless Internet and Gaming</description>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherryblue</name>
        <description>Cherry Blue Line CyBo@rd</description>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherryblueb</name>
        <description>Cherry CyMotion Master XPress</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherrybluea</name>
        <description>Cherry Blue Line CyBo@rd (alt.)</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherrycyboard</name>
        <description>Cherry CyBo@rd USB-Hub</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherrycmexpert</name>
        <description>Cherry CyMotion Expert</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cherrybunlim</name>
        <description>Cherry B.UNLIMITED</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>chicony</name>
        <description>Chicony Internet</description>
        <vendor>Chicony</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>chicony0108</name>
        <description>Chicony KU-0108</description>
        <vendor>Chicony</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>chicony0420</name>
        <description>Chicony KU-0420</description>
        <vendor>Chicony</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>chicony9885</name>
        <description>Chicony KB-9885</description>
        <vendor>Chicony</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compaqeak8</name>
        <description>Compaq Easy Access</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compaqik7</name>
        <description>Compaq Internet (7 keys)</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compaqik13</name>
        <description>Compaq Internet (13 keys)</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compaqik18</name>
        <description>Compaq Internet (18 keys)</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>cymotionlinux</name>
        <description>Cherry CyMotion Master Linux</description>
        <vendor>Cherry</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>armada</name>
        <description>Compaq Armada laptop</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>presario</name>
        <description>Compaq Presario laptop</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>ipaq</name>
        <description>Compaq iPaq</description>
        <vendor>Compaq</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dell</name>
        <description>Dell</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dellsk8125</name>
        <description>Dell SK-8125</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dellsk8135</name>
        <description>Dell SK-8135</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dellusbmm</name>
        <description>Dell USB Multimedia</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>inspiron</name>
        <description>Dell Inspiron 6000/8000 laptop</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>precision_m</name>
        <description>Dell Precision M laptop</description>
        <vendor>Dell</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dexxa</name>
        <description>Dexxa Wireless Desktop</description>
        <vendor>Dexxa</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>diamond</name>
        <description>Diamond 9801/9802</description>
        <vendor>Diamond</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>dtk2000</name>
        <description>DTK2000</description>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>ennyah_dkb1008</name>
        <description>Ennyah DKB-1008</description>
        <vendor>Ennyah</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>fscaa1667g</name>
        <description>Fujitsu-Siemens Amilo laptop</description>
        <vendor>Fujitsu-Siemens</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>genius</name>
        <description>Genius Comfy KB-16M/Multimedia KWD-910</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>geniuscomfy</name>
        <description>Genius Comfy KB-12e</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>geniuscomfy2</name>
        <description>Genius Comfy KB-21e-Scroll</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>geniuskb19e</name>
        <description>Genius KB-19e NB</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>geniuskkb2050hs</name>
        <description>Genius KKB-2050HS</description>
        <vendor>Genius</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>gyration</name>
        <description>Gyration</description>
        <vendor>Gyration</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>kinesis</name>
        <description>Kinesis</description>
        <vendor>Kinesis</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logitech_base</name>
        <description>Logitech</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logitech_g15</name>
        <description>Logitech G15 extra keys via G15daemon</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpi6</name>
        <description>Hewlett-Packard Internet</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hp250x</name>
        <description>Hewlett-Packard NEC SK-2500 Multimedia</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpxe3gc</name>
        <description>Hewlett-Packard Omnibook XE3 GC</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpxe3gf</name>
        <description>Hewlett-Packard Omnibook XE3 GF</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpxt1000</name>
        <description>Hewlett-Packard Omnibook XT1000</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpdv5</name>
        <description>Hewlett-Packard Pavilion dv5</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpzt11xx</name>
        <description>Hewlett-Packard Pavilion ZT1100</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hp500fa</name>
        <description>Hewlett-Packard Omnibook 500 FA</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hp5xx</name>
        <description>Hewlett-Packard Omnibook 500</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpnx9020</name>
        <description>Hewlett-Packard nx9020</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hp6000</name>
        <description>Hewlett-Packard Omnibook 6000/6100</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>honeywell_euroboard</name>
        <description>Honeywell Euroboard</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hpmini110</name>
        <description>Hewlett-Packard Mini 110 laptop</description>
        <vendor>Hewlett-Packard</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>rapidaccess</name>
        <description>IBM Rapid Access</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>rapidaccess2</name>
        <description>IBM Rapid Access II</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>thinkpad</name>
        <description>IBM ThinkPad 560Z/600/600E/A22E</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>thinkpad60</name>
        <description>IBM ThinkPad R60/T60/R61/T61</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>thinkpadz60</name>
        <description>IBM ThinkPad Z60m/Z60t/Z61m/Z61t</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>ibm_spacesaver</name>
        <description>IBM Space Saver</description>
        <vendor>Lenovo (previously IBM)</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiaccess</name>
        <description>Logitech Access</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiclx300</name>
        <description>Logitech Cordless Desktop LX-300</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logii350</name>
        <description>Logitech Internet 350</description>
        <vendor>Logitech</vendor>
        <hwList> <hwId>046d:c313</hwId></hwList>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logimel</name>
        <description>Logitech Internet 350</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicd</name>
        <description>Logitech Cordless Desktop</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicd_it</name>
        <description>Logitech Cordless Desktop iTouch</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicd_nav</name>
        <description>Logitech Cordless Desktop Navigator</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicd_opt</name>
        <description>Logitech Cordless Desktop Optical</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicda</name>
        <description>Logitech Cordless Desktop (alt.)</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicdpa2</name>
        <description>Logitech Cordless Desktop Pro (2nd alt.)</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicfn</name>
        <description>Logitech Cordless Freedom/Desktop Navigator</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicdn</name>
        <description>Logitech Cordless Desktop Navigator</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiitc</name>
        <description>Logitech iTouch Cordless Y-RB6</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiik</name>
        <description>Logitech Internet</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>itouch</name>
        <description>Logitech iTouch</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logicink</name>
        <description>Logitech Internet Navigator</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiex110</name>
        <description>Logitech Cordless Desktop EX110</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiinkse</name>
        <description>Logitech iTouch Internet Navigator SE</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiinkseusb</name>
        <description>Logitech iTouch Internet Navigator SE USB</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiultrax</name>
        <description>Logitech Ultra-X</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logiultraxc</name>
        <description>Logitech Ultra-X Cordless Media Desktop</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logidinovo</name>
        <description>Logitech diNovo</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>logidinovoedge</name>
        <description>Logitech diNovo Edge</description>
        <vendor>Logitech</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>mx1998</name>
        <description>Memorex MX1998</description>
        <vendor>Memorex</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>mx2500</name>
        <description>Memorex MX2500 EZ-Access</description>
        <vendor>Memorex</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>mx2750</name>
        <description>Memorex MX2750</description>
        <vendor>Memorex</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoft4000</name>
        <description>Microsoft Natural Ergonomic 4000</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoft7000</name>
        <description>Microsoft Natural Wireless Ergonomic 7000</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftinet</name>
        <description>Microsoft Internet</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftpro</name>
        <description>Microsoft Natural Pro/Internet Pro</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftprousb</name>
        <description>Microsoft Natural Pro USB/Internet Pro</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftprooem</name>
        <description>Microsoft Natural Pro OEM</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>vsonku306</name>
        <description>ViewSonic KU-306 Internet</description>
        <vendor>ViewSonic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftprose</name>
        <description>Microsoft Internet Pro (Swedish)</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftoffice</name>
        <description>Microsoft Office Keyboard</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftmult</name>
        <description>Microsoft Wireless Multimedia 1.0A</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftsurface</name>
        <description>Microsoft Surface</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftelite</name>
        <description>Microsoft Natural Elite</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>microsoftccurve2k</name>
        <description>Microsoft Comfort Curve 2000</description>
        <vendor>Microsoft</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>oretec</name>
        <description>Ortek Multimedia/Internet MCK-800</description>
        <vendor>Ortek</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>propeller</name>
        <description>Propeller Voyager KTEZ-1000</description>
        <vendor>KeyTronic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>qtronix</name>
        <description>QTronix Scorpius 98N+</description>
        <vendor>QTronix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>samsung4500</name>
        <description>Samsung SDM 4500P</description>
        <vendor>Samsung</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>samsung4510</name>
        <description>Samsung SDM 4510P</description>
        <vendor>Samsung</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sanwaskbkg3</name>
        <description>Sanwa Supply SKB-KG3</description>
        <vendor>Sanwa Supply Inc.</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sk1300</name>
        <description>NEC SK-1300</description>
        <vendor>NEC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sk2500</name>
        <description>NEC SK-2500</description>
        <vendor>NEC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sk6200</name>
        <description>NEC SK-6200</description>
        <vendor>NEC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sk7100</name>
        <description>NEC SK-7100</description>
        <vendor>NEC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sp_inet</name>
        <description>Super Power Multimedia</description>
        <vendor>Generic</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sven</name>
        <description>SVEN Ergonomic 2500</description>
        <vendor>SVEN</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sven303</name>
        <description>SVEN Slim 303</description>
        <vendor>SVEN</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>symplon</name>
        <description>Symplon PaceBook tablet</description>
        <vendor>Symplon</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>toshiba_s3000</name>
        <description>Toshiba Satellite S3000</description>
        <vendor>Toshiba</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>trust</name>
        <description>Trust Wireless Classic</description>
        <vendor>Trust</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>trustda</name>
        <description>Trust Direct Access</description>
        <vendor>Trust</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>trust_slimline</name>
        <description>Trust Slimline</description>
        <vendor>Trust</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2020</name>
        <description>TypeMatrix EZ-Reach 2020</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2030PS2</name>
        <description>TypeMatrix EZ-Reach 2030 PS2</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2030USB</name>
        <description>TypeMatrix EZ-Reach 2030 USB</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2030USB-102</name>
        <description>TypeMatrix EZ-Reach 2030 USB (102/105:EU mode)</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>tm2030USB-106</name>
        <description>TypeMatrix EZ-Reach 2030 USB (106:JP mode)</description>
        <vendor>TypeMatrix</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>yahoo</name>
        <description>Yahoo! Internet</description>
        <vendor>Yahoo!</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macbook78</name>
        <description>MacBook/MacBook Pro</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macbook79</name>
        <description>MacBook/MacBook Pro (intl.)</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macintosh</name>
        <description>Macintosh</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macintosh_old</name>
        <description>Macintosh Old</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>macintosh_hhk</name>
        <description>Happy Hacking for Mac</description>
        <vendor>Fujitsu</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>acer_c300</name>
        <description>Acer C300</description>
        <vendor>Acer</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>acer_ferrari4k</name>
        <description>Acer Ferrari 4000</description>
        <vendor>Acer</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>acer_laptop</name>
        <description>Acer laptop</description>
        <vendor>Acer</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>asus_laptop</name>
        <description>Asus laptop</description>
        <vendor>Asus</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>apple</name>
        <description>Apple</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>apple_laptop</name>
        <description>Apple laptop</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>applealu_ansi</name>
        <description>Apple Aluminium (ANSI)</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>applealu_iso</name>
        <description>Apple Aluminium (ISO)</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>applealu_jis</name>
        <description>Apple Aluminium (JIS)</description>
        <vendor>Apple</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>silvercrest</name>
        <description>Silvercrest Multimedia Wireless</description>
        <vendor>Silvercrest</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>emachines</name>
        <description>eMachines m6800 laptop</description>
        <vendor>eMachines</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>benqx</name>
        <description>BenQ X-Touch</description>
        <vendor>BenQ</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>benqx730</name>
        <description>BenQ X-Touch 730</description>
        <vendor>BenQ</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>benqx800</name>
        <description>BenQ X-Touch 800</description>
        <vendor>BenQ</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>hhk</name>
        <description>Happy Hacking</description>
        <vendor>Fujitsu</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>classmate</name>
        <description>Classmate PC</description>
        <vendor>Intel</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>olpc</name>
        <description>OLPC</description>
        <vendor>OLPC</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type7_usb</name>
        <description>Sun Type 7 USB</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type7_euro_usb</name>
        <description>Sun Type 7 USB (European)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type7_unix_usb</name>
        <description>Sun Type 7 USB (Unix)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type7_jp_usb</name>
        <description>Sun Type 7 USB (Japanese)/Japanese 106-key</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_usb</name>
        <description>Sun Type 6/7 USB</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_euro_usb</name>
        <description>Sun Type 6/7 USB (European)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_unix_usb</name>
        <description>Sun Type 6 USB (Unix)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_jp_usb</name>
        <description>Sun Type 6 USB (Japanese)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>sun_type6_jp</name>
        <description>Sun Type 6 (Japanese)</description>
        <vendor>Sun Microsystems</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>targa_v811</name>
        <description>Targa Visionary 811</description>
        <vendor>Targa</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>unitekkb1925</name>
        <description>Unitek KB-1925</description>
        <vendor>Unitek Group</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>compalfl90</name>
        <description>FL90</description>
        <vendor>Compal Electronics</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
        <name>creativedw7000</name>
        <description>Creative Desktop Wireless 7000</description>
        <vendor>Creative</vendor>
      </configItem>
    </model>
    <model>
      <configItem>
       <name>teck227</name>
       <description>Truly Ergonomic 227</description>
       <vendor>Truly Ergonomic</vendor>
     </configItem>
    </model>
    <model>
      <configItem>
       <name>teck229</name>
       <description>Truly Ergonomic 229</description>
       <vendor>Truly Ergonomic</vendor>
     </configItem>
    </model>
    <model>
      <configItem>
       <name>apex300</name>
       <description>SteelSeries Apex 300 (Apex RAW)</description>
       <vendor>SteelSeries</vendor>
     </configItem>
    </model>
    <model>
      <configItem>
       <name>chromebook</name>
       <description>Chromebook</description>
       <vendor>Google</vendor>
     </configItem>
    </model>
  </modelList>
  <layoutList>
    <layout>
      <configItem>
        <name>us</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (US)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>chr</name>
            <!-- Keyboard indicator for Cherokee layouts -->
            <shortDescription>chr</shortDescription>
            <description>Cherokee</description>
            <languageList>
              <iso639Id>chr</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>haw</name>
            <shortDescription>haw</shortDescription>
            <description>Hawaiian</description>
            <languageList>
              <iso639Id>haw</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>euro</name>
            <description>English (US, euro on 5)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>English (US, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alt-intl</name>
            <description>English (US, alt. intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>English (Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>English (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-intl</name>
            <description>English (Dvorak, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-alt-intl</name>
            <description>English (Dvorak, alt. intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-l</name>
            <description>English (Dvorak, left-handed)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-r</name>
            <description>English (Dvorak, right-handed)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-classic</name>
            <description>English (classic Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvp</name>
            <description>English (programmer Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>symbolic</name>
            <description>English (US, Symbolic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rus</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (US, phonetic)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>English (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>altgr-intl</name>
            <description>English (intl., with AltGr dead keys)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>fra</iso639Id>
              <iso639Id>deu</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>olpc2</name>
            <description>English (the divide/multiply toggle the layout)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hbs</name>
            <description>Serbo-Croatian (US)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>bos</iso639Id>
              <iso639Id>hbs</iso639Id>
              <iso639Id>hrv</iso639Id>
              <iso639Id>srp</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>norman</name>
            <description>English (Norman)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>workman</name>
            <description>English (Workman)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>workman-intl</name>
            <description>English (Workman, intl., with dead keys)</description>
           </configItem>
         </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>af</name>
        <!-- Keyboard indicator for Afghani layouts -->
        <shortDescription>fa</shortDescription>
        <description>Afghani</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ps</name>
            <!-- Keyboard indicator for Pashto layouts -->
            <shortDescription>ps</shortDescription>
            <description>Pashto</description>
            <languageList>
              <iso639Id>pus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>uz</name>
            <!-- Keyboard indicator for Uzbek layouts -->
            <shortDescription>uz</shortDescription>
            <description>Uzbek (Afghanistan)</description>
            <languageList>
              <iso639Id>uzb</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>olpc-ps</name>
            <!-- Keyboard indicator for Pashto layouts -->
            <shortDescription>ps</shortDescription>
            <description>Pashto (Afghanistan, OLPC)</description>
            <languageList>
              <iso639Id>pus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fa-olpc</name>
            <!-- Keyboard indicator for Persian layouts -->
            <shortDescription>fa</shortDescription>
            <description>Persian (Afghanistan, Dari OLPC)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>uz-olpc</name>
            <!-- Keyboard indicator for Uzbek layouts -->
            <shortDescription>uz</shortDescription>
            <description>Uzbek (Afghanistan, OLPC)</description>
            <languageList>
              <iso639Id>uzb</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ara</name>
        <!-- Keyboard indicator for Arabic layouts -->
        <shortDescription>ar</shortDescription>
        <description>Arabic</description>
        <countryList>
          <iso3166Id>AE</iso3166Id>
          <iso3166Id>BH</iso3166Id>
          <iso3166Id>DZ</iso3166Id>
          <iso3166Id>EG</iso3166Id>
          <iso3166Id>EH</iso3166Id>
          <iso3166Id>JO</iso3166Id>
          <iso3166Id>KW</iso3166Id>
          <iso3166Id>LB</iso3166Id>
          <iso3166Id>LY</iso3166Id>
          <iso3166Id>MA</iso3166Id>
          <iso3166Id>MR</iso3166Id>
          <iso3166Id>OM</iso3166Id>
          <iso3166Id>PS</iso3166Id>
          <iso3166Id>QA</iso3166Id>
          <iso3166Id>SA</iso3166Id>
          <iso3166Id>SD</iso3166Id>
          <iso3166Id>SY</iso3166Id>
          <iso3166Id>TN</iso3166Id>
          <iso3166Id>YE</iso3166Id>
        </countryList>
        <languageList>
          <iso639Id>ara</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>azerty</name>
            <description>Arabic (AZERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>azerty_digits</name>
            <description>Arabic (AZERTY, Eastern Arabic numerals)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>digits</name>
            <description>Arabic (Eastern Arabic numerals)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Arabic (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty_digits</name>
            <description>Arabic (QWERTY, Eastern Arabic numerals)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>buckwalter</name>
            <description>Arabic (Buckwalter)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>olpc</name>
            <description>Arabic (OLPC)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Arabic (Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>al</name>
        <!-- Keyboard indicator for Albanian layouts -->
        <shortDescription>sq</shortDescription>
        <description>Albanian</description>
        <languageList>
          <iso639Id>sqi</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>plisi</name>
            <description>Albanian (Plisi)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>veqilharxhi</name>
            <description>Albanian (Veqilharxhi)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>am</name>
        <!-- Keyboard indicator for Armenian layouts -->
        <shortDescription>hy</shortDescription>
        <description>Armenian</description>
        <languageList>
          <iso639Id>hye</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Armenian (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic-alt</name>
            <description>Armenian (alt. phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eastern</name>
            <description>Armenian (eastern)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>western</name>
            <description>Armenian (western)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eastern-alt</name>
            <description>Armenian (alt. eastern)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>at</name>
        <!-- Keyboard indicator for German layouts -->
        <shortDescription>de</shortDescription>
        <description>German (Austria)</description>
        <languageList>
          <iso639Id>deu</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>German (Austria, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>German (Austria, Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>au</name>
        <!-- Keyboard indicator for Australian layouts -->
        <shortDescription>en</shortDescription>
        <description>English (Australian)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>az</name>
        <!-- Keyboard indicator for Azerbaijani layouts -->
        <shortDescription>az</shortDescription>
        <description>Azerbaijani</description>
        <languageList>
          <iso639Id>aze</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>cyrillic</name>
            <description>Azerbaijani (Cyrillic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>by</name>
        <!-- Keyboard indicator for Belarusian layouts -->
        <shortDescription>by</shortDescription>
        <description>Belarusian</description>
        <languageList>
          <iso639Id>bel</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Belarusian (legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin</name>
            <description>Belarusian (Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ru</name>
            <description>Russian (Belarus)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>Belarusian (intl.)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>be</name>
        <!-- Keyboard indicator for Belgian layouts -->
        <shortDescription>be</shortDescription>
        <description>Belgian</description>
        <languageList>
          <iso639Id>deu</iso639Id>
          <iso639Id>nld</iso639Id>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>oss</name>
            <description>Belgian (alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_latin9</name>
            <description>Belgian (Latin-9 only, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_sundeadkeys</name>
            <description>Belgian (Sun dead keys, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>iso-alternate</name>
            <description>Belgian (ISO, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Belgian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>Belgian (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>wang</name>
            <description>Belgian (Wang 724 AZERTY)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>bd</name>
        <!-- Keyboard indicator for Bangla layouts -->
        <shortDescription>bn</shortDescription>
        <description>Bangla</description>
        <languageList>
          <iso639Id>ben</iso639Id>
          <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
          <iso639Id>sat</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>probhat</name>
            <description>Bangla (Probhat)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>in</name>
        <!-- Keyboard indicator for Indian layouts -->
        <shortDescription>in</shortDescription>
        <description>Indian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ben</name>
            <!-- Keyboard indicator for Bangla layouts -->
            <shortDescription>bn</shortDescription>
            <description>Bangla (India)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ben_probhat</name>
            <!-- Keyboard indicator for Bangla layouts -->
            <shortDescription>bn</shortDescription>
            <description>Bangla (India, Probhat)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ben_baishakhi</name>
            <description>Bangla (India, Baishakhi)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ben_bornona</name>
            <description>Bangla (India, Bornona)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
         <variant>
          <configItem>
            <name>ben_gitanjali</name>
            <description>Bangla (India, Gitanjali)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ben_inscript</name>
            <description>Bangla (India, Baishakhi Inscript)</description>
            <languageList>
              <iso639Id>ben</iso639Id>
              <!-- sat-Beng: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eeyek</name>
            <description>Manipuri (Eeyek)</description>
            <languageList>
              <iso639Id>mni</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>guj</name>
            <!-- Keyboard indicator for Gujarati layouts -->
            <shortDescription>gu</shortDescription>
            <description>Gujarati</description>
            <languageList>
              <iso639Id>guj</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>guru</name>
            <!-- Keyboard indicator for Punjabi layouts -->
            <shortDescription>pa</shortDescription>
            <description>Punjabi (Gurmukhi)</description>
            <languageList>
              <iso639Id>pan</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>jhelum</name>
            <!-- Keyboard indicator for Punjabi layouts -->
            <shortDescription>pa</shortDescription>
            <description>Punjabi (Gurmukhi Jhelum)</description>
            <languageList>
              <iso639Id>pan</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kan</name>
            <!-- Keyboard indicator for Kannada layouts -->
            <shortDescription>kn</shortDescription>
            <description>Kannada</description>
            <languageList>
              <iso639Id>kan</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kan-kagapa</name>
            <!-- Keyboard indicator for Kannada layouts -->
            <shortDescription>kn</shortDescription>
            <description>Kannada (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>kan</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mal</name>
            <!-- Keyboard indicator for Malayalam layouts -->
            <shortDescription>ml</shortDescription>
            <description>Malayalam</description>
            <languageList>
              <iso639Id>mal</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mal_lalitha</name>
            <!-- Keyboard indicator for Malayalam layouts -->
            <shortDescription>ml</shortDescription>
            <description>Malayalam (Lalitha)</description>
            <languageList>
              <iso639Id>mal</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mal_enhanced</name>
            <!-- Keyboard indicator for Malayalam layouts -->
            <shortDescription>ml</shortDescription>
            <description>Malayalam (enhanced Inscript, with rupee)</description>
            <languageList>
              <iso639Id>mal</iso639Id>
            </languageList>
          </configItem>
         </variant>
         <variant>
           <configItem>
            <name>ori</name>
            <!-- Keyboard indicator for Oriya layouts -->
            <shortDescription>or</shortDescription>
            <description>Oriya</description>
            <languageList>
              <iso639Id>ori</iso639Id>
              <!-- sat-Orya: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
           <configItem>
            <name>olck</name>
            <!-- Keyboard indicator for Ol Chiki layouts -->
            <shortDescription>sat</shortDescription>
            <description>Ol Chiki</description>
            <languageList>
              <!-- sat-Olck: http://www.ethnologue.com/language/sat -->
              <iso639Id>sat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_tamilnet</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (TamilNet '99)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_tamilnet_with_tam_nums</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (TamilNet '99 with Tamil numerals)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_tamilnet_TAB</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (TamilNet '99, TAB encoding)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_tamilnet_TSCII</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (TamilNet '99, TSCII encoding)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (Inscript)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tel</name>
            <!-- Keyboard indicator for Telugu layouts -->
            <shortDescription>te</shortDescription>
            <description>Telugu</description>
            <languageList>
              <iso639Id>tel</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tel-kagapa</name>
            <!-- Keyboard indicator for Telugu layouts -->
            <shortDescription>te</shortDescription>
            <description>Telugu (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>tel</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tel-sarala</name>
            <!-- Keyboard indicator for Telugu layouts -->
            <shortDescription>te</shortDescription>
            <description>Telugu (Sarala)</description>
            <languageList>
              <iso639Id>tel</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>urd-phonetic</name>
            <!-- Keyboard indicator for Urdu layouts -->
            <shortDescription>ur</shortDescription>
            <description>Urdu (phonetic)</description>
            <languageList>
              <iso639Id>urd</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>urd-phonetic3</name>
            <!-- Keyboard indicator for Urdu layouts -->
            <shortDescription>ur</shortDescription>
            <description>Urdu (alt. phonetic)</description>
            <languageList>
              <iso639Id>urd</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>urd-winkeys</name>
            <!-- Keyboard indicator for Urdu layouts -->
            <shortDescription>ur</shortDescription>
            <description>Urdu (Windows)</description>
            <languageList>
              <iso639Id>urd</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bolnagri</name>
            <!-- Keyboard indicator for Hindi layouts -->
            <shortDescription>hi</shortDescription>
            <description>Hindi (Bolnagri)</description>
            <languageList>
              <iso639Id>hin</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hin-wx</name>
            <!-- Keyboard indicator for Hindi layouts -->
            <shortDescription>hi</shortDescription>
            <description>Hindi (Wx)</description>
            <languageList>
              <iso639Id>hin</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hin-kagapa</name>
            <!-- Keyboard indicator for Hindi layouts -->
            <shortDescription>hi</shortDescription>
            <description>Hindi (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>hin</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>san-kagapa</name>
            <!-- Keyboard indicator for Sanskrit layouts -->
            <shortDescription>sa</shortDescription>
            <description>Sanskrit (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>san</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mar-kagapa</name>
            <!-- Keyboard indicator for Marathi layouts -->
            <shortDescription>mr</shortDescription>
            <description>Marathi (KaGaPa, phonetic)</description>
            <languageList>
              <iso639Id>mar</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eng</name>
            <!-- Keyboard indicator for English layouts -->
            <shortDescription>en</shortDescription>
            <description>English (India, with rupee)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>iipa</name>
            <description>Indic IPA</description>
            <languageList>
              <iso639Id>inc</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>marathi</name>
            <description>Marathi (enhanced Inscript)</description>
            <languageList>
              <iso639Id>mar</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ba</name>
        <!-- Keyboard indicator for Bosnian layouts -->
        <shortDescription>bs</shortDescription>
        <description>Bosnian</description>
        <languageList>
          <iso639Id>bos</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alternatequotes</name>
            <description>Bosnian (with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>unicode</name>
            <description>Bosnian (with Bosnian digraphs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>unicodeus</name>
            <description>Bosnian (US, with Bosnian digraphs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Bosnian (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>br</name>
        <!-- Keyboard indicator for Portuguese layouts -->
        <shortDescription>pt</shortDescription>
        <description>Portuguese (Brazil)</description>
        <languageList>
          <iso639Id>por</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Portuguese (Brazil, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Portuguese (Brazil, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo</name>
            <description>Portuguese (Brazil, Nativo)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo-us</name>
            <description>Portuguese (Brazil, Nativo for US keyboards)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo-epo</name>
            <description>Esperanto (Brazil, Nativo)</description>
            <languageList>
              <iso639Id>epo</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>thinkpad</name>
            <description>Portuguese (Brazil, IBM/Lenovo ThinkPad)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>bg</name>
        <!-- Keyboard indicator for Bulgarian layouts -->
        <shortDescription>bg</shortDescription>
        <description>Bulgarian</description>
        <languageList>
          <iso639Id>bul</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Bulgarian (traditional phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bas_phonetic</name>
            <description>Bulgarian (new phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bekl</name>
            <description>Bulgarian (enhanced)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>dz</name>
        <shortDescription>kab</shortDescription>
        <description>Kabyle (azerty layout, no dead keys)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>azerty-deadkeys</name>
            <shortDescription>kab</shortDescription>
            <description>Kabyle (azerty layout, with dead keys)</description>
            <languageList>
              <iso639Id>kab</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty-gb-deadkeys</name>
            <shortDescription>kab</shortDescription>
            <description>Kabyle (qwerty-gb layout, with dead keys)</description>
            <languageList>
              <iso639Id>kab</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty-us-deadkeys</name>
            <shortDescription>kab</shortDescription>
            <description>Kabyle (qwerty-us layout, with dead keys)</description>
            <languageList>
              <iso639Id>kab</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ber</name>
            <shortDescription>kab</shortDescription>
            <description>Kabyle (Algeria, Tifinagh)</description>
            <languageList>
              <iso639Id>kab</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ar</name>
            <shortDescription>ar</shortDescription>
            <description>Arabic (Algeria)</description>
            <languageList>
              <iso639Id>ara</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ma</name>
        <!-- Keyboard indicator for Arabic layouts -->
        <shortDescription>ar</shortDescription>
        <description>Arabic (Morocco)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>french</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Morocco)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-alt</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh alt.)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-alt-phonetic</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh phonetic, alt.)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-extended</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh extended)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-phonetic</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh phonetic)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tifinagh-extended-phonetic</name>
            <!-- Keyboard indicator for Berber layouts -->
            <shortDescription>ber</shortDescription>
            <description>Berber (Morocco, Tifinagh extended phonetic)</description>
            <languageList>
              <iso639Id>ber</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>cm</name>
        <!-- Keyboard indicator for Cameroon layouts -->
        <shortDescription>cm</shortDescription>
        <description>English (Cameroon)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>french</name>
            <description>French (Cameroon)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Cameroon Multilingual (QWERTY, intl.)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>bas</iso639Id>
              <iso639Id>nmg</iso639Id>
              <iso639Id>fub</iso639Id>
              <iso639Id>ewo</iso639Id>
              <iso639Id>xmd</iso639Id>
              <iso639Id>mfh</iso639Id>
              <iso639Id>bkm</iso639Id>
              <iso639Id>ozm</iso639Id>
              <iso639Id>lns</iso639Id>
              <iso639Id>sox</iso639Id>
              <iso639Id>pny</iso639Id>
              <iso639Id>wes</iso639Id>
              <iso639Id>lem</iso639Id>
              <iso639Id>nyj</iso639Id>
              <iso639Id>mfk</iso639Id>
              <iso639Id>mcp</iso639Id>
              <iso639Id>ass</iso639Id>
              <iso639Id>xed</iso639Id>
              <iso639Id>dua</iso639Id>
              <iso639Id>anv</iso639Id>
              <iso639Id>bum</iso639Id>
              <iso639Id>btb</iso639Id>
              <iso639Id>bfd</iso639Id>
              <iso639Id>azo</iso639Id>
              <iso639Id>ken</iso639Id>
              <iso639Id>yam</iso639Id>
              <iso639Id>yat</iso639Id>
              <iso639Id>yas</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>azerty</name>
            <description>Cameroon (AZERTY, intl.)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
              <iso639Id>bas</iso639Id>
              <iso639Id>nmg</iso639Id>
              <iso639Id>fub</iso639Id>
              <iso639Id>ewo</iso639Id>
              <iso639Id>xmd</iso639Id>
              <iso639Id>mfh</iso639Id>
              <iso639Id>bkm</iso639Id>
              <iso639Id>ozm</iso639Id>
              <iso639Id>lns</iso639Id>
              <iso639Id>sox</iso639Id>
              <iso639Id>pny</iso639Id>
              <iso639Id>wes</iso639Id>
              <iso639Id>lem</iso639Id>
              <iso639Id>nyj</iso639Id>
              <iso639Id>mfk</iso639Id>
              <iso639Id>mcp</iso639Id>
              <iso639Id>ass</iso639Id>
              <iso639Id>xed</iso639Id>
              <iso639Id>dua</iso639Id>
              <iso639Id>anv</iso639Id>
              <iso639Id>bum</iso639Id>
              <iso639Id>btb</iso639Id>
              <iso639Id>bfd</iso639Id>
              <iso639Id>azo</iso639Id>
              <iso639Id>ken</iso639Id>
              <iso639Id>yam</iso639Id>
              <iso639Id>yat</iso639Id>
              <iso639Id>yas</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Cameroon (Dvorak, intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mmuock</name>
            <description>Mmuock</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mm</name>
        <!-- Keyboard indicator for Burmese layouts -->
        <shortDescription>my</shortDescription>
        <description>Burmese</description>
        <languageList>
          <iso639Id>mya</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>zawgyi</name>
            <shortDescription>zg</shortDescription>
            <description>Burmese Zawgyi</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ca</name>
        <!-- Keyboard indicator for French layouts -->
        <shortDescription>fr</shortDescription>
        <description>French (Canada)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>fr-dvorak</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Canada, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr-legacy</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Canada, legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>multix</name>
            <description>Canadian (intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>multi</name>
            <description>Canadian (intl., 1st part)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>multi-2gr</name>
            <description>Canadian (intl., 2nd part)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ike</name>
            <!-- Keyboard indicator for Inuktikut layouts -->
            <shortDescription>ike</shortDescription>
            <description>Inuktitut</description>
            <languageList>
              <iso639Id>iku</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>eng</name>
            <!-- Keyboard indicator for English layouts -->
            <shortDescription>en</shortDescription>
            <description>English (Canada)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>cd</name>
        <!-- Keyboard indicator for French layouts -->
        <shortDescription>fr</shortDescription>
        <description>French (Democratic Republic of the Congo)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>cn</name>
        <!-- Keyboard indicator for Chinese layouts -->
        <shortDescription>zh</shortDescription>
        <description>Chinese</description>
        <languageList>
          <iso639Id>zho</iso639Id>
        </languageList>
      </configItem>
      <variantList>

        <variant>
          <configItem>
            <name>mon_trad</name>
            <description>Mongolian (Bichig)</description>
            <languageList>
              <iso639Id>mvf</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_trad_todo</name>
            <description>Mongolian (Todo)</description>
            <languageList>
              <iso639Id>mvf</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_trad_xibe</name>
            <description>Mongolian (Xibe)</description>
            <languageList>
              <iso639Id>sjo</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_trad_manchu</name>
            <description>Mongolian (Manchu)</description>
            <languageList>
              <iso639Id>mnc</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_trad_galik</name>
            <description>Mongolian (Galik)</description>
            <languageList>
              <iso639Id>mvf</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_todo_galik</name>
            <description>Mongolian (Todo Galik)</description>
            <languageList>
              <iso639Id>mvf</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mon_manchu_galik</name>
            <description>Mongolian (Manchu Galik)</description>
            <languageList>
              <iso639Id>mnc</iso639Id>
            </languageList>
          </configItem>
        </variant>

        <variant>
          <configItem>
            <name>tib</name>
            <description>Tibetan</description>
            <languageList>
              <iso639Id>tib</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tib_asciinum</name>
            <description>Tibetan (with ASCII numerals)</description>
            <languageList>
              <iso639Id>tib</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ug</name>
            <shortDescription>ug</shortDescription>
            <description>Uyghur</description>
            <languageList>
              <iso639Id>uig</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>altgr-pinyin</name>
            <description>Hanyu Pinyin (with AltGr dead keys)</description>
            <languageList>
              <iso639Id>zho</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>hr</name>
        <!-- Keyboard indicator for Croatian layouts -->
        <shortDescription>hr</shortDescription>
        <description>Croatian</description>
        <languageList>
          <iso639Id>hrv</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alternatequotes</name>
            <description>Croatian (with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>unicode</name>
            <description>Croatian (with Croatian digraphs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>unicodeus</name>
            <description>Croatian (US, with Croatian digraphs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Croatian (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>cz</name>
        <!-- Keyboard indicator for Chech layouts -->
        <shortDescription>cs</shortDescription>
        <description>Czech</description>
        <languageList>
          <iso639Id>ces</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>bksl</name>
            <description>Czech (with &lt;\|&gt; key)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Czech (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty_bksl</name>
            <description>Czech (QWERTY, extended backslash)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty-mac</name>
            <description>Czech (QWERTY, Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ucw</name>
            <description>Czech (UCW, only accented letters)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-ucw</name>
            <description>Czech (US, Dvorak, UCW support)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rus</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Czech, phonetic)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>dk</name>
        <!-- Keyboard indicator for Danish layouts -->
        <shortDescription>da</shortDescription>
        <description>Danish</description>
        <languageList>
          <iso639Id>dan</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Danish (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Danish (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Danish (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_nodeadkeys</name>
            <description>Danish (Macintosh, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Danish (Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>nl</name>
        <!-- Keyboard indicator for Dutch layouts -->
        <shortDescription>nl</shortDescription>
        <description>Dutch</description>
        <languageList>
          <iso639Id>nld</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Dutch (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>std</name>
            <description>Dutch (standard)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>bt</name>
        <!-- Keyboard indicator for Dzongkha layouts -->
        <shortDescription>dz</shortDescription>
        <description>Dzongkha</description>
        <languageList>
          <iso639Id>dzo</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ee</name>
        <!-- Keyboard indicator for Estonian layouts -->
        <shortDescription>et</shortDescription>
        <description>Estonian</description>
        <languageList>
          <iso639Id>est</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Estonian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Estonian (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Estonian (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ir</name>
        <!-- Keyboard indicator for Persian layouts -->
        <shortDescription>fa</shortDescription>
        <description>Persian</description>
        <languageList>
          <iso639Id>fas</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>pes_keypad</name>
            <description>Persian (with Persian keypad)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iran, Latin Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_f</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iran, F)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_alt</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iran, Latin Alt-Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_ara</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iran, Arabic-Latin)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>iq</name>
        <!-- Keyboard indicator for Iraqi layouts -->
        <shortDescription>ar</shortDescription>
        <description>Iraqi</description>
        <languageList>
          <iso639Id>ara</iso639Id>
          <iso639Id>kur</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ku</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iraq, Latin Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_f</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iraq, F)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_alt</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iraq, Latin Alt-Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_ara</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Iraq, Arabic-Latin)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>fo</name>
        <!-- Keyboard indicator for Faroese layouts -->
        <shortDescription>fo</shortDescription>
        <description>Faroese</description>
        <languageList>
          <iso639Id>fao</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Faroese (no dead keys)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>fi</name>
        <!-- Keyboard indicator for Finnish layouts -->
        <shortDescription>fi</shortDescription>
        <description>Finnish</description>
        <languageList>
          <iso639Id>fin</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Finnish (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>classic</name>
            <description>Finnish (classic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Finnish (classic, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>smi</name>
            <description>Northern Saami (Finland)</description>
            <languageList>
              <iso639Id>sme</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Finnish (Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>fr</name>
        <!-- Keyboard indicator for French layouts -->
        <shortDescription>fr</shortDescription>
        <description>French</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>French (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>French (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss</name>
            <description>French (alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_latin9</name>
            <description>French (alt., Latin-9 only)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_nodeadkeys</name>
            <description>French (alt., no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oss_sundeadkeys</name>
            <description>French (alt., Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin9</name>
            <description>French (legacy, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin9_nodeadkeys</name>
            <description>French (legacy, alt., no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin9_sundeadkeys</name>
            <description>French (legacy, alt., Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bepo</name>
            <description>French (BEPO)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bepo_latin9</name>
            <description>French (BEPO, Latin-9 only)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bepo_afnor</name>
            <description>French (BEPO, AFNOR)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>French (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>French (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>azerty</name>
            <description>French (AZERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>afnor</name>
            <description>French (AZERTY, AFNOR)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bre</name>
            <description>French (Breton)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>oci</name>
            <description>Occitan</description>
            <languageList>
              <iso639Id>oci</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>geo</name>
            <description>Georgian (France, AZERTY Tskapo)</description>
            <languageList>
              <iso639Id>kat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>French (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>gh</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (Ghana)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>generic</name>
            <description>English (Ghana, multilingual)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>akan</name>
            <!-- Keyboard indicator for Akan layouts -->
            <shortDescription>ak</shortDescription>
            <description>Akan</description>
            <languageList>
              <iso639Id>aka</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ewe</name>
            <!-- Keyboard indicator for Ewe layouts -->
            <shortDescription>ee</shortDescription>
            <description>Ewe</description>
            <languageList>
              <iso639Id>ewe</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fula</name>
            <!-- Keyboard indicator for Fula layouts -->
            <shortDescription>ff</shortDescription>
            <description>Fula</description>
            <languageList>
              <iso639Id>ful</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ga</name>
            <!-- Keyboard indicator for Ga layouts -->
            <shortDescription>gaa</shortDescription>
            <description>Ga</description>
            <languageList>
              <iso639Id>gaa</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hausa</name>
            <!-- Keyboard indicator for Hausa layouts -->
            <shortDescription>ha</shortDescription>
            <description>Hausa (Ghana)</description>
            <languageList>
              <iso639Id>hau</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>avn</name>
            <!-- Keyboard indicator for Avatime layouts -->
            <shortDescription>avn</shortDescription>
            <description>Avatime</description>
            <languageList>
              <iso639Id>avn</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>gillbt</name>
            <description>English (Ghana, GILLBT)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>gn</name>
        <!-- Keyboard indicator for French layouts -->
        <shortDescription>fr</shortDescription>
        <description>French (Guinea)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>ge</name>
        <!-- Keyboard indicator for Georgian layouts -->
        <shortDescription>ka</shortDescription>
        <description>Georgian</description>
        <languageList>
          <iso639Id>kat</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ergonomic</name>
            <description>Georgian (ergonomic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mess</name>
            <description>Georgian (MESS)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ru</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Georgia)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>os</name>
            <description>Ossetian (Georgia)</description>
            <languageList>
              <iso639Id>oss</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>de</name>
        <!-- Keyboard indicator for German layouts -->
        <shortDescription>de</shortDescription>
        <description>German</description>
        <languageList>
          <iso639Id>deu</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>deadacute</name>
            <description>German (dead acute)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>deadgraveacute</name>
            <description>German (dead grave acute)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>German (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>e1</name>
            <description>German (E1)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>e2</name>
            <description>German (E2)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>T3</name>
            <description>German (T3)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>German (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ro</name>
            <description>Romanian (Germany)</description>
            <languageList>
              <iso639Id>ron</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ro_nodeadkeys</name>
            <description>Romanian (Germany, no dead keys)</description>
            <languageList>
              <iso639Id>ron</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>German (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>neo</name>
            <description>German (Neo 2)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>German (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_nodeadkeys</name>
            <description>German (Macintosh, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dsb</name>
            <description>Lower Sorbian</description>
            <languageList>
              <iso639Id>dsb</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dsb_qwertz</name>
            <description>Lower Sorbian (QWERTZ)</description>
            <languageList>
              <iso639Id>dsb</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>German (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tr</name>
            <description>Turkish (Germany)</description>
            <languageList>
              <iso639Id>tr</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ru</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Germany, phonetic)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>deadtilde</name>
            <description>German (dead tilde)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>gr</name>
        <!-- Keyboard indicator for Greek layouts -->
        <shortDescription>gr</shortDescription>
        <description>Greek</description>
        <languageList>
          <iso639Id>ell</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>simple</name>
            <description>Greek (simple)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>extended</name>
            <description>Greek (extended)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Greek (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>polytonic</name>
            <description>Greek (polytonic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>hu</name>
        <!-- Keyboard indicator for Hungarian layouts -->
        <shortDescription>hu</shortDescription>
        <description>Hungarian</description>
        <languageList>
          <iso639Id>hun</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>standard</name>
            <description>Hungarian (standard)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Hungarian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Hungarian (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwertz_comma_dead</name>
            <description>Hungarian (QWERTZ, 101-key, comma, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwertz_comma_nodead</name>
            <description>Hungarian (QWERTZ, 101-key, comma, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwertz_dot_dead</name>
            <description>Hungarian (QWERTZ, 101-key, dot, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwertz_dot_nodead</name>
            <description>Hungarian (QWERTZ, 101-key, dot, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwerty_comma_dead</name>
            <description>Hungarian (QWERTY, 101-key, comma, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwerty_comma_nodead</name>
            <description>Hungarian (QWERTY, 101-key, comma, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwerty_dot_dead</name>
            <description>Hungarian (QWERTY, 101-key, dot, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>101_qwerty_dot_nodead</name>
            <description>Hungarian (QWERTY, 101-key, dot, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwertz_comma_dead</name>
            <description>Hungarian (QWERTZ, 102-key, comma, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwertz_comma_nodead</name>
            <description>Hungarian (QWERTZ, 102-key, comma, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwertz_dot_dead</name>
            <description>Hungarian (QWERTZ, 102-key, dot, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwertz_dot_nodead</name>
            <description>Hungarian (QWERTZ, 102-key, dot, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwerty_comma_dead</name>
            <description>Hungarian (QWERTY, 102-key, comma, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwerty_comma_nodead</name>
            <description>Hungarian (QWERTY, 102-key, comma, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwerty_dot_dead</name>
            <description>Hungarian (QWERTY, 102-key, dot, dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>102_qwerty_dot_nodead</name>
            <description>Hungarian (QWERTY, 102-key, dot, no dead keys)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>is</name>
        <!-- Keyboard indicator for Icelandic layouts -->
        <shortDescription>is</shortDescription>
        <description>Icelandic</description>
        <languageList>
          <iso639Id>isl</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>Sundeadkeys</name>
            <description>Icelandic (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Icelandic (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_legacy</name>
            <description>Icelandic (Macintosh, legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Icelandic (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Icelandic (Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>il</name>
        <!-- Keyboard indicator for Hebrew layouts -->
        <shortDescription>he</shortDescription>
        <description>Hebrew</description>
        <languageList>
          <iso639Id>heb</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>lyx</name>
            <description>Hebrew (lyx)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Hebrew (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>biblical</name>
            <description>Hebrew (Biblical, Tiro)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>it</name>
        <!-- Keyboard indicator for Italian layouts -->
        <shortDescription>it</shortDescription>
        <description>Italian</description>
        <languageList>
          <iso639Id>ita</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Italian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Italian (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Italian (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Italian (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>geo</name>
            <description>Georgian (Italy)</description>
            <languageList>
              <iso639Id>kat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ibm</name>
            <description>Italian (IBM 142)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>Italian (intl., with dead keys)</description>
            <languageList>
              <iso639Id>deu</iso639Id>
              <iso639Id>fra</iso639Id>
              <iso639Id>ita</iso639Id>
              <iso639Id>slk</iso639Id>
              <iso639Id>srd</iso639Id>
              <iso639Id>nap</iso639Id>
              <iso639Id>scn</iso639Id>
              <iso639Id>fur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>scn</name>
            <description>Sicilian</description>
            <languageList>
              <iso639Id>ita</iso639Id>
              <iso639Id>scn</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fur</name>
            <description>Friulian (Italy)</description>
            <languageList>
              <iso639Id>fur</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>jp</name>
        <!-- Keyboard indicator for Japaneses -->
        <shortDescription>ja</shortDescription>
        <description>Japanese</description>
        <languageList>
          <iso639Id>jpn</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>kana</name>
            <description>Japanese (Kana)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kana86</name>
            <description>Japanese (Kana 86)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>OADG109A</name>
            <description>Japanese (OADG 109A)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Japanese (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Japanese (Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>kg</name>
        <!-- Keyboard indicator for Kyrgyz layouts -->
        <shortDescription>ki</shortDescription>
        <description>Kyrgyz</description>
        <languageList>
          <iso639Id>kir</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Kyrgyz (phonetic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>kh</name>
        <!-- Keyboard indicator for Khmer layouts -->
        <shortDescription>km</shortDescription>
        <description>Khmer (Cambodia)</description>
        <languageList>
          <iso639Id>khm</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>kz</name>
        <!-- Keyboard indicator for Kazakh layouts -->
        <shortDescription>kk</shortDescription>
        <description>Kazakh</description>
        <languageList>
          <iso639Id>kaz</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>ruskaz</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Kazakhstan, with Kazakh)</description>
            <languageList>
              <iso639Id>kaz</iso639Id>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kazrus</name>
            <description>Kazakh (with Russian)</description>
            <languageList>
              <iso639Id>kaz</iso639Id>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ext</name>
            <description>Kazakh (extended)</description>
            <languageList>
              <iso639Id>kaz</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin</name>
            <description>Kazakh (Latin)</description>
            <languageList>
              <iso639Id>kaz</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>la</name>
        <!-- Keyboard indicator for Lao layouts -->
        <shortDescription>lo</shortDescription>
        <description>Lao</description>
        <languageList>
          <iso639Id>lao</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>stea</name>
            <description>Lao (STEA)</description>
            <languageList>
              <iso639Id>lao</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>latam</name>
        <!-- Keyboard indicator for Spanish layouts -->
        <shortDescription>es</shortDescription>
        <description>Spanish (Latin American)</description>
        <countryList>
          <iso3166Id>AR</iso3166Id>
          <iso3166Id>BO</iso3166Id>
          <iso3166Id>CL</iso3166Id>
          <iso3166Id>CO</iso3166Id>
          <iso3166Id>CR</iso3166Id>
          <iso3166Id>CU</iso3166Id>
          <iso3166Id>DO</iso3166Id>
          <iso3166Id>EC</iso3166Id>
          <iso3166Id>GT</iso3166Id>
          <iso3166Id>HN</iso3166Id>
          <iso3166Id>HT</iso3166Id>
          <iso3166Id>MX</iso3166Id>
          <iso3166Id>NI</iso3166Id>
          <iso3166Id>PA</iso3166Id>
          <iso3166Id>PE</iso3166Id>
          <iso3166Id>PR</iso3166Id>
          <iso3166Id>PY</iso3166Id>
          <iso3166Id>SV</iso3166Id>
          <iso3166Id>US</iso3166Id>
          <iso3166Id>UY</iso3166Id>
          <iso3166Id>VE</iso3166Id>
        </countryList>
        <languageList>
          <iso639Id>spa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Spanish (Latin American, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>deadtilde</name>
            <description>Spanish (Latin American, dead tilde)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>Spanish (Latin American, Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Spanish (Latin American, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>Spanish (Latin American, Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak-gaming</name>
            <description>Spanish (Latin American, Colemak for gaming)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>lt</name>
        <!-- Keyboard indicator for Lithuanian layouts -->
        <shortDescription>lt</shortDescription>
        <description>Lithuanian</description>
        <languageList>
          <iso639Id>lit</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>std</name>
            <description>Lithuanian (standard)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Lithuanian (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ibm</name>
            <description>Lithuanian (IBM LST 1205-92)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>lekp</name>
            <description>Lithuanian (LEKP)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>lekpa</name>
            <description>Lithuanian (LEKPa)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sgs</name>
            <description>Samogitian</description>
            <languageList>
              <iso639Id>sgs</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>lv</name>
        <!-- Keyboard indicator for Latvian layouts -->
        <shortDescription>lv</shortDescription>
        <description>Latvian</description>
        <languageList>
          <iso639Id>lav</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>apostrophe</name>
            <description>Latvian (apostrophe)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tilde</name>
            <description>Latvian (tilde)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fkey</name>
            <description>Latvian (F)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>modern</name>
            <description>Latvian (modern)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ergonomic</name>
            <description>Latvian (ergonomic, ŪGJRMV)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>adapted</name>
            <description>Latvian (adapted)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mao</name>
        <!-- Keyboard indicator for Maori layouts -->
        <shortDescription>mi</shortDescription>
        <description>Maori</description>
        <languageList>
          <iso639Id>mri</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>me</name>
        <!-- Keyboard indicator for Montenegrin layouts -->
        <shortDescription>sr</shortDescription>
        <description>Montenegrin</description>
        <languageList>
          <iso639Id>srp</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>cyrillic</name>
            <description>Montenegrin (Cyrillic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cyrillicyz</name>
            <description>Montenegrin (Cyrillic, ZE and ZHE swapped)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinunicode</name>
            <description>Montenegrin (Latin, Unicode)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinyz</name>
            <description>Montenegrin (Latin, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinunicodeyz</name>
            <description>Montenegrin (Latin, Unicode, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cyrillicalternatequotes</name>
            <description>Montenegrin (Cyrillic, with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinalternatequotes</name>
            <description>Montenegrin (Latin, with guillemets)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mk</name>
        <!-- Keyboard indicator for Macedonian layouts -->
        <shortDescription>mk</shortDescription>
        <description>Macedonian</description>
        <languageList>
          <iso639Id>mkd</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Macedonian (no dead keys)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mt</name>
        <!-- Keyboard indicator for Maltese layouts -->
        <shortDescription>mt</shortDescription>
        <description>Maltese</description>
        <languageList>
          <iso639Id>mlt</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>us</name>
            <description>Maltese (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alt-us</name>
            <description>Maltese (US layout with AltGr overrides)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alt-gb</name>
            <description>Maltese (UK, with AltGr overrides)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mn</name>
        <!-- Keyboard indicator for Mongolian layouts -->
        <shortDescription>mn</shortDescription>
        <description>Mongolian</description>
        <languageList>
          <iso639Id>mon</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>no</name>
        <!-- Keyboard indicator for Norwegian layouts -->
        <shortDescription>no</shortDescription>
        <description>Norwegian</description>
        <languageList>
          <iso639Id>nor</iso639Id>
          <iso639Id>nob</iso639Id>
          <iso639Id>nno</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Norwegian (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Norwegian (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Norwegian (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>smi</name>
            <description>Northern Saami (Norway)</description>
            <languageList>
              <iso639Id>sme</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>smi_nodeadkeys</name>
            <description>Northern Saami (Norway, no dead keys)</description>
            <languageList>
              <iso639Id>sme</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Norwegian (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_nodeadkeys</name>
            <description>Norwegian (Macintosh, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>Norwegian (Colemak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>pl</name>
        <!-- Keyboard indicator for Polish layouts -->
        <shortDescription>pl</shortDescription>
        <description>Polish</description>
        <languageList>
          <iso639Id>pol</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Polish (legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwertz</name>
            <description>Polish (QWERTZ)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Polish (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak_quotes</name>
            <description>Polish (Dvorak, with Polish quotes on quotemark key)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak_altquotes</name>
            <description>Polish (Dvorak, with Polish quotes on key 1)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>csb</name>
            <description>Kashubian</description>
            <languageList>
              <iso639Id>csb</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>szl</name>
            <description>Silesian</description>
            <languageList>
              <iso639Id>szl</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ru_phonetic_dvorak</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Poland, phonetic Dvorak)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvp</name>
            <description>Polish (programmer Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>pt</name>
        <!-- Keyboard indicator for Portuguese layouts -->
        <shortDescription>pt</shortDescription>
        <description>Portuguese</description>
        <languageList>
          <iso639Id>por</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Portuguese (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>Portuguese (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Portuguese (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_nodeadkeys</name>
            <description>Portuguese (Macintosh, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_sundeadkeys</name>
            <description>Portuguese (Macintosh, Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo</name>
            <description>Portuguese (Nativo)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo-us</name>
            <description>Portuguese (Nativo for US keyboards)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>nativo-epo</name>
            <description>Esperanto (Portugal, Nativo)</description>
            <languageList>
              <iso639Id>epo</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ro</name>
        <!-- Keyboard indicator for Romanian layouts -->
        <shortDescription>ro</shortDescription>
        <description>Romanian</description>
        <languageList>
          <iso639Id>ron</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>std</name>
            <description>Romanian (standard)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Romanian (Windows)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ru</name>
        <!-- Keyboard indicator for Russian layouts -->
        <shortDescription>ru</shortDescription>
        <description>Russian</description>
        <languageList>
          <iso639Id>rus</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Russian (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_winkeys</name>
            <description>Russian (phonetic, Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_YAZHERTY</name>
            <description>Russian (phonetic, YAZHERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>typewriter</name>
            <description>Russian (typewriter)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Russian (legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>typewriter-legacy</name>
            <description>Russian (typewriter, legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tt</name>
            <description>Tatar</description>
            <languageList>
              <iso639Id>tat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>os_legacy</name>
            <description>Ossetian (legacy)</description>
            <languageList>
              <iso639Id>oss</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>os_winkeys</name>
            <description>Ossetian (Windows)</description>
            <languageList>
              <iso639Id>oss</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cv</name>
            <description>Chuvash</description>
            <languageList>
              <iso639Id>chv</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cv_latin</name>
            <description>Chuvash (Latin)</description>
            <languageList>
              <iso639Id>chv</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>udm</name>
            <description>Udmurt</description>
            <languageList>
              <iso639Id>udm</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>kom</name>
            <description>Komi</description>
            <languageList>
              <iso639Id>kom</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sah</name>
            <description>Yakut</description>
            <languageList>
              <iso639Id>sah</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>xal</name>
            <description>Kalmyk</description>
            <languageList>
              <iso639Id>xal</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dos</name>
            <description>Russian (DOS)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Russian (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>srp</name>
            <description>Serbian (Russia)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
              <iso639Id>srp</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>bak</name>
            <description>Bashkirian</description>
            <languageList>
              <iso639Id>bak</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>chm</name>
            <description>Mari</description>
            <languageList>
              <iso639Id>chm</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_azerty</name>
            <description>Russian (phonetic, AZERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_dvorak</name>
            <description>Russian (phonetic, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>phonetic_fr</name>
            <description>Russian (phonetic, French)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>rs</name>
        <!-- Keyboard indicator for Serbian layouts -->
        <shortDescription>sr</shortDescription>
        <description>Serbian</description>
        <languageList>
          <iso639Id>srp</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>yz</name>
            <description>Serbian (Cyrillic, ZE and ZHE swapped)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latin</name>
            <description>Serbian (Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinunicode</name>
            <description>Serbian (Latin, Unicode)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinyz</name>
            <description>Serbian (Latin, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinunicodeyz</name>
            <description>Serbian (Latin, Unicode, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alternatequotes</name>
            <description>Serbian (Cyrillic, with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>latinalternatequotes</name>
            <description>Serbian (Latin, with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rue</name>
            <description>Pannonian Rusyn</description>
            <languageList>
              <iso639Id>rue</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>si</name>
        <!-- Keyboard indicator for Slovenian layouts -->
        <shortDescription>sl</shortDescription>
        <description>Slovenian</description>
        <languageList>
          <iso639Id>slv</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alternatequotes</name>
            <description>Slovenian (with guillemets)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Slovenian (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>sk</name>
        <!-- Keyboard indicator for Slovak layouts -->
        <shortDescription>sk</shortDescription>
        <description>Slovak</description>
        <languageList>
          <iso639Id>slk</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>bksl</name>
            <description>Slovak (extended backslash)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty</name>
            <description>Slovak (QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>qwerty_bksl</name>
            <description>Slovak (QWERTY, extended backslash)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>es</name>
        <!-- Keyboard indicator for Spanish layouts -->
        <shortDescription>es</shortDescription>
        <description>Spanish</description>
        <languageList>
          <iso639Id>spa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Spanish (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Spanish (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>deadtilde</name>
            <description>Spanish (dead tilde)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>sundeadkeys</name>
            <description>Spanish (Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Spanish (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ast</name>
            <shortDescription>ast</shortDescription>
            <description>Asturian (Spain, with bottom-dot H and L)</description>
            <languageList>
              <iso639Id>ast</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>cat</name>
            <shortDescription>ca</shortDescription>
            <description>Catalan (Spain, with middle-dot L)</description>
            <languageList>
              <iso639Id>cat</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Spanish (Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>se</name>
        <!-- Keyboard indicator for Swedish layouts -->
        <shortDescription>sv</shortDescription>
        <description>Swedish</description>
        <languageList>
          <iso639Id>swe</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>nodeadkeys</name>
            <description>Swedish (no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Swedish (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rus</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Sweden, phonetic)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rus_nodeadkeys</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Sweden, phonetic, no dead keys)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>smi</name>
            <description>Northern Saami (Sweden)</description>
            <languageList>
              <iso639Id>sme</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>Swedish (Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>svdvorak</name>
            <description>Swedish (Svdvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us_dvorak</name>
            <description>Swedish (Dvorak, intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <description>Swedish (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>swl</name>
            <description>Swedish Sign Language</description>
            <languageList>
              <iso639Id>swl</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ch</name>
        <!-- Keyboard indicator for German layouts -->
        <shortDescription>de</shortDescription>
        <description>German (Switzerland)</description>
        <languageList>
          <iso639Id>deu</iso639Id>
          <iso639Id>gsw</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>German (Switzerland, legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>de_nodeadkeys</name>
            <!-- Keyboard indicator for German layouts -->
            <shortDescription>de</shortDescription>
            <description>German (Switzerland, no dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>de_sundeadkeys</name>
            <!-- Keyboard indicator for German layouts -->
            <shortDescription>de</shortDescription>
            <description>German (Switzerland, Sun dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Switzerland)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr_nodeadkeys</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Switzerland, no dead keys)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr_sundeadkeys</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Switzerland, Sun dead keys)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr_mac</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Switzerland, Macintosh)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>de_mac</name>
            <!-- Keyboard indicator for German layouts -->
            <shortDescription>de</shortDescription>
            <description>German (Switzerland, Macintosh)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>sy</name>
        <!-- Keyboard indicator for Arabic layouts -->
        <shortDescription>ar</shortDescription>
        <description>Arabic (Syria)</description>
        <languageList>
          <iso639Id>syr</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>syc</name>
            <!-- Keyboard indicator for Syriac layouts -->
            <shortDescription>syc</shortDescription>
            <description>Syriac</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>syc_phonetic</name>
            <!-- Keyboard indicator for Syriac layouts -->
            <shortDescription>syc</shortDescription>
            <description>Syriac (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Syria, Latin Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_f</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Syria, F)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_alt</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Syria, Latin Alt-Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tj</name>
        <!-- Keyboard indicator for Tajik layouts -->
        <shortDescription>tg</shortDescription>
        <description>Tajik</description>
        <languageList>
          <iso639Id>tgk</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Tajik (legacy)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>lk</name>
        <!-- Keyboard indicator for Sinhala layouts -->
        <shortDescription>si</shortDescription>
        <description>Sinhala (phonetic)</description>
        <languageList>
          <iso639Id>sin</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>tam_unicode</name>
            <!-- Keyboard indicator for Tamil layouts -->
            <shortDescription>ta</shortDescription>
            <description>Tamil (Sri Lanka, TamilNet '99)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>tam_TAB</name>
            <description>Tamil (Sri Lanka, TamilNet '99, TAB encoding)</description>
            <languageList>
              <iso639Id>tam</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us</name>
            <!-- Keyboard indicator for US layouts -->
            <shortDescription>us</shortDescription>
            <description>Sinhala (US)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>th</name>
        <!-- Keyboard indicator for Thai layouts -->
        <shortDescription>th</shortDescription>
        <description>Thai</description>
        <languageList>
          <iso639Id>tha</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>tis</name>
            <description>Thai (TIS-820.2538)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>pat</name>
            <description>Thai (Pattachote)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tr</name>
        <!-- Keyboard indicator for Turkish layouts -->
        <shortDescription>tr</shortDescription>
        <description>Turkish</description>
        <languageList>
          <iso639Id>tur</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>f</name>
            <description>Turkish (F)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>alt</name>
            <description>Turkish (Alt-Q)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Turkey, Latin Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_f</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Turkey, F)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ku_alt</name>
            <!-- Keyboard indicator for Kurdish layouts -->
            <shortDescription>ku</shortDescription>
            <description>Kurdish (Turkey, Latin Alt-Q)</description>
            <languageList>
              <iso639Id>kur</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>Turkish (intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>crh</name>
            <!-- Keyboard indicator for Crimean Tatar layouts -->
            <shortDescription>crh</shortDescription>
            <description>Crimean Tatar (Turkish Q)</description>
            <languageList>
              <iso639Id>crh</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>crh_f</name>
            <!-- Keyboard indicator for Crimean Tatar layouts -->
            <shortDescription>crh</shortDescription>
            <description>Crimean Tatar (Turkish F)</description>
            <languageList>
              <iso639Id>crh</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>crh_alt</name>
            <!-- Keyboard indicator for Crimean Tatar layouts -->
            <shortDescription>crh</shortDescription>
            <description>Crimean Tatar (Turkish Alt-Q)</description>
            <languageList>
              <iso639Id>crh</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tw</name>
        <!-- Keyboard indicator for Taiwanese layouts -->
        <shortDescription>zh</shortDescription>
        <description>Taiwanese</description>
        <languageList>
          <iso639Id>fox</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>indigenous</name>
            <description>Taiwanese (indigenous)</description>
            <languageList>
              <iso639Id>ami</iso639Id>
              <iso639Id>tay</iso639Id>
              <iso639Id>bnn</iso639Id>
              <iso639Id>ckv</iso639Id>
              <iso639Id>pwn</iso639Id>
              <iso639Id>pyu</iso639Id>
              <iso639Id>dru</iso639Id>
              <iso639Id>ais</iso639Id>
              <iso639Id>ssf</iso639Id>
              <iso639Id>tao</iso639Id>
              <iso639Id>tsu</iso639Id>
              <iso639Id>trv</iso639Id>
              <iso639Id>xnb</iso639Id>
              <iso639Id>sxr</iso639Id>
              <iso639Id>uun</iso639Id>
              <iso639Id>fos</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>saisiyat</name>
            <!-- Keyboard indicator for Saisiyat layouts -->
            <shortDescription>xsy</shortDescription>
            <description>Saisiyat (Taiwan)</description>
            <languageList>
              <iso639Id>xsy</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ua</name>
        <!-- Keyboard indicator for Ukranian layouts -->
        <shortDescription>uk</shortDescription>
        <description>Ukrainian</description>
        <languageList>
          <iso639Id>ukr</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>phonetic</name>
            <description>Ukrainian (phonetic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>typewriter</name>
            <description>Ukrainian (typewriter)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>winkeys</name>
            <description>Ukrainian (Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Ukrainian (legacy)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rstu</name>
            <description>Ukrainian (standard RSTU)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>rstu_ru</name>
            <description>Russian (Ukraine, standard RSTU)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>homophonic</name>
            <description>Ukrainian (homophonic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>gb</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (UK)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>extd</name>
            <description>English (UK, extended, Windows)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>intl</name>
            <description>English (UK, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>English (UK, Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorakukp</name>
            <description>English (UK, Dvorak, with UK punctuation)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac</name>
            <description>English (UK, Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>mac_intl</name>
            <description>English (UK, Macintosh, intl.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>English (UK, Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>pl</name>
            <!-- Keyboard indicator for Polish layouts -->
            <shortDescription>pl</shortDescription>
            <description>Polish (British keyboard)</description>
            <languageList>
              <iso639Id>pol</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>uz</name>
        <!-- Keyboard indicator for Uzbek layouts -->
        <shortDescription>uz</shortDescription>
        <description>Uzbek</description>
        <languageList>
          <iso639Id>uzb</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>latin</name>
            <description>Uzbek (Latin)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>vn</name>
        <!-- Keyboard indicator for Vietnamese layouts -->
        <shortDescription>vi</shortDescription>
        <description>Vietnamese</description>
        <languageList>
          <iso639Id>vie</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>us</name>
            <description>Vietnamese (US)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>fr</name>
            <description>Vietnamese (French)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>kr</name>
        <!-- Keyboard indicator for Korean layouts -->
        <shortDescription>ko</shortDescription>
        <description>Korean</description>
        <languageList>
          <iso639Id>kor</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>kr104</name>
            <description>Korean (101/104-key compatible)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>nec_vndr/jp</name>
        <!-- Keyboard indicator for Japaneses -->
        <shortDescription>ja</shortDescription>
        <description>Japanese (PC-98)</description>
        <countryList>
          <iso3166Id>JP</iso3166Id>
        </countryList>
        <languageList>
          <iso639Id>jpn</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ie</name>
        <!-- Keyboard indicator for Irish layouts -->
        <shortDescription>ie</shortDescription>
        <description>Irish</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>CloGaelach</name>
            <description>CloGaelach</description>
            <languageList>
              <iso639Id>gle</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>UnicodeExpert</name>
            <description>Irish (UnicodeExpert)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ogam</name>
            <description>Ogham</description>
            <languageList>
              <iso639Id>sga</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ogam_is434</name>
            <description>Ogham (IS434)</description>
            <languageList>
              <iso639Id>sga</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>pk</name>
        <!-- Keyboard indicator for Urdu layouts -->
        <shortDescription>ur</shortDescription>
        <description>Urdu (Pakistan)</description>
        <languageList>
          <iso639Id>urd</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>urd-crulp</name>
            <description>Urdu (Pakistan, CRULP)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>urd-nla</name>
            <description>Urdu (Pakistan, NLA)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>ara</name>
            <shortDescription>ar</shortDescription>
            <description>Arabic (Pakistan)</description>
            <languageList>
              <iso639Id>ara</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>snd</name>
            <!-- Keyboard indicator for Sindhi layouts -->
            <shortDescription>sd</shortDescription>
            <description>Sindhi</description>
            <languageList>
              <iso639Id>snd</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>mv</name>
        <!-- Keyboard indicator for Dhivehi layouts -->
        <shortDescription>dv</shortDescription>
        <description>Dhivehi</description>
        <languageList>
          <iso639Id>div</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>za</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (South Africa)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>epo</name>
        <!-- Keyboard indicator for Esperanto layouts -->
        <shortDescription>eo</shortDescription>
        <description>Esperanto</description>
        <languageList>
          <iso639Id>epo</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>legacy</name>
            <description>Esperanto (legacy)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>np</name>
        <!-- Keyboard indicator for Nepali layouts -->
        <shortDescription>ne</shortDescription>
        <description>Nepali</description>
        <languageList>
          <iso639Id>nep</iso639Id>
          <!-- sat-Deva used in Nepal: http://www.ethnologue.com/language/sat -->
          <iso639Id>sat</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ng</name>
        <!-- Keyboard indicator for English layouts -->
        <shortDescription>en</shortDescription>
        <description>English (Nigeria)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>igbo</name>
            <!-- Keyboard indicator for Igbo layouts -->
            <shortDescription>ig</shortDescription>
            <description>Igbo</description>
            <languageList>
              <iso639Id>ibo</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>yoruba</name>
            <!-- Keyboard indicator for Yoruba layouts -->
            <shortDescription>yo</shortDescription>
            <description>Yoruba</description>
            <languageList>
              <iso639Id>yor</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>hausa</name>
            <!-- Keyboard indicator for Hausa layouts -->
            <shortDescription>ha</shortDescription>
            <description>Hausa (Nigeria)</description>
            <languageList>
              <iso639Id>hau</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>et</name>
        <!-- Keyboard indicator for Amharic layouts -->
        <shortDescription>am</shortDescription>
        <description>Amharic</description>
        <languageList>
          <iso639Id>amh</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>sn</name>
        <!-- Keyboard indicator for Wolof layouts -->
        <shortDescription>wo</shortDescription>
        <description>Wolof</description>
        <languageList>
          <iso639Id>wol</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>brai</name>
        <!-- Keyboard indicator for Braille layouts -->
        <shortDescription>brl</shortDescription>
        <description>Braille</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>left_hand</name>
            <description>Braille (left-handed)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>left_hand_invert</name>
            <description>Braille (left-handed inverted thumb)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>right_hand</name>
            <description>Braille (right-handed)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>right_hand_invert</name>
            <description>Braille (right-handed inverted thumb)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tm</name>
        <!-- Keyboard indicator for Turkmen layouts -->
        <shortDescription>tk</shortDescription>
        <description>Turkmen</description>
        <languageList>
          <iso639Id>tuk</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>alt</name>
            <description>Turkmen (Alt-Q)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>ml</name>
        <!-- Keyboard indicator for Bambara layouts -->
        <shortDescription>bm</shortDescription>
        <description>Bambara</description>
        <languageList>
          <iso639Id>bam</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>fr-oss</name>
            <!-- Keyboard indicator for French layouts -->
            <shortDescription>fr</shortDescription>
            <description>French (Mali, alt.)</description>
            <languageList>
              <iso639Id>fra</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us-mac</name>
            <!-- Keyboard indicator for English layouts -->
            <shortDescription>en</shortDescription>
            <description>English (Mali, US, Macintosh)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>us-intl</name>
            <!-- Keyboard indicator for English layouts -->
            <shortDescription>en</shortDescription>
            <description>English (Mali, US, intl.)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>tz</name>
        <!-- Keyboard indicator for Swahili layouts -->
        <shortDescription>sw</shortDescription>
        <description>Swahili (Tanzania)</description>
        <languageList>
          <iso639Id>swa</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>tg</name>
        <shortDescription>fr-tg</shortDescription>
        <description>French (Togo)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
          <iso639Id>ajg</iso639Id>
          <iso639Id>blo</iso639Id>
          <iso639Id>kpo</iso639Id>
          <iso639Id>ewe</iso639Id>
          <iso639Id>fon</iso639Id>
          <iso639Id>fue</iso639Id>
          <iso639Id>gej</iso639Id>
          <iso639Id>ife</iso639Id>
          <iso639Id>kbp</iso639Id>
          <iso639Id>las</iso639Id>
          <iso639Id>dop</iso639Id>
          <iso639Id>mfg</iso639Id>
          <iso639Id>nmz</iso639Id>
          <iso639Id>bud</iso639Id>
          <iso639Id>gng</iso639Id>
          <iso639Id>kdh</iso639Id>
          <iso639Id>soy</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ke</name>
        <!-- Keyboard indicator for Swahili layouts -->
        <shortDescription>sw</shortDescription>
        <description>Swahili (Kenya)</description>
        <languageList>
          <iso639Id>swa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>kik</name>
            <!-- Keyboard indicator for Kikuyu layouts -->
            <shortDescription>ki</shortDescription>
            <description>Kikuyu</description>
            <languageList>
              <iso639Id>kik</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>bw</name>
        <!-- Keyboard indicator for Tswana layouts -->
        <shortDescription>tn</shortDescription>
        <description>Tswana</description>
        <languageList>
          <iso639Id>tsn</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>ph</name>
        <!-- Keyboard indicator for Filipino layouts -->
        <shortDescription>ph</shortDescription>
        <description>Filipino</description>
        <languageList>
          <iso639Id>eng</iso639Id>
          <iso639Id>bik</iso639Id>
          <iso639Id>ceb</iso639Id>
          <iso639Id>fil</iso639Id>
          <iso639Id>hil</iso639Id>
          <iso639Id>ilo</iso639Id>
          <iso639Id>pam</iso639Id>
          <iso639Id>pag</iso639Id>
          <iso639Id>phi</iso639Id>
          <iso639Id>tgl</iso639Id>
          <iso639Id>war</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>qwerty-bay</name>
            <description>Filipino (QWERTY, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>capewell-dvorak</name>
            <description>Filipino (Capewell-Dvorak, Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>capewell-dvorak-bay</name>
            <description>Filipino (Capewell-Dvorak, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>capewell-qwerf2k6</name>
            <description>Filipino (Capewell-QWERF 2006, Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>capewell-qwerf2k6-bay</name>
            <description>Filipino (Capewell-QWERF 2006, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak</name>
            <description>Filipino (Colemak, Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>colemak-bay</name>
            <description>Filipino (Colemak, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak</name>
            <description>Filipino (Dvorak, Latin)</description>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>dvorak-bay</name>
            <description>Filipino (Dvorak, Baybayin)</description>
            <languageList>
              <iso639Id>bik</iso639Id>
              <iso639Id>ceb</iso639Id>
              <iso639Id>fil</iso639Id>
              <iso639Id>hil</iso639Id>
              <iso639Id>ilo</iso639Id>
              <iso639Id>pam</iso639Id>
              <iso639Id>pag</iso639Id>
              <iso639Id>phi</iso639Id>
              <iso639Id>tgl</iso639Id>
              <iso639Id>war</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>md</name>
        <shortDescription>md</shortDescription>
        <description>Moldavian</description>
        <languageList>
          <iso639Id>ron</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>gag</name>
            <shortDescription>gag</shortDescription>
            <description>Moldavian (Gagauz)</description>
            <languageList>
              <iso639Id>gag</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>id</name>
        <shortDescription>id</shortDescription>
        <description>Indonesian (Arab Melayu, phonetic)</description>
        <languageList>
          <iso639Id>ind</iso639Id>
          <iso639Id>msa</iso639Id>
          <iso639Id>min</iso639Id>
          <iso639Id>ace</iso639Id>
          <iso639Id>bjn</iso639Id>
          <iso639Id>tsg</iso639Id>
          <iso639Id>mfa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
       <variant>
         <configItem>
          <name>phoneticx</name>
            <description>Indonesian (Arab Melayu, extended phonetic)</description>
         </configItem>
       </variant>
      </variantList>
    </layout>
    <layout>
      <configItem>
        <name>jv</name>
        <shortDescription>jv</shortDescription>
        <description>Indonesian (Javanese)</description>
        <languageList>
          <iso639Id>jv</iso639Id>
        </languageList>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>my</name>
        <shortDescription>ms</shortDescription>
        <description>Malay (Jawi, Arabic Keyboard)</description>
        <languageList>
          <iso639Id>ind</iso639Id>
          <iso639Id>msa</iso639Id>
          <iso639Id>min</iso639Id>
          <iso639Id>ace</iso639Id>
          <iso639Id>bjn</iso639Id>
          <iso639Id>tsg</iso639Id>
          <iso639Id>mfa</iso639Id>
        </languageList>
      </configItem>
      <variantList>
       <variant>
         <configItem>
          <name>phonetic</name>
            <description>Malay (Jawi, phonetic)</description>
         </configItem>
       </variant>
      </variantList>
    </layout>
  </layoutList>
  <optionList>
    <group allowMultipleSelection="true">
      <!-- The key combination used to switch between groups -->
      <configItem>
        <name>grp</name>
        <description>Switching to another layout</description>
      </configItem>
      <option>
        <configItem>
          <name>grp:switch</name>
          <description>Right Alt (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lswitch</name>
          <description>Left Alt (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lwin_switch</name>
          <description>Left Win (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rwin_switch</name>
          <description>Right Win (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:win_switch</name>
          <description>Any Win (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:menu_switch</name>
          <description>Menu (while pressed), Shift+Menu for Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:caps_switch</name>
          <description>Caps Lock (while pressed), Alt+Caps Lock for the original Caps Lock action</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rctrl_switch</name>
          <description>Right Ctrl (while pressed)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:toggle</name>
          <description>Right Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lalt_toggle</name>
          <description>Left Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:caps_toggle</name>
          <description>Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:shift_caps_toggle</name>
          <description>Shift+Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:shift_caps_switch</name>
          <description>Caps Lock to first layout; Shift+Caps Lock to last layout</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:win_menu_switch</name>
          <description>Left Win to first layout; Right Win/Menu to last layout</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_rctrl_switch</name>
          <description>Left Ctrl to first layout; Right Ctrl to last layout</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:alt_caps_toggle</name>
          <description>Alt+Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:shifts_toggle</name>
          <description>Both Shift together</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:alts_toggle</name>
          <description>Both Alt together</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:ctrls_toggle</name>
          <description>Both Ctrl together</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:ctrl_shift_toggle</name>
          <description>Ctrl+Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_lshift_toggle</name>
          <description>Left Ctrl+Left Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rctrl_rshift_toggle</name>
          <description>Right Ctrl+Right Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:ctrl_alt_toggle</name>
          <description>Alt+Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:alt_shift_toggle</name>
          <description>Alt+Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lalt_lshift_toggle</name>
          <description>Left Alt+Left Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:alt_space_toggle</name>
          <description>Alt+Space</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:menu_toggle</name>
          <description>Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lwin_toggle</name>
          <description>Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:win_space_toggle</name>
          <description>Win+Space</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rwin_toggle</name>
          <description>Right Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lshift_toggle</name>
          <description>Left Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rshift_toggle</name>
          <description>Right Shift</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_toggle</name>
          <description>Left Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:rctrl_toggle</name>
          <description>Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:sclk_toggle</name>
          <description>Scroll Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_lwin_rctrl_menu</name>
          <description>Left Ctrl+Left Win to first layout; Right Ctrl+Menu to second layout</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp:lctrl_lwin_toggle</name>
          <description>Left Ctrl+Left Win</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- The key combination used to choose the 2nd level of symbols -->
      <configItem>
        <name>lv2</name>
        <description>Key to choose the 2nd level</description>
      </configItem>
      <option>
        <configItem>
          <name>lv2:lsgt_switch</name>
          <description>The "&lt; &gt;" key</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- The key combination used to choose the 3rd (and 4th, together with Shift)
           level of symbols -->
      <configItem>
        <name>lv3</name>
        <description>Key to choose the 3rd level</description>
      </configItem>
      <option>
        <configItem>
          <name>lv3:switch</name>
          <description>Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:menu_switch</name>
          <description>Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:win_switch</name>
          <description>Any Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:lwin_switch</name>
          <description>Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:rwin_switch</name>
          <description>Right Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:alt_switch</name>
          <description>Any Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:lalt_switch</name>
          <description>Left Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:ralt_switch</name>
          <description>Right Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:ralt_switch_multikey</name>
          <description>Right Alt; Shift+Right Alt as Compose</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:ralt_alt</name>
          <description>Right Alt never chooses 3rd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:enter_switch</name>
          <description>Enter on keypad</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:caps_switch</name>
          <description>Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:bksl_switch</name>
          <description>Backslash</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:lsgt_switch</name>
          <description>The "&lt; &gt;" key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:caps_switch_latch</name>
          <description>Caps Lock; acts as onetime lock when pressed together with another 3rd-level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:bksl_switch_latch</name>
          <description>Backslash; acts as onetime lock when pressed together with another 3rd level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv3:lsgt_switch_latch</name>
          <description>The "&lt; &gt;" key; acts as onetime lock when pressed together with another 3rd level chooser</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Tweaking the position of the "Ctrl" key -->
      <configItem>
        <name>ctrl</name>
        <description>Ctrl position</description>
      </configItem>
      <option>
        <configItem>
          <name>ctrl:nocaps</name>
          <description>Caps Lock as Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:lctrl_meta</name>
          <description>Left Ctrl as Meta</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swapcaps</name>
          <description>Swap Ctrl and Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swapcaps_hyper</name>
          <description>Caps Lock as Ctrl, Ctrl as Hyper</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:ac_ctrl</name>
          <description>To the left of "A"</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:aa_ctrl</name>
          <description>At the bottom left</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:rctrl_ralt</name>
          <description>Right Ctrl as Right Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:menu_rctrl</name>
          <description>Menu as Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swap_lalt_lctl</name>
          <description>Swap Left Alt with Left Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swap_lwin_lctl</name>
          <description>Swap Left Win with Left Ctrl</description>
        </configItem>
      </option><option>
        <configItem>
          <name>ctrl:swap_rwin_rctl</name>
          <description>Swap Right Win with Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>ctrl:swap_lalt_lctl_lwin</name>
          <description>Left Alt as Ctrl, Left Ctrl as Win, Left Win as Left Alt</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Using startard LEDs to indicate the alternative (not first) group(s) -->
      <configItem>
        <name>grp_led</name>
        <description>Use keyboard LED to show alternative layout</description>
      </configItem>
      <option>
        <configItem>
          <name>grp_led:num</name>
          <description>Num Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp_led:caps</name>
          <description>Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grp_led:scroll</name>
          <description>Scroll Lock</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Using LEDs to indicate modifiers -->
      <configItem>
        <name>mod_led</name>
        <description>Use keyboard LED to indicate modifiers</description>
      </configItem>
      <option>
        <configItem>
          <name>mod_led:compose</name>
          <description>Compose</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="false">
      <!-- Select a keypad type -->
      <configItem>
        <name>keypad</name>
        <description>Layout of numeric keypad</description>
      </configItem>
      <option>
        <configItem>
          <name>keypad:legacy</name>
          <description>Legacy</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:oss</name>
          <description>Unicode arrows and math operators</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:future</name>
          <description>Unicode arrows and math operators on default level</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:legacy_wang</name>
          <description>Legacy Wang 724</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:oss_wang</name>
          <description>Wang 724 keypad with Unicode arrows and math operators</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:future_wang</name>
          <description>Wang 724 keypad with Unicode arrows and math operators on default level</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:hex</name>
          <description>Hexadecimal</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:atm</name>
          <description>Phone and ATM style</description>
       </configItem>
      </option>
    </group>
    <!-- This option should override the KPDL key defined in keypad; I hope it's declared in the right place -->
    <group allowMultipleSelection="false">
      <!-- Select a keypad KPDL variant -->
      <configItem>
        <name>kpdl</name>
        <description>Numeric keypad Delete behavior</description>
      </configItem>
      <option>
        <configItem>
          <!-- Actually, with KP_DECIMAL, as the old keypad(dot) -->
          <name>kpdl:dot</name>
          <description>Legacy key with dot</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:comma</name>
          <!-- Actually, with KP_SEPARATOR, as the old keypad(comma) -->
          <description>Legacy key with comma</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:dotoss</name>
          <description>Four-level key with dot</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:dotoss_latin9</name>
          <description>Four-level key with dot, Latin-9 only</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:commaoss</name>
          <description>Four-level key with comma</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:momayyezoss</name>
          <description>Four-level key with momayyez</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:kposs</name>
          <!-- This assumes the KP_ abstract symbols are actually useful for some apps
               The description needs to be rewritten -->
          <description>Four-level key with abstract separators</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>kpdl:semi</name>
          <description>Semicolon on third level</description>
       </configItem>
      </option>
    </group>
    <group allowMultipleSelection="false">
      <!-- Caps Lock tweaks.
           "Internal" capitalization means capitalization using some internal tables.
           Otherwise "as Shift" - means using next group. -->
      <configItem>
        <name>caps</name>
        <description>Caps Lock behavior</description>
      </configItem>
      <option>
        <configItem>
          <name>caps:internal</name>
          <description>Caps Lock uses internal capitalization; Shift "pauses" Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:internal_nocancel</name>
          <description>Caps Lock uses internal capitalization; Shift does not affect Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:shift</name>
          <description>Caps Lock acts as Shift with locking; Shift "pauses" Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:shift_nocancel</name>
          <description>Caps Lock acts as Shift with locking; Shift does not affect Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:capslock</name>
          <description>Caps Lock toggles normal capitalization of alphabetic characters</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:shiftlock</name>
          <description>Caps Lock toggles Shift Lock (affects all keys)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:swapescape</name>
          <description>Swap Esc and Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:escape</name>
          <description>Make Caps Lock an additional Esc</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:escape_shifted_capslock</name>
          <description>Make Caps Lock an additional Esc, but Shift + Caps Lock is the regular Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:backspace</name>
          <description>Make Caps Lock an additional Backspace</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:super</name>
          <description>Make Caps Lock an additional Super</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:hyper</name>
          <description>Make Caps Lock an additional Hyper</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:menu</name>
          <description>Make Caps Lock an additional Menu key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:numlock</name>
          <description>Make Caps Lock an additional Num Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:ctrl_modifier</name>
          <description>Caps Lock is also a Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>caps:none</name>
          <description>Caps Lock is disabled</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="false">
      <!-- Using special PC keys (Win, Menu) to work as standard X keys (Super, Hyper, etc.) -->
      <configItem>
        <name>altwin</name>
        <description>Alt and Win behavior</description>
      </configItem>
      <option>
        <configItem>
          <name>altwin:menu</name>
          <description>Add the standard behavior to Menu key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:menu_win</name>
          <description>Menu is mapped to Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:meta_alt</name>
          <description>Alt and Meta are on Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:alt_win</name>
          <description>Alt is mapped to Win and the usual Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:ctrl_win</name>
          <description>Ctrl is mapped to Win and the usual Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:ctrl_alt_win</name>
          <description>Ctrl is mapped to Alt, Alt to Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:meta_win</name>
          <description>Meta is mapped to Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:left_meta_win</name>
          <description>Meta is mapped to Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:hyper_win</name>
          <description>Hyper is mapped to Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:alt_super_win</name>
          <description>Alt is mapped to Right Win, Super to Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:swap_lalt_lwin</name>
          <description>Left Alt is swapped with Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:swap_alt_win</name>
          <description>Alt is swapped with Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>altwin:prtsc_rwin</name>
          <description>Win is mapped to PrtSc and the usual Win</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Tweaking the position of the "Compose" key: mapping to existing PC keys -->
      <configItem>
        <name>Compose key</name>
        <description>Position of Compose key</description>
      </configItem>
      <option>
        <configItem>
          <name>compose:ralt</name>
          <description>Right Alt</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:lwin</name>
          <description>Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:lwin-altgr</name>
          <description>3rd level of Left Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:rwin</name>
          <description>Right Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:rwin-altgr</name>
          <description>3rd level of Right Win</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:menu</name>
          <description>Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:menu-altgr</name>
          <description>3rd level of Menu</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:lctrl</name>
          <description>Left Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:lctrl-altgr</name>
          <description>3rd level of Left Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:rctrl</name>
          <description>Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:rctrl-altgr</name>
          <description>3rd level of Right Ctrl</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:caps</name>
          <description>Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:caps-altgr</name>
          <description>3rd level of Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:102</name>
          <description>The "&lt; &gt;" key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:102-altgr</name>
          <description>3rd level of the "&lt; &gt;" key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:paus</name>
          <description>Pause</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:prsc</name>
          <description>PrtSc</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>compose:sclk</name>
          <description>Scroll Lock</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>compat</name>
        <description>Compatibility options</description>
      </configItem>
      <option>
        <configItem>
          <name>numpad:pc</name>
          <description>Default numeric keypad keys</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>numpad:mac</name>
          <description>Numeric keypad always enters digits (as in macOS)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>numpad:microsoft</name>
          <description>Num Lock on: digits; Shift for arrows. Num Lock off: arrows (as in Windows)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>numpad:shift3</name>
          <description>Shift does not cancel Num Lock, chooses 3rd level instead</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>srvrkeys:none</name>
          <description>Special keys (Ctrl+Alt+&lt;key&gt;) handled in a server</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>apple:alupckeys</name>
          <description>Apple Aluminium emulates Pause, PrtSc, Scroll Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>shift:breaks_caps</name>
          <description>Shift cancels Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>misc:typo</name>
          <description>Enable extra typographic characters</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>misc:apl</name>
          <description>Enable APL overlay characters</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>shift:both_capslock</name>
          <description>Both Shift together enable Caps Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>shift:both_capslock_cancel</name>
          <description>Both Shift together enable Caps Lock; one Shift key disables it</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>shift:both_shiftlock</name>
          <description>Both Shift together enable Shift Lock</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>keypad:pointerkeys</name>
          <description>Shift + Num Lock enables PointerKeys</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grab:break_actions</name>
          <description>Allow breaking grabs with keyboard actions (warning: security risk)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>grab:debug</name>
          <description>Allow grab and window tree logging</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Special shortcuts for the Euro character -->
      <configItem>
        <name>currencysign</name>
        <description>Currency signs</description>
      </configItem>
      <option>
        <configItem>
          <name>eurosign:e</name>
          <description>Euro on E</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>eurosign:2</name>
          <description>Euro on 2</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>eurosign:4</name>
          <description>Euro on 4</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>eurosign:5</name>
          <description>Euro on 5</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>rupeesign:4</name>
          <description>Rupee on 4</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>lv5</name>
        <description>Key to choose 5th level</description>
      </configItem>
      <option>
        <configItem>
          <name>lv5:lsgt_switch</name>
          <description>The "&lt; &gt;" key chooses 5th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:ralt_switch</name>
          <description>Right Alt chooses 5th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:lsgt_switch_lock</name>
          <description>The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:ralt_switch_lock</name>
          <description>Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:lwin_switch_lock</name>
          <description>Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:rwin_switch_lock</name>
          <description>Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
<!--
      <option>
        <configItem>
          <name>lv5:lsgt_switch_lock_cancel</name>
          <description>The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:ralt_switch_lock_cancel</name>
          <description>Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:lwin_switch_lock_cancel</name>
          <description>Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:rwin_switch_lock_cancel</name>
          <description>Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:lsgt_switch_lock_cancel</name>
          <description>The "&lt; &gt;" key chooses 5th level; acts as onetime lock lock when pressed together with another 5th level chooser</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>lv5:ralt_switch_lock_cancel</name>
          <description>Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser</description>
        </configItem>
      </option>
-->
    </group>
    <group allowMultipleSelection="false">
      <!-- Let space output NBSP, NNBSP, ZWNJ, and ZWJ for the desired level -->
      <configItem>
        <name>nbsp</name>
        <description>Non-breaking space input</description>
      </configItem>
      <option>
        <configItem>
          <name>nbsp:none</name>
          <description>Usual space at any level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level2</name>
          <description>Non-breaking space at the 2nd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level3</name>
          <description>Non-breaking space at the 3rd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level3s</name>
          <description>Non-breaking space at the 3rd level, nothing at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level3n</name>
          <description>Non-breaking space at the 3rd level, thin non-breaking space at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level4</name>
          <description>Non-breaking space at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level4n</name>
          <description>Non-breaking space at the 4th level, thin non-breaking space at the 6th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:level4nl</name>
          <description>Non-breaking space at the 4th level, thin non-breaking space at the 6th level (via Ctrl+Shift)</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2</name>
          <description>Zero-width non-joiner at the 2nd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2zwj3</name>
          <description>Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2zwj3nb4</name>
          <description>Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level, non-breaking space at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2nb3</name>
          <description>Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2nb3s</name>
          <description>Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, nothing at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2nb3zwj4</name>
          <description>Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, zero-width joiner at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj2nb3nnb4</name>
          <description>Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, thin non-breaking space at the 4th level</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>nbsp:zwnj3zwj4</name>
          <description>Zero-width non-joiner at the 3rd level, zero-width joiner at the 4th level</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>japan</name>
        <description>Japanese keyboard options</description>
      </configItem>
      <option>
        <configItem>
          <name>japan:kana_lock</name>
          <description>Kana Lock key is locking</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>japan:nicola_f_bs</name>
          <description>NICOLA-F style Backspace</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>japan:hztg_escape</name>
          <description>Make Zenkaku Hankaku an additional Esc</description>
       </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>korean</name>
        <description>Korean Hangul/Hanja keys</description>
      </configItem>
      <option>
        <configItem>
          <name>korean:ralt_hangul</name>
          <description>Make right Alt a Hangul key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>korean:rctrl_hangul</name>
          <description>Make right Ctrl a Hangul key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>korean:ralt_hanja</name>
          <description>Make right Alt a Hanja key</description>
        </configItem>
      </option>
      <option>
        <configItem>
          <name>korean:rctrl_hanja</name>
          <description>Make right Ctrl a Hanja key</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="false">
      <configItem>
        <name>esperanto</name>
        <description>Esperanto letters with superscripts</description>
      </configItem>
      <option>
        <configItem>
          <name>esperanto:qwerty</name>
          <description>At the corresponding key in a QWERTY layout</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>esperanto:dvorak</name>
          <description>At the corresponding key in a Dvorak layout</description>
       </configItem>
      </option>
      <option>
        <configItem>
          <name>esperanto:colemak</name>
          <description>At the corresponding key in a Colemak layout</description>
       </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>solaris</name>
        <description>Old Solaris keycodes compatibility</description>
      </configItem>
      <option>
        <configItem>
          <name>solaris:sun_compat</name>
          <description>Sun key compatibility</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <configItem>
        <name>terminate</name>
        <description>Key sequence to kill the X server</description>
      </configItem>
      <option>
        <configItem>
          <name>terminate:ctrl_alt_bksp</name>
          <description>Ctrl+Alt+Backspace</description>
        </configItem>
      </option>
    </group>
  </optionList>
</xkbConfigRegistry>
This directory lists sets of rules which can be used to obtain an exact XKB
configuration.
//
//  Rules for resolving XKB components for use with XFree86
//  Copyright 1996 by Joseph Moss
//

! model 	=	keycodes	geometry
  pc98		=	xfree98(pc98)	nec(pc98)
  jp106		=	xfree98(jp106)	pc(jp106)

! model		layout		=	symbols
  pc98		nec_vndr/jp	=	nec_vndr/jp(pc98)
  jp106		jp		=	jp

! model		layout	=	compat		types
  *		*	=	complete	complete

! option		=	symbols
  grp:switch		=	+group(switch)
  grp:toggle		=	+group(toggle)
  grp:shift_toggle	=	+group(shifts_toggle)
  grp:ctrl_shift_toggle	=	+group(ctrl_shift_toggle)
  grp:ctrl_alt_toggle	=	+group(ctrl_alt_toggle)
  ctrl:nocaps		=	+ctrl(nocaps)
  ctrl:lctrl_meta	=	+ctrl(lctrl_meta)
  ctrl:swapcaps		=	+ctrl(swapcaps)
  ctrl:swapcaps_hyper	=	+ctrl(swapcaps_hyper)
  ctrl:swapcaps_and_switch_layout	=	+ctrl(swapcaps_and_switch_layout)
  ctrl:ctrl_ac		=	+ctrl(ctrl_ac)
  ctrl:ctrl_aa		=	+ctrl(ctrl_aa)

// DO NOT EDIT THIS FILE - IT WAS AUTOGENERATED BY merge.py FROM rules/*.part
//
//
//  Rules for resolving XKB components for use with XFree86
//  Copyright 1996 by Joseph Moss
//
//  2002 Modifier: Ivan Pascal      The XFree86 Project
//

// If you want non-latin layouts implicitly include the en_US layout
// uncomment lines below
//! $nonlatin = am ara ben bd bg bt by cs deva ge gh gr guj guru il \
//              in ir iku jp kan kh kr la lao lk mk mm mn mv mal olck \
//              ori pk ru scc sy syr tel th tj tam ua uz

// PC models
! $pcmodels = pc86 pc101 pc102 pc104 pc104alt pc105

// Jolla devices and keyboards
! $jollamodels = jollasbj

// Microsoft models (using MS geometry)
! $msmodels = microsoft microsoft4000 microsoft7000 microsoftpro microsoftprousb microsoftprose microsoftsurface

// Nokia devices and keyboards
! $nokiamodels = nokiasu8w nokiarx44 nokiarx51

// TypeMatrix geometries
! $tmgeometries = tm2020 tm2030PS2 tm2030USB tm2030USB-102 tm2030USB-106

// Layouts that provide further specializations for the OLPC
! $olpclayouts = af am ara br ca es et fr it kh kz in mn np ru th tr us 

! $macbooks = macbook78 macbook79
! $maclaptop = ibook powerbook macbook78 macbook79
! $applealu = applealu_ansi applealu_iso applealu_jis
! $macs = macintosh macintosh_old ibook powerbook macbook78 macbook79

! $macvendorlayouts = ch de dk fi fr gb is it latam nl no pt se us

! $azerty = be fr
! $qwertz = al cz de hr hu ro si sk 


// all layouts with 3rd and 4th groups
! $threelevellayouts = al az \
              be br bt \
              ca ch cs cz \
              de dk \
              ee es \
              fi fo fr \
              gb gr \
              hu \
              ie ir is it \
              latam \
              lk lt \
              mn mt \
              nl no \
              pl pt \
              ro \
              se sk \
              tr \
              us \
              vn \
              za

! $thinkpads = thinkpad thinkpad60 thinkpadz60

! $sun = sun_type6_jp sun_type6_usb sun_type6_euro_usb \
         sun_type6_jp_usb sun_type6_unix_usb sun_type7_jp_usb \
         sun_type7_usb sun_type7_euro_usb sun_type7_unix_usb

! $sun_jp = sun_type6_jp sun_type6_jp_usb sun_type7_jp_usb

// Sun Type_6_7 keyboards with custom layouts
! $sun_custom = ara be br ca ch cz de dk \
                ee es fi fr gb gr it jp \
                kr lt lv nl no pl pt ro \
                ru se sk tr tw ua us

! $sun_var =  sun_type6 sun_type6_suncompat sun_type6_de sun_type6_fr \
              sun_type7 sun_type7_suncompat suncompat

! $sun_compat = sun_type6 sun_type6_suncompat sun_type7_suncompat suncompat


! $evdevkbds = ibm_spacesaver

! $dvoraklayouts = br ca de ee es fr gb no pl se us

! model		=	keycodes
  applealu_jis	=	evdev+macintosh(jisevdev)
 $jollamodels   =       evdev+jolla(jolla)
  olpc          =       evdev+olpc(olpc)
  olpcm         =       evdev+olpc(olpcm)
  *		=	evdev

! layout[1]	=	keycodes
  $azerty       =       +aliases(azerty)
  $qwertz       =       +aliases(qwertz)
  *             =       +aliases(qwerty)

! layout	=	keycodes
  $azerty       =       +aliases(azerty)
  $qwertz       =       +aliases(qwertz)
  *             =       +aliases(qwerty)

! option	=	keycodes

! model		layout	=	geometry
  thinkpad     us              =       thinkpad(us)

! model		=	geometry
  microsoftelite	=	microsoft(elite)
 $msmodels	=	microsoft(natural)
  dell101	=	dell(dell101)
  dellm65	=	dell(dellm65)
  latitude	=	dell(latitude)
  flexpro	=	keytronic(FlexPro)
  hp6000	=	hp(omnibook)
  hpmini110	=	hp(mini110)
  hpdv5		=	hp(dv5)
  omnikey101	=	northgate(omnikey101)
  sanwaskbkg3	=	sanwa(sanwaskbkg3)
 $pcmodels	=	pc(%m)
  everex	=	everex(STEPnote)
  thinkpad	=	thinkpad(intl)
  thinkpad60	=	thinkpad(60)
  thinkpadz60	=	thinkpad(60)
  apex300	=	steelseries(apex300)
 $tmgeometries	=	typematrix(%m)
  winbook	=	winbook(XP5)
  pc98		=	nec(pc98)
 $applealu	=	macintosh(%m)
 $macbooks      =       macintosh(%m)
 $macs		=	macintosh(macintosh)
  hhk		=	hhk(basic)
  kinesis	=	kinesis(model100)
 $nokiamodels	=	nokia(%m)
  sun_type6_jp          =   sun(type6jp)
  sun_type6_usb         =   sun(type6)
  sun_type6_euro_usb    =   sun(type6tuv)
  sun_type6_jp_usb      =   sun(type6jp)
  sun_type6_unix_usb    =   sun(type6unix)
  sun_type7_jp_usb      =   sun(type6jp)
  sun_type7_usb         =   sun(type7)
  sun_type7_euro_usb    =   sun(type7tuv)
  sun_type7_unix_usb    =   sun(type7unix)
  *		=       pc(pc104)

! model		layout		variant		=	symbols
  *		ben		basic		=	pc+in(ben)
  *		ben		probhat		=	pc+in(ben_probhat)
  *		dev		basic		=	pc+in(deva)
  *		dvorak		$dvoraklayouts		=	pc+%v(dvorak)
  *		dvorak		basic		=	pc+us(dvorak)
  *		dvorak		pl_basic		=	pc+pl(dvorak)
  *		dvorak		pl		=	pc+pl(dvorak_quotes)
  *		dvorak		pl_altquotes		=	pc+pl(dvorak_altquotes)
  *		dzdwi		basic		=	pc+bt(basic)
  *		fi		basic		=	pc+fi(classic)
  *		ge		azerty_tskapo		=	pc+fr(geo)
  *		guj		basic		=	pc+in(guj)
  *		gur		basic		=	pc+in(guru)
  *		ie		laptop		=	pc+ie(basic)
  *		ie		CloGaelachLaptop		=	pc+ie(CloGaelach)
  *		in		urd		=	pc+in(urd-phonetic)
  *		iu		basic		=	pc+ca(ike)
  *		lo		basic		=	pc+la(basic)
  *		kan		basic		=	pc+in(kan)
  *		mal		basic		=	pc+in(mal)
  *		mal		mlplusnum		=	pc+in(mal)
  *		ogham		basic		=	pc+ie(ogam)
  *		ogham		laptop		=	pc+ie(ogam)
  *		ogham		is434		=	pc+ie(ogam_is434)
  *		ogham		is434laptop		=	pc+ie(ogam_is434)
  *		ori		basic		=	pc+in(ori)
  *		ro		de		=	pc+ro(winkeys)
  *		ro		us		=	pc+ro(std)
  *		ro		academic		=	pc+ro(std)
  *		ro		std_comma		=	pc+ro(std)
  *		ro		comma		=	pc+ro(basic)
  *		ru		os		=	pc+ru(os_legacy)
  *		pk		urd		=	pc+pk(urd-phonetic)
  *		sapmi		basic		=	pc+no(smi)
  *		sapmi		nodeadkeys		=	pc+no(smi_nodeadkeys)
  *		sapmi		sefi		=	pc+fi(smi)
  *		sin		phonetic-static		=	pc+in(sin_phonetic)
  *		syr		basic		=	pc+sy(syc)
  *		syr		phonetic		=	pc+sy(syc_phonetic)
  *		tam		INSCRIPT		=	pc+in(tam)
  *		tam		UNI		=	pc+in(tam_unicode)
  *		tam		NUMERAL-KEYBOARD		=	pc+in(tam_keyboard_with_numerals)
  *		tam		TAB		=	pc+in(tam_TAB)
  *		tam		TSCII		=	pc+in(tam_TSCII)
  *		tel		basic		=	pc+in(tel)
  *		yu		basic		=	pc+srp(latin)
  *		yu		unicode		=	pc+srp(latinunicode)
  *		yu		yz		=	pc+srp(latinyz)
  *		yu		unicodeyz		=	pc+srp(latinunicodeyz)
  classmate	us		intl		=	pc+us(classmate-intl)
  classmate	us		alt-intl	=	pc+us(classmate-alt-intl)
  classmate	us		altgr-intl	=	pc+us(classmate-altgr-intl)
  nokiarx51	cz		qwerty		=	nokia_vndr/rx-51(cz_qwerty)
  *			$sun_custom	$sun_var	=	pc+sun_vndr/%l%(v)

! model		layout				=	symbols
  *		ar			=	pc+ara
  *		ben			=	pc+in(ben)
  *		bs			=	pc+ba
  *		cs			=	pc+rs
  *		cz_qwerty			=	pc+cz(qwerty)
  *		dev			=	pc+in(deva)
  *		dvorak			=	pc+us(dvorak)
  *		dzdwi			=	pc+bt
  *		el			=	pc+gr
  *		en_US			=	pc+latin
  *		guj			=	pc+in(guj)
  *		gur			=	pc+in(guru)
  *		iu			=	pc+ca(ike)
  *		lo			=	pc+la
  *		kan			=	pc+in(kan)
  *		mi			=	pc+mao
  *		ogham			=	pc+ie(ogam)
  *		ori			=	pc+ie(ori)
  *		sapmi			=	pc+no(smi)
  *		sr			=	pc+srp
  *		syr			=	pc+sy(syc)
  *		tel			=	pc+in(tel)
  *		tml			=	pc+in(tam)
  *		yu			=	pc+srp
  *		fr-latin9			=	pc+fr(latin9)
  *		us_intl			=	pc+us(alt-intl)
  *		ben(basic)			=	pc+in(ben)
  *		ben(probhat)			=	pc+in(ben_probhat)
  *		dev(basic)			=	pc+in(deva)
  *		dvorak($dvoraklayouts)			=	pc+%v(dvorak)
  *		dvorak(basic)			=	pc+us(dvorak)
  *		dvorak(pl_basic)			=	pc+pl(dvorak)
  *		dvorak(pl)			=	pc+pl(dvorak_quotes)
  *		dvorak(pl_altquotes)			=	pc+pl(dvorak_altquotes)
  *		dzdwi(basic)			=	pc+bt(basic)
  *		fi(basic)			=	pc+fi(classic)
  *		ge(azerty_tskapo)			=	pc+fr(geo)
  *		guj(basic)			=	pc+in(guj)
  *		gur(basic)			=	pc+in(guru)
  *		ie(laptop)			=	pc+ie(basic)
  *		ie(CloGaelachLaptop)			=	pc+ie(CloGaelach)
  *		in(urd)			=	pc+in(urd-phonetic)
  *		iu(basic)			=	pc+ca(ike)
  *		lo(basic)			=	pc+la(basic)
  *		kan(basic)			=	pc+in(kan)
  *		mal(basic)			=	pc+in(mal)
  *		mal(mlplusnum)			=	pc+in(mal)
  *		ogham(basic)			=	pc+ie(ogam)
  *		ogham(laptop)			=	pc+ie(ogam)
  *		ogham(is434)			=	pc+ie(ogam_is434)
  *		ogham(is434laptop)			=	pc+ie(ogam_is434)
  *		ori(basic)			=	pc+in(ori)
  *		ro(de)			=	pc+ro(winkeys)
  *		ro(us)			=	pc+ro(std)
  *		ro(academic)			=	pc+ro(std)
  *		ro(std_comma)			=	pc+ro(std)
  *		ro(comma)			=	pc+ro(basic)
  *		ru(os)			=	pc+ru(os_legacy)
  *		pk(urd)			=	pc+pk(urd-phonetic)
  *		sapmi(basic)			=	pc+no(smi)
  *		sapmi(nodeadkeys)			=	pc+no(smi_nodeadkeys)
  *		sapmi(sefi)			=	pc+fi(smi)
  *		sin(phonetic-static)			=	pc+in(sin_phonetic)
  *		syr(basic)			=	pc+sy(syc)
  *		syr(phonetic)			=	pc+sy(syc_phonetic)
  *		tam(INSCRIPT)			=	pc+in(tam)
  *		tam(UNI)			=	pc+in(tam_unicode)
  *		tam(NUMERAL-KEYBOARD)			=	pc+in(tam_keyboard_with_numerals)
  *		tam(TAB)			=	pc+in(tam_TAB)
  *		tam(TSCII)			=	pc+in(tam_TSCII)
  *		tel(basic)			=	pc+in(tel)
  *		yu(basic)			=	pc+srp(latin)
  *		yu(unicode)			=	pc+srp(latinunicode)
  *		yu(yz)			=	pc+srp(latinyz)
  *		yu(unicodeyz)			=	pc+srp(latinunicodeyz)
  ataritt	$nonlatin		=	xfree68_vndr/ataritt(us)+%l%(v):2
  ataritt	*			=	xfree68_vndr/ataritt(us)+%l%(v)
  amiga		$nonlatin		=	xfree68_vndr/amiga(usa1)+%l%(v):2
  amiga		*			=	xfree68_vndr/amiga(usa1)+%l%(v)
  classmate	us			=	pc+%l(classmate)
  empty         *                       =       empty(basic)
  *             empty                   =       empty(basic)
  jollasbj 	$nonlatin		=	jolla_vndr/sbj(common)+us+%l%(v):2
  jollasbj	*			=	jolla_vndr/sbj(common)+%l%(v)
 $sun		$sun_custom		=	pc+sun_vndr/%l%(v)
  pc98		nec_vndr/jp		=	nec_vndr/jp(pc98)
  macintosh_old	us			=	macintosh_vndr/us(oldmac)
  macintosh_old	en_US			=	macintosh_vndr/us(oldmac)
  macintosh_old	$macvendorlayouts	=	macintosh_vndr/us(oldmac)+macintosh_vndr/%l%(v)
  macintosh_old	$nonlatin		=	macintosh_vndr/us(oldmac)+%l%(v):2
  macintosh_old	*			=	macintosh_vndr/us(oldmac)+%l%(v)
  applealu_jis	jp			=	macintosh_vndr/apple(alukbd)+macintosh_vndr/jp(usmac)+macintosh_vndr/jp(mac):2
  applealu_jis	*			=	macintosh_vndr/apple(alukbd)+%l%(v)+macintosh_vndr/jp(mac):2
 $applealu	$macvendorlayouts	=	macintosh_vndr/apple(alukbd)+macintosh_vndr/%l%(v)
 $applealu	*			=	macintosh_vndr/apple(alukbd)+%l%(v)
 $macs		en_US			=	pc+macintosh_vndr/us(extended)
 $macs		$macvendorlayouts	=	pc+macintosh_vndr/%l%(v)
  nokiarx44	*			=	nokia_vndr/rx-44(%l)
  nokiarx51	cz(qwerty)		=	nokia_vndr/rx-51(common)+nokia_vndr/rx-51(cz_qwerty)
  nokiarx51	*			=	nokia_vndr/rx-51(common)+nokia_vndr/rx-51(%l%_v)
  nokiasu8w	*			=	nokia_vndr/su-8w(%l)
  olpc		$olpclayouts		=	olpc+%l%(m)
  olpc		*			=	olpc+%l%(v)
  olpcm		$olpclayouts		=	olpc+%l%(m)
  olpcm		*			=	olpc+%l%(v)
 $thinkpads   	br			=	pc+br(thinkpad)
  sl-c3x00	*			=	pc+sharp_vndr/sl-c3x00(basic)
  ws003sh	*			=	pc+sharp_vndr/ws003sh(basic)
  ws007sh	*			=	pc+sharp_vndr/ws007sh(basic)
  ws011sh	*			=	pc+sharp_vndr/ws011sh(basic)
  ws020sh	*			=	pc+sharp_vndr/ws020sh(basic)
  *	   	$nonlatin		=	pc+us+%l%(v):2
  *		*			=	pc+%l%(v)

! model		layout[1]	=	symbols
  *		ar		=	pc+ara%(v[1])
  *		ben		=	pc+in(ben)
  *		bs		=	pc+ba%(v[1])
  *		cs		=	pc+rs%(v[1])
  *		cz_qwerty		=	pc+cz(qwerty)
  *		dev		=	pc+in(deva)
  *		dvorak		=	pc+us(dvorak)
  *		dzdwi		=	pc+bt%(v[1])
  *		el		=	pc+gr%(v[1])
  *		en_US		=	pc+latin%(v[1])
  *		guj		=	pc+in(guj)
  *		gur		=	pc+in(guru)
  *		iu		=	pc+ca(ike)
  *		lo		=	pc+la%(v[1])
  *		kan		=	pc+in(kan)
  *		mi		=	pc+mao%(v[1])
  *		ogham		=	pc+ie(ogam)
  *		ori		=	pc+ie(ori)
  *		sapmi		=	pc+no(smi)
  *		sr		=	pc+srp%(v[1])
  *		syr		=	pc+sy(syc)
  *		tel		=	pc+in(tel)
  *		tml		=	pc+in(tam)
  *		yu		=	pc+srp%(v[1])
  *		fr-latin9		=	pc+fr(latin9)
  *		us_intl		=	pc+us(alt-intl)
  *		ben(basic)		=	pc+in(ben)
  *		ben(probhat)		=	pc+in(ben_probhat)
  *		dev(basic)		=	pc+in(deva)
  *		dvorak($dvoraklayouts)		=	pc+%v(dvorak)
  *		dvorak(basic)		=	pc+us(dvorak)
  *		dvorak(pl_basic)		=	pc+pl(dvorak)
  *		dvorak(pl)		=	pc+pl(dvorak_quotes)
  *		dvorak(pl_altquotes)		=	pc+pl(dvorak_altquotes)
  *		dzdwi(basic)		=	pc+bt(basic)
  *		fi(basic)		=	pc+fi(classic)
  *		ge(azerty_tskapo)		=	pc+fr(geo)
  *		guj(basic)		=	pc+in(guj)
  *		gur(basic)		=	pc+in(guru)
  *		ie(laptop)		=	pc+ie(basic)
  *		ie(CloGaelachLaptop)		=	pc+ie(CloGaelach)
  *		in(urd)		=	pc+in(urd-phonetic)
  *		iu(basic)		=	pc+ca(ike)
  *		lo(basic)		=	pc+la(basic)
  *		kan(basic)		=	pc+in(kan)
  *		mal(basic)		=	pc+in(mal)
  *		mal(mlplusnum)		=	pc+in(mal)
  *		ogham(basic)		=	pc+ie(ogam)
  *		ogham(laptop)		=	pc+ie(ogam)
  *		ogham(is434)		=	pc+ie(ogam_is434)
  *		ogham(is434laptop)		=	pc+ie(ogam_is434)
  *		ori(basic)		=	pc+in(ori)
  *		ro(de)		=	pc+ro(winkeys)
  *		ro(us)		=	pc+ro(std)
  *		ro(academic)		=	pc+ro(std)
  *		ro(std_comma)		=	pc+ro(std)
  *		ro(comma)		=	pc+ro(basic)
  *		ru(os)		=	pc+ru(os_legacy)
  *		pk(urd)		=	pc+pk(urd-phonetic)
  *		sapmi(basic)		=	pc+no(smi)
  *		sapmi(nodeadkeys)		=	pc+no(smi_nodeadkeys)
  *		sapmi(sefi)		=	pc+fi(smi)
  *		sin(phonetic-static)		=	pc+in(sin_phonetic)
  *		syr(basic)		=	pc+sy(syc)
  *		syr(phonetic)		=	pc+sy(syc_phonetic)
  *		tam(INSCRIPT)		=	pc+in(tam)
  *		tam(UNI)		=	pc+in(tam_unicode)
  *		tam(NUMERAL-KEYBOARD)		=	pc+in(tam_keyboard_with_numerals)
  *		tam(TAB)		=	pc+in(tam_TAB)
  *		tam(TSCII)		=	pc+in(tam_TSCII)
  *		tel(basic)		=	pc+in(tel)
  *		yu(basic)		=	pc+srp(latin)
  *		yu(unicode)		=	pc+srp(latinunicode)
  *		yu(yz)		=	pc+srp(latinyz)
  *		yu(unicodeyz)		=	pc+srp(latinunicodeyz)
  ataritt	*			=	xfree68_vndr/ataritt(us)+%l[1]%(v[1])
  amiga		*			=	xfree68_vndr/amiga(usa1)+%l[1]%(v[1])
  jollasbj	*			=	jolla_vndr/sbj(common)+%l[1]%(v[1])
 $sun		$sun_custom	=	pc+sun_vndr/%l[1]%(v[1])
  macintosh_old	us			=	macintosh_vndr/us(oldmac)
  macintosh_old	$macvendorlayouts	=	macintosh_vndr/us(oldmac)+macintosh_vndr/%l[1]%(v[1])
  macintosh_old	*			=	macintosh_vndr/us(oldmac)+%l[1]%(v[1])
  applealu_jis	us			=	macintosh_vndr/apple(alukbd)+macintosh_vndr/jp(usmac)
 $applealu	$macvendorlayouts	=	macintosh_vndr/apple(alukbd)+macintosh_vndr/%l[1]%(v[1])
 $applealu	*			=	macintosh_vndr/apple(alukbd)+%l[1]%(v[1])
 $macs		$macvendorlayouts	=	pc+macintosh_vndr/%l[1]%(v[1])
  nokiarx51	cz(qwerty)		=	nokia_vndr/rx-51(common)+nokia_vndr/rx-51(cz_qwerty)
  nokiarx51	*			=	nokia_vndr/rx-51(common)+nokia_vndr/rx-51(%l[1]%_v[1])
 $thinkpads	br			=	pc+%l[1](thinkpad)
  *		*			=	pc+%l[1]%(v[1])

! model		layout[1]	variant[1]	=	symbols
  *		ben		basic	=	pc+in(ben)
  *		ben		probhat	=	pc+in(ben_probhat)
  *		dev		basic	=	pc+in(deva)
  *		dvorak		$dvoraklayouts	=	pc+%v(dvorak)
  *		dvorak		basic	=	pc+us(dvorak)
  *		dvorak		pl_basic	=	pc+pl(dvorak)
  *		dvorak		pl	=	pc+pl(dvorak_quotes)
  *		dvorak		pl_altquotes	=	pc+pl(dvorak_altquotes)
  *		dzdwi		basic	=	pc+bt(basic)
  *		fi		basic	=	pc+fi(classic)
  *		ge		azerty_tskapo	=	pc+fr(geo)
  *		guj		basic	=	pc+in(guj)
  *		gur		basic	=	pc+in(guru)
  *		ie		laptop	=	pc+ie(basic)
  *		ie		CloGaelachLaptop	=	pc+ie(CloGaelach)
  *		in		urd	=	pc+in(urd-phonetic)
  *		iu		basic	=	pc+ca(ike)
  *		lo		basic	=	pc+la(basic)
  *		kan		basic	=	pc+in(kan)
  *		mal		basic	=	pc+in(mal)
  *		mal		mlplusnum	=	pc+in(mal)
  *		ogham		basic	=	pc+ie(ogam)
  *		ogham		laptop	=	pc+ie(ogam)
  *		ogham		is434	=	pc+ie(ogam_is434)
  *		ogham		is434laptop	=	pc+ie(ogam_is434)
  *		ori		basic	=	pc+in(ori)
  *		ro		de	=	pc+ro(winkeys)
  *		ro		us	=	pc+ro(std)
  *		ro		academic	=	pc+ro(std)
  *		ro		std_comma	=	pc+ro(std)
  *		ro		comma	=	pc+ro(basic)
  *		ru		os	=	pc+ru(os_legacy)
  *		pk		urd	=	pc+pk(urd-phonetic)
  *		sapmi		basic	=	pc+no(smi)
  *		sapmi		nodeadkeys	=	pc+no(smi_nodeadkeys)
  *		sapmi		sefi	=	pc+fi(smi)
  *		sin		phonetic-static	=	pc+in(sin_phonetic)
  *		syr		basic	=	pc+sy(syc)
  *		syr		phonetic	=	pc+sy(syc_phonetic)
  *		tam		INSCRIPT	=	pc+in(tam)
  *		tam		UNI	=	pc+in(tam_unicode)
  *		tam		NUMERAL-KEYBOARD	=	pc+in(tam_keyboard_with_numerals)
  *		tam		TAB	=	pc+in(tam_TAB)
  *		tam		TSCII	=	pc+in(tam_TSCII)
  *		tel		basic	=	pc+in(tel)
  *		yu		basic	=	pc+srp(latin)
  *		yu		unicode	=	pc+srp(latinunicode)
  *		yu		yz	=	pc+srp(latinyz)
  *		yu		unicodeyz	=	pc+srp(latinunicodeyz)

! model		layout[2]	=	symbols
  *		ar		=	+ara%(v[2]):2
  *		ben		=	+in(ben):2
  *		bs		=	+ba%(v[2]):2
  *		cs		=	+rs%(v[2]):2
  *		cz_qwerty		=	+cz(qwerty):2
  *		dev		=	+in(deva):2
  *		dvorak		=	+us(dvorak):2
  *		dzdwi		=	+bt%(v[2]):2
  *		el		=	+gr%(v[2]):2
  *		en_US		=	+latin%(v[2]):2
  *		guj		=	+in(guj):2
  *		gur		=	+in(guru):2
  *		iu		=	+ca(ike):2
  *		lo		=	+la%(v[2]):2
  *		kan		=	+in(kan):2
  *		mi		=	+mao%(v[2]):2
  *		ogham		=	+ie(ogam):2
  *		ori		=	+ie(ori):2
  *		sapmi		=	+no(smi):2
  *		sr		=	+srp%(v[2]):2
  *		syr		=	+sy(syc):2
  *		tel		=	+in(tel):2
  *		tml		=	+in(tam):2
  *		yu		=	+srp%(v[2]):2
  *		fr-latin9		=	+fr(latin9):2
  *		us_intl		=	+us(alt-intl):2
  *		ben(basic)		=	+in(ben):2
  *		ben(probhat)		=	+in(ben_probhat):2
  *		dev(basic)		=	+in(deva):2
  *		dvorak($dvoraklayouts)		=	+%v(dvorak):2
  *		dvorak(basic)		=	+us(dvorak):2
  *		dvorak(pl_basic)		=	+pl(dvorak):2
  *		dvorak(pl)		=	+pl(dvorak_quotes):2
  *		dvorak(pl_altquotes)		=	+pl(dvorak_altquotes):2
  *		dzdwi(basic)		=	+bt(basic):2
  *		fi(basic)		=	+fi(classic):2
  *		ge(azerty_tskapo)		=	+fr(geo):2
  *		guj(basic)		=	+in(guj):2
  *		gur(basic)		=	+in(guru):2
  *		ie(laptop)		=	+ie(basic):2
  *		ie(CloGaelachLaptop)		=	+ie(CloGaelach):2
  *		in(urd)		=	+in(urd-phonetic):2
  *		iu(basic)		=	+ca(ike):2
  *		lo(basic)		=	+la(basic):2
  *		kan(basic)		=	+in(kan):2
  *		mal(basic)		=	+in(mal):2
  *		mal(mlplusnum)		=	+in(mal):2
  *		ogham(basic)		=	+ie(ogam):2
  *		ogham(laptop)		=	+ie(ogam):2
  *		ogham(is434)		=	+ie(ogam_is434):2
  *		ogham(is434laptop)		=	+ie(ogam_is434):2
  *		ori(basic)		=	+in(ori):2
  *		ro(de)		=	+ro(winkeys):2
  *		ro(us)		=	+ro(std):2
  *		ro(academic)		=	+ro(std):2
  *		ro(std_comma)		=	+ro(std):2
  *		ro(comma)		=	+ro(basic):2
  *		ru(os)		=	+ru(os_legacy):2
  *		pk(urd)		=	+pk(urd-phonetic):2
  *		sapmi(basic)		=	+no(smi):2
  *		sapmi(nodeadkeys)		=	+no(smi_nodeadkeys):2
  *		sapmi(sefi)		=	+fi(smi):2
  *		sin(phonetic-static)		=	+in(sin_phonetic):2
  *		syr(basic)		=	+sy(syc):2
  *		syr(phonetic)		=	+sy(syc_phonetic):2
  *		tam(INSCRIPT)		=	+in(tam):2
  *		tam(UNI)		=	+in(tam_unicode):2
  *		tam(NUMERAL-KEYBOARD)		=	+in(tam_keyboard_with_numerals):2
  *		tam(TAB)		=	+in(tam_TAB):2
  *		tam(TSCII)		=	+in(tam_TSCII):2
  *		tel(basic)		=	+in(tel):2
  *		yu(basic)		=	+srp(latin):2
  *		yu(unicode)		=	+srp(latinunicode):2
  *		yu(yz)		=	+srp(latinyz):2
  *		yu(unicodeyz)		=	+srp(latinunicodeyz):2
  nokiarx51	cz(qwerty)	=	+nokia_vndr/rx-51(cz_qwerty):2
  nokiarx51	*		=	+nokia_vndr/rx-51(%l[2]%_v[2]):2
 $sun	$sun_custom	=	+sun_vndr/%l[2]%(v[2]):2
  *		*		=	+%l[2]%(v[2]):2

! model		layout[3]	=	symbols
  *		ar		=	+ara%(v[3]):3
  *		ben		=	+in(ben):3
  *		bs		=	+ba%(v[3]):3
  *		cs		=	+rs%(v[3]):3
  *		cz_qwerty		=	+cz(qwerty):3
  *		dev		=	+in(deva):3
  *		dvorak		=	+us(dvorak):3
  *		dzdwi		=	+bt%(v[3]):3
  *		el		=	+gr%(v[3]):3
  *		en_US		=	+latin%(v[3]):3
  *		guj		=	+in(guj):3
  *		gur		=	+in(guru):3
  *		iu		=	+ca(ike):3
  *		lo		=	+la%(v[3]):3
  *		kan		=	+in(kan):3
  *		mi		=	+mao%(v[3]):3
  *		ogham		=	+ie(ogam):3
  *		ori		=	+ie(ori):3
  *		sapmi		=	+no(smi):3
  *		sr		=	+srp%(v[3]):3
  *		syr		=	+sy(syc):3
  *		tel		=	+in(tel):3
  *		tml		=	+in(tam):3
  *		yu		=	+srp%(v[3]):3
  *		fr-latin9		=	+fr(latin9):3
  *		us_intl		=	+us(alt-intl):3
  *		ben(basic)		=	+in(ben):3
  *		ben(probhat)		=	+in(ben_probhat):3
  *		dev(basic)		=	+in(deva):3
  *		dvorak($dvoraklayouts)		=	+%v(dvorak):3
  *		dvorak(basic)		=	+us(dvorak):3
  *		dvorak(pl_basic)		=	+pl(dvorak):3
  *		dvorak(pl)		=	+pl(dvorak_quotes):3
  *		dvorak(pl_altquotes)		=	+pl(dvorak_altquotes):3
  *		dzdwi(basic)		=	+bt(basic):3
  *		fi(basic)		=	+fi(classic):3
  *		ge(azerty_tskapo)		=	+fr(geo):3
  *		guj(basic)		=	+in(guj):3
  *		gur(basic)		=	+in(guru):3
  *		ie(laptop)		=	+ie(basic):3
  *		ie(CloGaelachLaptop)		=	+ie(CloGaelach):3
  *		in(urd)		=	+in(urd-phonetic):3
  *		iu(basic)		=	+ca(ike):3
  *		lo(basic)		=	+la(basic):3
  *		kan(basic)		=	+in(kan):3
  *		mal(basic)		=	+in(mal):3
  *		mal(mlplusnum)		=	+in(mal):3
  *		ogham(basic)		=	+ie(ogam):3
  *		ogham(laptop)		=	+ie(ogam):3
  *		ogham(is434)		=	+ie(ogam_is434):3
  *		ogham(is434laptop)		=	+ie(ogam_is434):3
  *		ori(basic)		=	+in(ori):3
  *		ro(de)		=	+ro(winkeys):3
  *		ro(us)		=	+ro(std):3
  *		ro(academic)		=	+ro(std):3
  *		ro(std_comma)		=	+ro(std):3
  *		ro(comma)		=	+ro(basic):3
  *		ru(os)		=	+ru(os_legacy):3
  *		pk(urd)		=	+pk(urd-phonetic):3
  *		sapmi(basic)		=	+no(smi):3
  *		sapmi(nodeadkeys)		=	+no(smi_nodeadkeys):3
  *		sapmi(sefi)		=	+fi(smi):3
  *		sin(phonetic-static)		=	+in(sin_phonetic):3
  *		syr(basic)		=	+sy(syc):3
  *		syr(phonetic)		=	+sy(syc_phonetic):3
  *		tam(INSCRIPT)		=	+in(tam):3
  *		tam(UNI)		=	+in(tam_unicode):3
  *		tam(NUMERAL-KEYBOARD)		=	+in(tam_keyboard_with_numerals):3
  *		tam(TAB)		=	+in(tam_TAB):3
  *		tam(TSCII)		=	+in(tam_TSCII):3
  *		tel(basic)		=	+in(tel):3
  *		yu(basic)		=	+srp(latin):3
  *		yu(unicode)		=	+srp(latinunicode):3
  *		yu(yz)		=	+srp(latinyz):3
  *		yu(unicodeyz)		=	+srp(latinunicodeyz):3
  nokiarx51	cz(qwerty)	=	+nokia_vndr/rx-51(cz_qwerty):3
  nokiarx51	*		=	+nokia_vndr/rx-51(%l[3]%_v[3]):3
 $sun	$sun_custom	=	+sun_vndr/%l[3]%(v[3]):3
  *		*		=	+%l[3]%(v[3]):3

! model		layout[4]	=	symbols
  *		ar		=	+ara%(v[4]):4
  *		ben		=	+in(ben):4
  *		bs		=	+ba%(v[4]):4
  *		cs		=	+rs%(v[4]):4
  *		cz_qwerty		=	+cz(qwerty):4
  *		dev		=	+in(deva):4
  *		dvorak		=	+us(dvorak):4
  *		dzdwi		=	+bt%(v[4]):4
  *		el		=	+gr%(v[4]):4
  *		en_US		=	+latin%(v[4]):4
  *		guj		=	+in(guj):4
  *		gur		=	+in(guru):4
  *		iu		=	+ca(ike):4
  *		lo		=	+la%(v[4]):4
  *		kan		=	+in(kan):4
  *		mi		=	+mao%(v[4]):4
  *		ogham		=	+ie(ogam):4
  *		ori		=	+ie(ori):4
  *		sapmi		=	+no(smi):4
  *		sr		=	+srp%(v[4]):4
  *		syr		=	+sy(syc):4
  *		tel		=	+in(tel):4
  *		tml		=	+in(tam):4
  *		yu		=	+srp%(v[4]):4
  *		fr-latin9		=	+fr(latin9):4
  *		us_intl		=	+us(alt-intl):4
  *		ben(basic)		=	+in(ben):4
  *		ben(probhat)		=	+in(ben_probhat):4
  *		dev(basic)		=	+in(deva):4
  *		dvorak($dvoraklayouts)		=	+%v(dvorak):4
  *		dvorak(basic)		=	+us(dvorak):4
  *		dvorak(pl_basic)		=	+pl(dvorak):4
  *		dvorak(pl)		=	+pl(dvorak_quotes):4
  *		dvorak(pl_altquotes)		=	+pl(dvorak_altquotes):4
  *		dzdwi(basic)		=	+bt(basic):4
  *		fi(basic)		=	+fi(classic):4
  *		ge(azerty_tskapo)		=	+fr(geo):4
  *		guj(basic)		=	+in(guj):4
  *		gur(basic)		=	+in(guru):4
  *		ie(laptop)		=	+ie(basic):4
  *		ie(CloGaelachLaptop)		=	+ie(CloGaelach):4
  *		in(urd)		=	+in(urd-phonetic):4
  *		iu(basic)		=	+ca(ike):4
  *		lo(basic)		=	+la(basic):4
  *		kan(basic)		=	+in(kan):4
  *		mal(basic)		=	+in(mal):4
  *		mal(mlplusnum)		=	+in(mal):4
  *		ogham(basic)		=	+ie(ogam):4
  *		ogham(laptop)		=	+ie(ogam):4
  *		ogham(is434)		=	+ie(ogam_is434):4
  *		ogham(is434laptop)		=	+ie(ogam_is434):4
  *		ori(basic)		=	+in(ori):4
  *		ro(de)		=	+ro(winkeys):4
  *		ro(us)		=	+ro(std):4
  *		ro(academic)		=	+ro(std):4
  *		ro(std_comma)		=	+ro(std):4
  *		ro(comma)		=	+ro(basic):4
  *		ru(os)		=	+ru(os_legacy):4
  *		pk(urd)		=	+pk(urd-phonetic):4
  *		sapmi(basic)		=	+no(smi):4
  *		sapmi(nodeadkeys)		=	+no(smi_nodeadkeys):4
  *		sapmi(sefi)		=	+fi(smi):4
  *		sin(phonetic-static)		=	+in(sin_phonetic):4
  *		syr(basic)		=	+sy(syc):4
  *		syr(phonetic)		=	+sy(syc_phonetic):4
  *		tam(INSCRIPT)		=	+in(tam):4
  *		tam(UNI)		=	+in(tam_unicode):4
  *		tam(NUMERAL-KEYBOARD)		=	+in(tam_keyboard_with_numerals):4
  *		tam(TAB)		=	+in(tam_TAB):4
  *		tam(TSCII)		=	+in(tam_TSCII):4
  *		tel(basic)		=	+in(tel):4
  *		yu(basic)		=	+srp(latin):4
  *		yu(unicode)		=	+srp(latinunicode):4
  *		yu(yz)		=	+srp(latinyz):4
  *		yu(unicodeyz)		=	+srp(latinunicodeyz):4
  nokiarx51	cz(qwerty)	=	+nokia_vndr/rx-51(cz_qwerty):4
  nokiarx51	*		=	+nokia_vndr/rx-51(%l[4]%_v[4]):4
 $sun	$sun_custom	=	+sun_vndr/%l[4]%(v[4]):4
  *		*		=	+%l[4]%(v[4]):4

! model		layout[2]	variant[2]	=	symbols
  *		ben		basic	=	+in(ben):2
  *		ben		probhat	=	+in(ben_probhat):2
  *		dev		basic	=	+in(deva):2
  *		dvorak		$dvoraklayouts	=	+%v(dvorak):2
  *		dvorak		basic	=	+us(dvorak):2
  *		dvorak		pl_basic	=	+pl(dvorak):2
  *		dvorak		pl	=	+pl(dvorak_quotes):2
  *		dvorak		pl_altquotes	=	+pl(dvorak_altquotes):2
  *		dzdwi		basic	=	+bt(basic):2
  *		fi		basic	=	+fi(classic):2
  *		ge		azerty_tskapo	=	+fr(geo):2
  *		guj		basic	=	+in(guj):2
  *		gur		basic	=	+in(guru):2
  *		ie		laptop	=	+ie(basic):2
  *		ie		CloGaelachLaptop	=	+ie(CloGaelach):2
  *		in		urd	=	+in(urd-phonetic):2
  *		iu		basic	=	+ca(ike):2
  *		lo		basic	=	+la(basic):2
  *		kan		basic	=	+in(kan):2
  *		mal		basic	=	+in(mal):2
  *		mal		mlplusnum	=	+in(mal):2
  *		ogham		basic	=	+ie(ogam):2
  *		ogham		laptop	=	+ie(ogam):2
  *		ogham		is434	=	+ie(ogam_is434):2
  *		ogham		is434laptop	=	+ie(ogam_is434):2
  *		ori		basic	=	+in(ori):2
  *		ro		de	=	+ro(winkeys):2
  *		ro		us	=	+ro(std):2
  *		ro		academic	=	+ro(std):2
  *		ro		std_comma	=	+ro(std):2
  *		ro		comma	=	+ro(basic):2
  *		ru		os	=	+ru(os_legacy):2
  *		pk		urd	=	+pk(urd-phonetic):2
  *		sapmi		basic	=	+no(smi):2
  *		sapmi		nodeadkeys	=	+no(smi_nodeadkeys):2
  *		sapmi		sefi	=	+fi(smi):2
  *		sin		phonetic-static	=	+in(sin_phonetic):2
  *		syr		basic	=	+sy(syc):2
  *		syr		phonetic	=	+sy(syc_phonetic):2
  *		tam		INSCRIPT	=	+in(tam):2
  *		tam		UNI	=	+in(tam_unicode):2
  *		tam		NUMERAL-KEYBOARD	=	+in(tam_keyboard_with_numerals):2
  *		tam		TAB	=	+in(tam_TAB):2
  *		tam		TSCII	=	+in(tam_TSCII):2
  *		tel		basic	=	+in(tel):2
  *		yu		basic	=	+srp(latin):2
  *		yu		unicode	=	+srp(latinunicode):2
  *		yu		yz	=	+srp(latinyz):2
  *		yu		unicodeyz	=	+srp(latinunicodeyz):2

! model		layout[3]	variant[3]	=	symbols
  *		ben		basic	=	+in(ben):3
  *		ben		probhat	=	+in(ben_probhat):3
  *		dev		basic	=	+in(deva):3
  *		dvorak		$dvoraklayouts	=	+%v(dvorak):3
  *		dvorak		basic	=	+us(dvorak):3
  *		dvorak		pl_basic	=	+pl(dvorak):3
  *		dvorak		pl	=	+pl(dvorak_quotes):3
  *		dvorak		pl_altquotes	=	+pl(dvorak_altquotes):3
  *		dzdwi		basic	=	+bt(basic):3
  *		fi		basic	=	+fi(classic):3
  *		ge		azerty_tskapo	=	+fr(geo):3
  *		guj		basic	=	+in(guj):3
  *		gur		basic	=	+in(guru):3
  *		ie		laptop	=	+ie(basic):3
  *		ie		CloGaelachLaptop	=	+ie(CloGaelach):3
  *		in		urd	=	+in(urd-phonetic):3
  *		iu		basic	=	+ca(ike):3
  *		lo		basic	=	+la(basic):3
  *		kan		basic	=	+in(kan):3
  *		mal		basic	=	+in(mal):3
  *		mal		mlplusnum	=	+in(mal):3
  *		ogham		basic	=	+ie(ogam):3
  *		ogham		laptop	=	+ie(ogam):3
  *		ogham		is434	=	+ie(ogam_is434):3
  *		ogham		is434laptop	=	+ie(ogam_is434):3
  *		ori		basic	=	+in(ori):3
  *		ro		de	=	+ro(winkeys):3
  *		ro		us	=	+ro(std):3
  *		ro		academic	=	+ro(std):3
  *		ro		std_comma	=	+ro(std):3
  *		ro		comma	=	+ro(basic):3
  *		ru		os	=	+ru(os_legacy):3
  *		pk		urd	=	+pk(urd-phonetic):3
  *		sapmi		basic	=	+no(smi):3
  *		sapmi		nodeadkeys	=	+no(smi_nodeadkeys):3
  *		sapmi		sefi	=	+fi(smi):3
  *		sin		phonetic-static	=	+in(sin_phonetic):3
  *		syr		basic	=	+sy(syc):3
  *		syr		phonetic	=	+sy(syc_phonetic):3
  *		tam		INSCRIPT	=	+in(tam):3
  *		tam		UNI	=	+in(tam_unicode):3
  *		tam		NUMERAL-KEYBOARD	=	+in(tam_keyboard_with_numerals):3
  *		tam		TAB	=	+in(tam_TAB):3
  *		tam		TSCII	=	+in(tam_TSCII):3
  *		tel		basic	=	+in(tel):3
  *		yu		basic	=	+srp(latin):3
  *		yu		unicode	=	+srp(latinunicode):3
  *		yu		yz	=	+srp(latinyz):3
  *		yu		unicodeyz	=	+srp(latinunicodeyz):3

! model		layout[4]	variant[4]	=	symbols
  *		ben		basic	=	+in(ben):4
  *		ben		probhat	=	+in(ben_probhat):4
  *		dev		basic	=	+in(deva):4
  *		dvorak		$dvoraklayouts	=	+%v(dvorak):4
  *		dvorak		basic	=	+us(dvorak):4
  *		dvorak		pl_basic	=	+pl(dvorak):4
  *		dvorak		pl	=	+pl(dvorak_quotes):4
  *		dvorak		pl_altquotes	=	+pl(dvorak_altquotes):4
  *		dzdwi		basic	=	+bt(basic):4
  *		fi		basic	=	+fi(classic):4
  *		ge		azerty_tskapo	=	+fr(geo):4
  *		guj		basic	=	+in(guj):4
  *		gur		basic	=	+in(guru):4
  *		ie		laptop	=	+ie(basic):4
  *		ie		CloGaelachLaptop	=	+ie(CloGaelach):4
  *		in		urd	=	+in(urd-phonetic):4
  *		iu		basic	=	+ca(ike):4
  *		lo		basic	=	+la(basic):4
  *		kan		basic	=	+in(kan):4
  *		mal		basic	=	+in(mal):4
  *		mal		mlplusnum	=	+in(mal):4
  *		ogham		basic	=	+ie(ogam):4
  *		ogham		laptop	=	+ie(ogam):4
  *		ogham		is434	=	+ie(ogam_is434):4
  *		ogham		is434laptop	=	+ie(ogam_is434):4
  *		ori		basic	=	+in(ori):4
  *		ro		de	=	+ro(winkeys):4
  *		ro		us	=	+ro(std):4
  *		ro		academic	=	+ro(std):4
  *		ro		std_comma	=	+ro(std):4
  *		ro		comma	=	+ro(basic):4
  *		ru		os	=	+ru(os_legacy):4
  *		pk		urd	=	+pk(urd-phonetic):4
  *		sapmi		basic	=	+no(smi):4
  *		sapmi		nodeadkeys	=	+no(smi_nodeadkeys):4
  *		sapmi		sefi	=	+fi(smi):4
  *		sin		phonetic-static	=	+in(sin_phonetic):4
  *		syr		basic	=	+sy(syc):4
  *		syr		phonetic	=	+sy(syc_phonetic):4
  *		tam		INSCRIPT	=	+in(tam):4
  *		tam		UNI	=	+in(tam_unicode):4
  *		tam		NUMERAL-KEYBOARD	=	+in(tam_keyboard_with_numerals):4
  *		tam		TAB	=	+in(tam_TAB):4
  *		tam		TSCII	=	+in(tam_TSCII):4
  *		tel		basic	=	+in(tel):4
  *		yu		basic	=	+srp(latin):4
  *		yu		unicode	=	+srp(latinunicode):4
  *		yu		yz	=	+srp(latinyz):4
  *		yu		unicodeyz	=	+srp(latinunicodeyz):4

! model		=	symbols
  $evdevkbds    =   +inet(evdev)+inet(%m)
  chromebook    =   +inet(evdev)+inet(chromebook)
  applealu_jis  =   +inet(evdev)+macintosh_vndr/jp(alujiskeys)
  *             =   +inet(evdev)

! model		layout		=	symbols

! layout	variant		=	compat
  de		neo			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		adnw			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		koy			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone_eszett_home			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwertz			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwerty			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  jp        $sun_compat =   complete+japan(kana_lock)
  de		neo			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		adnw			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		koy			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone_eszett_home			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwertz			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwerty			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  jp        $sun_compat =   complete+japan(kana_lock)

! layout[1]	variant[1]	=	compat
  de		neo			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		adnw			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		koy			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone_eszett_home			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwertz			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwerty			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  jp       $sun_compat =   complete+japan(kana_lock)
  de		neo			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		adnw			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		koy			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		bone_eszett_home			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwertz			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  de		neo_qwerty			=	+caps(caps_lock)+misc(assign_shift_left_action)+level5(level5_lock)
  jp       $sun_compat =   complete+japan(kana_lock)

! layout[2]	variant[2]	=	compat
  de		neo			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		adnw			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		koy			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		bone			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		bone_eszett_home			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		neo_qwertz			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		neo_qwerty			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  jp       $sun_compat  =   +complete+japan(kana_lock):2
  de		neo			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		adnw			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		koy			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		bone			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		bone_eszett_home			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		neo_qwertz			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  de		neo_qwerty			=	+caps(caps_lock):2+misc(assign_shift_left_action):2+level5(level5_lock):2
  jp       $sun_compat  =   +complete+japan(kana_lock):2

! layout[3]	variant[3]	=	compat
  de		neo			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		adnw			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		koy			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		bone			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		bone_eszett_home			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		neo_qwertz			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		neo_qwerty			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  jp       $sun_compat  =   +complete+japan(kana_lock):3
  de		neo			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		adnw			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		koy			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		bone			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		bone_eszett_home			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		neo_qwertz			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  de		neo_qwerty			=	+caps(caps_lock):3+misc(assign_shift_left_action):3+level5(level5_lock):3
  jp       $sun_compat  =   +complete+japan(kana_lock):3

! layout[4]	variant[4]	=	compat
  de		neo			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		adnw			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		koy			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		bone			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		bone_eszett_home			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		neo_qwertz			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		neo_qwerty			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  jp       $sun_compat  =   +complete+japan(kana_lock):4
  de		neo			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		adnw			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		koy			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		bone			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		bone_eszett_home			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		neo_qwertz			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  de		neo_qwerty			=	+caps(caps_lock):4+misc(assign_shift_left_action):4+level5(level5_lock):4
  jp       $sun_compat  =   +complete+japan(kana_lock):4

! model		layout		=	compat
  pc98		nec_vndr/jp	=	pc98(basic)
  *		jp		=	complete+japan
  olpc          *               =       olpc
  olpcm         *               =       olpc
  *		*		=	complete

! model		layout[1]	=	compat
  *		*		=	complete

! model		=	types
  $macs		=	complete+numpad(mac)
  $applealu	=	complete+numpad(mac)
  $nokiamodels	=	complete+nokia
  *		=	complete

! layout	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle)
  *			misc:typo 	= +typo(base)
  *			misc:apl	= +apl(level3)

! layout[1]	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle):1
  *			misc:typo 	= +typo(base):1
  *			misc:apl	= +apl(level3):1

! layout[2]	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle):2
  *			misc:typo 	= +typo(base):2
  *			misc:apl	= +apl(level3):2

! layout[3]	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle):3
  *			misc:typo 	= +typo(base):3
  *			misc:apl	= +apl(level3):3

! layout[4]	option	=	symbols
  $threelevellayouts	grp:alts_toggle = +level3(ralt_switch_for_alts_toggle):4
  *			misc:typo 	= +typo(base):4
  *			misc:apl	= +apl(level3):4

! option	=	symbols
  grp:shift_toggle	=	+group(shifts_toggle)
  grp:shift_toggle	=	+group(shifts_toggle)
  altwin:menu		=	+altwin(menu)
  altwin:menu_win	=	+altwin(menu_win)
  altwin:meta_alt	=	+altwin(meta_alt)
  altwin:alt_win	=	+altwin(alt_win)
  altwin:ctrl_win	=	+altwin(ctrl_win)
  altwin:ctrl_alt_win	=	+altwin(ctrl_alt_win)
  altwin:meta_win	=	+altwin(meta_win)
  altwin:left_meta_win	=	+altwin(left_meta_win)
  altwin:hyper_win	=	+altwin(hyper_win)
  altwin:alt_super_win	=	+altwin(alt_super_win)
  altwin:swap_lalt_lwin	=	+altwin(swap_lalt_lwin)
  altwin:swap_alt_win	=	+altwin(swap_alt_win)
  altwin:prtsc_rwin	=	+altwin(prtsc_rwin)
  grab:debug		=	+srvr_ctrl(grab_debug)
  grp:switch		=	+group(switch)
  grp:lswitch		=	+group(lswitch)
  grp:win_switch	=	+group(win_switch)
  grp:lwin_switch	=	+group(lwin_switch)
  grp:rwin_switch	=	+group(rwin_switch)
  grp:menu_switch	=	+group(menu_switch)
  grp:toggle		=	+group(toggle)
  grp:shifts_toggle	=	+group(shifts_toggle)
  grp:ctrls_toggle	=	+group(ctrls_toggle)
  grp:alts_toggle	=	+group(alts_toggle)
  grp:caps_toggle	=	+capslock(grouplock)
  grp:caps_switch       =       +capslock(groupshift)
  grp:shift_caps_toggle	=	+group(shift_caps_toggle)
  grp:shift_caps_switch	=	+group(shift_caps_switch)
  grp:win_space_toggle	=	+group(win_space_toggle)
  grp:win_menu_switch	=	+group(win_menu_switch)
  grp:alt_caps_toggle   =       +group(alt_caps_toggle)
  grp:alt_space_toggle	=	+group(alt_space_toggle)
  grp:menu_toggle	=	+group(menu_toggle)
  grp:lwin_toggle	=	+group(lwin_toggle)
  grp:rwin_toggle	=	+group(rwin_toggle)
  grp:lshift_toggle	=	+group(lshift_toggle)
  grp:rshift_toggle	=	+group(rshift_toggle)
  grp:rctrl_switch	=	+group(rctrl_switch)
  grp:lctrl_toggle	=	+group(lctrl_toggle)
  grp:rctrl_toggle	=	+group(rctrl_toggle)
  grp:lalt_toggle	=	+group(lalt_toggle)
  grp:sclk_toggle	=	+group(sclk_toggle)
  grp:lctrl_rctrl_switch	=	+group(lctrl_rctrl_switch)
  grp:lctrl_lwin_rctrl_menu	=	+group(lctrl_lwin_rctrl_menu)
  grp:lctrl_lalt_toggle	=	+group(lctrl_lalt_toggle)
  grp:rctrl_ralt_toggle	=	+group(rctrl_ralt_toggle)
  grp:ctrl_alt_toggle	=	+group(ctrl_alt_toggle)
  grp:ctrl_alt_toggle_bidir	=	+group(ctrl_alt_toggle_bidir)
  grp:lctrl_lshift_toggle	=	+group(lctrl_lshift_toggle)
  grp:rctrl_rshift_toggle	=	+group(rctrl_rshift_toggle)
  grp:ctrl_shift_toggle	=	+group(ctrl_shift_toggle)
  grp:ctrl_shift_toggle_bidir	=	+group(ctrl_shift_toggle_bidir)
  grp:lalt_lshift_toggle	=	+group(lalt_lshift_toggle)
  grp:ralt_rshift_toggle	=	+group(ralt_rshift_toggle)
  grp:alt_shift_toggle	=	+group(alt_shift_toggle)
  grp:alt_shift_toggle_bidir	=	+group(alt_shift_toggle_bidir)
  grp:lctrl_lwin_toggle	=	+group(lctrl_lwin_toggle)
  lv3:switch		=	+level3(switch)
  lv3:ralt_switch	=	+level3(ralt_switch)
  lv3:ralt_switch_multikey	=	+level3(ralt_switch_multikey)
  lv3:ralt_alt		=	+level3(ralt_alt)
  lv3:lalt_switch	=	+level3(lalt_switch)
  lv3:alt_switch	=	+level3(alt_switch)
  lv3:menu_switch	=	+level3(menu_switch)
  lv3:win_switch	=	+level3(win_switch)
  lv3:lwin_switch	=	+level3(lwin_switch)
  lv3:rwin_switch	=	+level3(rwin_switch)
  lv3:enter_switch	=	+level3(enter_switch)
  lv3:4_switch_isolated	=	+level3(4_switch_isolated)
  lv3:9_switch_isolated	=	+level3(9_switch_isolated)
  caps:capslock		=	+capslock(capslock)
  caps:numlock		=	+capslock(numlock)
  caps:shiftlock	=	+capslock(shiftlock)
  caps:swapescape	=	+capslock(swapescape)
  caps:escape		=	+capslock(escape)
  caps:escape_shifted_capslock	=	+capslock(escape_shifted_capslock)
  caps:backspace	=	+capslock(backspace)
  caps:super		=	+capslock(super)
  caps:hyper		=	+capslock(hyper)
  caps:menu		=	+capslock(menu)
  caps:none		=	+capslock(none)
  caps:ctrl_modifier	=	+capslock(ctrl_modifier)
  ctrl:nocaps		=	+ctrl(nocaps)
  ctrl:lctrl_meta	=	+ctrl(lctrl_meta)
  ctrl:swapcaps		=	+ctrl(swapcaps)
  ctrl:swapcaps_hyper	=	+ctrl(swapcaps_hyper)
  ctrl:swapcaps_and_switch_layout	=	+ctrl(swapcaps_and_switch_layout)
  ctrl:ac_ctrl		=	+ctrl(ac_ctrl)
  ctrl:aa_ctrl		=	+ctrl(aa_ctrl)
  ctrl:rctrl_ralt	=	+ctrl(rctrl_ralt)
  ctrl:menu_rctrl	=	+ctrl(menu_rctrl)
  ctrl:ralt_rctrl	=	+ctrl(ralt_rctrl)
  ctrl:swap_lalt_lctl	=	+ctrl(swap_lalt_lctl)
  ctrl:swap_lwin_lctl	=	+ctrl(swap_lwin_lctl)
  ctrl:swap_rwin_rctl	=	+ctrl(swap_rwin_rctl)
  ctrl:swap_lalt_lctl_lwin  =	+ctrl(swap_lalt_lctl_lwin)
  compose:ralt		=	+compose(ralt)
  compose:lwin		=	+compose(lwin)
  compose:lwin-altgr	=	+compose(lwin-altgr)
  compose:rwin		=	+compose(rwin)
  compose:rwin-altgr	=	+compose(rwin-altgr)
  compose:menu		=	+compose(menu)
  compose:menu-altgr	=	+compose(menu-altgr)
  compose:lctrl		=	+compose(lctrl)
  compose:lctrl-altgr	=	+compose(lctrl-altgr)
  compose:rctrl		=	+compose(rctrl)
  compose:rctrl-altgr	=	+compose(rctrl-altgr)
  compose:caps		=	+compose(caps)
  compose:caps-altgr	=	+compose(caps-altgr)
  compose:102		=	+compose(102)
  compose:102-altgr	=	+compose(102-altgr)
  compose:paus		=	+compose(paus)
  compose:prsc		=	+compose(prsc)
  compose:sclk		=	+compose(sclk)
  srvrkeys:none		=	+srvr_ctrl(no_srvr_keys)
  eurosign:e		=	+eurosign(e)
  eurosign:2		=	+eurosign(2)
  eurosign:4		=	+eurosign(4)
  eurosign:5		=	+eurosign(5)
  rupeesign:4           =       +rupeesign(4)
  keypad:oss            =       +keypad(oss)
  keypad:legacy         =	+keypad(legacy)
  keypad:legacy_wang    =	+keypad(legacy_wang)
  keypad:oss_wang       =	+keypad(oss_wang)
  keypad:future         =	+keypad(future)
  keypad:future_wang    =	+keypad(future_wang)
  keypad:hex            =	+keypad(ops)+keypad(hex)
  keypad:atm            =	+keypad(ops)+keypad(hex)+keypad(atm)  
  nbsp:none             =	+nbsp(none)
  nbsp:level2           =	+nbsp(level2)
  nbsp:level3           =	+nbsp(level3)
  nbsp:level3s          =	+nbsp(level3s)
  nbsp:level3n          =	+nbsp(level3n)
  nbsp:level4           =	+nbsp(level4)
  nbsp:level4n          =	+nbsp(level4n)
  nbsp:level4nl         =	+nbsp(level4nl)
  nbsp:zwnj2            =	+nbsp(zwnj2)
  nbsp:zwnj2zwj3        =	+nbsp(zwnj2zwj3)
  nbsp:zwnj2zwj3nb4     =	+nbsp(zwnj2zwj3nb4)
  nbsp:zwnj2nb3         =	+nbsp(zwnj2nb3)
  nbsp:zwnj2nb3s        =	+nbsp(zwnj2nb3s)
  nbsp:zwnj2nb3zwj4     =	+nbsp(zwnj2nb3zwj4)
  nbsp:zwnj2nb3nnb4     =	+nbsp(zwnj2nb3nnb4)
  nbsp:zwnj3zwj4        =	+nbsp(zwnj3zwj4)
  japan:nicola_f_bs     =	+jp(nicola_f_bs)
  japan:hztg_escape     =	+jp(hztg_escape)
  korean:ralt_hangul	=	+kr(ralt_hangul)
  korean:rctrl_hangul	=	+kr(rctrl_hangul)
  korean:ralt_hanja	=	+kr(ralt_hanja)
  korean:rctrl_hanja	=	+kr(rctrl_hanja)
  kpdl:dot              =	+kpdl(dot)
  kpdl:comma            =	+kpdl(comma)
  kpdl:dotoss           =	+kpdl(dotoss)
  kpdl:dotoss_latin9    =	+kpdl(dotoss_latin9)
  kpdl:commaoss         =	+kpdl(commaoss)
  kpdl:momayyezoss      =	+kpdl(momayyezoss)
  kpdl:kposs            =	+kpdl(kposs)
  kpdl:semi             =	+kpdl(semi)
  shift:breaks_caps     =	+shift(breaks_caps)
  esperanto:qwerty      =	+epo(qwerty)
  esperanto:dvorak      =	+epo(dvorak)
  esperanto:colemak     =	+epo(colemak)
  terminate:ctrl_alt_bksp =	+terminate(ctrl_alt_bksp)
  keypad:pointerkeys	=	+keypad(pointerkeys)
  apple:alupckeys	=	+macintosh_vndr/apple(alupckeys)
  shift:both_capslock                =       +shift(both_capslock)
  shift:lshift_both_capslock         =       +shift(lshift_both_capslock)
  shift:rshift_both_capslock         =       +shift(rshift_both_capslock)
  shift:both_capslock_cancel         =       +shift(both_capslock_cancel)
  shift:lshift_both_capslock_cancel  =       +shift(lshift_both_capslock_cancel)
  shift:rshift_both_capslock_cancel  =       +shift(rshift_both_capslock_cancel)
  shift:both_shiftlock               =       +shift(both_shiftlock)
  shift:lshift_both_shiftlock        =       +shift(lshift_both_shiftlock)
  shift:rshift_both_shiftlock        =       +shift(rshift_both_shiftlock)
  solaris:sun_compat				 =		 +sun_vndr/solaris(sun_compat)
  lv2:lsgt_switch                    =       +level2(lsgt_switch)
  lv3:caps_switch                    =       +level3(caps_switch)
  lv3:bksl_switch                    =       +level3(bksl_switch)
  lv3:lsgt_switch                    =       +level3(lsgt_switch)
  lv3:caps_switch_latch              =       +level3(caps_switch_latch)
  lv3:bksl_switch_latch              =       +level3(bksl_switch_latch)
  lv3:lsgt_switch_latch              =       +level3(lsgt_switch_latch)
  lv5:lsgt_switch                 =       +level5(lsgt_switch)
  lv5:ralt_switch                 =       +level5(ralt_switch)
  lv5:lsgt_switch_lock            =       +level5(lsgt_switch_lock)
  lv5:ralt_switch_lock            =       +level5(ralt_switch_lock)
  lv5:lwin_switch_lock            =       +level5(lwin_switch_lock)
  lv5:rwin_switch_lock            =       +level5(rwin_switch_lock)
  lv5:lsgt_switch_lock_cancel     =       +level5(lsgt_switch_lock_cancel)
  lv5:ralt_switch_lock_cancel     =       +level5(ralt_switch_lock_cancel)
  lv5:lwin_switch_lock_cancel     =       +level5(lwin_switch_lock_cancel)
  lv5:rwin_switch_lock_cancel     =       +level5(rwin_switch_lock_cancel)
  parens:swap_brackets   =   +parens(swap_brackets)


! option	=	compat
  grp_led:num		=	+lednum(group_lock)
  grp_led:caps		=	+ledcaps(group_lock)
  grp_led:scroll	=	+ledscroll(group_lock)
  mod_led:compose	=	+ledcompose(compose)
  japan:kana_lock	=	+japan(kana_lock)
  caps:shiftlock	=	+ledcaps(shift_lock)
  grab:break_actions    =       +xfree86(grab_break)


! option	=	types
  caps:internal			=	+caps(internal)
  caps:internal_nocancel	=	+caps(internal_nocancel)
  caps:shift			=	+caps(shift)
  caps:shift_nocancel		=	+caps(shift_nocancel)
  numpad:pc			=	+numpad(pc)
  numpad:mac			=	+numpad(mac)
  numpad:microsoft		=	+numpad(microsoft)
  numpad:shift3       		=	+numpad(shift3)
! model
  pc86            Generic 86-key PC
  pc101           Generic 101-key PC
  pc102           Generic 102-key PC
  pc104           Generic 104-key PC
  pc104alt        Generic 104-key PC with L-shaped Enter key
  pc105           Generic 105-key PC
  dell101         Dell 101-key PC
  latitude        Dell Latitude laptop
  dellm65         Dell Precision M65 laptop
  everex          Everex STEPnote
  flexpro         Keytronic FlexPro
  microsoft       Microsoft Natural
  omnikey101      Northgate OmniKey 101
  winbook         Winbook Model XP5
  pc98            PC-98
  a4techKB21      A4Tech KB-21
  a4techKBS8      A4Tech KBS-8
  a4_rfkb23       A4Tech Wireless Desktop RFKB-23
  airkey          Acer AirKey V
  azonaRF2300     Azona RF2300 wireless Internet
  scorpius        Advance Scorpius KI
  brother         Brother Internet
  btc5113rf       BTC 5113RF Multimedia
  btc5126t        BTC 5126T
  btc6301urf      BTC 6301URF
  btc9000         BTC 9000
  btc9000a        BTC 9000A
  btc9001ah       BTC 9001AH
  btc5090         BTC 5090
  btc9019u        BTC 9019U
  btc9116u        BTC 9116U Mini Wireless Internet and Gaming
  cherryblue      Cherry Blue Line CyBo@rd
  cherryblueb     Cherry CyMotion Master XPress
  cherrybluea     Cherry Blue Line CyBo@rd (alt.)
  cherrycyboard   Cherry CyBo@rd USB-Hub
  cherrycmexpert  Cherry CyMotion Expert
  cherrybunlim    Cherry B.UNLIMITED
  chicony         Chicony Internet
  chicony0108     Chicony KU-0108
  chicony0420     Chicony KU-0420
  chicony9885     Chicony KB-9885
  compaqeak8      Compaq Easy Access
  compaqik7       Compaq Internet (7 keys)
  compaqik13      Compaq Internet (13 keys)
  compaqik18      Compaq Internet (18 keys)
  cymotionlinux   Cherry CyMotion Master Linux
  armada          Compaq Armada laptop
  presario        Compaq Presario laptop
  ipaq            Compaq iPaq
  dell            Dell
  dellsk8125      Dell SK-8125
  dellsk8135      Dell SK-8135
  dellusbmm       Dell USB Multimedia
  inspiron        Dell Inspiron 6000/8000 laptop
  precision_m     Dell Precision M laptop
  dexxa           Dexxa Wireless Desktop
  diamond         Diamond 9801/9802
  dtk2000         DTK2000
  ennyah_dkb1008  Ennyah DKB-1008
  fscaa1667g      Fujitsu-Siemens Amilo laptop
  genius          Genius Comfy KB-16M/Multimedia KWD-910
  geniuscomfy     Genius Comfy KB-12e
  geniuscomfy2    Genius Comfy KB-21e-Scroll
  geniuskb19e     Genius KB-19e NB
  geniuskkb2050hs Genius KKB-2050HS
  gyration        Gyration
  kinesis         Kinesis
  logitech_base   Logitech
  logitech_g15    Logitech G15 extra keys via G15daemon
  hpi6            Hewlett-Packard Internet
  hp250x          Hewlett-Packard NEC SK-2500 Multimedia
  hpxe3gc         Hewlett-Packard Omnibook XE3 GC
  hpxe3gf         Hewlett-Packard Omnibook XE3 GF
  hpxt1000        Hewlett-Packard Omnibook XT1000
  hpdv5           Hewlett-Packard Pavilion dv5
  hpzt11xx        Hewlett-Packard Pavilion ZT1100
  hp500fa         Hewlett-Packard Omnibook 500 FA
  hp5xx           Hewlett-Packard Omnibook 500
  hpnx9020        Hewlett-Packard nx9020
  hp6000          Hewlett-Packard Omnibook 6000/6100
  honeywell_euroboard Honeywell Euroboard
  hpmini110       Hewlett-Packard Mini 110 laptop
  rapidaccess     IBM Rapid Access
  rapidaccess2    IBM Rapid Access II
  thinkpad        IBM ThinkPad 560Z/600/600E/A22E
  thinkpad60      IBM ThinkPad R60/T60/R61/T61
  thinkpadz60     IBM ThinkPad Z60m/Z60t/Z61m/Z61t
  ibm_spacesaver  IBM Space Saver
  logiaccess      Logitech Access
  logiclx300      Logitech Cordless Desktop LX-300
  logii350        Logitech Internet 350
  logimel         Logitech Internet 350
  logicd          Logitech Cordless Desktop
  logicd_it       Logitech Cordless Desktop iTouch
  logicd_nav      Logitech Cordless Desktop Navigator
  logicd_opt      Logitech Cordless Desktop Optical
  logicda         Logitech Cordless Desktop (alt.)
  logicdpa2       Logitech Cordless Desktop Pro (2nd alt.)
  logicfn         Logitech Cordless Freedom/Desktop Navigator
  logicdn         Logitech Cordless Desktop Navigator
  logiitc         Logitech iTouch Cordless Y-RB6
  logiik          Logitech Internet
  itouch          Logitech iTouch
  logicink        Logitech Internet Navigator
  logiex110       Logitech Cordless Desktop EX110
  logiinkse       Logitech iTouch Internet Navigator SE
  logiinkseusb    Logitech iTouch Internet Navigator SE USB
  logiultrax      Logitech Ultra-X
  logiultraxc     Logitech Ultra-X Cordless Media Desktop
  logidinovo      Logitech diNovo
  logidinovoedge  Logitech diNovo Edge
  mx1998          Memorex MX1998
  mx2500          Memorex MX2500 EZ-Access
  mx2750          Memorex MX2750
  microsoft4000   Microsoft Natural Ergonomic 4000
  microsoft7000   Microsoft Natural Wireless Ergonomic 7000
  microsoftinet   Microsoft Internet
  microsoftpro    Microsoft Natural Pro/Internet Pro
  microsoftprousb Microsoft Natural Pro USB/Internet Pro
  microsoftprooem Microsoft Natural Pro OEM
  vsonku306       ViewSonic KU-306 Internet
  microsoftprose  Microsoft Internet Pro (Swedish)
  microsoftoffice Microsoft Office Keyboard
  microsoftmult   Microsoft Wireless Multimedia 1.0A
  microsoftsurface Microsoft Surface
  microsoftelite  Microsoft Natural Elite
  microsoftccurve2k Microsoft Comfort Curve 2000
  oretec          Ortek Multimedia/Internet MCK-800
  propeller       Propeller Voyager KTEZ-1000
  qtronix         QTronix Scorpius 98N+
  samsung4500     Samsung SDM 4500P
  samsung4510     Samsung SDM 4510P
  sanwaskbkg3     Sanwa Supply SKB-KG3
  sk1300          NEC SK-1300
  sk2500          NEC SK-2500
  sk6200          NEC SK-6200
  sk7100          NEC SK-7100
  sp_inet         Super Power Multimedia
  sven            SVEN Ergonomic 2500
  sven303         SVEN Slim 303
  symplon         Symplon PaceBook tablet
  toshiba_s3000   Toshiba Satellite S3000
  trust           Trust Wireless Classic
  trustda         Trust Direct Access
  trust_slimline  Trust Slimline
  tm2020          TypeMatrix EZ-Reach 2020
  tm2030PS2       TypeMatrix EZ-Reach 2030 PS2
  tm2030USB       TypeMatrix EZ-Reach 2030 USB
  tm2030USB-102   TypeMatrix EZ-Reach 2030 USB (102/105:EU mode)
  tm2030USB-106   TypeMatrix EZ-Reach 2030 USB (106:JP mode)
  yahoo           Yahoo! Internet
  macbook78       MacBook/MacBook Pro
  macbook79       MacBook/MacBook Pro (intl.)
  macintosh       Macintosh
  macintosh_old   Macintosh Old
  macintosh_hhk   Happy Hacking for Mac
  acer_c300       Acer C300
  acer_ferrari4k  Acer Ferrari 4000
  acer_laptop     Acer laptop
  asus_laptop     Asus laptop
  apple           Apple
  apple_laptop    Apple laptop
  applealu_ansi   Apple Aluminium (ANSI)
  applealu_iso    Apple Aluminium (ISO)
  applealu_jis    Apple Aluminium (JIS)
  silvercrest     Silvercrest Multimedia Wireless
  emachines       eMachines m6800 laptop
  benqx           BenQ X-Touch
  benqx730        BenQ X-Touch 730
  benqx800        BenQ X-Touch 800
  hhk             Happy Hacking
  classmate       Classmate PC
  olpc            OLPC
  sun_type7_usb   Sun Type 7 USB
  sun_type7_euro_usb Sun Type 7 USB (European)
  sun_type7_unix_usb Sun Type 7 USB (Unix)
  sun_type7_jp_usb Sun Type 7 USB (Japanese)/Japanese 106-key
  sun_type6_usb   Sun Type 6/7 USB
  sun_type6_euro_usb Sun Type 6/7 USB (European)
  sun_type6_unix_usb Sun Type 6 USB (Unix)
  sun_type6_jp_usb Sun Type 6 USB (Japanese)
  sun_type6_jp    Sun Type 6 (Japanese)
  targa_v811      Targa Visionary 811
  unitekkb1925    Unitek KB-1925
  compalfl90      FL90
  creativedw7000  Creative Desktop Wireless 7000
  teck227         Truly Ergonomic 227
  teck229         Truly Ergonomic 229
  apex300         SteelSeries Apex 300 (Apex RAW)
  chromebook      Chromebook

! layout
  us              English (US)
  af              Afghani
  ara             Arabic
  al              Albanian
  am              Armenian
  at              German (Austria)
  au              English (Australian)
  az              Azerbaijani
  by              Belarusian
  be              Belgian
  bd              Bangla
  in              Indian
  ba              Bosnian
  br              Portuguese (Brazil)
  bg              Bulgarian
  dz              Kabyle (azerty layout, no dead keys)
  ma              Arabic (Morocco)
  cm              English (Cameroon)
  mm              Burmese
  ca              French (Canada)
  cd              French (Democratic Republic of the Congo)
  cn              Chinese
  hr              Croatian
  cz              Czech
  dk              Danish
  nl              Dutch
  bt              Dzongkha
  ee              Estonian
  ir              Persian
  iq              Iraqi
  fo              Faroese
  fi              Finnish
  fr              French
  gh              English (Ghana)
  gn              French (Guinea)
  ge              Georgian
  de              German
  gr              Greek
  hu              Hungarian
  is              Icelandic
  il              Hebrew
  it              Italian
  jp              Japanese
  kg              Kyrgyz
  kh              Khmer (Cambodia)
  kz              Kazakh
  la              Lao
  latam           Spanish (Latin American)
  lt              Lithuanian
  lv              Latvian
  mao             Maori
  me              Montenegrin
  mk              Macedonian
  mt              Maltese
  mn              Mongolian
  no              Norwegian
  pl              Polish
  pt              Portuguese
  ro              Romanian
  ru              Russian
  rs              Serbian
  si              Slovenian
  sk              Slovak
  es              Spanish
  se              Swedish
  ch              German (Switzerland)
  sy              Arabic (Syria)
  tj              Tajik
  lk              Sinhala (phonetic)
  th              Thai
  tr              Turkish
  tw              Taiwanese
  ua              Ukrainian
  gb              English (UK)
  uz              Uzbek
  vn              Vietnamese
  kr              Korean
  nec_vndr/jp     Japanese (PC-98)
  ie              Irish
  pk              Urdu (Pakistan)
  mv              Dhivehi
  za              English (South Africa)
  epo             Esperanto
  np              Nepali
  ng              English (Nigeria)
  et              Amharic
  sn              Wolof
  brai            Braille
  tm              Turkmen
  ml              Bambara
  tz              Swahili (Tanzania)
  tg              French (Togo)
  ke              Swahili (Kenya)
  bw              Tswana
  ph              Filipino
  md              Moldavian
  id              Indonesian (Arab Melayu, phonetic)
  jv              Indonesian (Javanese)
  my              Malay (Jawi, Arabic Keyboard)

! variant
  chr             us: Cherokee
  haw             us: Hawaiian
  euro            us: English (US, euro on 5)
  intl            us: English (US, intl., with dead keys)
  alt-intl        us: English (US, alt. intl.)
  colemak         us: English (Colemak)
  dvorak          us: English (Dvorak)
  dvorak-intl     us: English (Dvorak, intl., with dead keys)
  dvorak-alt-intl us: English (Dvorak, alt. intl.)
  dvorak-l        us: English (Dvorak, left-handed)
  dvorak-r        us: English (Dvorak, right-handed)
  dvorak-classic  us: English (classic Dvorak)
  dvp             us: English (programmer Dvorak)
  symbolic        us: English (US, Symbolic)
  rus             us: Russian (US, phonetic)
  mac             us: English (Macintosh)
  altgr-intl      us: English (intl., with AltGr dead keys)
  olpc2           us: English (the divide/multiply toggle the layout)
  hbs             us: Serbo-Croatian (US)
  norman          us: English (Norman)
  workman         us: English (Workman)
  workman-intl    us: English (Workman, intl., with dead keys)
  ps              af: Pashto
  uz              af: Uzbek (Afghanistan)
  olpc-ps         af: Pashto (Afghanistan, OLPC)
  fa-olpc         af: Persian (Afghanistan, Dari OLPC)
  uz-olpc         af: Uzbek (Afghanistan, OLPC)
  azerty          ara: Arabic (AZERTY)
  azerty_digits   ara: Arabic (AZERTY, Eastern Arabic numerals)
  digits          ara: Arabic (Eastern Arabic numerals)
  qwerty          ara: Arabic (QWERTY)
  qwerty_digits   ara: Arabic (QWERTY, Eastern Arabic numerals)
  buckwalter      ara: Arabic (Buckwalter)
  olpc            ara: Arabic (OLPC)
  mac             ara: Arabic (Macintosh)
  plisi           al: Albanian (Plisi)
  veqilharxhi     al: Albanian (Veqilharxhi)
  phonetic        am: Armenian (phonetic)
  phonetic-alt    am: Armenian (alt. phonetic)
  eastern         am: Armenian (eastern)
  western         am: Armenian (western)
  eastern-alt     am: Armenian (alt. eastern)
  nodeadkeys      at: German (Austria, no dead keys)
  mac             at: German (Austria, Macintosh)
  cyrillic        az: Azerbaijani (Cyrillic)
  legacy          by: Belarusian (legacy)
  latin           by: Belarusian (Latin)
  ru              by: Russian (Belarus)
  intl            by: Belarusian (intl.)
  oss             be: Belgian (alt.)
  oss_latin9      be: Belgian (Latin-9 only, alt.)
  oss_sundeadkeys be: Belgian (Sun dead keys, alt.)
  iso-alternate   be: Belgian (ISO, alt.)
  nodeadkeys      be: Belgian (no dead keys)
  sundeadkeys     be: Belgian (Sun dead keys)
  wang            be: Belgian (Wang 724 AZERTY)
  probhat         bd: Bangla (Probhat)
  ben             in: Bangla (India)
  ben_probhat     in: Bangla (India, Probhat)
  ben_baishakhi   in: Bangla (India, Baishakhi)
  ben_bornona     in: Bangla (India, Bornona)
  ben_gitanjali   in: Bangla (India, Gitanjali)
  ben_inscript    in: Bangla (India, Baishakhi Inscript)
  eeyek           in: Manipuri (Eeyek)
  guj             in: Gujarati
  guru            in: Punjabi (Gurmukhi)
  jhelum          in: Punjabi (Gurmukhi Jhelum)
  kan             in: Kannada
  kan-kagapa      in: Kannada (KaGaPa, phonetic)
  mal             in: Malayalam
  mal_lalitha     in: Malayalam (Lalitha)
  mal_enhanced    in: Malayalam (enhanced Inscript, with rupee)
  ori             in: Oriya
  olck            in: Ol Chiki
  tam_tamilnet    in: Tamil (TamilNet '99)
  tam_tamilnet_with_tam_nums in: Tamil (TamilNet '99 with Tamil numerals)
  tam_tamilnet_TAB in: Tamil (TamilNet '99, TAB encoding)
  tam_tamilnet_TSCII in: Tamil (TamilNet '99, TSCII encoding)
  tam             in: Tamil (Inscript)
  tel             in: Telugu
  tel-kagapa      in: Telugu (KaGaPa, phonetic)
  tel-sarala      in: Telugu (Sarala)
  urd-phonetic    in: Urdu (phonetic)
  urd-phonetic3   in: Urdu (alt. phonetic)
  urd-winkeys     in: Urdu (Windows)
  bolnagri        in: Hindi (Bolnagri)
  hin-wx          in: Hindi (Wx)
  hin-kagapa      in: Hindi (KaGaPa, phonetic)
  san-kagapa      in: Sanskrit (KaGaPa, phonetic)
  mar-kagapa      in: Marathi (KaGaPa, phonetic)
  eng             in: English (India, with rupee)
  iipa            in: Indic IPA
  marathi         in: Marathi (enhanced Inscript)
  alternatequotes ba: Bosnian (with guillemets)
  unicode         ba: Bosnian (with Bosnian digraphs)
  unicodeus       ba: Bosnian (US, with Bosnian digraphs)
  us              ba: Bosnian (US)
  nodeadkeys      br: Portuguese (Brazil, no dead keys)
  dvorak          br: Portuguese (Brazil, Dvorak)
  nativo          br: Portuguese (Brazil, Nativo)
  nativo-us       br: Portuguese (Brazil, Nativo for US keyboards)
  nativo-epo      br: Esperanto (Brazil, Nativo)
  thinkpad        br: Portuguese (Brazil, IBM/Lenovo ThinkPad)
  phonetic        bg: Bulgarian (traditional phonetic)
  bas_phonetic    bg: Bulgarian (new phonetic)
  bekl            bg: Bulgarian (enhanced)
  azerty-deadkeys dz: Kabyle (azerty layout, with dead keys)
  qwerty-gb-deadkeys dz: Kabyle (qwerty-gb layout, with dead keys)
  qwerty-us-deadkeys dz: Kabyle (qwerty-us layout, with dead keys)
  ber             dz: Kabyle (Algeria, Tifinagh)
  ar              dz: Arabic (Algeria)
  french          ma: French (Morocco)
  tifinagh        ma: Berber (Morocco, Tifinagh)
  tifinagh-alt    ma: Berber (Morocco, Tifinagh alt.)
  tifinagh-alt-phonetic ma: Berber (Morocco, Tifinagh phonetic, alt.)
  tifinagh-extended ma: Berber (Morocco, Tifinagh extended)
  tifinagh-phonetic ma: Berber (Morocco, Tifinagh phonetic)
  tifinagh-extended-phonetic ma: Berber (Morocco, Tifinagh extended phonetic)
  french          cm: French (Cameroon)
  qwerty          cm: Cameroon Multilingual (QWERTY, intl.)
  azerty          cm: Cameroon (AZERTY, intl.)
  dvorak          cm: Cameroon (Dvorak, intl.)
  mmuock          cm: Mmuock
  zawgyi          mm: Burmese Zawgyi
  fr-dvorak       ca: French (Canada, Dvorak)
  fr-legacy       ca: French (Canada, legacy)
  multix          ca: Canadian (intl.)
  multi           ca: Canadian (intl., 1st part)
  multi-2gr       ca: Canadian (intl., 2nd part)
  ike             ca: Inuktitut
  eng             ca: English (Canada)
  mon_trad        cn: Mongolian (Bichig)
  mon_trad_todo   cn: Mongolian (Todo)
  mon_trad_xibe   cn: Mongolian (Xibe)
  mon_trad_manchu cn: Mongolian (Manchu)
  mon_trad_galik  cn: Mongolian (Galik)
  mon_todo_galik  cn: Mongolian (Todo Galik)
  mon_manchu_galik cn: Mongolian (Manchu Galik)
  tib             cn: Tibetan
  tib_asciinum    cn: Tibetan (with ASCII numerals)
  ug              cn: Uyghur
  altgr-pinyin    cn: Hanyu Pinyin (with AltGr dead keys)
  alternatequotes hr: Croatian (with guillemets)
  unicode         hr: Croatian (with Croatian digraphs)
  unicodeus       hr: Croatian (US, with Croatian digraphs)
  us              hr: Croatian (US)
  bksl            cz: Czech (with &lt;\|&gt; key)
  qwerty          cz: Czech (QWERTY)
  qwerty_bksl     cz: Czech (QWERTY, extended backslash)
  qwerty-mac      cz: Czech (QWERTY, Macintosh)
  ucw             cz: Czech (UCW, only accented letters)
  dvorak-ucw      cz: Czech (US, Dvorak, UCW support)
  rus             cz: Russian (Czech, phonetic)
  nodeadkeys      dk: Danish (no dead keys)
  winkeys         dk: Danish (Windows)
  mac             dk: Danish (Macintosh)
  mac_nodeadkeys  dk: Danish (Macintosh, no dead keys)
  dvorak          dk: Danish (Dvorak)
  mac             nl: Dutch (Macintosh)
  std             nl: Dutch (standard)
  nodeadkeys      ee: Estonian (no dead keys)
  dvorak          ee: Estonian (Dvorak)
  us              ee: Estonian (US)
  pes_keypad      ir: Persian (with Persian keypad)
  ku              ir: Kurdish (Iran, Latin Q)
  ku_f            ir: Kurdish (Iran, F)
  ku_alt          ir: Kurdish (Iran, Latin Alt-Q)
  ku_ara          ir: Kurdish (Iran, Arabic-Latin)
  ku              iq: Kurdish (Iraq, Latin Q)
  ku_f            iq: Kurdish (Iraq, F)
  ku_alt          iq: Kurdish (Iraq, Latin Alt-Q)
  ku_ara          iq: Kurdish (Iraq, Arabic-Latin)
  nodeadkeys      fo: Faroese (no dead keys)
  winkeys         fi: Finnish (Windows)
  classic         fi: Finnish (classic)
  nodeadkeys      fi: Finnish (classic, no dead keys)
  smi             fi: Northern Saami (Finland)
  mac             fi: Finnish (Macintosh)
  nodeadkeys      fr: French (no dead keys)
  sundeadkeys     fr: French (Sun dead keys)
  oss             fr: French (alt.)
  oss_latin9      fr: French (alt., Latin-9 only)
  oss_nodeadkeys  fr: French (alt., no dead keys)
  oss_sundeadkeys fr: French (alt., Sun dead keys)
  latin9          fr: French (legacy, alt.)
  latin9_nodeadkeys fr: French (legacy, alt., no dead keys)
  latin9_sundeadkeys fr: French (legacy, alt., Sun dead keys)
  bepo            fr: French (BEPO)
  bepo_latin9     fr: French (BEPO, Latin-9 only)
  bepo_afnor      fr: French (BEPO, AFNOR)
  dvorak          fr: French (Dvorak)
  mac             fr: French (Macintosh)
  azerty          fr: French (AZERTY)
  afnor           fr: French (AZERTY, AFNOR)
  bre             fr: French (Breton)
  oci             fr: Occitan
  geo             fr: Georgian (France, AZERTY Tskapo)
  us              fr: French (US)
  generic         gh: English (Ghana, multilingual)
  akan            gh: Akan
  ewe             gh: Ewe
  fula            gh: Fula
  ga              gh: Ga
  hausa           gh: Hausa (Ghana)
  avn             gh: Avatime
  gillbt          gh: English (Ghana, GILLBT)
  ergonomic       ge: Georgian (ergonomic)
  mess            ge: Georgian (MESS)
  ru              ge: Russian (Georgia)
  os              ge: Ossetian (Georgia)
  deadacute       de: German (dead acute)
  deadgraveacute  de: German (dead grave acute)
  nodeadkeys      de: German (no dead keys)
  e1              de: German (E1)
  e2              de: German (E2)
  T3              de: German (T3)
  us              de: German (US)
  ro              de: Romanian (Germany)
  ro_nodeadkeys   de: Romanian (Germany, no dead keys)
  dvorak          de: German (Dvorak)
  neo             de: German (Neo 2)
  mac             de: German (Macintosh)
  mac_nodeadkeys  de: German (Macintosh, no dead keys)
  dsb             de: Lower Sorbian
  dsb_qwertz      de: Lower Sorbian (QWERTZ)
  qwerty          de: German (QWERTY)
  tr              de: Turkish (Germany)
  ru              de: Russian (Germany, phonetic)
  deadtilde       de: German (dead tilde)
  simple          gr: Greek (simple)
  extended        gr: Greek (extended)
  nodeadkeys      gr: Greek (no dead keys)
  polytonic       gr: Greek (polytonic)
  standard        hu: Hungarian (standard)
  nodeadkeys      hu: Hungarian (no dead keys)
  qwerty          hu: Hungarian (QWERTY)
  101_qwertz_comma_dead hu: Hungarian (QWERTZ, 101-key, comma, dead keys)
  101_qwertz_comma_nodead hu: Hungarian (QWERTZ, 101-key, comma, no dead keys)
  101_qwertz_dot_dead hu: Hungarian (QWERTZ, 101-key, dot, dead keys)
  101_qwertz_dot_nodead hu: Hungarian (QWERTZ, 101-key, dot, no dead keys)
  101_qwerty_comma_dead hu: Hungarian (QWERTY, 101-key, comma, dead keys)
  101_qwerty_comma_nodead hu: Hungarian (QWERTY, 101-key, comma, no dead keys)
  101_qwerty_dot_dead hu: Hungarian (QWERTY, 101-key, dot, dead keys)
  101_qwerty_dot_nodead hu: Hungarian (QWERTY, 101-key, dot, no dead keys)
  102_qwertz_comma_dead hu: Hungarian (QWERTZ, 102-key, comma, dead keys)
  102_qwertz_comma_nodead hu: Hungarian (QWERTZ, 102-key, comma, no dead keys)
  102_qwertz_dot_dead hu: Hungarian (QWERTZ, 102-key, dot, dead keys)
  102_qwertz_dot_nodead hu: Hungarian (QWERTZ, 102-key, dot, no dead keys)
  102_qwerty_comma_dead hu: Hungarian (QWERTY, 102-key, comma, dead keys)
  102_qwerty_comma_nodead hu: Hungarian (QWERTY, 102-key, comma, no dead keys)
  102_qwerty_dot_dead hu: Hungarian (QWERTY, 102-key, dot, dead keys)
  102_qwerty_dot_nodead hu: Hungarian (QWERTY, 102-key, dot, no dead keys)
  Sundeadkeys     is: Icelandic (Sun dead keys)
  nodeadkeys      is: Icelandic (no dead keys)
  mac_legacy      is: Icelandic (Macintosh, legacy)
  mac             is: Icelandic (Macintosh)
  dvorak          is: Icelandic (Dvorak)
  lyx             il: Hebrew (lyx)
  phonetic        il: Hebrew (phonetic)
  biblical        il: Hebrew (Biblical, Tiro)
  nodeadkeys      it: Italian (no dead keys)
  winkeys         it: Italian (Windows)
  mac             it: Italian (Macintosh)
  us              it: Italian (US)
  geo             it: Georgian (Italy)
  ibm             it: Italian (IBM 142)
  intl            it: Italian (intl., with dead keys)
  scn             it: Sicilian
  fur             it: Friulian (Italy)
  kana            jp: Japanese (Kana)
  kana86          jp: Japanese (Kana 86)
  OADG109A        jp: Japanese (OADG 109A)
  mac             jp: Japanese (Macintosh)
  dvorak          jp: Japanese (Dvorak)
  phonetic        kg: Kyrgyz (phonetic)
  ruskaz          kz: Russian (Kazakhstan, with Kazakh)
  kazrus          kz: Kazakh (with Russian)
  ext             kz: Kazakh (extended)
  latin           kz: Kazakh (Latin)
  stea            la: Lao (STEA)
  nodeadkeys      latam: Spanish (Latin American, no dead keys)
  deadtilde       latam: Spanish (Latin American, dead tilde)
  sundeadkeys     latam: Spanish (Latin American, Sun dead keys)
  dvorak          latam: Spanish (Latin American, Dvorak)
  colemak         latam: Spanish (Latin American, Colemak)
  colemak-gaming  latam: Spanish (Latin American, Colemak for gaming)
  std             lt: Lithuanian (standard)
  us              lt: Lithuanian (US)
  ibm             lt: Lithuanian (IBM LST 1205-92)
  lekp            lt: Lithuanian (LEKP)
  lekpa           lt: Lithuanian (LEKPa)
  sgs             lt: Samogitian
  apostrophe      lv: Latvian (apostrophe)
  tilde           lv: Latvian (tilde)
  fkey            lv: Latvian (F)
  modern          lv: Latvian (modern)
  ergonomic       lv: Latvian (ergonomic, ŪGJRMV)
  adapted         lv: Latvian (adapted)
  cyrillic        me: Montenegrin (Cyrillic)
  cyrillicyz      me: Montenegrin (Cyrillic, ZE and ZHE swapped)
  latinunicode    me: Montenegrin (Latin, Unicode)
  latinyz         me: Montenegrin (Latin, QWERTY)
  latinunicodeyz  me: Montenegrin (Latin, Unicode, QWERTY)
  cyrillicalternatequotes me: Montenegrin (Cyrillic, with guillemets)
  latinalternatequotes me: Montenegrin (Latin, with guillemets)
  nodeadkeys      mk: Macedonian (no dead keys)
  us              mt: Maltese (US)
  alt-us          mt: Maltese (US layout with AltGr overrides)
  alt-gb          mt: Maltese (UK, with AltGr overrides)
  nodeadkeys      no: Norwegian (no dead keys)
  winkeys         no: Norwegian (Windows)
  dvorak          no: Norwegian (Dvorak)
  smi             no: Northern Saami (Norway)
  smi_nodeadkeys  no: Northern Saami (Norway, no dead keys)
  mac             no: Norwegian (Macintosh)
  mac_nodeadkeys  no: Norwegian (Macintosh, no dead keys)
  colemak         no: Norwegian (Colemak)
  legacy          pl: Polish (legacy)
  qwertz          pl: Polish (QWERTZ)
  dvorak          pl: Polish (Dvorak)
  dvorak_quotes   pl: Polish (Dvorak, with Polish quotes on quotemark key)
  dvorak_altquotes pl: Polish (Dvorak, with Polish quotes on key 1)
  csb             pl: Kashubian
  szl             pl: Silesian
  ru_phonetic_dvorak pl: Russian (Poland, phonetic Dvorak)
  dvp             pl: Polish (programmer Dvorak)
  nodeadkeys      pt: Portuguese (no dead keys)
  sundeadkeys     pt: Portuguese (Sun dead keys)
  mac             pt: Portuguese (Macintosh)
  mac_nodeadkeys  pt: Portuguese (Macintosh, no dead keys)
  mac_sundeadkeys pt: Portuguese (Macintosh, Sun dead keys)
  nativo          pt: Portuguese (Nativo)
  nativo-us       pt: Portuguese (Nativo for US keyboards)
  nativo-epo      pt: Esperanto (Portugal, Nativo)
  std             ro: Romanian (standard)
  winkeys         ro: Romanian (Windows)
  phonetic        ru: Russian (phonetic)
  phonetic_winkeys ru: Russian (phonetic, Windows)
  phonetic_YAZHERTY ru: Russian (phonetic, YAZHERTY)
  typewriter      ru: Russian (typewriter)
  legacy          ru: Russian (legacy)
  typewriter-legacy ru: Russian (typewriter, legacy)
  tt              ru: Tatar
  os_legacy       ru: Ossetian (legacy)
  os_winkeys      ru: Ossetian (Windows)
  cv              ru: Chuvash
  cv_latin        ru: Chuvash (Latin)
  udm             ru: Udmurt
  kom             ru: Komi
  sah             ru: Yakut
  xal             ru: Kalmyk
  dos             ru: Russian (DOS)
  mac             ru: Russian (Macintosh)
  srp             ru: Serbian (Russia)
  bak             ru: Bashkirian
  chm             ru: Mari
  phonetic_azerty ru: Russian (phonetic, AZERTY)
  phonetic_dvorak ru: Russian (phonetic, Dvorak)
  phonetic_fr     ru: Russian (phonetic, French)
  yz              rs: Serbian (Cyrillic, ZE and ZHE swapped)
  latin           rs: Serbian (Latin)
  latinunicode    rs: Serbian (Latin, Unicode)
  latinyz         rs: Serbian (Latin, QWERTY)
  latinunicodeyz  rs: Serbian (Latin, Unicode, QWERTY)
  alternatequotes rs: Serbian (Cyrillic, with guillemets)
  latinalternatequotes rs: Serbian (Latin, with guillemets)
  rue             rs: Pannonian Rusyn
  alternatequotes si: Slovenian (with guillemets)
  us              si: Slovenian (US)
  bksl            sk: Slovak (extended backslash)
  qwerty          sk: Slovak (QWERTY)
  qwerty_bksl     sk: Slovak (QWERTY, extended backslash)
  nodeadkeys      es: Spanish (no dead keys)
  winkeys         es: Spanish (Windows)
  deadtilde       es: Spanish (dead tilde)
  sundeadkeys     es: Spanish (Sun dead keys)
  dvorak          es: Spanish (Dvorak)
  ast             es: Asturian (Spain, with bottom-dot H and L)
  cat             es: Catalan (Spain, with middle-dot L)
  mac             es: Spanish (Macintosh)
  nodeadkeys      se: Swedish (no dead keys)
  dvorak          se: Swedish (Dvorak)
  rus             se: Russian (Sweden, phonetic)
  rus_nodeadkeys  se: Russian (Sweden, phonetic, no dead keys)
  smi             se: Northern Saami (Sweden)
  mac             se: Swedish (Macintosh)
  svdvorak        se: Swedish (Svdvorak)
  us_dvorak       se: Swedish (Dvorak, intl.)
  us              se: Swedish (US)
  swl             se: Swedish Sign Language
  legacy          ch: German (Switzerland, legacy)
  de_nodeadkeys   ch: German (Switzerland, no dead keys)
  de_sundeadkeys  ch: German (Switzerland, Sun dead keys)
  fr              ch: French (Switzerland)
  fr_nodeadkeys   ch: French (Switzerland, no dead keys)
  fr_sundeadkeys  ch: French (Switzerland, Sun dead keys)
  fr_mac          ch: French (Switzerland, Macintosh)
  de_mac          ch: German (Switzerland, Macintosh)
  syc             sy: Syriac
  syc_phonetic    sy: Syriac (phonetic)
  ku              sy: Kurdish (Syria, Latin Q)
  ku_f            sy: Kurdish (Syria, F)
  ku_alt          sy: Kurdish (Syria, Latin Alt-Q)
  legacy          tj: Tajik (legacy)
  tam_unicode     lk: Tamil (Sri Lanka, TamilNet '99)
  tam_TAB         lk: Tamil (Sri Lanka, TamilNet '99, TAB encoding)
  us              lk: Sinhala (US)
  tis             th: Thai (TIS-820.2538)
  pat             th: Thai (Pattachote)
  f               tr: Turkish (F)
  alt             tr: Turkish (Alt-Q)
  ku              tr: Kurdish (Turkey, Latin Q)
  ku_f            tr: Kurdish (Turkey, F)
  ku_alt          tr: Kurdish (Turkey, Latin Alt-Q)
  intl            tr: Turkish (intl., with dead keys)
  crh             tr: Crimean Tatar (Turkish Q)
  crh_f           tr: Crimean Tatar (Turkish F)
  crh_alt         tr: Crimean Tatar (Turkish Alt-Q)
  indigenous      tw: Taiwanese (indigenous)
  saisiyat        tw: Saisiyat (Taiwan)
  phonetic        ua: Ukrainian (phonetic)
  typewriter      ua: Ukrainian (typewriter)
  winkeys         ua: Ukrainian (Windows)
  legacy          ua: Ukrainian (legacy)
  rstu            ua: Ukrainian (standard RSTU)
  rstu_ru         ua: Russian (Ukraine, standard RSTU)
  homophonic      ua: Ukrainian (homophonic)
  extd            gb: English (UK, extended, Windows)
  intl            gb: English (UK, intl., with dead keys)
  dvorak          gb: English (UK, Dvorak)
  dvorakukp       gb: English (UK, Dvorak, with UK punctuation)
  mac             gb: English (UK, Macintosh)
  mac_intl        gb: English (UK, Macintosh, intl.)
  colemak         gb: English (UK, Colemak)
  pl              gb: Polish (British keyboard)
  latin           uz: Uzbek (Latin)
  us              vn: Vietnamese (US)
  fr              vn: Vietnamese (French)
  kr104           kr: Korean (101/104-key compatible)
  CloGaelach      ie: CloGaelach
  UnicodeExpert   ie: Irish (UnicodeExpert)
  ogam            ie: Ogham
  ogam_is434      ie: Ogham (IS434)
  urd-crulp       pk: Urdu (Pakistan, CRULP)
  urd-nla         pk: Urdu (Pakistan, NLA)
  ara             pk: Arabic (Pakistan)
  snd             pk: Sindhi
  legacy          epo: Esperanto (legacy)
  igbo            ng: Igbo
  yoruba          ng: Yoruba
  hausa           ng: Hausa (Nigeria)
  left_hand       brai: Braille (left-handed)
  left_hand_invert brai: Braille (left-handed inverted thumb)
  right_hand      brai: Braille (right-handed)
  right_hand_invert brai: Braille (right-handed inverted thumb)
  alt             tm: Turkmen (Alt-Q)
  fr-oss          ml: French (Mali, alt.)
  us-mac          ml: English (Mali, US, Macintosh)
  us-intl         ml: English (Mali, US, intl.)
  kik             ke: Kikuyu
  qwerty-bay      ph: Filipino (QWERTY, Baybayin)
  capewell-dvorak ph: Filipino (Capewell-Dvorak, Latin)
  capewell-dvorak-bay ph: Filipino (Capewell-Dvorak, Baybayin)
  capewell-qwerf2k6 ph: Filipino (Capewell-QWERF 2006, Latin)
  capewell-qwerf2k6-bay ph: Filipino (Capewell-QWERF 2006, Baybayin)
  colemak         ph: Filipino (Colemak, Latin)
  colemak-bay     ph: Filipino (Colemak, Baybayin)
  dvorak          ph: Filipino (Dvorak, Latin)
  dvorak-bay      ph: Filipino (Dvorak, Baybayin)
  gag             md: Moldavian (Gagauz)
  phoneticx       id: Indonesian (Arab Melayu, extended phonetic)
  phonetic        my: Malay (Jawi, phonetic)

! option
  grp                  Switching to another layout
  grp:switch           Right Alt (while pressed)
  grp:lswitch          Left Alt (while pressed)
  grp:lwin_switch      Left Win (while pressed)
  grp:rwin_switch      Right Win (while pressed)
  grp:win_switch       Any Win (while pressed)
  grp:menu_switch      Menu (while pressed), Shift+Menu for Menu
  grp:caps_switch      Caps Lock (while pressed), Alt+Caps Lock for the original Caps Lock action
  grp:rctrl_switch     Right Ctrl (while pressed)
  grp:toggle           Right Alt
  grp:lalt_toggle      Left Alt
  grp:caps_toggle      Caps Lock
  grp:shift_caps_toggle Shift+Caps Lock
  grp:shift_caps_switch Caps Lock to first layout; Shift+Caps Lock to last layout
  grp:win_menu_switch  Left Win to first layout; Right Win/Menu to last layout
  grp:lctrl_rctrl_switch Left Ctrl to first layout; Right Ctrl to last layout
  grp:alt_caps_toggle  Alt+Caps Lock
  grp:shifts_toggle    Both Shift together
  grp:alts_toggle      Both Alt together
  grp:ctrls_toggle     Both Ctrl together
  grp:ctrl_shift_toggle Ctrl+Shift
  grp:lctrl_lshift_toggle Left Ctrl+Left Shift
  grp:rctrl_rshift_toggle Right Ctrl+Right Shift
  grp:ctrl_alt_toggle  Alt+Ctrl
  grp:alt_shift_toggle Alt+Shift
  grp:lalt_lshift_toggle Left Alt+Left Shift
  grp:alt_space_toggle Alt+Space
  grp:menu_toggle      Menu
  grp:lwin_toggle      Left Win
  grp:win_space_toggle Win+Space
  grp:rwin_toggle      Right Win
  grp:lshift_toggle    Left Shift
  grp:rshift_toggle    Right Shift
  grp:lctrl_toggle     Left Ctrl
  grp:rctrl_toggle     Right Ctrl
  grp:sclk_toggle      Scroll Lock
  grp:lctrl_lwin_rctrl_menu Left Ctrl+Left Win to first layout; Right Ctrl+Menu to second layout
  grp:lctrl_lwin_toggle Left Ctrl+Left Win
  lv2                  Key to choose the 2nd level
  lv2:lsgt_switch      The "&lt; &gt;" key
  lv3                  Key to choose the 3rd level
  lv3:switch           Right Ctrl
  lv3:menu_switch      Menu
  lv3:win_switch       Any Win
  lv3:lwin_switch      Left Win
  lv3:rwin_switch      Right Win
  lv3:alt_switch       Any Alt
  lv3:lalt_switch      Left Alt
  lv3:ralt_switch      Right Alt
  lv3:ralt_switch_multikey Right Alt; Shift+Right Alt as Compose
  lv3:ralt_alt         Right Alt never chooses 3rd level
  lv3:enter_switch     Enter on keypad
  lv3:caps_switch      Caps Lock
  lv3:bksl_switch      Backslash
  lv3:lsgt_switch      The "&lt; &gt;" key
  lv3:caps_switch_latch Caps Lock; acts as onetime lock when pressed together with another 3rd-level chooser
  lv3:bksl_switch_latch Backslash; acts as onetime lock when pressed together with another 3rd level chooser
  lv3:lsgt_switch_latch The "&lt; &gt;" key; acts as onetime lock when pressed together with another 3rd level chooser
  ctrl                 Ctrl position
  ctrl:nocaps          Caps Lock as Ctrl
  ctrl:lctrl_meta      Left Ctrl as Meta
  ctrl:swapcaps        Swap Ctrl and Caps Lock
  ctrl:swapcaps_hyper  Caps Lock as Ctrl, Ctrl as Hyper
  ctrl:ac_ctrl         To the left of "A"
  ctrl:aa_ctrl         At the bottom left
  ctrl:rctrl_ralt      Right Ctrl as Right Alt
  ctrl:menu_rctrl      Menu as Right Ctrl
  ctrl:swap_lalt_lctl  Swap Left Alt with Left Ctrl
  ctrl:swap_lwin_lctl  Swap Left Win with Left Ctrl
  ctrl:swap_rwin_rctl  Swap Right Win with Right Ctrl
  ctrl:swap_lalt_lctl_lwin Left Alt as Ctrl, Left Ctrl as Win, Left Win as Left Alt
  grp_led              Use keyboard LED to show alternative layout
  grp_led:num          Num Lock
  grp_led:caps         Caps Lock
  grp_led:scroll       Scroll Lock
  mod_led              Use keyboard LED to indicate modifiers
  mod_led:compose      Compose
  keypad               Layout of numeric keypad
  keypad:legacy        Legacy
  keypad:oss           Unicode arrows and math operators
  keypad:future        Unicode arrows and math operators on default level
  keypad:legacy_wang   Legacy Wang 724
  keypad:oss_wang      Wang 724 keypad with Unicode arrows and math operators
  keypad:future_wang   Wang 724 keypad with Unicode arrows and math operators on default level
  keypad:hex           Hexadecimal
  keypad:atm           Phone and ATM style
  kpdl                 Numeric keypad Delete behavior
  kpdl:dot             Legacy key with dot
  kpdl:comma           Legacy key with comma
  kpdl:dotoss          Four-level key with dot
  kpdl:dotoss_latin9   Four-level key with dot, Latin-9 only
  kpdl:commaoss        Four-level key with comma
  kpdl:momayyezoss     Four-level key with momayyez
  kpdl:kposs           Four-level key with abstract separators
  kpdl:semi            Semicolon on third level
  caps                 Caps Lock behavior
  caps:internal        Caps Lock uses internal capitalization; Shift "pauses" Caps Lock
  caps:internal_nocancel Caps Lock uses internal capitalization; Shift does not affect Caps Lock
  caps:shift           Caps Lock acts as Shift with locking; Shift "pauses" Caps Lock
  caps:shift_nocancel  Caps Lock acts as Shift with locking; Shift does not affect Caps Lock
  caps:capslock        Caps Lock toggles normal capitalization of alphabetic characters
  caps:shiftlock       Caps Lock toggles Shift Lock (affects all keys)
  caps:swapescape      Swap Esc and Caps Lock
  caps:escape          Make Caps Lock an additional Esc
  caps:escape_shifted_capslock Make Caps Lock an additional Esc, but Shift + Caps Lock is the regular Caps Lock
  caps:backspace       Make Caps Lock an additional Backspace
  caps:super           Make Caps Lock an additional Super
  caps:hyper           Make Caps Lock an additional Hyper
  caps:menu            Make Caps Lock an additional Menu key
  caps:numlock         Make Caps Lock an additional Num Lock
  caps:ctrl_modifier   Caps Lock is also a Ctrl
  caps:none            Caps Lock is disabled
  altwin               Alt and Win behavior
  altwin:menu          Add the standard behavior to Menu key
  altwin:menu_win      Menu is mapped to Win
  altwin:meta_alt      Alt and Meta are on Alt
  altwin:alt_win       Alt is mapped to Win and the usual Alt
  altwin:ctrl_win      Ctrl is mapped to Win and the usual Ctrl
  altwin:ctrl_alt_win  Ctrl is mapped to Alt, Alt to Win
  altwin:meta_win      Meta is mapped to Win
  altwin:left_meta_win Meta is mapped to Left Win
  altwin:hyper_win     Hyper is mapped to Win
  altwin:alt_super_win Alt is mapped to Right Win, Super to Menu
  altwin:swap_lalt_lwin Left Alt is swapped with Left Win
  altwin:swap_alt_win  Alt is swapped with Win
  altwin:prtsc_rwin    Win is mapped to PrtSc and the usual Win
  Compose key          Position of Compose key
  compose:ralt         Right Alt
  compose:lwin         Left Win
  compose:lwin-altgr   3rd level of Left Win
  compose:rwin         Right Win
  compose:rwin-altgr   3rd level of Right Win
  compose:menu         Menu
  compose:menu-altgr   3rd level of Menu
  compose:lctrl        Left Ctrl
  compose:lctrl-altgr  3rd level of Left Ctrl
  compose:rctrl        Right Ctrl
  compose:rctrl-altgr  3rd level of Right Ctrl
  compose:caps         Caps Lock
  compose:caps-altgr   3rd level of Caps Lock
  compose:102          The "&lt; &gt;" key
  compose:102-altgr    3rd level of the "&lt; &gt;" key
  compose:paus         Pause
  compose:prsc         PrtSc
  compose:sclk         Scroll Lock
  compat               Compatibility options
  numpad:pc            Default numeric keypad keys
  numpad:mac           Numeric keypad always enters digits (as in macOS)
  numpad:microsoft     Num Lock on: digits; Shift for arrows. Num Lock off: arrows (as in Windows)
  numpad:shift3        Shift does not cancel Num Lock, chooses 3rd level instead
  srvrkeys:none        Special keys (Ctrl+Alt+&lt;key&gt;) handled in a server
  apple:alupckeys      Apple Aluminium emulates Pause, PrtSc, Scroll Lock
  shift:breaks_caps    Shift cancels Caps Lock
  misc:typo            Enable extra typographic characters
  misc:apl             Enable APL overlay characters
  shift:both_capslock  Both Shift together enable Caps Lock
  shift:both_capslock_cancel Both Shift together enable Caps Lock; one Shift key disables it
  shift:both_shiftlock Both Shift together enable Shift Lock
  keypad:pointerkeys   Shift + Num Lock enables PointerKeys
  grab:break_actions   Allow breaking grabs with keyboard actions (warning: security risk)
  grab:debug           Allow grab and window tree logging
  currencysign         Currency signs
  eurosign:e           Euro on E
  eurosign:2           Euro on 2
  eurosign:4           Euro on 4
  eurosign:5           Euro on 5
  rupeesign:4          Rupee on 4
  lv5                  Key to choose 5th level
  lv5:lsgt_switch      The "&lt; &gt;" key chooses 5th level
  lv5:ralt_switch      Right Alt chooses 5th level
  lv5:lsgt_switch_lock The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:ralt_switch_lock Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:lwin_switch_lock Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:rwin_switch_lock Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:lsgt_switch_lock_cancel The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:lsgt_switch      The "&lt; &gt;" key chooses 5th level
  lv5:ralt_switch      Right Alt chooses 5th level
  lv5:lsgt_switch_lock The "&lt; &gt;" key chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:ralt_switch_lock Right Alt chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:lwin_switch_lock Left Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  lv5:rwin_switch_lock Right Win chooses 5th level and acts as a one-time lock if pressed with another 5th level chooser
  nbsp                 Non-breaking space input
  nbsp:none            Usual space at any level
  nbsp:level2          Non-breaking space at the 2nd level
  nbsp:level3          Non-breaking space at the 3rd level
  nbsp:level3s         Non-breaking space at the 3rd level, nothing at the 4th level
  nbsp:level3n         Non-breaking space at the 3rd level, thin non-breaking space at the 4th level
  nbsp:level4          Non-breaking space at the 4th level
  nbsp:level4n         Non-breaking space at the 4th level, thin non-breaking space at the 6th level
  nbsp:level4nl        Non-breaking space at the 4th level, thin non-breaking space at the 6th level (via Ctrl+Shift)
  nbsp:zwnj2           Zero-width non-joiner at the 2nd level
  nbsp:zwnj2zwj3       Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level
  nbsp:zwnj2zwj3nb4    Zero-width non-joiner at the 2nd level, zero-width joiner at the 3rd level, non-breaking space at the 4th level
  nbsp:zwnj2nb3        Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level
  nbsp:zwnj2nb3s       Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, nothing at the 4th level
  nbsp:zwnj2nb3zwj4    Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, zero-width joiner at the 4th level
  nbsp:zwnj2nb3nnb4    Zero-width non-joiner at the 2nd level, non-breaking space at the 3rd level, thin non-breaking space at the 4th level
  nbsp:zwnj3zwj4       Zero-width non-joiner at the 3rd level, zero-width joiner at the 4th level
  japan                Japanese keyboard options
  japan:kana_lock      Kana Lock key is locking
  japan:nicola_f_bs    NICOLA-F style Backspace
  japan:hztg_escape    Make Zenkaku Hankaku an additional Esc
  korean               Korean Hangul/Hanja keys
  korean:ralt_hangul   Make right Alt a Hangul key
  korean:rctrl_hangul  Make right Ctrl a Hangul key
  korean:ralt_hanja    Make right Alt a Hanja key
  korean:rctrl_hanja   Make right Ctrl a Hanja key
  esperanto            Esperanto letters with superscripts
  esperanto:qwerty     At the corresponding key in a QWERTY layout
  esperanto:dvorak     At the corresponding key in a Dvorak layout
  esperanto:colemak    At the corresponding key in a Colemak layout
  solaris              Old Solaris keycodes compatibility
  solaris:sun_compat   Sun key compatibility
  terminate            Key sequence to kill the X server
  terminate:ctrl_alt_bksp Ctrl+Alt+Backspace
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE xkbConfigRegistry SYSTEM "xkb.dtd">
<xkbConfigRegistry>
  <modelList/>
  <layoutList>
    <layout>
      <configItem popularity="exotic">
        <name>apl</name>
        <shortDescription>apl</shortDescription>
        <description>APL</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>dyalog</name>
            <shortDescription>dlg</shortDescription>
            <description>APL symbols (Dyalog APL)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sax</name>
            <shortDescription>sax</shortDescription>
            <description>APL symbols (SAX, Sharp APL for Unix)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>unified</name>
            <shortDescription>ufd</shortDescription>
            <description>APL symbols (unified)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>apl2</name>
            <shortDescription>apl2</shortDescription>
            <description>APL symbols (IBM APL2)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>aplplusII</name>
            <shortDescription>aplII</shortDescription>
            <description>APL symbols (Manugistics APL*PLUS II)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>aplx</name>
            <shortDescription>aplx</shortDescription>
            <description>APL symbols (APLX unified)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ca</name>
        <shortDescription>fr</shortDescription>
        <description>French (Canada)</description>
        <languageList>
          <iso639Id>fra</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>kut</name>
            <shortDescription>kut</shortDescription>
            <description>Kutenai</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>shs</name>
            <shortDescription>shs</shortDescription>
            <description>Secwepemctsin</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Multilingual (Canada, Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>de</name>
        <shortDescription>de</shortDescription>
        <description>German</description>
        <languageList>
          <iso639Id>ger</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>hu</name>
            <description>German (with Hungarian letters, no dead keys)</description>
            <languageList>
              <iso639Id>ger</iso639Id>
              <iso639Id>hun</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>pl</name>
            <description>Polish (Germany, no dead keys)</description>
            <languageList>
              <iso639Id>ger</iso639Id>
              <iso639Id>pol</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>German (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>adnw</name>
            <description>German (Aus der Neo-Welt)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>koy</name>
            <description>German (KOY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>bone</name>
            <description>German (Bone)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>bone_eszett_home</name>
            <description>German (Bone, eszett in the home row)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>neo_qwertz</name>
            <description>German (Neo, QWERTZ)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>neo_qwerty</name>
            <description>German (Neo, QWERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ru-recom</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Germany, recommended)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ru-translit</name>
            <!-- Keyboard indicator for Russian layouts -->
            <shortDescription>ru</shortDescription>
            <description>Russian (Germany, transliteration)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>lld</name>
            <shortDescription>de_lld</shortDescription>
            <description>German (Ladin)</description>
            <languageList>
              <iso639Id>ger</iso639Id>
              <iso639Id>lld</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>eg</name>
        <description>Coptic</description>
        <languageList>
          <iso639Id>cop</iso639Id>
          <iso639Id>egy</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem>
        <name>hu</name>
        <description>Hungarian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>oldhun</name>
            <shortDescription>oldhun</shortDescription>
            <description>Old Hungarian</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>oldhunlig</name>
            <shortDescription>oldhun(lig)</shortDescription>
            <description>Old Hungarian (for ligatures)</description>
          </configItem>
        </variant>

      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ir</name>
        <shortDescription>fa</shortDescription>
        <description>Persian</description>
        <languageList>
          <iso639Id>per</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>ave</name>
            <description>Avestan</description>
            <languageList>
              <iso639Id>ave</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>lt</name>
        <shortDescription>lt</shortDescription>
        <description>Lithuanian</description>
        <languageList>
          <iso639Id>lit</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>us_dvorak</name>
            <description>Lithuanian (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Lithuanian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>lv</name>
        <shortDescription>lv</shortDescription>
        <description>Latvian</description>
        <languageList>
          <iso639Id>lav</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>dvorak</name>
            <description>Latvian (Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ykeydvorak</name>
            <description>Latvian (Dvorak, with Y)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>minuskeydvorak</name>
            <description>Latvian (Dvorak, with minus)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>dvorakprogr</name>
            <description>Latvian (programmer Dvorak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ykeydvorakprogr</name>
            <description>Latvian (programmer Dvorak, with Y)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>minuskeydvorakprogr</name>
            <description>Latvian (programmer Dvorak, with minus)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>colemak</name>
            <description>Latvian (Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>apostrophecolemak</name>
            <description>Latvian (Colemak, with apostrophe)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Latvian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>us</name>
        <shortDescription>en</shortDescription>
        <description>English (US)</description>
        <languageList>
          <iso639Id>eng</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>intl-unicode</name>
            <description>English (US, intl., AltGr Unicode combining)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>alt-intl-unicode</name>
            <description>English (US, intl., AltGr Unicode combining, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ats</name>
            <description>Atsina</description>
            <!-- No ISO code in ISO639-2, only draft ISO693-3 -->
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>crd</name>
            <description>Coeur d'Alene Salish</description>
            <languageList>
              <iso639Id>crd</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>cz_sk_de</name>
            <description>Czech Slovak and German (US)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>cze</iso639Id>
              <iso639Id>slo</iso639Id>
              <iso639Id>ger</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>drix</name>
            <description>English (Drix)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>de_se_fi</name>
            <description>German, Swedish and Finnish (US)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>ger</iso639Id>
              <iso639Id>swe</iso639Id>
              <iso639Id>fin</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ibm238l</name>
            <description>English (US, IBM Arabic 238_L)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>English (US, Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx</name>
            <description>English (Carpalx)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-intl</name>
            <description>English (Carpalx, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-altgr-intl</name>
            <description>English (Carpalx, intl., with AltGr dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-full</name>
            <description>English (Carpalx, full optimization)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-full-intl</name>
            <description>English (Carpalx, full optimization, intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>carpalx-full-altgr-intl</name>
            <description>English (Carpalx, full optimization, intl., with AltGr dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>3l</name>
            <description>English (3l)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>3l-cros</name>
            <description>English (3l, Chromebook)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>3l-emacs</name>
            <description>English (3l, emacs)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>scn</name>
            <description>Sicilian (US keyboard)</description>
            <languageList>
              <iso639Id>eng</iso639Id>
              <iso639Id>ita</iso639Id>
              <iso639Id>scn</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>pl</name>
        <shortDescription>pl</shortDescription>
        <description>Polish</description>
        <languageList>
          <iso639Id>pol</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>intl</name>
            <description>Polish (intl., with dead keys)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>colemak</name>
            <description>Polish (Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Polish (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>glagolica</name>
            <description>Polish (Glagolica)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ro</name>
        <shortDescription>ro</shortDescription>
        <description>Romanian</description>
        <languageList>
          <iso639Id>rum</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>crh_dobruja</name>
            <shortDescription>crh</shortDescription>
            <description>Crimean Tatar (Dobruja Q)</description>
            <languageList>
              <iso639Id>crh</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ergonomic</name>
            <description>Romanian (ergonomic Touchtype)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Romanian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>rs</name>
        <shortDescription>sr</shortDescription>
        <description>Serbian</description>
        <languageList>
          <iso639Id>srp</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>combiningkeys</name>
            <description>Serbian (combining accents instead of dead keys)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ru</name>
        <shortDescription>ru</shortDescription>
        <description>Russian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>chu</name>
            <description>Church Slavonic</description>
            <languageList>
              <iso639Id>chu</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ruu</name>
            <shortDescription>ru</shortDescription>
            <description>Russian (with Ukrainian-Belorussian layout)</description>
            <languageList>
              <iso639Id>rus</iso639Id>
              <iso639Id>ukr</iso639Id>
              <iso639Id>bel</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>rulemak</name>
            <description>Russian (Rulemak, phonetic Colemak)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>phonetic_mac</name>
            <description>Russian (phonetic Macintosh)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Russian (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>unipunct</name>
            <description>Russian (with US punctuation)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>prxn</name>
            <shortDescription>ru</shortDescription>
            <description>Russian (Polyglot and Reactionary)</description>
            <countryList>
              <iso3166Id>RU</iso3166Id>
              <iso3166Id>RS</iso3166Id>
              <iso3166Id>BA</iso3166Id>
              <iso3166Id>ME</iso3166Id>
              <iso3166Id>MK</iso3166Id>
              <iso3166Id>BG</iso3166Id>
              <iso3166Id>MD</iso3166Id>
              <iso3166Id>UA</iso3166Id>
              <iso3166Id>BY</iso3166Id>
              <iso3166Id>KZ</iso3166Id>
              <iso3166Id>MN</iso3166Id>
              <iso3166Id>KG</iso3166Id>
              <iso3166Id>TJ</iso3166Id>
              <iso3166Id>UZ</iso3166Id>
              <iso3166Id>TM</iso3166Id>
              <iso3166Id>AZ</iso3166Id>
            </countryList>
            <languageList>
              <iso639Id>rus</iso639Id>
              <iso639Id>rus-petr1708</iso639Id>
              <iso639Id>ukr</iso639Id>
              <iso639Id>bel</iso639Id>
              <iso639Id>srp</iso639Id>
              <iso639Id>mkd</iso639Id>
              <iso639Id>bul</iso639Id>
              <iso639Id>chu</iso639Id>
              <iso639Id>rum-Cyrl</iso639Id>
              <iso639Id>kaz</iso639Id>
              <iso639Id>kir</iso639Id>
              <iso639Id>uzb</iso639Id>
              <iso639Id>bak</iso639Id>
              <iso639Id>aze</iso639Id>
              <iso639Id>tat</iso639Id>
              <iso639Id>uig</iso639Id>
              <iso639Id>kdr</iso639Id>
              <iso639Id>tyv</iso639Id>
              <iso639Id>kjh</iso639Id>
              <iso639Id>crh</iso639Id>
              <iso639Id>tgk</iso639Id>
              <iso639Id>abk</iso639Id>
              <iso639Id>sah</iso639Id>
              <iso639Id>mon</iso639Id>
              <iso639Id>kal</iso639Id>
              <iso639Id>sjd</iso639Id>
              <iso639Id>chv</iso639Id>
              <iso639Id>oss</iso639Id>
              <iso639Id>krl</iso639Id>
              <iso639Id>ale</iso639Id>
              <iso639Id>wbl</iso639Id>
              <iso639Id>kur</iso639Id>
              <iso639Id>niv</iso639Id>
              <iso639Id>dng</iso639Id>
              <iso639Id>kom</iso639Id>
              <iso639Id>udm</iso639Id>
              <iso639Id>sel</iso639Id>
              <iso639Id>ulc</iso639Id>
              <iso639Id>ude</iso639Id>
              <iso639Id>oac</iso639Id>
              <iso639Id>oaa</iso639Id>
              <iso639Id>gld</iso639Id>
              <iso639Id>eve</iso639Id>
              <iso639Id>evn</iso639Id>
              <iso639Id>kca</iso639Id>
              <iso639Id>itl</iso639Id>
              <iso639Id>yrk</iso639Id>
              <iso639Id>neg</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>am</name>
        <shortDescription>hy</shortDescription>
        <description>Armenian</description>
        <languageList>
          <iso639Id>hye</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>olpc-phonetic</name>
            <description>Armenian (OLPC, phonetic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>il</name>
        <shortDescription>he</shortDescription>
        <description>Hebrew</description>
        <languageList>
          <iso639Id>heb</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>biblicalSIL</name>
            <description>Hebrew (Biblical, SIL phonetic)</description>
            <languageList>
              <iso639Id>heb</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ara</name>
        <shortDescription>ar</shortDescription>
        <description>Arabic</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Arabic (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>basic_ext</name>
            <description>Arabic (Arabic numerals, extensions in the 4th level)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>basic_ext_digits</name>
            <description>Arabic (Eastern Arabic numerals, extensions in the 4th level)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>uga</name>
            <description>Ugaritic instead of Arabic</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>be</name>
        <shortDescription>be</shortDescription>
        <description>Belgian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Belgian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>br</name>
        <shortDescription>pt</shortDescription>
        <description>Portuguese (Brazil)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Portuguese (Brazil, Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>cz</name>
        <shortDescription>cs</shortDescription>
        <description>Czech</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Czech (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>prog</name>
            <description>Czech (programming)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>typo</name>
            <description>Czech (typographic)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>coder</name>
            <description>Czech (coder)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>prog_typo</name>
            <description>Czech (programming, typographic)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>dk</name>
        <shortDescription>da</shortDescription>
        <description>Danish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Danish (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>nl</name>
        <shortDescription>nl</shortDescription>
        <description>Dutch</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Dutch (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ee</name>
        <shortDescription>et</shortDescription>
        <description>Estonian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Estonian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>fi</name>
        <shortDescription>fi</shortDescription>
        <description>Finnish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Finnish (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>das</name>
            <description>Finnish (DAS)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>fidvorak</name>
            <description>Finnish (Dvorak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>fr</name>
        <shortDescription>fr</shortDescription>
        <description>French</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>French (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>us-alt</name>
            <description>French (US with dead keys, alt.)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>us-azerty</name>
            <description>French (US, AZERTY)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>gr</name>
        <shortDescription>gr</shortDescription>
        <description>Greek</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Greek (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>colemak</name>
            <description>Greek (Colemak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>it</name>
        <shortDescription>it</shortDescription>
        <description>Italian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Italian (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>lld</name>
            <shortDescription>it_lld</shortDescription>
            <description>Italian (Ladin)</description>
            <languageList>
              <iso639Id>it</iso639Id>
              <iso639Id>lld</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>jp</name>
        <shortDescription>ja</shortDescription>
        <description>Japanese</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Japanese (Sun Type 6)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type7</name>
            <description>Japanese (Sun Type 7, PC-compatible)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type7_suncompat</name>
            <description>Japanese (Sun Type 7, Sun-compatible)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>no</name>
        <shortDescription>no</shortDescription>
        <description>Norwegian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Norwegian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>pt</name>
        <shortDescription>pt</shortDescription>
        <description>Portuguese</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Portuguese (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>colemak</name>
            <description>Portuguese (Colemak)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>sk</name>
        <shortDescription>sk</shortDescription>
        <description>Slovak</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>acc</name>
            <description>Slovak (ACC layout, only accented letters)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Slovak (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>es</name>
        <shortDescription>es</shortDescription>
        <description>Spanish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Spanish (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>se</name>
        <shortDescription>sv</shortDescription>
        <description>Swedish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>dvorak_a5</name>
            <description>Swedish (Dvorak A5)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Swedish (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>ovd</name>
            <description>Elfdalian (Swedish, with combining ogonek)</description>
            <languageList>
              <iso639Id>ovd</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ch</name>
        <shortDescription>de</shortDescription>
        <description>German (Switzerland)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6_de</name>
            <description>German (Switzerland, Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6_fr</name>
            <description>French (Switzerland, Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>tr</name>
        <shortDescription>tr</shortDescription>
        <description>Turkish</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Turkish (Sun Type 6/7)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>otk</name>
            <description>Old Turkic</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>ua</name>
        <shortDescription>uk</shortDescription>
        <description>Ukrainian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Ukrainian (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>gb</name>
        <shortDescription>en</shortDescription>
        <description>English (UK)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>English (UK, Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>kr</name>
        <shortDescription>ko</shortDescription>
        <description>Korean</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>sun_type6</name>
            <description>Korean (Sun Type 6/7)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>vn</name>
        <!-- Keyboard indicator for Vietnamese layouts -->
        <shortDescription>vi</shortDescription>
        <description>Vietnamese</description>
        <languageList>
          <iso639Id>vie</iso639Id>
        </languageList>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>aderty</name>
            <description>Vietnamese (AÐERTY)</description>
          </configItem>
        </variant>
        <variant>
          <configItem popularity="exotic">
            <name>qderty</name>
            <description>Vietnamese (QĐERTY)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>eu</name>
        <!-- Keyboard indicator for European layouts -->
        <shortDescription>eu</shortDescription>
        <description>EurKEY (US)</description>
        <languageList>
          <iso639Id>cat</iso639Id>
          <iso639Id>dan</iso639Id>
          <iso639Id>eng</iso639Id>
          <iso639Id>est</iso639Id>
          <iso639Id>fao</iso639Id>
          <iso639Id>fin</iso639Id>
          <iso639Id>ger</iso639Id>
          <iso639Id>gre</iso639Id>
          <iso639Id>gsw</iso639Id>
          <iso639Id>ita</iso639Id>
          <iso639Id>lav</iso639Id>
          <iso639Id>lit</iso639Id>
          <iso639Id>nld</iso639Id>
          <iso639Id>nor</iso639Id>
          <iso639Id>por</iso639Id>
          <iso639Id>spa</iso639Id>
          <iso639Id>swe</iso639Id>
        </languageList>
      </configItem>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>cm</name>
        <shortDescription>cm</shortDescription>
        <description>English (Cameroon)</description>
      </configItem>
      <variantList>
        <variant>
          <configItem popularity="exotic">
            <name>mmuock</name>
            <description>Mmuock</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
    <layout>
      <configItem popularity="exotic">
        <name>trans</name>
        <!-- Keyboard layouts for transcription and transliteration systems -->
        <description>International Phonetic Alphabet</description>
      </configItem>
      <variantList/>
    </layout>
    <layout>
      <configItem>
        <name>in</name>
        <!-- Keyboard indicator for Indian layouts -->
        <shortDescription>in</shortDescription>
        <description>Indian</description>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>modi-kagapa</name>
            <shortDescription>mr</shortDescription>
            <description>Modi (KaGaPa phonetic)</description>
            <languageList>
              <iso639Id>mar</iso639Id>
            </languageList>
          </configItem>
        </variant>
        <variant>
          <configItem>
            <name>san-misc</name>
            <shortDescription>sas</shortDescription>
            <description>Sanskrit symbols</description>
            <languageList>
              <iso639Id>san</iso639Id>
            </languageList>
          </configItem>
        </variant>
      </variantList>
    </layout>
  </layoutList>
  <optionList>
    <group allowMultipleSelection="true">
      <!-- The key combination used to choose the 3rd (and 4th, together with Shift)
           level of symbols -->
      <configItem popularity="exotic">
        <name>lv3</name>
        <description>Key to choose the 3rd level</description>
      </configItem>
      <option>
        <configItem popularity="exotic">
          <name>lv3:4_switch_isolated</name>
          <description>Number key 4 when pressed in isolation</description>
        </configItem>
      </option>
      <option>
        <configItem popularity="exotic">
          <name>lv3:9_switch_isolated</name>
          <description>Number key 9 when pressed in isolation</description>
        </configItem>
      </option>
    </group>
    <group allowMultipleSelection="true">
      <!-- Tweaking the position of the "(" and ")" keys -->
      <configItem popularity="exotic">
        <name>parens</name>
        <description>Parentheses position</description>
      </configItem>
      <option>
        <configItem popularity="exotic">
          <name>parens:swap_brackets</name>
          <description>Swap with square brackets</description>
        </configItem>
      </option>
    </group>
  </optionList>
</xkbConfigRegistry>
default xkb_types "complete" {
    include "basic"
    include "mousekeys"
    include "pc"
    include "iso9995"
    include "level5"
    include "extra"
    include "numpad"
};
default partial xkb_types "default" {

    // Defines a type with a four-level shift, similar to the three-level
    // type used for iso9995, but it lets the Shift key behave "normally".

    virtual_modifiers LevelThree;

    type "FOUR_LEVEL" {
	modifiers = Shift+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };

    type "FOUR_LEVEL_ALPHABETIC" {
	modifiers = Shift+Lock+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[Lock]  = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level4;
	map[Lock+Shift+LevelThree] =  Level3;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };

    type "FOUR_LEVEL_SEMIALPHABETIC" {
	modifiers = Shift+Lock+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[Lock]  = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level3;
	map[Lock+Shift+LevelThree] = Level4;
	preserve[Lock+LevelThree] = Lock;
	preserve[Lock+Shift+LevelThree] = Lock;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };

    // A four-level keypad variant. The first two levels are controlled by
    // NumLock (with active shifting like in KEYPAD).  LevelThree overrides
    // this mode, with two additional shifted levels.
    type "FOUR_LEVEL_MIXED_KEYPAD" {
        modifiers = Shift+NumLock+LevelThree;
        map[None] = Level1;
        map[Shift+NumLock] = Level1;
        map[NumLock] = Level2;
        map[Shift] = Level2;
        map[LevelThree] = Level3;
        map[NumLock+LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Shift+NumLock+LevelThree] = Level4;
        level_name[Level1] = "Base";
        level_name[Level2] = "Number";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
    };

    // Base level, two shifted LevelThree levels, one Ctrl+Alt command level.
    type "FOUR_LEVEL_X" {
        modifiers = Shift+LevelThree+Control+Alt;
        map[None] = Level1;
        map[LevelThree] = Level2;
        map[Shift+LevelThree] = Level3;
        map[Control+Alt] = Level4;
        level_name[Level1] = "Base";
        level_name[Level2] = "Alt Base";
        level_name[Level3] = "Shift Alt";
        level_name[Level4] = "Ctrl+Alt";
    };

// A special type for keys used in the Serbian Latin Unicode keymap.
// It makes it possible to use all three forms of latin letters
// present in Unicode that are made up of two separate letters
// (forms like LJ, Lj, and lj; NJ, Nj, and nj; etcetera).

    type "SEPARATE_CAPS_AND_SHIFT_ALPHABETIC" {
        modifiers = Shift+Lock+LevelThree;
        map[None] = Level1;
        map[Shift] = Level2;
        map[Lock] = Level4;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Lock+LevelThree] =  Level3;
        map[Lock+Shift+LevelThree] = Level3;
        preserve[Lock]= Lock;
        preserve[Lock+LevelThree]= Lock;
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "AltGr Base";
        level_name[Level4] = "Shift AltGr";
    };

// A key type for the German ssharp (for example), which is capitalized as SS.
// CHARACTERISTICS:
// It is FOUR_LEVEL with the exception that the fifth level is mapped to the
// Lock modifier.  If other modifiers are used, the Lock state is ignored.
// DETAILS ABOUT GERMAN:
// The capital form of ssharp (called sharp s) only exists for completely
// capitalized text, not for words at the beginning of sentences nor for
// nouns (nouns in German normally start with a captial letter).
// The ssharp key, to the right of the zero key, takes this into account
// and has a questionmark mapped to Shift-ssharp since normally no capital
// version is needed.
// When typing with active CapsLock, this key type is needed to
// output two capital letters S because this is the only German key
// whose capital letter is not the same as the one typed with Shift.

    type "FOUR_LEVEL_PLUS_LOCK" {
        modifiers = Shift+Lock+LevelThree;
        map[None] = Level1;
        map[Shift] = Level2;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Lock]  = Level5;
        map[Lock+Shift] = Level2;
        map[Lock+LevelThree] = Level3;
        map[Lock+Shift+LevelThree] = Level4;
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "Lock";
    };
};

// This enables the four-level shifting also for the keypad.
partial xkb_types "keypad" {
    virtual_modifiers LevelThree;

    type "FOUR_LEVEL_KEYPAD" {
	modifiers = Shift+NumLock+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[NumLock] = Level2;
	map[Shift+NumLock] = Level1;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[NumLock+LevelThree] = Level4;
	map[Shift+NumLock+LevelThree] = Level3;
	level_name[Level1] = "Base";
	level_name[Level2] = "Number";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Alt Number";
    };
};
default partial xkb_types "default" {

    // A type that is used by Nokia devices and keyboards.

    virtual_modifiers LevelThree;

    type "PC_FN_LEVEL2" {
	modifiers = LevelThree;
	map[None] = Level1;
	map[LevelThree] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Fn";
    };

};
default partial xkb_types "Shift_Cancels_Caps" {

override type "TWO_LEVEL" {
    modifiers = Shift+Lock;
    map[Shift] = Level2;
    preserve[Lock]= Lock;
    level_name[Level1] = "Base";
    level_name[Level2] = "Shift";
};

};
default xkb_types "default" {
    include "basic"
    include "pc"
    include "iso9995"
    include "extra"
    include "numpad"
    include "level5"
    include "mousekeys"
};
default partial xkb_types "default" {

    // Some types that are necessary
    // for a full implementation of
    // a PC-compatible keyboard.

    virtual_modifiers Alt;
    virtual_modifiers LevelThree;
    virtual_modifiers LAlt;
    virtual_modifiers RAlt;
    virtual_modifiers RControl;
    virtual_modifiers LControl;

    type "PC_SUPER_LEVEL2" {
       modifiers = Mod4;
       map[None] = Level1;
       map[Mod4] = Level2;
       level_name[Level1] = "Base";
       level_name[Level2] = "Super";
    };

    type "PC_CONTROL_LEVEL2" {
	modifiers = Control;
	map[None] = Level1;
	map[Control] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Control";
    };

    type "PC_LCONTROL_LEVEL2" {
	modifiers = LControl;
	map[None] = Level1;
	map[LControl] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "LControl";
    };

    type "PC_RCONTROL_LEVEL2" {
	modifiers = RControl;
	map[None] = Level1;
	map[RControl] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "RControl";
    };

    type "PC_ALT_LEVEL2" {
	modifiers = Alt;
	map[None] = Level1;
	map[Alt] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Alt";
    };

    type "PC_LALT_LEVEL2" {
	modifiers = LAlt;
	map[None] = Level1;
	map[LAlt] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "LAlt";
    };

    type "PC_RALT_LEVEL2" {
	modifiers = RAlt;
	map[None] = Level1;
	map[RAlt] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "RAlt";
    };

    type "CTRL+ALT" {
        modifiers = Control+Alt+Shift+LevelThree;
        map[None] = Level1;
        map[Shift] = Level2;
        map[LevelThree] = Level3;
        map[Shift+LevelThree] = Level4;
        map[Control+Alt] = Level5;
        preserve[Shift] = Shift;
        preserve[Shift+LevelThree] = Shift;
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "Ctrl+Alt";
    };

   // Local eight level.
   // Needed when you want part of your layout eight-level but cannot use
   // LevelFive as modifier, as this will take over the right Ctrl by default
   // for the whole layout and is too invasive for the average four-level user.
   // Needed to fix bug #9529.
   // FIXME: Should really use RControl but it seems not to be enabled by
   // default and touching this requires a lot of testing.
   type "LOCAL_EIGHT_LEVEL" {
	modifiers = Shift+Lock+LevelThree+Control;

	map[None]       = Level1;
	map[Lock+Shift] = Level1;
	map[Shift] = Level2;
	map[Lock]  = Level2;

	map[LevelThree]            = Level3;
	map[Lock+Shift+LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree]  = Level4;

	map[Control]            = Level5;
	map[Lock+Shift+Control] = Level5;
	map[Shift+Control] = Level6;
	map[Lock+Control]  = Level6;

	map[LevelThree+Control]            = Level7;
	map[Lock+Shift+LevelThree+Control] = Level7;
	map[Shift+LevelThree+Control] = Level8;
	map[Lock+LevelThree+Control]  = Level8;

	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Level3";
	level_name[Level4] = "Shift Level3";
	level_name[Level5] = "Ctrl";
	level_name[Level6] = "Shift Ctrl";
	level_name[Level7] = "Level3 Ctrl";
	level_name[Level8] = "Shift Level3 Ctrl";
    };

};
default partial xkb_types "pc" {
    type "KEYPAD" {
	modifiers = Shift+NumLock;
	map[None] = Level1;
	map[Shift] = Level2;
	map[NumLock] = Level2;
	map[Shift+NumLock] = Level1;
	level_name[Level1] = "Base";
	level_name[Level2] = "Number";
    };
    include "extra(keypad)"
};

// On Mac keypads, level 1 and 2 are swapped.
partial xkb_types "mac" {
    type "KEYPAD" {
	modifiers = None;
	map[None] = Level2;
	level_name[Level2] = "Number";
    };
    include "extra(keypad)"
};

partial xkb_types "microsoft" {
    type "KEYPAD" {
        modifiers = Shift+NumLock;
        map[None] = Level1;
        preserve[Shift] = Shift;
        map[NumLock] = Level2;
        level_name[Level1] = "Base";
        level_name[Level2] = "Number";
    };
    include "extra(keypad)"
};

// Swiss-German style numeric keypad: Shift and NumLock operate as
// two independent modifiers; however, since we want shift state for
// the cursor keys, only three levels are used from the key mappings.
// Closest type is actually FOUR_LEVEL_X, but most numpad layouts use
// FOUR_LEVEL_MIXED_KEYPAD, so that's the one we are going to override.
partial xkb_types "shift3" {
    type "FOUR_LEVEL_MIXED_KEYPAD" {
        modifiers = Shift+NumLock+Control+Alt;

        // NumLock Off => navigate using cursor keys
        map[None] = Level1;

        // NumLock Off + Shift pressed => select using cursor keys
        preserve[Shift] = Shift;

        // NumLock On => decimal digits
        map[NumLock] = Level2;

        // NumLock On + Shift pressed => auxiliary symbols,
        // e.g. hexadecimal digits
        map[Shift+NumLock] = Level3;

        // Ctrl + Alt, regardless of NumLock and Shift => command keys
        map[Control+Alt] = Level4;

        // reverse map from levels to modifiers
        level_name[Level1] = "Base";
        level_name[Level2] = "NumLock";
        level_name[Level3] = "Shift+NumLock";
        level_name[Level4] = "Ctrl+Alt";
    };
};
// CapsLock uses internal capitalization rules,
// Shift "pauses" CapsLock.
partial xkb_types "internal" {
    type "ALPHABETIC" {
	modifiers = Shift+Lock;
	map[Shift] = Level2;
	preserve[Lock] = Lock;
	level_name[Level1] = "Base";
	level_name[Level2] = "Caps";
    };

    type "FOUR_LEVEL_ALPHABETIC" {
	modifiers = Shift+Lock+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	preserve[Lock] = Lock;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level3;
	map[Lock+Shift+LevelThree] = Level3;
	preserve[Lock+LevelThree] = Lock;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };

    type "FOUR_LEVEL_SEMIALPHABETIC" {
	modifiers = Shift+Lock+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	preserve[Lock] = Lock;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level3;
	map[Lock+Shift+LevelThree] = Level4;
	preserve[Lock+LevelThree] = Lock;
	preserve[Lock+Shift+LevelThree] = Lock;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };
};

// CapsLock uses internal capitalization rules,
// Shift does not cancel CapsLock.
partial xkb_types "internal_nocancel" {
    type "ALPHABETIC" {
	modifiers = Shift;
	map[Shift] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Caps";
    };

    type "FOUR_LEVEL_ALPHABETIC" {
	modifiers = Shift+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };

    type "FOUR_LEVEL_SEMIALPHABETIC" {
        // the same as FOUR_LEVEL_ALPHABETIC
	modifiers = Shift+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };
};

// CapsLock acts as Shift with locking,
// Shift "pauses" CapsLock.
partial xkb_types "shift" {
    type "ALPHABETIC" {
	modifiers = Shift+Lock;
	map[Shift] = Level2;
	map[Lock] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Caps";
    };

    type "FOUR_LEVEL_ALPHABETIC" {
	modifiers = Shift+Lock+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[Lock]  = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level4;
	map[Shift+Lock+LevelThree] =  Level3;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };

    type "FOUR_LEVEL_SEMIALPHABETIC" {
	modifiers = Shift+Lock+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[Lock]  = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level3;
	map[Lock+Shift+LevelThree] = Level4;
	preserve[Lock+LevelThree] = Lock;
	preserve[Lock+Shift+LevelThree] = Lock;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };
};

// CapsLock acts as Shift with locking,
// Shift does not cancel CapsLock.
partial xkb_types "shift_nocancel" {
    type "ALPHABETIC" {
	modifiers = Shift+Lock;
	map[Shift] = Level2;
	map[Lock] = Level2;
	map[Shift+Lock] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Caps";
    };

    type "FOUR_LEVEL_ALPHABETIC" {
	modifiers = Shift+Lock+LevelThree;
	map[None] =  Level1;
	map[Shift] = Level2;
	map[Lock] =  Level2;
	map[Shift+Lock] = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level4;
	map[Shift+Lock+LevelThree] = Level4;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };

    type "FOUR_LEVEL_SEMIALPHABETIC" {
	modifiers = Shift+Lock+LevelThree;
	map[None] =  Level1;
	map[Shift] = Level2;
	map[Lock] =  Level2;
	map[Shift+Lock] = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level3;
	map[Lock+Shift+LevelThree] = Level4;
	preserve[Lock+LevelThree] = Lock;
	preserve[Lock+Shift+LevelThree] = Lock;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
    };
};
default partial xkb_types "default" {
    virtual_modifiers Alt;

    type "SHIFT+ALT" {
	modifiers = Shift+Alt;
	map[Shift+Alt] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift+Alt";
    };
};
default xkb_types "basic" {

    // Fairly standard definitions for
    // three of the four required key types.
    // The fourth type "KEYPAD" is defined in the "numpad" file.

    virtual_modifiers NumLock;

    type "ONE_LEVEL" {
	modifiers = None;
	map[None] = Level1;
	level_name[Level1]= "Any";
    };

    type "TWO_LEVEL" {
	modifiers = Shift;
	map[Shift] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
    };

    type "ALPHABETIC" {
	modifiers = Shift+Lock;
	map[Shift] = Level2;
	map[Lock] = Level2;
	level_name[Level1] = "Base";
	level_name[Level2] = "Caps";
    };

};
The types component of a keyboard mapping specifies the key types that can be
associated with the various keyboard keys. The types component can optionally
contain also real modifier bindings and symbolic names for one or more virtual
modifiers.
default partial xkb_types "default" {

    // Defines a type with an eight-level shift, similar to the three-level
    // type used for iso9995, but it lets the Shift key behave "normally".

    virtual_modifiers LevelThree,ScrollLock,LevelFive;

    type "EIGHT_LEVEL" {
	modifiers = Shift+LevelThree+LevelFive;
	map[None] = Level1;
	map[Shift] = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[LevelFive] = Level5;
	map[Shift+LevelFive] = Level6;
	map[LevelThree+LevelFive] = Level7;
	map[Shift+LevelThree+LevelFive] = Level8;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
	level_name[Level5] = "X";
	level_name[Level6] = "X Shift";
	level_name[Level7] = "X Alt Base";
	level_name[Level8] = "X Shift Alt";
    };

    type "EIGHT_LEVEL_ALPHABETIC" {
	modifiers = Shift+Lock+LevelThree+LevelFive;
	map[None] = Level1;
	map[Shift] = Level2;
	map[Lock]  = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level4;
	map[Lock+Shift+LevelThree] = Level3;

	map[LevelFive] = Level5;
	map[Shift+LevelFive] = Level6;
	map[Lock+LevelFive]  = Level6;
	map[LevelThree+LevelFive] = Level7;
	map[Shift+LevelThree+LevelFive] = Level8;
	map[Lock+LevelThree+LevelFive] =  Level8;
	map[Lock+Shift+LevelThree+LevelFive] = Level7;

	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
	level_name[Level5] = "X";
	level_name[Level6] = "X Shift";
	level_name[Level7] = "X Alt Base";
	level_name[Level8] = "X Shift Alt";
    };

    type "EIGHT_LEVEL_LEVEL_FIVE_LOCK" {
      // Level5-Lock is implemented by using NumLock, because a real modifier
      // is required.

        modifiers = Shift + Lock + LevelThree + NumLock + LevelFive;

        map[None]                                    = Level1;
        map[Shift]                                   = Level2;
        map[LevelThree]                              = Level3;
        map[LevelThree+Shift]                        = Level4;

        map[LevelFive]                               = Level5;
        map[LevelFive+Shift]                         = Level6;
        map[LevelFive+LevelThree]                    = Level7;
        map[LevelFive+LevelThree+Shift]              = Level8;

        map[NumLock]                                 = Level5;
        map[NumLock+Shift]                           = Level6;
        map[NumLock+LevelThree]                      = Level7;
        map[NumLock+LevelThree+Shift]                = Level8;

        map[NumLock+LevelFive]                       = Level1;
        map[NumLock+LevelFive+Shift]                 = Level2;
        map[NumLock+LevelFive+LevelThree]            = Level3;
        map[NumLock+LevelFive+LevelThree+Shift]      = Level4;

        // Lock has no effect
        map[Lock]                                    = Level1;
        map[Lock+Shift]                              = Level2;
        map[Lock+LevelThree]                         = Level3;
        map[Lock+LevelThree+Shift]                   = Level4;

        map[Lock+LevelFive]                          = Level5;
        map[Lock+LevelFive+Shift]                    = Level6;
        map[Lock+LevelFive+LevelThree]               = Level7;
        map[Lock+LevelFive+LevelThree+Shift]         = Level8;

        map[Lock+NumLock]                            = Level5;
        map[Lock+NumLock+Shift]                      = Level6;
        map[Lock+NumLock+LevelThree]                 = Level7;
        map[Lock+NumLock+LevelThree+Shift]           = Level8;

        map[Lock+NumLock+LevelFive]                  = Level1;
        map[Lock+NumLock+LevelFive+Shift]            = Level2;
        map[Lock+NumLock+LevelFive+LevelThree]       = Level3;
        map[Lock+NumLock+LevelFive+LevelThree+Shift] = Level4;

        preserve[LevelFive+Shift] = Shift;
        preserve[NumLock+Shift] = Shift;
        preserve[Lock+LevelFive+Shift] = Shift;
        preserve[Lock+NumLock+Shift] = Shift;

        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "X";
        level_name[Level6] = "X Shift";
        level_name[Level7] = "X Alt Base";
        level_name[Level8] = "X Shift Alt";
    };

    type "EIGHT_LEVEL_ALPHABETIC_LEVEL_FIVE_LOCK" {
      // Level5-Lock is implemented by using NumLock, because a real modifier
      // is required.

        modifiers = Shift + Lock + LevelThree + NumLock + LevelFive;

        map[None]                                    = Level1;
        map[Shift]                                   = Level2;
        map[LevelThree]                              = Level3;
        map[LevelThree+Shift]                        = Level4;

        map[LevelFive]                               = Level5;
        map[LevelFive+Shift]                         = Level6;
        map[LevelFive+LevelThree]                    = Level7;
        map[LevelFive+LevelThree+Shift]              = Level8;

        map[NumLock]                                 = Level5;
        map[NumLock+Shift]                           = Level6;
        map[NumLock+LevelThree]                      = Level7;
        map[NumLock+LevelThree+Shift]                = Level8;

        map[NumLock+LevelFive]                       = Level1;
        map[NumLock+LevelFive+Shift]                 = Level2;
        map[NumLock+LevelFive+LevelThree]            = Level3;
        map[NumLock+LevelFive+LevelThree+Shift]      = Level4;

        // Lock interchanges Level1 and Level2
        map[Lock]                                    = Level2;
        map[Lock+Shift]                              = Level1;
        map[Lock+LevelThree]                         = Level3;
        map[Lock+LevelThree+Shift]                   = Level4;

        map[Lock+LevelFive]                          = Level5;
        map[Lock+LevelFive+Shift]                    = Level6;
        map[Lock+LevelFive+LevelThree]               = Level7;
        map[Lock+LevelFive+LevelThree+Shift]         = Level8;

        map[Lock+NumLock]                            = Level5;
        map[Lock+NumLock+Shift]                      = Level6;
        map[Lock+NumLock+LevelThree]                 = Level7;
        map[Lock+NumLock+LevelThree+Shift]           = Level8;

        map[Lock+NumLock+LevelFive]                  = Level2;
        map[Lock+NumLock+LevelFive+Shift]            = Level1;
        map[Lock+NumLock+LevelFive+LevelThree]       = Level4;
        map[Lock+NumLock+LevelFive+LevelThree+Shift] = Level3;

        preserve[LevelFive+Shift] = Shift;
        preserve[NumLock+Shift] = Shift;

        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Alt Base";
        level_name[Level4] = "Shift Alt";
        level_name[Level5] = "X";
        level_name[Level6] = "X Shift";
        level_name[Level7] = "X Alt Base";
        level_name[Level8] = "X Shift Alt";
    };

    type "EIGHT_LEVEL_SEMIALPHABETIC" {
	modifiers = Shift+Lock+LevelThree+LevelFive;
	map[None] = Level1;
	map[Shift] = Level2;
	map[Lock]  = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level4;
	map[Lock+LevelThree] =  Level3;
	map[Lock+Shift+LevelThree] = Level4;

	map[LevelFive] = Level5;
	map[Shift+LevelFive] = Level6;
	map[Lock+LevelFive]  = Level6;
	map[Lock+Shift+LevelFive]  = Level6;
	map[LevelThree+LevelFive] = Level7;
	map[Shift+LevelThree+LevelFive] = Level8;
	map[Lock+LevelThree+LevelFive] =  Level7;
	map[Lock+Shift+LevelThree+LevelFive] = Level8;

	preserve[Lock+LevelThree] = Lock;
	preserve[Lock+Shift+LevelThree] = Lock;
	preserve[Lock+LevelFive] = Lock;
	preserve[Lock+Shift+LevelFive] = Lock;
	preserve[Lock+LevelThree+LevelFive] = Lock;
	preserve[Lock+Shift+LevelThree+LevelFive] = Lock;

	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Alt Base";
	level_name[Level4] = "Shift Alt";
	level_name[Level5] = "X";
	level_name[Level6] = "X Shift";
	level_name[Level7] = "X Alt Base";
	level_name[Level8] = "X Shift Alt";
    };

};
default partial xkb_types "default" {

    // A key type which can be used to implement
    // an ISO9995-style level-three shift.

    virtual_modifiers LevelThree;

    type "THREE_LEVEL" {
	modifiers = Shift+LevelThree;
	map[None] = Level1;
	map[Shift] = Level2;
	map[LevelThree] = Level3;
	map[Shift+LevelThree] = Level3;
	level_name[Level1] = "Base";
	level_name[Level2] = "Shift";
	level_name[Level3] = "Level3";
    };
};
default xkb_geometry "teck227" {
    description="Truly Ergonomic Computer Keyboard Model 227 with wide Alt. (Standard US layout)";

    width=296;
    height=155;

    shape.cornerRadius=1;

    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "DBL" { { [36, 18] }, { [2,1], [ 34,16] } };
    shape "RSUP" {
	{ [ 2, 0], [ 12, 1] , [ 22, 0], [24, 18], [ 12, 19 ], [0, 18] },
	{ [ 4, 1], [ 12, 2] , [ 20, 1], [22, 16], [ 12, 17 ], [2, 16] }
    };
    shape "DEL" {
	{ [ 2, 0], [ 14, 1] , [ 26, 0], [28, 18], [ 14, 19 ], [0, 18] },
	{ [ 4, 1], [ 14, 2] , [ 24, 1], [26, 16], [ 14, 17 ], [2, 16] }
    };
    shape "AE11" {
	{ [ 2, 0], [ 16, 1] , [ 30, 0], [32, 18], [ 16, 19 ], [0, 18] },
	{ [ 4, 1], [ 16, 2] , [ 28, 1], [30, 16], [ 16, 17 ], [2, 16] }
    };
    shape "BKSP" {
	{ [ 2, 0], [ 18, 1] , [ 34, 0], [36, 18], [ 18, 19 ], [0, 18] },
	{ [ 4, 1], [ 18, 2] , [ 32, 1], [34, 16], [ 18, 17 ], [2, 16] }
    };
    shape "RTRN" {
	{ [ 2, 0], [ 20, 1] , [ 38, 0], [40, 18], [ 20, 19 ], [0, 18] },
	{ [ 4, 1], [ 20, 2] , [ 36, 1], [38, 16], [ 20, 17 ], [2, 16] }
    };

    section "Function" {
	left=17;
	top=3;
	row {
	    keys { <ESC>,
		   { <FK01>, 3 }, <FK02>, <FK03>, <FK04>,
		   { <FK05>, 3 }, <FK06>, <FK07>, <FK08>,
		   { <FK09>, 3 }, <FK10>, <FK11>, <FK12>,
                   { <DELE>, 3 }
	    };
	};
	overlay "FN" {
	    <ESC>=<HIRA>,
	    <FK01>=<I180>,
	    <FK02>=<I163>,
	    <FK03>=<I225>,
	    <FK04>=<I152>,
	    <FK05>=<I148>,
	    <FK06>=<I179>,
	    <FK07>=<I173>,
	    <FK08>=<I172>,
	    <FK09>=<I171>,
	    <FK10>=<I121>,
	    <FK11>=<I122>,
	    <FK12>=<I123>,
	    <DELE>=<I169>
	};
    };

    section "Special Keys" {
	top=22;
	left=122;
	row {
	    keys {
		<CAPS>, <FN>, <NMLK>
	    };
	};
	overlay "MISC" {
	    <CAPS>=<INS>,
	    <NMLK>=<PRSC>
	};
    };

    section "LeftNumbers" {
	top=32;
	left=12;
        angle=6;
	row {
	    keys {
		<TAB>, <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>, <AE05>
	    };
	};
    };

    section "CenterNumbers" {
	top=45;
	left=136;
	row {
	    keys {
		{ <RSUP>, "RSUP" }
	    };
	};
    };

    section "RightNumbers" {
	top=45;
	left=159;
        angle=-6;
	row {
	    keys {
		<AE06>, <AE07>, <AE08>, <AE09>, <AE10>, <AE12>, <RBSP>
	    };
	};
	overlay "KPAD" {
		<AE07>=<KP7>,
		<AE08>=<KP8>,
		<AE09>=<KP9>
	};
    };

    section "LeftAlphaQWER" {
	top=51;
	left=10;
	angle=6;
	row {
	    keys {
		<AD11>, <AD12>, <AD01>, <AD02>, <AD03>, <AD04>, <AD05>
	    };
	};
    };

    section "CenterAlphaQWER" {
	top=64;
	left=134;
	row {
	    keys {
		{ <DELE>, "DEL" }
	    };
	};
    };

    section "RightAlphaQWER" {
	top=64;
	left=161;
	angle=-6;
	row {
	    keys {
		<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, <AC11>, <BKSL>
	    };
	};
	overlay "KPAD" {
	    <AD07>=<KP4>,
	    <AD08>=<KP5>,
	    <AD09>=<KP6>,
	    <AD10>=<KPSU>,
	    <AC11>=<KPAD>
	};
    };

    section "LeftAlphaASDF" {
	top=52;
	left=10;
	angle=6;
	row {
	    top=18;
	    keys {
		{ <LCTL>, "DBL" }, <AC01>, <AC02>, <AC03>, <AC04>, <AC05>
	    };
	};
    };

    section "CenterAlphaASDF" {
	top=83;
	left=132;
	row {
	    keys {
		{ <AE11>, "AE11" }
	    };
	};
    };

    section "RightAlphaASDF" {
	top=65;
	left=161;
	angle=-6;
	row {
	    top=18;
	    keys {
		<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, { <RCTL>, "DBL" }
	    };
	};
	overlay "KPAD" {
	    <AC07>=<KP1>,
	    <AC08>=<KP2>,
	    <AC09>=<KP3>,
	    <AC10>=<KPMU>
	};
    };

    section "LeftAlphaZXCV" {
	top=89;
	left=6;
	angle=6;
	row {
	    keys {
		{ <LFSH>, "DBL" },
		<AB01>, <AB02>, <AB03>, <AB04>, <AB05>
	    };
	};
    };

    section "CenterAlphaZXCV" {
	top=102;
	left=130;
	row {
	    keys {
		{ <BKSP>, "BKSP" }
	    };
	};
    };

    section "RightAlphaZXCV" {
	top=102;
	left=165;
	angle=-6;
	row {
	    keys {
		<AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		{ <RTSH>, "DBL" }
	    };
	};
	overlay "KPAD" {
	    <AB07>=<KP0>,
	    <AB09>=<KPDL>,
	    <AB10>=<KPDV>
	};
    };

    section "LeftSpecial" {
	top=108;
	left=4;
	angle=6;
	row {
	    keys {
		{ <LALT>, "DBL" },
		{ <SPCE>, "DBL", 54 }
	    };
	};
    };

    section "CenterSpecial" {
	top=121;
	left=128;
	row {
	    keys {
		{ <RTRN>, "RTRN" }
	    };
	};
    };

    section "RightSpecial" {
	top=121;
	left=167;
	angle=-6;
	row {
	    keys {
		{ <SPCE>, "DBL" },
		{ <RALT>, "DBL", 54 }
	    };
	};
    };

    section "pgup, pgdown, home and end" {
	top=112;
	left=40;
	angle=6;
	row {
	    left=18;
	    keys {
		<PGUP>
	    };
	};
	row {
	    top=9;
	    keys {
		<HOME>, { <END>, 18 }
	    };
	};
	row {
	    top=18;
	    left=18;
	    keys {
		<PGDN>
	    };
	};
    };

    section "Arrows" {
	top=117;
	left=203;
	angle=-6;
	row {
	    left=18;
	    keys {
		 <UP>
	    };
	};
	row {
	    top=9;
	    keys {
		<LEFT>, { <RGHT>, 18 }
	    };
	};
	row {
	    top=18;
	    left=18;
	    keys {
		 <DOWN>
	    };
	};
    };
};

xkb_geometry "teck229" {
    description="Truly Ergonomic Computer Keyboard Model 229 with standard sized Alt and an additional Menu and Super key. (Standard US layout)";

    width=296;
    height=155;

    shape.cornerRadius=1;

    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "DBL" { { [36, 18] }, { [2,1], [ 34,16] } };
    shape "RSUP" {
	{ [ 2, 0], [ 12, 1] , [ 22, 0], [24, 18], [ 12, 19 ], [0, 18] },
	{ [ 4, 1], [ 12, 2] , [ 20, 1], [22, 16], [ 12, 17 ], [2, 16] }
    };
    shape "DEL" {
	{ [ 2, 0], [ 14, 1] , [ 26, 0], [28, 18], [ 14, 19 ], [0, 18] },
	{ [ 4, 1], [ 14, 2] , [ 24, 1], [26, 16], [ 14, 17 ], [2, 16] }
    };
    shape "AE11" {
	{ [ 2, 0], [ 16, 1] , [ 30, 0], [32, 18], [ 16, 19 ], [0, 18] },
	{ [ 4, 1], [ 16, 2] , [ 28, 1], [30, 16], [ 16, 17 ], [2, 16] }
    };
    shape "BKSP" {
	{ [ 2, 0], [ 18, 1] , [ 34, 0], [36, 18], [ 18, 19 ], [0, 18] },
	{ [ 4, 1], [ 18, 2] , [ 32, 1], [34, 16], [ 18, 17 ], [2, 16] }
    };
    shape "RTRN" {
	{ [ 2, 0], [ 20, 1] , [ 38, 0], [40, 18], [ 20, 19 ], [0, 18] },
	{ [ 4, 1], [ 20, 2] , [ 36, 1], [38, 16], [ 20, 17 ], [2, 16] }
    };

    section "Function" {
	left=17;
	top=3;
	row {
	    keys { <ESC>,
		   { <FK01>, 3 }, <FK02>, <FK03>, <FK04>,
		   { <FK05>, 3 }, <FK06>, <FK07>, <FK08>,
		   { <FK09>, 3 }, <FK10>, <FK11>, <FK12>,
                   { <DELE>, 3 }
	    };
	};
	overlay "FN" {
	    <ESC>=<HIRA>,
	    <FK01>=<I180>,
	    <FK02>=<I163>,
	    <FK03>=<I225>,
	    <FK04>=<I152>,
	    <FK05>=<I148>,
	    <FK06>=<I179>,
	    <FK07>=<I173>,
	    <FK08>=<I172>,
	    <FK09>=<I171>,
	    <FK10>=<I121>,
	    <FK11>=<I122>,
	    <FK12>=<I123>,
	    <DELE>=<I169>
	};
    };

    section "Special Keys" {
	top=22;
	left=122;
	row {
	    keys {
		<CAPS>, <FN>, <NMLK>
	    };
	};
	overlay "MISC" {
	    <CAPS>=<INS>,
	    <NMLK>=<PRSC>
	};
    };

    section "LeftNumbers" {
	top=32;
	left=12;
        angle=6;
	row {
	    keys {
		<TAB>, <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>, <AE05>
	    };
	};
    };

    section "CenterNumbers" {
	top=45;
	left=136;
	row {
	    keys {
		{ <RSUP>, "RSUP" }
	    };
	};
    };

    section "RightNumbers" {
	top=45;
	left=159;
        angle=-6;
	row {
	    keys {
		<AE06>, <AE07>, <AE08>, <AE09>, <AE10>, <AE12>, <RBSP>
	    };
	};
	overlay "KPAD" {
		<AE07>=<KP7>,
		<AE08>=<KP8>,
		<AE09>=<KP9>
	};
    };

    section "LeftAlphaQWER" {
	top=51;
	left=10;
	angle=6;
	row {
	    keys {
		<AD11>, <AD12>, <AD01>, <AD02>, <AD03>, <AD04>, <AD05>
	    };
	};
    };

    section "CenterAlphaQWER" {
	top=64;
	left=134;
	row {
	    keys {
		{ <DELE>, "DEL" }
	    };
	};
    };

    section "RightAlphaQWER" {
	top=64;
	left=161;
	angle=-6;
	row {
	    keys {
		<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, <AC11>, <BKSL>
	    };
	};
	overlay "KPAD" {
	    <AD07>=<KP4>,
	    <AD08>=<KP5>,
	    <AD09>=<KP6>,
	    <AD10>=<KPSU>,
	    <AC11>=<KPAD>
	};
    };

    section "LeftAlphaASDF" {
	top=52;
	left=10;
	angle=6;
	row {
	    top=18;
	    keys {
		{ <LCTL>, "DBL" }, <AC01>, <AC02>, <AC03>, <AC04>, <AC05>
	    };
	};
    };

    section "CenterAlphaASDF" {
	top=83;
	left=132;
	row {
	    keys {
		{ <AE11>, "AE11" }
	    };
	};
    };

    section "RightAlphaASDF" {
	top=65;
	left=161;
	angle=-6;
	row {
	    top=18;
	    keys {
		<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, { <RCTL>, "DBL" }
	    };
	};
	overlay "KPAD" {
	    <AC07>=<KP1>,
	    <AC08>=<KP2>,
	    <AC09>=<KP3>,
	    <AC10>=<KPMU>
	};
    };

    section "LeftAlphaZXCV" {
	top=89;
	left=6;
	angle=6;
	row {
	    keys {
		{ <LFSH>, "DBL" },
		<AB01>, <AB02>, <AB03>, <AB04>, <AB05>
	    };
	};
    };

    section "CenterAlphaZXCV" {
	top=102;
	left=130;
	row {
	    keys {
		{ <BKSP>, "BKSP" }
	    };
	};
    };

    section "RightAlphaZXCV" {
	top=102;
	left=165;
	angle=-6;
	row {
	    keys {
		<AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		{ <RTSH>, "DBL" }
	    };
	};
	overlay "KPAD" {
	    <AB07>=<KP0>,
	    <AB09>=<KPDL>,
	    <AB10>=<KPDV>
	};
    };

    section "LeftSpecial" {
	top=108;
	left=4;
	angle=6;
	row {
	    keys {
		<LSUP>, <LALT>,
		{ <SPCE>, "DBL", 54 }
	    };
	};
    };

    section "CenterSpecial" {
	top=121;
	left=128;
	row {
	    keys {
		{ <RTRN>, "RTRN" }
	    };
	};
    };

    section "RightSpecial" {
	top=121;
	left=167;
	angle=-6;
	row {
	    keys {
		{ <SPCE>, "DBL" },
		{ <RALT>, 54 }, <MENU>
	    };
	};
    };

    section "pgup, pgdown, home and end" {
	top=112;
	left=40;
	angle=6;
	row {
	    left=18;
	    keys {
		<PGUP>
	    };
	};
	row {
	    top=9;
	    keys {
		<HOME>, { <END>, 18 }
	    };
	};
	row {
	    top=18;
	    left=18;
	    keys {
		<PGDN>
	    };
	};
    };

    section "Arrows" {
	top=117;
	left=203;
	angle=-6;
	row {
	    left=18;
	    keys {
		 <UP>
	    };
	};
	row {
	    top=9;
	    keys {
		<LEFT>, { <RGHT>, 18 }
	    };
	};
	row {
	    top=18;
	    left=18;
	    keys {
		 <DOWN>
	    };
	};
    };
};
default xkb_geometry "STEPnote" {

    description= "Everex STEPnote";
    width= 281;
    height= 150;

    shape.cornerRadius= 1;

    shape "NORM" { 
	{ [17,17] },
	{ [ 2, 1], [ 15, 15 ] }
    };
    shape "NARR" {
	{ [  15, 17 ] },
	{ [   2,  1 ], [ 13, 15 ] }
    };
    shape "FKEY" {
	{ [ 15.1, 15.5 ] },
	{ [  1,  1 ], [ 14.1, 14.5 ] }
    };
    shape "ESC" {
	{ [  16.4, 15.5 ] },
	{ [   1, 1  ], [ 14.1, 14.5 ] }
    };
    shape "WIDE" {	// backspace, tab and Fn
	{ [  25, 17 ] },
	{ [   2,  1 ], [ 23, 15 ] }
    };
    shape "RTRN" {
	{ [  27.5, 17 ] },
	{ [  2,  1 ], [ 25.5, 15 ] }
    };
    shape "CAPS" {
	{ [  30, 17 ] },
	{ [   2,  1 ], [ 28, 15 ] }
    };
    shape "LFSH" {
	{ [  38.5, 17 ] },
	{ [  2,  1 ], [ 36.5, 15 ] }
    };
    shape "RTSH" {
	{ [  21, 17 ] },
	{ [   2,  1 ], [ 19, 15 ] }
    };
    shape "SPCE" {
	{ [  88.8, 17 ] },
	{ [  2,  1 ], [ 86.8, 15 ] }
    };
    shape "WELL" { 
	{ [ 269, 105 ] }
    };
    shape "LED" {
	cornerRadius= 1.5,
	{ [ 3, 10 ] }
    };

    section.left= 6;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  0.5;

    key.color= "grey20";
    labelColor= "white";
    baseColor= "grey20";

    indicator.top= 20;
    indicator.shape= "LED";
    indicator.onColor= "green";
    indicator.offColor= "green30";

    indicator "Power" 		{ left= 40; };
    indicator "Battery" 	{ left=101; };
    indicator "Suspend" 	{ left=112; };
    indicator "HardDrive" 	{ left=123; };
    indicator "Floppy" 		{ left=134; };
    indicator "KeyPad" 		{ left=145; };
    indicator "Num Lock" 	{ left=156; };
    indicator "Caps Lock" 	{ left=167; };
    indicator "Scroll Lock"	{ left=178; };

    solid "KeyWell" {
	top= 35;
	left= 6;
	shape= "WELL";
	color= "grey10";
    };
    section "Whole" {
	top= 35;
	row {
	    top= 0.5;
	    key.color= "grey30";
	    key.shape= "FKEY";
	    keys { 
		{ <ESC>, "ESC" },
		<FK01>, <FK02>, <FK03>, <FK04>, <FK05>, <FK06>,
		<FK07>, <FK08>, <FK09>, <FK10>, <FK11>, <FK12>,
		<NMLK>, <PRSC>, <SCLK>, <PAUS>
	    };
	};
	row {
	    top= 16.5;
	    keys { 
		{ <TLDE>, "NARR" },
		<AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>,
		<AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>,
		{ <BKSP>, shape="WIDE", color="grey30" }, 
		{ <HOME>, shape="NARR", color="grey30" }
	    };
	};
	row {
	    top= 34;
	    keys { 
	    	{  <TAB>, shape="WIDE", color="grey30" },
		<AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>,
		<AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>,
		{ <BKSL>, "NARR" }, 
		{ <PGUP>, shape="NARR", color="grey30" }
	    };
	};
	row {
	    top= 51.5;
	    keys { 
		{ <CAPS>, shape="CAPS", color="grey30" },
		<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		<AC11>, 
		{ <RTRN>, shape="RTRN", color="grey30" }, 
		{ <PGDN>, shape="NARR", color="grey30" }
	    };
	};
	row {
	    top= 69;
	    keys { 
		{ <LFSH>, shape="LFSH", color="grey30" },
		<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		{ <RTSH>, shape="RTSH", color="grey30" }, 
		{   <UP>, shape="NARR", color="grey30" },
		{  <END>, shape="NARR", color="grey30" }
	    };
	};
	row {
	    top= 86.5;
	    key.color= "grey30";
	    keys { 
		{ <FUNC>, "WIDE" }, 
		<LCTL>, <LALT>,
		{ <SPCE>, shape="SPCE", 18, color="grey20" },
		<RALT>,  <INS>, <DELE>,
		{ <LEFT>, "NARR" }, { <DOWN>, "NARR" },
		{ <RGHT>, "NARR" }
	    };
	};
	solid "FakeKey" {
	    top= 86.5;
	    left= 62.1;
	    shape= "NORM";
	    color= "grey20";
	};
	overlay "KPAD" {
	    <AE07>=<KP7>,  <AE08>=<KP8>, <AE09>=<KP9>,  <AE10>=<KPMU>,
	    <AD07>=<KP4>,  <AD08>=<KP5>, <AD09>=<KP6>,  <AD10>=<KPSU>,
	    <AC07>=<KP1>,  <AC08>=<KP2>, <AC09>=<KP3>,  <AC10>=<KPAD>,
	    <AB07>=<KP0>,                <AB09>=<KPDL>, <AB10>=<KPSL>
	};
    }; // End of "Whole" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};
default xkb_geometry "XP5" {

    description= "WinBook XP5";
    width= 281;
    height= 180;

    shape.cornerRadius= 1;

    shape "NORM" { 
	{ [17,17] },
	{ [ 2, 1], [ 15, 15 ] }
    };
    shape "FKEY" {
	{ [ 15, 10 ] },
	{ [  1,  0 ], [ 14, 9.5 ] }
    };
    shape "ONE" {
	{ [ 28, 17 ] },
	{ [ 11, 0 ], [ 28, 17 ] },
	{ [ 13, 1 ], [ 26, 15 ] }
    };
    shape "WIDE" {	// backspace, caps lock, ctrl alt ?
	{ [  24.5, 17 ] },
	{ [   2,  1 ], [ 22.5, 15 ] }
    };
    shape "WIDR" { // backslash, left shift
	{ [ 35, 17 ] },
	{ [ 2, 1 ], [ 33, 15 ] }
    };
    shape "RTRN" {
	{ [  45, 17 ] },
	{ [  2,  1 ], [ 43, 15 ] }
    };
    shape "SPCE" {
	{ [  90, 17 ] },
	{ [  2,  1 ], [ 88, 15 ] }
    };
    shape "STIK" {
	cornerRadius= 4,
	{ [  8,  8 ] }
    };
    shape "BTN" {
	{ [ 31, 6 ] }
    };

    section.left= 2;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  0.5;

    key.color= "grey10";
    labelColor= "white";
    baseColor= "grey20";

    section "Whole" {
	top= 10;
	row {
	    top= 11; 
	    key.shape= "FKEY";
	    keys { 
	    	<ESC>,  
	    	<FK01>, <FK02>, <FK03>, <FK04>, <FK05>, <FK06>,
		<FK07>, <FK08>, <FK09>, <FK10>, <FK11>, <FK12>,
		<PAUS>, <HOME>, <END>, <PGUP>
	    };
	};
	row {
	    top= 22;
	    keys { 
	    	{ <AEO1>, "ONE" },
		<AE02>, <AE03>, <AE04>, <AE05>, <AE06>,
		<AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>,
		{ <BKSP>, shape="WIDE" }, 
		<PGDN>
	    };
	};
	row {
	    top= 40;
	    keys { 
	    	<TAB>, <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>,
		<AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>,
		{ <BKSL>, "WIDR" }
	    };
	};
	row {
	    top= 58;
	    keys { { <CAPS>, shape="WIDE" },
		<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		<AC11>, 
		{ <RTRN>, shape="RTRN" }
	    };
	};
	row {
	    top= 76;
	    keys { 
		{ <LFSH>, shape="WIDR" },
		<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		<RTSH>, <UP>, <NMLK> 
	    };
	};
	row {
	    top= 94;
	    keys { 
		{ <LCTL>, "WIDE" }, <FUNC>, { <LALT>, "WIDE" }, 
		<TLDE>, { <SPCE>, shape="SPCE" }, <INS>, <DELE>, 
		<LEFT>, <DOWN>, <RGHT>
	    };
	};
	overlay "KPAD" {
	    <AE07>=<KP7>,  <AE08>=<KP8>, <AE09>=<KP9>,  <AE10>=<KPMU>,
	    <AD07>=<KP4>,  <AD08>=<KP5>, <AD09>=<KP6>,  <AD10>=<KPSU>,
	    <AC07>=<KP1>,  <AC08>=<KP2>, <AC09>=<KP3>,  <AC10>=<KPAD>,
	    <AB07>=<KP0>,                <AB09>=<KPDL>, <AB10>=<KPSL>
	};
    }; // End of "Whole" section

    solid "STIK" {
	color= "red";
	shape= "STIK";
	top= 81;
	left= 112;
    };

    solid "BTN1" {
    	color= "red";
	shape= "BTN";
	top= 137;
	left= 93;
    };

    solid "BTN2" {
	color= "red";
	shape= "BTN";
	top= 137;
	left= 127;
    };

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
default xkb_geometry "dell101" {

    description= "Dell 101";
    width= 470;
    height= 210;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "BKSP" { { [ 38,18] }, { [2,1], [ 36,16] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "BKSL" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "RTRN" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "CAPS" { { [ 33,18] }, { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,16] } };
    shape "MODK" { { [ 27,18] }, { [2,1], [ 25,16] } };
    shape "SPCE" { { [133,18] }, { [2,1], [131,16] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,16] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,35] } };

    shape "LEDS" { cornerRadius= 0, { [ 75 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  52;
	left= 377;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 67;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 382; };
    indicator "Caps Lock"    { left= 407; };
    indicator "Scroll Lock"  { left= 433; };
    text.top= 55;
    text.color= "black";
    text "NumLockLabel"		{ left= 378; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 403; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 428; text="Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 52;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 20 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 91;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LCTL>, { <LALT>, 21 },
		   { <SPCE>, "SPCE", color="white" },
		   <RALT>, { <RCTL>, 21 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 91;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 91;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "default" geometry


xkb_geometry "dell65" {
};

xkb_geometry "dell65x" {

    description= "Dell 101";
    width= 470;
    height= 210;
    color="grey10";

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "BKSP" { { [ 38,18] }, { [2,1], [ 36,16] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "BKSL" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "RTRN" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "CAPS" { { [ 33,18] }, { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,16] } };
    shape "MODK" { { [ 27,18] }, { [2,1], [ 25,16] } };
    shape "SPCE" { { [133,18] }, { [2,1], [131,16] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,16] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,35] } };

    shape "LEDS" { cornerRadius= 0, { [ 75 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  52;
	left= 377;
	color= "grey10";
    };

    shape "BACKGROUND"  { cornerRadius=5, { [  470,  210 ] } };
    solid "Background" {
	shape= "BACKGROUND";
	top=  0;
	left= 0;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 67;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 382; };
    indicator "Caps Lock"    { left= 407; };
    indicator "Scroll Lock"  { left= 433; };
    text.top= 55;
    text.color= "black";
    text "NumLockLabel"		{ left= 378; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 403; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 428; text="Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 52;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 20 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 91;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LCTL>, { <LALT>, 21 },
		   { <SPCE>, "SPCE", color="white" },
		   <RALT>, { <RCTL>, 21 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 91;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 91;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

};


//
// Dell Precision M65 laptop
//

xkb_geometry "dellm65" {

    description= "Dell Precision M65 laptop";
    width= 308;
    height= 152;
    baseColor = "grey20";
    labelColor = "white";

    shape "BACKGROUND"  { cornerRadius = 3, { [  308,  152 ] } };
    shape "BACKGROUND2" { cornerRadius = 2, { [  7, 22 ], 
                                              [ 171, 22 ],
                                              [ 171, 10 ],
                                              [ 301, 10 ],
                                              [ 301, 148 ],
                                              [ 244, 148 ],
                                              [ 244, 132 ],
                                              [   7, 132] } }; 
    solid "Background" {
	shape = "BACKGROUND";
	top = 0;
	left = 0;
	color = "grey20";
    };
    solid "Background2" {
	shape = "BACKGROUND2";
	top = 0;
	left = 0;
	color = "black";
    };

    shape "LEDS" { cornerRadius = 4, { [ 26, 8 ] } };
    shape "LED" { cornerRadius = 0, { [ 4, 4 ] } };
    solid "LedPanel" {
	shape = "LEDS";
	top = 8;
	left = 69;
	color = "grey20";
    };

    indicator.onColor= "green";
    indicator.offColor= "gray20";
    indicator.top= 10;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 72; };
    indicator "Caps Lock"    { left= 80; };
    indicator "Scroll Lock"  { left= 88; };

    shape "MEDIA" { cornerRadius = 5, { [ 2, 2], [ 12, 12 ] } };
    shape "POWER" { cornerRadius = 7, { [ 14, 14 ] } };

    section "Media" {
        top = 5;
        left = 102;
        width = 60;
        height = 14;
        key.color="grey30";
        key.shape = "MEDIA";
        row {
           top = 0;
           keys {
             <I2E>, <I30>, <I20>, { <I04>, shape = "POWER", gap = 3 }
           };
        };
    };


    shape "FKEY" { cornerRadius = 1, { [ 18, 12 ] }, { [ 1, 1 ], [ 17, 10 ] } };

    section "Function" {
       top = 12;
       left = 8;
       width = 290;
       height = 24;
       key.color = "grey80";
       key.shape = "FKEY";
       key.gap = 0;
       row {
	    top = 0;
            keys {      { <MENU>, 165 }, <PRSC>, <NMLK>, <PAUS>, 
                        { <INS>, 1 },  <HOME>, <PGUP> };
       };
       row {
	    top = 12;
            keys { <ESC>, { <FK01>, 1 }, <FK02>, <FK03>, <FK04>, 
                          { <FK05>, 1 }, <FK06>, <FK07>, <FK08>,
                          { <FK09>, 1 }, <FK10>, <FK11>, <FK12>,
                          { <DELE>,  1 }, <END>, <PGDN> };
       };
   };

   shape "AKEY" { cornerRadius = 1, { [ 19, 19 ] }, { [ 2, 1 ], [ 17, 15 ] } };
   shape "BKSP" { cornerRadius = 1, { [ 44, 19 ] }, { [ 2, 1 ], [ 42, 15 ] } };
   shape "TABK" { cornerRadius = 1, { [ 31, 19 ] }, { [ 2, 1 ], [ 29, 15 ] } };
   shape "BKSL" { cornerRadius = 1, { [ 31, 19 ] }, { [ 2, 1 ], [ 29, 15 ] } };
   shape "CAPS" { cornerRadius = 1, { [ 34, 19 ] }, { [ 2, 1 ], [ 32, 15 ] } };
   shape "RTRN" { cornerRadius = 1, { [ 47, 19 ] }, { [ 2, 1 ], [ 45, 15 ] } };
   shape "LFSH" { cornerRadius = 1, { [ 44, 19 ] }, { [ 2, 1 ], [ 42, 15 ] } };
   shape "RTSH" { cornerRadius = 1, { [ 56, 19 ] }, { [ 2, 1 ], [ 54, 15 ] } };
   shape "LCTL" { cornerRadius = 1, { [ 31, 19 ] }, { [ 2, 1 ], [ 29, 15 ] } };
   shape "LALT" { cornerRadius = 1, { [ 25, 19 ] }, { [ 2, 1 ], [ 23, 15 ] } };
   shape "RCTL" { cornerRadius = 1, { [ 25, 19 ] }, { [ 2, 1 ], [ 23, 15 ] } };
   shape "SPCE" { cornerRadius = 1, { [ 96, 19 ] }, { [ 2, 1 ], [ 94, 15 ] } };
   

   section "Alpha" {
       top = 36;
       left = 8;
       width = 290;
       height = 21;
       key.color = "grey80";
       key.shape = "AKEY";
       key.gap = 0;
       row {
	    top = 1;
            keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, { <BKSP>, 1, "BKSP" } };
	};
       row {
	    top = 20;
            keys { { <TAB>, "TABK" },
		   { <AD01>, 1 }, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, 1, "BKSL" } };
	};
       row {
	    top = 39;
            keys { { <CAPS>, "CAPS" },
		   { <AC01>, 1 }, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, 1, "RTRN" } };
	};
       row {
	    top = 58;
            keys { { <LFSH>, "LFSH" },
		   { <AB01>, 1 }, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		   { <RTSH>, 1, "RTSH" } };
	};
       row {
           top = 77;
           keys { { <LCTL>, "LCTL" }, { <LWIN>, 20 }, { <LALT>, "LALT" }, 
                  { <SPCE>, "SPCE" }, <RALT>, { <RCTL>, "RCTL" } };
	};
   };

   shape "SKEY" { cornerRadius = 1, { [ 18, 17 ] }, { [ 2, 1 ], [ 16, 13 ] } };
   section "Arrows" {
        top = 113;
        left = 243;
        width = 54;
        height = 36;
        
       key.color = "grey80";
        key.shape = "SKEY";
        row {
           top = 0;
           left = 20;

           keys { <UP> };
        };
  
        row {
            top = 17;
            left = 2;

            keys { <LEFT>, <DOWN>, <RGHT> };
        };
   };

  shape "STIK" { cornerRadius = 4, { [ 7, 7 ] } };

  solid "STIK" {
      priority = 255;
      color = "blue";
      shape = "STIK";
      top = 90; 
      left = 135;
  };
};
 
xkb_geometry "latitude" {
	description="Dell Latitude";
	width=304.2; height=219.1;

	baseColor="grey"; labelColor="white";

	alias <AC00> =<CAPS>;
	alias <AA00> =<LCTL>;

	shape "EXTERNAL" {corner=3,
		{[0,0], [302,0], [302,154], [174,154], [174,198], [166,216], [107,216], [100,198], [100,154], [0,154]}};
	solid "external" {shape="EXTERNAL"; top=1.1; left=1.1; color="grey10"; priority=10;};

	shape "INTERNAL" {corner=3,
		{[0,13], [162.2,13], [162.2,0], [286,0], [286,138], [230,138], [230,124], [163,124], [163,138], [96,138], [96,124], [0,124]}};
	solid "internal" {shape="INTERNAL"; top=7; left=8.5; color="black"; priority=20;};

	shape "TOUCHPAD" {corner=2, {[68,40]}};
	solid "touchpad" {shape="TOUCHPAD"; top=153; left=104; color="grey20"; priority=20;};

	shape "TOUCHPADBUTTONS" {corner=1,
		{[0,0], [33.5,0], [33.5,16], [6,16]},
		{[34.5,0], [68,0], [61, 16], [34.5,16]}};
	solid "touchleft" {shape="TOUCHPADBUTTONS"; top=198; left=104; color="grey20"; priority=20;};

	shape "NIPPLE" {corner=3, {[7.5,7.5]}};
	solid "nipple" {shape="NIPPLE"; top=87; left=134; color="blue"; priority=200;};
	shape "NIPPLEBUTTONS" {corner=2, {[32.5,13]}, {[33.5,0],[66,13]}};
	solid "nipplebuttons" {shape="NIPPLEBUTTONS"; top=131; left=105; color="grey20"; priority=20;};

	shape "FILLINGS" {corner=1.5, {[19,15]}, {[38,0],[55,15]}};
	solid "fillings" {shape="FILLINGS"; top=112; left=238; color="grey"; priority=200;};

	shape "FUNC" {corner=1.5, {[16.3,12]}, {[2,0.5], [14,10]}};
	shape "ESC" {corner=1.5, {[18,12]}, {[2,0.5], [16,10]}};
	shape "BKSP" {corner=1.5, {[36.5,18]}, {[3,0.5], [33.5,14]}};

	section "Function" {key.color="grey"; priority=100; top=9; left=10; width=290; height=28;
	row {top=0; left=161.1; keys {{<MENU>,"FUNC",1.1}, {<PRSC>,"FUNC",1.1}, {<NMLK>,"FUNC",1.1},
		{<PAUS>,"FUNC",1.1}, {<INS>,"FUNC",2.5}, {<HOME>,"FUNC",1.1}, {<PGUP>,"FUNC",1.1}};};
	row {top=12.5; left=0; keys {{<ESC>,"ESC",0},
		{<FK01>,"FUNC",2.7}, {<FK02>,"FUNC",1.1}, {<FK03>,"FUNC",1.1}, {<FK04>,"FUNC",1.1},
		{<FK05>,"FUNC",2.5}, {<FK06>,"FUNC",1.1}, {<FK07>,"FUNC",1.1}, {<FK08>,"FUNC",1.1},
		{<FK09>,"FUNC",2.5}, {<FK10>,"FUNC",1.1}, {<FK11>,"FUNC",1.1}, {<FK12>,"FUNC",1.1},
		{<DELE>,"FUNC",2.5}, {<END>, "FUNC",1.1}, {<PGDN>,"FUNC",1.1}};};
	}; // End of "Function" section

	shape "NORM" {corner=1.5, {[18,18]}, {[3,0.5], [14.8,14]}};
	shape "TABK" {corner=1.5, {[28,18]}, {[3,0.5], [25,14]}};
	shape "CAPS" {corner=1.5, {[32,18]}, {[3,0.5], [22,14]}};
	shape "LFSH" {corner=1.5, {[23,18]}, {[3,0.5], [20,14]}};
	shape "RTSH" {corner=1.5, {[50,18]}, {[3,1], [47,14]}};
	shape "RTRN" {corner=1.5, {[0,0],[26.5,0],[26.5,37],[4,37],[4,18],[0,18]},
		{[3,0.5], [23.5,0.5], [23.5,33], [7,33], [7,14], [3,14]}};
	shape "SPCE" {corner=1.5,{[95,18]}, {[3,0.5],[92,14]}};
	shape "LCTL" {corner=1.5, {[27,18]}, {[3,0.5],[24,14]}};
	shape "LALT" {corner=1.5, {[22,18]}, {[3,0.5],[19,14]}};
	shape "WIN" {corner=1.5, {[18,18]}, {[3,0.5],[15,14]}};

	section "Alpha" {key.color="grey"; priority=100; top=36; left=10; width=290; height=18;
	row {top=0; left=0; keys {{<TLDE>, "NORM", 0}, {<AE01>, "NORM", 1}, {<AE02>, "NORM", 1}, {<AE03>, "NORM", 1},
		{<AE04>, "NORM", 1}, {<AE05>, "NORM", 1}, {<AE06>, "NORM", 1}, {<AE07>, "NORM", 1}, {<AE08>, "NORM", 1},
		{<AE09>, "NORM", 1}, {<AE10>, "NORM", 1}, {<AE11>, "NORM", 1}, {<AE12>, "NORM", 1}, {<BKSP>, "BKSP", 1}};};
	row {top=19; left=0; keys {{<TAB>, "TABK", 0}, {<AD01>, "NORM", 1}, {<AD02>, "NORM", 1}, {<AD03>, "NORM", 1},
		{<AD04>, "NORM", 1}, {<AD05>, "NORM", 1}, {<AD06>, "NORM", 1}, {<AD07>, "NORM", 1}, {<AD08>, "NORM", 1},
		{<AD09>, "NORM", 1}, {<AD10>, "NORM", 1}, {<AD11>, "NORM", 1}, {<AD12>, "NORM", 1}, {<RTRN>, "RTRN", 1}};};
	row {top=38; left=0; keys {{<CAPS>, "CAPS", 0}, {<AC01>, "NORM", 1}, {<AC02>, "NORM", 1}, {<AC03>, "NORM", 1},
		{<AC04>, "NORM", 1}, {<AC05>, "NORM", 1}, {<AC06>, "NORM", 1}, {<AC07>, "NORM", 1}, {<AC08>, "NORM", 1}, 
		{<AC09>, "NORM", 1}, {<AC10>, "NORM", 1}, {<AC11>, "NORM", 1}, {<AC12>, "NORM", 1}};};
	// TODO There's a weird <> key here, check it out:
	row {top=57; left=0; keys {{<LFSH>, "LFSH", 0}, {<AB01>, "NORM", 1}, {<AB02>, "NORM", 1}, {<AB03>, "NORM", 1},
		{<AB04>, "NORM", 1}, {<AB05>, "NORM", 1}, {<AB06>, "NORM", 1}, {<AB07>, "NORM", 1}, {<AB08>, "NORM", 1},
		{<AB09>, "NORM", 1}, {<AB10>, "NORM", 1}, {<AB11>, "NORM", 1}, {<RTSH>, "RTSH", 1}};};
	row {top=76; left=0; keys {{<LCTL>, "LCTL", 0}, {<FN>, "WIN", 1},{<LWIN>, "WIN", 1}, {<LALT>, "LALT", 1},
		{<SPCE>, "SPCE", 1}, {<RALT>, "WIN", 1},{<RCTL>, "LALT", 1}};};
	}; // End of "Alpha" section

	shape "ARROW" {corner=1.5, {[17,15]}, {[2,0.5],[15,13]}};
	section "Arrows" {key.color="grey"; priority=110; top=112; left=240; width=43; height=31;
		row {top=0; left=18; keys {{<UP>, "ARROW", 0}};};	
		row {top=16; left=0; keys {{<LEFT>, "ARROW", 0}, {<DOWN>, "ARROW", 1}, {<RGHT>, "ARROW", 1}};};
	}; // End of "Arrows" section

	shape "LEDS" {corner=3, {[25,7]}};
	solid "leds" {shape="LEDS"; top=5.7; left=69; color="grey"; priority=10;};
	shape "LED" {corner=0, {[0,1.5], [3,4.5]}, {[0.5,1.5], [1,0] , [2,0], [2.5,1.5]}};
	indicator.onColor="green";
	indicator.offColor="grey";
	indicator.top=7;
	indicator.shape="LED"; 
	indicator.priority=200;
	indicator "Num Lock" {left=72;};
	indicator "Caps Lock" {left=80;};
	indicator "Scroll Lock" {left=88;};

	text "LATITUDE" {left=10; top=7; text="L A T I T U D E | D620";};

	shape "ROUND" {corner=5, {[10,10]}};
	shape "POWER" {corner=7, {[15,15]}};
	section "Topbuttons" {key.color="grey"; priority=110; top=2; left=100;
		row {top=2; left=0; keys {{<VLUP>, "ROUND", 0}, {<VLDN>, "ROUND", 3}, {<MUTE>, "ROUND", 3}};};	
		row {top=0; left=45; keys {{<POWR>, "POWER", 0}};};
	}; // End of "TopButtons" section
};
default xkb_geometry "model100" {

    // This is an approximate layout for a Kinesis Ergonomic keyboard
    // Generated completely by eye.  I didn't actually *measure* a real 
    // keyboard.

    description= "Kinesis Ergonomic";
    width= 421;
    height= 185;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } };
    shape "WIDE" { { [ 21,18] }, { [2,1], [19,17] } };
    shape "TALL" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "FKEY" { cornerRadius=0, { [ 10,13] } };
    shape "LED"  { cornerRadius= 1.5, { [ 3,  3] } };
    shape "LOGO" { { [ 40, 10 ] } };
    shape "EDGE" { cornerRadius=5, { [ 421, 185 ] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section "LeftFunction" {
	left= 15;
	top=  11;
	key.shape= "FKEY";
	key.gap= 3;
	row {
	    left= 1;
	    top= 1;
	    keys { 
	    	<ESC>,  <FK01>, <FK02>, <FK03>, <FK04>,
		<FK05>, <FK06>, <FK07>, <FK08>
	    };
	};
    }; // End of "LeftFunction" section

    section "RightFunction" {
	left= 290;
	top=  11;
	key.shape= "FKEY";
	key.gap= 3;
	row {
	    left= 1;
	    top= 0.2;
	    keys {
		<FK09>, <FK10>, <FK11>, <FK12>, <PRSC>, 
		<SCLK>, <PAUS>, <FK16>, <FK17>
	    };
	};
    }; // End of "RightFunction" section

    row.vertical= True;
    row.top= 1;
    key.gap= 0.5;

    logo "KinesisLogoImage" 	{ 
	top= 25;
	left= 240;
	name= "Kinesis"; 
	shape= "LOGO"; 
    };

    indicator.shape= "LED";
    indicator.top= 30;
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator "Caps Lock" { left= 23; };

    section "LeftAlpha" {
	top=  34;
	left= 15;
	row {
	    left= 2;
	    key.shape= "WIDE";
	    keys { <AE12>, <TAB>, <CAPS>, <LFSH> };
	};
	row {
	    top= 4;
	    left= 24;
	    keys { <AE01>, <AD01>, { <AC01>, color="grey20" }, <AB01>, <TLDE> };
	};
	row {
	    left= 43;
	    keys { <AE02>, <AD02>, { <AC02>, color="grey20" }, <AB02>, <INS> };
	};
	row {
	    left= 62;
	    keys { <AE03>, <AD03>, { <AC03>, color="grey20" }, <AB03>, <LEFT> };
	};
	row {
	    left= 81;
	    keys { <AE04>, <AD04>, { <AC04>, color="grey20" }, <AB04>, <RGHT> };
	};
	row {
	    left= 100;
	    keys { <AE05>, <AD05>, <AC05>, <AB05> };
	};
    }; // End of "LeftAlpha" section

    indicator "NumLock"  { left= 318; };
    indicator "Overlay"  { left= 387; };
    section "RightAlpha" {
	top= 34;
	left= 290;
	row {
	    left= 2;
	    keys { <AE06>, <AD06>, <AC06>, <AB06> };
	};
	row {
	    left= 21;
	    keys { <AE07>, <AD07>, { <AC07>, color="grey20" }, <AB07>, <UP> };
	};
    	row {
	    left= 40;
	    keys { <AE08>, <AD08>, { <AC08>, color="grey20" }, <AB08>, <DOWN> };
	};
	row {
	    left= 59;
	    keys { <AE09>, <AD09>, { <AC09>, color="grey20" }, <AB09>, <AD11> };
	};
	row {
	    top= 4;
	    left= 78;
	    keys { <AE10>, <AD10>, { <AC10>, color="grey20" }, <AB10>, <AD12> };
	};
	row {
	    left= 97;
	    key.shape= "WIDE";
	    keys { <AE11>, <BKSL>, <AC11>, <RTSH> };
	};
	overlay "KPAD" {
	    <AE07>=<NMLK>, <AE08>=<KPEQ>, <AE09>=<KPSL>, <AE10>=<KPMU>,
	    <AD07>=<KP7>,  <AD08>=<KP8>,  <AD09>=<KP9>,  <AD10>=<KPSU>,
	    <AC07>=<KP4>,  <AC08>=<KP5>, <AC09>=<KP6>,  <AC10>=<KPAD>,
	    <AB07>=<KP1>,  <AB08>=<KP2>, <AB09>=<KP3>,  <AB10>=<KPEN>,
	    <AE10>=<KPDL>, <AE11>=<KPEN>
	};
    }; // End of "RightAlpha" section

    section "LeftEdit" {
	top= 109;
	left= 123;
	angle= 20;
	row.top= -18;
	row {
	    top=  1;
	    left= 1;
	    keys { { <BKSP>, "TALL" } };
	};
	row {
	    left= 20;
	    keys { <LCTL>, { <DELE>, "TALL" } };
	};
	row {
	    left= 39;
	    keys { <LALT>, <HOME>, <END> };
	};
    }; // End of "LeftEdit" section

    section "RightEdit" {
	top= 109;
	left= 302;
	angle= -20;
	row.top= -18;
	row {
	    left= -57;
	    keys { <RALT>, <PGUP>, <PGDN> };
	};
	row {
	    left= -38;
	    keys { <RCTL>, { <RTRN>, "TALL" } };
	};
	row {
	    top=  1;
	    left= -19;
	    keys { { <SPCE>, "TALL" } };
	};
	overlay "KPAD" {
	    <SPCE>= <KP0>
	};
    }; // End of "RightEdit" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
default xkb_geometry "138" {

    // This is an approximate layout for a (US/ASCII) Fujitsu keyboard.  

    description= "Fujitsu English keyboard";

    width= 480;
    height= 215;

    shape "EDGE" { cornerRadius= 2, { [ 480, 215 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "TABK" { { [ 27,18] }, { [2,1], [ 25,17] } };
    shape "RTRN" { 
	    approx = { [ 0, 0], [28,37] },
	    { [ 0, 0], [28, 0], [28,37],
	      [ 5,37], [ 5,19], [ 0,19] },
	    { [ 1, 1], [26, 1], [26,36],
	      [ 7,36], [ 7,18], [ 1,18] }
    };
    shape "LFSH" { { [ 41,18] }, { [2,1], [ 39,17] } };
    shape "RTSH" { { [ 33,18] }, { [2,1], [ 31,17] } };
    shape "LCTL" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "SPCE" { { [151,18] }, { [2,1], [149,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPEN" { { [ 18,37] }, { [2,1], [ 16,36] } };
    shape "EXEC" { { [ 57,18] }, { [2,1], [ 55,17] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 15;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;

    section "Alpha" {
	top= 28;
	row {
	    top= 1;
	    keys { 
		  <BREA>, { <PRSC>, 6 }, 
		{ <FK13>, 30 }, <FK14>, <FK15>, <FK16>,
		{ <FK17>, 6 }, <FK18>, <FK19>, <FK20>,
		{ <FK21>, 6 }, <FK22>, <FK23>, <FK24>,
		{ <FK29>, 68 }, <FK30>, <FK31>, <FK32>
	    };
	};
	row {
	    top= 20;
	    keys {
		  <KNJI>, { <PAUS>, 6 },
		{ <FK01>, 30 }, <FK02>, <FK03>, <FK04>,
		{ <FK05>, 6 }, <FK06>, <FK07>, <FK08>,
		{ <FK09>, 6 }, <FK10>, <FK11>, <FK12>,
		{ <UNK0>, 6 }, <UNK1>, <UNK2>,
		{ <FK25>, 6 }, <FK26>, <FK27>, <FK28>
	    };
	};
	row {
	    top= 39;
	    left= 316;
	    keys {
		  <PGUP>, <HOME>, <PGDN>
	    };
	};
	row {
	    top= 54;
	    keys { 
		  <UNDO>, { <ESC>, 6 }, 
		  <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, 
		  <AE06>, <AE07>, <AE08>, <AE09>, <AE10>, 
		  <AE11>, <AE12>, <TLDE>, <BKSP>,
		{ <KPMU>, 68 }, <KPDV>, <KPAD>, <KPSU>

	    };
	};
	row {
	    top= 58;
	    left= 316;
	    keys {
		  <UNK3>, <DEL>, <INS>
	    };
	};
	row {
	    top= 73;
	    keys { <COPY>, 
		 { <TAB>, 6, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN" },
		 { <KP7>, 68 }, <KP8>, <KP9>, <KPEQ>
	    };
	};
	row {
	    top= 92;
	    keys { <PAST>, 
		 { <LCTL>, 6, "LCTL" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <BKSL>,
		 { <UP>, 49 },
		 { <KP4>, 25 }, <KP5>, <KP6>, <KPDC>
	    };
	};
	row {
	    top= 102;
	    left= 316;
	    keys { <LEFT>, { <RGHT>, 19 }
	    };
	};
	row {
	    top= 111;
	    keys { <CUT>, 
		 { <LFSH>, 6 , "LFSH" }, 
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		   <AB11>, { <RTSH>, "RTSH" },
		 { <DOWN>, 25 },
		 { <KP1>, 25 }, <KP2>, <KP3>, { <KPEN>, "KPEN" }
	    };
	};
	row {
	    top= 130;
	    keys { <HELP>, { <CAPS>, 6 },
		   <LALT>, <LMTA>, 
		 { <SPCE>, "SPCE" },
		   <RMTA>, <RALT>, <COMP>, <LNFD>, 
		 { <KP0>, 68, "KP0" }, <KP00>
	    };
	};
	row {
	    top= 149;
	    left= 316;
	    keys { 
		 { <EXEC>, "EXEC" }
	    };
	};
    }; // End of "Alpha" section
};

xkb_geometry "140" {

    // This is an approximate layout for a Fujitsu Japanese keyboard.  

    description= "Fujitsu Japanese keyboard";

    width= 480;
    height= 215;

    shape "EDGE" { cornerRadius= 2, { [ 480, 215 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "TABK" { { [ 27,18] }, { [2,1], [ 25,17] } };
    shape "RTRN" { 
	    approx = { [ 0, 0], [28,37] },
	    { [ 0, 0], [28, 0], [28,37],
	      [ 5,37], [ 5,19], [ 0,19] },
	    { [ 1, 1], [26, 1], [26,36],
	      [ 7,36], [ 7,18], [ 1,18] }
    };
    shape "LFSH" { { [ 41,18] }, { [2,1], [ 39,17] } };
    shape "RTSH" { { [ 33,18] }, { [2,1], [ 31,17] } };
    shape "LCTL" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "SPCE" { { [113,18] }, { [2,1], [111,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPEN" { { [ 18,37] }, { [2,1], [ 16,36] } };
    shape "HNKN" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "EXEC" { { [ 57,18] }, { [2,1], [ 55,17] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 15;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;

    section "Alpha" {
	top= 28;
	row {
	    top= 1;
	    keys { 
		  <BREA>, { <PRSC>, 6 }, 
		{ <FK13>, 30 }, <FK14>, <FK15>, <FK16>,
		{ <FK17>, 6 }, <FK18>, <FK19>, <FK20>,
		{ <FK21>, 6 }, <FK22>, <FK23>, <FK24>,
		{ <FK29>, 68 }, <FK30>, <FK31>, <FK32>
	    };
	};
	row {
	    top= 20;
	    keys {
		  <KNJI>, { <PAUS>, 6 },
		{ <FK01>, 30 }, <FK02>, <FK03>, <FK04>,
		{ <FK05>, 6 }, <FK06>, <FK07>, <FK08>,
		{ <FK09>, 6 }, <FK10>, <FK11>, <FK12>,
		{ <UNK0>, 6 }, <UNK1>, <UNK2>,
		{ <FK25>, 6 }, <FK26>, <FK27>, <FK28>
	    };
	};
	row {
	    top= 39;
	    left= 316;
	    keys {
		  <PGUP>, <HOME>, <PGDN>
	    };
	};
	row {
	    top= 54;
	    keys { 
		  <UNDO>, { <ESC>, 6 }, 
		  <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, 
		  <AE06>, <AE07>, <AE08>, <AE09>, <AE10>, 
		  <AE11>, <AE12>, <BKSL>, <BKSP>,
		{ <KPMU>, 68 }, <KPDV>, <KPAD>, <KPSU>

	    };
	};
	row {
	    top= 58;
	    left= 316;
	    keys {
		  <UNK3>, <DEL>, <INS>
	    };
	};
	row {
	    top= 73;
	    keys { <COPY>, 
		 { <TAB>, 6, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN" },
		 { <KP7>, 68 }, <KP8>, <KP9>, <KPEQ>
	    };
	};
	row {
	    top= 92;
	    keys { <PAST>, 
		 { <LCTL>, 6, "LCTL" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <TLDE>,
		 { <UP>, 49 },
		 { <KP4>, 25 }, <KP5>, <KP6>, <KPDC>
	    };
	};
	row {
	    top= 102;
	    left= 316;
	    keys { <LEFT>, { <RGHT>, 19 }
	    };
	};
	row {
	    top= 111;
	    keys { <CUT>, 
		 { <LFSH>, 6 , "LFSH" }, 
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		   <AB11>, { <RTSH>, "RTSH" }, 
		 { <DOWN>, 25 },
		 { <KP1>, 25 }, <KP2>, <KP3>, { <KPEN>, "KPEN" }
	    };
	};
	row {
	    top= 130;
	    keys { <HELP>, { <CAPS>, 6 },
		   <LALT>, <LMTA>, <UNK4>,
		 { <SPCE>, "SPCE" },
		   <UNK5>, <RMTA>, <COMP>, <LNFD>, <UNK6>,
		 { <KP0>, 68, "KP0" }, <KP00>
	    };
	};
	row {
	    top= 149;
	    left= 134;
	    keys { 
		 { <UNK7>, "HNKN" }, { <UNK8>, "HNKN" }, 
		 { <EXEC>, 132, "EXEC" }
	    };
	};
    }; // End of "Alpha" section
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//

default xkb_geometry "pc98" {

    description= "Generic PC98";
    width= 405;
    height= 172;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 17,18] }, { [2,1], [ 15,17] } };
    shape "RTRN" { { [ 20,37] }, { [2,1], [ 18,35] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,17] } };
    shape "RTSH" { { [ 31,18] }, { [2,1], [ 29,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "SPCE" { { [115,18] }, { [2,1], [113,17] } };
    shape "FUNC" { { [ 21,18] }, { [2,1], [ 19,17] } };
    shape "BKSP" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,36] } };
    shape "TABK" { { [ 30,18] }, { [2,1], [ 28,17] } };
    shape "ARRW" { { [ 35,18] }, { [2,1], [ 33,17] } };

    section.left= 8;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 29;
	row {
	    top= 1;
	    key.shape="FUNC";
	    keys {  { <BRK>, "NORM" }, { <PRSC>, "NORM", 5 },
		    { <FK01>, 6 }, <FK02>, <FK03>, <FK04>, <FK05>, 
		    { <FK06>, 6 }, <FK07>, <FK08>, <FK09>, <FK10>, 
		    { <FK11>, 6 }, <FK12>, <FK13>, <FK14>, <FK15>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 54;
	row {
	    top= 1;
	    keys { { <ESC>, shape="BKSP"}, 
		   <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, <BKSL>,
		   { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN", 6 }
	    };
	};
	row {
	    top= 39;
	    keys { <LCTL>, <CAPS>,
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <AC12>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, <AB11>,
		    { <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    keys { { <ALGR>, 35 } , <LALT>, { <NFER>, "FUNC" },
		   { <SPCE>, "SPCE" }, { <XFER>, "FUNC" }
		   
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 54;
	left= 281;
	row {
	    top= 1;
	    keys { <INS>, <DELE> };
	};
        row {
	    top= 20;
	    keys { <PGDN>, <PGUP> };
	};
	row {
	    top= 39;
	    keys { { <UP>, "ARRW" } };
	};
	row {
	    top= 58;
	    keys { <LEFT>, <RGHT> };
	};
	row {
	    top= 77;
	    keys { { <DOWN>, "ARRW" } };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 54;
	left= 320;
	row {
	    top= 1;
	    keys { <HOME>, <HELP>, <KPSU>, <KPDV> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, <KPMU> };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, <KPAD> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, <KPEQ> };
	};
	row {
	    top= 77;
	    keys { <KP0>, <KPSP>, <KPDC>, <KPEN> };
	};
    }; // End of "Keypad" section

}; // End of "pc98" geometry
// Zoomed 3x because of text size

default xkb_geometry "nokiarx51" {

    description= "Nokia RX-51";
    width= 273; // 13x6mm + 2x1.5mm border + 2x5mm border
    height= 54; // 3x5mm + 2x1.5mm border

    shape.cornerRadius= 1.5;
    shape "NORM"  { { [18,15] } };
    shape "SPCE"  { { [36,15] } };
    shape "FRAME" { cornerRadius= 2.5, { [243,54] } };

    solid "FRAME" {
	shape= "FRAME";
	color= "white";
	top= 0;
	left= 15;
    };

    section.left= 15;
    row.left= 4.5;
    key.shape= "NORM";
    key.gap= 0;
    section "Keys" {
	top= 0;
	row {
	    top= 4.5;
	    keys { { <LCTL>, "NORM", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>,
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, <AB08>,
		   { <BKSP>, "NORM", color="grey20" }
	    };
	};
	row {
	    top= 19.5;
	    keys { { <RALT>, "NORM", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>,
		   <AC06>, <AC07>, <AC08>, <AC09>, <AB09>, <UP>,
		   { <RTRN>, "NORM", color="grey20" }
	    };
	};
	row {
	    top= 34.5;
	    keys { { <LFSH>, "NORM", color="grey20" },
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, <AB06>, <AB07>,
		   { <SPCE>, "SPCE", color="white" },
		   <LEFT>, <DOWN>, <RGHT>
	    };
	};
    }; // End of "Keys" section

}; // End of "rx51" geometry
// Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//

xkb_geometry "t6" {

    // This is an approximate layout for a (US/ASCII) Sun Type6
    // keyboard.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes.

    width= 515;
    height= 170;

    shape "EDGE" { cornerRadius= 2, { [ 515, 170 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "TABK" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "BKSL" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "RTRN" { { [ 42,18] }, { [2,1], [40,17] } };
    shape "CAPS" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [40,17] } };
    shape "RTSH" { { [ 51,18] }, { [2,1], [49,17] } };
    shape "LCTL" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [136,18] }, { [2,1], [134,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "HELP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "RMTA" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "LMTA" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 14;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 24;
	row {
	    top= 1;
	    keys { { <HELP>, "HELP" }, { <ESC>, 9 },
		   { <FK01>, 19 }, <FK02>, <FK03>, <FK04>,
		   { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		   { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		   { <PRSC>,  9 }, <SCLK>, <PAUS>,
		   { <MUTE>,  9 }, <VOL->, <VOL+>, <POWR>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { <STOP>, <AGAI>,
		 { <TLDE>, 9}, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		 { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { <PROP>, <UNDO>, { <TAB>, 9, shape="TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>,
		 { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys { <FRNT>, <COPY>, { <CAPS>, 9, shape="CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>,
		 { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 58;
	    keys { <OPEN>, <PAST>, { <LFSH>, 9 , shape="LFSH" }, 
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		 { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    keys { <FIND>, <CUT>, { <LCTL>, 9, shape="LCTL" },
		   <LALT>, { <LMTA>, "LMTA" },
		 { <SPCE>, "SPCE" },
		 { <RMTA>, "RMTA" }, <COMP>, <ALGR>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 352;
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 420;
	row {
	    top= 1;
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    shape "LEDS" { cornerRadius= 0, { [ 78 ,21 ] } };
    shape "LED"  { cornerRadius= 2, { [  3,  6 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  1;
	left= 218;
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 10;
    indicator.shape= "LED";
    indicator "CapsLock"	{ left= 243; };
    indicator "Compose"	{ left= 281; };
    indicator "ScrollLock"	{ left= 262; };
    indicator "NumLock"	{ left= 224; };
    text.top= 1;
    text.color= "black";
    text "CapsLockLabel"	{ left= 243; text="Caps\nLock"; };
    text "ComposeLabel"		{ left= 281; text="Compose"; };
    text "ScrollLockLabel"	{ left= 262; text="Scroll\nLock"; };
    text "NumLockLabel"		{ left= 224; text="Num\nLock"; };

};

xkb_geometry "t6tuv" {

    // This is an approximate layout for a (US/ASCII) Sun Type6
    // keyboard.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes.

    width= 515;
    height= 170;

    shape "EDGE" { cornerRadius= 2, { [ 515, 170 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } }; 
    shape "BKSP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "TABK" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "RTRN" { 
        approx = { [ 0, 0], [28,37] },
        { [ 0, 0], [28, 0], [28,37],
          [ 5,37], [ 5,18], [ 0,18] },
        { [ 1, 1], [26, 1], [26,36],
          [ 7,36], [ 7,17], [ 1,17] }
    };
    shape "CAPS" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "LFSH" { { [ 24,18] }, { [2,1], [22,17] } };
    shape "RTSH" { { [ 51,18] }, { [2,1], [49,17] } };
    shape "LCTL" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [137,18] }, { [2,1], [135,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "RMTA" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "LMTA" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "HELP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 14;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 24;
	row {
	    top= 1;
	    keys { { <HELP>, "HELP" }, { <ESC>, 9 },
		   { <FK01>, 19 }, <FK02>, <FK03>, <FK04>,
		   { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		   { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		   { <PRSC>,  9 }, <SCLK>, <PAUS>,
		   { <MUTE>,  9 }, <VOL->, <VOL+>, <POWR>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { <STOP>, <AGAI>,
		 { <TLDE>, 9}, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		 { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { <PROP>, <UNDO>, { <TAB>, 9, shape="TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, 
		   { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 39;
	    keys { <FRNT>, <COPY>, { <CAPS>, 9, shape="CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <BKSL>
	    };
	};
	row {
	    top= 58;
	    keys { <OPEN>, <PAST>, { <LFSH>, 9 , shape="LFSH" }, <LSGT>, 
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		 { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    keys { <FIND>, <CUT>, { <LCTL>, 9, shape="LCTL" },
		   <LALT>, { <LMTA>, "LMTA" },
		 { <SPCE>, "SPCE" },
		 { <RMTA>, "RMTA" }, <COMP>, <ALGR>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 352;
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 420;
	row {
	    top= 1;
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    shape "LEDS" { cornerRadius= 0, { [ 78 ,21 ] } };
    shape "LED"  { cornerRadius= 2, { [  3,  6 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  1;
	left= 218;
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 10;
    indicator.shape= "LED";
    indicator "CapsLock"	{ left= 243; };
    indicator "Compose"	{ left= 281; };
    indicator "ScrollLock"	{ left= 262; };
    indicator "NumLock"	{ left= 224; };
    text.top= 1;
    text.color= "black";
    text "CapsLockLabel"	{ left= 243; text="Caps\nLock"; };
    text "ComposeLabel"		{ left= 281; text="Compose"; };
    text "ScrollLockLabel"	{ left= 262; text="Scroll\nLock"; };
    text "NumLockLabel"		{ left= 224; text="Num\nLock"; };

};

xkb_geometry "t6jp" {

    // This is an approximate layout for a (US/ASCII) Sun Type6
    // keyboard.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes.

    width= 515;
    height= 170;

    shape "EDGE" { cornerRadius= 2, { [ 515, 170 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "TABK" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "KANJ" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "EXEC" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "RTRN" { 
        approx = { [ 0, 0], [28,37] },
        { [ 0, 0], [28, 0], [28,37],
          [ 5,37], [ 5,18], [ 0,18] },
        { [ 1, 1], [26, 1], [26,36],
          [ 7,36], [ 7,17], [ 1,17] }
    };
    shape "CAPS" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [40,17] } };
    shape "RTSH" { { [ 33,18] }, { [2,1], [31,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [ 96,18] }, { [2,1], [94,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "HELP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 14;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 24;
	row {
	    top= 1;
	    keys { { <HELP>, "HELP" }, { <ESC>, 9 },
		   { <FK01>, 19 }, <FK02>, <FK03>, <FK04>,
		   { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		   { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		   { <PRSC>,  9 }, <SCLK>, <PAUS>,
		   { <MUTE>,  9 }, <VOL->, <VOL+>, <POWR>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { <STOP>, <AGAI>,
		 { <TLDE>, 9}, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		 { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { <PROP>, <UNDO>, { <TAB>, 9, shape="TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, 
		   { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 39;
	    keys { <FRNT>, <COPY>, { <CAPS>, 9, shape="CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <BKSL>
	    };
	};
	row {
	    top= 58;
	    keys { <OPEN>, <PAST>, { <LFSH>, 9 , shape="LFSH" }, 
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, <UNDR>,
		 { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    keys { <FIND>, <CUT>, { <LCTL>, 9 },
		   <LALT>, <LMTA>, { <EXEC>, "EXEC" },
		 { <SPCE>, "SPCE" }, { <KANJ>, "KANJ" }, <HENK>,
		   <RMTA>, <COMP>, <ALGR>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 352;
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 420;
	row {
	    top= 1;
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    shape "LEDS" { cornerRadius= 0, { [ 78 ,21 ] } };
    shape "LED"  { cornerRadius= 2, { [  3,  6 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  1;
	left= 218;
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 10;
    indicator.shape= "LED";
    indicator "CapsLock"	{ left= 243; };
    indicator "Compose"	{ left= 281; };
    indicator "ScrollLock"	{ left= 262; };
    indicator "NumLock"	{ left= 224; };
    text.top= 1;
    text.color= "black";
    text "CapsLockLabel"	{ left= 243; text="Caps\nLock"; };
    text "ComposeLabel"		{ left= 281; text="Compose"; };
    text "ScrollLockLabel"	{ left= 262; text="Scroll\nLock"; };
    text "NumLockLabel"		{ left= 224; text="Num\nLock"; };

};

xkb_geometry "t6unix" {

    // This is an approximate layout for a (US/ASCII) Sun Type6
    // keyboard.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes.

    width= 515;
    height= 170;

    shape "EDGE" { cornerRadius= 2, { [ 515, 170 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "TABK" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "RTRN" { { [ 42,18] }, { [2,1], [40,17] } };
    shape "CAPS" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [40,17] } };
    shape "RTSH" { { [ 51,18] }, { [2,1], [49,17] } };
    shape "LCTL" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [136,18] }, { [2,1], [134,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "HELP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "RMTA" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "LMTA" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 14;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 24;
	row {
	    top= 1;
	    keys { { <HELP>, "HELP" }, { <NONE>, 9 },
		   { <FK01>, 19 }, <FK02>, <FK03>, <FK04>,
		   { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		   { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		   { <PRSC>,  9 }, <SCLK>, <PAUS>,
		   { <MUTE>,  9 }, <VOL->, <VOL+>, <POWR>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { <STOP>, <AGAI>,
		 { <ESC>, 9}, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   <BKSL>, <TLDE>
	    };
	};
	row {
	    top= 20;
	    keys { <PROP>, <UNDO>, { <TAB>, 9, shape="TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>,
		 { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { <FRNT>, <COPY>, { <CAPS>, 9, shape="CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>,
		 { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 58;
	    keys { <OPEN>, <PAST>, { <LFSH>, 9 , shape="LFSH" }, 
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		 { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    keys { <FIND>, <CUT>, { <LCTL>, 9, shape="LCTL" },
		   <LALT>, {<LMTA>, "LMTA"},
		 { <SPCE>, "SPCE" },
		   {<RMTA>, "RMTA"}, <COMP>, <ALGR>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 352;
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 420;
	row {
	    top= 1;
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    shape "LEDS" { cornerRadius= 0, { [ 78 ,21 ] } };
    shape "LED"  { cornerRadius= 2, { [  3,  6 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  1;
	left= 218;
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 10;
    indicator.shape= "LED";
    indicator "CapsLock"	{ left= 243; };
    indicator "Compose"	{ left= 281; };
    indicator "ScrollLock"	{ left= 262; };
    indicator "NumLock"	{ left= 224; };
    text.top= 1;
    text.color= "black";
    text "CapsLockLabel"	{ left= 243; text="Caps\nLock"; };
    text "ComposeLabel"		{ left= 281; text="Compose"; };
    text "ScrollLockLabel"	{ left= 262; text="Scroll\nLock"; };
    text "NumLockLabel"		{ left= 224; text="Num\nLock"; };
};


default xkb_geometry "type6" {
    include "sun(t6)"
    description= "Sun Type6 keyboard (US, Korea, Taiwan)";
};

xkb_geometry "type6jp" {
    include "sun(t6jp)"
    description= "Sun Type6 Japanese keyboard";
};

xkb_geometry "type6tuv" {
    include "sun(t6tuv)"
    description= "Sun Type6 TUV keyboard";
};

xkb_geometry "type6unix" {
    include "sun(t6unix)"
    description= "Sun Type6 Unix keyboard";
};

xkb_geometry "type7" {
    include "sun(t6)"
    description= "Sun Type7 keyboard (US, Korea, Taiwan)";
};

xkb_geometry "type7jp" {
    include "sun(t6jp)"
    description= "Sun Type7 Japanese keyboard";
};

xkb_geometry "type7tuv" {
    include "sun(t6tuv)"
    description= "Sun Type7 TUV keyboard";
};

xkb_geometry "type7unix" {
    include "sun(t6unix)"
    description= "Sun Type7 Unix keyboard";
};
// -*- indent-tabs-mode: nil -*-

// Created by Frédéric Boiteux <fboiteux (at) free (dot) fr>
// and Gildas Cotomale <gildas (dot) cotomale (at) gmail (dot) com>

// Note : the special/multimedia keys (Calc, WWW, Desktop…) have a keycode
// <I[XX]>, found in definition file /usr/share/X11/xkb/keycodes/evdev.
// Fn           = <I120>;
// Calc         = <I148>;
// WWW          = <I158>;
// CycleWindows = <I162>;
// Mail         = <I163>;
// PlayPause    = <I172>;
// Desktop      = <I243>;


xkb_geometry "tm2020" {
    description = "TypeMatrix EZ-Reach 2020";

    // Keyboard total size :
    width  = 308;
    height = 152;
    // Background / foreground colours
    baseColor  = "white";
    labelColor = "black";

    // Key shapes: base key = 16 mm each side
    shape "NORM" { cornerRadius=1, { [16,    16]   }, { [1,   1], [15,   15] }};
    shape "ALPL" { cornerRadius=1, { [24.25, 16]   }, { [1,   1], [23,   15] }};
    shape "DHAL" { cornerRadius=1, { [24.25, 32.5] }, { [1,   1], [23, 31.5] }};
    shape "FUNC" { cornerRadius=1, { [16,    12]   }, { [2.5, 0], [13.5, 10] }};
    shape "FUNL" { cornerRadius=1, { [24.25, 12]   }, { [2.5, 0], [21.5, 10] }};
    shape "SPCE" { cornerRadius=1, { [57,    26]   }, { [2.5, 1], [54.5, 24] }};
    shape "DBLA" { cornerRadius=1, { [32.5,  16]   }, { [1,   1], [31,   15] }};
    shape "LED"  { cornerRadius=2, { [4,      4]   }};
    shape "DECO" { cornerRadius=1, { [3,     18]   }};

    section "Function" {
        left = 4;
        top  = 24;
        key.gap = 0.5;
        key.color = "grey10";
        key.shape = "FUNC";
        row {
            keys { { <ESC>,  "FUNL" },
                   <FK01>, <FK02>, <FK03>, <FK04>, <FK05> };
            key.color = "grey20";
            keys { { <NMLK>, "FUNL" } };
        };
        row {
            left = 150;
            key.color = "red";
            keys { { <DELE>, "FUNL" } };
            key.color = "grey10";
            keys { <FK06>, <FK07>, <FK08>, <FK09>, <FK10>, <FK11>,
                   { <FK12>, "FUNL" } };
        };
    };

    section "Alpha" {
        left = 4;
        top  = 36.5;
        key.gap = 0.5;
        key.color = "grey10";
        key.shape = "NORM";
        row {
            top  = 0;
            keys { { <TLDE>, "ALPL" },
                   <AE01>, <AE02>, <AE03>, <AE04>, <AE05>,
                   { <BKSP>, "DHAL" } };
        };
        row {
            top  = 16.5;
            keys { { <TAB>, "ALPL" },
                   <AD01>, <AD02>, <AD03>, <AD04>, <AD05> };
        };
        row {
            top  = 33;
            keys { { <LFSH>, "DHAL" },
                   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>,
                   { <TAB>,  "DHAL" } };
        };
        row {
            top  = 49.5;
            left = 24.5;
            keys { <AB01>, <AB02>, <AB03>, <AB04>, <AB05> };
        };
        row {
            top  = 0;
            left = 150;
            keys { { <BKSP>, "DHAL" },
                   <AE06>, <AE07>, <AE08> };
            key.color = "grey20";
            keys { <AE09>, <AE10>, <AE11>, { <AE12>, "ALPL" } };
        };
        row {
            top  = 16.5;
            left = 174.5;
            keys { <AD06>, <AD07>, <AD08> };
            key.color = "grey20";
            keys { <AD09>, <AD10>, <AD11>, { <AD12>, "ALPL" } };
        };
        row {
            top  = 33;
            left = 150;
            keys { { <RTRN>, "DHAL" },
                   <AC06>, <AC07>, <AC08> };
            key.color = "grey20";
            keys { <AC09>, <AC10>, <AC11>, { <RTSH>, "DHAL" } };
        };
        row {
            top  = 49.5;
            left = 174.5;
            keys { <AB06>, <AB07>, <AB08> };
            key.color = "grey20";
            keys { <AB09>, <AB10>, <BKSL> };
        };
    };

    section "Control" {
        left = 4;
        top  = 102.5;
        key.gap = 0.5;
        key.color = "grey10";
        key.shape = "ALPL";
        row {
            top  = 0;
            keys { <LCTL>, <LALT>, <CAPS> };
            keys { { <SPCE>, "SPCE"} };
        };
        row {
            top  = 16.5;
            keys { <I120>, <LWIN>, <MENU> };
        };
        row {
            top  = 0;
            left = 150;
            key.shape = "NORM";
            keys { { <SPCE>, "SPCE"}, <RALT> };
            key.color = "grey20";
            keys { <RCTL>, <UP>, <I162>, { <KPEN>, "DHAL" } };
        };
        row {
            top  = 16.5;
            left = 207.5;
            key.shape = "NORM";
            key.color = "grey20";
            keys { { <LEFT>, "DBLA" }, <DOWN>, <RGHT> };
        };
    };

    // Leds
    indicator.top      = 12;
    indicator.onColor  = "green";
    indicator.offColor = "grey10";
    indicator.shape    = "LED";
    indicator "Num Lock"   { left = 252; };
    indicator "Caps Lock"  { left = 266; };
    indicator "Misc"       { left = 280; };
    text.top= 5;
    text.color= "black";
    text "NumLockLabel"		{ left= 252; text="1"; };
    text "CapsLockLabel"	{ left= 266; text="A"; };
    text "MiscLabel"    	{ left= 280; text="D"; };

    text "Logo" { left = 29; top = 10; text="TypeMatrix™"; };

    // Other decorations: drawings
    solid "rainure1"  { shape = "DECO"; top = 1; left = 110; color = "grey10";};
    solid "rainure2"  { shape = "DECO"; top = 1; left = 115; color = "grey10";};
    solid "rainure3"  { shape = "DECO"; top = 1; left = 120; color = "grey10";};
    solid "rainure4"  { shape = "DECO"; top = 1; left = 125; color = "grey10";};
    solid "rainure5"  { shape = "DECO"; top = 1; left = 130; color = "grey10";};
    solid "rainure6"  { shape = "DECO"; top = 1; left = 135; color = "grey10";};
    solid "rainure7"  { shape = "DECO"; top = 1; left = 140; color = "grey10";};
    solid "rainure8"  { shape = "DECO"; top = 1; left = 145; color = "grey10";};
    solid "rainure9"  { shape = "DECO"; top = 1; left = 150; color = "grey10";};
    solid "rainure10" { shape = "DECO"; top = 1; left = 155; color = "grey10";};
    solid "rainure11" { shape = "DECO"; top = 1; left = 160; color = "grey10";};
    solid "rainure12" { shape = "DECO"; top = 1; left = 165; color = "grey10";};
    solid "rainure13" { shape = "DECO"; top = 1; left = 170; color = "grey10";};
}; // geometry tm2020


xkb_geometry "tm2030_shape" {
    // Keyboard total size
    width  = 320;
    height = 130;
    // Background / foreground colours
    baseColor  = "white";
    labelColor = "black";

    // Key shapes: base key = 20 mm each side
    shape "NORM" { cornerRadius=1, { [18,   18] }, { [1.5, 1.5], [16.5, 14] } };
    shape "FUNC" { cornerRadius=1, { [18,   12] }, { [2.5,   0], [15.5, 10] } };
    shape "LFSH" { cornerRadius=1, { [18, 36.5] }, { [2.5,   0], [15.5, 30] } };
    shape "ALT1" { cornerRadius=1, { [27.5, 18] }, { [2.5,   0], [23.5, 14] } };
    shape "BKSP" { cornerRadius=1, { [18, 30.5] }, { [1.5, 1.5], [16.5, 29] } };
    shape "SPCE" { cornerRadius=1, { [92,   25] }, { [1.5, 1.5], [90.5, 22] } };
    shape "LED"  { cornerRadius=2, { [4,     4] } };
    shape "PAN1" { cornerRadius=1, { [27, 126.5] } };
    shape "PAN2" { cornerRadius=1, { [92,   13] } };

    // Other decorations: panels
    solid "panneau1" {
        shape = "PAN1";
        left  = 0;
        top   = 0;
        color = "grey40";
    };
    solid "panneau2" {
        shape = "PAN2";
        left = 101.5;
        top = 113.5;
        color = "grey40";
    };

    // Leds: they must be put after panels, otherwise the panels overwrite them
    indicator.left     = 6;
    indicator.onColor  = "green";
    indicator.offColor = "grey10";
    indicator.shape    = "LED";

    indicator "Num Lock"     { top = 11  ; };
    indicator "Caps Lock"    { top = 27.5; };
    indicator "Scroll Lock"  { top = 44  ; };

    text.left          = 12;
    text.color         = "black";
    text "NumLockLabel"		{ top = 11;   text="num";           };
    text "CapsLockLabel"	{ top = 27.5; text="caps";          };
    text "SrollLockLabel"	{ top = 44;   text="scroll";        };
}; // geometry tm2030_shape


xkb_geometry "tm2030_MiscDiod_dvk" {
    text "ModeLabel" { left = 12; top = 58; color = "black";  text="Dvorak"; };
};

xkb_geometry "tm2030_MiscDiod_102" {
    text "ModeLabel" { left = 12; top = 58; color = "black";  text="102"; };
};

xkb_geometry "tm2030_MiscDiod_106" {
    text "ModeLabel" { left = 12; top = 58; color = "black";  text="106"; };
};

xkb_geometry "tm2030_MiscDiod_off" {
    indicator "Misc" { left = 6; top = 60.5; shape = "LED";
                       offColor = "grey10"; onColor = "grey10"; };
};

xkb_geometry "tm2030_MiscDiod_on" {
    indicator "Misc" { left = 6; top = 60.5; shape = "LED";
                       offColor = "green"; onColor = "green"; };
};


xkb_geometry "tm2030USB_func" {
    section "Function" {
        left      = 27;
        top       = 1.5;
        key.gap   = 0.5;
        key.color = "grey30";
        key.shape = "FUNC";
        row {
            keys { <ESC>,  <FK01>, <FK02>, <FK03>, <FK04>, <FK05> };
        };
        row {
            left = 129.5;
            keys { <FK06>, <FK07>, <FK08>, <FK09>, <FK10>, <FK11>,
                   <FK12>, <NMLK> };
        };
    };
}; // geometry tm2030USB_func


xkb_geometry "tm2030USB_alpha" {
    section "Alpha" {
        left = 27;
        top  = 14;
        key.gap = 0.5;
        key.color = "grey10";
        key.shape = "NORM";
        row {
            top  = 0;
            keys { <TLDE>,             <AE01>, <AE02>, <AE03>, <AE04>, <AE05> };
        };
        row {
            top  = 18.5;
            keys { <TAB>,              <AD01>, <AD02>, <AD03>, <AD04>, <AD05> };
        };
        row {
            top  = 37;
            keys { { <LFSH>, "LFSH" }, <AC01>, <AC02>, <AC03>, <AC04>, <AC05> };
        };
        row {
            top  = 55.5;
            left = 18.5;
            keys {                     <AB01>, <AB02>, <AB03>, <AB04>, <AB05> };
        };

        row {
            top  = 0;
            left = 129.5;
            keys { <AE06>, <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, <I148> };
        };
        row {
            top  = 18.5;
            left = 129.5;
            keys { <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, <I163> };
        };
        row {
            top  = 37;
            left = 129.5;
            keys { <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, { <RTSH>, "LFSH" }, <CAPS> };
        };
        row {
            top  = 55.5;
            left = 129.5;
            keys { <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, <BKSL> };
        };
        row {
            top  = 55.5;
            left = 259;
            keys { <I158> };
        };
        row {
            top  = 74;
            left = 74;
            keys { { <SPCE>, "SPCE" } };
        };
    };
}; // geometry tm2030USB_alpha


xkb_geometry "tm2030USB_ctrl" {
    section "Control" {
        left = 27;
        top  = 0;
        key.gap = 0.5;
        key.color = "grey30";
        key.shape = "NORM";
        row {
            top  = 88;
            keys { <LCTL>, <I172>, <MENU>, <I162> };
        };
        row {
            top = 106.5;
            keys { <I120>, { <LWIN>, "ALT1" }, { <LALT>, "ALT1" } };
        };
        row {
            top  = 88;
            left = 166.5;
            keys { <I243>, <HOME>, <UP>, <END>, { <RCTL>, "LFSH"}, <PGUP> };
        };
        row {
            top = 106.5;
            left = 166.5;
            keys { <RALT>, <LEFT>, <DOWN>, <RGHT> };
        };
        row {
            top = 106.5;
            left = 259;
            keys { <PGDN> };
        };
        row {
            top  = 1;
            left = 111.5;
            vertical = true;
            keys { <DELE>, { <BKSP>, "BKSP" }, { <RTRN>, "LFSH" } };
        };
    };
}; // geometry tm2030USB_ctrl


xkb_geometry "tm2030PS2" {
    include "typematrix(tm2030_shape)"
    include "typematrix(tm2030_MiscDiod_dvk)"
    include "typematrix(tm2030_MiscDiod_off)"

    description = "TypeMatrix EZ-Reach 2030 PS2";

    section "Function" {
        left = 27;
        top  = 1.5;
        key.gap = 0.5;
        key.color = "grey10";
        key.shape = "FUNC";
        row {
            key.color = "grey30";
            keys { <ESC> };
        };
        row {
            left = 18.5;
            keys { <FK01>, <FK02>, <FK03>, <FK04> };
        };
        row {
            left = 92.5;
            key.color = "grey30";
            keys { <FK05> };
        };
        row {
            left = 129.5;
            key.color = "grey30";
            keys { <FK06>, <FK07>, <FK08> };
        };
        row {
            left = 185;
            keys { <FK09>, <FK10>, <FK11>, <FK12> };
        };
        row {
            left = 259;
            key.color = "grey30";
            keys { <NMLK> };
        };
    };

    section "Alpha" {
        left = 27;
        top  = 14;
        key.gap = 0.5;
        key.color = "grey10";
        key.shape = "NORM";
        row {
            top  = 0;
            keys { <TLDE>,             <AE01>, <AE02>, <AE03>, <AE04>, <AE05> };
        };
        row {
            top  = 18.5;
            keys { <TAB>,              <AD01>, <AD02>, <AD03>, <AD04>, <AD05> };
        };
        row {
            top  = 37;
            keys { { <LFSH>, "LFSH" }, <AC01>, <AC02>, <AC03>, <AC04>, <AC05> };
        };
        row {
            top  = 55.5;
            left = 18.5;
            keys {                     <AB01>, <AB02>, <AB03>, <AB04>, <AB05> };
        };

        row {
            top  = 0;
            left = 129.5;
            keys { <AE06>, <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, <I120> };
        };
        row {
            top  = 18.5;
            left = 129.5;
            keys { <AD06>, <AD07>, <AD08> };
        };
        row {
            top  = 18.5;
            left = 185;
            key.color = "grey30";
            keys { <AD09>, <AD10>, <AD11>, <AD12>};
        };
        row {
            top  = 18.5;
            left = 259;
            keys { <BKSP> };
        };
        row {
            top  = 37;
            left = 129.5;
            keys { <AC06>, <AC07>, <AC08> };
        };
        row {
            top  = 37;
            left = 185;
            key.color = "grey30";
            keys { <AC09>, <AC10>, <AC11>, { <RTSH>, "LFSH" },
                   {<DELE>, key.color="red"} };
        };
        row {
            top  = 55.5;
            left = 129.5;
            keys { <AB06>, <AB07>, <AB08> };
        };
        row {
            top  = 55.5;
            left = 185;
            key.color = "grey30";
            keys { <AB09>, <AB10>, <BKSL> };
        };
        row {
            top  = 55.5;
            left = 259;
            keys { <INS> };
        };
        row {
            top  = 74;
            left = 74;
            keys { { <SPCE>, "SPCE" } };
        };
    };

    section "Control" {
        left = 27;
        top  = 0;
        key.gap = 0.5;
        key.color = "grey10";
        key.shape = "NORM";
        row {
            top  = 88;
            keys { <I120>, <LWIN>, <MENU>, <I162> };
        };
        row {
            top = 106.5;
            keys { <LCTL>, { <LALT>, "ALT1" }, { <LTSH>, "ALT1" } };
        };
        row {
            top  = 88;
            left = 166.5;
            keys { <PGUP> };
        };
        row {
            top  = 88;
            left = 185;
            key.color = "grey30";
            keys { <HOME>, <UP>, <END>, { <KPEN>, "LFSH"} };
        };
        row {
            top  = 88;
            left = 259;
            keys { <RCTL> };
        };
        row {
            top = 106.5;
            left = 166.5;
            keys { <PGDN> };
        };
        row {
            top = 106.5;
            left = 185;
            key.color = "grey30";
            keys { <LEFT>, <DOWN>, <RGHT> };
        };
        row {
            top = 106.5;
            left = 259;
            keys { <RALT> };
        };
        row {
            top  = 1;
            left = 111.5;
            key.color = "grey10";
            vertical = true;
            keys { <CAPS>, { <BKSP>, "BKSP" }, { <RTRN>, "LFSH" } };
        };
    };
}; // geometry tm2030PS2


xkb_geometry "tm2030USB" {
    include "typematrix(tm2030_shape)"
    include "typematrix(tm2030_MiscDiod_102)"
    include "typematrix(tm2030_MiscDiod_off)"

    description = "TypeMatrix EZ-Reach 2030 USB";

    include "typematrix(tm2030USB_func)"
    include "typematrix(tm2030USB_alpha)"
    include "typematrix(tm2030USB_ctrl)"
}; // geometry tm2030USB


// European 102/105 keys mode.
// Same as the standard keyboard, except for one key: Play becomes LSGT.
xkb_geometry "tm2030USB-102" {
    include "typematrix(tm2030_shape)"
    include "typematrix(tm2030_MiscDiod_102)"
    include "typematrix(tm2030_MiscDiod_on)"

    description = "TypeMatrix EZ-Reach 2030 USB (102/105:EU mode)";

    include "typematrix(tm2030USB_func)"
    include "typematrix(tm2030USB_alpha)"

    section "Control" {
        left = 27;
        top  = 0;
        key.gap = 0.5;
        key.color = "grey30";
        key.shape = "NORM";
        row {
            top  = 88;
            keys { <LCTL>, <LSGT>, <MENU>, <I162> };
        };
        row {
            top = 106.5;
            keys { <I120>, { <LWIN>, "ALT1" }, { <LALT>, "ALT1" } };
        };
        row {
            top  = 88;
            left = 166.5;
            keys { <I243>, <HOME>, <UP>, <END>, { <RCTL>, "LFSH"}, <PGUP> };
        };
        row {
            top = 106.5;
            left = 166.5;
            keys { <RALT>, <LEFT>, <DOWN>, <RGHT> };
        };
        row {
            top = 106.5;
            left = 259;
            keys { <PGDN> };
        };
        row {
            top  = 1;
            left = 111.5;
            vertical = true;
            keys { <DELE>, { <BKSP>, "BKSP" }, { <RTRN>, "LFSH" } };
        };
    };
}; // geometry tm2030USB-102


// Japan / Korean 106 keys mode.
// Same as the standard keyboard, except for the following keys:
// – <TLDE> is replaced by <HZTG>
// – WWW key becomes <HKTG>
// — Calc key becomes <AE13>
// — <BKSL> key becomes <AB11>
// — and Mail key becomes <BKSL>

// About control keys:
// NFER/MEHU and XFER/KANJ: TMx keeps LWIN (and RWIN if it happens to exist).
// HKTG/HIRA: TMx keeps MENU/COMP, but locates this key in alpha section (see above).

xkb_geometry "tm2030USB-106" {
    include "typematrix(tm2030_shape)"
    include "typematrix(tm2030_MiscDiod_106)"
    include "typematrix(tm2030_MiscDiod_on)"

    description = "TypeMatrix EZ-Reach 2030 USB (106:JP mode)";

    include "typematrix(tm2030USB_func)"

    section "Alpha" {
        left = 27;
        top  = 14;
        key.gap = 0.5;
        key.color = "grey10";
        key.shape = "NORM";
        row {
            top  = 0;
            keys { <HZTG>,             <AE01>, <AE02>, <AE03>, <AE04>, <AE05> };
        };
        row {
            top  = 18.5;
            keys { <TAB>,              <AD01>, <AD02>, <AD03>, <AD04>, <AD05> };
        };
        row {
            top  = 37;
            keys { { <LFSH>, "LFSH" }, <AC01>, <AC02>, <AC03>, <AC04>, <AC05> };
        };
        row {
            top  = 55.5;
            left = 18.5;
            keys {                     <AB01>, <AB02>, <AB03>, <AB04>, <AB05> };
        };

        row {
            top  = 0;
            left = 129.5;
            keys { <AE06>, <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, <AE13> };
        };
        row {
            top  = 18.5;
            left = 129.5;
            keys { <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, <BKSL> };
        };
        row {
            top  = 37;
            left = 129.5;
            keys { <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, { <RTSH>, "LFSH" }, <CAPS> };
        };
        row {
            top  = 55.5;
            left = 129.5;
            keys { <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, <AB11> };
        };
        row {
            top  = 55.5;
            left = 259;
            keys { <HKTG> };
        };
        row {
            top  = 74;
            left = 74;
            keys { { <SPCE>, "SPCE" } };
        };
    };

    section "Control" {
        left = 27;
        top  = 0;
        key.gap = 0.5;
        key.color = "grey30";
        key.shape = "NORM";
        row {
            top  = 88;
            keys { <LCTL>, <I172>, <MENU>, <I162> };
        };
        row {
            top = 106.5;
            keys { <I120>, { <LWIN>, "ALT1" }, { <LALT>, "ALT1" } };
        };
        row {
            top  = 88;
            left = 166.5;
            keys { <I243>, <HOME>, <UP>, <END>, { <RCTL>, "LFSH"}, <PGUP> };
        };
        row {
            top = 106.5;
            left = 166.5;
            keys { <RALT>, <LEFT>, <DOWN>, <RGHT> };
        };
        row {
            top = 106.5;
            left = 259;
            keys { <PGDN> };
        };
        row {
            top  = 1;
            left = 111.5;
            vertical = true;
            keys { <DELE>, { <BKSP>, "BKSP" }, { <RTRN>, "LFSH" } };
        };
    };
}; // geometry tm2030USB-106
//
// Some modifications (<eqdar@castalie.org>) :
// - Added a <LSGT> key
// - Fixed the shape of the <RTRN> key
// - Moved <BKSL> to the 'AC' row
// - Added a special Macintosh sysctl key
// - Minor changes (Function keys shape, LED position...)

// Minor changes
// - Mail address above is no longer valid
// - Changed {L,R}MTA to {L,R}WIN, which are defined
// 2005/10 -- Simon Vallet <svallet@gmail.com>

default xkb_geometry "macintosh" {

    description= "Apple Extended Keyboard II";
    width = 475;
    height = 194;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "TLDE" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "BKSP" { { [ 33,18] }, { [2,1], [ 31,17] } };
    shape "TAB"  { { [ 33,18] }, { [2,1], [ 31,17] } };
    shape "RTRN" { 
        { [0,0],[23,0],[23,37],[4,37],[4,18],[0,18] }, 
        { [2,1],[21,1],[21,36],[6,36],[6,17],[2,17] } };
    shape "CAPS" { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "LCTL" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "LALT" { { [ 22,18] }, { [2,1], [ 20,17] } };
    shape "LMTA" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "LFSH" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "RCTL" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "RALT" { { [ 22,18] }, { [2,1], [ 20,17] } };
    shape "RMTA" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "RTSH" { { [ 47,18] }, { [2,1], [ 45,17] } };
    shape "SPCE" { { [123,18] }, { [2,1], [121,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPEN" { { [ 18,37] }, { [2,1], [ 16,36] } };
    // Macintosh keyboards have a special sysctl key at the top right
    shape "AAPL" { 
        { [ 0,0], [ 18,0], [ 18,18], [ 0,18] },
        { [ 1,1], [ 17,1], [ 17,17], [ 1,17] },
        { [ 8,5], [ 8,12], [  2,9] } };

    shape "LEDS" { cornerRadius = 0, { [ 55,19] } };
    shape "LED"  { cornerRadius = 0, { [  8, 2] } };

    solid "LedPanel" {
	shape= "LEDS";
        top = 48;
        left = 378;
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top = 50;
    indicator.shape= "LED";
    indicator "NumLock"    { left = 381; };
    indicator "CapsLock"   { left = 398; };
    indicator "ScrollLock" { left = 415; };
    text.top= 55;
    text.color= "black";
    text "NumLockLabel"    { left = 381; text = "Num\nLock";    };
    text "CapsLockLabel"   { left = 398; text = "Caps\nLock";   };
    text "ScrollLockLabel" { left = 415; text = "Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;

    section "Function" {
        top = 48;
	row {
	    top= 1;
            keys { <ESC>, 
                   { <FK01>, 20 }, <FK02>, <FK03>, <FK04>,
                   { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
                   { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
                   { <PRSC>, 10 }, <SCLK>, <PAUS>,
                   // This is the sysctl key on macintosh keyboards
                   // keycode is 222 with a 4.21 kernel, which is <I5E>
                   { <I5E>, "AAPL", 67 }
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
        top = 87;
	row {
	    top= 1;
            keys { { <TLDE>, "TLDE" }, <AE01>, <AE02>, <AE03>,
                   <AE04>, <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TAB" },  <AD01>, <AD02>, <AD03>,
                   <AD04>, <AD05>, <AD06>, <AD07>, <AD08>, <AD09>,
                   <AD10>, <AD11>, <AD12>, { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS" }, <AC01>, <AC02>, <AC03>,
                   <AC04>, <AC05>, <AC06>, <AC07>, <AC08>, <AC09>,
                   <AC10>, <AC11>, <BKSL>
	    };
	};
	row {
	    top= 58;
            keys { { <LFSH>, "LFSH" }, <LSGT>, <AB01>, <AB02>,
                   <AB03>, <AB04>, <AB05>, <AB06>, <AB07>, <AB08>,
                   <AB09>, <AB10>, { <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    keys { { <LCTL>, "LCTL" }, { <LALT>, "LALT" },
                   { <LWIN>, "LMTA" },
                   { <SPCE>, "SPCE" }, 
                   { <RWIN>, "RMTA" },
	           { <RALT>, "RALT" }, { <RCTL>, "RCTL" }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
        top = 87;
        left = 314;
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
        top = 87;
        left = 380;
	row {
	    top= 1;
            keys { <NMLK>, <KPEQ>, <KPDV>, <KPMU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, <KPAD> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPEN" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" },  <KPDL> };
	};
    }; // End of "Keypad" section

}; // End of "default" geometry


// This section describes the geometry of the "Apple Pro" keyboard
// included with NewWorld desktop machines
//
// It adds four new keysyms, labeled SDDN, SDUP, SDNO, EJCT.
//
// 2005/10 -- Simon Vallet <svallet@gmail.com>

xkb_geometry "applepro" {

    description= "Apple Pro Keyboard";
    width = 455;
    height = 150;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18, 18] }, { [2, 1], [ 16, 15] } };
    shape "FUNC" { { [ 18, 21] }, { [2, 1], [ 16, 16] } };
    shape "BKSP" { { [ 38, 18] }, { [2, 1], [ 36, 15] } };
    shape "TAB"  { { [ 29, 18] }, { [2, 1], [ 26, 15] } };
    shape "LFSH" { { [ 28, 18] }, { [2, 1], [ 26, 15] } };
    shape "RTSH" { { [ 47, 18] }, { [2, 1], [ 45, 15] } };

    shape "RTRN" {
        { [0,0],[27,0],[27,37],[4,37],[4,18],[0,18] }, 
        { [2,1],[25,1],[25,34],[6,34],[6,15],[2,15] } };

    shape "CAPS" { { [ 32, 18] }, { [2, 1], [ 26, 15] } };
    shape "LCTL" { { [ 28, 20] }, { [2, 1], [ 26, 17] } };
    shape "RCTL" { { [ 28, 20] }, { [2, 1], [ 26, 17] } };
    shape "LALT" { { [ 23, 20] }, { [2, 1], [ 21, 17] } };
    shape "RALT" { { [ 23, 20] }, { [2, 1], [ 21, 17] } };
    shape "LMTA" { { [ 28, 20] }, { [2, 1], [ 26, 17] } };
    shape "RMTA" { { [ 28, 20] }, { [2, 1], [ 26, 17] } };
    shape "SPCE" { { [121, 20] }, { [3, 1], [118, 17] } };
    shape "BOTM" { { [ 18, 20] }, { [2, 1], [ 16, 17] } }; 

    shape "KP0"  { { [ 37, 20] }, { [2, 1], [ 35, 17] } };
    shape "KPEN" { { [ 18, 39] }, { [2, 1], [ 16, 36] } };

    section.left = 7;
    row.left = 1;
    key.gap =  1;
    key.shape = "NORM";

    section "Function" {
       key.shape = "FUNC";
        top = 26;
       row {
           top= 1;
            keys { <ESC>, 
                   { <FK01>, 14 }, <FK02>, <FK03>, <FK04>,
                   { <FK05>, 14 }, <FK06>, <FK07>, <FK08>,
                   { <FK09>, 14 }, <FK10>, <FK11>, <FK12>,
                   { <PRSC>, 11 }, <SCLK>, <PAUS>,
                  { <SDDN>, 11 }, <SDUP>, <SDNO>, <EJCT>
            };
       };
    }; // End of "Function" section


    section "Alpha" {
        top = 48;
       row {
           top= 1;
            keys { <TLDE>, <AE01>, <AE02>, <AE03>,
                   <AE04>, <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
                  <AE10>, <AE11>, <AE12>, { <BKSP>, "BKSP" }
           };
       };
       row {
           top= 20;
           keys { { <TAB>, "TAB" },  <AD01>, <AD02>, <AD03>,
                   <AD04>, <AD05>, <AD06>, <AD07>, <AD08>, <AD09>,
                   <AD10>, <AD11>, <AD12>, { <RTRN>, "RTRN" }
           };
       };
       row {
           top= 39;
           keys { { <CAPS>, "CAPS" }, <AC01>, <AC02>, <AC03>,
                   <AC04>, <AC05>, <AC06>, <AC07>, <AC08>, <AC09>,
                   <AC10>, <AC11>, <BKSL>
           };
       };
       row {
           top= 58;
           keys { { <LFSH>, "LFSH" }, <LSGT>, <AB01>, <AB02>,
                   <AB03>, <AB04>, <AB05>, <AB06>, <AB07>, <AB08>,
                   <AB09>, <AB10>, { <RTSH>, "RTSH" }
           };
       };
       row {
           top= 77;
           keys { { <LCTL>, "LCTL" }, { <LALT>, "LALT" },
                       { <LWIN>, "LMTA" },
                       { <SPCE>, "SPCE" }, 
                       { <RWIN>, "RMTA" },
                       { <RALT>, "RALT" }, { <RCTL>, "RCTL" }
           };
       };
    }; // End of "Alpha" section

    section "Editing" {
        top = 48;
        left = 303;
       row {
           top= 1;
           keys { <INS>, <HOME>, <PGUP> };
       };
        row {
           top= 20;
           keys { <DELE>, <END>, <PGDN> };
       };
       row {
           top= 58;
           left= 20;
           keys { <UP> };
       };
       row {
           top= 77;
           key.shape = "BOTM";
           keys { <LEFT>, <DOWN>, <RGHT> };
       };
    }; // End of "Editing" section

    section "Keypad" {
        top = 48;
        left = 370;
       row {
           top= 1;
            keys { <NMLK>, <KPEQ>, <KPDV>, <KPMU> };
       };
       row {
           top= 20;
           keys { <KP7>, <KP8>, <KP9>, <KPSU> };
       };
       row {
           top= 39;
           keys { <KP4>, <KP5>, <KP6>, <KPAD> };
       };
       row {
           top= 58;
           keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPEN" } };
       };
       row {
           top= 77;
           keys { { <KP0>, "KP0" },  { <KPDL>, "BOTM" } };
       };
    }; // End of "Keypad" section

}; // End of "applepro" geometry

xkb_geometry "macbook78" {

    description= "Apple laptop 78-key (US)";
    width= 273;
    height= 110;

    shape.cornerRadius= 0;
    shape "ESC"  { { [ 21,9] }, cornerRadius=1, { [0,1], [ 19,8] } };
    shape "FUNC" { { [ 18,9] }, cornerRadius=1, { [2,1], [ 16,8] } };
    shape "EJCT" { { [ 20,9] }, cornerRadius=1, { [2,1], [ 20,8] } };
    shape "DEGR" { { [ 16,18] }, cornerRadius=1, { [0,2], [ 14,16] } };
    shape "NORM" { { [ 18,18] }, cornerRadius=1, { [2,2], [ 16,16] } };
    shape "BKSP" { { [ 25,18] }, cornerRadius=1, { [2,2], [ 25,16] } };
    shape "TABK" { { [ 24,18] }, cornerRadius=1, { [0,2], [ 22,16] } };
    shape "BKSL" { { [ 17,18] }, cornerRadius=1, { [2,2], [17,16] } };
    shape "RTRN" { { [ 31,18] }, cornerRadius=1, { [2,2], [31,16] } };
    shape "CAPS" { { [ 29,18] }, cornerRadius=1, { [0,2], [ 27,16] } };
    shape "LFSH" { { [ 40,18] }, cornerRadius=1, { [0,2], [ 38,16] } };
    shape "RTSH" { { [ 39,18] }, cornerRadius=1, { [2,2], [ 39,16] } };
    shape "APPL" { { [ 23,18] }, cornerRadius=1, { [2,2], [ 21,16] } };
    shape "SPCE" { { [ 94,18] }, cornerRadius=1, { [2,2], [ 92,16] } };
    shape "ARRO" { { [ 17,9] }, cornerRadius=1, { [2,1], [ 15,8] } };

    shape "LED"  { cornerRadius= 1, { [  2,  2 ] } };

    indicator.onColor= "green";
    indicator.offColor= "gray";
    indicator.shape= "LED";
    indicator "Num Lock"   { top=4; left= 119; };
    indicator "Caps Lock"  { top=53; left= 4; };

    section.left=0;
    row.left= 1;
    key.shape= "FUNC";
    key.gap= 1;
    section "Function" {
	top= 0;
	row {
	    top= 1;
	    keys {  {<ESC>, "ESC" },
		    <FK01>, <FK02>, <FK03>, <FK04>,
		    <FK05>, <FK06>, <FK07>, <FK08>,
		    <FK09>, <FK10>, <FK11>, <FK12>,
                    {<K6C>, "EJCT" }
	    };
	};
    }; // End of "Function" section

    key.shape= "NORM";
    section "Alpha" {
	top= 10;
	row {
	    top= 1;
	    keys { {<TLDE>, "DEGR"},
                   <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>,
                   <AE09>, <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK"},
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, 
                   { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, 
                   { <RTRN>, "RTRN" }
	    };
        };
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH"},
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		   { <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    keys { {<FN>, "DEGR"}, 
                   <LCTL>, <LALT>, 
                   {<LMTA>, "APPL"},
                   {<SPCE>, "SPCE" }, 
                   {<RMTA>, "APPL"},
                   <KPEN>
	    };
	};

    }; // End of "Alpha" section

    key.shape= "ARRO";
    section "Editing" {
        top = 86;
        left = 217;
	row {
	    top= 1;
	    left= 19;
	    keys { <UP> };
	};
	row {
	    top= 10;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

};

xkb_geometry "macbook79" {

    description= "Apple laptop 79-key (Intl)";
    width= 273;
    height= 110;

    shape.cornerRadius= 0;
    shape "ESC"  { { [ 21,9] }, cornerRadius=1, { [0,1], [ 19,8] } };
    shape "FUNC" { { [ 18,9] }, cornerRadius=1, { [2,1], [ 16,8] } };
    shape "EJCT" { { [ 20,9] }, cornerRadius=1, { [2,1], [ 20,8] } };
    shape "DEGR" { { [ 16,18] }, cornerRadius=1, { [0,2], [ 14,16] } };
    shape "NORM" { { [ 18,18] }, cornerRadius=1, { [2,2], [ 16,16] } };
    shape "BKSP" { { [ 25,18] }, cornerRadius=1, { [2,2], [ 25,16] } };
    shape "TABK" { { [ 24,18] }, cornerRadius=1, { [0,2], [ 22,16] } };
    shape "RTRN" { { [ 0,0], [17,0], [17,37], [5,37], [5, 18], [0,18], [0,0] },
                   cornerRadius=1, 
	           { [ 2,2], [15,2], [15,35], [7,35], [7, 16], [2,16] } 
                 };
    shape "CAPS" { { [ 29,18] }, cornerRadius=1, { [0,2], [ 27,16] } };
    shape "LFSH" { { [ 21,18] }, cornerRadius=1, { [0,2], [ 19,16] } };
    shape "RTSH" { { [ 39,18] }, cornerRadius=1, { [2,2], [ 39,16] } };
    shape "APPL" { { [ 23,18] }, cornerRadius=1, { [2,2], [ 21,16] } };
    shape "SPCE" { { [ 94,18] }, cornerRadius=1, { [2,2], [ 92,16] } };
    shape "ARRO" { { [ 17,9] }, cornerRadius=1, { [2,1], [ 15,8] } };

    shape "LED"  { cornerRadius= 1, { [  2,  2 ] } };

    indicator.onColor= "green";
    indicator.offColor= "gray";
    indicator.shape= "LED";
    indicator "Num Lock"   { top=4; left= 119; };
    indicator "Caps Lock"  { top=53; left= 4; };

    section.left=0;
    row.left= 1;
    key.shape= "FUNC";
    key.gap= 1;
    section "Function" {
	top= 0;
	row {
	    top= 1;
	    keys {  {<ESC>, "ESC" },
		    <FK01>, <FK02>, <FK03>, <FK04>,
		    <FK05>, <FK06>, <FK07>, <FK08>,
		    <FK09>, <FK10>, <FK11>, <FK12>,
                    {<K6C>, "EJCT" }
	    };
	};
    }; // End of "Function" section

    key.shape= "NORM";
    section "Alpha" {
	top= 10;
	row {
	    top= 1;
	    keys { {<TLDE>, "DEGR"},
                   <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>,
                   <AE09>, <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK"},
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <BKSL>
	    };
        };
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH"},
		   <LSGT>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		   { <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    keys { {<FN>, "DEGR"}, 
                   <LCTL>, <LALT>, 
                   {<LWIN>, "APPL"},
                   {<SPCE>, "SPCE" }, 
                   {<RALT>, "APPL"},
                   <KPEN>
	    };
	};
    }; // End of "Alpha" section

    key.shape= "ARRO";
    section "Editing" {
        top = 86;
        left = 217;
	row {
	    top= 1;
	    left= 19;
	    keys { <UP> };
	};
	row {
	    top= 10;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

};


// Aluminium Keyboard, ANSI model (United States, 109 keys)
xkb_geometry "applealu_ansi" {

    width=       430;
    height=      113.5;

    baseColor=   "white";
    labelColor=  "black";
    xfont=       "-*-helvetica-medium-r-normal--*-80-*-*-*-*-iso8859-1";
    description= "Aluminium Keyboard (ANSI)";

    shape "NORM" {
        corner= 1,
        { [  15.5,  15 ] }
    };
    shape "FUNC" {
        corner= 1,
        { [  16.1,   9 ] }
    };
    shape "FUNS" {
        corner= 1,
        { [  15.5,  9 ] }
    };
    shape "BKSP" {
        corner= 1,
        { [  24.5,  15 ] }
    };
    shape "TAB" {
        corner= 1,
        { [  24.5,  15 ] }
    };
    shape "RTRN" {
        corner= 1,
        { [  29.5,  15 ] }
    };
    shape "CAPS" {
        corner= 1,
        { [  29.5,  15 ] }
    };
    shape "LCTL" {
        corner= 1,
        { [  25,  18	 ] }
    };
    shape "LALT" {
        corner= 1,
        { [  20,  18 ] }
    };
    shape "LMTA" {
        corner= 1,
        { [  25,  18 ] }
    };
    shape "LFSH" {
        corner= 1,
        { [  39,  15 ] }
    };
    shape "RCTL" {
        corner= 1,
        { [  25,  18 ] }
    };
    shape "RALT" {
        corner= 1,
        { [  20,  18 ] }
    };
    shape "RMTA" {
        corner= 1,
        { [  25,  18 ] }
    };
    shape "RTSH" {
        corner= 1,
        { [  39,  15 ] }
    };
    shape "SPCE" {
        corner= 1,
        { [ 110.5,  18 ] }
    };
    shape "KP0" {
        corner= 1,
        { [  34.5,  18 ] }
    };
    shape "KPEN" {
        corner= 1,
        { [  15.5,  36.5 ] }
    };
    shape "KPDT" {
        corner= 1,
        { [  15.5,  18 ] }
    };
    shape "LED" { 
        corner= 0.5,
        { [   1.5,   1.5 ] }
    };

    section "Function" {
        key.color= "white";
        priority=  7;
        top=       4.5;
        left=      4.7;
        width=     420.5;
        height=    10;
        row {
            top=  0;
            left= 0;
            keys {
                {  <ESC>, "FUNC",   0 },   { <FK01>, "FUNC",   3.6 },
                { <FK02>, "FUNC",   3.5 }, { <FK03>, "FUNC",   3.6 },
                { <FK04>, "FUNC",   3.5 }, { <FK05>, "FUNC",   3.6 },
                { <FK06>, "FUNC",   3.5 }, { <FK07>, "FUNC",   3.6 },
                { <FK08>, "FUNC",   3.5 }, { <FK09>, "FUNC",   3.6 },
                { <FK10>, "FUNC",   3.5 }, { <FK11>, "FUNC",   3.6 },
                { <FK12>, "FUNC",   3.5 }, { <I169>, "FUNC",   3.5 },
                { <FK13>, "FUNS",  11.5 }, { <FK14>, "FUNS",   3.5 },
                { <FK15>, "FUNS",   3.5 }, { <FK16>, "FUNS",  11.5 },
                { <FK17>, "FUNS",   3.5 }, { <FK18>, "FUNS",   3.5 },
                { <FK19>, "FUNS",   3.5 }
            };
        };
    }; // End of "Function" section

    section "Alpha" {
        key.color= "white";
        priority=  8;
        top=       17;
        left=      5;
        width=     271.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                { <TLDE>, "NORM",   0 },   { <AE01>, "NORM",   3.5 },
                { <AE02>, "NORM",   3.5 }, { <AE03>, "NORM",   3.5 },
                { <AE04>, "NORM",   3.5 }, { <AE05>, "NORM",   3.5 },
                { <AE06>, "NORM",   3.5 }, { <AE07>, "NORM",   3.5 },
                { <AE08>, "NORM",   3.5 }, { <AE09>, "NORM",   3.5 },
                { <AE10>, "NORM",   3.5 }, { <AE11>, "NORM",   3.5 },
                { <AE12>, "NORM",   3.5 }, { <BKSP>, "BKSP",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                {  <TAB>, "TAB",   0 },    { <AD01>, "NORM",   3.5 },
                { <AD02>, "NORM",   3.5 }, { <AD03>, "NORM",   3.5 },
                { <AD04>, "NORM",   3.5 }, { <AD05>, "NORM",   3.5 },
                { <AD06>, "NORM",   3.5 }, { <AD07>, "NORM",   3.5 },
                { <AD08>, "NORM",   3.5 }, { <AD09>, "NORM",   3.5 },
                { <AD10>, "NORM",   3.5 }, { <AD11>, "NORM",   3.5 },
                { <AD12>, "NORM",   3.5 }, { <BKSL>, "NORM",   3.5 }

            };
        };
        row {
            top=  37;
            left= 0;
            keys {
                { <CAPS>, "CAPS",   0 },   { <AC01>, "NORM",   3.5 },
                { <AC02>, "NORM",   3.5 }, { <AC03>, "NORM",   3.5 },
                { <AC04>, "NORM",   3.5 }, { <AC05>, "NORM",   3.5 },
                { <AC06>, "NORM",   3.5 }, { <AC07>, "NORM",   3.5 },
                { <AC08>, "NORM",   3.5 }, { <AC09>, "NORM",   3.5 },
                { <AC10>, "NORM",   3.5 }, { <AC11>, "NORM",   3.5 },
		{ <RTRN>, "RTRN",   3.5 }
            };
        };
        row {
            top=  55.5;
            left= 0;
            keys {
                { <LFSH>, "LFSH",   0 }, 
                { <AB01>, "NORM",   3.5 }, { <AB02>, "NORM",   3.5 },
                { <AB03>, "NORM",   3.5 }, { <AB04>, "NORM",   3.5 },
                { <AB05>, "NORM",   3.5 }, { <AB06>, "NORM",   3.5 },
                { <AB07>, "NORM",   3.5 }, { <AB08>, "NORM",   3.5 },
                { <AB09>, "NORM",   3.5 }, { <AB10>, "NORM",   3.5 },
                { <RTSH>, "RTSH",   3.5 }
            };
        };
        row {
            top=  74;
            left= 0;
            keys {
                { <LCTL>, "LCTL",   0 },   { <LALT>, "LALT",   3.5 },
                { <LMTA>, "LMTA",   3.5 }, { <SPCE>, "SPCE",   3.5 },
                { <RMTA>, "RMTA",   3.5 }, { <RALT>, "RALT",   3.5 },
                { <RCTL>, "RCTL",   3.5 }
            };
        };
    }; // End of "Alpha" section

    section "Editing" {
        key.color= "white";
        priority=  9;
        top=       17;
        left=      287.7;
        width=     53.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                {  <INS>, "NORM",   0 },  { <HOME>, "NORM",   3.5 },
                { <PGUP>, "NORM",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                { <DELE>, "NORM",   0 },  {  <END>, "NORM",   3.5 },
                { <PGDN>, "NORM",   3.5 }
            };
        };
        row {
            top=  58.5;
            left= 19;
            keys {
                {   <UP>, "NORM",   0 }
            };
        };
        row {
            top=  77;
            left= 0;
            keys {
                { <LEFT>, "NORM",   0 },  { <DOWN>, "NORM",   3.5 },
                { <RGHT>, "NORM",   3.5 }
            };
        };
    }; // End of "Editing" section

    section "Keypad" {
        key.color= "white";
        priority=  10;
        top=       17;
        left=      352.7;
        width=     72.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                { <NMLK>, "NORM",   0 },   { <KPEQ>, "NORM",   3.5 },
                { <KPDV>, "NORM",   3.5 }, { <KPMU>, "NORM",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                {  <KP7>, "NORM",   0 },   {  <KP8>, "NORM",   3.5 },
                {  <KP9>, "NORM",   3.5 }, { <KPSU>, "NORM",   3.5 }
            };
        };
        row {
            top=  37;
            left= 0;
            keys {
                {  <KP4>, "NORM",   0 },   {  <KP5>, "NORM",   3.5 },
                {  <KP6>, "NORM",   3.5 }, { <KPAD>, "NORM",   3.5 }
            };
        };
        row {
            top=  55.5;
            left= 0;
            keys {
                {  <KP1>, "NORM",   0 },   {  <KP2>, "NORM",   3.5 },
                {  <KP3>, "NORM",   3.5 }, { <KPEN>, "KPEN",   3.5 }
            };
        };
        row {
            top=  74;
            left= 0;
            keys {
                {  <KP0>, "KP0",   0 }, { <KPDL>, "KPDT",   3.5 }
            };
        };
    }; // End of "Keypad" section

    indicator "Caps Lock" {
        top=      56;
        left=     6.7;
        priority= 2;
        onColor= "green";
        offColor= "gray";
        shape= "LED";
    };

};

// Aluminium Keyboard, ISO model (International, 110 keys)
xkb_geometry "applealu_iso" {

    width=       430;
    height=      113.5;

    baseColor=   "white";
    labelColor=  "black";
    xfont=       "-*-helvetica-medium-r-normal--*-80-*-*-*-*-iso8859-1";
    description= "Aluminium Keyboard (ISO)";

    shape "NORM" {
        corner= 1,
        { [  15.5,  15 ] }
    };
    shape "FUNC" {
        corner= 1,
        { [  16.1,   9 ] }
    };
    shape "FUNS" {
        corner= 1,
        { [  15.5,  9 ] }
    };
    shape "BKSP" {
        corner= 1,
        { [  24.5,  15 ] }
    };
    shape "TAB" {
        corner= 1,
        { [  24.5,  15 ] }
    };
    shape "RTRN" {
        corner= 1,
        { [   0,   0 ], [  15.5  ,   0 ], [  15.5  ,  33.5 ], [   5,  33.5 ],
          [   5,  15 ], [   0,  15 ] }
    };
    shape "CAPS" {
        corner= 1,
        { [  29.5,  15 ] }
    };
    shape "LCTL" {
        corner= 1,
        { [  25,  18	 ] }
    };
    shape "LALT" {
        corner= 1,
        { [  20,  18 ] }
    };
    shape "LMTA" {
        corner= 1,
        { [  25,  18 ] }
    };
    shape "LFSH" {
        corner= 1,
        { [  20,  15 ] }
    };
    shape "RCTL" {
        corner= 1,
        { [  25,  18 ] }
    };
    shape "RALT" {
        corner= 1,
        { [  20,  18 ] }
    };
    shape "RMTA" {
        corner= 1,
        { [  25,  18 ] }
    };
    shape "RTSH" {
        corner= 1,
        { [  39,  15 ] }
    };
    shape "SPCE" {
        corner= 1,
        { [ 110.5,  18 ] }
    };
    shape "KP0" {
        corner= 1,
        { [  34.5,  18 ] }
    };
    shape "KPEN" {
        corner= 1,
        { [  15.5,  36.5 ] }
    };
    shape "KPDT" {
        corner= 1,
        { [  15.5,  18 ] }
    };
    shape "LED" { 
        corner= 0.5,
        { [   1.5,   1.5 ] }
    };

    section "Function" {
        key.color= "white";
        priority=  7;
        top=       4.5;
        left=      4.7;
        width=     420.5;
        height=    10;
        row {
            top=  0;
            left= 0;
            keys {
                {  <ESC>, "FUNC",   0 },   { <FK01>, "FUNC",   3.6 },
                { <FK02>, "FUNC",   3.5 }, { <FK03>, "FUNC",   3.6 },
                { <FK04>, "FUNC",   3.5 }, { <FK05>, "FUNC",   3.6 },
                { <FK06>, "FUNC",   3.5 }, { <FK07>, "FUNC",   3.6 },
                { <FK08>, "FUNC",   3.5 }, { <FK09>, "FUNC",   3.6 },
                { <FK10>, "FUNC",   3.5 }, { <FK11>, "FUNC",   3.6 },
                { <FK12>, "FUNC",   3.5 }, { <I169>, "FUNC",   3.5 },
                { <FK13>, "FUNS",  11.5 }, { <FK14>, "FUNS",   3.5 },
                { <FK15>, "FUNS",   3.5 }, { <FK16>, "FUNS",  11.5 },
                { <FK17>, "FUNS",   3.5 }, { <FK18>, "FUNS",   3.5 },
                { <FK19>, "FUNS",   3.5 }
            };
        };
    }; // End of "Function" section

    section "Alpha" {
        key.color= "white";
        priority=  8;
        top=       17;
        left=      5;
        width=     271.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                { <TLDE>, "NORM",   0 },   { <AE01>, "NORM",   3.5 },
                { <AE02>, "NORM",   3.5 }, { <AE03>, "NORM",   3.5 },
                { <AE04>, "NORM",   3.5 }, { <AE05>, "NORM",   3.5 },
                { <AE06>, "NORM",   3.5 }, { <AE07>, "NORM",   3.5 },
                { <AE08>, "NORM",   3.5 }, { <AE09>, "NORM",   3.5 },
                { <AE10>, "NORM",   3.5 }, { <AE11>, "NORM",   3.5 },
                { <AE12>, "NORM",   3.5 }, { <BKSP>, "BKSP",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                {  <TAB>, "TAB",   0 },   { <AD01>, "NORM",   3.5 },
                { <AD02>, "NORM",   3.5 }, { <AD03>, "NORM",   3.5 },
                { <AD04>, "NORM",   3.5 }, { <AD05>, "NORM",   3.5 },
                { <AD06>, "NORM",   3.5 }, { <AD07>, "NORM",   3.5 },
                { <AD08>, "NORM",   3.5 }, { <AD09>, "NORM",   3.5 },
                { <AD10>, "NORM",   3.5 }, { <AD11>, "NORM",   3.5 },
                { <AD12>, "NORM",   3.5 }, { <RTRN>, "RTRN",   3.5 }
            };
        };
        row {
            top=  37;
            left= 0;
            keys {
                { <CAPS>, "CAPS",   0 },   { <AC01>, "NORM",   3.5 },
                { <AC02>, "NORM",   3.5 }, { <AC03>, "NORM",   3.5 },
                { <AC04>, "NORM",   3.5 }, { <AC05>, "NORM",   3.5 },
                { <AC06>, "NORM",   3.5 }, { <AC07>, "NORM",   3.5 },
                { <AC08>, "NORM",   3.5 }, { <AC09>, "NORM",   3.5 },
                { <AC10>, "NORM",   3.5 }, { <AC11>, "NORM",   3.5 },
                { <BKSL>, "NORM",   3.5 }
            };
        };
        row {
            top=  55.5;
            left= 0;
            keys {
                { <LFSH>, "LFSH",   0 },   { <LSGT>, "NORM",   3.5 },
                { <AB01>, "NORM",   3.5 }, { <AB02>, "NORM",   3.5 },
                { <AB03>, "NORM",   3.5 }, { <AB04>, "NORM",   3.5 },
                { <AB05>, "NORM",   3.5 }, { <AB06>, "NORM",   3.5 },
                { <AB07>, "NORM",   3.5 }, { <AB08>, "NORM",   3.5 },
                { <AB09>, "NORM",   3.5 }, { <AB10>, "NORM",   3.5 },
                { <RTSH>, "RTSH",   3.5 }
            };
        };
        row {
            top=  74;
            left= 0;
            keys {
                { <LCTL>, "LCTL",   0 },   { <LALT>, "LALT",   3.5 },
                { <LMTA>, "LMTA",   3.5 }, { <SPCE>, "SPCE",   3.5 },
                { <RMTA>, "RMTA",   3.5 }, { <RALT>, "RALT",   3.5 },
                { <RCTL>, "RCTL",   3.5 }
            };
        };
    }; // End of "Alpha" section

    section "Editing" {
        key.color= "white";
        priority=  9;
        top=       17;
        left=      287.7;
        width=     53.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                {  <INS>, "NORM",   0 },  { <HOME>, "NORM",   3.5 },
                { <PGUP>, "NORM",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                { <DELE>, "NORM",   0 },  {  <END>, "NORM",   3.5 },
                { <PGDN>, "NORM",   3.5 }
            };
        };
        row {
            top=  58.5;
            left= 19;
            keys {
                {   <UP>, "NORM",   0 }
            };
        };
        row {
            top=  77;
            left= 0;
            keys {
                { <LEFT>, "NORM",   0 },  { <DOWN>, "NORM",   3.5 },
                { <RGHT>, "NORM",   3.5 }
            };
        };
    }; // End of "Editing" section

    section "Keypad" {
        key.color= "white";
        priority=  10;
        top=       17;
        left=      352.7;
        width=     72.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                { <NMLK>, "NORM",   0 },   { <KPEQ>, "NORM",   3.5 },
                { <KPDV>, "NORM",   3.5 }, { <KPMU>, "NORM",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                {  <KP7>, "NORM",   0 },   {  <KP8>, "NORM",   3.5 },
                {  <KP9>, "NORM",   3.5 }, { <KPSU>, "NORM",   3.5 }
            };
        };
        row {
            top=  37;
            left= 0;
            keys {
                {  <KP4>, "NORM",   0 },   {  <KP5>, "NORM",   3.5 },
                {  <KP6>, "NORM",   3.5 }, { <KPAD>, "NORM",   3.5 }
            };
        };
        row {
            top=  55.5;
            left= 0;
            keys {
                {  <KP1>, "NORM",   0 },   {  <KP2>, "NORM",   3.5 },
                {  <KP3>, "NORM",   3.5 }, { <KPEN>, "KPEN",   3.5 }
            };
        };
        row {
            top=  74;
            left= 0;
            keys {
                {  <KP0>, "KP0",   0 }, { <KPDL>, "KPDT",   3.5 }
            };
        };
    }; // End of "Keypad" section

    indicator "Caps Lock" {
        top=      56;
        left=     6.7;
        priority= 2;
        onColor= "green";
        offColor= "gray";
        shape= "LED";
    };

};

// Aluminium Keyboard, JIS model (Japanese, 112 keys)
xkb_geometry "applealu_jis" {

    width=       430;
    height=      113.5;

    baseColor=   "white";
    labelColor=  "black";
    xfont=       "-*-helvetica-medium-r-normal--*-80-*-*-*-*-iso8859-1";
    description= "Aluminium Keyboard (JIS)";

    shape "NORM" {
        corner= 1,
        { [  15.5,  15 ] }
    };
    shape "FUNC" {
        corner= 1,
        { [  16.1,   9 ] }
    };
    shape "FUNS" {
        corner= 1,
        { [  15.5,  9 ] }
    };
    shape "KEY1" {
        corner= 1,
        { [  24.5,  15 ] }
    };
    shape "BKSP" {
        corner= 1,
        { [  15.5,  15 ] }
    };
    shape "TAB" {
        corner= 1,
        { [  15.5,  15 ] }
    };
    shape "RTRN" {
        corner= 1,
        { [   0,   0 ], [  24.5  ,   0 ], [  24.5  ,  33.5 ], [   4.5,  33.5 ],
          [   4.5,  15 ], [   0,  15 ] }
    };
    shape "CAPS" {
        corner= 1,
        { [  35,  18 ] }
    };
    shape "LCTL" {
        corner= 1,
        { [  20,  15 ] }
    };
    shape "LALT" {
        corner= 1,
        { [  27,  18 ] }
    };
    shape "LMTA" {
        corner= 1,
        { [  27,  18 ] }
    };
    shape "LFSH" {
        corner= 1,
        { [  29.5,  15 ] }
    };
    shape "EISU" {
        corner= 1,
        { [  20,  18 ] }
    };
    shape "RCTL" {
        corner= 1,
        { [  27,  18 ] }
    };
    shape "RALT" {
        corner= 1,
        { [  27,  18 ] }
    };
    shape "RMTA" {
        corner= 1,
        { [  27,  18 ] }
    };
    shape "RTSH" {
        corner= 1,
        { [  29.5,  15 ] }
    };
    shape "KANA" {
        corner= 1,
        { [  20,  18 ] }
    };
    shape "SPCE" {
        corner= 1,
        { [ 64,  18 ] }
    };
    shape "KPDT" {
        corner= 1,
        { [  15.5,  18 ] }
    };
    shape "KPEN" {
        corner= 1,
        { [  15.5,  36.5 ] }
    };
    shape "LED" { 
        corner= 0.5,
        { [   1.5,   1.5 ] }
    };

    section "Function" {
        key.color= "white";
        priority=  7;
        top=       4.5;
        left=      4.7;
        width=     420.5;
        height=    10;
        row {
            top=  0;
            left= 0;
            keys {
                {  <ESC>, "FUNC",   0 }, { <FK01>, "FUNC",   3.6 },
                { <FK02>, "FUNC",   3.5 }, { <FK03>, "FUNC",   3.6 },
                { <FK04>, "FUNC",   3.5 }, { <FK05>, "FUNC",   3.6 },
                { <FK06>, "FUNC",   3.5 }, { <FK07>, "FUNC",   3.6 },
                { <FK08>, "FUNC",   3.5 }, { <FK09>, "FUNC",   3.6 },
                { <FK10>, "FUNC",   3.5 }, { <FK11>, "FUNC",   3.6 },
                { <FK12>, "FUNC",   3.5 }, { <I169>, "FUNC",   3.5 },
                { <FK13>, "FUNS",  11.5 }, { <FK14>, "FUNS",   3.5 },
                { <FK15>, "FUNS",   3.5 }, { <FK16>, "FUNS",  11.5 },
                { <FK17>, "FUNS",   3.5 }, { <FK18>, "FUNS",   3.5 },
                { <FK19>, "FUNS",   3.5 }
            };
        };
    }; // End of "Function" section

    section "Alpha" {
        key.color= "white";
        priority=  8;
        top=       17;
        left=      5;
        width=     271.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                { <AE01>, "KEY1",   0 },
                { <AE02>, "NORM",   3.5 }, { <AE03>, "NORM",   3.5 },
                { <AE04>, "NORM",   3.5 }, { <AE05>, "NORM",   3.5 },
                { <AE06>, "NORM",   3.5 }, { <AE07>, "NORM",   3.5 },
                { <AE08>, "NORM",   3.5 }, { <AE09>, "NORM",   3.5 },
                { <AE10>, "NORM",   3.5 }, { <AE11>, "NORM",   3.5 },
                { <AE12>, "NORM",   3.5 }, { <AE13>, "NORM",   3.5 },
                { <BKSP>, "BKSP",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                {  <TAB>,  "TAB",   0 },   { <AD01>, "NORM",   3.5 },
                { <AD02>, "NORM",   3.5 }, { <AD03>, "NORM",   3.5 },
                { <AD04>, "NORM",   3.5 }, { <AD05>, "NORM",   3.5 },
                { <AD06>, "NORM",   3.5 }, { <AD07>, "NORM",   3.5 },
                { <AD08>, "NORM",   3.5 }, { <AD09>, "NORM",   3.5 },
                { <AD10>, "NORM",   3.5 }, { <AD11>, "NORM",   3.5 },
                { <AD12>, "NORM",   3.5 }, { <RTRN>, "RTRN",   3.5 }
            };
        };
        row {
            top=  37;
            left= 0;
            keys {
                { <LCTL>, "LCTL",   0 },   { <AC01>, "NORM",   3.5 },
                { <AC02>, "NORM",   3.5 }, { <AC03>, "NORM",   3.5 },
                { <AC04>, "NORM",   3.5 }, { <AC05>, "NORM",   3.5 },
                { <AC06>, "NORM",   3.5 }, { <AC07>, "NORM",   3.5 },
                { <AC08>, "NORM",   3.5 }, { <AC09>, "NORM",   3.5 },
                { <AC10>, "NORM",   3.5 }, { <AC11>, "NORM",   3.5 },
                { <AC12>, "NORM",   3.5 }
            };
        };
        row {
            top=  55.5;
            left= 0;
            keys {
                { <LFSH>, "LFSH",   0 }, 
                { <AB01>, "NORM",   3.5 }, { <AB02>, "NORM",   3.5 },
                { <AB03>, "NORM",   3.5 }, { <AB04>, "NORM",   3.5 },
                { <AB05>, "NORM",   3.5 }, { <AB06>, "NORM",   3.5 },
                { <AB07>, "NORM",   3.5 }, { <AB08>, "NORM",   3.5 },
                { <AB09>, "NORM",   3.5 }, { <AB10>, "NORM",   3.5 },
                { <AB11>, "NORM",   3.5 }, { <RTSH>, "RTSH",   3.5 }
            };
        };
        row {
            top=  74;
            left= 0;
            keys {
                { <LALT>, "LALT",   0 },   { <LMTA>, "LMTA",   3.5 },
                { <EISU>, "EISU",   3.5 }, { <SPCE>, "SPCE",   3.5 },
                { <KANA>, "KANA",   3.5 }, { <RMTA>, "RMTA",   3.5 },
                { <RALT>, "RALT",   3.5 }, { <CAPS>, "CAPS",   3.5 }
            };
        };
    }; // End of "Alpha" section

    section "Editing" {
        key.color= "white";
        priority=  9;
        top=       17;
        left=      287.7;
        width=     53.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                {  <INS>, "NORM",   0 },  { <HOME>, "NORM",   3.5 },
                { <PGUP>, "NORM",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                { <DELE>, "NORM",   0 }, {  <END>, "NORM",   3.5 },
                { <PGDN>, "NORM",   3.5 }
            };
        };
        row {
            top=  58.5;
            left= 19;
            keys {
                {   <UP>, "NORM",   0 }
            };
        };
        row {
            top=  77;
            left= 0;
            keys {
                { <LEFT>, "NORM",   0 },  { <DOWN>, "NORM",   3.5 },
                { <RGHT>, "NORM",   3.5 }
            };
        };
    }; // End of "Editing" section

    section "Keypad" {
        key.color= "white";
        priority=  10;
        top=       17;
        left=      352.7;
        width=     72.5;
        height=    92;
        row {
            top=  0;
            left= 0;
            keys {
                { <NMLK>, "NORM",   0 },   { <KPEQ>, "NORM",   3.5 },
                { <KPDV>, "NORM",   3.5 }, { <KPMU>, "NORM",   3.5 }
            };
        };
        row {
            top=  18.5;
            left= 0;
            keys {
                {  <KP7>, "NORM",   0 },   {  <KP8>, "NORM",   3.5 },
                {  <KP9>, "NORM",   3.5 }, { <KPSU>, "NORM",   3.5 }
            };
        };
        row {
            top=  37;
            left= 0;
            keys {
                {  <KP4>, "NORM",   0 },   {  <KP5>, "NORM",   3.5 },
                {  <KP6>, "NORM",   3.5 }, { <KPAD>, "NORM",   3.5 }
            };
        };
        row {
            top=  55.5;
            left= 0;
            keys {
                {  <KP1>, "NORM",   0 },   {  <KP2>, "NORM",   3.5 },
                {  <KP3>, "NORM",   3.5 }, { <KPEN>, "KPEN",   3.5 }
            };
        };
        row {
            top=  74;
            left= 0;
            keys {
                {  <KP0>, "KPDT",   0 },  { <JPCM>, "KPDT",   3.5 },
                { <KPDL>, "KPDT",   3.5 }
            };
        };
    }; // End of "Keypad" section

    indicator "Caps Lock" {
        top=      93;
        left=     273.2;
        priority= 2;
        onColor= "green";
        offColor= "gray";
        shape= "LED";
    };

};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//

default xkb_geometry "pc101" {

    description= "HP PC101";
    width= 470;
    height= 210;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "BKSP" { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "BKSL" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "RTRN" { { [ 42,18] }, { [2,1], [ 40,17] } };
    shape "CAPS" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,17] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "SPCE" { { [132,18] }, { [2,1], [130,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,36] } };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 52;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 18 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 91;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LCTL>, { <LALT>, 20 },
		   { <SPCE>, "SPCE", color="white" },
		   <RALT>, { <RCTL>, 20 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 91;
	left= 310;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 91;
	left= 375;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "default" geometry

xkb_geometry "hil" {

    description= "HP hil";
    width= 455;
    height= 170;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "BKSP" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "TABK" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "BKSL" { { [ 24,18] }, { [2,1], [ 22,17] } };
    shape "RTRN" { { [ 38,18] }, { [2,1], [ 36,17] } };
    shape "LFSH" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "RTSH" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "SPCE" { { [151,18] }, { [2,1], [150,17] } };
    shape "KP0"  { { [ 38,18] }, { [2,1], [ 36,17] } };
    shape "KPTB" { { [ 18,38] }, { [2,1], [ 16,37] } };
    shape "TLDE" { { [ 24,18] }, { [2,1], [ 22,17] } };
    shape "FKT1" { { [ 17,14] }, { [2,1], [ 15,13] } };
    shape "FKT2" { { [ 23,14] }, { [2,1], [ 21,13] } };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 14;
	row {
	    top= 1;
	    keys {  { <BRK>, "FKT1" }, { <STOP>, "FKT1" } ,
		    { <FK01>, "FKT2", 10 }, { <FK02>, "FKT2" },
		    { <FK03>, "FKT2" }, { <FK04>, "FKT2" }, 
		    { <MENU>, "FKT1" }, { <SYST>, "FKT1" },
		    { <FK05>, "FKT2" }, { <FK06>, "FKT2" }, 
		    { <FK07>, "FKT2" }, { <FK08>, "FKT2" }, 
		    { <CLRL>, "FKT1", 10 }, { <CLR>, "FKT1" },
		    { <FK09>, "FKT1", 19 }, { <FK10>, "FKT1" },
		    { <FK11>, "FKT1" }, { <FK12>, "FKT1" }
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 52;
	row {
	    top= 1;
	    keys { { <TLDE>, "TLDE" }, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP" }, <INSL>, <DELL>
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, "BKSL" },
		   <INSC>, <DELC>
	    };
	};
	row {
	    top= 39;
	    keys { <CAPS>, <LCTL>,
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, "RTRN" },
		   <HOME>, <PGUP>
	    };
	};
	row {
	    top= 58;
	    keys {  <ESC>, { <LFSH>, "LFSH" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH" }, <SELE>,
		    <UP>, <PGDN>
	    };
	};
	row {
	    top= 77;
	    keys { <PRSC>, { <LALT>, 30 },
		   { <SPCE>, "SPCE" },
		   <RALT>, { <LEFT>, 30 }, <DOWN>, <RGHT>
	    };
	};
    }; // End of "Alpha" section

    section "Keypad" {
	top= 52;
	left= 360;
	row {
	    top= 1;
	    keys { <KPMU>, <KPDV>, <KPAD>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, <KPEN> };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, <KPSP> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPTB>, "KPTB" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

};


// Created by Alexander Pohoyda <alexander.pohoyda@gmx.net>
// Geometry specification for HP Omnibook keyboards.
// Compatible Models: 6100, 6000.

xkb_geometry "omnibook" {
    width = 282;
    height = 128;
    baseColor = "grey80";
    labelColor = "white";

    shape "FN0"  { cornerRadius = 1, { [15.5, 12] }, { [1, 0], [14.5, 11] } };
    shape "NORM" { cornerRadius = 1, { [18, 16] }, { [2, 0], [16, 14] } };
    shape "BKSP" { cornerRadius = 1, { [31, 16] }, { [2, 0], [29, 14] } };
    shape "TABK" { cornerRadius = 1, { [27, 16] }, { [2, 0], [25, 14] } };
    shape "CAPS" { cornerRadius = 1, { [32, 16] }, { [2, 0], [30, 14] } };
    shape "RTSH" { cornerRadius = 1, { [45, 16] }, { [2, 0], [43, 14] } };
    shape "MODK" { cornerRadius = 1, { [28, 16] }, { [2, 0], [26, 14] } };
    shape "SPCE" { cornerRadius = 1, { [90, 16] }, { [2, 0], [88, 14] } };
    shape "ARRS" { cornerRadius = 1, { [17, 12] }, { [2, 0], [15, 11] } };
    
    shape "LED"  { cornerRadius = 1, { [2, 4] } };

    shape "KEYS" { cornerRadius = 1,
                   { [0, 13],
                     [197, 13], [197, 0],
                     [280, 0], [280, 125],
                     [224, 125], [224, 112],
                     [0, 112] }
    };

    solid "KeyPanel" {
	shape = "KEYS";
	left = 1;
	top = 1;
	color = "black";
    };

    shape "NULL1" { cornerRadius = 1, { [54, 16] } };

    solid "NullPanel1" {
	shape = "NULL1";
	left = 226;
	top = 96;
	color = "grey80";
    };

    shape "NULL2" { cornerRadius = 1, { [19, 14] } };

    solid "NullPanel2" {
	shape = "NULL2";
	left = 243;
	top = 97;
	color = "black";
    };

    indicator.onColor = "green";
    indicator.offColor = "grey10";
    indicator.top = 4;
    indicator.shape = "LED";
    indicator "Caps Lock"    { left = 45; };
    indicator "Num Lock"     { left = 60; };
    indicator "Scroll Lock"  { left = 75; };
    indicator "HDDActivity" { onColor = "red"; left = 90; };

    key.color = "grey60";

    section "Function" {
        key.gap = 0.99;
        left = 1;
        top = 1;
	key.shape = "FN0";
	row {
	    left = 197;
	    top = 1;
	    keys {  <PRSC>, <PAUS>, <INS>, <HOME>, <PGUP> };
	};
	row {
	    top = 14;
	    keys {  <ESC>,
                    <FK01>, <FK02>, <FK03>, <FK04>,
		    <FK05>, <FK06>, <FK07>, <FK08>,
		    <FK09>, <FK10>, <FK11>, <FK12>,
                    <SCLK>, <DELE>, <END>, <PGDN>
	    };
	};
    }; // End of "Function" section

    section "Control" {
        left = 1;
	top = 34;
        key.gap = 1;
	row {
	    top = 62;
	    key.shape = "NORM";
	    keys { <LCTL>, <FN>, <LWIN>, <LALT>,
		   { <SPCE>, "SPCE" }, <RALT>, <MENU>, <RCTL>
	    };
	};
    }; // End of "Control" section

    section "Navigation" {
	key.shape = "ARRS";
	left = 225;
	top = 97;
        key.gap = 1.4;
	row {
	    left= 18;
	    top = 1;
	    keys { <UP> };
	};
	row {
	    top = 16;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Navigation" section

    shape "STIK" { cornerRadius = 4, { [7, 7] } };

    solid "STIK" {
	priority = 255;
	color = "red";
	shape = "STIK";
	top = 73;
	left = 126;
    };
};

// 86 keys
xkb_geometry "omnibook_intl" {
    include "hp(omnibook)"
    description = "HP Omnibook 6000/6100, Intl";

    shape "RTRN" { cornerRadius = 1,
                   { [22, 0], [22, 33], [5, 33], [5, 16], [0, 16], [0, 0] },
                   { [20, 0], [20, 31], [7, 31], [7, 14], [2, 14], [2, 0] } };
    shape "LFSH" { cornerRadius = 1, { [23, 16] }, { [2, 0], [21, 14] } };

    section "Alpha" {
	key.gap = 1;
	key.color = "grey60";
	key.shape = "NORM";
        left = 1;
	top = 27;
	row {
	    top = 1;
	    keys { <AE00>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top = 18;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top = 35;
	    keys { { <CAPS>, "CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <AC12>
	    };
	};
	row {
	    top = 52;
	    keys { { <LFSH>, "LFSH" }, <LSGT>,
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		   { <RTSH>, "RTSH" }
	    };
	};
    }; // End of "Alpha" section
};

xkb_geometry "mini110" {

	description= "HP Mini 110";
	width= 262;
	height= 106;

	shape.cornerRadius = 0;
	shape "FN0"  { { [ 14, 10 ] } , { [ 14, 10 ] } };
	shape "NORM" { { [ 16.7, 16 ] }   , { [ 16.7, 16 ] } };
	shape "TLDE" { { [ 12, 16 ] } , { [ 12, 16 ] } };
	shape "ONE"  { { [ 14, 16 ] }   , { [ 14, 16 ] } };
	shape "BKSP" { { [ 31.3, 16 ] }   , { [ 31.3, 16 ] } };
	shape "BKSL" { { [ 23.9, 16 ] } , { [ 23.9, 16 ] } };
	shape "CAPS" { { [ 22, 16 ] }   , { [ 22, 16 ] } };
	shape "RTRN" { { [ 36.3, 16 ] } , { [ 36.3, 16 ] } };
	shape "LFSH" { { [ 31, 16 ] }   , { [ 31, 16 ] } };
	shape "RTSH" { { [ 45, 16 ] } , { [ 45, 16 ] } };
	shape "CTLS" { { [ 16.5, 19 ] }   , { [ 16.5, 19 ] } };
	shape "SPCE" { { [ 78.4, 19 ] } , { [ 78.4, 19 ] } };
	shape "ARRW" { { [ 16.7, 9 ] }  , { [ 16.7, 9 ] } };

	key.gap=1;

	section "Function" {
		top=4;
		left=3;
		key.shape="FN0";
		row {
			keys {
				<ESC>, <FK01>, <FK02>, <FK03>, <FK04>, <FK05>,
				<FK06>, <FK07>, <FK08>, <FK09>, <FK10>, <FK11>,
				<FK12>, <PAUS>, <SCLK>, <INS>, <DELE>
			};
		};
	};

	section "Alphanum" {
		top=15;
		left=3;
		key.shape="NORM";
        row {
            top= 0;
            keys { { <TLDE>, "TLDE" } , { <AE01>, "ONE" }, <AE02>, <AE03>, <AE04>,
                   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
                   <AE10>, <AE11>, <AE12>,
                   { <BKSP>, "BKSP" }
            };
        };
        row {
            top= 17;
            keys { <TAB>, <AD01>, <AD02>, <AD03>, <AD04>, <AD05>,
                   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>,
                   <AD11>, <AD12>, { <BKSL>, "BKSL" }
            };
        };
        row {
            top= 34;
            keys { { <CAPS>, "CAPS" } ,
                   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>,
                   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>,
                   <AC11>, { <RTRN>, "RTRN" }
            };
        };
        row {
            top= 51;
            keys { { <LFSH>, "LFSH" },
                    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>,
                    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
                    { <RTSH>, "RTSH" }
            };
        };

	};

	section "Control" {
		top=83;
		left=3;
		key.shape="CTLS";
		row {
			keys {
				<LCTL>, <FN>, <LWIN>, <LALT>, { <SPCE>, "SPCE" }, <RALT>, <MENU>, <RCTL>
			};
		};
	};

	section "Arrows" {
		top=83;
		left=204.9;
		key.shape="ARRW";
		row {
			left= 17.7;
			keys {
				<UP>
			};
		};
		row {
			top = 10;
			keys {
				<LEFT>, <DOWN>, <RGHT>
			};
		};
	};

};

xkb_geometry "dv5" {

	height=118.4;
	width=310.6;

	description = "HP Pavilion dv5";

	shape.cornerRadius = 1;

	shape "ESC"  { { [20.0, 12.5] }, { [2.2, 1], [17.8, 10.5] } };
	shape "FN0"  { { [15.9, 12.5] }, { [2.2, 1], [13.7, 10.5] } };
	shape "DELE" { { [19.4, 12.5] }, { [2.2, 1], [17.2, 10.5] } };

	shape "NORM" { { [17.9, 18.3] }, { [2.2, 1], [15.7, 16.3] } };

	shape "BKSP" { { [36.1, 18.3] }, { [2.4, 1], [33.7, 16.3] } };

	shape "TABK" { { [26.8, 18.3] }, { [2.4, 1], [24.4, 16.3] } };
	shape "BKSL" { { [27.1, 18.3] }, { [2.4, 1], [24.7, 16.3] } };

	shape "CAPS" { { [31.6, 18.3] }, { [2.4, 1], [29.2, 16.3] } };
	shape "RTRN" { { [41.2, 18.3] }, { [2.4, 1], [39.3, 16.3] } };

	shape "LFSH" { { [41.5, 18.3] }, { [2.4, 1], [38.8, 16.3] } };
	shape "RTSH" { { [31.5, 18.3] }, { [2.4, 1], [29.1, 16.3] } };

	shape "LCTL" { { [22.4, 18.3] }, { [2.2, 1], [20.2, 16.3] } };
	shape "RCTL" { { [22.6, 18.3] }, { [2.2, 1], [20.4, 16.3] } };
	shape "CTLS" { { [17.9, 18.3] }, { [2.2, 1], [15.7, 16.3] } };
	shape "SPCE" { { [94.3, 18.3] }, { [2.5, 1], [91.8, 16.3] } };

	shape "ARRW" { { [17.9, 18.3] }, { [2.2, 1], [15.7, 16.3] } };

	shape "EDIT" { { [16.6, 18.3] }, { [2.2, 1], [14.4, 16.3] } };

	key.gap = 1.2;

	section "Function" {
		top=4.2;
		left=3;
		row {
			key.shape = "FN0";
			keys {
				{<ESC>, "ESC"},
				{2.9, <FK01>}, <FK02>, <FK03>, <FK04>,
				{2.9, <FK05>}, <FK06>, <FK07>, <FK08>,
				{2.9, <FK09>}, <FK10>, <FK11>, <FK12>,
				{2.9, <NMLK>}, <PAUS>, <INS>, {<DELE>, "DELE"}
			};
		};
	};

	section "Alpha" {
		top = 17.9;
		key.shape = "NORM";
		left = 3;

		row {
		    top = 0;
		    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
			   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
			   <AE10>, <AE11>, <AE12>, { <BKSP>, "BKSP" }
		    };
		};
		row {
		    top = 19.5;
		    keys { { <TAB>, "TABK" },
			   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
			   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
			   <AD11>, <AD12>, { <BKSL>, "BKSL" }
		    };
		};
		row {
		    top = 39;
		    keys { { <CAPS>, "CAPS" },
			   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
			   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
			   <AC11>, { <RTRN>, "RTRN" }
		    };
		};
		row {
		    top = 58.5;
		    keys { { <LFSH>, "LFSH" },
			   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
			   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
			   { <RTSH>, "RTSH" }
		    };
		};
	}; // End of "Alpha" section

	section "Controls" {
		top = 95.9;
		key.shape = "CTLS";
		left = 3;
		row {
		    top = 0;
		    keys { {<LCTL>, "LCTL"}, <FN>, <LWIN>, <LALT>, {<SPCE>, "SPCE"},
			   <RALT>, <MENU>, {<RCTL>, "RCTL"}
		    };
		};
	};

	section "Editing" {
		top = 16.5;
		left = 289.9;
		key.shape = "EDIT";
		key.gap = 1.4;
		row {
		    top = 0;
		    vertical = true;
		    keys {
				<HOME>, <PGUP>, <PGDN>, <END>
		    };
		};
	};

	section "Arrows" {
		top = 76.4;
		key.shape = "ARRW";
		left = 249.3;
		row {
			top = 0;
			left = 19.1;
			keys {
				<UP>
			};
		};
		row {
			top = 19.5;
			left = 0;
			keys {
				<LEFT>, <DOWN>, <RGHT>
			};
		};
	};
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//

default xkb_geometry "pc101" {

    description= "Generic 101-key PC";
    width= 470;
    height= 180;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "BKSP" { { [ 38,18] }, { [2,1], [ 36,16] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "BKSL" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "RTRN" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "CAPS" { { [ 33,18] }, { [2,1], [ 31,16] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,16] } };
    shape "MODK" { { [ 27,18] }, { [2,1], [ 25,16] } };
    shape "SPCE" { { [133,18] }, { [2,1], [131,16] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,16] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,35] } };

    shape "LEDS" { cornerRadius= 0, { [ 75 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  22;
	left= 377;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 37;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 382; };
    indicator "Caps Lock"    { left= 407; };
    indicator "Scroll Lock"  { left= 433; };
    text.top= 25;
    text.color= "black";
    text "NumLockLabel"		{ left= 378; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 403; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 428; text="Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 22;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 20 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LCTL>, { <LALT>, 21 },
		   { <SPCE>, "SPCE", color="white" },
		   <RALT>, { <RCTL>, 21 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "default" geometry

xkb_geometry "pc102" {

    description= "Generic 102-key PC";
    width= 470;
    height= 180;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "BKSP" { { [ 38,18] }, { [2,1], [ 36,16] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "BKSL" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "RTRN" {
        { [0,0], [28,0], [28,37], [5,37], [5,18], [0,18] },
        { [2,1], [26,1], [26,35], [7,35], [7,16], [2,16] } };
    shape "CAPS" { { [ 33,18] }, { [2,1], [ 31,16] } };
    shape "LFSH" { { [ 25,18] }, { [2,1], [ 23,16] } };
    shape "RTSH" { { [ 50,18] }, { [2,1], [ 48,16] } };
    shape "MODK" { { [ 27,18] }, { [2,1], [ 25,16] } };
    shape "SPCE" { { [134,18] }, { [2,1], [132,16] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,16] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,35] } };

    shape "LEDS" { cornerRadius= 0, { [ 75 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  22;
	left= 377;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 37;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 382; };
    indicator "Caps Lock"    { left= 407; };
    indicator "Scroll Lock"  { left= 433; };
    text.top= 25;
    text.color= "black";
    text "NumLockLabel"		{ left= 378; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 403; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 428; text="Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 22;
	row {
	    top= 1;
	    keys {  { <ESC>, "TABK", color="grey20" },
		    { <FK01>, 10 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, 
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <BKSL>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <LSGT>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LCTL>, { <LALT>, 20 },
		   { <SPCE>, "SPCE", color="white" },
		   <RALT>, { <RCTL>, 21 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "pc102" geometry

xkb_geometry "pc104" {

    description= "Generic 104-key PC";
    width= 470;
    height= 180;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "BKSP" { { [ 38,18] }, { [2,1], [ 36,16] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "BKSL" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "RTRN" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "CAPS" { { [ 33,18] }, { [2,1], [ 31,16] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,16] } };
    shape "MODK" { { [ 27,18] }, { [2,1], [ 25,16] } };
    shape "SMOD" { { [ 23,18] }, { [2,1], [ 21,16] } };
    shape "SPCE" { { [113,18] }, { [2,1], [111,16] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,16] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,35] } };

    shape "LEDS" { cornerRadius= 0, { [ 75 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  22;
	left= 377;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 37;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 382; };
    indicator "Caps Lock"    { left= 407; };
    indicator "Scroll Lock"  { left= 433; };
    text.top= 25;
    text.color= "black";
    text "NumLockLabel"		{ left= 378; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 403; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 428; text="Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 22;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 20 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "SMOD";
	    key.color= "grey20";
	    keys { { <LCTL>, "MODK" }, <LWIN>, <LALT>,
		   { <SPCE>, "SPCE", color="white" },
		   <RALT>, <RWIN>, <MENU>, <RCTL>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "pc104" geometry

xkb_geometry "pc105" {

    description= "Generic 105-key PC";
    width= 470;
    height= 180;

    shape.cornerRadius= 1;

    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "BKSP" { { [ 38,18] }, { [2,1], [ 36,16] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "BKSL" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "RTRN" {
        { [0,0], [28,0], [28,37], [5,37], [5,18], [0,18] } ,
        { [2,1], [26,1], [26,35], [7,35], [7,16], [2,16] } ,
        approx = { [5,0], [28,37] } };
    shape "CAPS" { { [ 33,18] }, { [2,1], [ 31,16] } };
    shape "LFSH" { { [ 25,18] }, { [2,1], [ 23,16] } };
    shape "RTSH" { { [ 50,18] }, { [2,1], [ 48,16] } };
    shape "MODK" { { [ 27,18] }, { [2,1], [ 25,16] } };
    shape "SMOD" { { [ 23,18] }, { [2,1], [ 21,16] } };
    shape "SPCE" { { [113,18] }, { [2,1], [111,16] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,16] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,35] } };

    shape "LEDS" { cornerRadius= 0, { [ 75 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  22;
	left= 377;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 37;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 382; };
    indicator "Caps Lock"    { left= 407; };
    indicator "Scroll Lock"  { left= 433; };
    text.top= 25;
    text.color= "black";
    text "NumLockLabel"		{ left= 378; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 403; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 428; text="Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 22;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 20 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN", color="grey20" } 
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <BKSL> 
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <LSGT>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "SMOD";
	    key.color= "grey20";
	    keys { { <LCTL>, "MODK" }, <LWIN>, <LALT>,
		   { <SPCE>, "SPCE", color="white" },
		   <RALT>, <RWIN>, <MENU>, <RCTL>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "pc105" geometry

// Created by Alexander Pohoyda <alexander.pohoyda@gmx.net>

xkb_geometry "pc86" {
    description = "Generic 86-key PC";
    width = 287;
    height = 143;
    baseColor = "grey20";

    shape "EDGE" { cornerRadius = 2, { [287, 143] } };
    shape "LED"  { cornerRadius = 2, { [3, 3] } };
    shape "LEDS" { cornerRadius = 0, { [75, 5] } };
    shape "KEYS" { cornerRadius = 0, { [271, 109] } };

    outline "Edges" {
        top = 0;
        left = 0;
        shape = "EDGE";
        color = "black";
    };

    solid "KeyPanel" {
	shape = "KEYS";
	left = 8;
	top = 22;
	color = "grey70";
    };

    solid "LedPanel" {
	shape = "LEDS";
	left = 212;
	top = 10;
	color = "black";
    };

    indicator.onColor = "green";
    indicator.offColor = "green30";
    indicator.top = 11;
    indicator.shape = "LED";
    indicator "Num Lock"     { left = 212 + 7; };
    indicator "Caps Lock"    { left = 212 + 23; };
    indicator "Scroll Lock"  { left = 212 + 39; };
    text.fontSize = 6;
    text.top = 10;
    text.color = "white";
    text "NumLockLabel"     { left = 212 + 7 + 5; text = "Num\nLock"; };
    text "CapsLockLabel"    { left = 212 + 23 + 5; text = "Caps\nLock"; };
    text "ScrollLockLabel"  { left = 212 + 39 + 5; text = "Scroll\nLock"; };

    shape.cornerRadius = 1;
    shape "SMALL"  { { [15, 12] }, { [1.5, 0], [13.5, 10] } };
    shape "NARR"   { { [13, 18] }, { [1.5, 0], [11.5, 14] } };
    shape "NORM"   { { [18, 18] }, { [3, 0], [15, 14] } };
    shape "NORM_1" { { [22, 18] }, { [4, 0], [22, 18] },
                                   { [7, 0], [19, 14] } };
    shape "WIDER"  { { [23, 18] }, { [3, 0], [20, 14] } };
    shape "WIDEST" { { [27, 18] }, { [3, 0], [24, 14] } };
    shape "SPCE"   { { [75, 18] }, { [3, 0], [72, 14] } };

    section "Function" {
	key.shape = "SMALL";
	key.gap = 0.99;
	key.color = "grey30";
	left = 8;
	top = 22;
	row {
	    top = 1;
	    keys {  <ESC>,
	    	    <FK01>, <FK02>, <FK03>, <FK04>,
		    <FK05>, <FK06>, <FK07>, <FK08>,
		    <FK09>, <FK10>, <FK11>, <FK12>,
		    <NMLK>, <PRSC>, <SCLK>, <PAUS>
	    };
	};
    }; // End of "Function" section

    section "Control" {
	key.shape = "NORM";
	key.gap = 1;
	key.color = "grey30";
        left = 8;
	top = 111;
	row {
	    top = 1;
	    keys { <LCTL>, <FN>, <LALT>,
	           { <SPCE>, shape="SPCE", 39 }, <RALT>,
		   <INS>, <DELE>
	    };
	};
    }; // End of "Control" section

    section "Editing" {
        key.shape = "NARR";
	key.gap = 1;
	key.color = "grey30";
	left = 265;
	top = 34;
        row.vertical = True;
	row {
	    top = 1;
	    keys { <HOME>, <PGUP>, <PGDN>, <END> };
	};
    }; // End of "Editing" section

    section "Navigation" {
	key.gap = 1;
	key.shape = "NARR";
	key.color = "grey30";
	left = 236;
	top = 92;
	row {
	    left = 14;
	    top = 1;
	    keys { <UP> };
	};
	row {
	    top = 20;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Navigation" section

    section "Alpha" {
	key.gap = 1;
	key.shape = "NORM";
	key.color = "grey10";
        left = 8;
	top = 35;
	row {
	    top = 1;
	    keys { { <AE01>, shape="NORM_1" }, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
                   { <BKSP>, shape="WIDER", color="grey30" }
	    };
	};
	row {
	    top = 20;
	    keys { { <TAB>, shape="NARR", color="grey30" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <AD13>, shape="NARR" }
	    };
	};
	row {
	    top = 39;
	    keys { { <CAPS>, color="grey30" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, shape="WIDEST", color="grey30" }
	    };
	};
	row {
	    top = 58;
	    keys { { <LFSH>, shape="WIDEST", color="grey30" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, shape="WIDER", color="grey30" }
	    };
	};
	row {
            left = 57;
	    top = 77;
	    keys { <AE00>, <LSGT> };
	};
    }; // End of "Alpha" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
}; // End of "pc86" geometry

xkb_geometry "pc104alt" {

    description= "Generic 104-key PC with L-shaped Enter key";
    width= 470;
    height= 210;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "BKSP" { { [ 19,18] }, { [2,1], [ 17,16] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,16] } };
//    shape "RTRN" { { [ 0,19 ], [ 0,37 ], [ 42,37 ], [ 42,0 ], [ 14,0 ], [ 14,19 ] },
//                   { [ 2,20 ], [ 2,35 ], [ 40,35 ], [ 40,1 ], [ 16,1 ], [ 16,20 ] },
//                   approx = { [ 17,21 ], [ 39,34 ] }
//                 };
    shape "RTRN" { { [ -14,19 ], [ -14,37 ], [ 28,37 ], [ 28,0 ], [ 0,0 ], [ 0,19 ] },
                   { [ -12,20 ], [ -12,35 ], [ 26,35 ], [ 26,1 ], [ 2,1 ], [ 2,20 ] },
                   approx = { [ 3,21 ], [ 25,34 ] }
                 };
    shape "CAPS" { { [ 33,18] }, { [2,1], [ 31,16] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,16] } };
    shape "MODK" { { [ 27,18] }, { [2,1], [ 25,16] } };
    shape "SMOD" { { [ 23,18] }, { [2,1], [ 21,16] } };
    shape "SPCE" { { [113,18] }, { [2,1], [111,16] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,16] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,35] } };

    shape "LEDS" { cornerRadius= 0, { [ 75 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  52;
	left= 377;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 67;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 382; };
    indicator "Caps Lock"    { left= 407; };
    indicator "Scroll Lock"  { left= 433; };
    text.top= 55;
    text.color= "black";
    text "NumLockLabel"		{ left= 378; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 403; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 428; text="Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 52;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 20 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 91;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, <BKSL>,
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
//		   <AD11>, <AD12>, { <RTRN>, -13, "RTRN", color="grey20" }
		   <AD11>, <AD12>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "SMOD";
	    key.color= "grey20";
	    keys { { <LCTL>, "MODK" }, <LWIN>, <LALT>,
		   { <SPCE>, "SPCE", color="white" },
		   <RALT>, <RWIN>, <MENU>, <RCTL>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 91;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 91;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "pc104alt" geometry
default xkb_geometry "omnikey101" {

    description= "North Gate Omnikey 101";
    width= 470;
    height= 175;

    shape.cornerRadius= 1;
    shape "NORM" { { [18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [34,18] }, { [2,1], [32,17] } };
    shape "TABK" { { [27,18] }, { [2,1], [25,17] } };
    shape "RTRN" {
	approx = { [15, 0], [40,37] },
	{ [15, 0], [40, 0], [40,37],
	  [ 0,37], [ 0,19], [15,19] },
	{ [17, 1], [38, 1], [38,36],
	  [ 2,36], [ 2,20], [17,20] }
    };
    shape "CAPS" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "LFSH" { { [ 41,18] }, { [2,1], [39,17] } };
    shape "RTSH" { { [ 30,18] }, { [2,1], [28,17] } };
    shape "MODK" { { [ 26,18] }, { [2,1], [24,17] } };
    shape "SPCE" { { [129,18] }, { [2,1], [127,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };

    shape "LEDS" { cornerRadius= 0, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  1,  3 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  32;
	left= 375;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 46.5;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 384; };
    indicator "Caps Lock"    { left= 409; };
    indicator "Scroll Lock"  { left= 434; };
    text.top= 34;
    text.color= "black";
    text "NumLockLabel"	{ left= 380.5; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 405; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 430; text="Scroll\nLock"; };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 32;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 18}, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 9 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 9 }, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 65;
	row {
	    top= 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>,
		   { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>,
		   { <RTRN>, "RTRN", -14, color="grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH", color="grey20" }, <BKSL>
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LALT>,
		   { <LCTL>, 23 },
		   { <SPCE>, "SPCE", color="white" },
		   <RCTL>,
		    { <RALT>, 23 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 32;
	left= 308;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 33;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 53;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 91;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 110;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 65;
	left= 374;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "default" geometry
default xkb_geometry "us" {

    description= "Atari TT (us)";
    width= 480;
    height= 173;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "BKSP" { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "RTRN" { approx = { [0,19], [32,37] },
		   { [ 14, 0], [32, 0], [32,37], [0,37], [0,19], [14,19] },
		   { [ 16, 1], [30, 1], [30,36], [2,36], [2,20], [16,20] } };
    shape "CTRL" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,17] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "SPCE" { { [172,18] }, { [2,1], [170,17] } };
    shape "FCTS" { { [ 28,10] }, { [2,1], [ 26,9] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPEN" { { [ 18,37] }, { [2,1], [ 16,36] } };

    section.left= 21;
    row.left= 1;
    key.shape = "NORM";
    key.gap=  1;
    section "Function" {
	top= 36;
	key.shape= "FCTS";
	row {
	    top= 1;
	    keys { <FK01>, <FK02>, <FK03>, <FK04>,
		   <FK05>, <FK06>, <FK07>, <FK08>,
		   <FK09>, <FK10>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 63;
	row {
	    top= 1;
	    keys { <ESC>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, <TLDE>,
		   { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN", -13 }, <DELE>
	    };
	};
	row {
	    top= 39;
	    keys { { <LCTL>, "CTRL" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <BKSL>, 34 }
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    keys { { <ALT>, 24 },
		   { <SPCE>, "SPCE" },
		   <CAPS>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 63;
	left= 319;
	row {
	    top= 1;
	    key.shape = "BKSP";
	    keys { <HELP>, <UNDO> };
	};
	row {
	    top= 20;
	    keys { <INS>, <UP>, <HOME> };
	};
	row {
	    top= 39;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 63;
	left= 381;
	row {
	    top= 1;
	    keys { <KPLP>, <KPRP>, <KPDV>, <KPMU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, <KPAD> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPEN" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDC> };
	};
    }; // End of "Keypad" section

};

xkb_geometry "de" {

    description= "Atari TT (de)";
    width= 480;
    height= 173;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "BKSP" { { [ 27,18] }, { [2,1], [ 25,17] } };
    shape "TABK" { { [ 27,18] }, { [2,1], [ 25,17] } };
    shape "RTRN" { approx = { [0,19], [32,37] },
		   { [ 14, 0], [32, 0], [32,37], [0,37], [0,19], [14,19] },
		   { [ 16, 1], [30, 1], [30,36], [2,36], [2,20], [16,20] } };
    shape "CTRL" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "LFSH" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "RTSH" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "SPCE" { { [170,18] }, { [2,1], [168,17] } };
    shape "FCTS" { { [ 28,11] }, { [2,1], [ 26,10] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPEN" { { [ 18,37] }, { [2,1], [ 16,36] } };

    section.left= 21;
    row.left= 1;
    key.shape = "NORM";
    key.gap=  1;
    section "Function" {
	top= 36;
	key.shape= "FCTS";
	row {
	    top= 1;
	    keys { <FK01>, <FK02>, <FK03>, <FK04>,
		   <FK05>, <FK06>, <FK07>, <FK08>,
		   <FK09>, <FK10>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 63;
	row {
	    top= 1;
	    keys { <ESC>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, <TLDE>,
		   { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN", -13 }, <DELE>
	    };
	};
	row {
	    top= 39;
	    keys { { <LCTL>, "CTRL" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <BKSL>, 34 }
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH" }, <LSGT>, 
		    <AB01>, <AB02>, <AB03>, <AB04>,
		    <AB05>, <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    keys { { <ALT>, 24 }, { <SPCE>, "SPCE" }, <CAPS>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 63;
	left= 319;
	row {
	    top= 1;
	    key.shape = "BKSP";
	    keys { <HELP>, <UNDO> };
	};
	row {
	    top= 20;
	    keys { <INS>, <UP>, <HOME> };
	};
	row {
	    top= 39;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 63;
	left= 381;
	row {
	    top= 1;
	    keys { <KPLP>, <KPRP>, <KPDV>, <KPMU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, <KPAD> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPEN" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDC> };
	};
    }; // End of "Keypad" section

};
default xkb_geometry "usa1" {

    description= "Amiga (usa1)";
    width= 490;
    height= 175;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "BKSP" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "FCTS" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "TLDE" { { [ 28,18] }, { [2,1], [ 21,17] } };
    shape "TABK" { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "CTRL" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "CAPS" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "RTRN" {
	approx = { [ 16, 0], [42,37] },
	{ [16, 0], [42, 0], [42,37],
	  [ 0,37], [ 0,19], [16,19] },
	{ [18, 1], [40, 1], [40,36],
	  [ 2,36], [ 2,20], [18,20] } };
    shape "LFSH" { { [ 52,18] }, { [2,1], [ 50,17] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,17] } };
    shape "MODK" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "SPCE" { { [172,18] }, { [2,1], [170,17] } };
    shape "DELE" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPEN" { { [ 18,37] }, { [2,1], [ 16,36] } };

    section.left= 22;
    row.left= 1;
    key.shape= "FCTS";
    key.gap=  1;
    section "Function" {
	top= 28;
	row {
	    top= 1;
	    keys { { <ESC>, shape="NORM" },
		   { <FK01>, 9 }, <FK02>, <FK03>, <FK04>, <FK05>,
		   { <FK06>, 9 }, <FK07>, <FK08>, <FK09>, <FK10>
	    };
	};
    }; // End of "Function" section

    key.shape= "NORM";
    section "Alpha" {
	top= 56;
	row {
	    top= 1;
	    keys { { <TLDE>, shape="TLDE" },
		   <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>,
		   <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>,
		   <BKSL>, { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN", -15 }
	    };
	};
	row {
	    top= 39;
	    keys { { <LCTL>, "CTRL" }, { <CAPS>, "CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>,
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>,
		   <AC11>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    keys { { <LALT>, 10 }, <LAMI>,
		   { <SPCE>, "SPCE" },
		   <RAMI>, <RALT>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 56;
	left= 326;
	row {
	    top= 1;
	    key.shape = "DELE";
	    keys { <DELE>, <HELP> };
	};
	row {
	    top= 39;
	    left = 20;
	    keys { <UP> };
	};
	row {
	    top= 58;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 56;
	left= 392;
	row {
	    top= 1;
	    keys { <KPLP>, <KPRP>, <KPDV>, <KPMU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, <KPAD> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPEN" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDC> };
	};
    }; // End of "Keypad" section

};

xkb_geometry "de" {

    description= "Amiga (de)";
    width= 490;
    height= 175;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "BKSP" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "FCTS" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "TLDE" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "TABK" { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "CTRL" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "CAPS" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "RTRN" {
	{ [ 0, 0], [28,0], [28,37], [5,37], [5,18], [ 0,18] },
	{ [ 2, 1], [26,1], [26,36], [7,36], [7,17], [ 2,17] } };
    shape "LFSH" { { [ 32,18] }, { [2,1], [ 29,17] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,17] } };
    shape "MODK" { { [ 23,18] }, { [2,1], [ 21,17] } };
    shape "SPCE" { { [172,18] }, { [2,1], [170,17] } };
    shape "DELE" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPEN" { { [ 18,37] }, { [2,1], [ 16,36] } };

    section.left= 22;
    row.left= 1;
    key.shape= "FCTS";
    key.gap=  1;
    section "Function" {
	top= 28;
	row {
	    top= 1;
	    keys { { <ESC>, shape="NORM" },
		   { <FK01>, 9 }, <FK02>, <FK03>, <FK04>, <FK05>,
		   { <FK06>, 9 }, <FK07>, <FK08>, <FK09>, <FK10>
	    };
	};
    }; // End of "Function" section

    key.shape= "NORM";
    section "Alpha" {
	top= 56;
	row {
	    top= 1;
	    keys { { <TLDE>, shape="TLDE" },
		   <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>,
		   <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>,
		   <BKSL>, { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 39;
	    keys { { <LCTL>, "CTRL" }, { <CAPS>, "CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>,
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>,
		   <AC11>, <AC12>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH" },
		    <LSGT>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>,
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    { <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    keys { { <LALT>, 14 }, <LAMI>,
		   { <SPCE>, "SPCE" },
		   <RAMI>, <RALT>
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 56;
	left= 326;
	row {
	    top= 1;
	    key.shape = "DELE";
	    keys { <DELE>, <HELP> };
	};
	row {
	    top= 39;
	    left = 20;
	    keys { <UP> };
	};
	row {
	    top= 58;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 56;
	left= 392;
	row {
	    top= 1;
	    keys { <KPLP>, <KPRP>, <KPDV>, <KPMU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, <KPAD> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPEN" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDC> };
	};
    }; // End of "Keypad" section

};
// -*- indent-tabs-mode: nil -*-

// Created by Alexander Pohoyda <alexander.pohoyda@gmx.net>
// Geometry specification for Chicony KB-9820 keyboard.

// 86 keys
default xkb_geometry "us" {
    description = "Chicony KB-9820 infra-red keyboard";
    width = 350;
    height = 180;
    //baseColor = "grey60";
    labelColor = "white";

    shape "EDGE" { cornerRadius = 25,
                   { [0, 8], [142.5, 0], [202.5, 0], [347, 8],
                     [347, 60], [327, 100], [322, 160],
                     [202.5, 165], [142.5, 165],
                     [25, 160], [20, 100], [0, 60] } };
    shape "KEYS" { cornerRadius = 2, { [271, 109] } };
    shape "MOUS" { cornerRadius = 12, { [24, 24] } };
    shape "MOUS2" { cornerRadius = 9, { [18, 18] } };
    shape "BTNS"  { cornerRadius = 5, { [10, 10] } };

    solid "Edges" {
        top = 0;
        left = 0;
        shape = "EDGE";
	color = "grey60";
    };

    solid "KeyPanel" {
	shape = "KEYS";
	left = 38;
	top = 22;
	color = "black";
    };

    solid "Mouse" {
        shape = "MOUS";
        left = 315;
        top = 30;
        color = "grey30";
    };

    outline "Mouse2" {
        shape = "MOUS2";
        left = 318;
        top = 33;
        color = "black";
    };
    
    solid "Button1" {
        shape = "BTNS";
        left = 10;
        top = 32;
        color = "grey30";
    };

    solid "Button2" {
        shape = "BTNS";
        left = 20;
        top = 42;
        color = "grey30";
    };

    outline "Buttons" {
        shape = "MOUS";
        left = 8;
        top = 30;
        color = "black";
    };

    shape.cornerRadius = 1;
    shape "ESC"    { { [17, 12] }, { [1.5, 0], [15.5, 10] } };
    shape "SMALL"  { { [15, 12] }, { [1.5, 0], [13.5, 10] } };
    shape "THIN"   { { [14, 18] }, { [2, 0], [12, 15] } };
    shape "NARR"   { { [16, 18] }, { [2, 0], [14, 15] } };
    shape "NORM"   { { [17, 18] }, { [2, 0], [15, 15] } };
    shape "WIDER"  { { [18, 18] }, { [2, 0], [16, 15] } };
    shape "CAPS"   { { [22, 18] }, { [2, 0], [20, 15] } };
    shape "RTSH"   { { [23, 18] }, { [2, 0], [21, 15] } };
    shape "WIDEST" { { [30, 18] }, { [2, 0], [28, 15] } };
    shape "SPCE"   { { [68, 18] }, { [2, 0], [66, 15] } };

    section "Function" {
	key.shape = "SMALL";
	key.gap = 0.79;
	key.color = "grey60";
	left = 38;
	top = 22;
	row {
	    top = 1;
	    keys {  { <ESC>, shape="ESC", 1 },
	    	    { <FK01>, 1.5 }, <FK02>, <FK03>, <FK04>,
		    <FK05>, <FK06>, <FK07>, <FK08>,
		    <FK09>, <FK10>, <FK11>, <FK12>,
		    <NMLK>, <PRSC>, <SCLK>, <PAUS>
	    };
	};
    }; // End of "Function" section

    section "Control" {
	key.shape = "NORM";
	key.gap = 1;
	key.color = "grey60";
        left = 38;
	top = 111;
	row {
	    top = 1;
	    keys { <EASY>, <LCTL>, <LWIN>, <LALT>,
	           { <SPCE>, shape="SPCE" },
                   <RALT>,
                   { <RWIN>, shape="THIN" },
                   { <MENU>, shape="THIN" },
                   { <INS>, shape="THIN" },
                   { <DELE>, shape="THIN" } };
	};
    }; // End of "Control" section

    section "Editing" {
        key.shape = "NORM";
	key.gap = 1;
	key.color = "grey60";
	left = 291;
	top = 34;
        row.vertical = True;
	row {
	    top = 1;
	    keys { <HOME>, <PGUP>, <PGDN>, <END> };
	};
    }; // End of "Editing" section

    section "Navigation" {
	key.gap = 1;
	key.shape = "NARR";
	key.color = "grey60";
	left = 257;
	top = 92;
	row {
	    left = 16;
	    top = 1;
	    keys { <UP> };
	};
	row {
	    top = 20;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Navigation" section

    section "Alpha" {
	key.gap = 1;
	key.shape = "NORM";
	key.color = "grey60";
        left = 38;
	top = 35;
	row {
	    top = 1;
	    keys { { <TLDE>, shape="NARR" },
                   <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, { <BKSP>, shape="WIDER" }
	    };
	};
	row {
	    top = 20;
	    keys { <TAB>,
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, <AD13>
	    };
	};
	row {
	    top = 39;
	    keys { { <CAPS>, shape="CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, shape="WIDEST" }
	    };
	};
	row {
	    top = 58;
	    keys { { <LFSH>, shape="WIDEST" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, shape="RTSH" }
	    };
	};
    }; // End of "Alpha" section
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
default xkb_geometry "FlexPro" {

    // This is an approximate layout for a Key Tronic FlexPro
    // keyboard.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes of a few keys by eye.  I didn't actually
    // *measure* a real keyboard.

    description= "Key Tronic FlexPro keyboard";

    width= 515;
    height= 200;

    shape "EDGE" { cornerRadius= 2, { [ 515, 200 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "TABK" { { [ 32,18] }, { [2,1], [30,17] } };
    shape "BKSL" { { [ 23,18] }, { [2,1], [21,17] } };
    shape "RTRN" {
        approx = { [16, 0], [38,37] },
        { [16, 0], [38, 0], [38,37], 
	  [ 0,37], [ 0,19], [16,19] },
        { [18, 1], [36, 1], [36,36], 
	  [ 2,36], [ 2,20], [18,20] } };
    shape "CAPS" { { [36,18] }, { [2,1], [34,17] } };
    shape "SHFT" { { [46,18] }, { [2,1], [44,17] } };
    shape "LCTL" { { [32,18] }, { [2,1], [30,17] } };
    shape "RCTL" { { [38,18] }, { [2,1], [36,17] } };
    shape "LALT" { { [28,18] }, { [2,1], [26,17] } };
    shape "RALT" { { [33,18] }, { [2,1], [31,17] } };
    shape "LSPC" { { [66,22] }, { [0,0], [66,22] } };
    shape "RSPC" { { [76,22] }, { [0,0], [76,22] } };
    shape "KP0"  { { [37,18] }, { [2,1], [35,17] } };
    shape "KPEN" { { [18,37] }, { [2,1], [16,36] } };
    shape "LOGO" { cornerRadius= 3, { [80,35] } };

    outline "Edges" {
   	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 9;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;

    section "Function" {
	top= 56;
	row {
	    top = 1;
	    key.color= "grey20";
	    keys { <FK01>, <FK02> };
	};
	row {
	    top = 20;
	    key.color= "grey20";
	    keys { <FK03>, <FK04> };
	};
	row {
	    top = 39;
	    keys { <FK05>, <FK06> };
	};
	row {
	    top = 58;
	    key.color= "grey20";
	    keys { <FK07>, <FK08> };
	};
	row {
	    top = 77;
	    key.color= "grey20";
	    keys { <FK09>, <FK10> };
	};
	row {
	    top = 96;
	    keys { <FK11>, <FK12> };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 56;
	left= 53;
	row {
	    top= 1;
	    keys { 
		{ <ESC>, color="grey20" }, { <BKSL>, "BKSL", color="grey20" }, 
		<AE01>, <AE02>, <AE03>, <AE04>,
		<AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		<AE10>, <AE11>, <AE12>,
		{ <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { 
		{ <TLDE>, color="grey20" },  { <TAB>, "TABK", color="grey20" },
		<AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		<AD11>, <AD12>,
		{ <RTRN>, "RTRN", -14, color="grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { 
		{ <LCTL>, color="grey20" }, { <CAPS>, "CAPS", color="grey20" },
		<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, <AC11>
	    };
	};
	row {
	    top= 58;
	    keys { 
		{ <LFSH>, color="grey20" }, 
		{ <LFSH>, "SHFT", color="grey20" }, 
		<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		{ <RTSH>, "SHFT", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.color= "grey20";
	    keys { 
		<LALT>, 
		{ <LCTL>, shape="LCTL" }, 
		{ <LALT>, shape="LALT" },
		{ <SPCE>, shape="LSPC", 4, color="white" },
		{ <SPCE>, shape="RSPC",color="white" },
		{ <RALT>, shape="RALT", 4 }, 
		{ <RCTL>, shape="RCTL" }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 12;
	left= 365;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 45;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 64;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 102;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 121;
	    keys { <LEFT>, <DOWN>, <RGHT> };
    	};
    }; // End of "Editing" section

    shape "LEDS" { cornerRadius= 3, { [ 76, 20 ] } };
    shape "LED"  { cornerRadius= 0, { [  7,  4 ] } };
    solid "LedPanel" {
    	shape= "LEDS";
	top=  11;
	left= 430;
	color= "grey10";
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 13;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 440; };
    indicator "Caps Lock"    { left= 467; };
    indicator "Scroll Lock"  { left= 489; };
    text.top= 22;
    text.color= "black";
    text "NumLockLabel"		{ left= 438; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 465; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 487; text="Scroll\nLock"; };

    logo "FlexProLogoImage" 	{ 
	top= 12;
	left= 45;
	name= "KeyTronic"; 
	shape= "LOGO"; 
    };
    text "KeyTronicLogoText"	{
	top= 15;
	left= 50;
	width= 55;
	text= "FlexPro";
	font= "times";
	slant= "o";
	weight= "bold";
	fontWidth= "narrow";
	fontSize= 36;
    };

    section "Keypad" {
	top= 56;
	left= 430;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <LEFT> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPSU>, color= "grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, { <KPAD>, color= "grey20" } };
    	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPEN", color= "grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section
};
//
//	XKB geometry for the Happy Hacking (Lite).
//	Different variants correspond to different switch
//	settings on the HHK.
//
//  Copyright (c) Doug Palmer <doug@charvolant.org>, 2002
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in
//all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//THE SOFTWARE.

// SW = 100 Default layout with windows keys
default xkb_geometry "win1" {
	include "hhk(basic)"

	key.gap = 1;
	section "Space" {
		top = 86;
		left = 30;
		row {
			top = 1;
			keys {
				<LALT>,
				{ <LWIN>, "DIAM" },
				{ <SPCE>, "SPCE" },
				{ <RWIN>, "DIAM" },
				<RALT>
			};
		};
	};
};

// SW = 101 Layout with windows and alt keys swapped
xkb_geometry "win2" {
	include "hhk(basic)"

	key.gap = 1;
	section "Space" {
		top = 86;
		left = 30;
		row {
			top = 1;
			keys {
				<LWIN>,
				{ <LALT>, "DIAM" },
				{ <SPCE>, "SPCE" },
				{ <RALT>, "DIAM" },
				<RWIN>
			};
		};
	};
};

// SW = 110 Default layout with windows keys, and left diamond = Fn key
xkb_geometry "win3" {
	include "hhk(basic)"

	key.gap = 1;
	section "Space" {
		top = 86;
		left = 30;
		row {
			top = 1;
			keys {
				<LALT>,
				{ <FN>, "DIAM" },
				{ <SPCE>, "SPCE" },
				{ <RWIN>, "DIAM" },
				<RALT>
			};
		};
	};
};

// SW = 101 Layout with windows and alt keys swapped and left-Alt = Fn key
xkb_geometry "win4" {
	include "hhk(basic)"

	key.gap = 1;
	section "Space" {
		top = 86;
		left = 30;
		row {
			top = 1;
			keys {
				<FN>,
				{ <LALT>, "DIAM" },
				{ <SPCE>, "SPCE" },
				{ <RALT>, "DIAM" },
				<RWIN>
			};
		};
	};
};

// SW = 000 Layout with Muhenkan and Henkan keys
xkb_geometry "jp1" {
	include "hhk(basic)"

	key.gap = 1;
	section "Space" {
		top = 86;
		left = 30;
		row {
			top = 1;
			keys {
				<LALT>,
				{ <NFER>, "DIAM" },
				{ <SPCE>, "SPCE" },
				{ <XFER>, "DIAM" },
				<RALT>
			};
		};
	};
};

// SW = 001 Layout with Muhenkan and Henkan keys swapped with Alt
xkb_geometry "jp2" {
	include "hhk(basic)"

	key.gap = 1;
	section "Space" {
		top = 86;
		left = 30;
		row {
			top = 1;
			keys {
				<NFER>,
				{ <LALT>, "DIAM" },
				{ <SPCE>, "SPCE" },
				{ <RALT>, "DIAM" },
				<XFER>
			};
		};
	};
};

// SW = 010 Layout with Henkan key and left-diamond as Fn
xkb_geometry "jp3" {
	include "hhk(basic)"

	key.gap = 1;
	section "Space" {
		top = 86;
		left = 30;
		row {
			top = 1;
			keys {
				<LALT>,
				{ <FN>, "DIAM" },
				{ <SPCE>, "SPCE" },
				{ <XFER>, "DIAM" },
				<RALT>
			};
		};
	};
};

// SW = 001 Layout with Henkan key swapped with Alt and left-Alt as Fn
xkb_geometry "jp4" {
	include "hhk(basic)"

	key.gap = 1;
	section "Space" {
		top = 86;
		left = 30;
		row {
			top = 1;
			keys {
				<FN>,
				{ <LALT>, "DIAM" },
				{ <SPCE>, "SPCE" },
				{ <RALT>, "DIAM" },
				<XFER>
			};
		};
	};
};

// Basic layout for non-switchable keys
partial hidden xkb_geometry "basic" {

	description = "Happy Hacking";
	width = 290;
	height = 106;
	
	shape.cornerRadius = 1;
	shape "NORM" { { [18, 18] }, { [2, 1], [14, 14] } };
	shape "BKSP" { { [28, 18] }, { [2, 1], [24, 14] } };
	shape "TABK" { { [28, 18] }, { [2, 1], [24, 14] } };
	shape "CTRL" { { [32, 18] }, { [2, 1], [28, 14] } };
	shape "RTRN" { { [42, 18] }, { [2, 1], [38, 14] } };
	shape "LFSH" { { [42, 18] }, { [2, 1], [38, 14] } };
	shape "RTSH" { { [32, 18] }, { [2, 1], [28, 14] } };
	shape "DIAM" { { [28, 18] }, { [2, 1], [24, 14] } };
	shape "SPCE" { { [114, 18] }, { [2, 1], [110, 14] } };

	text.color = "black";
	text "PFULabel" { left = 16; top = 2; fontsize = 20; text = "PFU"; };
	text "HHKLabel" { left = 254; top = 90; text = "Happy Hacking\nKeyboard"; };

	section.left = 1;
	row.left = 1;
	key.shape = "NORM";
	key.gap = 1;

	section "Alphanumeric" {
		top = 10;
		row {
			top = 1;
			keys {
				 <ESC>, 
				<AE01>, <AE02>, <AE03>, <AE04>, <AE05>, 
				<AE06>, <AE07>, <AE08>, <AE09>, <AE10>, 
				<AE11>, <AE12>, 
				<BKSL>, <TLDE>
			};
		};
		row {
			top = 20;
			keys {
				{ <TAB>, "TABK" },
				<AD01>, <AD02>, <AD03>, <AD04>, <AD05>,
				<AD06>, <AD07>, <AD08>, <AD09>, <AD10>,
				<AD11>, <AD12>,
				{ <BKSP>, "BKSP" }
			};
		};
		row {
			top = 39;
			keys {
				{ <LCTL>, "CTRL" },
				<AC01>, <AC02>, <AC03>, <AC04>, <AC05>,
				<AC06>, <AC07>, <AC08>, <AC09>, <AC10>,
				<AC11>, 
				{ <RTRN>, "RTRN" }
			};
		};
		row {
			top = 58;
			keys {
				{ <LFSH>, "LFSH" },
				<AB01>, <AB02>, <AB03>, <AB04>, <AB05>,
				<AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
				{ <RTSH>, "RTSH" },
				{ <FN>, color = "grey20" }
			};
		};
	};

	alias <AC00> = <LCTL>;
};
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
default xkb_geometry "sanwaskbkg3" {

    description= "Sanwa Supply SKB-KG3";
    // SKB-KG3BK (black)
    // http://www.sanwa.co.jp/product/syohin.asp?code=SKB-KG3BK
    // http://www.sanwa.co.jp/zooma/keybord/SKB-KG3BK/
    // SKB-KG3W (white)
    // http://www.sanwa.co.jp/product/syohin.asp?code=SKB-KG3W
    // http://www.sanwa.co.jp/zooma/keybord/SKB-KG3SW/
    // SKB-KG3SV (silver)
    // http://www.sanwa.co.jp/product/syohin.asp?code=SKB-KG3SV
    // http://www.sanwa.co.jp/zooma/keybord/SKB-KG3SV/

    width= 304;
    height= 127;

    shape.cornerRadius= 1;
    shape "TOP"  { { [15.25,13] }, { [2,2], [13.25,11] } };
    shape "NORM" { { [17,16] }, { [2,2], [15,14] } };
    shape "TBBK" { { [24.5,16] }, { [2,2], [22.5,14] } };
    shape "RTRN" { { [0,0], [36,0], [36,34], [8.5,34], [8.5,16], [0,16] },
                   { [2,2], [34,2], [34,32], [10.5,32], [10.5,14], [2,14] } };
    shape "CAPS" { { [33,16] }, { [28,16] }, { [2,2], [26,14] } };
    shape "LFSH" { { [41,16] }, { [2,2], [39,14] } };
    shape "CTSH" { { [19.5,16] }, { [2,2], [17.5,14] } };
    shape "SPCE" { { [57.5,16] }, { [2,2], [55.5,14] } };

    shape "LED"  { cornerRadius= 0, { [5,1] } };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 3;
    indicator.shape= "LED";
    indicator "Num Lock"    { left= 247; };
    indicator "Caps Lock"   { left= 266; };
    indicator "Scroll Lock" { left= 285; };
    text.color= "black";
    text.top= 1;
    text "Vendor1"          { left=  10; text="SANWA"; };
    text.top= 4.5;
    text "Vendor2"          { left=  10; text="SUPPLY"; };
    text "NumLockLabel"     { left= 241; text="Num Lock"; };
    text "CapsLockLabel"    { left= 260; text="Caps Lock"; };
    text "ScrollLockLabel"  { left= 279; text="Scroll Lock"; };

    section.left= 3;
    row.left= 1;
    key.shape= "NORM";
    key.gap= 2;
    section "Function" {
        key.shape= "TOP";
        top= 10;
        row {
            top= 1;
            keys { <ESC>, <FK01>, <FK02>, <FK03>, <FK04>, <FK05>, <FK06>,
                   <FK07>, <FK08>, <FK09>, <FK10>, <FK11>, <FK12>, <PRSC>,
                   {<NMLK>, color="grey20"}, <PAUS>, {<DELE>, color="grey20"}
            };
        };
        overlay "SCLK" {
            <NMLK>=<SCLK>
        };
        overlay "FN" {
            <DELE>=<INS>
        };
    }; // End of "Function" section

    section "Alpha" {
        top= 24;
        row {
            top= 2;
            keys { <HZTG>, <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>,
                   {<AE07>, color="grey20"}, {<AE08>, color="grey20"},
                   {<AE09>, color="grey20"}, {<AE10>, color="grey20"},
                   <AE11>, <AE12>, <AE13>, { <BKSP>, "TBBK" }
            };
        };
        row {
            top= 20;
            keys { { <TAB>, "TBBK" }, <AD01>, <AD02>, <AD03>, <AD04>, <AD05>,
                   <AD06>, {<AD07>, color="grey20"}, {<AD08>, color="grey20"},
                   {<AD09>, color="grey20"}, {<AD10>, color="grey20"}, <AD11>,
                   <AD12>, { <RTRN>, "RTRN" }
            };
        };
        row {
            top= 38;
            keys { { <CAPS>, "CAPS" }, <AC01>, <AC02>, <AC03>, <AC04>, <AC05>,
                   <AC06>, {<AC07>, color="grey20"}, {<AC08>, color="grey20"},
                   {<AC09>, color="grey20"}, {<AC10>, color="grey20"}, <AC11>,
                   <AC12>
            };
        };
        row {
            top= 56;
            keys { { <LFSH>, "LFSH" }, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>,
                   <AB06>, {<AB07>, color="grey20"}, <AB08>,
                   {<AB09>, color="grey20"}, {<AB10>, color="grey20"}, <AB11>,
                   {<UP>, color="grey20"}, {<RTSH>, key.shape= "CTSH" }
            };
        };
        row {
            top= 74;
            keys { { <LCTL>, key.shape= "CTSH" }, {<FN>, color="grey20"},
                   <LWIN>, <LALT>, <NFER>, {<SPCE>, "SPCE" }, <XFER>, <HKTG>,
                   <RALT>, <MENU>, {<LEFT>, color="grey20"},
                   {<DOWN>, color="grey20"},
                   {<RGHT>, key.shape= "CTSH", color="grey20"}
            };
        };
        overlay "SCLK" {
            <AE07>=<KO7>, <AE08>=<KO8>, <AE09>=<KO9>, <AE10>=<KOMU>,
            <AD07>=<KO4>, <AD08>=<KO5>, <AD09>=<KO6>, <AD10>=<KOSU>,
            <AC07>=<KO1>, <AC08>=<KO2>, <AC09>=<KO3>, <AC10>=<KOAD>,
            <AB07>=<KO0>, <AB09>=<KODL>, <AB10>=<KODV>
        };
        overlay "FN" {
            <UP>=<PGUP>, <LEFT>=<HOME>, <DOWN>=<PGDN>, <RGHT>=<END>
        };
    }; // End of "Alpha" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "default" geometry
// -*- indent-tabs-mode: nil -*-

// Created by Alexander Pohoyda <alexander.pohoyda@gmx.net>
// Geometry specification for IBM ThinkPad keyboard.
// Compatible Models: THINKPAD 560Z 2640-90U, THINKPAD 560Z 2640-91U,
//    THINKPAD 560Z 2640-B0U, THINKPAD 560Z 2640-B1U, THINKPAD 560Z 2640-RR3,
//    THINKPAD 600 2645-31U, THINKPAD 600 2645-35U, THINKPAD 600 2645-41U,
//    THINKPAD 600 2645-42U, THINKPAD 600 2645-45U, THINKPAD 600 2645-48U,
//    THINKPAD 600 2645-51U, THINKPAD 600 2645-85U, THINKPAD 600 2645-A1U,
//    THINKPAD 600 2645-RR1, THINKPAD 600 2645-RR2, THINKPAD 600E 2645-3AU,
//    THINKPAD 600E 2645-4AU, THINKPAD 600E 2645-4BU, THINKPAD 600E 2645-55U,
//    THINKPAD 600E 2645-5AU, THINKPAD 600E 2645-5BU, THINKPAD 600E 2645-5JU,
//    THINKPAD 600E 2645-8AO, THINKPAD 600E 2645-8AU, THINKPAD 600E 2645-8BU,
//    THINKPAD 600E 2645-AAU, THINKPAD 600E 2645-RRB, THINKPAD 600E 2645-RRD,
//    THINKPAD 600E 2645-RRF, THINKPAD 600E 2645-RRS, THINKPAD A22E 2645-45U

xkb_geometry "common" {
    width = 290;
    height = 150;
    baseColor = "grey80";
    labelColor = "white";

    shape "FN0"  { cornerRadius = 1, { [17, 12] }, { [2, 0], [15, 10] } };
    shape "NORM" { cornerRadius = 1, { [18, 18] }, { [2.5, 0], [15.5, 14] } };
    shape "BKSP" { cornerRadius = 1, { [37, 18] }, { [2.5, 0], [34.5, 14] } };
    shape "TABK" { cornerRadius = 1, { [27, 18] }, { [2.5, 0], [24.5, 14] } };
    shape "CAPS" { cornerRadius = 1, { [31, 18] }, { [1, 0], [30, 16] },
				                   { [1, 0], [26, 16] },
				                   { [2.5, 0], [24.5, 14] } };
    shape "RTSH" { cornerRadius = 1, { [50, 18] }, { [2.5, 0], [46.5, 14] } };
    shape "MODK" { cornerRadius = 1, { [27.5, 18] }, { [2.5, 0], [25, 14] } };
    shape "SPCE" { cornerRadius = 1, { [100, 18] }, { [2.5, 0], [97.5, 14] } };
    shape "ARRS" { cornerRadius = 1, { [16, 13] }, { [1.5, 0], [14.5, 11] } };

    shape "LED"  { cornerRadius = 2, { [3, 3] } };

    shape "KEYS" { cornerRadius = 2,
                   { [0, 0], [19, 0], [19, 13], [172, 13],
	             [172, 0], [286, 0], [286, 138], [216, 138],
	             [216, 124], [0, 124] } };

    solid "KeyPanel" {
	shape = "KEYS";
	left = 2;
	top = 5;
	color = "black";
    };

    shape "NULL1" { cornerRadius = 1,
                    { [0, 0], [50, 0], [50, 18], [34, 18], [34, 4],
		      [16, 4], [16, 18], [0, 18] } };

    solid "NullPanel1" {
	shape = "NULL1";
	left = 237;
	top = 110;
	color = "grey80";
    };

    shape "NULL2" { cornerRadius = 1, { [17, 13] } };

    solid "NullPanel2" {
	shape = "NULL2";
	left = 219;
	top = 129;
	color = "grey80";
    };

    shape "NULL3" { cornerRadius = 1,
                    { [0, 26],
		      [72, 26], [72, 13], [76, 13], [76, 26],
		      [149, 26], [149, 13], [153, 13], [153, 26],
		      [226, 26], [226, 0], [230, 0], [230, 26],
		      [284, 26], [285, 27],
		      [0, 27] } };

    solid "NullPanel3" {
	shape = "NULL3";
	left = 3;
	top = 6;
	color = "grey80";
    };

    indicator.onColor = "green";
    indicator.offColor = "grey10";
    indicator.top = 4;
    indicator.shape = "LED";
    indicator "HDDActivity" { onColor = "red"; left = 100; };
    indicator "Num Lock"     { left = 108; };
    indicator "Caps Lock"    { left = 114; };
    indicator "Scroll Lock"  { left = 120; };
    indicator "Power"	     { left = 128; };

    key.gap = 1;
    key.color = "grey60";

    section "Function" {
	left = 2;
	top = 5;
	key.shape = "FN0";
	row {
	    top = 1;
	    keys {  <ESC>, { <PRSC>, 155 }, <SCLK>, <PAUS> };
	};
	row {
	    top = 14;
	    keys {  <FK01>, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 6 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 6 }, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Control" {
	left= 2;
	top = 109;
	key.shape = "MODK";
	row {
	    top = 1;
	    keys { { <FN>, "NORM" }, <LCTL>, <LALT>,
		   { <SPCE>, "SPCE" }, <RALT>, <RCTL>
	    };
	};
    }; // End of "Control" section

    section "Editing" {
	top = 5;
	left = 233;
        key.shape = "FN0";
	row {
	    top = 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top = 14;
	    keys { <DELE>, <END>, <PGDN> };
	};
    }; // End of "Editing" section

    section "Navigation" {
	top = 114;
	left = 236;
	key.shape = "ARRS";
	row {
	    top = 1;
	    left = 17;
	    keys { <UP> };
	};
	row {
	    top = 15;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Navigation" section
    
    shape "STIK" { cornerRadius = 4, { [7, 7] } };

    solid "STIK" {
	priority = 255;
	color = "red";
	shape = "STIK";
	top = 85;
	left = 126;
    };
};

// 85 keys
// US/English (FRU 02K4785).
xkb_geometry "us" {
    include "thinkpad(common)"
    description = "IBM ThinkPad 560Z/600/600E/A22E, US";

    shape "RTRN" { cornerRadius = 1, { [43, 18] }, { [2.5, 0], [40.5, 14] } };
    shape "LFSH" { cornerRadius = 1, { [43, 18] }, { [2.5, 0], [40.5, 14] } };
    shape "BKSL" { cornerRadius = 1, { [28, 18] }, { [2.5, 0], [25.5, 14] } };

    section "Alpha" {
	left = 2;
	top = 33;
	key.gap = 1;
	key.color = "grey60";
	key.shape = "NORM";
	row {
	    top = 1;
	    keys { <AE00>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top = 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top = 39;
	    keys { { <CAPS>, "CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top = 58;
	    keys { { <LFSH>, "LFSH" },
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		   { <RTSH>, "RTSH" }
	    };
	};
    }; // End of "Alpha" section
};

// 86 keys
// Tested on: DE/German, UK/English (FRU 02K4787).
xkb_geometry "intl" {
    include "thinkpad(common)"
    description = "IBM ThinkPad 560Z/600/600E/A22E, Intl";

    shape "RTRN" { cornerRadius = 1, { [28, 0], [28, 37], [4, 37], [4, 18],
                                       [0, 18], [0, 0] },
                                     { [25.5, 0], [25.5, 33], [6.5, 33],
				       [6.5, 14], [2.5, 14], [2.5, 0] } };
    shape "LFSH" { cornerRadius = 1, { [24, 18] }, { [2.5, 0], [21.5, 14] } };

    section "Alpha" {
	left = 2;
	top = 33;
	key.gap = 1;
	key.color = "grey60";
	key.shape = "NORM";
	row {
	    top = 1;
	    keys { <AE00>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top = 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, "RTRN" }
	    };
	};
	row {
	    top = 39;
	    keys { { <CAPS>, "CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <AC12>
	    };
	};
	row {
	    top = 58;
	    keys { { <LFSH>, "LFSH" }, <AB00>,
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		   { <RTSH>, "RTSH" }
	    };
	};
    }; // End of "Alpha" section
};

xkb_geometry "60" {
    width = 290;
    height = 140;
    baseColor = "grey80";
    labelColor = "white";

    shape "NORM" { cornerRadius = 1, { [18,   18] }, { [2, 0], [16, 16] } };

    shape "ESC"  { cornerRadius = 1, { [17,   13] }, { [1.5, 0], [15.5, 12] } };
    shape "FN0"  { cornerRadius = 1, { [17,   11] }, { [1.5, 0], [15.5, 10] } };

    shape "BKSP" { cornerRadius = 1, { [37,   18] }, { [2, 0], [35, 16] } };

    shape "TABK" { cornerRadius = 1, { [27.5, 18] }, { [2, 0], [25.5, 16] } };
    shape "BKSL" { cornerRadius = 1, { [27.5, 18] }, { [2, 0], [25.5, 16] } };

    shape "CAPS" { cornerRadius = 1, { [30.5, 18] }, { [2, 0], [28.5, 16] } };
    shape "RTRN" { cornerRadius = 1, { [43.5, 18] }, { [2, 0], [41.5, 16] } };

    shape "LFSH" { cornerRadius = 1, { [40,   18] }, { [2, 0], [38, 16] } };
    shape "RTSH" { cornerRadius = 1, { [53,   18] }, { [2, 0], [51, 16] } };

    shape "LCTL" { cornerRadius = 1, { [21,   18] }, { [2, 0], [19, 16] } };
    shape "LWIN" { cornerRadius = 1, { [15,   18] }, { [1.5, 0], [13.5, 16] } };

    shape "SPCE" { cornerRadius = 1, { [97,   18] }, { [2, 0], [95, 16] } };

    shape "ARR1" { cornerRadius = 1, { [17,   13] }, { [1.5, 0], [15.5, 12] } };
    shape "ARR2" { cornerRadius = 1, { [17,   11] }, { [1.5, 0], [15.5, 10] } };

    shape "VOL"  { cornerRadius = 2.5, { [5, 5] } };
    shape "TVTG" { cornerRadius = 0.5, { [0, 1], [17, 1], [17, 4], [0, 4] } };

    shape "KEYS" { cornerRadius = 2,
                   { [0, 0], [19, 0], [19, 16], [172, 16],
	             [172, 4], [286, 4], [286, 133], [231, 133],
	             [231, 126], [0, 126] } };

    solid "KeyPanel" {
	shape = "KEYS";
	left = 2;
	top = 3;
	color = "black";
    };

    shape "NULL0" { cornerRadius = 0.5,
                    { [0, 26],
		      [72, 26], [72, 14], [76, 14], [76, 26],
		      [149, 26], [149, 14], [153, 14], [153, 26],
		      [226, 26], [226, 2], [230, 2], [230, 26],
		      [284, 26], [284, 27],
		      [0, 27] } };

    solid "NullPanel0" {
	shape = "NULL0";
	left = 3;
	top = 6;
	color = "grey80";
    };

    shape "NULL1" { cornerRadius = 0.5, { [0, 12], [17, 12], [17, 13], [0, 13] } };

    solid "NullPanel1" {
	shape = "NULL1";
	left = 3;
	top = 6;
	color = "grey80";
    };

    shape "MEDIA" { cornerRadius = 0.5, { [0, 0], [55, 0], [55, 10], [0, 10] } };

    solid "MediaPanel" {
	shape = "MEDIA";
	left = 25.5;
	top = 6;
	color = "black";
    };

    section "Volume" {
	left = 22;
	top = 8.5;
	key.shape = "VOL";
	key.gap = 6;
	key.color = "grey20";

	row {
	    keys { <MUTE>, <VOL->, <VOL+>, {<I1F>, "TVTG", color = "blue"} };
	};
    };

    key.gap = 1;
    key.color = "grey60";

    section "Function" {
	left = 2;
	top = 3;
	key.shape = "FN0";
	row {
	    key.shape = "ESC";
	    top = 1;
	    keys {  <ESC> };
	};
	row {
	    top = 5;
	    keys { { <PRSC>, 173 }, <SCLK>, <PAUS> };
	};
	row {
	    top = 17;
	    keys {  <FK01>, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 6 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 6 }, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Control" {
	left = 2;
	top = 109;
	key.shape = "NORM";
	row {
	    top = 1;
	    keys { <FN>, { <LCTL>, "LCTL" }, { <LWIN>, "LWIN" }, <LALT>,
		   { <SPCE>, "SPCE" }, <RALT>, <MENU>, <RCTL>
	    };
	};
    }; // End of "Control" section

    section "Editing" {
	top = 7;
	left = 233;
        key.shape = "FN0";
	row {
	    top = 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top = 13;
	    keys { <DELE>, <END>, <PGDN> };
	};
    }; // End of "Editing" section

    section "Navigation" {
	top = 109;
	left = 233;
	row {
	    key.shape = "ARR1";
	    top = 1;
	    keys { <I6A>, <UP>, <I69> };
	};
	row {
	    key.shape = "ARR2";
	    top = 15;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Navigation" section
    
    shape "STIK" { cornerRadius = 3.5, { [7, 7] } };

    solid "STIK" {
	priority = 255;
	color = "red";
	shape = "STIK";
	top = 85.5;
	left = 125.5;
    };

    section "Alpha" {
	left = 2;
	top = 33;
	key.shape = "NORM";
	row {
	    top = 1;
	    keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
		   <AE10>, <AE11>, <AE12>, { <BKSP>, "BKSP" }
	    };
	};
	row {
	    top = 20;
	    keys { { <TAB>, "TABK" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <BKSL>, "BKSL" }
	    };
	};
	row {
	    top = 39;
	    keys { { <CAPS>, "CAPS" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, { <RTRN>, "RTRN", color = "blue" }
	    };
	};
	row {
	    top = 58;
	    keys { { <LFSH>, "LFSH" },
		   <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		   <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		   { <RTSH>, "RTSH" }
	    };
	};
    }; // End of "Alpha" section
};
The geometry component of a keyboard mapping specifies primarily the geometry of
the keyboard. It contains the geometry symbolic name and the keyboard geometry
description. The geometry component might also contain aliases for some keys or
symbolic names for some indicators and might affect the set of indicators that
are physically present. Key aliases defined in the geometry component of a
keyboard mapping override those defined in the keycodes component.
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//
default xkb_geometry "nwp5461" {

    description= "Sony NEWS NWS-5000 Keyboard";
    width= 425;
    height= 190;

    shape.cornerRadius= 1;
    shape "NORM" { { [18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [28,18] }, { [2,1], [26,17] } };
    shape "TABK" { { [28,18] }, { [2,1], [26,17] } };
    shape "BKSL" { { [28,18] }, { [2,1], [26,17] } };
    shape "RTRN" {
        approx = { [15, 0], [33,37] },
        { [15, 0], [33, 0], [33,37],
          [ 0,37], [ 0,19], [15,19] },
        { [17, 1], [31, 1], [31,36],
          [ 2,36], [ 2,20], [17,20] }
    };
    shape "SHFT" { { [42,18] }, { [2,1], [40,17] } };
    shape "MODK" { { [33,18] }, { [2,1], [31,17] } };
    shape "SPCE" { { [85,18] }, { [2,1], [83,17] } };
    shape "KPEN" { { [18,38] }, { [2,1], [16,37] } };
    shape "STOP" { { [28,18] }, { [2,1], [26,17] } };
    shape "CUT"  { { [55,18] }, { [2,1], [53,17] } };
    shape "EXEC" { { [32,18] }, { [2,1], [30,17] } };
    shape "UNK"  { { [18,18] }, { [2,1], [16,17] } };
    shape "CAPS" { { [18,18] }, { [2,1], [16,17] } };
    shape "FKEY" { { [23,18] }, { [2,1], [21,17] } };

    section.left= 13;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 55;
	row {
	    top= 1;
	    left= 37;
	    key.shape="FKEY";
	    keys {    <FK01>, <FK02>, <FK03>, <FK04>, <FK05>, 
		    { <FK06>, 5 }, <FK07>, <FK08>, <FK09>, <FK10>, 
		    { <FK11>, 5 }, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 80;
	row {
	    top= 1;
	    keys { { <ESC>, color="grey20" } , 
		   <AE01>, <AE02>, <AE03>, <AE04>,
		   <AE05>, <AE06>, <AE07>, <AE08>, 
		   <AE09>, <AE10>, <AE11>, <AE12>, 
		   <BKSL>, { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <DELE>, color="grey20" }, 
		   { <RTRN>, "RTRN", -14, color="grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { { <LCTL>, "MODK", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <TLDE>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "SHFT", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, <AB11>,
		    { <RTSH>, "SHFT", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LALT>, { <CAPS>, "CAPS" },
		   { <STOP>, "STOP", color="white" },
		   { <SPCE>, "SPCE", color="white" },
		   { <CUT>, "CUT", color="white" },
		   { <UNK0>, "UNK" }, { <UNK1>, "UNK" }, 
		   { <EXEC>, "EXEC" }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 80;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <HELP> };
	};
        row {
	    top= 20;
	    keys { <INS> };
	};
        row {
	    top= 39;
	    keys { <CLR> };
	};
	row {
	    top= 58;
	    keys { <PGUP> };
	};
	row {
	    top= 77;
	    keys { <PGDN> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 334;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { { <KPMU>, 19 }, <KPDV>, <KPAD> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPSU>, color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6>, { <KPSP>, color="grey20" } };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPEN", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { <KP0>, { <KPDC>, color="grey20" }, <UP> };
	};
	row {
	    top= 96;
	    key.color= "grey20";
	    keys { <KPTB>, <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Keypad" section

}; // End of "default" geometry
//
//Copyright 1996, 1998  The Open Group
//
//Permission to use, copy, modify, distribute, and sell this software and its
//documentation for any purpose is hereby granted without fee, provided that
//the above copyright notice appear in all copies and that both that
//copyright notice and this permission notice appear in supporting
//documentation.
//
//The above copyright notice and this permission notice shall be
//included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
//EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
//OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
//OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of The Open Group shall
//not be used in advertising or otherwise to promote the sale, use or
//other dealings in this Software without prior written authorization
//from The Open Group.
//



// modified from /usr/share/X11/xkb/geometry/pc(pc104)
//
// The Apex 300 (Apex RAW) has 21 additional keys and
// <RWIN> is replaced by a hardware <FN> key.  These
// additions to the basic PC104 layout are shown in red.
//
// Currently the kernel doesn't initialize these keys; a userspace
// tool is needed (apexctl: https://github.com/tuxmark5/ApexCtl).
// With this tool or a proper driver, the extra keys (except FN)
// can be assigned keycodes via udev-hwdb.
//
// FIXME: Keycodes shown here should be changed to match
//        kernel defaults when a driver is developed.
//
// The additional keys are in 4 groups:
// 1)  L1-L2 left of Escape (column)         <I156>,<I157>
// 2)  M1-M12 above F1-F12 (row)             <FK13>-<FK24>
// 3)  MX1-MX5 left of alpha keys (column)   <I171>-<I175>
// 4)  LeftUp, RightUp with regular arrows   <I160>,<I159>
//
// Known <FN> key functions:
// <FN>+<F5> = kbd backlight step dimmer (NoSymbol)
// <FN>+<F6> = kbd backlight step brighter (NoSymbol)
// <FN>+<F7> = <I173> (AudioPrev)
// <FN>+<F8> = <I172> (AudioPlay, AudioPause)
// <FN>+<F9> = <I171> (AudioNext)
// <FN>+<F10> = <MUTE> (AudioMute)
// <FN>+<F10> = <VOL+> (VolumeUp)
// <FN>+<F11> = <VOL-> (VolumeDown)
//
// And yes, the spacebar really is that ridiculous.
//
// 2017.April
//
default xkb_geometry "apex300" {

    description= "SteelSeries Apex 300 (Apex RAW)";
    width= 450;
    height= 150;

    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,16] } };
    shape "BKSP" { { [ 38,18] }, { [2,1], [ 36,16] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "BKSL" { { [ 28,18] }, { [2,1], [ 26,16] } };
    shape "RTRN" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "CAPS" { { [ 33,18] }, { [2,1], [ 31,16] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,16] } };
    shape "RTSH" { { [ 52,18] }, { [2,1], [ 50,16] } };
    shape "MODK" { { [ 27,18] }, { [2,1], [ 25,16] } };
    shape "SMOD" { { [ 23,18] }, { [2,1], [ 21,16] } };
    shape "SPCE" { { [113,37] }, { [2,1], [111,35] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,16] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,35] } };
    shape "MKEY" { { [  18,8] }, { [2,1], [  16,7] } };
    shape "ESCA" { { [ 18,28] }, { [2,1], [ 16,27] } };
    shape "LKEY" { { [ 18,14] }, { [2,1], [ 16,13] } };
    shape "LEDS" { cornerRadius= 0, { [ 54,  6 ] } };
    shape "LED"  { cornerRadius= 0, { [  4,  1 ] } };


    solid "LedPanel" {
        shape= "LEDS";
        top=  2;
        left= 315;
        color= "grey10";
    };


    indicator.onColor= "red";
    indicator.offColor= "red";
    indicator.top= 7;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 321; };
    indicator "Caps Lock"    { left= 340; };
    indicator "Scroll Lock"  { left= 359; };
    text.top= 2;
    text.color= "black";
    text "NumLockLabel"      { left= 322; text="N"; };
    text "CapsLockLabel"     { left= 341; text="C"; };
    text "ScrollLockLabel"   { left= 360; text="S"; };
    text "SteelSeriesLogo"   { top=  10; left= 400; text="SteelSeries"; };
    text "FNLogoKeyLabel"    { top= 130; left= 248; text="FN"; };

    key.shape= "NORM";
    key.gap=  1;
    key.color= "grey10";


    section "Lkeys" {
        key.shape= "LKEY";
        key.color= "red";
        row { top= 1;  keys { <I156> }; };
        row { top= 15; keys { <I157> }; };
    }; // end of "Lkeys" section


    section "MXkeys" {
        key.shape= "NORM";
        key.color= "red";
        row { top= 35;  keys { <I171> }; }; // 40 59 78 97 116
        row { top= 54;  keys { <I172> }; }; // 35 54 73 92 111
        row { top= 73;  keys { <I173> }; };
        row { top= 92;  keys { <I174> }; };
        row { top=111;  keys { <I175> }; };
    }; // end of "MXkeys" section


    section "Escape" {
        left= 23;
        key.shape= "ESCA";
        key.color= "grey30";
        row { top=  1;  keys { <ESC> }; };
    }; // end of "Escape" section


    section "Mkeys" {
        left= 61;
        key.color= "red";
        key.shape= "MKEY";
        row { top=  1;
              keys { <FK13>,       <FK14>, <FK15>, <FK16>,
                   { <FK17>, 11 }, <FK18>, <FK19>, <FK20>,
                   { <FK21>, 11 }, <FK22>, <FK23>, <FK24> }; };
    }; // end of "Mkeys" section


    section "Function" {
        left= 61;
        key.color= "grey30";
        row { top= 10;
              keys { <FK01>,       <FK02>, <FK03>, <FK04>,
                   { <FK05>, 11 }, <FK06>, <FK07>, <FK08>,
                   { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
                   { <PRSC>,  5 }, <SCLK>, <PAUS> }; };
    }; // end of "Function" section


    section "Alpha" {
        top= 35;
        left= 23;
        key.color= "grey10";
        row { keys { <TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
                     <AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
                     <AE10>, <AE11>, <AE12>,
                   { <BKSP>, "BKSP", color="grey30" } }; };
        row { top= 19;
              keys { { <TAB>, "TABK", color="grey30" },
                      <AD01>, <AD02>, <AD03>, <AD04>, <AD05>,
                      <AD06>, <AD07>, <AD08>, <AD09>, <AD10>,
                      <AD11>, <AD12>, { <BKSL>, "BKSL" } }; };
        row { top= 38;
              keys { { <CAPS>, "CAPS", color="grey30" },
                       <AC01>, <AC02>, <AC03>, <AC04>, <AC05>,
                       <AC06>, <AC07>, <AC08>, <AC09>, <AC10>,
                       <AC11>, { <RTRN>, "RTRN", color="grey30" } }; };
        row { top= 57;
              keys { { <LFSH>, "LFSH", color="grey30" },
                       <AB01>, <AB02>, <AB03>, <AB04>, <AB05>,
                       <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
                     { <RTSH>, "RTSH", color="grey30" } }; };
        row { top= 76;
              key.shape= "SMOD";
              key.color= "grey30";
              keys { { <LCTL>, "MODK" }, <LWIN>, <LALT>, { <SPCE>, "SPCE" },
                       <RALT>, { <I248>, color="red" }, <MENU>, <RCTL> }; };
    }; // end of "Alpha" section


    section "Editing" {
        top= 35;
        left= 313;
        key.color= "grey30";
        row {           keys {    <INS>, <HOME>, <PGUP> }; };
        row { top= 19;  keys {   <DELE>,  <END>, <PGDN> }; };
        row { top= 57;  keys { { <I160>, color="red" }, <UP>, { <I159>, color="red" } }; };
        row { top= 76;  keys {   <LEFT>, <DOWN>, <RGHT> }; };
    }; // end of "Editing" section


    section "Keypad" {
        top= 35;
        left= 373;
        key.color= "grey10";
        row {           keys {  <NMLK>, <KPDV>,  <KPMU>,   <KPSU>           }; };
        row { top= 19;  keys {   <KP7>,  <KP8>,   <KP9>, { <KPAD>, "KPAD" } }; };
        row { top= 38;  keys {   <KP4>,  <KP5>,   <KP6>                     }; };
        row { top= 57;  keys {   <KP1>,  <KP2>,   <KP3>, { <KPEN>, "KPAD" } }; };
        row { top= 76;  keys { { <KP0>, "KP0" }, <KPDL>                     }; };
    }; // end of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // end of "apex300" geometry
default xkb_geometry "natural" {

    // Approximate layout for a Microsoft Natural
    description= "Microsoft Natural";
    width= 550;
    height= 190;

    shape.cornerRadius= 1;
    shape "LDEF" { { [ 18,18] }, { [2,1], [15,15] } };
    shape "TABK" { { [ 26,18] }, { [2,1], [23,15] } }; 
    shape "CAPS" { { [ 30,18] }, { [2,1], [23,15] } }; 
    shape "LFSH" { { [ 41,18] }, { [2,1], [38,15] } };
    shape "KEY6" { { [ 22,18] }, { [2,1], [15,15] } };
    shape "KEYT" { { [ 33,18] }, { [2,1], [15,15] } };
    shape "KEYG" { { [ 29,18] }, { [2,1], [15,15] } };
    shape "LCTL" { 
	approx= { [ 32, 22 ] },
	{ [  0, 0], [ 32, 0 ], [ 32, 23 ], [ 0, 22 ] },
	{ [  2, 1], [ 29, 1 ], [ 29, 17 ], [ 2, 15 ] } 
    };
    shape "LWIN" { 
	approx= { [ 32, 23 ] },
	{ [  0, 0], [ 32, 0 ], [ 32, 24 ], [ 0, 23 ] },
	{ [  2, 1], [ 29, 1 ], [ 29, 18 ], [ 2, 17 ] } 
    };
    shape "LALT" { 
	approx= { [ 32, 24 ] },
	{ [  0, 0], [ 32, 0 ], [ 32, 25 ], [ 0, 24 ] },
	{ [  2, 1], [ 29, 1 ], [ 29, 20 ], [ 2, 19 ] } 
    };
    shape "RDEF" { { [ 18,18] }, { [3,1], [15,15] } };
    shape "KEY7" {	{ [ 28, 18 ] }, { [ 14, 1], [26, 15] } };
    shape "KEYH" {	{ [ 24, 18 ] }, { [ 10, 1], [22, 15] } };
    shape "KEYN" {	{ [ 32, 18 ] }, { [ 18, 1], [30, 15] } };
    shape "BKSP" {	{ [ 41, 18 ] }, { [  3, 1], [39, 15] } };
    shape "BKSL" {	{ [ 24, 18 ] }, { [  3, 1], [22, 15] } };
    shape "RTRN" {	{ [ 37, 18 ] }, { [  3, 1], [35, 15] } };
    shape "RTSH" {	{ [ 43, 18 ] }, { [  3, 1], [41, 15] } };
    shape "RALT" { 
	approx= { [ 27, 24 ] },
	{ [  0, 0], [ 27, 0 ], [ 27, 24 ], [ 0, 25 ] },
	{ [  3, 1], [ 25, 1 ], [ 25, 19 ], [ 3, 20 ] } 
    };
    shape "RWIN" { 
	approx= { [ 27, 23 ] },
	{ [  0, 0], [ 27, 0 ], [ 27, 23 ], [ 0, 24 ] },
	{ [  3, 1], [ 25, 1 ], [ 25, 18 ], [ 3, 19 ] } 
    };
    shape "MENU" { 
	approx= { [ 27, 21 ] },
	{ [  0, 0], [ 27, 0 ], [ 27, 21 ], [ 0, 23 ] },
	{ [  3, 1], [ 25, 1 ], [ 25, 16 ], [ 3, 17 ] } 
    };
    shape "RCTL" { 
	approx= { [ 27, 19 ] },
	{ [  0, 0], [ 27, 0 ], [ 27, 19 ], [ 0, 21 ] },
	{ [  3, 1], [ 25, 1 ], [ 25, 14 ], [ 3, 15 ] } 
    };
    shape "KPAD" { { [ 18, 37 ] },	{ [ 3, 1 ], [ 16, 34 ] } };
    shape "KP0"  { { [ 37, 18 ] },	{ [ 3, 1 ], [ 35, 15 ] } };
    shape "SPCE" {
	{ [  4, 3], [42,10], [44, 0], [88, 0], [90,10], [130, 3], 
	  [134,26], [99,30], [67,33], [33,30], [  0,26] },
	{ [  6, 4.5], [43,11], [45, 1], [87, 1], [89,11], [128, 4.5], 
	  [131,23], [99,28], [67,32], [33,28], [  3,23] }
    };

    shape "EDGE" {
	cornerRadius= 2,
	{ [  25,   0 ],  [ 177,  17 ],  [ 329,   0 ], [ 542,   0 ],
	  [ 542, 150 ],  [ 354, 150 ],  [ 177, 185 ], [   0, 150 ] }
    };
    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    row.left= 1;
    key.shape= "LDEF";
    key.gap=  1;
    section "LeftFunction" {
	top= 10;
	left= 40;
	angle= 10;
	row {
	    top= 1;
	    keys {  <ESC>, { <FK01>, 12 }, <FK02>, <FK03>, <FK04>, <FK05> };
	};
    }; // End of "LeftFunction" section

    section "LeftAlpha" {
	top= 47;
	left= 30;
	angle= 10;
	row {
	    top= 1;
	    keys {	<AE00>, <AE01>, <AE02>, <AE03>, <AE04>,
			<AE05>, { <AE06>, "KEY6" }
	    };
	};
	row {
	    top= 20;
	    keys {	{ <TAB>, "TABK" },
			<AD01>, <AD02>, <AD03>, <AD04>, { <AD05>, "KEYT" }
	    };
	};
	row {
	    top= 39;
	    keys { 	{ <CAPS>, "CAPS" },
			<AC01>, <AC02>, <AC03>, <AC04>, { <AC05>, "KEYG" }
	    };
	};
	row {
	    top= 58;
	    keys { 	{ <LFSH>, "LFSH" }, 
			<AB01>, <AB02>, <AB03>, <AB04>, <AB05>
	    };
	};
	row {
	    top= 77;
	    keys {  { <LCTL>, "LCTL" }, { <LWIN>, "LWIN" }, { <LALT>, "LALT" } };
	};
    }; // End of "LeftAlpha" section

    key.shape= "RDEF";
    section "RightFunction" {
	top= 32;
	left= 195;
	angle= -10;
	row {
	    top= 1;
	    left= 1;
	    keys {  <FK06>, <FK07>, <FK08>, <FK09>, <FK10>, <FK11>, <FK12> };
	};
    }; // End of "RightFunction" section

    section "RightAlpha" {
	top= 71;
	left= 190;
	angle= -10;
	row.left= 1;
	row {
	    top= 1;
	    keys {	{ <AE07>, "KEY7" },
			<AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
			{ <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { 
		<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>,
		{ <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys {	{ <AC06>, "KEYH" },
			<AC07>, <AC08>, <AC09>, <AC10>, <AC11>,
			{ <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 58;
	    keys {	{ <AB06>, "KEYN" },
			<AB07>, <AB08>, <AB09>, <AB10>,
			{ <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    left= 40;
	    keys { 	{ <RALT>, "RALT" }, { <RWIN>, "RWIN" }, 
			{ <MENU>, "MENU" }, { <RCTL>, "RCTL" }
	    };
	};
    }; // End of "RightAlpha" section

    section "SpaceBar" {
	top= 139;
	left= 111;
	key.shape= "SPCE";
	row { keys { <SPCE> }; };
    };

    section "Editing" {
	top= 15;
	left= 385;
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 33;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 53;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 91;
	    left= 20;
	    keys { <UP> };
    	};
	row {
	    top= 109;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    shape "LED"  { 
	cornerRadius= 0,
	{ [  3,  1 ] }
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.left= 177;
    indicator.shape= "LED";
    indicator "Num Lock"     { top= 90; };
    indicator "Caps Lock"    { top= 107; };
    indicator "Scroll Lock"  { top= 127; };
    
    section "Keypad" {
	top= 47;
	left= 456;
	row {
	    top= 1;
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};

// Approximate layout for a Microsoft Natural(R) Keyboard Elite
// 
// Modified by Pavel Kurashov <pavell@mail.ru> Mon Oct  8 22:08:20 NOVST 2007
//
// * Function, editing and navigation keys are reduced in height
// * Navigation keys are repositioned in two columns
// * Leds are enlarged for better look
// * "BKSP" is aligned with "BKSL" and "RTRN"
// * Outline edges are slightly modified
//
xkb_geometry "elite" {

    // Approximate layout for a Microsoft Natural(R) Keyboard Elite
    description= "Microsoft Natural(r) Keyboard Elite";
    width= 495;
    height= 190;

    shape.cornerRadius= 1;
    shape "LDEF" { { [ 18,18] }, { [2,1], [15,15] } };
    shape "FKEY" { { [ 18,13] }, { [2,1], [15,10] } };
    shape "TABK" { { [ 26,18] }, { [2,1], [23,15] } }; 
    shape "CAPS" { { [ 30,18] }, { [2,1], [23,15] } }; 
    shape "LFSH" { { [ 41,18] }, { [2,1], [38,15] } };
    shape "KEY6" { { [ 22,18] }, { [2,1], [15,15] } };
    shape "KEYT" { { [ 33,18] }, { [2,1], [15,15] } };
    shape "KEYG" { { [ 29,18] }, { [2,1], [15,15] } };
    shape "LCTL" { 
	approx= { [ 32, 22 ] },
	{ [  0, 0], [ 32, 0 ], [ 32, 23 ], [ 0, 22 ] },
	{ [  2, 1], [ 29, 1 ], [ 29, 17 ], [ 2, 15 ] } 
    };
    shape "LWIN" { 
	approx= { [ 32, 23 ] },
	{ [  0, 0], [ 32, 0 ], [ 32, 24 ], [ 0, 23 ] },
	{ [  2, 1], [ 29, 1 ], [ 29, 18 ], [ 2, 17 ] } 
    };
    shape "LALT" { 
	approx= { [ 32, 24 ] },
	{ [  0, 0], [ 32, 0 ], [ 32, 25 ], [ 0, 24 ] },
	{ [  2, 1], [ 29, 1 ], [ 29, 20 ], [ 2, 19 ] } 
    };
    shape "RDEF" { 	{ [ 18,18  ] }, { [  2, 1], [15, 15] } };
    shape "KEY7" {	{ [ 28, 18 ] }, { [ 14, 1], [26, 15] } };
    shape "KEYH" {	{ [ 24, 18 ] }, { [ 10, 1], [22, 15] } };
    shape "KEYN" {	{ [ 32, 18 ] }, { [ 18, 1], [30, 15] } };
    shape "BKSP" {	{ [ 32, 18 ] }, { [  2, 1], [30, 15] } };
    shape "BKSL" {	{ [ 24, 18 ] }, { [  2, 1], [22, 15] } };
    shape "RTRN" {	{ [ 37, 18 ] }, { [  2, 1], [35, 15] } };
    shape "RTSH" {	{ [ 43, 18 ] }, { [  2, 1], [41, 15] } };
    shape "RALT" { 
	approx= { [ 27, 24 ] },
	{ [  0, 0], [ 27, 0 ], [ 27, 24 ], [ 0, 25 ] },
	{ [  3, 1], [ 25, 1 ], [ 25, 19 ], [ 3, 20 ] } 
    };
    shape "RWIN" { 
	approx= { [ 27, 23 ] },
	{ [  0, 0], [ 27, 0 ], [ 27, 23 ], [ 0, 24 ] },
	{ [  3, 1], [ 25, 1 ], [ 25, 18 ], [ 3, 19 ] } 
    };
    shape "MENU" { 
	approx= { [ 27, 21 ] },
	{ [  0, 0], [ 27, 0 ], [ 27, 21 ], [ 0, 23 ] },
	{ [  3, 1], [ 25, 1 ], [ 25, 16 ], [ 3, 17 ] } 
    };
    shape "RCTL" { 
	approx= { [ 27, 19 ] },
	{ [  0, 0], [ 27, 0 ], [ 27, 19 ], [ 0, 21 ] },
	{ [  3, 1], [ 25, 1 ], [ 25, 14 ], [ 3, 15 ] } 
    };
    shape "KPAD" { { [ 18, 37 ] },	{ [ 3, 1 ], [ 16, 34 ] } };
    shape "KP0"  { { [ 37, 18 ] },	{ [ 3, 1 ], [ 35, 15 ] } };
    shape "SPCE" {
	{ [  4, 3], [42,10], [44, 0], [88, 0], [90,10], [130, 3], 
	  [134,26], [99,30], [67,33], [33,30], [  0,26] },
	{ [  6, 4.5], [43,11], [45, 1], [87, 1], [89,11], [128, 4.5], 
	  [131,23], [99,28], [67,32], [33,28], [  3,23] }
    };

    shape "EDGE" {
	cornerRadius= 3,
	{ [  32,   15 ],  [140, 33],[ 220,  33 ],  [ 329,   15 ], [ 493,   15 ],
	  [ 493, 150 ],  [ 354, 150 ],  [200, 180], [ 153, 180 ], [   7, 150 ] }
    };
    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    row.left= 1;
    key.shape= "FKEY";
    key.gap=  1;
    section "LeftFunction" {
	top= 26;
	left= 40;
	angle= 10;
	row {
	    top= 1;
	    keys {  <ESC>, { <FK01>, 12 }, <FK02>, <FK03>, <FK04>, <FK05> };
	};
    }; // End of "LeftFunction" section

    key.shape= "LDEF";
    section "LeftAlpha" {
	top= 47;
	left= 30;
	angle= 10;
	row {
	    top= 1;
	    keys {	<TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
			<AE05>, { <AE06>, "KEY6" }
	    };
	};
	row {
	    top= 20;
	    keys {	{ <TAB>, "TABK" },
			<AD01>, <AD02>, <AD03>, <AD04>, { <AD05>, "KEYT" }
	    };
	};
	row {
	    top= 39;
	    keys { 	{ <CAPS>, "CAPS" },
			<AC01>, <AC02>, <AC03>, <AC04>, { <AC05>, "KEYG" }
	    };
	};
	row {
	    top= 58;
	    keys { 	{ <LFSH>, "LFSH" }, 
			<AB01>, <AB02>, <AB03>, <AB04>, <AB05>
	    };
	};
	row {
	    top= 77;
	    keys {  { <LCTL>, "LCTL" }, { <LWIN>, "LWIN" }, { <LALT>, "LALT" } };
	};
    }; // End of "LeftAlpha" section

    key.shape= "FKEY";
    section "RightFunction" {
	top= 48;
	left= 195;
	angle= -10;
	row {
	    top= 1;
	    left= 1;
	    keys {  <FK06>, <FK07>, <FK08>, <FK09>, <FK10>, <FK11>, <FK12> };
	};
    }; // End of "RightFunction" section

    key.shape= "RDEF";
    section "RightAlpha" {
	top= 71;
	left= 190;
	angle= -10;
	row.left= 1;
	row {
	    top= 1;
	    keys {	{ <AE07>, "KEY7" },
			<AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
			{ <BKSP>, "BKSP" }
	    };
	};
	row {
	    top= 20;
	    keys { 
		<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>,
		{ <BKSL>, "BKSL" }
	    };
	};
	row {
	    top= 39;
	    keys {	{ <AC06>, "KEYH" },
			<AC07>, <AC08>, <AC09>, <AC10>, <AC11>,
			{ <RTRN>, "RTRN" }
	    };
	};
	row {
	    top= 58;
	    keys {	{ <AB06>, "KEYN" },
			<AB07>, <AB08>, <AB09>, <AB10>,
			{ <RTSH>, "RTSH" }
	    };
	};
	row {
	    top= 77;
	    left= 40;
	    keys { 	{ <RALT>, "RALT" }, { <RWIN>, "RWIN" }, 
			{ <MENU>, "MENU" }, { <RCTL>, "RCTL" }
	    };
	};
    }; // End of "RightAlpha" section

    section "SpaceBar" {
	top= 139;
	left= 111;
	key.shape= "SPCE";
	row { keys { <SPCE> }; };
    };

    section "Editing" {
	key.shape="FKEY";
	top= 23;
	left= 348;
	row {
	    top= 0;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 22;
	    left=20;	
	    keys { <HOME>, <PGUP> };
	};
	row {
	    top= 36;
	    left=20;	
	    keys {  <END>, <PGDN> };
	};
	row {
	    top= 50;
	    left=20;	
	    keys { <DELE>, <INS> };
	};
	row {
	    top= 75;
	    left= 29;
	    keys { <UP> };
    	};
	row {
	    top= 89;
	    left=20;	
	    keys { <LEFT>, <RGHT> };
	};
	row {
	    top= 103;
	    left=29;	
	    keys { <DOWN> };
	};
    }; // End of "Editing" section

    shape "LED"  { 
	cornerRadius= 1,
	{ [  7,  2 ] }
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.left= 177;
    indicator.shape= "LED";
    indicator "Num Lock"     { top= 90; };
    indicator "Caps Lock"    { top= 107; };
    indicator "Scroll Lock"  { top= 127; };
    
    section "Keypad" {
	top= 44;
	left= 412;
	row {
	    top= 1;
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};
//
// Copyright (c) 1996 by Silicon Graphics Computer Systems, Inc.
//
// Permission to use, copy, modify, and distribute this
// software and its documentation for any purpose and without
// fee is hereby granted, provided that the above copyright
// notice appear in all copies and that both that copyright
// notice and this permission notice appear in supporting
// documentation, and that the name of Silicon Graphics not be 
// used in advertising or publicity pertaining to distribution 
// of the software without specific prior written permission.
// Silicon Graphics makes no representation about the suitability 
// of this software for any purpose. It is provided "as is"
// without any express or implied warranty.
// 
// SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
// SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
// AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
// GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
// DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
// THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
default xkb_geometry "pc101" {

    // This is an approximate layout for a 101-key (US/ASCII) SGI
    // keyboard.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes of a few keys by eye.  I didn't actually
    // *measure* a real keyboard.

    description= "Silicon Graphics 101-key keyboard";

    width= 472;
    height= 193;

    shape "EDGE" { cornerRadius= 2, { [ 472, 193 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "BKSL" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "RTRN" { { [ 40,18] }, { [2,1], [37,17] } };
    shape "CAPS" { { [ 34,18] }, { [2,1], [29,17] } };
    shape "RTSH" { { [ 49,18] }, { [2,1], [47,17] } };
    shape "LFSH" { { [ 44,18] }, { [2,1], [42,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [130,18] }, { [2,1], [128,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 50;
	row {
	    top= 1;
	    keys {	{ <ESC>, color="grey20" },
			{ <FK01>, 19}, <FK02>, <FK03>, <FK04>,
			{ <FK05>, 11}, <FK06>, <FK07>, <FK08>,
			{ <FK09>, 11}, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 83;
	row {
	    top= 1;
	    keys { 	<TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
			<AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
			<AE10>, <AE11>, <AE12>,
			{ <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys {	{ <TAB>, "TABK", color= "grey20" },
			<AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
			<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
			<AD11>, <AD12>,
			{ <BKSL>, "BKSL" }
	    };	
	};
	row {
	    top= 39;
	    keys { 	{ <CAPS>, "CAPS", color="grey20" },
	 		<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
			<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
			<AC11>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 58;
	    keys {	{ <LFSH>, "LFSH", color="grey20" }, 
	 		<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
			<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
			{ <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys {	<LCTL>,	{ <LALT>, 20 },
			{ <SPCE>, "SPCE",color="white" },
			<RALT>, { <RCTL>, 20 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 50;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 33;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 53;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 91;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 110;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    shape "LEDS" { cornerRadius= 0, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  1,  3 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  50;
	left= 377;
	color= "grey10";
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 64.5;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 386; };
    indicator "Caps Lock"    { left= 411; };
    indicator "Scroll Lock"  { left= 436; };
    text.top= 52;
    text.color= "black";
    text "NumLockLabel"		{ left= 382.5; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 407; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 432; text="Scroll\nLock"; };
    
    logo "SGILogoImage" 	{ 
	top= 17;
	left= 22;
	name= "SGI"; 
	shape= "LOGO"; 
    };
    text "SGILogoText"	{
	top= 21;
	left= 40;
	width= 50;
	text= "SiliconGraphics";
	font= "helvetica";
	slant= "o";
	weight= "bold";
	fontWidth= "narrow";
	fontSize= 24;
    };

    section "Keypad" {
	top= 83;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
    	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section
    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};

xkb_geometry "pc102" {

    // This is an approximate layout for 102-key SGI international
    // keyboards.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes of a few keys by eye.  I didn't actually
    // *measure* a real keyboard.

    description= "Silicon Graphics 102-key Keyboard";
    width= 470;
    height= 193;

    shape.cornerRadius= 1;
    shape "EDGE" { cornerRadius=2, { [ 470, 193 ] } };
    shape "NORM" { { [18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [35,18] }, { [2,1], [33,17] } };
    shape "TABK" { { [27,18] }, { [2,1], [25,17] } };
    shape "RTRN" {
	approx = { [ 0, 0], [26,37] },
	{ [ 0, 0], [26, 0], [26,37],
	  [ 5,37], [ 5,18], [ 0,18] },
	{ [ 1, 1], [24, 1], [24,36],
	  [ 7,36], [ 7,17], [ 1,17] }
    };
    shape "CAPS" { { [ 32,18] }, { [2,1], [25,17] } };
    shape "RTSH" { { [ 50,18] }, { [2,1], [48,17] } };
    shape "LFSH" { { [ 22,18] }, { [2,1], [20,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [130,18] }, { [2,1], [128,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 50;
	row {
	    top= 1;
	    keys {  	{ <ESC>, color="grey20" },
			{ <FK01>, 18}, <FK02>, <FK03>, <FK04>,
			{ <FK05>, 10}, <FK06>, <FK07>, <FK08>,
			{ <FK09>, 10}, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 83;
	row {
	    top= 1;
	    keys { 	<TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
			<AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
			<AE10>, <AE11>, <AE12>,
			{ <BKSP>, "BKSP", color= "grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { 	{ <TAB>, "TABK", color= "grey20" },
			<AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
			<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
			<AD11>, <AD12>,
			{ <RTRN>, "RTRN", color= "grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { 	{ <CAPS>, "CAPS", color= "grey20" },
			<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
			<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
			<AC11>, <BKSL>
	    };
	};
	row {
	    top= 58;
	    keys { 	{ <LFSH>, "LFSH", color= "grey20" }, <LSGT>,
			<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
			<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
			{ <RTSH>, "RTSH", color= "grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys {	<LCTL>,
			{ <LALT>, 19 },
			{ <SPCE>, "SPCE", color="white" },
			<RALT>,
			{ <RCTL>, 19 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 50;
	left= 308;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 33;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 53;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 91;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 110;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    shape "LEDS" { cornerRadius= 0, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  1,  3 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  50;
	left= 375;
	color= "grey10";
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 64.5;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 384; };
    indicator "Caps Lock"    { left= 409; };
    indicator "Scroll Lock"  { left= 434; };
    text.top= 52;
    text.color= "black";
    text "NumLockLabel"		{ left= 380.5; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 405; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 430; text="Scroll\nLock"; };

    logo "SGILogoImage" { 
	top= 17;
	left= 22;
	name= "SGI"; 
	shape= "LOGO"; 
    };
    text "SGILogoText"	{
	top= 21;
	left= 40;
	width= 50;
	text= "SiliconGraphics";
	font= "helvetica";
	slant= "o";
	weight= "bold";
	setWidth= "narrow";
	fontSize= 24;
    };

    section "Keypad" {
	top= 83;
	left= 374;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section
    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};

xkb_geometry "jp106" {
    description= "Silicon Graphics 106-key Japanese keyboard";
    width= 442;
    height= 167;

    shape "EDGE" { cornerRadius= 2, { [ 442, 167 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "BKSP" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "BKSL" { { [ 27,18] }, { [2,1], [ 25,17] } };
    shape "RTRN" {
        { [0,0],[ 27,0],[27,37],[4,37],[4,18],[0,18] } ,
        { [2,1],[ 25,1],[25,36],[5,36],[5,17],[2,17] } };
    shape "CAPS" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,17] } };
    shape "RTSH" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "SPCE" { { [ 46,18] }, { [2,1], [ 44,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,36] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    logo "SGILogoImage" { 
	top= 5;
	left= 6;
	name= "SGI"; 
	shape= "LOGO"; 
    };

    text "SGILogoText"	{
	top= 9;
	left= 25;
	width= 50;
	text= "SiliconGraphics";
	font= "helvetica";
	slant= "o";
	weight= "bold";
	fontWidth= "narrow";
	fontSize= 24;
    };

    shape "LEDS" { cornerRadius= 0.1, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  25;
	left= 362;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 40;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 366; };
    indicator "Caps Lock"    { left= 391; };
    indicator "Scroll Lock"  { left= 416; };
    text.top= 28;
    text.color= "black";
    text "NumLockLabel"		{ left= 366; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 391; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 416; text="Scroll\nLock"; };

    section.left= 5;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 25;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 18 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 ,color="grey20"}, {<FK06>,color="grey20"}, 
		    { <FK07>, color="grey20"}, {<FK08>,color="grey20"},
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { {<HZTG>,color="grey20"}, <AE01>, <AE02>, 
                    <AE03>, <AE04>, <AE05>, <AE06>, <AE07>, 
	            <AE08>, <AE09>, <AE10>, <AE11>, <AE12>,
		    <AE13>, { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, 1 ,"RTRN",color="grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <AC12>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    <AB11>, { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LCTL>, { <LALT>, 20 },<NFER>,
		   { <SPCE>, "SPCE", color="white" },
		   <XFER>,<HKTG>,<RALT>, { <RCTL>, 17 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 296;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 361;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "jp106" geometry
//
// Copyright (c) 1996 by Silicon Graphics Computer Systems, Inc.
//
// Permission to use, copy, modify, and distribute this
// software and its documentation for any purpose and without
// fee is hereby granted, provided that the above copyright
// notice appear in all copies and that both that copyright
// notice and this permission notice appear in supporting
// documentation, and that the name of Silicon Graphics not be 
// used in advertising or publicity pertaining to distribution 
// of the software without specific prior written permission.
// Silicon Graphics makes no representation about the suitability 
// of this software for any purpose. It is provided "as is"
// without any express or implied warranty.
// 
// SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
// SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
// AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
// GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
// DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
// THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
default xkb_geometry "pc101" {

    // This is an approximate layout for a 101-key (US/ASCII) SGI
    // keyboard.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes of a few keys by eye.  I didn't actually
    // *measure* a real keyboard.

    description= "Silicon Graphics 101-key keyboard";

    width= 472;
    height= 193;

    shape "EDGE" { cornerRadius= 2, { [ 472, 193 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "BKSL" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "RTRN" { { [ 40,18] }, { [2,1], [37,17] } };
    shape "CAPS" { { [ 34,18] }, { [2,1], [29,17] } };
    shape "RTSH" { { [ 49,18] }, { [2,1], [47,17] } };
    shape "LFSH" { { [ 44,18] }, { [2,1], [42,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [130,18] }, { [2,1], [128,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 50;
	row {
	    top= 1;
	    keys {	{ <ESC>, color="grey20" },
			{ <FK01>, 19}, <FK02>, <FK03>, <FK04>,
			{ <FK05>, 11}, <FK06>, <FK07>, <FK08>,
			{ <FK09>, 11}, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 83;
	row {
	    top= 1;
	    keys { 	<TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
			<AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
			<AE10>, <AE11>, <AE12>,
			{ <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys {	{ <TAB>, "TABK", color= "grey20" },
			<AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
			<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
			<AD11>, <AD12>,
			{ <BKSL>, "BKSL" }
	    };	
	};
	row {
	    top= 39;
	    keys { 	{ <CAPS>, "CAPS", color="grey20" },
	 		<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
			<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
			<AC11>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 58;
	    keys {	{ <LFSH>, "LFSH", color="grey20" }, 
	 		<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
			<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
			{ <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys {	<LCTL>,	{ <LALT>, 20 },
			{ <SPCE>, "SPCE",color="white" },
			<RALT>, { <RCTL>, 20 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 50;
	left= 312;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 33;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 53;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 91;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 110;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    shape "LEDS" { cornerRadius= 0, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  1,  3 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  50;
	left= 377;
	color= "grey10";
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 64.5;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 386; };
    indicator "Caps Lock"    { left= 411; };
    indicator "Scroll Lock"  { left= 436; };
    text.top= 52;
    text.color= "black";
    text "NumLockLabel"		{ left= 382.5; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 407; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 432; text="Scroll\nLock"; };
    
    logo "SGILogoImage" 	{ 
	top= 17;
	left= 22;
	name= "SGI"; 
	shape= "LOGO"; 
    };
    text "SGILogoText"	{
	top= 21;
	left= 40;
	width= 50;
	text= "SiliconGraphics";
	font= "helvetica";
	slant= "o";
	weight= "bold";
	fontWidth= "narrow";
	fontSize= 24;
    };

    section "Keypad" {
	top= 83;
	left= 376;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
    	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section
    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};
xkb_geometry "pc102" {

    // This is an approximate layout for 102-key SGI international
    // keyboards.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes of a few keys by eye.  I didn't actually
    // *measure* a real keyboard.

    description= "Silicon Graphics 102-key Keyboard";
    width= 470;
    height= 193;

    shape.cornerRadius= 1;
    shape "EDGE" { cornerRadius=2, { [ 470, 193 ] } };
    shape "NORM" { { [18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [35,18] }, { [2,1], [33,17] } };
    shape "TABK" { { [27,18] }, { [2,1], [25,17] } };
    shape "RTRN" {
	approx = { [ 0, 0], [26,37] },
	{ [ 0, 0], [26, 0], [26,37],
	  [ 5,37], [ 5,18], [ 0,18] },
	{ [ 1, 1], [24, 1], [24,36],
	  [ 7,36], [ 7,17], [ 1,17] }
    };
    shape "CAPS" { { [ 32,18] }, { [2,1], [25,17] } };
    shape "RTSH" { { [ 50,18] }, { [2,1], [48,17] } };
    shape "LFSH" { { [ 22,18] }, { [2,1], [20,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [130,18] }, { [2,1], [128,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 50;
	row {
	    top= 1;
	    keys {  	{ <ESC>, color="grey20" },
			{ <FK01>, 18}, <FK02>, <FK03>, <FK04>,
			{ <FK05>, 10}, <FK06>, <FK07>, <FK08>,
			{ <FK09>, 10}, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 83;
	row {
	    top= 1;
	    keys { 	<TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
			<AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
			<AE10>, <AE11>, <AE12>,
			{ <BKSP>, "BKSP", color= "grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { 	{ <TAB>, "TABK", color= "grey20" },
			<AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
			<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
			<AD11>, <AD12>,
			{ <RTRN>, "RTRN", color= "grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { 	{ <CAPS>, "CAPS", color= "grey20" },
			<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
			<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
			<AC11>, <BKSL>
	    };
	};
	row {
	    top= 58;
	    keys { 	{ <LFSH>, "LFSH", color= "grey20" }, <LSGT>,
			<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
			<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
			{ <RTSH>, "RTSH", color= "grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys {	<LCTL>,
			{ <LALT>, 19 },
			{ <SPCE>, "SPCE", color="white" },
			<RALT>,
			{ <RCTL>, 19 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 50;
	left= 308;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 33;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 53;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 91;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 110;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    shape "LEDS" { cornerRadius= 0, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  1,  3 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  50;
	left= 375;
	color= "grey10";
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 64.5;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 384; };
    indicator "Caps Lock"    { left= 409; };
    indicator "Scroll Lock"  { left= 434; };
    text.top= 52;
    text.color= "black";
    text "NumLockLabel"		{ left= 380.5; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 405; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 430; text="Scroll\nLock"; };

    logo "SGILogoImage" { 
	top= 17;
	left= 22;
	name= "SGI"; 
	shape= "LOGO"; 
    };
    text "SGILogoText"	{
	top= 21;
	left= 40;
	width= 50;
	text= "SiliconGraphics";
	font= "helvetica";
	slant= "o";
	weight= "bold";
	setWidth= "narrow";
	fontSize= 24;
    };

    section "Keypad" {
	top= 83;
	left= 374;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section
    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};
//
// Copyright (c) 1996 by Silicon Graphics Computer Systems, Inc.
//
// Permission to use, copy, modify, and distribute this
// software and its documentation for any purpose and without
// fee is hereby granted, provided that the above copyright
// notice appear in all copies and that both that copyright
// notice and this permission notice appear in supporting
// documentation, and that the name of Silicon Graphics not be 
// used in advertising or publicity pertaining to distribution 
// of the software without specific prior written permission.
// Silicon Graphics makes no representation about the suitability 
// of this software for any purpose. It is provided "as is"
// without any express or implied warranty.
// 
// SILICON GRAPHICS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
// SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
// AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL SILICON
// GRAPHICS BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL 
// DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, 
// DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE 
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION  WITH
// THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
default xkb_geometry "pc101" {

    // This is an approximate layout for a 101-key (US/ASCII) SGI
    // keyboard.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes of a few keys by eye.  I didn't actually
    // *measure* a real keyboard.

    description= "101-key keyboard for Silicon Graphics O2";

    width= 448;
    height= 162;

    shape "EDGE" { 
	cornerRadius= 2, 
	{ [ 15,    0 ], [ 433,   0 ], [ 433, 10 ], [ 448, 10 ],
	  [ 448, 162 ], [   0, 162 ], [   0, 10 ], [ 15,  10 ] }
    };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [ 37,18] }, { [2,1], [35,17] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "BKSL" { { [ 27,18] }, { [2,1], [25,17] } };
    shape "RTRN" { { [ 40,18] }, { [2,1], [37,17] } };
    shape "CAPS" { { [ 34,18] }, { [2,1], [29,17] } };
    shape "RTSH" { { [ 49,18] }, { [2,1], [47,17] } };
    shape "LFSH" { { [ 44,18] }, { [2,1], [42,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [130,18] }, { [2,1], [128,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "LOGO" { { [ 12,12] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 6;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 25;
	row {
	    top= 1;
	    keys {	{ <ESC>, color="grey20" },
			{ <FK01>, 19}, <FK02>, <FK03>, <FK04>,
			{ <FK05>, 11}, <FK06>, <FK07>, <FK08>,
			{ <FK09>, 11}, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 58;
	row {
	    top= 1;
	    keys { 	<TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
			<AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
			<AE10>, <AE11>, <AE12>,
			{ <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys {	{ <TAB>, "TABK", color= "grey20" },
			<AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
			<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
			<AD11>, <AD12>,
			{ <BKSL>, "BKSL" }
	    };	
	};
	row {
	    top= 39;
	    keys { 	{ <CAPS>, "CAPS", color="grey20" },
	 		<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
			<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
			<AC11>, { <RTRN>, "RTRN", color="grey20" }
	    };
	};
	row {
	    top= 58;
	    keys {	{ <LFSH>, "LFSH", color="grey20" }, 
	 		<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
			<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
			{ <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys {	<LCTL>,	{ <LALT>, 20 },
			{ <SPCE>, "SPCE",color="white" },
			<RALT>, { <RCTL>, 20 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 25;
	left= 299;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 33;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 53;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 91;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 110;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    shape "LEDS" { cornerRadius= 0, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  3, 1.5] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  25;
	left= 364;
	color= "grey10";
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 40.5;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 372; };
    indicator "Caps Lock"    { left= 397; };
    indicator "Scro llLock"  { left= 422; };

    text.font= "helvetica";
    text.weight= "bold";
    text.slant= "r";
    text.fontWidth= "normal";
    text.fontSize= 12;
    text.top= 39.5;
    text.color= "black";
    text "NumLockLabel"		{ left= 376.5; text="1"; };
    text "CapsLockLabel"	{ left= 401.5; text="A"; };
    text "ScrollLockLabel"	{ left= 426.5; text="S"; };
    
    logo "SGILogoImage" 	{ 
	top= 26.5;
	left= 396;
	name= "SGI"; 
	shape= "LOGO"; 
    };
    text.font= "helvetica";
    text.weight= "bold";
    text.slant= "o";
    text.fontWidth= "narrow";
    text.fontSize= 18;
    text "SiliconLogoText"	{
	top= 27;
	left= 375;
	width= 20;
	text= "Silicon";
    };
    text "GraphicsLogoText"	{
	top= 27;
	left= 409;
	width= 20;
	text= "Graphics";
    };

    section "Keypad" {
	top= 58;
	left= 363;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
    	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color= "grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section
    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};

xkb_geometry "pc102" {

    // This is an approximate layout for 102-key SGI international
    // keyboards.  I just took a similar layout (101 key PC keyboard)
    // and adjusted the sizes of a few keys by eye.  I didn't actually
    // *measure* a real keyboard.

    description= "Silicon Graphics 102-key Keyboard";
    width= 470;
    height= 193;

    shape.cornerRadius= 1;
    shape "EDGE" { cornerRadius=2, { [ 470, 193 ] } };
    shape "NORM" { { [18,18] }, { [2,1], [16,17] } };
    shape "BKSP" { { [35,18] }, { [2,1], [33,17] } };
    shape "TABK" { { [27,18] }, { [2,1], [25,17] } };
    shape "RTRN" {
	approx = { [ 0, 0], [26,37] },
	{ [ 0, 0], [26, 0], [26,37],
	  [ 5,37], [ 5,18], [ 0,18] },
	{ [ 1, 1], [24, 1], [24,36],
	  [ 7,36], [ 7,17], [ 1,17] }
    };
    shape "CAPS" { { [ 32,18] }, { [2,1], [25,17] } };
    shape "RTSH" { { [ 50,18] }, { [2,1], [48,17] } };
    shape "LFSH" { { [ 22,18] }, { [2,1], [20,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [26,17] } };
    shape "SPCE" { { [130,18] }, { [2,1], [128,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [16,36] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    section.left= 19;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 50;
	row {
	    top= 1;
	    keys {  	{ <ESC>, color="grey20" },
			{ <FK01>, 18}, <FK02>, <FK03>, <FK04>,
			{ <FK05>, 10}, <FK06>, <FK07>, <FK08>,
			{ <FK09>, 10}, <FK10>, <FK11>, <FK12>
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 83;
	row {
	    top= 1;
	    keys { 	<TLDE>, <AE01>, <AE02>, <AE03>, <AE04>,
			<AE05>, <AE06>, <AE07>, <AE08>, <AE09>,
			<AE10>, <AE11>, <AE12>,
			{ <BKSP>, "BKSP", color= "grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { 	{ <TAB>, "TABK", color= "grey20" },
			<AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
			<AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
			<AD11>, <AD12>,
			{ <RTRN>, "RTRN", color= "grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { 	{ <CAPS>, "CAPS", color= "grey20" },
			<AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
			<AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
			<AC11>, <BKSL>
	    };
	};
	row {
	    top= 58;
	    keys { 	{ <LFSH>, "LFSH", color= "grey20" }, <LSGT>,
			<AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
			<AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
			{ <RTSH>, "RTSH", color= "grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys {	<LCTL>,
			{ <LALT>, 19 },
			{ <SPCE>, "SPCE", color="white" },
			<RALT>,
			{ <RCTL>, 19 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 50;
	left= 308;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <PRSC>, <SCLK>, <PAUS> };
	};
	row {
	    top= 33;
	    keys { <INS>, <HOME>, <PGUP> };
	};
	row {
	    top= 53;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 91;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 110;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    shape "LEDS" { cornerRadius= 0, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  1,  3 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  50;
	left= 375;
	color= "grey10";
    };
    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 64.5;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 384; };
    indicator "Caps Lock"    { left= 409; };
    indicator "Scroll Lock"  { left= 434; };
    text.top= 52;
    text.color= "black";
    text "NumLockLabel"		{ left= 380.5; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 405; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 430; text="Scroll\nLock"; };

    logo "SGILogoImage" { 
	top= 17;
	left= 22;
	name= "SGI"; 
	shape= "LOGO"; 
    };
    text "SGILogoText"	{
	top= 21;
	left= 40;
	width= 50;
	text= "SiliconGraphics";
	font= "helvetica";
	slant= "o";
	weight= "bold";
	setWidth= "narrow";
	fontSize= 24;
    };

    section "Keypad" {
	top= 83;
	left= 374;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section
    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;
};

xkb_geometry "jp106" {
    description= "Silicon Graphics 106-key Japanese keyboard";
    width= 442;
    height= 167;

    shape "EDGE" { cornerRadius= 2, { [ 442, 167 ] } };
    shape.cornerRadius= 1;
    shape "NORM" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "BKSP" { { [ 18,18] }, { [2,1], [ 16,17] } };
    shape "TABK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "BKSL" { { [ 27,18] }, { [2,1], [ 25,17] } };
    shape "RTRN" {
        { [0,0],[ 27,0],[27,37],[4,37],[4,18],[0,18] } ,
        { [2,1],[ 25,1],[25,36],[5,36],[5,17],[2,17] } };
    shape "CAPS" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "LFSH" { { [ 42,18] }, { [2,1], [ 40,17] } };
    shape "RTSH" { { [ 32,18] }, { [2,1], [ 30,17] } };
    shape "MODK" { { [ 28,18] }, { [2,1], [ 26,17] } };
    shape "SPCE" { { [ 46,18] }, { [2,1], [ 44,17] } };
    shape "KP0"  { { [ 37,18] }, { [2,1], [ 35,17] } };
    shape "KPAD" { { [ 18,37] }, { [2,1], [ 16,36] } };
    shape "LOGO" { { [ 16,16] } };

    outline "Edges" {
	top= 0;
	left= 0;
	shape= "EDGE";
    };

    logo "SGILogoImage" { 
	top= 5;
	left= 6;
	name= "SGI"; 
	shape= "LOGO"; 
    };

    text "SGILogoText"	{
	top= 9;
	left= 25;
	width= 50;
	text= "SiliconGraphics";
	font= "helvetica";
	slant= "o";
	weight= "bold";
	fontWidth= "narrow";
	fontSize= 24;
    };

    shape "LEDS" { cornerRadius= 0.1, { [ 76 ,20 ] } };
    shape "LED"  { cornerRadius= 0, { [  5,  1 ] } };
    solid "LedPanel" {
	shape= "LEDS";
	top=  25;
	left= 362;
	color= "grey10";
    };

    indicator.onColor= "green";
    indicator.offColor= "green30";
    indicator.top= 40;
    indicator.shape= "LED";
    indicator "Num Lock"     { left= 366; };
    indicator "Caps Lock"    { left= 391; };
    indicator "Scroll Lock"  { left= 416; };
    text.top= 28;
    text.color= "black";
    text "NumLockLabel"		{ left= 366; text="Num\nLock"; };
    text "CapsLockLabel"	{ left= 391; text="Caps\nLock"; };
    text "ScrollLockLabel"	{ left= 416; text="Scroll\nLock"; };

    section.left= 5;
    row.left= 1;
    key.shape= "NORM";
    key.gap=  1;
    section "Function" {
	top= 25;
	row {
	    top= 1;
	    keys {  { <ESC>, color="grey20" },
		    { <FK01>, 18 }, <FK02>, <FK03>, <FK04>,
		    { <FK05>, 11 ,color="grey20"}, {<FK06>,color="grey20"}, 
		    { <FK07>, color="grey20"}, {<FK08>,color="grey20"},
		    { <FK09>, 11 }, <FK10>, <FK11>, <FK12>,
		    { <PRSC>, 8 }, <SCLK>, <PAUS> 
	    };
	};
    }; // End of "Function" section

    section "Alpha" {
	top= 61;
	row {
	    top= 1;
	    keys { {<HZTG>,color="grey20"}, <AE01>, <AE02>, 
                    <AE03>, <AE04>, <AE05>, <AE06>, <AE07>, 
	            <AE08>, <AE09>, <AE10>, <AE11>, <AE12>,
		    <AE13>, { <BKSP>, "BKSP", color="grey20" }
	    };
	};
	row {
	    top= 20;
	    keys { { <TAB>, "TABK", color="grey20" },
		   <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, 
		   <AD06>, <AD07>, <AD08>, <AD09>, <AD10>, 
		   <AD11>, <AD12>, { <RTRN>, 1 ,"RTRN",color="grey20" }
	    };
	};
	row {
	    top= 39;
	    keys { { <CAPS>, "CAPS", color="grey20" },
		   <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, 
		   <AC06>, <AC07>, <AC08>, <AC09>, <AC10>, 
		   <AC11>, <AC12>
	    };
	};
	row {
	    top= 58;
	    keys { { <LFSH>, "LFSH", color="grey20" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>, 
		    <AB11>, { <RTSH>, "RTSH", color="grey20" }
	    };
	};
	row {
	    top= 77;
	    key.shape= "MODK";
	    key.color= "grey20";
	    keys { <LCTL>, { <LALT>, 20 },<NFER>,
		   { <SPCE>, "SPCE", color="white" },
		   <XFER>,<HKTG>,<RALT>, { <RCTL>, 17 }
	    };
	};
    }; // End of "Alpha" section

    section "Editing" {
	top= 61;
	left= 296;
	key.color= "grey20";
	row {
	    top= 1;
	    keys { <INS>, <HOME>, <PGUP> };
	};
        row {
	    top= 20;
	    keys { <DELE>, <END>, <PGDN> };
	};
	row {
	    top= 58;
	    left= 20;
	    keys { <UP> };
	};
	row {
	    top= 77;
	    keys { <LEFT>, <DOWN>, <RGHT> };
	};
    }; // End of "Editing" section

    section "Keypad" {
	top= 61;
	left= 361;
	row {
	    top= 1;
	    key.color= "grey20";
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
	};
	row {
	    top= 20;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD", color="grey20" } };
	};
	row {
	    top= 39;
	    keys { <KP4>, <KP5>, <KP6> };
	};
	row {
	    top= 58;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD", color="grey20" } };
	};
	row {
	    top= 77;
	    keys { { <KP0>, "KP0" }, <KPDL> };
	};
    }; // End of "Keypad" section

    alias <AC00> = <CAPS>;
    alias <AA00> = <LCTL>;

}; // End of "jp106" geometry
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log: lk,v 
// Revision 1.2  1996/06/18  09:12:47  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.6.2  1995/08/18  21:15:16  William_Walker
// 	Upgrade XKB to Protocol Rev. 0.64
// 	[1995/08/18  20:41:46  William_Walker]
//
// Revision 1.1.2.5  1995/08/11  19:35:47  William_Walker
// 	Sync up with Erik's pool.
// 	[1995/08/11  18:35:58  William_Walker]
// 
// Revision 1.1.2.4  1995/06/27  12:17:28  William_Walker
// 	Rename <TLDE> to ISO9995 compliant <AE00>.
// 	[1995/06/26  20:23:07  William_Walker]
// 
// Revision 1.1.2.3  1995/06/09  20:54:36  William_Walker
// 	Add VT105 layout support and ISO group support
// 	[1995/06/09  20:40:38  William_Walker]
// 
// Revision 1.1.2.2  1995/06/05  19:21:16  William_Walker
// 	New file.  I love keymaps.
// 	[1995/06/05  18:05:43  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: lk,v  Revision: 1.2  (DEC) Date: 1996/01/24 12:16:00
// 
xkb_geometry "lk201" {
    width	       = 530;
    height	       = 170;
    shape.cornerRadius = 1;

    shape "NORM" { { [18,19] }, { [3,2], [15,16] } };
    shape "RTRN" {
	approx = { [0,0],[23,19] },
        { [0,0], [23,0], [23,39], [5,39], [5,19], [0,19] },
        { [3,2], [20,2], [20,36], [8,36], [8,16], [3,16] }
    };
    shape "LONG"  { { [37,19] }, { [3,2], [34,16] } };
    shape "TALL" { { [18,39] }, { [3,2], [15,36] } };
    shape "MED" { { [28,19] }, { [3,2], [25,16] } };
    shape "CAPS" { { [28,19] }, { [3,2], [18,16] } };
    shape "SPCE" { { [171,19] },{ [3,2], [168,16]} };
    shape "LEDS" { [ 30,15] };
    shape "LED"  { [  5, 2] };

    section.left= 27;
    row.left	= 1;
    key.shape	= "NORM";
    key.gap	=  1;

    section "Function" { top = 20;
        row { top = 1;
	    keys {  <FK01>, <FK02>, <FK03>, <FK04>, <FK05>,
		    { <FK06>, 19 }, <FK07>, <FK08>, <FK09>, <FK10>,
		    { <FK11>, 19 }, <FK12>, <FK13>, <FK14>,
		    { <FK17>, 98 }, <FK18>, <FK19>, <FK20>
	    };
        };
    };

    section "Editing" { top = 20; left = 350;
        row { top = 1;
	    keys { <HELP>, { <DO>, "LONG" } };
        };
        row { top = 41;
	    keys { <FIND>, <INS>, <DELE> };
        };
        row { top = 61;
	    keys { <SELE>, <PGUP>, <PGDN> };
        };
        row { top = 81; left = 20;
	    keys { <UP> };
        };
        row { top = 101;
	    keys { <LEFT>, <DOWN>, <RGHT> };
        };
    };

    section "Keypad" { top = 60; left = 426;
        row { top = 1;
	    keys { <KPF1>, <KPF2>, <KPF3>, <KPF4> };
        };
        row { top = 21;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
        };
        row { top = 41;
	    keys { <KP4>, <KP5>, <KP6>, <KPCO> };
        };
        row { top = 61;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "TALL" } };
        };
        row { top = 81;
	    keys { { <KP0>, "LONG" }, <KPDL> };
        };
    };

    section "Alpha" { top = 60;
        row { top = 1; left = 15;
	    keys {  <AE00>, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    { <BKSP>, "MED" }
	    };
        };
        row { top = 21; left = 15;
	    keys {  { <TAB>, "MED" },
		    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <RTRN>, "RTRN" }
	    };

        };
        row { top = 41;
	    keys {  <LCTL>,
		    { <CAPS>, "CAPS" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, <BKSL>
	    };
        };
        row { top = 61;
	    keys {  { <LFSH>, "LONG" },
		    <AB00>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, "LONG" }
	    };
        };
        row { top = 81;	left = 26;
	    keys {  { <LCMP>, "LONG" },
	    	    { <SPCE>, "SPCE" }
	    };
        };
    };

    section.left = 341;
    section.top  = 3;

    section "Indicators" {
        indicator.onColor = "#00ff00";
        indicator.offColor= "#001000";
        indicator.top = 10;
        indicator.shape= "LED";
        indicator "Scroll Lock" { left = 9;  };
        indicator "Caps Lock"   { left = 27; };
        indicator "Compose"     { left = 45; };
        indicator "Wait"        { left = 63; };
        text.top = 4;
        text.color = "black";
        text "HoldScreenLabel" {left = 5; text="Hold\n"; };
        text "CapsLockLabel" {left = 23; text="Lock\n"; };
        text "ComposeLabel" {left = 37; text="Compose\n"; };
        text "WaitLabel" {left = 60; text="Wait\n"; };
    };
};

xkb_geometry "lk401" {

    width		= 480;
    height		= 180;
    shape.cornerRadius	= 1;

    shape "NORM" { { [18,19] }, { [3,2], [15,16] } };
    shape "RTRN" {
	approx = { [0,0],[23,19] },
        { [0,0], [23,0], [23,39], [5,39], [5,19], [0,19] },
        { [3,2], [20,2], [20,36], [8,36], [8,16], [3,16] }
    };
    shape "LONG"  { { [37,19] }, { [3,2], [34,16] } };
    shape "TALL" { { [18,39] }, { [3,2], [15,36] } };
    shape "MED" { { [28,19] }, { [3,2], [25,16] } };
    shape "CAPS" { { [28,19] }, { [3,2], [18,16] } };
    shape "SPCE" { { [131,19] },{ [3,2], [128,16]} };
    shape "LEDS" { [ 36,15] };
    shape "LED"  { [  5, 2] };

    section.left= 17;
    row.left	= 1;
    key.shape	= "NORM";
    key.gap	=  1;

    text "Logo" {left = 20; top = 10; text="digital\n"; };

    section "Function" { top = 20;
    	row { top = 1;
	    keys {  <FK01>, <FK02>, <FK03>, <FK04>, <FK05>,
	    	    { <FK06>, 15 }, <FK07>, <FK08>, <FK09>, <FK10>,
		    { <FK11>, 15 }, <FK12>, <FK13>, <FK14>,
		    { <FK17>, 75 }, <FK18>, <FK19>, <FK20>
	    };
        };
    };

    section "Editing" { top = 20; left = 320;
        row { top = 1;
	    keys { <HELP>, { <DO>, "LONG" } };
        };
        row { top = 41;
	    keys { <FIND>, <INS>, <DELE> };
        };
        row { top = 61;
	    keys { <SELE>, <PGUP>, <PGDN> };
        };
        row { top = 81; left= 20;
	    keys { <UP> };
        };
        row { top = 101;
	    keys { <LEFT>, <DOWN>, <RGHT> };
        };
    };

    section "Keypad" { top = 60; left = 385;
        row { top = 1;
	    keys { <KPF1>, <KPF2>, <KPF3>, <KPF4> };
        };
        row {
	    top = 21;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
        };
        row { top = 41;
	    keys { <KP4>, <KP5>, <KP6>, <KPCO> };
        };
        row { top = 61;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "TALL" } };
        };
        row { top = 81;
	    keys { { <KP0>, "LONG" }, <KPDL> };
        };
    };

    section "Alpha" { top = 60;
        row { top = 1; left = 15;
	    keys {  <AE00>, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    { <BKSP>, "MED" }
	    };
        };
        row { top = 21; left = 15;
	    keys {	{ <TAB>, "MED" },
	    	    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <RTRN>, "RTRN" }
	    };

        };
        row { top = 41;
	    keys {  <LCTL>,
	    	    { <CAPS>, "CAPS" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, <BKSL>
	    };
        };
        row { top = 61;
	    keys { 	{ <LFSH>, "LONG" },
		    <AB00>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, "LONG" }
	    };
        };
        row { top = 81; left = 29;
	    keys { 	{ <LCMP>, "MED" },
		    { <LALT>, "MED" },
		    { <SPCE>, "SPCE" },
		    { <RALT>, "MED" },
		    { <RCMP>, "MED" }
	    };
        };
    };

    section.left = 69;
    section.top  = 3;
    section "Indicators" {
        solid "led_panel" { top = 0; left = 0;
	    cornerRadius = 1;
	    shape = "LEDS";
	    color = "grey";
        };
        indicator.onColor = "#00ff00";
        indicator.offColor= "#001000";
        indicator.shape   = "LED";
        indicator.top 	  = 1;
        indicator "Scroll Lock" { left = 3;  };
        indicator "Caps Lock"   { left = 22; };
    };
    section "IndicatorLabels" {
	text.top = 4;
	text.color = "black";
	text "ScrollLockLabel" {left = 3;  text="Scroll\nLock"; };
	text "CapsLockLabel"   {left = 22; text="Caps\nLock"; };
    };
};

xkb_geometry "lk450" {

    width		= 480;
    height		= 180;
    shape.cornerRadius	= 1;

    shape "NORM" { { [18,19] }, { [3,2], [15,16] } };
    shape "RTRN" {
	approx = { [0,0],[23,19] },
        { [0,0], [23,0], [23,39], [5,39], [5,19], [0,19] },
        { [3,2], [20,2], [20,36], [8,36], [8,16], [3,16] }
    };
    shape "LONG"  { { [37,19] }, { [3,2], [34,16] } };
    shape "TALL" { { [18,39] }, { [3,2], [15,36] } };
    shape "MED" { { [28,19] }, { [3,2], [25,16] } };
    shape "CAPS" { { [28,19] }, { [3,2], [18,16] } };
    shape "SPCE" { { [131,19] },{ [3,2], [128,16]} };
    shape "LEDS" { [ 36,15] };
    shape "LED"  { [  5, 2] };

    section.left= 17;
    row.left	= 1;
    key.shape	= "NORM";
    key.gap	=  1;

    text "Logo" {left = 20; top = 10; text="digital\n"; };

    section "Function" { top = 20;
    	row { top = 1;
	    keys {  <FK01>, <FK02>, <FK03>, <FK04>, <FK05>,
	    	    { <FK06>, 15 }, <FK07>, <FK08>, <FK09>, <FK10>,
		    { <FK11>, 15 }, <FK12>, <FK13>, <FK14>,
		    { <FK17>, 75 }, <FK18>, <FK19>, <FK20>
	    };
        };
    };

    section "Editing" { top = 20; left = 320;
        row { top = 1;
	    keys { <HELP>, { <DO>, "LONG" } };
        };
        row { top = 41;
	    keys { <FIND>, <INS>, <DELE> };
        };
        row { top = 61;
	    keys { <SELE>, <PGUP>, <PGDN> };
        };
        row { top = 81; left= 20;
	    keys { <UP> };
        };
        row { top = 101;
	    keys { <LEFT>, <DOWN>, <RGHT> };
        };
    };

    section "Keypad" { top = 60; left = 385;
        row { top = 1;
	    keys { <KPF1>, <KPF2>, <KPF3>, <KPF4> };
        };
        row {
	    top = 21;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
        };
        row { top = 41;
	    keys { <KP4>, <KP5>, <KP6>, <KPCO> };
        };
        row { top = 61;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "TALL" } };
        };
        row { top = 81;
	    keys { { <KP0>, "LONG" }, <KPDL> };
        };
    };

    section "Alpha" { top = 60;
        row { top = 1; left = 15;
	    keys {  <AE00>, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    { <BKSP>, "MED" }
	    };
        };
        row { top = 21; left = 15;
	    keys {	{ <TAB>, "MED" },
	    	    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <RTRN>, "RTRN" }
	    };

        };
        row { top = 41;
	    keys {  <LCTL>,
	    	    { <CAPS>, "CAPS" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, <BKSL>
	    };
        };
        row { top = 61;
	    keys { 	{ <LFSH>, "LONG" },
		    <AB00>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, "LONG" }
	    };
        };
        row { top = 81; left = 29;
	    keys { 	{ <LCMP>, "MED" },
		    { <LALT>, "MED" },
		    { <SPCE>, "SPCE" },
		    { <RALT>, "MED" },
		    { <RCMP>, "MED" }
	    };
        };
    };

    section.left = 69;
    section.top  = 3;
    section "Indicators" {
        solid "led_panel" { top = 0; left = 0;
	    cornerRadius = 1;
	    shape = "LEDS";
	    color = "grey";
        };
        indicator.onColor = "#00ff00";
        indicator.offColor= "#001000";
        indicator.shape   = "LED";
        indicator.top 	  = 1;
        indicator "Scroll Lock" { left = 3;  };
        indicator "Caps Lock"   { left = 22; };
    };
    section "IndicatorLabels" {
	text.top = 4;
	text.color = "black";
	text "ScrollLockLabel" {left = 3;  text="Scroll\nLock"; };
	text "CapsLockLabel"   {left = 22; text="Caps\nLock"; };
    };
};

xkb_geometry "lk401bj"
{
    width		= 480;
    height		= 180;
    shape.cornerRadius  = 1;

    shape "NORM" { { [18,19] }, { [3,2], [15,16] } };
    shape "RTRN" {
    	approx = { [0,0],[23,19] },
        { [0,0], [23,0], [23,39], [5,39], [5,19], [0,19] },
        { [3,2], [20,2], [20,36], [8,36], [8,16], [3,16] }
    };
    shape "LONG"  { { [37,19] }, { [3,2], [34,16] } };
    shape "TALL" { { [18,39] }, { [3,2], [15,36] } };
    shape "MED" { { [28,19] }, { [3,2], [25,16] } };
    shape "CAPS" { { [28,19] }, { [3,2], [18,16] } };
    shape "SPCE" { { [131,19] },{ [3,2], [128,16]} };
    shape "LEDS" { [ 30,15] };
    shape "LED"  { [  5, 2] };

    section.left= 17;
    row.left	= 1;
    key.shape	= "NORM";
    key.gap	=  1;

    text "Logo" {left = 20; top = 10; text="digital\n"; };

    section "Function" { top = 20;
        row { top = 1;
    	    keys {  <FK01>, <FK02>, <FK03>, <FK04>, <FK05>,
		    { <FK06>, 15 }, <FK07>, <FK08>, <FK09>, <FK10>,
		    { <FK11>, 15 }, <FK12>, <FK13>, <FK14>,
		    { <FK17>, 75 }, <FK18>, <FK19>, <FK20>
	    };
        };
    };

    section "Editing" { top = 20; left = 320;
        row { top = 1;
	    keys { <HELP>, { <DO>, "LONG" } };
        };
        row { top = 41;
	    keys { <FIND>, <INS>, <DELE> };
        };
        row { top = 61;
	    keys { <SELE>, <PGUP>, <PGDN> };
        };
        row { top = 81;	left = 20;
	    keys { <UP> };
        };
        row { top = 101;
	    keys { <LEFT>, <DOWN>, <RGHT> };
        };
    };

    section "Keypad" { top = 60; left = 385;
        row { top = 1;
	    keys { <PF1>, <PF2>, <PF3>, <PF4> };
        };
        row { top = 21;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
        };
        row { top = 41;
	    keys { <KP4>, <KP5>, <KP6>, <KPCO> };
        };
        row { top = 61;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "TALL" } };
        };
        row { top = 81;
	    keys { { <KP0>, "LONG" }, <KPDL> };
        };
    };

    section "Alpha" { top = 60;
        row { top = 1; left = 15;
	    keys {  <AE00>, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    { <BKSP>, "MED" }
	    };
        };
        row { top = 21;	left = 15;
	    keys {  { <TAB>, "MED" },
		    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <RTRN>, "RTRN" }
	    };
        };
        row { top = 41;
	    keys {  <LCTL>,
		    { <CAPS>, "CAPS" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, <BKSL>
	    };
        };
        row { top = 61;
	    keys {  { <LFSH>, "LONG" },
		    <AB00>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, "LONG" }
	    };
        };
        row { top = 81;	left = 29;
	    keys {  { <LCMP>, "MED" },
		    { <LALT>, "MED" },
		    { <SPCE>, "SPCE" },
		    { <RALT>, "MED" },
		    { <RCMP>, "MED" }
	    };
        };
    };

    section.left = 69;
    section.top  = 3;

    section "Indicators" {
        solid "led_panel" { top = 0; left = 0;
	    cornerRadius = 1;
	    shape = "LEDS";
	    color = "grey";
        };
        indicator.onColor = "#00ff00";
        indicator.offColor= "#001000";
        indicator.top = 1;
        indicator.shape= "LED";
        indicator "Scroll Lock" { left = 3; };
        indicator "Caps Lock" { left = 22; };
        text.top = 4;
        text.color = "black";
        text "ScrollLockLabel" {left = 3; text="Scroll\nLock"; };
        text "CapsLockLabel" {left = 19; text="Caps\nLock"; };
    };
};

xkb_geometry "lk401jj" {

    width		= 460;
    height		= 180;
    shape.cornerRadius  = 1;

    shape "NORM" { { [18,19] }, { [3,2], [15,16] } };
    shape "RTRN" {
	approx = { [0,0],[28,23] },
        { [0,0], [28,0], [28,39], [5,39], [5,19], [0,19] },
        { [3,2], [25,2], [25,36], [8,36], [8,16], [3,16] }
    };
    shape "LONG"  { { [37,19] }, { [3,2], [34,16] } };
    shape "LONG1" { { [32,19] }, { [3,2], [29,16] } };
    shape "TALL" { { [18,39] }, { [3,2], [15,36] } };
    shape "MED" { { [28,19] }, { [3,2], [25,16] } };
    shape "MED1" { { [23,19] }, { [3,2], [20,16] } };
    shape "CTRL" { { [43,19] }, { [3,2], [38,16] } };
    shape "SPCE" { { [55,19] },{ [3,2], [53,16]} };
    shape "LEDS" { [ 56,15] };
    shape "LED"  { [  5, 2] };

    section.left	= 5;
    row.left	= 1;
    key.shape	= "NORM";
    key.gap		=  1;

    text "Logo" {left = 7; top = 10; text="digital\n"; };

    section "Function" { top = 40;
        row { top = 1;
	    keys {  <FK01>, <FK02>, <FK03>, <FK04>, <FK05>,
		    { <FK06>, 18 }, <FK07>, <FK08>, <FK09>, <FK10>,
		    { <FK11>, 18 }, <FK12>, <FK13>, <FK14>,
		    { <FK17>, 73 }, <FK18>, <FK19>, <FK20>
	    };
        };
    };

    section "Editing" { top = 40; left = 313;
        row { top = 1;
	    keys { <HELP>, { <DO>, "LONG" } };
        };
        row { top = 31;
	    keys { <FIND>, <INS>, <DELE> };
        };
        row { top = 51;
	    keys { <SELE>, <PGUP>, <PGDN> };
        };
        row { top = 71;	left= 20;
	    keys { <UP> };
        };
        row { top = 91;
	    keys { <LEFT>, <DOWN>, <RGHT> };
        };
    };

    section "Keypad" { top = 70; left = 377;
        row { top = 1;
	    keys { <PF1>, <PF2>, <PF3>, <PF4> };
        };
        row { top = 21;
	    keys { <KP7>, <KP8>, <KP9>, <KPSU> };
        };
        row { top = 41;
	    keys { <KP4>, <KP5>, <KP6>, <KPCO> };
        };
        row { top = 61;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "TALL" } };
        };
        row { top = 81;
	    keys { { <KP0>, "LONG" }, <KPDL> };
        };
    };

    section "Alpha" { top = 70;
        row { top = 1; left = 7;
	    keys {  { <AE00>, "MED1" }, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    <AB00>, { <BKSP>, "MED1" }
	    };
        };
        row { top = 21; left = 7;
	    keys {  { <TAB>, "LONG1" },
		    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <RTRN>, "RTRN" }
	    };
        };
        row { top = 41;
	    keys {  { <LCTL>, "CTRL" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, <BKSL>
	    };
        };
        row { top = 61;
	    keys {  <CAPS>, { <LFSH>, "LONG1" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    <AB11>, { <RTSH>, "MED" }
	    };
        };
        row { top = 81;	left = 7;
	    keys {  { <LCMP>, "LONG" },
		    { <LALT>, "LONG" },
		    { <MUHE>, "LONG" },
		    { <SPCE>, "SPCE" },
		    { <KANJ>, "LONG" },
		    { <HIRA>, "LONG" },
		    <RALT>, <RCMP>
	    };
        };
    };

    section.left = 315;
    section.top  = 20;

    section "Indicators" {
        solid "led_panel" { top = 0; left = 0;
	    cornerRadius = 1;
	    shape = "LEDS";
	    color = "grey";
        };
        indicator.onColor = "#00ff00";
        indicator.offColor= "#001000";
        indicator.top = 11;
        indicator.shape= "LED";
        indicator "Scroll Lock" { left = 6;  };
        indicator "Caps Lock"   { left = 26; };
        text.top = 4;
        text.color = "black";
        text "ScrollLockLabel" {left = 3; text="Scroll\nLock"; };
        text "CapsLockLabel" {left = 22; text="Caps\nLock"; };
    };
};
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log: pc,v 
// Revision 1.2  1996/06/18  09:12:50  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.6.2  1995/08/18  21:15:18  William_Walker
// 	Upgrade XKB to Protocol Rev. 0.64
// 	[1995/08/18  20:41:49  William_Walker]
//
// Revision 1.1.2.4  1995/08/11  19:35:48  William_Walker
// 	Sync up with Erik's pool.
// 	[1995/08/11  18:36:03  William_Walker]
// 
// Revision 1.1.2.3  1995/06/27  12:17:29  William_Walker
// 	Rename <TLDE> to ISO9995 compliant <AE00>.
// 	[1995/06/26  20:23:10  William_Walker]
// 
// Revision 1.1.2.2  1995/06/05  19:21:19  William_Walker
// 	New file.  I love keymaps.
// 	[1995/06/05  18:05:51  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: pc,v  Revision: 1.2  (DEC) Date: 1996/02/02 14:40:25
// 
partial xkb_geometry "common" {
    width		= 480;
    height		= 200;

    shape.cornerRadius = 1;
    shape "NORM" { primary = { [18,19] }, { [3,2], [15,16] } };
    shape "KP0"  { primary = { [37,19] }, { [3,2], [34,16] } };
    shape "KPAD" { primary = { [18,39] }, { [3,2], [15,36] } };
    shape "LEDS" { [78,22] };
    shape "LED"  { [5,2] };

    text.color         = "black";
    section.left       = 17;
    row.left	       = 1;
    key.shape	       = "NORM";
    key.gap	       =  1;

    section "Function" { top = 40;
        row { top = 1;
	    keys {  <ESC>,
	    	    { <FK01>, 20 }, <FK02>, <FK03>, <FK04>,
	    	    { <FK05>, 10 }, <FK06>, <FK07>, <FK08>,
		    { <FK09>, 10 }, <FK10>, <FK11>, <FK12>
	    };
        };
    };

    section "Editing" { top = 40; left = 308;
        row { top = 1;
    	    keys { <PRSC>, <SCLK>, <PAUS> };
        };
        row { top = 41;
	    keys { <INS>, <HOME>, <PGUP> };
        };
        row { top = 61;
	    keys { <DELE>, <END>, <PGDN> };
        };
        row { top = 101; left = 20;
	    keys { <UP> };
        };
        row { top = 121;
	    keys { <LEFT>, <DOWN>, <RGHT> };
        };
    };

    section "Keypad" { top = 80; left = 374;
        row { top = 1;
	    keys { <NMLK>, <KPDV>, <KPMU>, <KPSU> };
        };
        row { top = 21;
	    keys { <KP7>, <KP8>, <KP9>, { <KPAD>, "KPAD" } };
        };
        row { top = 41;
	    keys { <KP4>, <KP5>, <KP6> };
        };
        row { top = 61;
	    keys { <KP1>, <KP2>, <KP3>, { <KPEN>, "KPAD" } };
        };
        row { top = 81;
	    keys { { <KP0>, "KP0" }, <KPDL> };
        };
    };
};

partial xkb_geometry "leds_on_keys" {
    section.top  = 40;
    section.left = 17;
    section "LedPanel" {
        indicator.onColor  = "#00ff00";
        indicator.offColor = "#001000";
        indicator.shape    = "LED";
        indicator "Scroll Lock" { left = 317; top = 5;  };
        indicator "Num Lock"    { left = 364; top = 45; };
        indicator "Caps Lock"   { left = 10;   top = 85; };
    };

    section.left = 375;
    section.top  = 40;
    section "LogoPanel" {
        solid "logo_panel" { top = 0; left = 0;
            shape = "LEDS";
	    color = "grey";
        };
        text "Logo" {left = 28; top = 10; text="digital\n"; };
    };
};

partial xkb_geometry "leds_alone" {
    section.left = 375;
    section.top  = 40;
    section "Indicators" {
        solid "led_panel" { top = 0; left = 0;
	    shape = "LEDS";
	    color = "grey";
        };
        indicator.top = 16;
        indicator.onColor  = "#00ff00";
        indicator.offColor = "#001000";
        indicator.shape    = "LED";
        indicator "Num Lock" 	{ left = 3;  };
        indicator "Caps Lock"	{ left = 26; };
        indicator "Scroll Lock" { left = 50; };
        text "Logo" {left = 2; top = 3; text="digital\n"; };
    };
    section "IndicatorLabels" {
	text.top = 11;
    	text "NumLockLabel"    {left = 10; text="Num\nLock";    };
    	text "CapsLockLabel"   {left = 33; text="Caps\nLock";   };
    	text "ScrollLockLabel" {left = 58; text="Scroll\nLock"; };
    };
};

xkb_geometry "pc101" {
    include "digital_vndr/pc(common)"

    shape.cornerRadius = 1;
    shape "BKSP" { primary = { [36,19] }, { [3,2], [33,16] } };
    shape "TABK" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "RTRN" { primary = { [41,19] }, { [3,2], [38,16] } };
    shape "CAPS" { primary = { [32,19] }, { [3,2], [29,16] } };
    shape "LFSH" { primary = { [41,19] }, { [3,2], [38,16] } };
    shape "RTSH" { primary = { [51,19] }, { [3,2], [49,16] } };
    shape "MODK" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "BKSL" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "SPCE" { primary = { [132,19] },{ [3,2], [129,16]} };

    section.left       = 17;
    row.left	       = 1;
    key.shape	       = "NORM";
    key.gap	       =  1;

    section "Alpha" { top = 80;
        row { top = 1;
	    keys {  <AE00>, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    { <BKSP>, "BKSP" }
	    };
        };
        row { top = 21;
	    keys {  { <TAB>, "TABK" },
		    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <BKSL>, "BKSL" }
	    };

        };
        row { top = 41;
	    keys {  { <CAPS>, "CAPS" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>,
		    { <RTRN>, "RTRN" }
	    };
        };
        row { top = 61;
	    keys {  { <LFSH>, "LFSH" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, <AB06>, 
                    <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, "RTSH" }
	    };
        };
        row { top = 81;
	    key.shape = "MODK";
	    keys {  <LCTL>,
		    { <LALT>, 20 },
		    { <SPCE>, "SPCE" },
		    <RALT>,
		    { <RCTL>, 21 }
	    };
        };
    };
};

xkb_geometry "pc102" {
    include "digital_vndr/pc(common)"

    shape.cornerRadius = 1;
    shape "BKSP" { primary = { [36,19] }, { [3,2], [33,16] } };
    shape "TABK" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "RTRN" { 
        approx = { [0,0],[28,19] },
        { [0,0], [27,0], [27,39], [5,39], [5,19], [0,19] },
        { [3,2], [24,2], [24,36], [8,36], [8,16], [3,16] }
    };
    shape "CAPS" { primary = { [32,19] }, { [3,2], [29,16] } };
    shape "LFSH" { primary = { [22,19] }, { [3,2], [19,16] } };
    shape "RTSH" { primary = { [51,19] }, { [3,2], [49,16] } };
    shape "MODK" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "BKSL" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "SPCE" { primary = { [132,19] },{ [3,2], [129,16]} };

    section.left       = 17;
    row.left	       = 1;
    key.shape	       = "NORM";
    key.gap	       =  1;

    section "Alpha" { top = 80;
        row { top = 1;
	    keys {  <AE00>, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    { <BKSP>, "BKSP" }
	    };
        };
        row { top = 21;
	    keys {  { <TAB>, "TABK" },
		    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <RTRN>, "RTRN" }
	    };

        };
        row { top = 41;
	    keys {  { <CAPS>, "CAPS" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, <AC12>
	    };
        };
        row { top = 61;
	    keys {  { <LFSH>, "LFSH" },
		    <BKSL>, <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
	            <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, "RTSH" }
	    };
        };
        row { top = 81;
	    key.shape = "MODK";
	    keys {  <LCTL>,
		    { <LALT>, 20 },
		    { <SPCE>, "SPCE" },
		    <RALT>,
		    { <RCTL>, 21 }
	    };
        };
    };
};

xkb_geometry "pcxaj" {
    include "digital_vndr/pc(common)"

    shape.cornerRadius = 1;
    shape "BKSP" { primary = { [36,19] }, { [3,2], [33,16] } };
    shape "TABK" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "RTRN" { primary = { [22,19] }, { [3,2], [19,16] } };
    shape "CAPS" { primary = { [32,19] }, { [3,2], [29,16] } };
    shape "LFSH" { primary = { [41,19] }, { [3,2], [38,16] } };
    shape "RTSH" { primary = { [32,19] }, { [3,2], [29,16] } };
    shape "MODK" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "BKSL" { primary = { [27,19] }, { [3,2], [24,16] } };
    shape "SPCE" { primary = { [114,19]}, { [3,2], [111,16]} };

    section.left       = 17;
    row.left	       = 1;
    key.shape	       = "NORM";
    key.gap	       =  1;

    section "Alpha" { top = 80;
        row { top = 1;
	    keys {  <AE00>, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    { <BKSP>, "BKSP" }
	    };
        };
        row { top = 21;
	    keys {  { <TAB>, "TABK" },
		    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <BKSL>, "BKSL" }
	    };
        };
        row { top = 41;
	    keys {  { <CAPS>, "CAPS" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, <AC12>,
		    { <RTRN>, "RTRN" }
	    };
        };
        row { top = 61;
	    keys {  { <LFSH>, "LFSH" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, <AB06>, 
		    <AB07>, <AB08>, <AB09>, <AB10>, <AB11>,
		    { <RTSH>, "RTSH" }
	    };
        };
        row { top = 81;
	    key.shape = "MODK";
	    keys {  <LCTL>, <LALT>, 
		    { <MUHE>, "NORM" }, 
		    { <SPCE>, "SPCE" },
		    { <KANJ>, "NORM" },
		    { <HIRA>, "NORM" },
		    <RALT>, <RCTL>
	    };
        };
    };
};
//
//Copyright (c) 1996  Digital Equipment Corporation
//
//Permission is hereby granted, free of charge, to any person obtaining
//a copy of this software and associated documentation files (the
//"Software"), to deal in the Software without restriction, including
//without limitation the rights to use, copy, modify, merge, publish,
//distribute, sublicense, and sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to
//the following conditions:
//
//The above copyright notice and this permission notice shall be included
//in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
//OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
//MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
//IN NO EVENT SHALL DIGITAL EQUIPMENT CORPORATION BE LIABLE FOR ANY CLAIM,
//DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
//THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//Except as contained in this notice, the name of the Digital Equipment 
//Corporation shall not be used in advertising or otherwise to promote
//the sale, use or other dealings in this Software without prior written
//authorization from Digital Equipment Corporation.
//
// HISTORY
// Log: unix,v 
// Revision 1.2  1996/06/18  09:12:53  erik
// use flags correctly, assorted cleanups and consortium fixes
//
// Revision 1.1.2.3  1995/06/27  12:17:30  William_Walker
// 	Rename <TLDE> to ISO9995 compliant <AE00>.
// 	[1995/06/26  20:23:12  William_Walker]
//
// Revision 1.1.2.2  1995/06/05  19:21:23  William_Walker
// 	New file.  I love keymaps.
// 	[1995/06/05  18:05:56  William_Walker]
// 
// EndLog
// 
// @(#)RCSfile: unix,v  Revision: 1.2  (DEC) Date: 1996/01/24 12:16:
// 
xkb_geometry "unix" {

    width		= 340;
    height		= 160;
    shape.cornerRadius 	= 1;

    shape "NORM" { primary = { [18,19] }, { [3,2], [15,16] } };
    shape "AE00" { primary = { [28,19] }, { [3,2], [25,16] } };
    shape "BKSP" { primary = { [46,19] }, { [3,2], [43,16] } };
    shape "TABK" { primary = { [37,19] }, { [3,2], [34,16] } };
    shape "CTRL" { primary = { [46,19] }, { [3,2], [43,16] } };
    shape "RTRN" { primary = { [46,19] }, { [3,2], [43,16] } };
    shape "SHFT" { primary = { [56,19] }, { [3,2], [53,16] } };
    shape "MODK" { primary = { [37,19] }, { [3,2], [34,16] } };
    shape "SPCE" { primary = { [132,19] },{ [3,2], [129,16]} };

    section.left= 17;
    row.left	= 1;
    key.shape	= "NORM";
    key.gap	=  1;

    text.color      = "black";
    text "Logo" {left = 20; top = 10; text="digital\n"; };

    section "Function" { top = 30;
        row { top = 1;
	    keys {  <FK01>, <FK02>, <FK03>, <FK04>, <FK05>, 
		    { <FK06>, 20 }, <FK07>, <FK08>, <FK09>, <FK10>,
		    { <LEFT>, 20 }, <DOWN>, <UP>, <RGHT>
	    };
        };
    };

    section "Alpha" { top = 50;
        row { top = 1;
	    keys {  { <AE00>, "AE00" }, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    { <BKSP>, "BKSP" }
	    };
        };
        row { top = 21;
	    keys {  { <TAB>, "TABK" },
		    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    <BKSL>, <AB00>
	    };

        };
        row { top = 41; left = -4;
	    keys {  { <LCTL>, "CTRL" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, 
		    { <RTRN>, "RTRN" }
	    };
        };
        row { top = 61; left = -4;
	    keys {  { <LFSH>, "SHFT" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, <AB06>, 
		    <AB07>, <AB08>, <AB09>, <AB10>,
		    { <RTSH>, "SHFT" }
	    };
        };
        solid "ExtendKey" { top = 81; left= 1;
            shape= "NORM";
            color= "grey20";
        };
        text.top = 89;
        text.color = "black";
        text "ExtendLabel" {left = 6; text="Ext\nend"; };
        row { top = 81; left = 19;
	    key.shape = "MODK";
	    keys {  { <LCMP>, "NORM" }, <LALT>,
		    { <SPCE>, "SPCE" },
		    <RALT>, <RCMP> 
	    };
        };
    };
};

xkb_geometry "lk421jj" {

    width		= 315;
    height		= 170;
    shape.cornerRadius  = 1;

    shape "NORM" { { [18,19] }, { [3,2], [15,16] } };
    shape "RTRN" {
	approx = { [0,0],[28,23] },
        { [0,0], [28,0], [28,39], [5,39], [5,19], [0,19] },
        { [3,2], [25,2], [25,36], [8,36], [8,16], [3,16] }
    };
    shape "LONG"  { { [37,19] }, { [3,2], [34,16] } };
    shape "LONG1" { { [32,19] }, { [3,2], [29,16] } };
    shape "TALL" { { [18,39] }, { [3,2], [15,36] } };
    shape "MED" { { [23,19] }, { [3,2], [20,16] } };
    shape "CTRL" { { [43,19] }, { [3,2], [38,16] } };
    shape "SPCE" { { [55,19] },{ [3,2], [53,16]} };
    shape "LEDS" { [ 56,15] };
    shape "LED"  { [  5, 2] };

    section.left	= 5;
    row.left	= 1;
    key.shape	= "NORM";
    key.gap		=  1;

    text "Logo" {left = 7; top = 10; text="digital\n"; };

    section "Function" { top = 45;
        row { top = 1; left = 7;
	    keys {  <FK01>, <FK02>, <FK03>, <FK04>, <FK05>,
		    { <FK06>, 18 }, <FK07>, <FK08>, <FK09>, <FK10>
	    };
        };
    };

    section "Editing" { top = 45; left= 230;
        row { top = 1;
	    keys { <LEFT>, <DOWN>, <UP>, <RGHT> };
        };
    };

    section "Alpha" { top = 65;
        row { top = 1; left = 7;
	    keys {  { <AE00>, "MED" }, 
		    <AE01>, <AE02>, <AE03>, <AE04>, <AE05>, <AE06>, 
		    <AE07>, <AE08>, <AE09>, <AE10>, <AE11>, <AE12>, 
		    <AB00>, { <BKSP>, "MED" }
	    };
        };
        row { top = 21;	left = 7;
	    keys {  { <TAB>, "LONG1" },
		    <AD01>, <AD02>, <AD03>, <AD04>, <AD05>, <AD06>, 
		    <AD07>, <AD08>, <AD09>, <AD10>, <AD11>, <AD12>, 
		    { <RTRN>, "RTRN" }
	    };
        };
        row { top = 41;
	    keys {  { <LCTL>, "CTRL" },
		    <AC01>, <AC02>, <AC03>, <AC04>, <AC05>, <AC06>, 
		    <AC07>, <AC08>, <AC09>, <AC10>, <AC11>, <BKSL>
	    };
        };
        row { top = 61;
	    keys {  <CAPS>, { <LFSH>, "LONG1" },
		    <AB01>, <AB02>, <AB03>, <AB04>, <AB05>, 
		    <AB06>, <AB07>, <AB08>, <AB09>, <AB10>,
		    <AB11>, { <RTSH>, "LONG1" }
	    };
        };
        row { top = 81;	left = 7;
	    keys {  <AA00>, <LCMP>,
		    { <LALT>, "LONG" },
		    { <MUHE>, "LONG" },
		    { <SPCE>, "SPCE" },
		    { <KANJ>, "LONG" },
		    { <HIRA>, "LONG" },
		    <RALT>, <RCMP>
	    };
        };
    };

    section.left = 233;
    section.top  = 20;

    section "Indicators" {
        solid "led_panel" { top = 0; left = 0;
	    cornerRadius = 1;
	    shape = "LEDS";
	    color = "grey";
        };
        indicator.onColor = "#00ff00";
        indicator.offColor= "#001000";
        indicator.top = 11;
        indicator.shape= "LED";
        indicator "Scroll Lock" { left = 6;  };
        indicator "Caps Lock"   { left = 26; };
        text.top = 3;
        text.color = "black";
        text "ScrollLockLabel" {left = 3; text="Scroll\nLock"; };
        text "CapsLockLabel" {left = 22; text="Caps\nLock"; };
    };
};
